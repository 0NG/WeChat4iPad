// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmcontact.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mmcontact.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micromsg {
class GetBrandListRequestBufferDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetBrandListRequestBuffer> {
} _GetBrandListRequestBuffer_default_instance_;
class GetBrandListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetBrandListRequest> {
} _GetBrandListRequest_default_instance_;
class GetBrandListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetBrandListResponse> {
} _GetBrandListResponse_default_instance_;
class APPItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<APPItem> {
} _APPItem_default_instance_;
class SetAPPListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetAPPListRequest> {
} _SetAPPListRequest_default_instance_;
class SetAPPListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetAPPListResponse> {
} _SetAPPListResponse_default_instance_;
class GetAPPListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetAPPListRequest> {
} _GetAPPListRequest_default_instance_;
class GetAPPListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetAPPListResponse> {
} _GetAPPListResponse_default_instance_;
class SearchQRCodeReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchQRCodeReq> {
} _SearchQRCodeReq_default_instance_;
class SearchQRCodeRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchQRCodeResp> {
} _SearchQRCodeResp_default_instance_;
class SearchContactRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchContactRequest> {
} _SearchContactRequest_default_instance_;
class SearchContactItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchContactItem> {
} _SearchContactItem_default_instance_;
class SearchContactResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchContactResponse> {
} _SearchContactResponse_default_instance_;
class GroupCardReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GroupCardReq> {
} _GroupCardReq_default_instance_;
class RadarMemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RadarMember> {
} _RadarMember_default_instance_;
class RadarCreateChatRoomParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RadarCreateChatRoomParameter> {
} _RadarCreateChatRoomParameter_default_instance_;
class CreateChatRoomRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateChatRoomRequest> {
} _CreateChatRoomRequest_default_instance_;
class CreateChatRoomResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateChatRoomResponse> {
} _CreateChatRoomResponse_default_instance_;
class AddChatRoomMemberRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddChatRoomMemberRequest> {
} _AddChatRoomMemberRequest_default_instance_;
class AddChatRoomMemberResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddChatRoomMemberResponse> {
} _AddChatRoomMemberResponse_default_instance_;
class DelChatRoomMemberRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelChatRoomMemberRequest> {
} _DelChatRoomMemberRequest_default_instance_;
class DelChatRoomMemberResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelChatRoomMemberResponse> {
} _DelChatRoomMemberResponse_default_instance_;
class CollectChatRoomReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CollectChatRoomReq> {
} _CollectChatRoomReq_default_instance_;
class CollectChatRoomRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CollectChatRoomResp> {
} _CollectChatRoomResp_default_instance_;
class BatchGetHeadImgRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchGetHeadImgRequest> {
} _BatchGetHeadImgRequest_default_instance_;
class ImgPairDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImgPair> {
} _ImgPair_default_instance_;
class BatchGetHeadImgResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchGetHeadImgResponse> {
} _BatchGetHeadImgResponse_default_instance_;
class SearchFriendRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchFriendRequest> {
} _SearchFriendRequest_default_instance_;
class FriendInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FriendInfo> {
} _FriendInfo_default_instance_;
class SearchFriendResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchFriendResponse> {
} _SearchFriendResponse_default_instance_;
class GetChatRoomUpgradeInfoReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetChatRoomUpgradeInfoReq> {
} _GetChatRoomUpgradeInfoReq_default_instance_;
class GetChatRoomUpgradeInfoRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetChatRoomUpgradeInfoResp> {
} _GetChatRoomUpgradeInfoResp_default_instance_;
class KeyValStrDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KeyValStr> {
} _KeyValStr_default_instance_;
class GetDonateInfoReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetDonateInfoReq> {
} _GetDonateInfoReq_default_instance_;
class GetDonateInfoRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetDonateInfoResp> {
} _GetDonateInfoResp_default_instance_;
class GetPayPurchasePackageReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetPayPurchasePackageReq> {
} _GetPayPurchasePackageReq_default_instance_;
class GetPayPurchasePackageRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetPayPurchasePackageResp> {
} _GetPayPurchasePackageResp_default_instance_;
class VerifyPayTransitionReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VerifyPayTransitionReq> {
} _VerifyPayTransitionReq_default_instance_;
class VerifyPayTransitionRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VerifyPayTransitionResp> {
} _VerifyPayTransitionResp_default_instance_;
class GetChatRoomDonateHistoryReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetChatRoomDonateHistoryReq> {
} _GetChatRoomDonateHistoryReq_default_instance_;
class DonorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Donor> {
} _Donor_default_instance_;
class GetChatRoomDonateHistoryRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetChatRoomDonateHistoryResp> {
} _GetChatRoomDonateHistoryResp_default_instance_;
class GetChatRoomPresentHistoryReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetChatRoomPresentHistoryReq> {
} _GetChatRoomPresentHistoryReq_default_instance_;
class PresentationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Presentation> {
} _Presentation_default_instance_;
class GetChatRoomPresentHistoryRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetChatRoomPresentHistoryResp> {
} _GetChatRoomPresentHistoryResp_default_instance_;
class GetPersonalDonateHistoryReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetPersonalDonateHistoryReq> {
} _GetPersonalDonateHistoryReq_default_instance_;
class DonateHistoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DonateHistory> {
} _DonateHistory_default_instance_;
class GetPersonalDonateHistoryRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetPersonalDonateHistoryResp> {
} _GetPersonalDonateHistoryResp_default_instance_;
class VerifyPersonalInfoReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VerifyPersonalInfoReq> {
} _VerifyPersonalInfoReq_default_instance_;
class VerifyPersonalInfoRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VerifyPersonalInfoResp> {
} _VerifyPersonalInfoResp_default_instance_;
class VerifyChatRoomReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VerifyChatRoomReq> {
} _VerifyChatRoomReq_default_instance_;
class VerifyChatRoomRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VerifyChatRoomResp> {
} _VerifyChatRoomResp_default_instance_;
class QuitChatRoomReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QuitChatRoomReq> {
} _QuitChatRoomReq_default_instance_;
class QuitChatRoomRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QuitChatRoomResp> {
} _QuitChatRoomResp_default_instance_;
class GetChatRoomUpgradeStatusReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetChatRoomUpgradeStatusReq> {
} _GetChatRoomUpgradeStatusReq_default_instance_;
class GetChatRoomUpgradeStatusRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetChatRoomUpgradeStatusResp> {
} _GetChatRoomUpgradeStatusResp_default_instance_;
class UpgradeChatRoomReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpgradeChatRoomReq> {
} _UpgradeChatRoomReq_default_instance_;
class UpgradeChatRoomRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpgradeChatRoomResp> {
} _UpgradeChatRoomResp_default_instance_;
class AddChatRoomDonateRecordReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddChatRoomDonateRecordReq> {
} _AddChatRoomDonateRecordReq_default_instance_;
class AddChatRoomDonateRecordRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddChatRoomDonateRecordResp> {
} _AddChatRoomDonateRecordResp_default_instance_;
class GoogleContactUploadItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GoogleContactUploadItem> {
} _GoogleContactUploadItem_default_instance_;
class ListGoogleContactRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListGoogleContactRequest> {
} _ListGoogleContactRequest_default_instance_;
class GoogleContactItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GoogleContactItem> {
} _GoogleContactItem_default_instance_;
class ListGoogleContactResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListGoogleContactResponse> {
} _ListGoogleContactResponse_default_instance_;
class InviteGoogleContactItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InviteGoogleContactItem> {
} _InviteGoogleContactItem_default_instance_;
class InviteGoogleContactRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InviteGoogleContactRequest> {
} _InviteGoogleContactRequest_default_instance_;
class InviteGoogleContactResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InviteGoogleContactResponse> {
} _InviteGoogleContactResponse_default_instance_;
class BBMContactUploadItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BBMContactUploadItem> {
} _BBMContactUploadItem_default_instance_;
class ListBBMContactRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListBBMContactRequest> {
} _ListBBMContactRequest_default_instance_;
class BBMContactItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BBMContactItem> {
} _BBMContactItem_default_instance_;
class ListBBMContactResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListBBMContactResponse> {
} _ListBBMContactResponse_default_instance_;
class OnlineInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OnlineInfo> {
} _OnlineInfo_default_instance_;
class GetOnlineInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetOnlineInfoRequest> {
} _GetOnlineInfoRequest_default_instance_;
class GetOnlineInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetOnlineInfoResponse> {
} _GetOnlineInfoResponse_default_instance_;
class GetChatroomMemberDetailRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetChatroomMemberDetailRequest> {
} _GetChatroomMemberDetailRequest_default_instance_;
class GetChatroomMemberDetailResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetChatroomMemberDetailResponse> {
} _GetChatroomMemberDetailResponse_default_instance_;
class GetContactRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetContactRequest> {
} _GetContactRequest_default_instance_;
class GetContactResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetContactResponse> {
} _GetContactResponse_default_instance_;
class UploadCardImgRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UploadCardImgRequest> {
} _UploadCardImgRequest_default_instance_;
class UploadCardImgResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UploadCardImgResponse> {
} _UploadCardImgResponse_default_instance_;
class DeleteCardImgRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeleteCardImgRequest> {
} _DeleteCardImgRequest_default_instance_;
class DeleteCardImgResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeleteCardImgResponse> {
} _DeleteCardImgResponse_default_instance_;
class InviteChatRoomMemberRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InviteChatRoomMemberRequest> {
} _InviteChatRoomMemberRequest_default_instance_;
class InviteChatRoomMemberResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InviteChatRoomMemberResponse> {
} _InviteChatRoomMemberResponse_default_instance_;
class LabelPairDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LabelPair> {
} _LabelPair_default_instance_;
class AddContactLabelRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddContactLabelRequest> {
} _AddContactLabelRequest_default_instance_;
class AddContactLabelResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddContactLabelResponse> {
} _AddContactLabelResponse_default_instance_;
class DelContactLabelRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelContactLabelRequest> {
} _DelContactLabelRequest_default_instance_;
class DelContactLabelResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelContactLabelResponse> {
} _DelContactLabelResponse_default_instance_;
class UpdateContactLabelRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateContactLabelRequest> {
} _UpdateContactLabelRequest_default_instance_;
class UpdateContactLabelResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateContactLabelResponse> {
} _UpdateContactLabelResponse_default_instance_;
class GetContactLabelListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetContactLabelListRequest> {
} _GetContactLabelListRequest_default_instance_;
class GetContactLabelListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetContactLabelListResponse> {
} _GetContactLabelListResponse_default_instance_;
class UserLabelInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserLabelInfo> {
} _UserLabelInfo_default_instance_;
class ModifyContactLabelListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModifyContactLabelListRequest> {
} _ModifyContactLabelListRequest_default_instance_;
class ModifyContactLabelListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModifyContactLabelListResponse> {
} _ModifyContactLabelListResponse_default_instance_;
class TransferChatRoomOwnerRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransferChatRoomOwnerRequest> {
} _TransferChatRoomOwnerRequest_default_instance_;
class TransferChatRoomOwnerResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransferChatRoomOwnerResponse> {
} _TransferChatRoomOwnerResponse_default_instance_;
class GetChatRoomAnnouncementRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetChatRoomAnnouncementRequest> {
} _GetChatRoomAnnouncementRequest_default_instance_;
class GetChatRoomAnnouncementResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetChatRoomAnnouncementResponse> {
} _GetChatRoomAnnouncementResponse_default_instance_;
class SetChatRoomAnnouncementRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetChatRoomAnnouncementRequest> {
} _SetChatRoomAnnouncementRequest_default_instance_;
class SetChatRoomAnnouncementResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetChatRoomAnnouncementResponse> {
} _SetChatRoomAnnouncementResponse_default_instance_;
class GetChatRoomInfoDetailRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetChatRoomInfoDetailRequest> {
} _GetChatRoomInfoDetailRequest_default_instance_;
class GetChatRoomInfoDetailResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetChatRoomInfoDetailResponse> {
} _GetChatRoomInfoDetailResponse_default_instance_;

namespace protobuf_mmcontact_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[104];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrandListRequestBuffer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrandListRequestBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrandListRequestBuffer, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrandListRequestBuffer, hiddencount_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrandListRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrandListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrandListRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrandListRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrandListRequest, requestbuffer_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrandListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrandListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrandListResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrandListResponse, brandlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrandListResponse, requestbuffer_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APPItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APPItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APPItem, username_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAPPListRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAPPListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAPPListRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAPPListRequest, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAPPListRequest, list_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAPPListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAPPListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAPPListResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAPPListResponse, hash_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAPPListRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAPPListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAPPListRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAPPListRequest, hash_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAPPListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAPPListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAPPListResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAPPListResponse, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAPPListResponse, list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAPPListResponse, hash_),
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchQRCodeReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchQRCodeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchQRCodeReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchQRCodeReq, qrcode_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchQRCodeResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchQRCodeResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchQRCodeResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchQRCodeResp, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchQRCodeResp, url_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactRequest, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactRequest, reqbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactRequest, fromscene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactRequest, searchscene_),
  0,
  1,
  3,
  2,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, pyinitial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, quanpin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, imgbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, province_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, city_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, personalcard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, verifyflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, verifyinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, weibo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, weibonickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, weiboflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, albumstyle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, albumflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, albumbgimgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, snsuserinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, mybrandlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, customizedinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, bigheadimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, smallheadimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, antispamticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactItem, matchtype_),
  13,
  14,
  15,
  16,
  20,
  17,
  0,
  1,
  2,
  21,
  22,
  3,
  4,
  5,
  6,
  23,
  24,
  25,
  7,
  18,
  8,
  9,
  19,
  10,
  11,
  12,
  26,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, pyinitial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, quanpin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, imgbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, province_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, city_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, personalcard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, verifyflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, verifyinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, weibo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, weibonickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, weiboflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, albumstyle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, albumflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, albumbgimgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, snsuserinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, mybrandlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, customizedinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, contactcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, contactlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, bigheadimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, smallheadimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, resbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, antispamticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, kfworkerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchContactResponse, matchtype_),
  14,
  15,
  16,
  17,
  18,
  23,
  19,
  0,
  1,
  2,
  24,
  25,
  3,
  4,
  5,
  6,
  26,
  27,
  28,
  7,
  20,
  8,
  9,
  21,
  29,
  ~0u,
  10,
  11,
  22,
  12,
  13,
  30,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupCardReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupCardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupCardReq, groupcardname_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarMember, membername_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarCreateChatRoomParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarCreateChatRoomParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarCreateChatRoomParameter, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarCreateChatRoomParameter, radarmembercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarCreateChatRoomParameter, radarmemberlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, membercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, memberlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, extbuffer_),
  0,
  1,
  3,
  ~0u,
  4,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomResponse, topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomResponse, pyinitial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomResponse, quanpin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomResponse, membercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomResponse, memberlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomResponse, chatroomname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomResponse, imgbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomResponse, bigheadimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomResponse, smallheadimgurl_),
  2,
  3,
  4,
  5,
  8,
  ~0u,
  6,
  7,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomMemberRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomMemberRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomMemberRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomMemberRequest, membercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomMemberRequest, memberlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomMemberRequest, chatroomname_),
  0,
  2,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomMemberResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomMemberResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomMemberResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomMemberResponse, membercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomMemberResponse, memberlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelChatRoomMemberRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelChatRoomMemberRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelChatRoomMemberRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelChatRoomMemberRequest, membercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelChatRoomMemberRequest, memberlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelChatRoomMemberRequest, chatroomname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelChatRoomMemberRequest, scene_),
  1,
  2,
  ~0u,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelChatRoomMemberResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelChatRoomMemberResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelChatRoomMemberResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelChatRoomMemberResponse, membercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelChatRoomMemberResponse, memberlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectChatRoomReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectChatRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectChatRoomReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectChatRoomReq, groupcardcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectChatRoomReq, groupcardlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectChatRoomResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectChatRoomResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectChatRoomResp, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetHeadImgRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetHeadImgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetHeadImgRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetHeadImgRequest, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetHeadImgRequest, usernamelist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgPair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgPair, imgbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgPair, username_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetHeadImgResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetHeadImgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetHeadImgResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetHeadImgResponse, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetHeadImgResponse, imgpairlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFriendRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFriendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFriendRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFriendRequest, username_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, displayusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, displaynickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, displayremark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, wxusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, wxnickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, wxremark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, matchfield_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, alias_),
  0,
  1,
  2,
  3,
  4,
  5,
  8,
  9,
  6,
  10,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFriendResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFriendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFriendResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFriendResponse, friendcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFriendResponse, friendlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeInfoReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeInfoReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeInfoReq, chatroomname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeInfoReq, scene_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeInfoResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeInfoResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeInfoResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeInfoResp, chatroomupgradeinfo_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValStr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValStr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValStr, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValStr, val_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDonateInfoReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDonateInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDonateInfoReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDonateInfoReq, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDonateInfoReq, scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDonateInfoReq, extinfo_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDonateInfoResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDonateInfoResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDonateInfoResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDonateInfoResp, donateinfo_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPayPurchasePackageReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPayPurchasePackageReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPayPurchasePackageReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPayPurchasePackageReq, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPayPurchasePackageReq, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPayPurchasePackageReq, pricetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPayPurchasePackageReq, extinfo_),
  2,
  3,
  4,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPayPurchasePackageResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPayPurchasePackageResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPayPurchasePackageResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPayPurchasePackageResp, package_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPayPurchasePackageResp, extinfo_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPayTransitionReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPayTransitionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPayTransitionReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPayTransitionReq, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPayTransitionReq, outtradeno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPayTransitionReq, extinfo_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPayTransitionResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPayTransitionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPayTransitionResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPayTransitionResp, resultmsg_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDonateHistoryReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDonateHistoryReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDonateHistoryReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDonateHistoryReq, chatroomname_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Donor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Donor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Donor, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Donor, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Donor, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Donor, donatetitle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Donor, donateurl_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDonateHistoryResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDonateHistoryResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDonateHistoryResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDonateHistoryResp, totalcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDonateHistoryResp, list_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomPresentHistoryReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomPresentHistoryReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomPresentHistoryReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomPresentHistoryReq, chatroomname_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Presentation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Presentation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Presentation, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Presentation, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Presentation, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Presentation, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Presentation, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Presentation, weburl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Presentation, num_),
  4,
  0,
  1,
  2,
  5,
  3,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomPresentHistoryResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomPresentHistoryResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomPresentHistoryResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomPresentHistoryResp, totalcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomPresentHistoryResp, list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomPresentHistoryResp, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomPresentHistoryResp, donatestatus_),
  1,
  2,
  ~0u,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDonateHistoryReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDonateHistoryReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDonateHistoryReq, baserequest_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateHistory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateHistory, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateHistory, donatetitle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateHistory, donateurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateHistory, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonateHistory, donatethumburl_),
  3,
  0,
  1,
  4,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDonateHistoryResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDonateHistoryResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDonateHistoryResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDonateHistoryResp, totalamount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDonateHistoryResp, totalcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDonateHistoryResp, list_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPersonalInfoReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPersonalInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPersonalInfoReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPersonalInfoReq, userrealname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPersonalInfoReq, useridcardtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPersonalInfoReq, useridcardnum_),
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPersonalInfoResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPersonalInfoResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPersonalInfoResp, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyChatRoomReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyChatRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyChatRoomReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyChatRoomReq, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyChatRoomReq, applyusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyChatRoomReq, chatroomname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyChatRoomReq, ticket_),
  3,
  4,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyChatRoomResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyChatRoomResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyChatRoomResp, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoomReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoomReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoomReq, chatroomname_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoomResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoomResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoomResp, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeStatusReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeStatusReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeStatusReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeStatusReq, chatroomname_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeStatusResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeStatusResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeStatusResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeStatusResp, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeStatusResp, mobilequota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeStatusResp, cardquota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeStatusResp, donatequota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeStatusResp, maxcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeStatusResp, resultmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomUpgradeStatusResp, totalquota_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeChatRoomReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeChatRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeChatRoomReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeChatRoomReq, chatroomname_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeChatRoomResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeChatRoomResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeChatRoomResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeChatRoomResp, chatroomdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeChatRoomResp, resultmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeChatRoomResp, maxcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeChatRoomResp, mobilequota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeChatRoomResp, cardquota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeChatRoomResp, donatequota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeChatRoomResp, totalquota_),
  2,
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomDonateRecordReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomDonateRecordReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomDonateRecordReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomDonateRecordReq, chatroomname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomDonateRecordReq, transid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomDonateRecordReq, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomDonateRecordReq, weburl_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomDonateRecordResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomDonateRecordResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomDonateRecordResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChatRoomDonateRecordResp, maxcount_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoogleContactUploadItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoogleContactUploadItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoogleContactUploadItem, googlecontactname_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGoogleContactRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGoogleContactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGoogleContactRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGoogleContactRequest, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGoogleContactRequest, list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGoogleContactRequest, continueflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGoogleContactRequest, clicksource_),
  0,
  1,
  ~0u,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoogleContactItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoogleContactItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoogleContactItem, googlecontactname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoogleContactItem, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoogleContactItem, bigheadurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoogleContactItem, smallheadurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoogleContactItem, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoogleContactItem, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoogleContactItem, antispamticket_),
  0,
  1,
  2,
  3,
  6,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGoogleContactResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGoogleContactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGoogleContactResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGoogleContactResponse, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGoogleContactResponse, list_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteGoogleContactItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteGoogleContactItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteGoogleContactItem, googlecontactname_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteGoogleContactRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteGoogleContactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteGoogleContactRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteGoogleContactRequest, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteGoogleContactRequest, list_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteGoogleContactResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteGoogleContactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteGoogleContactResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteGoogleContactResponse, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteGoogleContactResponse, rets_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBMContactUploadItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBMContactUploadItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBMContactUploadItem, bbppid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBMContactUploadItem, bbpin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBMContactUploadItem, bbmnickname_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBBMContactRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBBMContactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBBMContactRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBBMContactRequest, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBBMContactRequest, list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBBMContactRequest, continueflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBBMContactRequest, clicksource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBBMContactRequest, opcode_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBMContactItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBMContactItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBMContactItem, bbppid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBMContactItem, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBMContactItem, bigheadurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBMContactItem, smallheadurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBMContactItem, bbpin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBMContactItem, bbmnickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBMContactItem, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBMContactItem, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBMContactItem, antispamticket_),
  0,
  1,
  2,
  3,
  4,
  5,
  8,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBBMContactResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBBMContactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBBMContactResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBBMContactResponse, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBBMContactResponse, list_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineInfo, devicetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineInfo, deviceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineInfo, wordingxml_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineInfo, clientkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineInfo, onlinestatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineInfo, devicehelpertype_),
  3,
  0,
  1,
  2,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineInfoRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineInfoRequest, language_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineInfoResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineInfoResponse, onlinecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineInfoResponse, onlinelist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineInfoResponse, summaryxml_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineInfoResponse, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineInfoResponse, icontype_),
  1,
  2,
  ~0u,
  0,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatroomMemberDetailRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatroomMemberDetailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatroomMemberDetailRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatroomMemberDetailRequest, chatroomusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatroomMemberDetailRequest, clientversion_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatroomMemberDetailResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatroomMemberDetailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatroomMemberDetailResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatroomMemberDetailResponse, chatroomusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatroomMemberDetailResponse, serverversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatroomMemberDetailResponse, newchatroomdata_),
  1,
  0,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactRequest, usercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactRequest, usernamelist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactRequest, antispamticketcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactRequest, antispamticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactRequest, fromchatroomcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactRequest, fromchatroom_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactResponse, contactcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactResponse, contactlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactResponse, ret_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCardImgRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCardImgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCardImgRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCardImgRequest, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCardImgRequest, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCardImgRequest, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCardImgRequest, datalen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCardImgRequest, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCardImgRequest, contactusername_),
  2,
  0,
  4,
  5,
  6,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCardImgResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCardImgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCardImgResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCardImgResponse, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCardImgResponse, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCardImgResponse, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCardImgResponse, cardimgurl_),
  2,
  3,
  4,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCardImgRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCardImgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCardImgRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCardImgRequest, contactusername_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCardImgResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCardImgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCardImgResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteChatRoomMemberRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteChatRoomMemberRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteChatRoomMemberRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteChatRoomMemberRequest, membercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteChatRoomMemberRequest, memberlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteChatRoomMemberRequest, chatroomname_),
  0,
  2,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteChatRoomMemberResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteChatRoomMemberResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteChatRoomMemberResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelPair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelPair, labelname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelPair, labelid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContactLabelRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContactLabelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContactLabelRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContactLabelRequest, labelcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContactLabelRequest, labelpairlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContactLabelResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContactLabelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContactLabelResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContactLabelResponse, labelcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContactLabelResponse, labelpairlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContactLabelRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContactLabelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContactLabelRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContactLabelRequest, labelidlist_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContactLabelResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContactLabelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContactLabelResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContactLabelRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContactLabelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContactLabelRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContactLabelRequest, labelpair_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContactLabelResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContactLabelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContactLabelResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactLabelListRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactLabelListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactLabelListRequest, baserequest_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactLabelListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactLabelListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactLabelListResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactLabelListResponse, labelcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactLabelListResponse, labelpairlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLabelInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLabelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLabelInfo, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLabelInfo, labelidlist_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyContactLabelListRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyContactLabelListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyContactLabelListRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyContactLabelListRequest, usercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyContactLabelListRequest, userlabelinfolist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyContactLabelListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyContactLabelListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyContactLabelListResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferChatRoomOwnerRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferChatRoomOwnerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferChatRoomOwnerRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferChatRoomOwnerRequest, chatroomname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferChatRoomOwnerRequest, newownerusername_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferChatRoomOwnerResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferChatRoomOwnerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferChatRoomOwnerResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomAnnouncementRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomAnnouncementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomAnnouncementRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomAnnouncementRequest, chatroomname_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomAnnouncementResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomAnnouncementResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomAnnouncementResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomAnnouncementResponse, announcement_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetChatRoomAnnouncementRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetChatRoomAnnouncementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetChatRoomAnnouncementRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetChatRoomAnnouncementRequest, chatroomname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetChatRoomAnnouncementRequest, announcement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetChatRoomAnnouncementRequest, setannouncementflag_),
  2,
  0,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetChatRoomAnnouncementResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetChatRoomAnnouncementResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetChatRoomAnnouncementResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomInfoDetailRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomInfoDetailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomInfoDetailRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomInfoDetailRequest, chatroomname_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomInfoDetailResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomInfoDetailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomInfoDetailResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomInfoDetailResponse, announcement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomInfoDetailResponse, chatroominfoversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomInfoDetailResponse, announcementeditor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomInfoDetailResponse, announcementpublishtime_),
  2,
  0,
  3,
  1,
  4,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(GetBrandListRequestBuffer)},
  { 9, 17, sizeof(GetBrandListRequest)},
  { 20, 28, sizeof(GetBrandListResponse)},
  { 31, 37, sizeof(APPItem)},
  { 38, 46, sizeof(SetAPPListRequest)},
  { 49, 56, sizeof(SetAPPListResponse)},
  { 58, 65, sizeof(GetAPPListRequest)},
  { 67, 76, sizeof(GetAPPListResponse)},
  { 80, 87, sizeof(SearchQRCodeReq)},
  { 89, 97, sizeof(SearchQRCodeResp)},
  { 100, 111, sizeof(SearchContactRequest)},
  { 117, 149, sizeof(SearchContactItem)},
  { 176, 213, sizeof(SearchContactResponse)},
  { 245, 251, sizeof(GroupCardReq)},
  { 252, 258, sizeof(RadarMember)},
  { 259, 267, sizeof(RadarCreateChatRoomParameter)},
  { 270, 281, sizeof(CreateChatRoomRequest)},
  { 287, 302, sizeof(CreateChatRoomResponse)},
  { 312, 321, sizeof(AddChatRoomMemberRequest)},
  { 325, 333, sizeof(AddChatRoomMemberResponse)},
  { 336, 346, sizeof(DelChatRoomMemberRequest)},
  { 351, 359, sizeof(DelChatRoomMemberResponse)},
  { 362, 370, sizeof(CollectChatRoomReq)},
  { 373, 379, sizeof(CollectChatRoomResp)},
  { 380, 388, sizeof(BatchGetHeadImgRequest)},
  { 391, 398, sizeof(ImgPair)},
  { 400, 408, sizeof(BatchGetHeadImgResponse)},
  { 411, 418, sizeof(SearchFriendRequest)},
  { 420, 436, sizeof(FriendInfo)},
  { 447, 455, sizeof(SearchFriendResponse)},
  { 458, 466, sizeof(GetChatRoomUpgradeInfoReq)},
  { 469, 476, sizeof(GetChatRoomUpgradeInfoResp)},
  { 478, 485, sizeof(KeyValStr)},
  { 487, 496, sizeof(GetDonateInfoReq)},
  { 500, 507, sizeof(GetDonateInfoResp)},
  { 509, 519, sizeof(GetPayPurchasePackageReq)},
  { 524, 532, sizeof(GetPayPurchasePackageResp)},
  { 535, 544, sizeof(VerifyPayTransitionReq)},
  { 548, 555, sizeof(VerifyPayTransitionResp)},
  { 557, 564, sizeof(GetChatRoomDonateHistoryReq)},
  { 566, 576, sizeof(Donor)},
  { 581, 589, sizeof(GetChatRoomDonateHistoryResp)},
  { 592, 599, sizeof(GetChatRoomPresentHistoryReq)},
  { 601, 613, sizeof(Presentation)},
  { 620, 630, sizeof(GetChatRoomPresentHistoryResp)},
  { 635, 641, sizeof(GetPersonalDonateHistoryReq)},
  { 642, 652, sizeof(DonateHistory)},
  { 657, 666, sizeof(GetPersonalDonateHistoryResp)},
  { 670, 679, sizeof(VerifyPersonalInfoReq)},
  { 683, 689, sizeof(VerifyPersonalInfoResp)},
  { 690, 700, sizeof(VerifyChatRoomReq)},
  { 705, 711, sizeof(VerifyChatRoomResp)},
  { 712, 719, sizeof(QuitChatRoomReq)},
  { 721, 727, sizeof(QuitChatRoomResp)},
  { 728, 735, sizeof(GetChatRoomUpgradeStatusReq)},
  { 737, 750, sizeof(GetChatRoomUpgradeStatusResp)},
  { 758, 765, sizeof(UpgradeChatRoomReq)},
  { 767, 780, sizeof(UpgradeChatRoomResp)},
  { 788, 798, sizeof(AddChatRoomDonateRecordReq)},
  { 803, 810, sizeof(AddChatRoomDonateRecordResp)},
  { 812, 818, sizeof(GoogleContactUploadItem)},
  { 819, 829, sizeof(ListGoogleContactRequest)},
  { 834, 846, sizeof(GoogleContactItem)},
  { 853, 861, sizeof(ListGoogleContactResponse)},
  { 864, 870, sizeof(InviteGoogleContactItem)},
  { 871, 879, sizeof(InviteGoogleContactRequest)},
  { 882, 890, sizeof(InviteGoogleContactResponse)},
  { 893, 901, sizeof(BBMContactUploadItem)},
  { 904, 915, sizeof(ListBBMContactRequest)},
  { 921, 935, sizeof(BBMContactItem)},
  { 944, 952, sizeof(ListBBMContactResponse)},
  { 955, 966, sizeof(OnlineInfo)},
  { 972, 979, sizeof(GetOnlineInfoRequest)},
  { 981, 992, sizeof(GetOnlineInfoResponse)},
  { 998, 1006, sizeof(GetChatroomMemberDetailRequest)},
  { 1009, 1018, sizeof(GetChatroomMemberDetailResponse)},
  { 1022, 1034, sizeof(GetContactRequest)},
  { 1041, 1050, sizeof(GetContactResponse)},
  { 1054, 1066, sizeof(UploadCardImgRequest)},
  { 1073, 1083, sizeof(UploadCardImgResponse)},
  { 1088, 1095, sizeof(DeleteCardImgRequest)},
  { 1097, 1103, sizeof(DeleteCardImgResponse)},
  { 1104, 1113, sizeof(InviteChatRoomMemberRequest)},
  { 1117, 1123, sizeof(InviteChatRoomMemberResponse)},
  { 1124, 1131, sizeof(LabelPair)},
  { 1133, 1141, sizeof(AddContactLabelRequest)},
  { 1144, 1152, sizeof(AddContactLabelResponse)},
  { 1155, 1162, sizeof(DelContactLabelRequest)},
  { 1164, 1170, sizeof(DelContactLabelResponse)},
  { 1171, 1178, sizeof(UpdateContactLabelRequest)},
  { 1180, 1186, sizeof(UpdateContactLabelResponse)},
  { 1187, 1193, sizeof(GetContactLabelListRequest)},
  { 1194, 1202, sizeof(GetContactLabelListResponse)},
  { 1205, 1212, sizeof(UserLabelInfo)},
  { 1214, 1222, sizeof(ModifyContactLabelListRequest)},
  { 1225, 1231, sizeof(ModifyContactLabelListResponse)},
  { 1232, 1240, sizeof(TransferChatRoomOwnerRequest)},
  { 1243, 1249, sizeof(TransferChatRoomOwnerResponse)},
  { 1250, 1257, sizeof(GetChatRoomAnnouncementRequest)},
  { 1259, 1266, sizeof(GetChatRoomAnnouncementResponse)},
  { 1268, 1277, sizeof(SetChatRoomAnnouncementRequest)},
  { 1281, 1287, sizeof(SetChatRoomAnnouncementResponse)},
  { 1288, 1295, sizeof(GetChatRoomInfoDetailRequest)},
  { 1297, 1307, sizeof(GetChatRoomInfoDetailResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetBrandListRequestBuffer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetBrandListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetBrandListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_APPItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetAPPListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetAPPListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetAPPListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetAPPListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchQRCodeReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchQRCodeResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchContactRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchContactItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchContactResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GroupCardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RadarMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RadarCreateChatRoomParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateChatRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateChatRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddChatRoomMemberRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddChatRoomMemberResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelChatRoomMemberRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelChatRoomMemberResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CollectChatRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CollectChatRoomResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchGetHeadImgRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImgPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchGetHeadImgResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchFriendRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchFriendResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetChatRoomUpgradeInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetChatRoomUpgradeInfoResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeyValStr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDonateInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDonateInfoResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPayPurchasePackageReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPayPurchasePackageResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VerifyPayTransitionReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VerifyPayTransitionResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetChatRoomDonateHistoryReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Donor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetChatRoomDonateHistoryResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetChatRoomPresentHistoryReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Presentation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetChatRoomPresentHistoryResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPersonalDonateHistoryReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DonateHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPersonalDonateHistoryResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VerifyPersonalInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VerifyPersonalInfoResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VerifyChatRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VerifyChatRoomResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuitChatRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuitChatRoomResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetChatRoomUpgradeStatusReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetChatRoomUpgradeStatusResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpgradeChatRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpgradeChatRoomResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddChatRoomDonateRecordReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddChatRoomDonateRecordResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GoogleContactUploadItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListGoogleContactRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GoogleContactItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListGoogleContactResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InviteGoogleContactItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InviteGoogleContactRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InviteGoogleContactResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BBMContactUploadItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListBBMContactRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BBMContactItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListBBMContactResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OnlineInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetOnlineInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetOnlineInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetChatroomMemberDetailRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetChatroomMemberDetailResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetContactRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetContactResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UploadCardImgRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UploadCardImgResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteCardImgRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteCardImgResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InviteChatRoomMemberRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InviteChatRoomMemberResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LabelPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddContactLabelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddContactLabelResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelContactLabelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelContactLabelResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateContactLabelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateContactLabelResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetContactLabelListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetContactLabelListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserLabelInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModifyContactLabelListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModifyContactLabelListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransferChatRoomOwnerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransferChatRoomOwnerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetChatRoomAnnouncementRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetChatRoomAnnouncementResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetChatRoomAnnouncementRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetChatRoomAnnouncementResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetChatRoomInfoDetailRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetChatRoomInfoDetailResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mmcontact.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 104);
}

}  // namespace

void TableStruct::Shutdown() {
  _GetBrandListRequestBuffer_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _GetBrandListRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _GetBrandListResponse_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _APPItem_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SetAPPListRequest_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _SetAPPListResponse_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _GetAPPListRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _GetAPPListResponse_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _SearchQRCodeReq_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _SearchQRCodeResp_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _SearchContactRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _SearchContactItem_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _SearchContactResponse_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _GroupCardReq_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _RadarMember_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _RadarCreateChatRoomParameter_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CreateChatRoomRequest_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CreateChatRoomResponse_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _AddChatRoomMemberRequest_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _AddChatRoomMemberResponse_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _DelChatRoomMemberRequest_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _DelChatRoomMemberResponse_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CollectChatRoomReq_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CollectChatRoomResp_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _BatchGetHeadImgRequest_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _ImgPair_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _BatchGetHeadImgResponse_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _SearchFriendRequest_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _FriendInfo_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _SearchFriendResponse_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _GetChatRoomUpgradeInfoReq_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _GetChatRoomUpgradeInfoResp_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _KeyValStr_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _GetDonateInfoReq_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _GetDonateInfoResp_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _GetPayPurchasePackageReq_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _GetPayPurchasePackageResp_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _VerifyPayTransitionReq_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _VerifyPayTransitionResp_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _GetChatRoomDonateHistoryReq_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _Donor_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _GetChatRoomDonateHistoryResp_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _GetChatRoomPresentHistoryReq_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _Presentation_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _GetChatRoomPresentHistoryResp_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _GetPersonalDonateHistoryReq_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _DonateHistory_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _GetPersonalDonateHistoryResp_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _VerifyPersonalInfoReq_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _VerifyPersonalInfoResp_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _VerifyChatRoomReq_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _VerifyChatRoomResp_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _QuitChatRoomReq_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _QuitChatRoomResp_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _GetChatRoomUpgradeStatusReq_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _GetChatRoomUpgradeStatusResp_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _UpgradeChatRoomReq_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _UpgradeChatRoomResp_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _AddChatRoomDonateRecordReq_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _AddChatRoomDonateRecordResp_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _GoogleContactUploadItem_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
  _ListGoogleContactRequest_default_instance_.Shutdown();
  delete file_level_metadata[61].reflection;
  _GoogleContactItem_default_instance_.Shutdown();
  delete file_level_metadata[62].reflection;
  _ListGoogleContactResponse_default_instance_.Shutdown();
  delete file_level_metadata[63].reflection;
  _InviteGoogleContactItem_default_instance_.Shutdown();
  delete file_level_metadata[64].reflection;
  _InviteGoogleContactRequest_default_instance_.Shutdown();
  delete file_level_metadata[65].reflection;
  _InviteGoogleContactResponse_default_instance_.Shutdown();
  delete file_level_metadata[66].reflection;
  _BBMContactUploadItem_default_instance_.Shutdown();
  delete file_level_metadata[67].reflection;
  _ListBBMContactRequest_default_instance_.Shutdown();
  delete file_level_metadata[68].reflection;
  _BBMContactItem_default_instance_.Shutdown();
  delete file_level_metadata[69].reflection;
  _ListBBMContactResponse_default_instance_.Shutdown();
  delete file_level_metadata[70].reflection;
  _OnlineInfo_default_instance_.Shutdown();
  delete file_level_metadata[71].reflection;
  _GetOnlineInfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[72].reflection;
  _GetOnlineInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[73].reflection;
  _GetChatroomMemberDetailRequest_default_instance_.Shutdown();
  delete file_level_metadata[74].reflection;
  _GetChatroomMemberDetailResponse_default_instance_.Shutdown();
  delete file_level_metadata[75].reflection;
  _GetContactRequest_default_instance_.Shutdown();
  delete file_level_metadata[76].reflection;
  _GetContactResponse_default_instance_.Shutdown();
  delete file_level_metadata[77].reflection;
  _UploadCardImgRequest_default_instance_.Shutdown();
  delete file_level_metadata[78].reflection;
  _UploadCardImgResponse_default_instance_.Shutdown();
  delete file_level_metadata[79].reflection;
  _DeleteCardImgRequest_default_instance_.Shutdown();
  delete file_level_metadata[80].reflection;
  _DeleteCardImgResponse_default_instance_.Shutdown();
  delete file_level_metadata[81].reflection;
  _InviteChatRoomMemberRequest_default_instance_.Shutdown();
  delete file_level_metadata[82].reflection;
  _InviteChatRoomMemberResponse_default_instance_.Shutdown();
  delete file_level_metadata[83].reflection;
  _LabelPair_default_instance_.Shutdown();
  delete file_level_metadata[84].reflection;
  _AddContactLabelRequest_default_instance_.Shutdown();
  delete file_level_metadata[85].reflection;
  _AddContactLabelResponse_default_instance_.Shutdown();
  delete file_level_metadata[86].reflection;
  _DelContactLabelRequest_default_instance_.Shutdown();
  delete file_level_metadata[87].reflection;
  _DelContactLabelResponse_default_instance_.Shutdown();
  delete file_level_metadata[88].reflection;
  _UpdateContactLabelRequest_default_instance_.Shutdown();
  delete file_level_metadata[89].reflection;
  _UpdateContactLabelResponse_default_instance_.Shutdown();
  delete file_level_metadata[90].reflection;
  _GetContactLabelListRequest_default_instance_.Shutdown();
  delete file_level_metadata[91].reflection;
  _GetContactLabelListResponse_default_instance_.Shutdown();
  delete file_level_metadata[92].reflection;
  _UserLabelInfo_default_instance_.Shutdown();
  delete file_level_metadata[93].reflection;
  _ModifyContactLabelListRequest_default_instance_.Shutdown();
  delete file_level_metadata[94].reflection;
  _ModifyContactLabelListResponse_default_instance_.Shutdown();
  delete file_level_metadata[95].reflection;
  _TransferChatRoomOwnerRequest_default_instance_.Shutdown();
  delete file_level_metadata[96].reflection;
  _TransferChatRoomOwnerResponse_default_instance_.Shutdown();
  delete file_level_metadata[97].reflection;
  _GetChatRoomAnnouncementRequest_default_instance_.Shutdown();
  delete file_level_metadata[98].reflection;
  _GetChatRoomAnnouncementResponse_default_instance_.Shutdown();
  delete file_level_metadata[99].reflection;
  _SetChatRoomAnnouncementRequest_default_instance_.Shutdown();
  delete file_level_metadata[100].reflection;
  _SetChatRoomAnnouncementResponse_default_instance_.Shutdown();
  delete file_level_metadata[101].reflection;
  _GetChatRoomInfoDetailRequest_default_instance_.Shutdown();
  delete file_level_metadata[102].reflection;
  _GetChatRoomInfoDetailResponse_default_instance_.Shutdown();
  delete file_level_metadata[103].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::micromsg::protobuf_mmbuiltintype_2eproto::InitDefaults();
  ::micromsg::protobuf_mmbase_2eproto::InitDefaults();
  _GetBrandListRequestBuffer_default_instance_.DefaultConstruct();
  _GetBrandListRequest_default_instance_.DefaultConstruct();
  _GetBrandListResponse_default_instance_.DefaultConstruct();
  _APPItem_default_instance_.DefaultConstruct();
  _SetAPPListRequest_default_instance_.DefaultConstruct();
  _SetAPPListResponse_default_instance_.DefaultConstruct();
  _GetAPPListRequest_default_instance_.DefaultConstruct();
  _GetAPPListResponse_default_instance_.DefaultConstruct();
  _SearchQRCodeReq_default_instance_.DefaultConstruct();
  _SearchQRCodeResp_default_instance_.DefaultConstruct();
  _SearchContactRequest_default_instance_.DefaultConstruct();
  _SearchContactItem_default_instance_.DefaultConstruct();
  _SearchContactResponse_default_instance_.DefaultConstruct();
  _GroupCardReq_default_instance_.DefaultConstruct();
  _RadarMember_default_instance_.DefaultConstruct();
  _RadarCreateChatRoomParameter_default_instance_.DefaultConstruct();
  _CreateChatRoomRequest_default_instance_.DefaultConstruct();
  _CreateChatRoomResponse_default_instance_.DefaultConstruct();
  _AddChatRoomMemberRequest_default_instance_.DefaultConstruct();
  _AddChatRoomMemberResponse_default_instance_.DefaultConstruct();
  _DelChatRoomMemberRequest_default_instance_.DefaultConstruct();
  _DelChatRoomMemberResponse_default_instance_.DefaultConstruct();
  _CollectChatRoomReq_default_instance_.DefaultConstruct();
  _CollectChatRoomResp_default_instance_.DefaultConstruct();
  _BatchGetHeadImgRequest_default_instance_.DefaultConstruct();
  _ImgPair_default_instance_.DefaultConstruct();
  _BatchGetHeadImgResponse_default_instance_.DefaultConstruct();
  _SearchFriendRequest_default_instance_.DefaultConstruct();
  _FriendInfo_default_instance_.DefaultConstruct();
  _SearchFriendResponse_default_instance_.DefaultConstruct();
  _GetChatRoomUpgradeInfoReq_default_instance_.DefaultConstruct();
  _GetChatRoomUpgradeInfoResp_default_instance_.DefaultConstruct();
  _KeyValStr_default_instance_.DefaultConstruct();
  _GetDonateInfoReq_default_instance_.DefaultConstruct();
  _GetDonateInfoResp_default_instance_.DefaultConstruct();
  _GetPayPurchasePackageReq_default_instance_.DefaultConstruct();
  _GetPayPurchasePackageResp_default_instance_.DefaultConstruct();
  _VerifyPayTransitionReq_default_instance_.DefaultConstruct();
  _VerifyPayTransitionResp_default_instance_.DefaultConstruct();
  _GetChatRoomDonateHistoryReq_default_instance_.DefaultConstruct();
  _Donor_default_instance_.DefaultConstruct();
  _GetChatRoomDonateHistoryResp_default_instance_.DefaultConstruct();
  _GetChatRoomPresentHistoryReq_default_instance_.DefaultConstruct();
  _Presentation_default_instance_.DefaultConstruct();
  _GetChatRoomPresentHistoryResp_default_instance_.DefaultConstruct();
  _GetPersonalDonateHistoryReq_default_instance_.DefaultConstruct();
  _DonateHistory_default_instance_.DefaultConstruct();
  _GetPersonalDonateHistoryResp_default_instance_.DefaultConstruct();
  _VerifyPersonalInfoReq_default_instance_.DefaultConstruct();
  _VerifyPersonalInfoResp_default_instance_.DefaultConstruct();
  _VerifyChatRoomReq_default_instance_.DefaultConstruct();
  _VerifyChatRoomResp_default_instance_.DefaultConstruct();
  _QuitChatRoomReq_default_instance_.DefaultConstruct();
  _QuitChatRoomResp_default_instance_.DefaultConstruct();
  _GetChatRoomUpgradeStatusReq_default_instance_.DefaultConstruct();
  _GetChatRoomUpgradeStatusResp_default_instance_.DefaultConstruct();
  _UpgradeChatRoomReq_default_instance_.DefaultConstruct();
  _UpgradeChatRoomResp_default_instance_.DefaultConstruct();
  _AddChatRoomDonateRecordReq_default_instance_.DefaultConstruct();
  _AddChatRoomDonateRecordResp_default_instance_.DefaultConstruct();
  _GoogleContactUploadItem_default_instance_.DefaultConstruct();
  _ListGoogleContactRequest_default_instance_.DefaultConstruct();
  _GoogleContactItem_default_instance_.DefaultConstruct();
  _ListGoogleContactResponse_default_instance_.DefaultConstruct();
  _InviteGoogleContactItem_default_instance_.DefaultConstruct();
  _InviteGoogleContactRequest_default_instance_.DefaultConstruct();
  _InviteGoogleContactResponse_default_instance_.DefaultConstruct();
  _BBMContactUploadItem_default_instance_.DefaultConstruct();
  _ListBBMContactRequest_default_instance_.DefaultConstruct();
  _BBMContactItem_default_instance_.DefaultConstruct();
  _ListBBMContactResponse_default_instance_.DefaultConstruct();
  _OnlineInfo_default_instance_.DefaultConstruct();
  _GetOnlineInfoRequest_default_instance_.DefaultConstruct();
  _GetOnlineInfoResponse_default_instance_.DefaultConstruct();
  _GetChatroomMemberDetailRequest_default_instance_.DefaultConstruct();
  _GetChatroomMemberDetailResponse_default_instance_.DefaultConstruct();
  _GetContactRequest_default_instance_.DefaultConstruct();
  _GetContactResponse_default_instance_.DefaultConstruct();
  _UploadCardImgRequest_default_instance_.DefaultConstruct();
  _UploadCardImgResponse_default_instance_.DefaultConstruct();
  _DeleteCardImgRequest_default_instance_.DefaultConstruct();
  _DeleteCardImgResponse_default_instance_.DefaultConstruct();
  _InviteChatRoomMemberRequest_default_instance_.DefaultConstruct();
  _InviteChatRoomMemberResponse_default_instance_.DefaultConstruct();
  _LabelPair_default_instance_.DefaultConstruct();
  _AddContactLabelRequest_default_instance_.DefaultConstruct();
  _AddContactLabelResponse_default_instance_.DefaultConstruct();
  _DelContactLabelRequest_default_instance_.DefaultConstruct();
  _DelContactLabelResponse_default_instance_.DefaultConstruct();
  _UpdateContactLabelRequest_default_instance_.DefaultConstruct();
  _UpdateContactLabelResponse_default_instance_.DefaultConstruct();
  _GetContactLabelListRequest_default_instance_.DefaultConstruct();
  _GetContactLabelListResponse_default_instance_.DefaultConstruct();
  _UserLabelInfo_default_instance_.DefaultConstruct();
  _ModifyContactLabelListRequest_default_instance_.DefaultConstruct();
  _ModifyContactLabelListResponse_default_instance_.DefaultConstruct();
  _TransferChatRoomOwnerRequest_default_instance_.DefaultConstruct();
  _TransferChatRoomOwnerResponse_default_instance_.DefaultConstruct();
  _GetChatRoomAnnouncementRequest_default_instance_.DefaultConstruct();
  _GetChatRoomAnnouncementResponse_default_instance_.DefaultConstruct();
  _SetChatRoomAnnouncementRequest_default_instance_.DefaultConstruct();
  _SetChatRoomAnnouncementResponse_default_instance_.DefaultConstruct();
  _GetChatRoomInfoDetailRequest_default_instance_.DefaultConstruct();
  _GetChatRoomInfoDetailResponse_default_instance_.DefaultConstruct();
  _GetBrandListRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetBrandListRequest_default_instance_.get_mutable()->requestbuffer_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetBrandListResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetBrandListResponse_default_instance_.get_mutable()->requestbuffer_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _SetAPPListRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SetAPPListResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetAPPListRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetAPPListResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SearchQRCodeReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SearchQRCodeResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SearchContactRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SearchContactRequest_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _SearchContactRequest_default_instance_.get_mutable()->reqbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _SearchContactItem_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _SearchContactItem_default_instance_.get_mutable()->nickname_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _SearchContactItem_default_instance_.get_mutable()->pyinitial_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _SearchContactItem_default_instance_.get_mutable()->quanpin_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _SearchContactItem_default_instance_.get_mutable()->imgbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _SearchContactItem_default_instance_.get_mutable()->snsuserinfo_ = const_cast< ::micromsg::SnsUserInfo*>(
      ::micromsg::SnsUserInfo::internal_default_instance());
  _SearchContactItem_default_instance_.get_mutable()->customizedinfo_ = const_cast< ::micromsg::CustomizedInfo*>(
      ::micromsg::CustomizedInfo::internal_default_instance());
  _SearchContactResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SearchContactResponse_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _SearchContactResponse_default_instance_.get_mutable()->nickname_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _SearchContactResponse_default_instance_.get_mutable()->pyinitial_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _SearchContactResponse_default_instance_.get_mutable()->quanpin_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _SearchContactResponse_default_instance_.get_mutable()->imgbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _SearchContactResponse_default_instance_.get_mutable()->snsuserinfo_ = const_cast< ::micromsg::SnsUserInfo*>(
      ::micromsg::SnsUserInfo::internal_default_instance());
  _SearchContactResponse_default_instance_.get_mutable()->customizedinfo_ = const_cast< ::micromsg::CustomizedInfo*>(
      ::micromsg::CustomizedInfo::internal_default_instance());
  _SearchContactResponse_default_instance_.get_mutable()->resbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _CreateChatRoomRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _CreateChatRoomRequest_default_instance_.get_mutable()->topic_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _CreateChatRoomRequest_default_instance_.get_mutable()->extbuffer_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _CreateChatRoomResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _CreateChatRoomResponse_default_instance_.get_mutable()->topic_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _CreateChatRoomResponse_default_instance_.get_mutable()->pyinitial_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _CreateChatRoomResponse_default_instance_.get_mutable()->quanpin_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _CreateChatRoomResponse_default_instance_.get_mutable()->chatroomname_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _CreateChatRoomResponse_default_instance_.get_mutable()->imgbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _AddChatRoomMemberRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _AddChatRoomMemberRequest_default_instance_.get_mutable()->chatroomname_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _AddChatRoomMemberResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _DelChatRoomMemberRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _DelChatRoomMemberResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _CollectChatRoomReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _CollectChatRoomResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _BatchGetHeadImgRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _ImgPair_default_instance_.get_mutable()->imgbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ImgPair_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _BatchGetHeadImgResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SearchFriendRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SearchFriendResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetChatRoomUpgradeInfoReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetChatRoomUpgradeInfoResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetDonateInfoReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetDonateInfoResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetPayPurchasePackageReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetPayPurchasePackageResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _VerifyPayTransitionReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _VerifyPayTransitionResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetChatRoomDonateHistoryReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetChatRoomDonateHistoryResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetChatRoomPresentHistoryReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetChatRoomPresentHistoryResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetPersonalDonateHistoryReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetPersonalDonateHistoryResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _VerifyPersonalInfoReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _VerifyPersonalInfoResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _VerifyChatRoomReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _VerifyChatRoomResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _QuitChatRoomReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _QuitChatRoomResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetChatRoomUpgradeStatusReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetChatRoomUpgradeStatusResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _UpgradeChatRoomReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _UpgradeChatRoomResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _AddChatRoomDonateRecordReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _AddChatRoomDonateRecordResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _ListGoogleContactRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _ListGoogleContactResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _InviteGoogleContactRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _InviteGoogleContactResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _ListBBMContactRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _ListBBMContactResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _OnlineInfo_default_instance_.get_mutable()->clientkey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetOnlineInfoRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetOnlineInfoResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetChatroomMemberDetailRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetChatroomMemberDetailResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetChatroomMemberDetailResponse_default_instance_.get_mutable()->newchatroomdata_ = const_cast< ::micromsg::ChatRoomMemberData*>(
      ::micromsg::ChatRoomMemberData::internal_default_instance());
  _GetContactRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetContactResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _UploadCardImgRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _UploadCardImgRequest_default_instance_.get_mutable()->data_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _UploadCardImgResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _DeleteCardImgRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _DeleteCardImgResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _InviteChatRoomMemberRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _InviteChatRoomMemberRequest_default_instance_.get_mutable()->chatroomname_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _InviteChatRoomMemberResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _AddContactLabelRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _AddContactLabelResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _DelContactLabelRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _DelContactLabelResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _UpdateContactLabelRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _UpdateContactLabelRequest_default_instance_.get_mutable()->labelpair_ = const_cast< ::micromsg::LabelPair*>(
      ::micromsg::LabelPair::internal_default_instance());
  _UpdateContactLabelResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetContactLabelListRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetContactLabelListResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _ModifyContactLabelListRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _ModifyContactLabelListResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _TransferChatRoomOwnerRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _TransferChatRoomOwnerResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetChatRoomAnnouncementRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetChatRoomAnnouncementResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SetChatRoomAnnouncementRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SetChatRoomAnnouncementResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetChatRoomInfoDetailRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetChatRoomInfoDetailResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017mmcontact.proto\022\010micromsg\032\023mmbuiltinty"
      "pe.proto\032\014mmbase.proto\"\?\n\031GetBrandListRe"
      "questBuffer\022\r\n\005Count\030\001 \002(\r\022\023\n\013HiddenCoun"
      "t\030\002 \002(\r\"\207\001\n\023GetBrandListRequest\022*\n\013BaseR"
      "equest\030\001 \002(\0132\025.micromsg.BaseRequest\022\020\n\010U"
      "serName\030\002 \001(\t\0222\n\rRequestBuffer\030\003 \001(\0132\033.m"
      "icromsg.SKBuiltinBuffer_t\"\213\001\n\024GetBrandLi"
      "stResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micro"
      "msg.BaseResponse\022\021\n\tBrandList\030\002 \001(\t\0222\n\rR"
      "equestBuffer\030\003 \002(\0132\033.micromsg.SKBuiltinB"
      "uffer_t\"\033\n\007APPItem\022\020\n\010UserName\030\001 \001(\t\"o\n\021"
      "SetAPPListRequest\022*\n\013BaseRequest\030\001 \002(\0132\025"
      ".micromsg.BaseRequest\022\r\n\005Count\030\002 \002(\r\022\037\n\004"
      "List\030\003 \003(\0132\021.micromsg.APPItem\"P\n\022SetAPPL"
      "istResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micr"
      "omsg.BaseResponse\022\014\n\004Hash\030\002 \002(\r\"M\n\021GetAP"
      "PListRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.micr"
      "omsg.BaseRequest\022\014\n\004Hash\030\002 \002(\r\"\200\001\n\022GetAP"
      "PListResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.mi"
      "cromsg.BaseResponse\022\r\n\005Count\030\002 \002(\r\022\037\n\004Li"
      "st\030\003 \003(\0132\021.micromsg.APPItem\022\014\n\004Hash\030\004 \002("
      "\r\"M\n\017SearchQRCodeReq\022*\n\013BaseRequest\030\001 \002("
      "\0132\025.micromsg.BaseRequest\022\016\n\006QRCode\030\002 \001(\t"
      "\"[\n\020SearchQRCodeResp\022,\n\014BaseResponse\030\001 \002"
      "(\0132\026.micromsg.BaseResponse\022\014\n\004Type\030\002 \002(\r"
      "\022\013\n\003URL\030\003 \001(\t\"\326\001\n\024SearchContactRequest\022*"
      "\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseReque"
      "st\022-\n\010UserName\030\002 \002(\0132\033.micromsg.SKBuilti"
      "nString_t\022\016\n\006OpCode\030\003 \001(\r\022+\n\006ReqBuf\030\004 \001("
      "\0132\033.micromsg.SKBuiltinBuffer_t\022\021\n\tFromSc"
      "ene\030\005 \001(\r\022\023\n\013SearchScene\030\006 \001(\r\"\336\005\n\021Searc"
      "hContactItem\022-\n\010UserName\030\001 \002(\0132\033.microms"
      "g.SKBuiltinString_t\022-\n\010NickName\030\002 \002(\0132\033."
      "micromsg.SKBuiltinString_t\022.\n\tPYInitial\030"
      "\003 \002(\0132\033.micromsg.SKBuiltinString_t\022,\n\007Qu"
      "anPin\030\004 \002(\0132\033.micromsg.SKBuiltinString_t"
      "\022\013\n\003Sex\030\005 \002(\005\022+\n\006ImgBuf\030\006 \002(\0132\033.micromsg"
      ".SKBuiltinBuffer_t\022\020\n\010Province\030\007 \001(\t\022\014\n\004"
      "City\030\010 \001(\t\022\021\n\tSignature\030\t \001(\t\022\024\n\014Persona"
      "lCard\030\n \001(\r\022\022\n\nVerifyFlag\030\013 \001(\r\022\022\n\nVerif"
      "yInfo\030\014 \001(\t\022\r\n\005Weibo\030\r \001(\t\022\r\n\005Alias\030\016 \001("
      "\t\022\025\n\rWeiboNickname\030\017 \001(\t\022\021\n\tWeiboFlag\030\020 "
      "\001(\r\022\022\n\nAlbumStyle\030\021 \001(\005\022\021\n\tAlbumFlag\030\022 \001"
      "(\005\022\024\n\014AlbumBGImgID\030\023 \001(\t\022*\n\013SnsUserInfo\030"
      "\024 \001(\0132\025.micromsg.SnsUserInfo\022\017\n\007Country\030"
      "\025 \001(\t\022\023\n\013MyBrandList\030\026 \001(\t\0220\n\016Customized"
      "Info\030\027 \001(\0132\030.micromsg.CustomizedInfo\022\025\n\r"
      "BigHeadImgUrl\030\030 \001(\t\022\027\n\017SmallHeadImgUrl\030\031"
      " \001(\t\022\026\n\016AntispamTicket\030\032 \001(\t\022\021\n\tMatchTyp"
      "e\030\033 \001(\r\"\231\007\n\025SearchContactResponse\022,\n\014Bas"
      "eResponse\030\001 \002(\0132\026.micromsg.BaseResponse\022"
      "-\n\010UserName\030\002 \002(\0132\033.micromsg.SKBuiltinSt"
      "ring_t\022-\n\010NickName\030\003 \002(\0132\033.micromsg.SKBu"
      "iltinString_t\022.\n\tPYInitial\030\004 \002(\0132\033.micro"
      "msg.SKBuiltinString_t\022,\n\007QuanPin\030\005 \002(\0132\033"
      ".micromsg.SKBuiltinString_t\022\013\n\003Sex\030\006 \002(\005"
      "\022+\n\006ImgBuf\030\007 \002(\0132\033.micromsg.SKBuiltinBuf"
      "fer_t\022\020\n\010Province\030\010 \001(\t\022\014\n\004City\030\t \001(\t\022\021\n"
      "\tSignature\030\n \001(\t\022\024\n\014PersonalCard\030\013 \001(\r\022\022"
      "\n\nVerifyFlag\030\014 \001(\r\022\022\n\nVerifyInfo\030\r \001(\t\022\r"
      "\n\005Weibo\030\016 \001(\t\022\r\n\005Alias\030\017 \001(\t\022\025\n\rWeiboNic"
      "kname\030\020 \001(\t\022\021\n\tWeiboFlag\030\021 \001(\r\022\022\n\nAlbumS"
      "tyle\030\022 \001(\005\022\021\n\tAlbumFlag\030\023 \001(\005\022\024\n\014AlbumBG"
      "ImgID\030\024 \001(\t\022*\n\013SnsUserInfo\030\025 \001(\0132\025.micro"
      "msg.SnsUserInfo\022\017\n\007Country\030\026 \001(\t\022\023\n\013MyBr"
      "andList\030\027 \001(\t\0220\n\016CustomizedInfo\030\030 \001(\0132\030."
      "micromsg.CustomizedInfo\022\024\n\014ContactCount\030"
      "\031 \001(\r\0220\n\013ContactList\030\032 \003(\0132\033.micromsg.Se"
      "archContactItem\022\025\n\rBigHeadImgUrl\030\033 \001(\t\022\027"
      "\n\017SmallHeadImgUrl\030\034 \001(\t\022+\n\006ResBuf\030\035 \001(\0132"
      "\033.micromsg.SKBuiltinBuffer_t\022\026\n\016Antispam"
      "Ticket\030\036 \001(\t\022\022\n\nKFWorkerID\030\037 \001(\t\022\021\n\tMatc"
      "hType\030  \001(\r\"%\n\014GroupCardReq\022\025\n\rGroupCard"
      "Name\030\001 \001(\t\"!\n\013RadarMember\022\022\n\nMemberName\030"
      "\001 \001(\t\"x\n\034RadarCreateChatRoomParameter\022\016\n"
      "\006Ticket\030\001 \001(\t\022\030\n\020RadarMemberCount\030\002 \001(\r\022"
      ".\n\017RadarMemberList\030\003 \003(\0132\025.micromsg.Rada"
      "rMember\"\354\001\n\025CreateChatRoomRequest\022*\n\013Bas"
      "eRequest\030\001 \002(\0132\025.micromsg.BaseRequest\022*\n"
      "\005Topic\030\002 \002(\0132\033.micromsg.SKBuiltinString_"
      "t\022\023\n\013MemberCount\030\003 \002(\r\022\'\n\nMemberList\030\004 \003"
      "(\0132\023.micromsg.MemberReq\022\r\n\005Scene\030\005 \001(\r\022."
      "\n\tExtBuffer\030\006 \001(\0132\033.micromsg.SKBuiltinBu"
      "ffer_t\"\237\003\n\026CreateChatRoomResponse\022,\n\014Bas"
      "eResponse\030\001 \002(\0132\026.micromsg.BaseResponse\022"
      "*\n\005Topic\030\002 \002(\0132\033.micromsg.SKBuiltinStrin"
      "g_t\022.\n\tPYInitial\030\003 \002(\0132\033.micromsg.SKBuil"
      "tinString_t\022,\n\007QuanPin\030\004 \002(\0132\033.micromsg."
      "SKBuiltinString_t\022\023\n\013MemberCount\030\005 \002(\r\022("
      "\n\nMemberList\030\006 \003(\0132\024.micromsg.MemberResp"
      "\0221\n\014ChatRoomName\030\007 \002(\0132\033.micromsg.SKBuil"
      "tinString_t\022+\n\006ImgBuf\030\010 \002(\0132\033.micromsg.S"
      "KBuiltinBuffer_t\022\025\n\rBigHeadImgUrl\030\t \001(\t\022"
      "\027\n\017SmallHeadImgUrl\030\n \001(\t\"\267\001\n\030AddChatRoom"
      "MemberRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.mic"
      "romsg.BaseRequest\022\023\n\013MemberCount\030\002 \002(\r\022\'"
      "\n\nMemberList\030\003 \003(\0132\023.micromsg.MemberReq\022"
      "1\n\014ChatRoomName\030\004 \002(\0132\033.micromsg.SKBuilt"
      "inString_t\"\210\001\n\031AddChatRoomMemberResponse"
      "\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseRe"
      "sponse\022\023\n\013MemberCount\030\002 \002(\r\022(\n\nMemberLis"
      "t\030\003 \003(\0132\024.micromsg.MemberResp\"\254\001\n\030DelCha"
      "tRoomMemberRequest\022*\n\013BaseRequest\030\001 \002(\0132"
      "\025.micromsg.BaseRequest\022\023\n\013MemberCount\030\002 "
      "\002(\r\022*\n\nMemberList\030\003 \003(\0132\026.micromsg.DelMe"
      "mberReq\022\024\n\014ChatRoomName\030\004 \001(\t\022\r\n\005Scene\030\005"
      " \001(\r\"\213\001\n\031DelChatRoomMemberResponse\022,\n\014Ba"
      "seResponse\030\001 \002(\0132\026.micromsg.BaseResponse"
      "\022\023\n\013MemberCount\030\002 \002(\r\022+\n\nMemberList\030\003 \003("
      "\0132\027.micromsg.DelMemberResp\"\207\001\n\022CollectCh"
      "atRoomReq\022*\n\013BaseRequest\030\001 \002(\0132\025.microms"
      "g.BaseRequest\022\026\n\016GroupCardCount\030\002 \002(\r\022-\n"
      "\rGroupCardList\030\003 \003(\0132\026.micromsg.GroupCar"
      "dReq\"C\n\023CollectChatRoomResp\022,\n\014BaseRespo"
      "nse\030\001 \002(\0132\026.micromsg.BaseResponse\"\206\001\n\026Ba"
      "tchGetHeadImgRequest\022*\n\013BaseRequest\030\001 \002("
      "\0132\025.micromsg.BaseRequest\022\r\n\005Count\030\002 \002(\r\022"
      "1\n\014UserNameList\030\003 \003(\0132\033.micromsg.SKBuilt"
      "inString_t\"e\n\007ImgPair\022+\n\006ImgBuf\030\001 \002(\0132\033."
      "micromsg.SKBuiltinBuffer_t\022-\n\010Username\030\002"
      " \002(\0132\033.micromsg.SKBuiltinString_t\"~\n\027Bat"
      "chGetHeadImgResponse\022,\n\014BaseResponse\030\001 \002"
      "(\0132\026.micromsg.BaseResponse\022\r\n\005Count\030\002 \002("
      "\r\022&\n\013ImgPairList\030\003 \003(\0132\021.micromsg.ImgPai"
      "r\"S\n\023SearchFriendRequest\022*\n\013BaseRequest\030"
      "\001 \002(\0132\025.micromsg.BaseRequest\022\020\n\010UserName"
      "\030\002 \001(\t\"\340\001\n\nFriendInfo\022\027\n\017DisplayUserName"
      "\030\001 \001(\t\022\027\n\017DisplayNickName\030\002 \001(\t\022\025\n\rDispl"
      "ayRemark\030\003 \001(\t\022\022\n\nWXUserName\030\004 \001(\t\022\022\n\nWX"
      "NickName\030\005 \001(\t\022\020\n\010WXRemark\030\006 \001(\t\022\014\n\004Type"
      "\030\007 \002(\r\022\016\n\006Status\030\010 \002(\r\022\016\n\006Source\030\t \001(\t\022\022"
      "\n\nMatchField\030\n \001(\r\022\r\n\005Alias\030\013 \001(\t\"\203\001\n\024Se"
      "archFriendResponse\022,\n\014BaseResponse\030\001 \002(\013"
      "2\026.micromsg.BaseResponse\022\023\n\013FriendCount\030"
      "\002 \002(\r\022(\n\nFriendList\030\003 \003(\0132\024.micromsg.Fri"
      "endInfo\"l\n\031GetChatRoomUpgradeInfoReq\022*\n\013"
      "BaseRequest\030\001 \002(\0132\025.micromsg.BaseRequest"
      "\022\024\n\014ChatRoomName\030\002 \001(\t\022\r\n\005Scene\030\003 \001(\r\"g\n"
      "\032GetChatRoomUpgradeInfoResp\022,\n\014BaseRespo"
      "nse\030\001 \002(\0132\026.micromsg.BaseResponse\022\033\n\023Cha"
      "tRoomUpgradeInfo\030\002 \001(\t\"%\n\tKeyValStr\022\013\n\003K"
      "ey\030\001 \002(\r\022\013\n\003Val\030\002 \001(\t\"l\n\020GetDonateInfoRe"
      "q\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseRe"
      "quest\022\014\n\004Type\030\002 \002(\r\022\r\n\005Scene\030\003 \002(\r\022\017\n\007Ex"
      "tInfo\030\004 \001(\t\"U\n\021GetDonateInfoResp\022,\n\014Base"
      "Response\030\001 \002(\0132\026.micromsg.BaseResponse\022\022"
      "\n\nDonateInfo\030\003 \001(\t\"\207\001\n\030GetPayPurchasePac"
      "kageReq\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg."
      "BaseRequest\022\014\n\004Type\030\002 \002(\r\022\r\n\005Price\030\003 \002(\r"
      "\022\021\n\tPriceType\030\004 \001(\t\022\017\n\007ExtInfo\030\005 \001(\t\"k\n\031"
      "GetPayPurchasePackageResp\022,\n\014BaseRespons"
      "e\030\001 \002(\0132\026.micromsg.BaseResponse\022\017\n\007Packa"
      "ge\030\002 \001(\t\022\017\n\007ExtInfo\030\003 \001(\t\"w\n\026VerifyPayTr"
      "ansitionReq\022*\n\013BaseRequest\030\001 \002(\0132\025.micro"
      "msg.BaseRequest\022\014\n\004Type\030\002 \002(\r\022\022\n\nOutTrad"
      "eNo\030\003 \001(\t\022\017\n\007ExtInfo\030\004 \001(\t\"Z\n\027VerifyPayT"
      "ransitionResp\022,\n\014BaseResponse\030\001 \002(\0132\026.mi"
      "cromsg.BaseResponse\022\021\n\tResultMsg\030\002 \001(\t\"_"
      "\n\033GetChatRoomDonateHistoryReq\022*\n\013BaseReq"
      "uest\030\001 \002(\0132\025.micromsg.BaseRequest\022\024\n\014Cha"
      "tRoomName\030\002 \001(\t\"a\n\005Donor\022\014\n\004Time\030\001 \002(\r\022\020"
      "\n\010UserName\030\002 \001(\t\022\020\n\010NickName\030\003 \001(\t\022\023\n\013Do"
      "nateTitle\030\004 \001(\t\022\021\n\tDonateUrl\030\005 \001(\t\"\177\n\034Ge"
      "tChatRoomDonateHistoryResp\022,\n\014BaseRespon"
      "se\030\001 \002(\0132\026.micromsg.BaseResponse\022\022\n\nTota"
      "lCount\030\002 \002(\r\022\035\n\004List\030\003 \003(\0132\017.micromsg.Do"
      "nor\"`\n\034GetChatRoomPresentHistoryReq\022*\n\013B"
      "aseRequest\030\001 \002(\0132\025.micromsg.BaseRequest\022"
      "\024\n\014ChatRoomName\030\002 \001(\t\"{\n\014Presentation\022\014\n"
      "\004Time\030\001 \002(\r\022\020\n\010UserName\030\002 \001(\t\022\020\n\010NickNam"
      "e\030\003 \001(\t\022\r\n\005Title\030\004 \001(\t\022\r\n\005Price\030\005 \002(\r\022\016\n"
      "\006WebUrl\030\006 \001(\t\022\013\n\003Num\030\007 \002(\r\"\252\001\n\035GetChatRo"
      "omPresentHistoryResp\022,\n\014BaseResponse\030\001 \002"
      "(\0132\026.micromsg.BaseResponse\022\022\n\nTotalCount"
      "\030\002 \002(\r\022$\n\004List\030\003 \003(\0132\026.micromsg.Presenta"
      "tion\022\013\n\003Url\030\004 \001(\t\022\024\n\014DonateStatus\030\005 \002(\r\""
      "I\n\033GetPersonalDonateHistoryReq\022*\n\013BaseRe"
      "quest\030\001 \002(\0132\025.micromsg.BaseRequest\"l\n\rDo"
      "nateHistory\022\014\n\004Time\030\001 \002(\r\022\023\n\013DonateTitle"
      "\030\002 \001(\t\022\021\n\tDonateUrl\030\003 \001(\t\022\r\n\005Price\030\004 \002(\r"
      "\022\026\n\016DonateThumbUrl\030\005 \001(\t\"\234\001\n\034GetPersonal"
      "DonateHistoryResp\022,\n\014BaseResponse\030\001 \002(\0132"
      "\026.micromsg.BaseResponse\022\023\n\013TotalAmount\030\002"
      " \002(\r\022\022\n\nTotalCount\030\003 \002(\r\022%\n\004List\030\004 \003(\0132\027"
      ".micromsg.DonateHistory\"\210\001\n\025VerifyPerson"
      "alInfoReq\022*\n\013BaseRequest\030\001 \002(\0132\025.microms"
      "g.BaseRequest\022\024\n\014UserRealName\030\002 \001(\t\022\026\n\016U"
      "serIDCardType\030\003 \002(\r\022\025\n\rUserIDCardNum\030\004 \001"
      "(\t\"F\n\026VerifyPersonalInfoResp\022,\n\014BaseResp"
      "onse\030\001 \002(\0132\026.micromsg.BaseResponse\"\214\001\n\021V"
      "erifyChatRoomReq\022*\n\013BaseRequest\030\001 \002(\0132\025."
      "micromsg.BaseRequest\022\016\n\006OpCode\030\002 \002(\r\022\025\n\r"
      "ApplyUserName\030\003 \001(\t\022\024\n\014ChatRoomName\030\004 \001("
      "\t\022\016\n\006Ticket\030\005 \001(\t\"B\n\022VerifyChatRoomResp\022"
      ",\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseRes"
      "ponse\"S\n\017QuitChatRoomReq\022*\n\013BaseRequest\030"
      "\001 \002(\0132\025.micromsg.BaseRequest\022\024\n\014ChatRoom"
      "Name\030\002 \001(\t\"@\n\020QuitChatRoomResp\022,\n\014BaseRe"
      "sponse\030\001 \002(\0132\026.micromsg.BaseResponse\"_\n\033"
      "GetChatRoomUpgradeStatusReq\022*\n\013BaseReque"
      "st\030\001 \002(\0132\025.micromsg.BaseRequest\022\024\n\014ChatR"
      "oomName\030\002 \001(\t\"\322\001\n\034GetChatRoomUpgradeStat"
      "usResp\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg."
      "BaseResponse\022\016\n\006Status\030\002 \002(\r\022\023\n\013MobileQu"
      "ota\030\003 \002(\r\022\021\n\tCardQuota\030\004 \002(\r\022\023\n\013DonateQu"
      "ota\030\005 \002(\r\022\020\n\010MaxCount\030\006 \002(\r\022\021\n\tResultMsg"
      "\030\007 \001(\t\022\022\n\nTotalQuota\030\010 \001(\r\"V\n\022UpgradeCha"
      "tRoomReq\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg"
      ".BaseRequest\022\024\n\014ChatRoomName\030\002 \001(\t\"\317\001\n\023U"
      "pgradeChatRoomResp\022,\n\014BaseResponse\030\001 \002(\013"
      "2\026.micromsg.BaseResponse\022\024\n\014ChatRoomData"
      "\030\002 \001(\t\022\021\n\tResultMsg\030\003 \001(\t\022\020\n\010MaxCount\030\004 "
      "\001(\r\022\023\n\013MobileQuota\030\005 \002(\r\022\021\n\tCardQuota\030\006 "
      "\002(\r\022\023\n\013DonateQuota\030\007 \002(\r\022\022\n\nTotalQuota\030\010"
      " \001(\r\"\216\001\n\032AddChatRoomDonateRecordReq\022*\n\013B"
      "aseRequest\030\001 \002(\0132\025.micromsg.BaseRequest\022"
      "\024\n\014ChatRoomName\030\002 \001(\t\022\017\n\007TransID\030\003 \001(\t\022\r"
      "\n\005Title\030\004 \001(\t\022\016\n\006WebUrl\030\005 \001(\t\"]\n\033AddChat"
      "RoomDonateRecordResp\022,\n\014BaseResponse\030\001 \002"
      "(\0132\026.micromsg.BaseResponse\022\020\n\010MaxCount\030\002"
      " \002(\r\"4\n\027GoogleContactUploadItem\022\031\n\021Googl"
      "eContactName\030\001 \001(\t\"\261\001\n\030ListGoogleContact"
      "Request\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg."
      "BaseRequest\022\r\n\005Count\030\002 \002(\r\022/\n\004List\030\003 \003(\013"
      "2!.micromsg.GoogleContactUploadItem\022\024\n\014C"
      "ontinueFlag\030\004 \002(\r\022\023\n\013ClickSource\030\005 \002(\r\"\241"
      "\001\n\021GoogleContactItem\022\031\n\021GoogleContactNam"
      "e\030\001 \001(\t\022\020\n\010UserName\030\002 \001(\t\022\022\n\nBigHeadUrl\030"
      "\003 \001(\t\022\024\n\014SmallHeadUrl\030\004 \001(\t\022\013\n\003Ret\030\005 \002(\005"
      "\022\020\n\010NickName\030\006 \001(\t\022\026\n\016AntispamTicket\030\007 \001"
      "(\t\"\203\001\n\031ListGoogleContactResponse\022,\n\014Base"
      "Response\030\001 \002(\0132\026.micromsg.BaseResponse\022\r"
      "\n\005Count\030\002 \002(\r\022)\n\004List\030\003 \003(\0132\033.micromsg.G"
      "oogleContactItem\"4\n\027InviteGoogleContactI"
      "tem\022\031\n\021GoogleContactName\030\001 \001(\t\"\210\001\n\032Invit"
      "eGoogleContactRequest\022*\n\013BaseRequest\030\001 \002"
      "(\0132\025.micromsg.BaseRequest\022\r\n\005Count\030\002 \002(\r"
      "\022/\n\004List\030\003 \003(\0132!.micromsg.InviteGoogleCo"
      "ntactItem\"l\n\033InviteGoogleContactResponse"
      "\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseRe"
      "sponse\022\r\n\005Count\030\002 \002(\r\022\020\n\004Rets\030\003 \003(\005B\002\020\001\""
      "J\n\024BBMContactUploadItem\022\016\n\006BBPPID\030\001 \001(\t\022"
      "\r\n\005BBPIN\030\002 \001(\t\022\023\n\013BBMNickName\030\003 \001(\t\"\273\001\n\025"
      "ListBBMContactRequest\022*\n\013BaseRequest\030\001 \002"
      "(\0132\025.micromsg.BaseRequest\022\r\n\005Count\030\002 \002(\r"
      "\022,\n\004List\030\003 \003(\0132\036.micromsg.BBMContactUplo"
      "adItem\022\024\n\014ContinueFlag\030\004 \002(\r\022\023\n\013ClickSou"
      "rce\030\005 \002(\r\022\016\n\006Opcode\030\006 \002(\r\"\267\001\n\016BBMContact"
      "Item\022\016\n\006BBPPID\030\001 \001(\t\022\020\n\010UserName\030\002 \001(\t\022\022"
      "\n\nBigHeadUrl\030\003 \001(\t\022\024\n\014SmallHeadUrl\030\004 \001(\t"
      "\022\r\n\005BBPIN\030\005 \001(\t\022\023\n\013BBMNickName\030\006 \001(\t\022\013\n\003"
      "Ret\030\007 \002(\005\022\020\n\010NickName\030\010 \001(\t\022\026\n\016AntispamT"
      "icket\030\t \001(\t\"}\n\026ListBBMContactResponse\022,\n"
      "\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseRespo"
      "nse\022\r\n\005Count\030\002 \002(\r\022&\n\004List\030\003 \003(\0132\030.micro"
      "msg.BBMContactItem\"\246\001\n\nOnlineInfo\022\022\n\nDev"
      "iceType\030\001 \002(\r\022\020\n\010DeviceID\030\002 \001(\014\022\022\n\nWordi"
      "ngXML\030\003 \001(\t\022.\n\tClientKey\030\004 \002(\0132\033.microms"
      "g.SKBuiltinBuffer_t\022\024\n\014OnlineStatus\030\005 \002("
      "\r\022\030\n\020DeviceHelperType\030\006 \002(\r\"T\n\024GetOnline"
      "InfoRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.micro"
      "msg.BaseRequest\022\020\n\010Language\030\002 \001(\t\"\270\001\n\025Ge"
      "tOnlineInfoResponse\022,\n\014BaseResponse\030\001 \002("
      "\0132\026.micromsg.BaseResponse\022\023\n\013OnlineCount"
      "\030\002 \002(\r\022(\n\nOnlineList\030\003 \003(\0132\024.micromsg.On"
      "lineInfo\022\022\n\nSummaryXML\030\004 \001(\t\022\014\n\004Flag\030\005 \001"
      "(\r\022\020\n\010IConType\030\006 \001(\r\"}\n\036GetChatroomMembe"
      "rDetailRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.mi"
      "cromsg.BaseRequest\022\030\n\020ChatroomUserName\030\002"
      " \001(\t\022\025\n\rClientVersion\030\003 \002(\r\"\267\001\n\037GetChatr"
      "oomMemberDetailResponse\022,\n\014BaseResponse\030"
      "\001 \002(\0132\026.micromsg.BaseResponse\022\030\n\020Chatroo"
      "mUserName\030\002 \001(\t\022\025\n\rServerVersion\030\003 \002(\r\0225"
      "\n\017NewChatroomData\030\004 \002(\0132\034.micromsg.ChatR"
      "oomMemberData\"\245\002\n\021GetContactRequest\022*\n\013B"
      "aseRequest\030\001 \002(\0132\025.micromsg.BaseRequest\022"
      "\021\n\tUserCount\030\002 \002(\r\0221\n\014UserNameList\030\003 \003(\013"
      "2\033.micromsg.SKBuiltinString_t\022\033\n\023Antispa"
      "mTicketCount\030\004 \001(\r\0223\n\016AntispamTicket\030\005 \003"
      "(\0132\033.micromsg.SKBuiltinString_t\022\031\n\021FromC"
      "hatRoomCount\030\006 \001(\r\0221\n\014FromChatRoom\030\007 \003(\013"
      "2\033.micromsg.SKBuiltinString_t\"\224\001\n\022GetCon"
      "tactResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.mic"
      "romsg.BaseResponse\022\024\n\014ContactCount\030\002 \002(\r"
      "\022)\n\013ContactList\030\003 \003(\0132\024.micromsg.ModCont"
      "act\022\017\n\003Ret\030\004 \003(\005B\002\020\001\"\315\001\n\024UploadCardImgRe"
      "quest\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.Ba"
      "seRequest\022\020\n\010ClientId\030\002 \001(\t\022\020\n\010TotalLen\030"
      "\003 \002(\r\022\020\n\010StartPos\030\004 \002(\r\022\017\n\007DataLen\030\005 \002(\r"
      "\022)\n\004Data\030\006 \002(\0132\033.micromsg.SKBuiltinBuffe"
      "r_t\022\027\n\017ContactUserName\030\007 \001(\t\"\217\001\n\025UploadC"
      "ardImgResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.m"
      "icromsg.BaseResponse\022\020\n\010StartPos\030\002 \002(\r\022\020"
      "\n\010TotalLen\030\003 \002(\r\022\020\n\010ClientId\030\004 \001(\t\022\022\n\nCa"
      "rdImgUrl\030\005 \001(\t\"[\n\024DeleteCardImgRequest\022*"
      "\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseReque"
      "st\022\027\n\017ContactUserName\030\002 \001(\t\"E\n\025DeleteCar"
      "dImgResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.mic"
      "romsg.BaseResponse\"\272\001\n\033InviteChatRoomMem"
      "berRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.microm"
      "sg.BaseRequest\022\023\n\013MemberCount\030\002 \002(\r\022\'\n\nM"
      "emberList\030\003 \003(\0132\023.micromsg.MemberReq\0221\n\014"
      "ChatRoomName\030\004 \002(\0132\033.micromsg.SKBuiltinS"
      "tring_t\"L\n\034InviteChatRoomMemberResponse\022"
      ",\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseRes"
      "ponse\"/\n\tLabelPair\022\021\n\tLabelName\030\001 \001(\t\022\017\n"
      "\007LabelID\030\002 \002(\r\"\204\001\n\026AddContactLabelReques"
      "t\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseRe"
      "quest\022\022\n\nLabelCount\030\002 \002(\r\022*\n\rLabelPairLi"
      "st\030\003 \003(\0132\023.micromsg.LabelPair\"\207\001\n\027AddCon"
      "tactLabelResponse\022,\n\014BaseResponse\030\001 \002(\0132"
      "\026.micromsg.BaseResponse\022\022\n\nLabelCount\030\002 "
      "\002(\r\022*\n\rLabelPairList\030\003 \003(\0132\023.micromsg.La"
      "belPair\"Y\n\026DelContactLabelRequest\022*\n\013Bas"
      "eRequest\030\001 \002(\0132\025.micromsg.BaseRequest\022\023\n"
      "\013LabelIDList\030\002 \001(\t\"G\n\027DelContactLabelRes"
      "ponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.B"
      "aseResponse\"o\n\031UpdateContactLabelRequest"
      "\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseReq"
      "uest\022&\n\tLabelPair\030\002 \002(\0132\023.micromsg.Label"
      "Pair\"J\n\032UpdateContactLabelResponse\022,\n\014Ba"
      "seResponse\030\001 \002(\0132\026.micromsg.BaseResponse"
      "\"H\n\032GetContactLabelListRequest\022*\n\013BaseRe"
      "quest\030\001 \002(\0132\025.micromsg.BaseRequest\"\213\001\n\033G"
      "etContactLabelListResponse\022,\n\014BaseRespon"
      "se\030\001 \002(\0132\026.micromsg.BaseResponse\022\022\n\nLabe"
      "lCount\030\002 \002(\r\022*\n\rLabelPairList\030\003 \003(\0132\023.mi"
      "cromsg.LabelPair\"6\n\rUserLabelInfo\022\020\n\010Use"
      "rName\030\001 \001(\t\022\023\n\013LabelIDList\030\002 \001(\t\"\222\001\n\035Mod"
      "ifyContactLabelListRequest\022*\n\013BaseReques"
      "t\030\001 \002(\0132\025.micromsg.BaseRequest\022\021\n\tUserCo"
      "unt\030\002 \002(\r\0222\n\021UserLabelInfoList\030\003 \003(\0132\027.m"
      "icromsg.UserLabelInfo\"N\n\036ModifyContactLa"
      "belListResponse\022,\n\014BaseResponse\030\001 \002(\0132\026."
      "micromsg.BaseResponse\"z\n\034TransferChatRoo"
      "mOwnerRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.mic"
      "romsg.BaseRequest\022\024\n\014ChatRoomName\030\002 \001(\t\022"
      "\030\n\020NewOwnerUserName\030\003 \001(\t\"M\n\035TransferCha"
      "tRoomOwnerResponse\022,\n\014BaseResponse\030\001 \002(\013"
      "2\026.micromsg.BaseResponse\"b\n\036GetChatRoomA"
      "nnouncementRequest\022*\n\013BaseRequest\030\001 \002(\0132"
      "\025.micromsg.BaseRequest\022\024\n\014ChatRoomName\030\002"
      " \001(\t\"e\n\037GetChatRoomAnnouncementResponse\022"
      ",\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseRes"
      "ponse\022\024\n\014Announcement\030\002 \001(\t\"\225\001\n\036SetChatR"
      "oomAnnouncementRequest\022*\n\013BaseRequest\030\001 "
      "\002(\0132\025.micromsg.BaseRequest\022\024\n\014ChatRoomNa"
      "me\030\002 \001(\t\022\024\n\014Announcement\030\003 \001(\t\022\033\n\023SetAnn"
      "ouncementFlag\030\004 \001(\r\"O\n\037SetChatRoomAnnoun"
      "cementResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.m"
      "icromsg.BaseResponse\"`\n\034GetChatRoomInfoD"
      "etailRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.micr"
      "omsg.BaseRequest\022\024\n\014ChatRoomName\030\002 \001(\t\"\275"
      "\001\n\035GetChatRoomInfoDetailResponse\022,\n\014Base"
      "Response\030\001 \002(\0132\026.micromsg.BaseResponse\022\024"
      "\n\014Announcement\030\002 \001(\t\022\033\n\023ChatRoomInfoVers"
      "ion\030\003 \001(\r\022\032\n\022AnnouncementEditor\030\004 \001(\t\022\037\n"
      "\027AnnouncementPublishTime\030\005 \001(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 14310);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mmcontact.proto", &protobuf_RegisterTypes);
  ::micromsg::protobuf_mmbuiltintype_2eproto::AddDescriptors();
  ::micromsg::protobuf_mmbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mmcontact_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetBrandListRequestBuffer::kCountFieldNumber;
const int GetBrandListRequestBuffer::kHiddenCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetBrandListRequestBuffer::GetBrandListRequestBuffer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetBrandListRequestBuffer)
}
GetBrandListRequestBuffer::GetBrandListRequestBuffer(const GetBrandListRequestBuffer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    reinterpret_cast<char*>(&hiddencount_) -
    reinterpret_cast<char*>(&count_) + sizeof(hiddencount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetBrandListRequestBuffer)
}

void GetBrandListRequestBuffer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&count_, 0, reinterpret_cast<char*>(&hiddencount_) -
    reinterpret_cast<char*>(&count_) + sizeof(hiddencount_));
}

GetBrandListRequestBuffer::~GetBrandListRequestBuffer() {
  // @@protoc_insertion_point(destructor:micromsg.GetBrandListRequestBuffer)
  SharedDtor();
}

void GetBrandListRequestBuffer::SharedDtor() {
}

void GetBrandListRequestBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBrandListRequestBuffer::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetBrandListRequestBuffer& GetBrandListRequestBuffer::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetBrandListRequestBuffer* GetBrandListRequestBuffer::New(::google::protobuf::Arena* arena) const {
  GetBrandListRequestBuffer* n = new GetBrandListRequestBuffer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetBrandListRequestBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetBrandListRequestBuffer)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&count_, 0, reinterpret_cast<char*>(&hiddencount_) -
      reinterpret_cast<char*>(&count_) + sizeof(hiddencount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetBrandListRequestBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetBrandListRequestBuffer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 HiddenCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hiddencount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hiddencount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetBrandListRequestBuffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetBrandListRequestBuffer)
  return false;
#undef DO_
}

void GetBrandListRequestBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetBrandListRequestBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // required uint32 HiddenCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hiddencount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetBrandListRequestBuffer)
}

::google::protobuf::uint8* GetBrandListRequestBuffer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetBrandListRequestBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // required uint32 HiddenCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hiddencount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetBrandListRequestBuffer)
  return target;
}

size_t GetBrandListRequestBuffer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetBrandListRequestBuffer)
  size_t total_size = 0;

  if (has_count()) {
    // required uint32 Count = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  if (has_hiddencount()) {
    // required uint32 HiddenCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hiddencount());
  }

  return total_size;
}
size_t GetBrandListRequestBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetBrandListRequestBuffer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 Count = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

    // required uint32 HiddenCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hiddencount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBrandListRequestBuffer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetBrandListRequestBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBrandListRequestBuffer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetBrandListRequestBuffer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetBrandListRequestBuffer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetBrandListRequestBuffer)
    MergeFrom(*source);
  }
}

void GetBrandListRequestBuffer::MergeFrom(const GetBrandListRequestBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetBrandListRequestBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000002u) {
      hiddencount_ = from.hiddencount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetBrandListRequestBuffer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetBrandListRequestBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBrandListRequestBuffer::CopyFrom(const GetBrandListRequestBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetBrandListRequestBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBrandListRequestBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GetBrandListRequestBuffer::Swap(GetBrandListRequestBuffer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetBrandListRequestBuffer::InternalSwap(GetBrandListRequestBuffer* other) {
  std::swap(count_, other->count_);
  std::swap(hiddencount_, other->hiddencount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetBrandListRequestBuffer::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetBrandListRequestBuffer

// required uint32 Count = 1;
bool GetBrandListRequestBuffer::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetBrandListRequestBuffer::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
void GetBrandListRequestBuffer::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetBrandListRequestBuffer::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 GetBrandListRequestBuffer::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GetBrandListRequestBuffer.Count)
  return count_;
}
void GetBrandListRequestBuffer::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetBrandListRequestBuffer.Count)
}

// required uint32 HiddenCount = 2;
bool GetBrandListRequestBuffer::has_hiddencount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetBrandListRequestBuffer::set_has_hiddencount() {
  _has_bits_[0] |= 0x00000002u;
}
void GetBrandListRequestBuffer::clear_has_hiddencount() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetBrandListRequestBuffer::clear_hiddencount() {
  hiddencount_ = 0u;
  clear_has_hiddencount();
}
::google::protobuf::uint32 GetBrandListRequestBuffer::hiddencount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetBrandListRequestBuffer.HiddenCount)
  return hiddencount_;
}
void GetBrandListRequestBuffer::set_hiddencount(::google::protobuf::uint32 value) {
  set_has_hiddencount();
  hiddencount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetBrandListRequestBuffer.HiddenCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetBrandListRequest::kBaseRequestFieldNumber;
const int GetBrandListRequest::kUserNameFieldNumber;
const int GetBrandListRequest::kRequestBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetBrandListRequest::GetBrandListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetBrandListRequest)
}
GetBrandListRequest::GetBrandListRequest(const GetBrandListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_requestbuffer()) {
    requestbuffer_ = new ::micromsg::SKBuiltinBuffer_t(*from.requestbuffer_);
  } else {
    requestbuffer_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetBrandListRequest)
}

void GetBrandListRequest::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&requestbuffer_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(requestbuffer_));
}

GetBrandListRequest::~GetBrandListRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetBrandListRequest)
  SharedDtor();
}

void GetBrandListRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete requestbuffer_;
  }
}

void GetBrandListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBrandListRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetBrandListRequest& GetBrandListRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetBrandListRequest* GetBrandListRequest::New(::google::protobuf::Arena* arena) const {
  GetBrandListRequest* n = new GetBrandListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetBrandListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetBrandListRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_requestbuffer()) {
      GOOGLE_DCHECK(requestbuffer_ != NULL);
      requestbuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetBrandListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetBrandListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetBrandListRequest.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t RequestBuffer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requestbuffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetBrandListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetBrandListRequest)
  return false;
#undef DO_
}

void GetBrandListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetBrandListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetBrandListRequest.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t RequestBuffer = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->requestbuffer_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetBrandListRequest)
}

::google::protobuf::uint8* GetBrandListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetBrandListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetBrandListRequest.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t RequestBuffer = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->requestbuffer_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetBrandListRequest)
  return target;
}

size_t GetBrandListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetBrandListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string UserName = 2;
  if (has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional .micromsg.SKBuiltinBuffer_t RequestBuffer = 3;
  if (has_requestbuffer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->requestbuffer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBrandListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetBrandListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBrandListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetBrandListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetBrandListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetBrandListRequest)
    MergeFrom(*source);
  }
}

void GetBrandListRequest::MergeFrom(const GetBrandListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetBrandListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_requestbuffer()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.requestbuffer());
    }
  }
}

void GetBrandListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetBrandListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBrandListRequest::CopyFrom(const GetBrandListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetBrandListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBrandListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_requestbuffer()) {
    if (!this->requestbuffer_->IsInitialized()) return false;
  }
  return true;
}

void GetBrandListRequest::Swap(GetBrandListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetBrandListRequest::InternalSwap(GetBrandListRequest* other) {
  username_.Swap(&other->username_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(requestbuffer_, other->requestbuffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetBrandListRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetBrandListRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetBrandListRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetBrandListRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GetBrandListRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetBrandListRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetBrandListRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetBrandListRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetBrandListRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetBrandListRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetBrandListRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetBrandListRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetBrandListRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetBrandListRequest.BaseRequest)
}

// optional string UserName = 2;
bool GetBrandListRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetBrandListRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void GetBrandListRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetBrandListRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& GetBrandListRequest::username() const {
  // @@protoc_insertion_point(field_get:micromsg.GetBrandListRequest.UserName)
  return username_.GetNoArena();
}
void GetBrandListRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetBrandListRequest.UserName)
}
#if LANG_CXX11
void GetBrandListRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetBrandListRequest.UserName)
}
#endif
void GetBrandListRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetBrandListRequest.UserName)
}
void GetBrandListRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetBrandListRequest.UserName)
}
::std::string* GetBrandListRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.GetBrandListRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetBrandListRequest::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.GetBrandListRequest.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetBrandListRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetBrandListRequest.UserName)
}

// optional .micromsg.SKBuiltinBuffer_t RequestBuffer = 3;
bool GetBrandListRequest::has_requestbuffer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetBrandListRequest::set_has_requestbuffer() {
  _has_bits_[0] |= 0x00000004u;
}
void GetBrandListRequest::clear_has_requestbuffer() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetBrandListRequest::clear_requestbuffer() {
  if (requestbuffer_ != NULL) requestbuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_requestbuffer();
}
const ::micromsg::SKBuiltinBuffer_t& GetBrandListRequest::requestbuffer() const {
  // @@protoc_insertion_point(field_get:micromsg.GetBrandListRequest.RequestBuffer)
  return requestbuffer_ != NULL ? *requestbuffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetBrandListRequest::mutable_requestbuffer() {
  set_has_requestbuffer();
  if (requestbuffer_ == NULL) {
    requestbuffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetBrandListRequest.RequestBuffer)
  return requestbuffer_;
}
::micromsg::SKBuiltinBuffer_t* GetBrandListRequest::release_requestbuffer() {
  // @@protoc_insertion_point(field_release:micromsg.GetBrandListRequest.RequestBuffer)
  clear_has_requestbuffer();
  ::micromsg::SKBuiltinBuffer_t* temp = requestbuffer_;
  requestbuffer_ = NULL;
  return temp;
}
void GetBrandListRequest::set_allocated_requestbuffer(::micromsg::SKBuiltinBuffer_t* requestbuffer) {
  delete requestbuffer_;
  requestbuffer_ = requestbuffer;
  if (requestbuffer) {
    set_has_requestbuffer();
  } else {
    clear_has_requestbuffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetBrandListRequest.RequestBuffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetBrandListResponse::kBaseResponseFieldNumber;
const int GetBrandListResponse::kBrandListFieldNumber;
const int GetBrandListResponse::kRequestBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetBrandListResponse::GetBrandListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetBrandListResponse)
}
GetBrandListResponse::GetBrandListResponse(const GetBrandListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  brandlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_brandlist()) {
    brandlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brandlist_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_requestbuffer()) {
    requestbuffer_ = new ::micromsg::SKBuiltinBuffer_t(*from.requestbuffer_);
  } else {
    requestbuffer_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetBrandListResponse)
}

void GetBrandListResponse::SharedCtor() {
  _cached_size_ = 0;
  brandlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&requestbuffer_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(requestbuffer_));
}

GetBrandListResponse::~GetBrandListResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetBrandListResponse)
  SharedDtor();
}

void GetBrandListResponse::SharedDtor() {
  brandlist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete requestbuffer_;
  }
}

void GetBrandListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBrandListResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetBrandListResponse& GetBrandListResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetBrandListResponse* GetBrandListResponse::New(::google::protobuf::Arena* arena) const {
  GetBrandListResponse* n = new GetBrandListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetBrandListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetBrandListResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_brandlist()) {
      GOOGLE_DCHECK(!brandlist_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*brandlist_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_requestbuffer()) {
      GOOGLE_DCHECK(requestbuffer_ != NULL);
      requestbuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetBrandListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetBrandListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BrandList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brandlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brandlist().data(), this->brandlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetBrandListResponse.BrandList");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t RequestBuffer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requestbuffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetBrandListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetBrandListResponse)
  return false;
#undef DO_
}

void GetBrandListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetBrandListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string BrandList = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brandlist().data(), this->brandlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetBrandListResponse.BrandList");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brandlist(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t RequestBuffer = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->requestbuffer_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetBrandListResponse)
}

::google::protobuf::uint8* GetBrandListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetBrandListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string BrandList = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brandlist().data(), this->brandlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetBrandListResponse.BrandList");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brandlist(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t RequestBuffer = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->requestbuffer_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetBrandListResponse)
  return target;
}

size_t GetBrandListResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetBrandListResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_requestbuffer()) {
    // required .micromsg.SKBuiltinBuffer_t RequestBuffer = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->requestbuffer_);
  }

  return total_size;
}
size_t GetBrandListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetBrandListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinBuffer_t RequestBuffer = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->requestbuffer_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string BrandList = 2;
  if (has_brandlist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brandlist());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBrandListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetBrandListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBrandListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetBrandListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetBrandListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetBrandListResponse)
    MergeFrom(*source);
  }
}

void GetBrandListResponse::MergeFrom(const GetBrandListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetBrandListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_brandlist();
      brandlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brandlist_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_requestbuffer()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.requestbuffer());
    }
  }
}

void GetBrandListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetBrandListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBrandListResponse::CopyFrom(const GetBrandListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetBrandListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBrandListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_requestbuffer()) {
    if (!this->requestbuffer_->IsInitialized()) return false;
  }
  return true;
}

void GetBrandListResponse::Swap(GetBrandListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetBrandListResponse::InternalSwap(GetBrandListResponse* other) {
  brandlist_.Swap(&other->brandlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(requestbuffer_, other->requestbuffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetBrandListResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetBrandListResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetBrandListResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetBrandListResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void GetBrandListResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetBrandListResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetBrandListResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetBrandListResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetBrandListResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetBrandListResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetBrandListResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetBrandListResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetBrandListResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetBrandListResponse.BaseResponse)
}

// optional string BrandList = 2;
bool GetBrandListResponse::has_brandlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetBrandListResponse::set_has_brandlist() {
  _has_bits_[0] |= 0x00000001u;
}
void GetBrandListResponse::clear_has_brandlist() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetBrandListResponse::clear_brandlist() {
  brandlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brandlist();
}
const ::std::string& GetBrandListResponse::brandlist() const {
  // @@protoc_insertion_point(field_get:micromsg.GetBrandListResponse.BrandList)
  return brandlist_.GetNoArena();
}
void GetBrandListResponse::set_brandlist(const ::std::string& value) {
  set_has_brandlist();
  brandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetBrandListResponse.BrandList)
}
#if LANG_CXX11
void GetBrandListResponse::set_brandlist(::std::string&& value) {
  set_has_brandlist();
  brandlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetBrandListResponse.BrandList)
}
#endif
void GetBrandListResponse::set_brandlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_brandlist();
  brandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetBrandListResponse.BrandList)
}
void GetBrandListResponse::set_brandlist(const char* value, size_t size) {
  set_has_brandlist();
  brandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetBrandListResponse.BrandList)
}
::std::string* GetBrandListResponse::mutable_brandlist() {
  set_has_brandlist();
  // @@protoc_insertion_point(field_mutable:micromsg.GetBrandListResponse.BrandList)
  return brandlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetBrandListResponse::release_brandlist() {
  // @@protoc_insertion_point(field_release:micromsg.GetBrandListResponse.BrandList)
  clear_has_brandlist();
  return brandlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetBrandListResponse::set_allocated_brandlist(::std::string* brandlist) {
  if (brandlist != NULL) {
    set_has_brandlist();
  } else {
    clear_has_brandlist();
  }
  brandlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brandlist);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetBrandListResponse.BrandList)
}

// required .micromsg.SKBuiltinBuffer_t RequestBuffer = 3;
bool GetBrandListResponse::has_requestbuffer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetBrandListResponse::set_has_requestbuffer() {
  _has_bits_[0] |= 0x00000004u;
}
void GetBrandListResponse::clear_has_requestbuffer() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetBrandListResponse::clear_requestbuffer() {
  if (requestbuffer_ != NULL) requestbuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_requestbuffer();
}
const ::micromsg::SKBuiltinBuffer_t& GetBrandListResponse::requestbuffer() const {
  // @@protoc_insertion_point(field_get:micromsg.GetBrandListResponse.RequestBuffer)
  return requestbuffer_ != NULL ? *requestbuffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetBrandListResponse::mutable_requestbuffer() {
  set_has_requestbuffer();
  if (requestbuffer_ == NULL) {
    requestbuffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetBrandListResponse.RequestBuffer)
  return requestbuffer_;
}
::micromsg::SKBuiltinBuffer_t* GetBrandListResponse::release_requestbuffer() {
  // @@protoc_insertion_point(field_release:micromsg.GetBrandListResponse.RequestBuffer)
  clear_has_requestbuffer();
  ::micromsg::SKBuiltinBuffer_t* temp = requestbuffer_;
  requestbuffer_ = NULL;
  return temp;
}
void GetBrandListResponse::set_allocated_requestbuffer(::micromsg::SKBuiltinBuffer_t* requestbuffer) {
  delete requestbuffer_;
  requestbuffer_ = requestbuffer;
  if (requestbuffer) {
    set_has_requestbuffer();
  } else {
    clear_has_requestbuffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetBrandListResponse.RequestBuffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APPItem::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APPItem::APPItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.APPItem)
}
APPItem::APPItem(const APPItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.APPItem)
}

void APPItem::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

APPItem::~APPItem() {
  // @@protoc_insertion_point(destructor:micromsg.APPItem)
  SharedDtor();
}

void APPItem::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void APPItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APPItem::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const APPItem& APPItem::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

APPItem* APPItem::New(::google::protobuf::Arena* arena) const {
  APPItem* n = new APPItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APPItem::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.APPItem)
  if (has_username()) {
    GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*username_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool APPItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.APPItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.APPItem.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.APPItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.APPItem)
  return false;
#undef DO_
}

void APPItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.APPItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.APPItem.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.APPItem)
}

::google::protobuf::uint8* APPItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.APPItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.APPItem.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.APPItem)
  return target;
}

size_t APPItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.APPItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string UserName = 1;
  if (has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APPItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.APPItem)
  GOOGLE_DCHECK_NE(&from, this);
  const APPItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APPItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.APPItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.APPItem)
    MergeFrom(*source);
  }
}

void APPItem::MergeFrom(const APPItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.APPItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_username()) {
    set_has_username();
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void APPItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.APPItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APPItem::CopyFrom(const APPItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.APPItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APPItem::IsInitialized() const {
  return true;
}

void APPItem::Swap(APPItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APPItem::InternalSwap(APPItem* other) {
  username_.Swap(&other->username_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APPItem::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APPItem

// optional string UserName = 1;
bool APPItem::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void APPItem::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void APPItem::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void APPItem::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& APPItem::username() const {
  // @@protoc_insertion_point(field_get:micromsg.APPItem.UserName)
  return username_.GetNoArena();
}
void APPItem::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.APPItem.UserName)
}
#if LANG_CXX11
void APPItem::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.APPItem.UserName)
}
#endif
void APPItem::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.APPItem.UserName)
}
void APPItem::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.APPItem.UserName)
}
::std::string* APPItem::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.APPItem.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* APPItem::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.APPItem.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APPItem::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.APPItem.UserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetAPPListRequest::kBaseRequestFieldNumber;
const int SetAPPListRequest::kCountFieldNumber;
const int SetAPPListRequest::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetAPPListRequest::SetAPPListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SetAPPListRequest)
}
SetAPPListRequest::SetAPPListRequest(const SetAPPListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SetAPPListRequest)
}

void SetAPPListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(count_));
}

SetAPPListRequest::~SetAPPListRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SetAPPListRequest)
  SharedDtor();
}

void SetAPPListRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void SetAPPListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetAPPListRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetAPPListRequest& SetAPPListRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetAPPListRequest* SetAPPListRequest::New(::google::protobuf::Arena* arena) const {
  SetAPPListRequest* n = new SetAPPListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetAPPListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SetAPPListRequest)
  list_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SetAPPListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SetAPPListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.APPItem List = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SetAPPListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SetAPPListRequest)
  return false;
#undef DO_
}

void SetAPPListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SetAPPListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .micromsg.APPItem List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SetAPPListRequest)
}

::google::protobuf::uint8* SetAPPListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SetAPPListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.APPItem List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SetAPPListRequest)
  return target;
}

size_t SetAPPListRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SetAPPListRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t SetAPPListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SetAPPListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.APPItem List = 3;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetAPPListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SetAPPListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAPPListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetAPPListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SetAPPListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SetAPPListRequest)
    MergeFrom(*source);
  }
}

void SetAPPListRequest::MergeFrom(const SetAPPListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SetAPPListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetAPPListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SetAPPListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAPPListRequest::CopyFrom(const SetAPPListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SetAPPListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAPPListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void SetAPPListRequest::Swap(SetAPPListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetAPPListRequest::InternalSwap(SetAPPListRequest* other) {
  list_.InternalSwap(&other->list_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetAPPListRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetAPPListRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SetAPPListRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetAPPListRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void SetAPPListRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void SetAPPListRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SetAPPListRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SetAPPListRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SetAPPListRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SetAPPListRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SetAPPListRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SetAPPListRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SetAPPListRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetAPPListRequest.BaseRequest)
}

// required uint32 Count = 2;
bool SetAPPListRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SetAPPListRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void SetAPPListRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void SetAPPListRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 SetAPPListRequest::count() const {
  // @@protoc_insertion_point(field_get:micromsg.SetAPPListRequest.Count)
  return count_;
}
void SetAPPListRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SetAPPListRequest.Count)
}

// repeated .micromsg.APPItem List = 3;
int SetAPPListRequest::list_size() const {
  return list_.size();
}
void SetAPPListRequest::clear_list() {
  list_.Clear();
}
const ::micromsg::APPItem& SetAPPListRequest::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SetAPPListRequest.List)
  return list_.Get(index);
}
::micromsg::APPItem* SetAPPListRequest::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SetAPPListRequest.List)
  return list_.Mutable(index);
}
::micromsg::APPItem* SetAPPListRequest::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.SetAPPListRequest.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::APPItem >*
SetAPPListRequest::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SetAPPListRequest.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::APPItem >&
SetAPPListRequest::list() const {
  // @@protoc_insertion_point(field_list:micromsg.SetAPPListRequest.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetAPPListResponse::kBaseResponseFieldNumber;
const int SetAPPListResponse::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetAPPListResponse::SetAPPListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SetAPPListResponse)
}
SetAPPListResponse::SetAPPListResponse(const SetAPPListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  hash_ = from.hash_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SetAPPListResponse)
}

void SetAPPListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&hash_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(hash_));
}

SetAPPListResponse::~SetAPPListResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SetAPPListResponse)
  SharedDtor();
}

void SetAPPListResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void SetAPPListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetAPPListResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetAPPListResponse& SetAPPListResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetAPPListResponse* SetAPPListResponse::New(::google::protobuf::Arena* arena) const {
  SetAPPListResponse* n = new SetAPPListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetAPPListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SetAPPListResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  hash_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SetAPPListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SetAPPListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SetAPPListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SetAPPListResponse)
  return false;
#undef DO_
}

void SetAPPListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SetAPPListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Hash = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SetAPPListResponse)
}

::google::protobuf::uint8* SetAPPListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SetAPPListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Hash = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SetAPPListResponse)
  return target;
}

size_t SetAPPListResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SetAPPListResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_hash()) {
    // required uint32 Hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hash());
  }

  return total_size;
}
size_t SetAPPListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SetAPPListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hash());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetAPPListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SetAPPListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAPPListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetAPPListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SetAPPListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SetAPPListResponse)
    MergeFrom(*source);
  }
}

void SetAPPListResponse::MergeFrom(const SetAPPListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SetAPPListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      hash_ = from.hash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetAPPListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SetAPPListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAPPListResponse::CopyFrom(const SetAPPListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SetAPPListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAPPListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void SetAPPListResponse::Swap(SetAPPListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetAPPListResponse::InternalSwap(SetAPPListResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(hash_, other->hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetAPPListResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetAPPListResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SetAPPListResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetAPPListResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void SetAPPListResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void SetAPPListResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SetAPPListResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SetAPPListResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SetAPPListResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SetAPPListResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SetAPPListResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SetAPPListResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SetAPPListResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetAPPListResponse.BaseResponse)
}

// required uint32 Hash = 2;
bool SetAPPListResponse::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SetAPPListResponse::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void SetAPPListResponse::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void SetAPPListResponse::clear_hash() {
  hash_ = 0u;
  clear_has_hash();
}
::google::protobuf::uint32 SetAPPListResponse::hash() const {
  // @@protoc_insertion_point(field_get:micromsg.SetAPPListResponse.Hash)
  return hash_;
}
void SetAPPListResponse::set_hash(::google::protobuf::uint32 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SetAPPListResponse.Hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAPPListRequest::kBaseRequestFieldNumber;
const int GetAPPListRequest::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAPPListRequest::GetAPPListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetAPPListRequest)
}
GetAPPListRequest::GetAPPListRequest(const GetAPPListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  hash_ = from.hash_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetAPPListRequest)
}

void GetAPPListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&hash_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(hash_));
}

GetAPPListRequest::~GetAPPListRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetAPPListRequest)
  SharedDtor();
}

void GetAPPListRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetAPPListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAPPListRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAPPListRequest& GetAPPListRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetAPPListRequest* GetAPPListRequest::New(::google::protobuf::Arena* arena) const {
  GetAPPListRequest* n = new GetAPPListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAPPListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetAPPListRequest)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  hash_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetAPPListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetAPPListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetAPPListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetAPPListRequest)
  return false;
#undef DO_
}

void GetAPPListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetAPPListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Hash = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetAPPListRequest)
}

::google::protobuf::uint8* GetAPPListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetAPPListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Hash = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetAPPListRequest)
  return target;
}

size_t GetAPPListRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetAPPListRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_hash()) {
    // required uint32 Hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hash());
  }

  return total_size;
}
size_t GetAPPListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetAPPListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hash());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAPPListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetAPPListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAPPListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAPPListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetAPPListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetAPPListRequest)
    MergeFrom(*source);
  }
}

void GetAPPListRequest::MergeFrom(const GetAPPListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetAPPListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      hash_ = from.hash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetAPPListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetAPPListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAPPListRequest::CopyFrom(const GetAPPListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetAPPListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAPPListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetAPPListRequest::Swap(GetAPPListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAPPListRequest::InternalSwap(GetAPPListRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(hash_, other->hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAPPListRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAPPListRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetAPPListRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetAPPListRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void GetAPPListRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetAPPListRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetAPPListRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetAPPListRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetAPPListRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetAPPListRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetAPPListRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetAPPListRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetAPPListRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetAPPListRequest.BaseRequest)
}

// required uint32 Hash = 2;
bool GetAPPListRequest::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetAPPListRequest::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void GetAPPListRequest::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetAPPListRequest::clear_hash() {
  hash_ = 0u;
  clear_has_hash();
}
::google::protobuf::uint32 GetAPPListRequest::hash() const {
  // @@protoc_insertion_point(field_get:micromsg.GetAPPListRequest.Hash)
  return hash_;
}
void GetAPPListRequest::set_hash(::google::protobuf::uint32 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetAPPListRequest.Hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAPPListResponse::kBaseResponseFieldNumber;
const int GetAPPListResponse::kCountFieldNumber;
const int GetAPPListResponse::kListFieldNumber;
const int GetAPPListResponse::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAPPListResponse::GetAPPListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetAPPListResponse)
}
GetAPPListResponse::GetAPPListResponse(const GetAPPListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&count_, &from.count_,
    reinterpret_cast<char*>(&hash_) -
    reinterpret_cast<char*>(&count_) + sizeof(hash_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetAPPListResponse)
}

void GetAPPListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&hash_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(hash_));
}

GetAPPListResponse::~GetAPPListResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetAPPListResponse)
  SharedDtor();
}

void GetAPPListResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetAPPListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAPPListResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAPPListResponse& GetAPPListResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetAPPListResponse* GetAPPListResponse::New(::google::protobuf::Arena* arena) const {
  GetAPPListResponse* n = new GetAPPListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAPPListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetAPPListResponse)
  list_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&count_, 0, reinterpret_cast<char*>(&hash_) -
      reinterpret_cast<char*>(&count_) + sizeof(hash_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetAPPListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetAPPListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.APPItem List = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Hash = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetAPPListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetAPPListResponse)
  return false;
#undef DO_
}

void GetAPPListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetAPPListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .micromsg.APPItem List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  // required uint32 Hash = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetAPPListResponse)
}

::google::protobuf::uint8* GetAPPListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetAPPListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.APPItem List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->list(i), deterministic, target);
  }

  // required uint32 Hash = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetAPPListResponse)
  return target;
}

size_t GetAPPListResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetAPPListResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  if (has_hash()) {
    // required uint32 Hash = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hash());
  }

  return total_size;
}
size_t GetAPPListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetAPPListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

    // required uint32 Hash = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hash());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.APPItem List = 3;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAPPListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetAPPListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAPPListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAPPListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetAPPListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetAPPListResponse)
    MergeFrom(*source);
  }
}

void GetAPPListResponse::MergeFrom(const GetAPPListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetAPPListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      hash_ = from.hash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetAPPListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetAPPListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAPPListResponse::CopyFrom(const GetAPPListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetAPPListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAPPListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetAPPListResponse::Swap(GetAPPListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAPPListResponse::InternalSwap(GetAPPListResponse* other) {
  list_.InternalSwap(&other->list_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(count_, other->count_);
  std::swap(hash_, other->hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAPPListResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAPPListResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetAPPListResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetAPPListResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetAPPListResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetAPPListResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetAPPListResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetAPPListResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetAPPListResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetAPPListResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetAPPListResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetAPPListResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetAPPListResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetAPPListResponse.BaseResponse)
}

// required uint32 Count = 2;
bool GetAPPListResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetAPPListResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void GetAPPListResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetAPPListResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 GetAPPListResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GetAPPListResponse.Count)
  return count_;
}
void GetAPPListResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetAPPListResponse.Count)
}

// repeated .micromsg.APPItem List = 3;
int GetAPPListResponse::list_size() const {
  return list_.size();
}
void GetAPPListResponse::clear_list() {
  list_.Clear();
}
const ::micromsg::APPItem& GetAPPListResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetAPPListResponse.List)
  return list_.Get(index);
}
::micromsg::APPItem* GetAPPListResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetAPPListResponse.List)
  return list_.Mutable(index);
}
::micromsg::APPItem* GetAPPListResponse::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.GetAPPListResponse.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::APPItem >*
GetAPPListResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetAPPListResponse.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::APPItem >&
GetAPPListResponse::list() const {
  // @@protoc_insertion_point(field_list:micromsg.GetAPPListResponse.List)
  return list_;
}

// required uint32 Hash = 4;
bool GetAPPListResponse::has_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetAPPListResponse::set_has_hash() {
  _has_bits_[0] |= 0x00000004u;
}
void GetAPPListResponse::clear_has_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetAPPListResponse::clear_hash() {
  hash_ = 0u;
  clear_has_hash();
}
::google::protobuf::uint32 GetAPPListResponse::hash() const {
  // @@protoc_insertion_point(field_get:micromsg.GetAPPListResponse.Hash)
  return hash_;
}
void GetAPPListResponse::set_hash(::google::protobuf::uint32 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetAPPListResponse.Hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchQRCodeReq::kBaseRequestFieldNumber;
const int SearchQRCodeReq::kQRCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchQRCodeReq::SearchQRCodeReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SearchQRCodeReq)
}
SearchQRCodeReq::SearchQRCodeReq(const SearchQRCodeReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qrcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qrcode()) {
    qrcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qrcode_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.SearchQRCodeReq)
}

void SearchQRCodeReq::SharedCtor() {
  _cached_size_ = 0;
  qrcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

SearchQRCodeReq::~SearchQRCodeReq() {
  // @@protoc_insertion_point(destructor:micromsg.SearchQRCodeReq)
  SharedDtor();
}

void SearchQRCodeReq::SharedDtor() {
  qrcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void SearchQRCodeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchQRCodeReq::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchQRCodeReq& SearchQRCodeReq::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchQRCodeReq* SearchQRCodeReq::New(::google::protobuf::Arena* arena) const {
  SearchQRCodeReq* n = new SearchQRCodeReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchQRCodeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SearchQRCodeReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_qrcode()) {
      GOOGLE_DCHECK(!qrcode_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*qrcode_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SearchQRCodeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SearchQRCodeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string QRCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qrcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qrcode().data(), this->qrcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchQRCodeReq.QRCode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SearchQRCodeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SearchQRCodeReq)
  return false;
#undef DO_
}

void SearchQRCodeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SearchQRCodeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string QRCode = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qrcode().data(), this->qrcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchQRCodeReq.QRCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->qrcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SearchQRCodeReq)
}

::google::protobuf::uint8* SearchQRCodeReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SearchQRCodeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string QRCode = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qrcode().data(), this->qrcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchQRCodeReq.QRCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->qrcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SearchQRCodeReq)
  return target;
}

size_t SearchQRCodeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SearchQRCodeReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string QRCode = 2;
  if (has_qrcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->qrcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchQRCodeReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SearchQRCodeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchQRCodeReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchQRCodeReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SearchQRCodeReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SearchQRCodeReq)
    MergeFrom(*source);
  }
}

void SearchQRCodeReq::MergeFrom(const SearchQRCodeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SearchQRCodeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_qrcode();
      qrcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qrcode_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void SearchQRCodeReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SearchQRCodeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchQRCodeReq::CopyFrom(const SearchQRCodeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SearchQRCodeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchQRCodeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void SearchQRCodeReq::Swap(SearchQRCodeReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchQRCodeReq::InternalSwap(SearchQRCodeReq* other) {
  qrcode_.Swap(&other->qrcode_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchQRCodeReq::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchQRCodeReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool SearchQRCodeReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SearchQRCodeReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void SearchQRCodeReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void SearchQRCodeReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SearchQRCodeReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchQRCodeReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SearchQRCodeReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchQRCodeReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SearchQRCodeReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SearchQRCodeReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SearchQRCodeReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchQRCodeReq.BaseRequest)
}

// optional string QRCode = 2;
bool SearchQRCodeReq::has_qrcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SearchQRCodeReq::set_has_qrcode() {
  _has_bits_[0] |= 0x00000001u;
}
void SearchQRCodeReq::clear_has_qrcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void SearchQRCodeReq::clear_qrcode() {
  qrcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qrcode();
}
const ::std::string& SearchQRCodeReq::qrcode() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchQRCodeReq.QRCode)
  return qrcode_.GetNoArena();
}
void SearchQRCodeReq::set_qrcode(const ::std::string& value) {
  set_has_qrcode();
  qrcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchQRCodeReq.QRCode)
}
#if LANG_CXX11
void SearchQRCodeReq::set_qrcode(::std::string&& value) {
  set_has_qrcode();
  qrcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchQRCodeReq.QRCode)
}
#endif
void SearchQRCodeReq::set_qrcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qrcode();
  qrcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchQRCodeReq.QRCode)
}
void SearchQRCodeReq::set_qrcode(const char* value, size_t size) {
  set_has_qrcode();
  qrcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchQRCodeReq.QRCode)
}
::std::string* SearchQRCodeReq::mutable_qrcode() {
  set_has_qrcode();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchQRCodeReq.QRCode)
  return qrcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchQRCodeReq::release_qrcode() {
  // @@protoc_insertion_point(field_release:micromsg.SearchQRCodeReq.QRCode)
  clear_has_qrcode();
  return qrcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchQRCodeReq::set_allocated_qrcode(::std::string* qrcode) {
  if (qrcode != NULL) {
    set_has_qrcode();
  } else {
    clear_has_qrcode();
  }
  qrcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qrcode);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchQRCodeReq.QRCode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchQRCodeResp::kBaseResponseFieldNumber;
const int SearchQRCodeResp::kTypeFieldNumber;
const int SearchQRCodeResp::kURLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchQRCodeResp::SearchQRCodeResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SearchQRCodeResp)
}
SearchQRCodeResp::SearchQRCodeResp(const SearchQRCodeResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SearchQRCodeResp)
}

void SearchQRCodeResp::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(type_));
}

SearchQRCodeResp::~SearchQRCodeResp() {
  // @@protoc_insertion_point(destructor:micromsg.SearchQRCodeResp)
  SharedDtor();
}

void SearchQRCodeResp::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void SearchQRCodeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchQRCodeResp::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchQRCodeResp& SearchQRCodeResp::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchQRCodeResp* SearchQRCodeResp::New(::google::protobuf::Arena* arena) const {
  SearchQRCodeResp* n = new SearchQRCodeResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchQRCodeResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SearchQRCodeResp)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SearchQRCodeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SearchQRCodeResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string URL = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchQRCodeResp.URL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SearchQRCodeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SearchQRCodeResp)
  return false;
#undef DO_
}

void SearchQRCodeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SearchQRCodeResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional string URL = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchQRCodeResp.URL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SearchQRCodeResp)
}

::google::protobuf::uint8* SearchQRCodeResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SearchQRCodeResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional string URL = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchQRCodeResp.URL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SearchQRCodeResp)
  return target;
}

size_t SearchQRCodeResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SearchQRCodeResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_type()) {
    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  return total_size;
}
size_t SearchQRCodeResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SearchQRCodeResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string URL = 3;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchQRCodeResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SearchQRCodeResp)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchQRCodeResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchQRCodeResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SearchQRCodeResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SearchQRCodeResp)
    MergeFrom(*source);
  }
}

void SearchQRCodeResp::MergeFrom(const SearchQRCodeResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SearchQRCodeResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SearchQRCodeResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SearchQRCodeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchQRCodeResp::CopyFrom(const SearchQRCodeResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SearchQRCodeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchQRCodeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void SearchQRCodeResp::Swap(SearchQRCodeResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchQRCodeResp::InternalSwap(SearchQRCodeResp* other) {
  url_.Swap(&other->url_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchQRCodeResp::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchQRCodeResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool SearchQRCodeResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SearchQRCodeResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void SearchQRCodeResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void SearchQRCodeResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SearchQRCodeResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchQRCodeResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SearchQRCodeResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchQRCodeResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SearchQRCodeResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SearchQRCodeResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SearchQRCodeResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchQRCodeResp.BaseResponse)
}

// required uint32 Type = 2;
bool SearchQRCodeResp::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SearchQRCodeResp::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void SearchQRCodeResp::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void SearchQRCodeResp::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 SearchQRCodeResp::type() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchQRCodeResp.Type)
  return type_;
}
void SearchQRCodeResp::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchQRCodeResp.Type)
}

// optional string URL = 3;
bool SearchQRCodeResp::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SearchQRCodeResp::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void SearchQRCodeResp::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void SearchQRCodeResp::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& SearchQRCodeResp::url() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchQRCodeResp.URL)
  return url_.GetNoArena();
}
void SearchQRCodeResp::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchQRCodeResp.URL)
}
#if LANG_CXX11
void SearchQRCodeResp::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchQRCodeResp.URL)
}
#endif
void SearchQRCodeResp::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchQRCodeResp.URL)
}
void SearchQRCodeResp::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchQRCodeResp.URL)
}
::std::string* SearchQRCodeResp::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchQRCodeResp.URL)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchQRCodeResp::release_url() {
  // @@protoc_insertion_point(field_release:micromsg.SearchQRCodeResp.URL)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchQRCodeResp::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchQRCodeResp.URL)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchContactRequest::kBaseRequestFieldNumber;
const int SearchContactRequest::kUserNameFieldNumber;
const int SearchContactRequest::kOpCodeFieldNumber;
const int SearchContactRequest::kReqBufFieldNumber;
const int SearchContactRequest::kFromSceneFieldNumber;
const int SearchContactRequest::kSearchSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchContactRequest::SearchContactRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SearchContactRequest)
}
SearchContactRequest::SearchContactRequest(const SearchContactRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  if (from.has_reqbuf()) {
    reqbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.reqbuf_);
  } else {
    reqbuf_ = NULL;
  }
  ::memcpy(&opcode_, &from.opcode_,
    reinterpret_cast<char*>(&searchscene_) -
    reinterpret_cast<char*>(&opcode_) + sizeof(searchscene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SearchContactRequest)
}

void SearchContactRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&searchscene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(searchscene_));
}

SearchContactRequest::~SearchContactRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SearchContactRequest)
  SharedDtor();
}

void SearchContactRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete username_;
  }
  if (this != internal_default_instance()) {
    delete reqbuf_;
  }
}

void SearchContactRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchContactRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchContactRequest& SearchContactRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchContactRequest* SearchContactRequest::New(::google::protobuf::Arena* arena) const {
  SearchContactRequest* n = new SearchContactRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchContactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SearchContactRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(username_ != NULL);
      username_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_reqbuf()) {
      GOOGLE_DCHECK(reqbuf_ != NULL);
      reqbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&opcode_, 0, reinterpret_cast<char*>(&searchscene_) -
      reinterpret_cast<char*>(&opcode_) + sizeof(searchscene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SearchContactRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SearchContactRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 OpCode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t ReqBuf = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 FromScene = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_fromscene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromscene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SearchScene = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_searchscene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &searchscene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SearchContactRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SearchContactRequest)
  return false;
#undef DO_
}

void SearchContactRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SearchContactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SKBuiltinString_t UserName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->username_, output);
  }

  // optional uint32 OpCode = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->opcode(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t ReqBuf = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->reqbuf_, output);
  }

  // optional uint32 FromScene = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fromscene(), output);
  }

  // optional uint32 SearchScene = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->searchscene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SearchContactRequest)
}

::google::protobuf::uint8* SearchContactRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SearchContactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t UserName = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->username_, deterministic, target);
  }

  // optional uint32 OpCode = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->opcode(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t ReqBuf = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->reqbuf_, deterministic, target);
  }

  // optional uint32 FromScene = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fromscene(), target);
  }

  // optional uint32 SearchScene = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->searchscene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SearchContactRequest)
  return target;
}

size_t SearchContactRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SearchContactRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_username()) {
    // required .micromsg.SKBuiltinString_t UserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }

  return total_size;
}
size_t SearchContactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SearchContactRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinString_t UserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 60u) {
    // optional .micromsg.SKBuiltinBuffer_t ReqBuf = 4;
    if (has_reqbuf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reqbuf_);
    }

    // optional uint32 OpCode = 3;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opcode());
    }

    // optional uint32 FromScene = 5;
    if (has_fromscene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromscene());
    }

    // optional uint32 SearchScene = 6;
    if (has_searchscene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->searchscene());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchContactRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SearchContactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchContactRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchContactRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SearchContactRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SearchContactRequest)
    MergeFrom(*source);
  }
}

void SearchContactRequest::MergeFrom(const SearchContactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SearchContactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_reqbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.reqbuf());
    }
    if (cached_has_bits & 0x00000008u) {
      opcode_ = from.opcode_;
    }
    if (cached_has_bits & 0x00000010u) {
      fromscene_ = from.fromscene_;
    }
    if (cached_has_bits & 0x00000020u) {
      searchscene_ = from.searchscene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SearchContactRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SearchContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchContactRequest::CopyFrom(const SearchContactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SearchContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchContactRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_reqbuf()) {
    if (!this->reqbuf_->IsInitialized()) return false;
  }
  return true;
}

void SearchContactRequest::Swap(SearchContactRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchContactRequest::InternalSwap(SearchContactRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(username_, other->username_);
  std::swap(reqbuf_, other->reqbuf_);
  std::swap(opcode_, other->opcode_);
  std::swap(fromscene_, other->fromscene_);
  std::swap(searchscene_, other->searchscene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchContactRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchContactRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SearchContactRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SearchContactRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void SearchContactRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void SearchContactRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SearchContactRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SearchContactRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SearchContactRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SearchContactRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactRequest.BaseRequest)
}

// required .micromsg.SKBuiltinString_t UserName = 2;
bool SearchContactRequest::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SearchContactRequest::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
void SearchContactRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void SearchContactRequest::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& SearchContactRequest::username() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactRequest.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* SearchContactRequest::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactRequest.UserName)
  return username_;
}
::micromsg::SKBuiltinString_t* SearchContactRequest::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactRequest.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void SearchContactRequest::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactRequest.UserName)
}

// optional uint32 OpCode = 3;
bool SearchContactRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SearchContactRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000008u;
}
void SearchContactRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000008u;
}
void SearchContactRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 SearchContactRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactRequest.OpCode)
  return opcode_;
}
void SearchContactRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactRequest.OpCode)
}

// optional .micromsg.SKBuiltinBuffer_t ReqBuf = 4;
bool SearchContactRequest::has_reqbuf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SearchContactRequest::set_has_reqbuf() {
  _has_bits_[0] |= 0x00000004u;
}
void SearchContactRequest::clear_has_reqbuf() {
  _has_bits_[0] &= ~0x00000004u;
}
void SearchContactRequest::clear_reqbuf() {
  if (reqbuf_ != NULL) reqbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_reqbuf();
}
const ::micromsg::SKBuiltinBuffer_t& SearchContactRequest::reqbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactRequest.ReqBuf)
  return reqbuf_ != NULL ? *reqbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* SearchContactRequest::mutable_reqbuf() {
  set_has_reqbuf();
  if (reqbuf_ == NULL) {
    reqbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactRequest.ReqBuf)
  return reqbuf_;
}
::micromsg::SKBuiltinBuffer_t* SearchContactRequest::release_reqbuf() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactRequest.ReqBuf)
  clear_has_reqbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = reqbuf_;
  reqbuf_ = NULL;
  return temp;
}
void SearchContactRequest::set_allocated_reqbuf(::micromsg::SKBuiltinBuffer_t* reqbuf) {
  delete reqbuf_;
  reqbuf_ = reqbuf;
  if (reqbuf) {
    set_has_reqbuf();
  } else {
    clear_has_reqbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactRequest.ReqBuf)
}

// optional uint32 FromScene = 5;
bool SearchContactRequest::has_fromscene() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SearchContactRequest::set_has_fromscene() {
  _has_bits_[0] |= 0x00000010u;
}
void SearchContactRequest::clear_has_fromscene() {
  _has_bits_[0] &= ~0x00000010u;
}
void SearchContactRequest::clear_fromscene() {
  fromscene_ = 0u;
  clear_has_fromscene();
}
::google::protobuf::uint32 SearchContactRequest::fromscene() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactRequest.FromScene)
  return fromscene_;
}
void SearchContactRequest::set_fromscene(::google::protobuf::uint32 value) {
  set_has_fromscene();
  fromscene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactRequest.FromScene)
}

// optional uint32 SearchScene = 6;
bool SearchContactRequest::has_searchscene() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SearchContactRequest::set_has_searchscene() {
  _has_bits_[0] |= 0x00000020u;
}
void SearchContactRequest::clear_has_searchscene() {
  _has_bits_[0] &= ~0x00000020u;
}
void SearchContactRequest::clear_searchscene() {
  searchscene_ = 0u;
  clear_has_searchscene();
}
::google::protobuf::uint32 SearchContactRequest::searchscene() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactRequest.SearchScene)
  return searchscene_;
}
void SearchContactRequest::set_searchscene(::google::protobuf::uint32 value) {
  set_has_searchscene();
  searchscene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactRequest.SearchScene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchContactItem::kUserNameFieldNumber;
const int SearchContactItem::kNickNameFieldNumber;
const int SearchContactItem::kPYInitialFieldNumber;
const int SearchContactItem::kQuanPinFieldNumber;
const int SearchContactItem::kSexFieldNumber;
const int SearchContactItem::kImgBufFieldNumber;
const int SearchContactItem::kProvinceFieldNumber;
const int SearchContactItem::kCityFieldNumber;
const int SearchContactItem::kSignatureFieldNumber;
const int SearchContactItem::kPersonalCardFieldNumber;
const int SearchContactItem::kVerifyFlagFieldNumber;
const int SearchContactItem::kVerifyInfoFieldNumber;
const int SearchContactItem::kWeiboFieldNumber;
const int SearchContactItem::kAliasFieldNumber;
const int SearchContactItem::kWeiboNicknameFieldNumber;
const int SearchContactItem::kWeiboFlagFieldNumber;
const int SearchContactItem::kAlbumStyleFieldNumber;
const int SearchContactItem::kAlbumFlagFieldNumber;
const int SearchContactItem::kAlbumBGImgIDFieldNumber;
const int SearchContactItem::kSnsUserInfoFieldNumber;
const int SearchContactItem::kCountryFieldNumber;
const int SearchContactItem::kMyBrandListFieldNumber;
const int SearchContactItem::kCustomizedInfoFieldNumber;
const int SearchContactItem::kBigHeadImgUrlFieldNumber;
const int SearchContactItem::kSmallHeadImgUrlFieldNumber;
const int SearchContactItem::kAntispamTicketFieldNumber;
const int SearchContactItem::kMatchTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchContactItem::SearchContactItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SearchContactItem)
}
SearchContactItem::SearchContactItem(const SearchContactItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_province()) {
    province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
  }
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_city()) {
    city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  verifyinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifyinfo()) {
    verifyinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifyinfo_);
  }
  weibo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weibo()) {
    weibo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weibo_);
  }
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_alias()) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  weibonickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weibonickname()) {
    weibonickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weibonickname_);
  }
  albumbgimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_albumbgimgid()) {
    albumbgimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albumbgimgid_);
  }
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country()) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  mybrandlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mybrandlist()) {
    mybrandlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mybrandlist_);
  }
  bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bigheadimgurl()) {
    bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadimgurl_);
  }
  smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_smallheadimgurl()) {
    smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadimgurl_);
  }
  antispamticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_antispamticket()) {
    antispamticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.antispamticket_);
  }
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  if (from.has_nickname()) {
    nickname_ = new ::micromsg::SKBuiltinString_t(*from.nickname_);
  } else {
    nickname_ = NULL;
  }
  if (from.has_pyinitial()) {
    pyinitial_ = new ::micromsg::SKBuiltinString_t(*from.pyinitial_);
  } else {
    pyinitial_ = NULL;
  }
  if (from.has_quanpin()) {
    quanpin_ = new ::micromsg::SKBuiltinString_t(*from.quanpin_);
  } else {
    quanpin_ = NULL;
  }
  if (from.has_imgbuf()) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.imgbuf_);
  } else {
    imgbuf_ = NULL;
  }
  if (from.has_snsuserinfo()) {
    snsuserinfo_ = new ::micromsg::SnsUserInfo(*from.snsuserinfo_);
  } else {
    snsuserinfo_ = NULL;
  }
  if (from.has_customizedinfo()) {
    customizedinfo_ = new ::micromsg::CustomizedInfo(*from.customizedinfo_);
  } else {
    customizedinfo_ = NULL;
  }
  ::memcpy(&sex_, &from.sex_,
    reinterpret_cast<char*>(&matchtype_) -
    reinterpret_cast<char*>(&sex_) + sizeof(matchtype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SearchContactItem)
}

void SearchContactItem::SharedCtor() {
  _cached_size_ = 0;
  province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifyinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weibo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weibonickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albumbgimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mybrandlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  antispamticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&username_, 0, reinterpret_cast<char*>(&matchtype_) -
    reinterpret_cast<char*>(&username_) + sizeof(matchtype_));
}

SearchContactItem::~SearchContactItem() {
  // @@protoc_insertion_point(destructor:micromsg.SearchContactItem)
  SharedDtor();
}

void SearchContactItem::SharedDtor() {
  province_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifyinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weibo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weibonickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albumbgimgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mybrandlist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  antispamticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete username_;
  }
  if (this != internal_default_instance()) {
    delete nickname_;
  }
  if (this != internal_default_instance()) {
    delete pyinitial_;
  }
  if (this != internal_default_instance()) {
    delete quanpin_;
  }
  if (this != internal_default_instance()) {
    delete imgbuf_;
  }
  if (this != internal_default_instance()) {
    delete snsuserinfo_;
  }
  if (this != internal_default_instance()) {
    delete customizedinfo_;
  }
}

void SearchContactItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchContactItem::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchContactItem& SearchContactItem::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchContactItem* SearchContactItem::New(::google::protobuf::Arena* arena) const {
  SearchContactItem* n = new SearchContactItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchContactItem::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SearchContactItem)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_province()) {
      GOOGLE_DCHECK(!province_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*province_.UnsafeRawStringPointer())->clear();
    }
    if (has_city()) {
      GOOGLE_DCHECK(!city_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*city_.UnsafeRawStringPointer())->clear();
    }
    if (has_signature()) {
      GOOGLE_DCHECK(!signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*signature_.UnsafeRawStringPointer())->clear();
    }
    if (has_verifyinfo()) {
      GOOGLE_DCHECK(!verifyinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifyinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_weibo()) {
      GOOGLE_DCHECK(!weibo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*weibo_.UnsafeRawStringPointer())->clear();
    }
    if (has_alias()) {
      GOOGLE_DCHECK(!alias_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*alias_.UnsafeRawStringPointer())->clear();
    }
    if (has_weibonickname()) {
      GOOGLE_DCHECK(!weibonickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*weibonickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_albumbgimgid()) {
      GOOGLE_DCHECK(!albumbgimgid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*albumbgimgid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_country()) {
      GOOGLE_DCHECK(!country_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_.UnsafeRawStringPointer())->clear();
    }
    if (has_mybrandlist()) {
      GOOGLE_DCHECK(!mybrandlist_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mybrandlist_.UnsafeRawStringPointer())->clear();
    }
    if (has_bigheadimgurl()) {
      GOOGLE_DCHECK(!bigheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bigheadimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_smallheadimgurl()) {
      GOOGLE_DCHECK(!smallheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*smallheadimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_antispamticket()) {
      GOOGLE_DCHECK(!antispamticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*antispamticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(username_ != NULL);
      username_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(nickname_ != NULL);
      nickname_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_pyinitial()) {
      GOOGLE_DCHECK(pyinitial_ != NULL);
      pyinitial_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 983040u) {
    if (has_quanpin()) {
      GOOGLE_DCHECK(quanpin_ != NULL);
      quanpin_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_imgbuf()) {
      GOOGLE_DCHECK(imgbuf_ != NULL);
      imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_snsuserinfo()) {
      GOOGLE_DCHECK(snsuserinfo_ != NULL);
      snsuserinfo_->::micromsg::SnsUserInfo::Clear();
    }
    if (has_customizedinfo()) {
      GOOGLE_DCHECK(customizedinfo_ != NULL);
      customizedinfo_->::micromsg::CustomizedInfo::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 15728640u) {
    ::memset(&sex_, 0, reinterpret_cast<char*>(&weiboflag_) -
      reinterpret_cast<char*>(&sex_) + sizeof(weiboflag_));
  }
  if (_has_bits_[24 / 32] & 117440512u) {
    ::memset(&albumstyle_, 0, reinterpret_cast<char*>(&matchtype_) -
      reinterpret_cast<char*>(&albumstyle_) + sizeof(matchtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SearchContactItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SearchContactItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t NickName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t PYInitial = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pyinitial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t QuanPin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quanpin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Sex = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_sex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Province = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactItem.Province");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string City = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactItem.City");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Signature = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactItem.Signature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 PersonalCard = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_personalcard();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &personalcard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 VerifyFlag = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_verifyflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verifyflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VerifyInfo = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifyinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifyinfo().data(), this->verifyinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactItem.VerifyInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Weibo = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weibo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weibo().data(), this->weibo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactItem.Weibo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Alias = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactItem.Alias");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string WeiboNickname = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weibonickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weibonickname().data(), this->weibonickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactItem.WeiboNickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 WeiboFlag = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_weiboflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weiboflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AlbumStyle = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_albumstyle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &albumstyle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AlbumFlag = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_albumflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &albumflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AlbumBGImgID = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_albumbgimgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->albumbgimgid().data(), this->albumbgimgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactItem.AlbumBGImgID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SnsUserInfo SnsUserInfo = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snsuserinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Country = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactItem.Country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MyBrandList = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mybrandlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mybrandlist().data(), this->mybrandlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactItem.MyBrandList");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.CustomizedInfo CustomizedInfo = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_customizedinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BigHeadImgUrl = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bigheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bigheadimgurl().data(), this->bigheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactItem.BigHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SmallHeadImgUrl = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smallheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->smallheadimgurl().data(), this->smallheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactItem.SmallHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AntispamTicket = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_antispamticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->antispamticket().data(), this->antispamticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactItem.AntispamTicket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 MatchType = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_matchtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SearchContactItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SearchContactItem)
  return false;
#undef DO_
}

void SearchContactItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SearchContactItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->username_, output);
  }

  // required .micromsg.SKBuiltinString_t NickName = 2;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->nickname_, output);
  }

  // required .micromsg.SKBuiltinString_t PYInitial = 3;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pyinitial_, output);
  }

  // required .micromsg.SKBuiltinString_t QuanPin = 4;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->quanpin_, output);
  }

  // required int32 Sex = 5;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->imgbuf_, output);
  }

  // optional string Province = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.Province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->province(), output);
  }

  // optional string City = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.City");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->city(), output);
  }

  // optional string Signature = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.Signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->signature(), output);
  }

  // optional uint32 PersonalCard = 10;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->personalcard(), output);
  }

  // optional uint32 VerifyFlag = 11;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->verifyflag(), output);
  }

  // optional string VerifyInfo = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifyinfo().data(), this->verifyinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.VerifyInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->verifyinfo(), output);
  }

  // optional string Weibo = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weibo().data(), this->weibo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.Weibo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->weibo(), output);
  }

  // optional string Alias = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.Alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->alias(), output);
  }

  // optional string WeiboNickname = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weibonickname().data(), this->weibonickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.WeiboNickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->weibonickname(), output);
  }

  // optional uint32 WeiboFlag = 16;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->weiboflag(), output);
  }

  // optional int32 AlbumStyle = 17;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->albumstyle(), output);
  }

  // optional int32 AlbumFlag = 18;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->albumflag(), output);
  }

  // optional string AlbumBGImgID = 19;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumbgimgid().data(), this->albumbgimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.AlbumBGImgID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->albumbgimgid(), output);
  }

  // optional .micromsg.SnsUserInfo SnsUserInfo = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->snsuserinfo_, output);
  }

  // optional string Country = 21;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.Country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->country(), output);
  }

  // optional string MyBrandList = 22;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mybrandlist().data(), this->mybrandlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.MyBrandList");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->mybrandlist(), output);
  }

  // optional .micromsg.CustomizedInfo CustomizedInfo = 23;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->customizedinfo_, output);
  }

  // optional string BigHeadImgUrl = 24;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadimgurl().data(), this->bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.BigHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->bigheadimgurl(), output);
  }

  // optional string SmallHeadImgUrl = 25;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadimgurl().data(), this->smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.SmallHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->smallheadimgurl(), output);
  }

  // optional string AntispamTicket = 26;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->antispamticket().data(), this->antispamticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.AntispamTicket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->antispamticket(), output);
  }

  // optional uint32 MatchType = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->matchtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SearchContactItem)
}

::google::protobuf::uint8* SearchContactItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SearchContactItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->username_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t NickName = 2;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->nickname_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t PYInitial = 3;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pyinitial_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t QuanPin = 4;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->quanpin_, deterministic, target);
  }

  // required int32 Sex = 5;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->imgbuf_, deterministic, target);
  }

  // optional string Province = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.Province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->province(), target);
  }

  // optional string City = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.City");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->city(), target);
  }

  // optional string Signature = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.Signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->signature(), target);
  }

  // optional uint32 PersonalCard = 10;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->personalcard(), target);
  }

  // optional uint32 VerifyFlag = 11;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->verifyflag(), target);
  }

  // optional string VerifyInfo = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifyinfo().data(), this->verifyinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.VerifyInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->verifyinfo(), target);
  }

  // optional string Weibo = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weibo().data(), this->weibo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.Weibo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->weibo(), target);
  }

  // optional string Alias = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.Alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->alias(), target);
  }

  // optional string WeiboNickname = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weibonickname().data(), this->weibonickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.WeiboNickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->weibonickname(), target);
  }

  // optional uint32 WeiboFlag = 16;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->weiboflag(), target);
  }

  // optional int32 AlbumStyle = 17;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->albumstyle(), target);
  }

  // optional int32 AlbumFlag = 18;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->albumflag(), target);
  }

  // optional string AlbumBGImgID = 19;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumbgimgid().data(), this->albumbgimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.AlbumBGImgID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->albumbgimgid(), target);
  }

  // optional .micromsg.SnsUserInfo SnsUserInfo = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->snsuserinfo_, deterministic, target);
  }

  // optional string Country = 21;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.Country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->country(), target);
  }

  // optional string MyBrandList = 22;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mybrandlist().data(), this->mybrandlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.MyBrandList");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->mybrandlist(), target);
  }

  // optional .micromsg.CustomizedInfo CustomizedInfo = 23;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->customizedinfo_, deterministic, target);
  }

  // optional string BigHeadImgUrl = 24;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadimgurl().data(), this->bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.BigHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->bigheadimgurl(), target);
  }

  // optional string SmallHeadImgUrl = 25;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadimgurl().data(), this->smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.SmallHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->smallheadimgurl(), target);
  }

  // optional string AntispamTicket = 26;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->antispamticket().data(), this->antispamticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactItem.AntispamTicket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->antispamticket(), target);
  }

  // optional uint32 MatchType = 27;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->matchtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SearchContactItem)
  return target;
}

size_t SearchContactItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SearchContactItem)
  size_t total_size = 0;

  if (has_username()) {
    // required .micromsg.SKBuiltinString_t UserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }

  if (has_nickname()) {
    // required .micromsg.SKBuiltinString_t NickName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nickname_);
  }

  if (has_pyinitial()) {
    // required .micromsg.SKBuiltinString_t PYInitial = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pyinitial_);
  }

  if (has_quanpin()) {
    // required .micromsg.SKBuiltinString_t QuanPin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quanpin_);
  }

  if (has_imgbuf()) {
    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);
  }

  if (has_sex()) {
    // required int32 Sex = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());
  }

  return total_size;
}
size_t SearchContactItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SearchContactItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0013e000) ^ 0x0013e000) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinString_t UserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);

    // required .micromsg.SKBuiltinString_t NickName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nickname_);

    // required .micromsg.SKBuiltinString_t PYInitial = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pyinitial_);

    // required .micromsg.SKBuiltinString_t QuanPin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quanpin_);

    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);

    // required int32 Sex = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string Province = 7;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string City = 8;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string Signature = 9;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional string VerifyInfo = 12;
    if (has_verifyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifyinfo());
    }

    // optional string Weibo = 13;
    if (has_weibo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weibo());
    }

    // optional string Alias = 14;
    if (has_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

    // optional string WeiboNickname = 15;
    if (has_weibonickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weibonickname());
    }

    // optional string AlbumBGImgID = 19;
    if (has_albumbgimgid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->albumbgimgid());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional string Country = 21;
    if (has_country()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string MyBrandList = 22;
    if (has_mybrandlist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mybrandlist());
    }

    // optional string BigHeadImgUrl = 24;
    if (has_bigheadimgurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bigheadimgurl());
    }

    // optional string SmallHeadImgUrl = 25;
    if (has_smallheadimgurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->smallheadimgurl());
    }

    // optional string AntispamTicket = 26;
    if (has_antispamticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->antispamticket());
    }

  }
  if (_has_bits_[16 / 32] & 786432u) {
    // optional .micromsg.SnsUserInfo SnsUserInfo = 20;
    if (has_snsuserinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->snsuserinfo_);
    }

    // optional .micromsg.CustomizedInfo CustomizedInfo = 23;
    if (has_customizedinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->customizedinfo_);
    }

  }
  if (_has_bits_[16 / 32] & 14680064u) {
    // optional uint32 PersonalCard = 10;
    if (has_personalcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->personalcard());
    }

    // optional uint32 VerifyFlag = 11;
    if (has_verifyflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->verifyflag());
    }

    // optional uint32 WeiboFlag = 16;
    if (has_weiboflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weiboflag());
    }

  }
  if (_has_bits_[24 / 32] & 117440512u) {
    // optional int32 AlbumStyle = 17;
    if (has_albumstyle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->albumstyle());
    }

    // optional int32 AlbumFlag = 18;
    if (has_albumflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->albumflag());
    }

    // optional uint32 MatchType = 27;
    if (has_matchtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchtype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchContactItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SearchContactItem)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchContactItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchContactItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SearchContactItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SearchContactItem)
    MergeFrom(*source);
  }
}

void SearchContactItem::MergeFrom(const SearchContactItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SearchContactItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_province();
      province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_city();
      city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_verifyinfo();
      verifyinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifyinfo_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_weibo();
      weibo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weibo_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_alias();
      alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_weibonickname();
      weibonickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weibonickname_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_albumbgimgid();
      albumbgimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albumbgimgid_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_mybrandlist();
      mybrandlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mybrandlist_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_bigheadimgurl();
      bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadimgurl_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_smallheadimgurl();
      smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadimgurl_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_antispamticket();
      antispamticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.antispamticket_);
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_nickname()->::micromsg::SKBuiltinString_t::MergeFrom(from.nickname());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_pyinitial()->::micromsg::SKBuiltinString_t::MergeFrom(from.pyinitial());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_quanpin()->::micromsg::SKBuiltinString_t::MergeFrom(from.quanpin());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_imgbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.imgbuf());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_snsuserinfo()->::micromsg::SnsUserInfo::MergeFrom(from.snsuserinfo());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_customizedinfo()->::micromsg::CustomizedInfo::MergeFrom(from.customizedinfo());
    }
    if (cached_has_bits & 0x00100000u) {
      sex_ = from.sex_;
    }
    if (cached_has_bits & 0x00200000u) {
      personalcard_ = from.personalcard_;
    }
    if (cached_has_bits & 0x00400000u) {
      verifyflag_ = from.verifyflag_;
    }
    if (cached_has_bits & 0x00800000u) {
      weiboflag_ = from.weiboflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 117440512u) {
    if (cached_has_bits & 0x01000000u) {
      albumstyle_ = from.albumstyle_;
    }
    if (cached_has_bits & 0x02000000u) {
      albumflag_ = from.albumflag_;
    }
    if (cached_has_bits & 0x04000000u) {
      matchtype_ = from.matchtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SearchContactItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SearchContactItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchContactItem::CopyFrom(const SearchContactItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SearchContactItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchContactItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0013e000) != 0x0013e000) return false;
  if (has_imgbuf()) {
    if (!this->imgbuf_->IsInitialized()) return false;
  }
  if (has_snsuserinfo()) {
    if (!this->snsuserinfo_->IsInitialized()) return false;
  }
  if (has_customizedinfo()) {
    if (!this->customizedinfo_->IsInitialized()) return false;
  }
  return true;
}

void SearchContactItem::Swap(SearchContactItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchContactItem::InternalSwap(SearchContactItem* other) {
  province_.Swap(&other->province_);
  city_.Swap(&other->city_);
  signature_.Swap(&other->signature_);
  verifyinfo_.Swap(&other->verifyinfo_);
  weibo_.Swap(&other->weibo_);
  alias_.Swap(&other->alias_);
  weibonickname_.Swap(&other->weibonickname_);
  albumbgimgid_.Swap(&other->albumbgimgid_);
  country_.Swap(&other->country_);
  mybrandlist_.Swap(&other->mybrandlist_);
  bigheadimgurl_.Swap(&other->bigheadimgurl_);
  smallheadimgurl_.Swap(&other->smallheadimgurl_);
  antispamticket_.Swap(&other->antispamticket_);
  std::swap(username_, other->username_);
  std::swap(nickname_, other->nickname_);
  std::swap(pyinitial_, other->pyinitial_);
  std::swap(quanpin_, other->quanpin_);
  std::swap(imgbuf_, other->imgbuf_);
  std::swap(snsuserinfo_, other->snsuserinfo_);
  std::swap(customizedinfo_, other->customizedinfo_);
  std::swap(sex_, other->sex_);
  std::swap(personalcard_, other->personalcard_);
  std::swap(verifyflag_, other->verifyflag_);
  std::swap(weiboflag_, other->weiboflag_);
  std::swap(albumstyle_, other->albumstyle_);
  std::swap(albumflag_, other->albumflag_);
  std::swap(matchtype_, other->matchtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchContactItem::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchContactItem

// required .micromsg.SKBuiltinString_t UserName = 1;
bool SearchContactItem::has_username() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SearchContactItem::set_has_username() {
  _has_bits_[0] |= 0x00002000u;
}
void SearchContactItem::clear_has_username() {
  _has_bits_[0] &= ~0x00002000u;
}
void SearchContactItem::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& SearchContactItem::username() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* SearchContactItem::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.UserName)
  return username_;
}
::micromsg::SKBuiltinString_t* SearchContactItem::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void SearchContactItem::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.UserName)
}

// required .micromsg.SKBuiltinString_t NickName = 2;
bool SearchContactItem::has_nickname() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SearchContactItem::set_has_nickname() {
  _has_bits_[0] |= 0x00004000u;
}
void SearchContactItem::clear_has_nickname() {
  _has_bits_[0] &= ~0x00004000u;
}
void SearchContactItem::clear_nickname() {
  if (nickname_ != NULL) nickname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_nickname();
}
const ::micromsg::SKBuiltinString_t& SearchContactItem::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.NickName)
  return nickname_ != NULL ? *nickname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* SearchContactItem::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == NULL) {
    nickname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.NickName)
  return nickname_;
}
::micromsg::SKBuiltinString_t* SearchContactItem::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.NickName)
  clear_has_nickname();
  ::micromsg::SKBuiltinString_t* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
void SearchContactItem::set_allocated_nickname(::micromsg::SKBuiltinString_t* nickname) {
  delete nickname_;
  nickname_ = nickname;
  if (nickname) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.NickName)
}

// required .micromsg.SKBuiltinString_t PYInitial = 3;
bool SearchContactItem::has_pyinitial() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SearchContactItem::set_has_pyinitial() {
  _has_bits_[0] |= 0x00008000u;
}
void SearchContactItem::clear_has_pyinitial() {
  _has_bits_[0] &= ~0x00008000u;
}
void SearchContactItem::clear_pyinitial() {
  if (pyinitial_ != NULL) pyinitial_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_pyinitial();
}
const ::micromsg::SKBuiltinString_t& SearchContactItem::pyinitial() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.PYInitial)
  return pyinitial_ != NULL ? *pyinitial_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* SearchContactItem::mutable_pyinitial() {
  set_has_pyinitial();
  if (pyinitial_ == NULL) {
    pyinitial_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.PYInitial)
  return pyinitial_;
}
::micromsg::SKBuiltinString_t* SearchContactItem::release_pyinitial() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.PYInitial)
  clear_has_pyinitial();
  ::micromsg::SKBuiltinString_t* temp = pyinitial_;
  pyinitial_ = NULL;
  return temp;
}
void SearchContactItem::set_allocated_pyinitial(::micromsg::SKBuiltinString_t* pyinitial) {
  delete pyinitial_;
  pyinitial_ = pyinitial;
  if (pyinitial) {
    set_has_pyinitial();
  } else {
    clear_has_pyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.PYInitial)
}

// required .micromsg.SKBuiltinString_t QuanPin = 4;
bool SearchContactItem::has_quanpin() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SearchContactItem::set_has_quanpin() {
  _has_bits_[0] |= 0x00010000u;
}
void SearchContactItem::clear_has_quanpin() {
  _has_bits_[0] &= ~0x00010000u;
}
void SearchContactItem::clear_quanpin() {
  if (quanpin_ != NULL) quanpin_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_quanpin();
}
const ::micromsg::SKBuiltinString_t& SearchContactItem::quanpin() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.QuanPin)
  return quanpin_ != NULL ? *quanpin_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* SearchContactItem::mutable_quanpin() {
  set_has_quanpin();
  if (quanpin_ == NULL) {
    quanpin_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.QuanPin)
  return quanpin_;
}
::micromsg::SKBuiltinString_t* SearchContactItem::release_quanpin() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.QuanPin)
  clear_has_quanpin();
  ::micromsg::SKBuiltinString_t* temp = quanpin_;
  quanpin_ = NULL;
  return temp;
}
void SearchContactItem::set_allocated_quanpin(::micromsg::SKBuiltinString_t* quanpin) {
  delete quanpin_;
  quanpin_ = quanpin;
  if (quanpin) {
    set_has_quanpin();
  } else {
    clear_has_quanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.QuanPin)
}

// required int32 Sex = 5;
bool SearchContactItem::has_sex() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SearchContactItem::set_has_sex() {
  _has_bits_[0] |= 0x00100000u;
}
void SearchContactItem::clear_has_sex() {
  _has_bits_[0] &= ~0x00100000u;
}
void SearchContactItem::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
::google::protobuf::int32 SearchContactItem::sex() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.Sex)
  return sex_;
}
void SearchContactItem::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.Sex)
}

// required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
bool SearchContactItem::has_imgbuf() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SearchContactItem::set_has_imgbuf() {
  _has_bits_[0] |= 0x00020000u;
}
void SearchContactItem::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00020000u;
}
void SearchContactItem::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_imgbuf();
}
const ::micromsg::SKBuiltinBuffer_t& SearchContactItem::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* SearchContactItem::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.ImgBuf)
  return imgbuf_;
}
::micromsg::SKBuiltinBuffer_t* SearchContactItem::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.ImgBuf)
  clear_has_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
void SearchContactItem::set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.ImgBuf)
}

// optional string Province = 7;
bool SearchContactItem::has_province() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SearchContactItem::set_has_province() {
  _has_bits_[0] |= 0x00000001u;
}
void SearchContactItem::clear_has_province() {
  _has_bits_[0] &= ~0x00000001u;
}
void SearchContactItem::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
const ::std::string& SearchContactItem::province() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.Province)
  return province_.GetNoArena();
}
void SearchContactItem::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.Province)
}
#if LANG_CXX11
void SearchContactItem::set_province(::std::string&& value) {
  set_has_province();
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.Province)
}
#endif
void SearchContactItem::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.Province)
}
void SearchContactItem::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.Province)
}
::std::string* SearchContactItem::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.Province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactItem::release_province() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.Province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactItem::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.Province)
}

// optional string City = 8;
bool SearchContactItem::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SearchContactItem::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
void SearchContactItem::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
void SearchContactItem::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
const ::std::string& SearchContactItem::city() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.City)
  return city_.GetNoArena();
}
void SearchContactItem::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.City)
}
#if LANG_CXX11
void SearchContactItem::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.City)
}
#endif
void SearchContactItem::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.City)
}
void SearchContactItem::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.City)
}
::std::string* SearchContactItem::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.City)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactItem::release_city() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.City)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactItem::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.City)
}

// optional string Signature = 9;
bool SearchContactItem::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SearchContactItem::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
void SearchContactItem::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
void SearchContactItem::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
const ::std::string& SearchContactItem::signature() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.Signature)
  return signature_.GetNoArena();
}
void SearchContactItem::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.Signature)
}
#if LANG_CXX11
void SearchContactItem::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.Signature)
}
#endif
void SearchContactItem::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.Signature)
}
void SearchContactItem::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.Signature)
}
::std::string* SearchContactItem::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactItem::release_signature() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactItem::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.Signature)
}

// optional uint32 PersonalCard = 10;
bool SearchContactItem::has_personalcard() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void SearchContactItem::set_has_personalcard() {
  _has_bits_[0] |= 0x00200000u;
}
void SearchContactItem::clear_has_personalcard() {
  _has_bits_[0] &= ~0x00200000u;
}
void SearchContactItem::clear_personalcard() {
  personalcard_ = 0u;
  clear_has_personalcard();
}
::google::protobuf::uint32 SearchContactItem::personalcard() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.PersonalCard)
  return personalcard_;
}
void SearchContactItem::set_personalcard(::google::protobuf::uint32 value) {
  set_has_personalcard();
  personalcard_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.PersonalCard)
}

// optional uint32 VerifyFlag = 11;
bool SearchContactItem::has_verifyflag() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void SearchContactItem::set_has_verifyflag() {
  _has_bits_[0] |= 0x00400000u;
}
void SearchContactItem::clear_has_verifyflag() {
  _has_bits_[0] &= ~0x00400000u;
}
void SearchContactItem::clear_verifyflag() {
  verifyflag_ = 0u;
  clear_has_verifyflag();
}
::google::protobuf::uint32 SearchContactItem::verifyflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.VerifyFlag)
  return verifyflag_;
}
void SearchContactItem::set_verifyflag(::google::protobuf::uint32 value) {
  set_has_verifyflag();
  verifyflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.VerifyFlag)
}

// optional string VerifyInfo = 12;
bool SearchContactItem::has_verifyinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SearchContactItem::set_has_verifyinfo() {
  _has_bits_[0] |= 0x00000008u;
}
void SearchContactItem::clear_has_verifyinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
void SearchContactItem::clear_verifyinfo() {
  verifyinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifyinfo();
}
const ::std::string& SearchContactItem::verifyinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.VerifyInfo)
  return verifyinfo_.GetNoArena();
}
void SearchContactItem::set_verifyinfo(const ::std::string& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.VerifyInfo)
}
#if LANG_CXX11
void SearchContactItem::set_verifyinfo(::std::string&& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.VerifyInfo)
}
#endif
void SearchContactItem::set_verifyinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.VerifyInfo)
}
void SearchContactItem::set_verifyinfo(const char* value, size_t size) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.VerifyInfo)
}
::std::string* SearchContactItem::mutable_verifyinfo() {
  set_has_verifyinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.VerifyInfo)
  return verifyinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactItem::release_verifyinfo() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.VerifyInfo)
  clear_has_verifyinfo();
  return verifyinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactItem::set_allocated_verifyinfo(::std::string* verifyinfo) {
  if (verifyinfo != NULL) {
    set_has_verifyinfo();
  } else {
    clear_has_verifyinfo();
  }
  verifyinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifyinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.VerifyInfo)
}

// optional string Weibo = 13;
bool SearchContactItem::has_weibo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SearchContactItem::set_has_weibo() {
  _has_bits_[0] |= 0x00000010u;
}
void SearchContactItem::clear_has_weibo() {
  _has_bits_[0] &= ~0x00000010u;
}
void SearchContactItem::clear_weibo() {
  weibo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibo();
}
const ::std::string& SearchContactItem::weibo() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.Weibo)
  return weibo_.GetNoArena();
}
void SearchContactItem::set_weibo(const ::std::string& value) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.Weibo)
}
#if LANG_CXX11
void SearchContactItem::set_weibo(::std::string&& value) {
  set_has_weibo();
  weibo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.Weibo)
}
#endif
void SearchContactItem::set_weibo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.Weibo)
}
void SearchContactItem::set_weibo(const char* value, size_t size) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.Weibo)
}
::std::string* SearchContactItem::mutable_weibo() {
  set_has_weibo();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.Weibo)
  return weibo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactItem::release_weibo() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.Weibo)
  clear_has_weibo();
  return weibo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactItem::set_allocated_weibo(::std::string* weibo) {
  if (weibo != NULL) {
    set_has_weibo();
  } else {
    clear_has_weibo();
  }
  weibo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.Weibo)
}

// optional string Alias = 14;
bool SearchContactItem::has_alias() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SearchContactItem::set_has_alias() {
  _has_bits_[0] |= 0x00000020u;
}
void SearchContactItem::clear_has_alias() {
  _has_bits_[0] &= ~0x00000020u;
}
void SearchContactItem::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
const ::std::string& SearchContactItem::alias() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.Alias)
  return alias_.GetNoArena();
}
void SearchContactItem::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.Alias)
}
#if LANG_CXX11
void SearchContactItem::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.Alias)
}
#endif
void SearchContactItem::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.Alias)
}
void SearchContactItem::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.Alias)
}
::std::string* SearchContactItem::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactItem::release_alias() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.Alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactItem::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.Alias)
}

// optional string WeiboNickname = 15;
bool SearchContactItem::has_weibonickname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SearchContactItem::set_has_weibonickname() {
  _has_bits_[0] |= 0x00000040u;
}
void SearchContactItem::clear_has_weibonickname() {
  _has_bits_[0] &= ~0x00000040u;
}
void SearchContactItem::clear_weibonickname() {
  weibonickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibonickname();
}
const ::std::string& SearchContactItem::weibonickname() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.WeiboNickname)
  return weibonickname_.GetNoArena();
}
void SearchContactItem::set_weibonickname(const ::std::string& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.WeiboNickname)
}
#if LANG_CXX11
void SearchContactItem::set_weibonickname(::std::string&& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.WeiboNickname)
}
#endif
void SearchContactItem::set_weibonickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.WeiboNickname)
}
void SearchContactItem::set_weibonickname(const char* value, size_t size) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.WeiboNickname)
}
::std::string* SearchContactItem::mutable_weibonickname() {
  set_has_weibonickname();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.WeiboNickname)
  return weibonickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactItem::release_weibonickname() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.WeiboNickname)
  clear_has_weibonickname();
  return weibonickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactItem::set_allocated_weibonickname(::std::string* weibonickname) {
  if (weibonickname != NULL) {
    set_has_weibonickname();
  } else {
    clear_has_weibonickname();
  }
  weibonickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibonickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.WeiboNickname)
}

// optional uint32 WeiboFlag = 16;
bool SearchContactItem::has_weiboflag() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void SearchContactItem::set_has_weiboflag() {
  _has_bits_[0] |= 0x00800000u;
}
void SearchContactItem::clear_has_weiboflag() {
  _has_bits_[0] &= ~0x00800000u;
}
void SearchContactItem::clear_weiboflag() {
  weiboflag_ = 0u;
  clear_has_weiboflag();
}
::google::protobuf::uint32 SearchContactItem::weiboflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.WeiboFlag)
  return weiboflag_;
}
void SearchContactItem::set_weiboflag(::google::protobuf::uint32 value) {
  set_has_weiboflag();
  weiboflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.WeiboFlag)
}

// optional int32 AlbumStyle = 17;
bool SearchContactItem::has_albumstyle() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void SearchContactItem::set_has_albumstyle() {
  _has_bits_[0] |= 0x01000000u;
}
void SearchContactItem::clear_has_albumstyle() {
  _has_bits_[0] &= ~0x01000000u;
}
void SearchContactItem::clear_albumstyle() {
  albumstyle_ = 0;
  clear_has_albumstyle();
}
::google::protobuf::int32 SearchContactItem::albumstyle() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.AlbumStyle)
  return albumstyle_;
}
void SearchContactItem::set_albumstyle(::google::protobuf::int32 value) {
  set_has_albumstyle();
  albumstyle_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.AlbumStyle)
}

// optional int32 AlbumFlag = 18;
bool SearchContactItem::has_albumflag() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void SearchContactItem::set_has_albumflag() {
  _has_bits_[0] |= 0x02000000u;
}
void SearchContactItem::clear_has_albumflag() {
  _has_bits_[0] &= ~0x02000000u;
}
void SearchContactItem::clear_albumflag() {
  albumflag_ = 0;
  clear_has_albumflag();
}
::google::protobuf::int32 SearchContactItem::albumflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.AlbumFlag)
  return albumflag_;
}
void SearchContactItem::set_albumflag(::google::protobuf::int32 value) {
  set_has_albumflag();
  albumflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.AlbumFlag)
}

// optional string AlbumBGImgID = 19;
bool SearchContactItem::has_albumbgimgid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SearchContactItem::set_has_albumbgimgid() {
  _has_bits_[0] |= 0x00000080u;
}
void SearchContactItem::clear_has_albumbgimgid() {
  _has_bits_[0] &= ~0x00000080u;
}
void SearchContactItem::clear_albumbgimgid() {
  albumbgimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_albumbgimgid();
}
const ::std::string& SearchContactItem::albumbgimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.AlbumBGImgID)
  return albumbgimgid_.GetNoArena();
}
void SearchContactItem::set_albumbgimgid(const ::std::string& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.AlbumBGImgID)
}
#if LANG_CXX11
void SearchContactItem::set_albumbgimgid(::std::string&& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.AlbumBGImgID)
}
#endif
void SearchContactItem::set_albumbgimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.AlbumBGImgID)
}
void SearchContactItem::set_albumbgimgid(const char* value, size_t size) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.AlbumBGImgID)
}
::std::string* SearchContactItem::mutable_albumbgimgid() {
  set_has_albumbgimgid();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.AlbumBGImgID)
  return albumbgimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactItem::release_albumbgimgid() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.AlbumBGImgID)
  clear_has_albumbgimgid();
  return albumbgimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactItem::set_allocated_albumbgimgid(::std::string* albumbgimgid) {
  if (albumbgimgid != NULL) {
    set_has_albumbgimgid();
  } else {
    clear_has_albumbgimgid();
  }
  albumbgimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albumbgimgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.AlbumBGImgID)
}

// optional .micromsg.SnsUserInfo SnsUserInfo = 20;
bool SearchContactItem::has_snsuserinfo() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SearchContactItem::set_has_snsuserinfo() {
  _has_bits_[0] |= 0x00040000u;
}
void SearchContactItem::clear_has_snsuserinfo() {
  _has_bits_[0] &= ~0x00040000u;
}
void SearchContactItem::clear_snsuserinfo() {
  if (snsuserinfo_ != NULL) snsuserinfo_->::micromsg::SnsUserInfo::Clear();
  clear_has_snsuserinfo();
}
const ::micromsg::SnsUserInfo& SearchContactItem::snsuserinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.SnsUserInfo)
  return snsuserinfo_ != NULL ? *snsuserinfo_
                         : *::micromsg::SnsUserInfo::internal_default_instance();
}
::micromsg::SnsUserInfo* SearchContactItem::mutable_snsuserinfo() {
  set_has_snsuserinfo();
  if (snsuserinfo_ == NULL) {
    snsuserinfo_ = new ::micromsg::SnsUserInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.SnsUserInfo)
  return snsuserinfo_;
}
::micromsg::SnsUserInfo* SearchContactItem::release_snsuserinfo() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.SnsUserInfo)
  clear_has_snsuserinfo();
  ::micromsg::SnsUserInfo* temp = snsuserinfo_;
  snsuserinfo_ = NULL;
  return temp;
}
void SearchContactItem::set_allocated_snsuserinfo(::micromsg::SnsUserInfo* snsuserinfo) {
  delete snsuserinfo_;
  snsuserinfo_ = snsuserinfo;
  if (snsuserinfo) {
    set_has_snsuserinfo();
  } else {
    clear_has_snsuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.SnsUserInfo)
}

// optional string Country = 21;
bool SearchContactItem::has_country() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SearchContactItem::set_has_country() {
  _has_bits_[0] |= 0x00000100u;
}
void SearchContactItem::clear_has_country() {
  _has_bits_[0] &= ~0x00000100u;
}
void SearchContactItem::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
const ::std::string& SearchContactItem::country() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.Country)
  return country_.GetNoArena();
}
void SearchContactItem::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.Country)
}
#if LANG_CXX11
void SearchContactItem::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.Country)
}
#endif
void SearchContactItem::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.Country)
}
void SearchContactItem::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.Country)
}
::std::string* SearchContactItem::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.Country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactItem::release_country() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.Country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactItem::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.Country)
}

// optional string MyBrandList = 22;
bool SearchContactItem::has_mybrandlist() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SearchContactItem::set_has_mybrandlist() {
  _has_bits_[0] |= 0x00000200u;
}
void SearchContactItem::clear_has_mybrandlist() {
  _has_bits_[0] &= ~0x00000200u;
}
void SearchContactItem::clear_mybrandlist() {
  mybrandlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mybrandlist();
}
const ::std::string& SearchContactItem::mybrandlist() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.MyBrandList)
  return mybrandlist_.GetNoArena();
}
void SearchContactItem::set_mybrandlist(const ::std::string& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.MyBrandList)
}
#if LANG_CXX11
void SearchContactItem::set_mybrandlist(::std::string&& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.MyBrandList)
}
#endif
void SearchContactItem::set_mybrandlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.MyBrandList)
}
void SearchContactItem::set_mybrandlist(const char* value, size_t size) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.MyBrandList)
}
::std::string* SearchContactItem::mutable_mybrandlist() {
  set_has_mybrandlist();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.MyBrandList)
  return mybrandlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactItem::release_mybrandlist() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.MyBrandList)
  clear_has_mybrandlist();
  return mybrandlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactItem::set_allocated_mybrandlist(::std::string* mybrandlist) {
  if (mybrandlist != NULL) {
    set_has_mybrandlist();
  } else {
    clear_has_mybrandlist();
  }
  mybrandlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mybrandlist);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.MyBrandList)
}

// optional .micromsg.CustomizedInfo CustomizedInfo = 23;
bool SearchContactItem::has_customizedinfo() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SearchContactItem::set_has_customizedinfo() {
  _has_bits_[0] |= 0x00080000u;
}
void SearchContactItem::clear_has_customizedinfo() {
  _has_bits_[0] &= ~0x00080000u;
}
void SearchContactItem::clear_customizedinfo() {
  if (customizedinfo_ != NULL) customizedinfo_->::micromsg::CustomizedInfo::Clear();
  clear_has_customizedinfo();
}
const ::micromsg::CustomizedInfo& SearchContactItem::customizedinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.CustomizedInfo)
  return customizedinfo_ != NULL ? *customizedinfo_
                         : *::micromsg::CustomizedInfo::internal_default_instance();
}
::micromsg::CustomizedInfo* SearchContactItem::mutable_customizedinfo() {
  set_has_customizedinfo();
  if (customizedinfo_ == NULL) {
    customizedinfo_ = new ::micromsg::CustomizedInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.CustomizedInfo)
  return customizedinfo_;
}
::micromsg::CustomizedInfo* SearchContactItem::release_customizedinfo() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.CustomizedInfo)
  clear_has_customizedinfo();
  ::micromsg::CustomizedInfo* temp = customizedinfo_;
  customizedinfo_ = NULL;
  return temp;
}
void SearchContactItem::set_allocated_customizedinfo(::micromsg::CustomizedInfo* customizedinfo) {
  delete customizedinfo_;
  customizedinfo_ = customizedinfo;
  if (customizedinfo) {
    set_has_customizedinfo();
  } else {
    clear_has_customizedinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.CustomizedInfo)
}

// optional string BigHeadImgUrl = 24;
bool SearchContactItem::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SearchContactItem::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000400u;
}
void SearchContactItem::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000400u;
}
void SearchContactItem::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
const ::std::string& SearchContactItem::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
void SearchContactItem::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.BigHeadImgUrl)
}
#if LANG_CXX11
void SearchContactItem::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.BigHeadImgUrl)
}
#endif
void SearchContactItem::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.BigHeadImgUrl)
}
void SearchContactItem::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.BigHeadImgUrl)
}
::std::string* SearchContactItem::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactItem::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactItem::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 25;
bool SearchContactItem::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SearchContactItem::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00000800u;
}
void SearchContactItem::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00000800u;
}
void SearchContactItem::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
const ::std::string& SearchContactItem::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
void SearchContactItem::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.SmallHeadImgUrl)
}
#if LANG_CXX11
void SearchContactItem::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.SmallHeadImgUrl)
}
#endif
void SearchContactItem::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.SmallHeadImgUrl)
}
void SearchContactItem::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.SmallHeadImgUrl)
}
::std::string* SearchContactItem::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactItem::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactItem::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.SmallHeadImgUrl)
}

// optional string AntispamTicket = 26;
bool SearchContactItem::has_antispamticket() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SearchContactItem::set_has_antispamticket() {
  _has_bits_[0] |= 0x00001000u;
}
void SearchContactItem::clear_has_antispamticket() {
  _has_bits_[0] &= ~0x00001000u;
}
void SearchContactItem::clear_antispamticket() {
  antispamticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_antispamticket();
}
const ::std::string& SearchContactItem::antispamticket() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.AntispamTicket)
  return antispamticket_.GetNoArena();
}
void SearchContactItem::set_antispamticket(const ::std::string& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.AntispamTicket)
}
#if LANG_CXX11
void SearchContactItem::set_antispamticket(::std::string&& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.AntispamTicket)
}
#endif
void SearchContactItem::set_antispamticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.AntispamTicket)
}
void SearchContactItem::set_antispamticket(const char* value, size_t size) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.AntispamTicket)
}
::std::string* SearchContactItem::mutable_antispamticket() {
  set_has_antispamticket();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.AntispamTicket)
  return antispamticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactItem::release_antispamticket() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.AntispamTicket)
  clear_has_antispamticket();
  return antispamticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactItem::set_allocated_antispamticket(::std::string* antispamticket) {
  if (antispamticket != NULL) {
    set_has_antispamticket();
  } else {
    clear_has_antispamticket();
  }
  antispamticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), antispamticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.AntispamTicket)
}

// optional uint32 MatchType = 27;
bool SearchContactItem::has_matchtype() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void SearchContactItem::set_has_matchtype() {
  _has_bits_[0] |= 0x04000000u;
}
void SearchContactItem::clear_has_matchtype() {
  _has_bits_[0] &= ~0x04000000u;
}
void SearchContactItem::clear_matchtype() {
  matchtype_ = 0u;
  clear_has_matchtype();
}
::google::protobuf::uint32 SearchContactItem::matchtype() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.MatchType)
  return matchtype_;
}
void SearchContactItem::set_matchtype(::google::protobuf::uint32 value) {
  set_has_matchtype();
  matchtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.MatchType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchContactResponse::kBaseResponseFieldNumber;
const int SearchContactResponse::kUserNameFieldNumber;
const int SearchContactResponse::kNickNameFieldNumber;
const int SearchContactResponse::kPYInitialFieldNumber;
const int SearchContactResponse::kQuanPinFieldNumber;
const int SearchContactResponse::kSexFieldNumber;
const int SearchContactResponse::kImgBufFieldNumber;
const int SearchContactResponse::kProvinceFieldNumber;
const int SearchContactResponse::kCityFieldNumber;
const int SearchContactResponse::kSignatureFieldNumber;
const int SearchContactResponse::kPersonalCardFieldNumber;
const int SearchContactResponse::kVerifyFlagFieldNumber;
const int SearchContactResponse::kVerifyInfoFieldNumber;
const int SearchContactResponse::kWeiboFieldNumber;
const int SearchContactResponse::kAliasFieldNumber;
const int SearchContactResponse::kWeiboNicknameFieldNumber;
const int SearchContactResponse::kWeiboFlagFieldNumber;
const int SearchContactResponse::kAlbumStyleFieldNumber;
const int SearchContactResponse::kAlbumFlagFieldNumber;
const int SearchContactResponse::kAlbumBGImgIDFieldNumber;
const int SearchContactResponse::kSnsUserInfoFieldNumber;
const int SearchContactResponse::kCountryFieldNumber;
const int SearchContactResponse::kMyBrandListFieldNumber;
const int SearchContactResponse::kCustomizedInfoFieldNumber;
const int SearchContactResponse::kContactCountFieldNumber;
const int SearchContactResponse::kContactListFieldNumber;
const int SearchContactResponse::kBigHeadImgUrlFieldNumber;
const int SearchContactResponse::kSmallHeadImgUrlFieldNumber;
const int SearchContactResponse::kResBufFieldNumber;
const int SearchContactResponse::kAntispamTicketFieldNumber;
const int SearchContactResponse::kKFWorkerIDFieldNumber;
const int SearchContactResponse::kMatchTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchContactResponse::SearchContactResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SearchContactResponse)
}
SearchContactResponse::SearchContactResponse(const SearchContactResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      contactlist_(from.contactlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_province()) {
    province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
  }
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_city()) {
    city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  verifyinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifyinfo()) {
    verifyinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifyinfo_);
  }
  weibo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weibo()) {
    weibo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weibo_);
  }
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_alias()) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  weibonickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weibonickname()) {
    weibonickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weibonickname_);
  }
  albumbgimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_albumbgimgid()) {
    albumbgimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albumbgimgid_);
  }
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country()) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  mybrandlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mybrandlist()) {
    mybrandlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mybrandlist_);
  }
  bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bigheadimgurl()) {
    bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadimgurl_);
  }
  smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_smallheadimgurl()) {
    smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadimgurl_);
  }
  antispamticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_antispamticket()) {
    antispamticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.antispamticket_);
  }
  kfworkerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_kfworkerid()) {
    kfworkerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kfworkerid_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  if (from.has_nickname()) {
    nickname_ = new ::micromsg::SKBuiltinString_t(*from.nickname_);
  } else {
    nickname_ = NULL;
  }
  if (from.has_pyinitial()) {
    pyinitial_ = new ::micromsg::SKBuiltinString_t(*from.pyinitial_);
  } else {
    pyinitial_ = NULL;
  }
  if (from.has_quanpin()) {
    quanpin_ = new ::micromsg::SKBuiltinString_t(*from.quanpin_);
  } else {
    quanpin_ = NULL;
  }
  if (from.has_imgbuf()) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.imgbuf_);
  } else {
    imgbuf_ = NULL;
  }
  if (from.has_snsuserinfo()) {
    snsuserinfo_ = new ::micromsg::SnsUserInfo(*from.snsuserinfo_);
  } else {
    snsuserinfo_ = NULL;
  }
  if (from.has_customizedinfo()) {
    customizedinfo_ = new ::micromsg::CustomizedInfo(*from.customizedinfo_);
  } else {
    customizedinfo_ = NULL;
  }
  if (from.has_resbuf()) {
    resbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.resbuf_);
  } else {
    resbuf_ = NULL;
  }
  ::memcpy(&sex_, &from.sex_,
    reinterpret_cast<char*>(&matchtype_) -
    reinterpret_cast<char*>(&sex_) + sizeof(matchtype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SearchContactResponse)
}

void SearchContactResponse::SharedCtor() {
  _cached_size_ = 0;
  province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifyinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weibo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weibonickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albumbgimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mybrandlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  antispamticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kfworkerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&matchtype_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(matchtype_));
}

SearchContactResponse::~SearchContactResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SearchContactResponse)
  SharedDtor();
}

void SearchContactResponse::SharedDtor() {
  province_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifyinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weibo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weibonickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albumbgimgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mybrandlist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  antispamticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kfworkerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete username_;
  }
  if (this != internal_default_instance()) {
    delete nickname_;
  }
  if (this != internal_default_instance()) {
    delete pyinitial_;
  }
  if (this != internal_default_instance()) {
    delete quanpin_;
  }
  if (this != internal_default_instance()) {
    delete imgbuf_;
  }
  if (this != internal_default_instance()) {
    delete snsuserinfo_;
  }
  if (this != internal_default_instance()) {
    delete customizedinfo_;
  }
  if (this != internal_default_instance()) {
    delete resbuf_;
  }
}

void SearchContactResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchContactResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchContactResponse& SearchContactResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchContactResponse* SearchContactResponse::New(::google::protobuf::Arena* arena) const {
  SearchContactResponse* n = new SearchContactResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchContactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SearchContactResponse)
  contactlist_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_province()) {
      GOOGLE_DCHECK(!province_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*province_.UnsafeRawStringPointer())->clear();
    }
    if (has_city()) {
      GOOGLE_DCHECK(!city_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*city_.UnsafeRawStringPointer())->clear();
    }
    if (has_signature()) {
      GOOGLE_DCHECK(!signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*signature_.UnsafeRawStringPointer())->clear();
    }
    if (has_verifyinfo()) {
      GOOGLE_DCHECK(!verifyinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifyinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_weibo()) {
      GOOGLE_DCHECK(!weibo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*weibo_.UnsafeRawStringPointer())->clear();
    }
    if (has_alias()) {
      GOOGLE_DCHECK(!alias_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*alias_.UnsafeRawStringPointer())->clear();
    }
    if (has_weibonickname()) {
      GOOGLE_DCHECK(!weibonickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*weibonickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_albumbgimgid()) {
      GOOGLE_DCHECK(!albumbgimgid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*albumbgimgid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_country()) {
      GOOGLE_DCHECK(!country_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_.UnsafeRawStringPointer())->clear();
    }
    if (has_mybrandlist()) {
      GOOGLE_DCHECK(!mybrandlist_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mybrandlist_.UnsafeRawStringPointer())->clear();
    }
    if (has_bigheadimgurl()) {
      GOOGLE_DCHECK(!bigheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bigheadimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_smallheadimgurl()) {
      GOOGLE_DCHECK(!smallheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*smallheadimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_antispamticket()) {
      GOOGLE_DCHECK(!antispamticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*antispamticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_kfworkerid()) {
      GOOGLE_DCHECK(!kfworkerid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*kfworkerid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(username_ != NULL);
      username_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 8323072u) {
    if (has_nickname()) {
      GOOGLE_DCHECK(nickname_ != NULL);
      nickname_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_pyinitial()) {
      GOOGLE_DCHECK(pyinitial_ != NULL);
      pyinitial_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_quanpin()) {
      GOOGLE_DCHECK(quanpin_ != NULL);
      quanpin_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_imgbuf()) {
      GOOGLE_DCHECK(imgbuf_ != NULL);
      imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_snsuserinfo()) {
      GOOGLE_DCHECK(snsuserinfo_ != NULL);
      snsuserinfo_->::micromsg::SnsUserInfo::Clear();
    }
    if (has_customizedinfo()) {
      GOOGLE_DCHECK(customizedinfo_ != NULL);
      customizedinfo_->::micromsg::CustomizedInfo::Clear();
    }
    if (has_resbuf()) {
      GOOGLE_DCHECK(resbuf_ != NULL);
      resbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  sex_ = 0;
  if (_has_bits_[24 / 32] & 2130706432u) {
    ::memset(&personalcard_, 0, reinterpret_cast<char*>(&matchtype_) -
      reinterpret_cast<char*>(&personalcard_) + sizeof(matchtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SearchContactResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SearchContactResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t NickName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t PYInitial = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pyinitial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t QuanPin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quanpin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Sex = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_sex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ImgBuf = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Province = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactResponse.Province");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string City = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactResponse.City");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Signature = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactResponse.Signature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 PersonalCard = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_personalcard();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &personalcard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 VerifyFlag = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_verifyflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verifyflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VerifyInfo = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifyinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifyinfo().data(), this->verifyinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactResponse.VerifyInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Weibo = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weibo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weibo().data(), this->weibo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactResponse.Weibo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Alias = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactResponse.Alias");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string WeiboNickname = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weibonickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weibonickname().data(), this->weibonickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactResponse.WeiboNickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 WeiboFlag = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_weiboflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weiboflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AlbumStyle = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_albumstyle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &albumstyle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AlbumFlag = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_albumflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &albumflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AlbumBGImgID = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_albumbgimgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->albumbgimgid().data(), this->albumbgimgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactResponse.AlbumBGImgID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SnsUserInfo SnsUserInfo = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snsuserinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Country = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactResponse.Country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MyBrandList = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mybrandlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mybrandlist().data(), this->mybrandlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactResponse.MyBrandList");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.CustomizedInfo CustomizedInfo = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_customizedinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ContactCount = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_contactcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contactcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SearchContactItem ContactList = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contactlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BigHeadImgUrl = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bigheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bigheadimgurl().data(), this->bigheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactResponse.BigHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SmallHeadImgUrl = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smallheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->smallheadimgurl().data(), this->smallheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactResponse.SmallHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t ResBuf = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AntispamTicket = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_antispamticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->antispamticket().data(), this->antispamticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactResponse.AntispamTicket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string KFWorkerID = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kfworkerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->kfworkerid().data(), this->kfworkerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchContactResponse.KFWorkerID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 MatchType = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(256u)) {
          set_has_matchtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SearchContactResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SearchContactResponse)
  return false;
#undef DO_
}

void SearchContactResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SearchContactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.SKBuiltinString_t UserName = 2;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->username_, output);
  }

  // required .micromsg.SKBuiltinString_t NickName = 3;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->nickname_, output);
  }

  // required .micromsg.SKBuiltinString_t PYInitial = 4;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pyinitial_, output);
  }

  // required .micromsg.SKBuiltinString_t QuanPin = 5;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->quanpin_, output);
  }

  // required int32 Sex = 6;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 7;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->imgbuf_, output);
  }

  // optional string Province = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.Province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->province(), output);
  }

  // optional string City = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.City");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->city(), output);
  }

  // optional string Signature = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.Signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->signature(), output);
  }

  // optional uint32 PersonalCard = 11;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->personalcard(), output);
  }

  // optional uint32 VerifyFlag = 12;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->verifyflag(), output);
  }

  // optional string VerifyInfo = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifyinfo().data(), this->verifyinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.VerifyInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->verifyinfo(), output);
  }

  // optional string Weibo = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weibo().data(), this->weibo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.Weibo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->weibo(), output);
  }

  // optional string Alias = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.Alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->alias(), output);
  }

  // optional string WeiboNickname = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weibonickname().data(), this->weibonickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.WeiboNickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->weibonickname(), output);
  }

  // optional uint32 WeiboFlag = 17;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->weiboflag(), output);
  }

  // optional int32 AlbumStyle = 18;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->albumstyle(), output);
  }

  // optional int32 AlbumFlag = 19;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->albumflag(), output);
  }

  // optional string AlbumBGImgID = 20;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumbgimgid().data(), this->albumbgimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.AlbumBGImgID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->albumbgimgid(), output);
  }

  // optional .micromsg.SnsUserInfo SnsUserInfo = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->snsuserinfo_, output);
  }

  // optional string Country = 22;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.Country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->country(), output);
  }

  // optional string MyBrandList = 23;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mybrandlist().data(), this->mybrandlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.MyBrandList");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->mybrandlist(), output);
  }

  // optional .micromsg.CustomizedInfo CustomizedInfo = 24;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->customizedinfo_, output);
  }

  // optional uint32 ContactCount = 25;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->contactcount(), output);
  }

  // repeated .micromsg.SearchContactItem ContactList = 26;
  for (unsigned int i = 0, n = this->contactlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->contactlist(i), output);
  }

  // optional string BigHeadImgUrl = 27;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadimgurl().data(), this->bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.BigHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->bigheadimgurl(), output);
  }

  // optional string SmallHeadImgUrl = 28;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadimgurl().data(), this->smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.SmallHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->smallheadimgurl(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t ResBuf = 29;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->resbuf_, output);
  }

  // optional string AntispamTicket = 30;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->antispamticket().data(), this->antispamticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.AntispamTicket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->antispamticket(), output);
  }

  // optional string KFWorkerID = 31;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kfworkerid().data(), this->kfworkerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.KFWorkerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->kfworkerid(), output);
  }

  // optional uint32 MatchType = 32;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->matchtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SearchContactResponse)
}

::google::protobuf::uint8* SearchContactResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SearchContactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t UserName = 2;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->username_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t NickName = 3;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->nickname_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t PYInitial = 4;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->pyinitial_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t QuanPin = 5;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->quanpin_, deterministic, target);
  }

  // required int32 Sex = 6;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 7;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->imgbuf_, deterministic, target);
  }

  // optional string Province = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.Province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->province(), target);
  }

  // optional string City = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.City");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->city(), target);
  }

  // optional string Signature = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.Signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->signature(), target);
  }

  // optional uint32 PersonalCard = 11;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->personalcard(), target);
  }

  // optional uint32 VerifyFlag = 12;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->verifyflag(), target);
  }

  // optional string VerifyInfo = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifyinfo().data(), this->verifyinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.VerifyInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->verifyinfo(), target);
  }

  // optional string Weibo = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weibo().data(), this->weibo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.Weibo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->weibo(), target);
  }

  // optional string Alias = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.Alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->alias(), target);
  }

  // optional string WeiboNickname = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weibonickname().data(), this->weibonickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.WeiboNickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->weibonickname(), target);
  }

  // optional uint32 WeiboFlag = 17;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->weiboflag(), target);
  }

  // optional int32 AlbumStyle = 18;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->albumstyle(), target);
  }

  // optional int32 AlbumFlag = 19;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->albumflag(), target);
  }

  // optional string AlbumBGImgID = 20;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumbgimgid().data(), this->albumbgimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.AlbumBGImgID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->albumbgimgid(), target);
  }

  // optional .micromsg.SnsUserInfo SnsUserInfo = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->snsuserinfo_, deterministic, target);
  }

  // optional string Country = 22;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.Country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->country(), target);
  }

  // optional string MyBrandList = 23;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mybrandlist().data(), this->mybrandlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.MyBrandList");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->mybrandlist(), target);
  }

  // optional .micromsg.CustomizedInfo CustomizedInfo = 24;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->customizedinfo_, deterministic, target);
  }

  // optional uint32 ContactCount = 25;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->contactcount(), target);
  }

  // repeated .micromsg.SearchContactItem ContactList = 26;
  for (unsigned int i = 0, n = this->contactlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, this->contactlist(i), deterministic, target);
  }

  // optional string BigHeadImgUrl = 27;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadimgurl().data(), this->bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.BigHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->bigheadimgurl(), target);
  }

  // optional string SmallHeadImgUrl = 28;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadimgurl().data(), this->smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.SmallHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->smallheadimgurl(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t ResBuf = 29;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->resbuf_, deterministic, target);
  }

  // optional string AntispamTicket = 30;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->antispamticket().data(), this->antispamticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.AntispamTicket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->antispamticket(), target);
  }

  // optional string KFWorkerID = 31;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kfworkerid().data(), this->kfworkerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchContactResponse.KFWorkerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->kfworkerid(), target);
  }

  // optional uint32 MatchType = 32;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->matchtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SearchContactResponse)
  return target;
}

size_t SearchContactResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SearchContactResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_username()) {
    // required .micromsg.SKBuiltinString_t UserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }

  if (has_nickname()) {
    // required .micromsg.SKBuiltinString_t NickName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nickname_);
  }

  if (has_pyinitial()) {
    // required .micromsg.SKBuiltinString_t PYInitial = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pyinitial_);
  }

  if (has_quanpin()) {
    // required .micromsg.SKBuiltinString_t QuanPin = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quanpin_);
  }

  if (has_imgbuf()) {
    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);
  }

  if (has_sex()) {
    // required int32 Sex = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());
  }

  return total_size;
}
size_t SearchContactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SearchContactResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x008fc000) ^ 0x008fc000) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinString_t UserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);

    // required .micromsg.SKBuiltinString_t NickName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nickname_);

    // required .micromsg.SKBuiltinString_t PYInitial = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pyinitial_);

    // required .micromsg.SKBuiltinString_t QuanPin = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quanpin_);

    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);

    // required int32 Sex = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SearchContactItem ContactList = 26;
  {
    unsigned int count = this->contactlist_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contactlist(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string Province = 8;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string City = 9;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string Signature = 10;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional string VerifyInfo = 13;
    if (has_verifyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifyinfo());
    }

    // optional string Weibo = 14;
    if (has_weibo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weibo());
    }

    // optional string Alias = 15;
    if (has_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

    // optional string WeiboNickname = 16;
    if (has_weibonickname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weibonickname());
    }

    // optional string AlbumBGImgID = 20;
    if (has_albumbgimgid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->albumbgimgid());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional string Country = 22;
    if (has_country()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string MyBrandList = 23;
    if (has_mybrandlist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mybrandlist());
    }

    // optional string BigHeadImgUrl = 27;
    if (has_bigheadimgurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bigheadimgurl());
    }

    // optional string SmallHeadImgUrl = 28;
    if (has_smallheadimgurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->smallheadimgurl());
    }

    // optional string AntispamTicket = 30;
    if (has_antispamticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->antispamticket());
    }

    // optional string KFWorkerID = 31;
    if (has_kfworkerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kfworkerid());
    }

  }
  if (_has_bits_[16 / 32] & 7340032u) {
    // optional .micromsg.SnsUserInfo SnsUserInfo = 21;
    if (has_snsuserinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->snsuserinfo_);
    }

    // optional .micromsg.CustomizedInfo CustomizedInfo = 24;
    if (has_customizedinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->customizedinfo_);
    }

    // optional .micromsg.SKBuiltinBuffer_t ResBuf = 29;
    if (has_resbuf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->resbuf_);
    }

  }
  if (_has_bits_[24 / 32] & 2130706432u) {
    // optional uint32 PersonalCard = 11;
    if (has_personalcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->personalcard());
    }

    // optional uint32 VerifyFlag = 12;
    if (has_verifyflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->verifyflag());
    }

    // optional uint32 WeiboFlag = 17;
    if (has_weiboflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weiboflag());
    }

    // optional int32 AlbumStyle = 18;
    if (has_albumstyle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->albumstyle());
    }

    // optional int32 AlbumFlag = 19;
    if (has_albumflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->albumflag());
    }

    // optional uint32 ContactCount = 25;
    if (has_contactcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contactcount());
    }

    // optional uint32 MatchType = 32;
    if (has_matchtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchtype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchContactResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SearchContactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchContactResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchContactResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SearchContactResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SearchContactResponse)
    MergeFrom(*source);
  }
}

void SearchContactResponse::MergeFrom(const SearchContactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SearchContactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contactlist_.MergeFrom(from.contactlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_province();
      province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_city();
      city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_verifyinfo();
      verifyinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifyinfo_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_weibo();
      weibo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weibo_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_alias();
      alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_weibonickname();
      weibonickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weibonickname_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_albumbgimgid();
      albumbgimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albumbgimgid_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_mybrandlist();
      mybrandlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mybrandlist_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_bigheadimgurl();
      bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadimgurl_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_smallheadimgurl();
      smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadimgurl_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_antispamticket();
      antispamticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.antispamticket_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_kfworkerid();
      kfworkerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kfworkerid_);
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_nickname()->::micromsg::SKBuiltinString_t::MergeFrom(from.nickname());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_pyinitial()->::micromsg::SKBuiltinString_t::MergeFrom(from.pyinitial());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_quanpin()->::micromsg::SKBuiltinString_t::MergeFrom(from.quanpin());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_imgbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.imgbuf());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_snsuserinfo()->::micromsg::SnsUserInfo::MergeFrom(from.snsuserinfo());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_customizedinfo()->::micromsg::CustomizedInfo::MergeFrom(from.customizedinfo());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_resbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.resbuf());
    }
    if (cached_has_bits & 0x00800000u) {
      sex_ = from.sex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2130706432u) {
    if (cached_has_bits & 0x01000000u) {
      personalcard_ = from.personalcard_;
    }
    if (cached_has_bits & 0x02000000u) {
      verifyflag_ = from.verifyflag_;
    }
    if (cached_has_bits & 0x04000000u) {
      weiboflag_ = from.weiboflag_;
    }
    if (cached_has_bits & 0x08000000u) {
      albumstyle_ = from.albumstyle_;
    }
    if (cached_has_bits & 0x10000000u) {
      albumflag_ = from.albumflag_;
    }
    if (cached_has_bits & 0x20000000u) {
      contactcount_ = from.contactcount_;
    }
    if (cached_has_bits & 0x40000000u) {
      matchtype_ = from.matchtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SearchContactResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SearchContactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchContactResponse::CopyFrom(const SearchContactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SearchContactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchContactResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x008fc000) != 0x008fc000) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->contactlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_imgbuf()) {
    if (!this->imgbuf_->IsInitialized()) return false;
  }
  if (has_snsuserinfo()) {
    if (!this->snsuserinfo_->IsInitialized()) return false;
  }
  if (has_customizedinfo()) {
    if (!this->customizedinfo_->IsInitialized()) return false;
  }
  if (has_resbuf()) {
    if (!this->resbuf_->IsInitialized()) return false;
  }
  return true;
}

void SearchContactResponse::Swap(SearchContactResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchContactResponse::InternalSwap(SearchContactResponse* other) {
  contactlist_.InternalSwap(&other->contactlist_);
  province_.Swap(&other->province_);
  city_.Swap(&other->city_);
  signature_.Swap(&other->signature_);
  verifyinfo_.Swap(&other->verifyinfo_);
  weibo_.Swap(&other->weibo_);
  alias_.Swap(&other->alias_);
  weibonickname_.Swap(&other->weibonickname_);
  albumbgimgid_.Swap(&other->albumbgimgid_);
  country_.Swap(&other->country_);
  mybrandlist_.Swap(&other->mybrandlist_);
  bigheadimgurl_.Swap(&other->bigheadimgurl_);
  smallheadimgurl_.Swap(&other->smallheadimgurl_);
  antispamticket_.Swap(&other->antispamticket_);
  kfworkerid_.Swap(&other->kfworkerid_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(username_, other->username_);
  std::swap(nickname_, other->nickname_);
  std::swap(pyinitial_, other->pyinitial_);
  std::swap(quanpin_, other->quanpin_);
  std::swap(imgbuf_, other->imgbuf_);
  std::swap(snsuserinfo_, other->snsuserinfo_);
  std::swap(customizedinfo_, other->customizedinfo_);
  std::swap(resbuf_, other->resbuf_);
  std::swap(sex_, other->sex_);
  std::swap(personalcard_, other->personalcard_);
  std::swap(verifyflag_, other->verifyflag_);
  std::swap(weiboflag_, other->weiboflag_);
  std::swap(albumstyle_, other->albumstyle_);
  std::swap(albumflag_, other->albumflag_);
  std::swap(contactcount_, other->contactcount_);
  std::swap(matchtype_, other->matchtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchContactResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchContactResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SearchContactResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SearchContactResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00004000u;
}
void SearchContactResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00004000u;
}
void SearchContactResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SearchContactResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SearchContactResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SearchContactResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SearchContactResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.BaseResponse)
}

// required .micromsg.SKBuiltinString_t UserName = 2;
bool SearchContactResponse::has_username() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SearchContactResponse::set_has_username() {
  _has_bits_[0] |= 0x00008000u;
}
void SearchContactResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00008000u;
}
void SearchContactResponse::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& SearchContactResponse::username() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* SearchContactResponse::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.UserName)
  return username_;
}
::micromsg::SKBuiltinString_t* SearchContactResponse::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void SearchContactResponse::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.UserName)
}

// required .micromsg.SKBuiltinString_t NickName = 3;
bool SearchContactResponse::has_nickname() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SearchContactResponse::set_has_nickname() {
  _has_bits_[0] |= 0x00010000u;
}
void SearchContactResponse::clear_has_nickname() {
  _has_bits_[0] &= ~0x00010000u;
}
void SearchContactResponse::clear_nickname() {
  if (nickname_ != NULL) nickname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_nickname();
}
const ::micromsg::SKBuiltinString_t& SearchContactResponse::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.NickName)
  return nickname_ != NULL ? *nickname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* SearchContactResponse::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == NULL) {
    nickname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.NickName)
  return nickname_;
}
::micromsg::SKBuiltinString_t* SearchContactResponse::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.NickName)
  clear_has_nickname();
  ::micromsg::SKBuiltinString_t* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
void SearchContactResponse::set_allocated_nickname(::micromsg::SKBuiltinString_t* nickname) {
  delete nickname_;
  nickname_ = nickname;
  if (nickname) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.NickName)
}

// required .micromsg.SKBuiltinString_t PYInitial = 4;
bool SearchContactResponse::has_pyinitial() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SearchContactResponse::set_has_pyinitial() {
  _has_bits_[0] |= 0x00020000u;
}
void SearchContactResponse::clear_has_pyinitial() {
  _has_bits_[0] &= ~0x00020000u;
}
void SearchContactResponse::clear_pyinitial() {
  if (pyinitial_ != NULL) pyinitial_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_pyinitial();
}
const ::micromsg::SKBuiltinString_t& SearchContactResponse::pyinitial() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.PYInitial)
  return pyinitial_ != NULL ? *pyinitial_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* SearchContactResponse::mutable_pyinitial() {
  set_has_pyinitial();
  if (pyinitial_ == NULL) {
    pyinitial_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.PYInitial)
  return pyinitial_;
}
::micromsg::SKBuiltinString_t* SearchContactResponse::release_pyinitial() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.PYInitial)
  clear_has_pyinitial();
  ::micromsg::SKBuiltinString_t* temp = pyinitial_;
  pyinitial_ = NULL;
  return temp;
}
void SearchContactResponse::set_allocated_pyinitial(::micromsg::SKBuiltinString_t* pyinitial) {
  delete pyinitial_;
  pyinitial_ = pyinitial;
  if (pyinitial) {
    set_has_pyinitial();
  } else {
    clear_has_pyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.PYInitial)
}

// required .micromsg.SKBuiltinString_t QuanPin = 5;
bool SearchContactResponse::has_quanpin() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SearchContactResponse::set_has_quanpin() {
  _has_bits_[0] |= 0x00040000u;
}
void SearchContactResponse::clear_has_quanpin() {
  _has_bits_[0] &= ~0x00040000u;
}
void SearchContactResponse::clear_quanpin() {
  if (quanpin_ != NULL) quanpin_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_quanpin();
}
const ::micromsg::SKBuiltinString_t& SearchContactResponse::quanpin() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.QuanPin)
  return quanpin_ != NULL ? *quanpin_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* SearchContactResponse::mutable_quanpin() {
  set_has_quanpin();
  if (quanpin_ == NULL) {
    quanpin_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.QuanPin)
  return quanpin_;
}
::micromsg::SKBuiltinString_t* SearchContactResponse::release_quanpin() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.QuanPin)
  clear_has_quanpin();
  ::micromsg::SKBuiltinString_t* temp = quanpin_;
  quanpin_ = NULL;
  return temp;
}
void SearchContactResponse::set_allocated_quanpin(::micromsg::SKBuiltinString_t* quanpin) {
  delete quanpin_;
  quanpin_ = quanpin;
  if (quanpin) {
    set_has_quanpin();
  } else {
    clear_has_quanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.QuanPin)
}

// required int32 Sex = 6;
bool SearchContactResponse::has_sex() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void SearchContactResponse::set_has_sex() {
  _has_bits_[0] |= 0x00800000u;
}
void SearchContactResponse::clear_has_sex() {
  _has_bits_[0] &= ~0x00800000u;
}
void SearchContactResponse::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
::google::protobuf::int32 SearchContactResponse::sex() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.Sex)
  return sex_;
}
void SearchContactResponse::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.Sex)
}

// required .micromsg.SKBuiltinBuffer_t ImgBuf = 7;
bool SearchContactResponse::has_imgbuf() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SearchContactResponse::set_has_imgbuf() {
  _has_bits_[0] |= 0x00080000u;
}
void SearchContactResponse::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00080000u;
}
void SearchContactResponse::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_imgbuf();
}
const ::micromsg::SKBuiltinBuffer_t& SearchContactResponse::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* SearchContactResponse::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.ImgBuf)
  return imgbuf_;
}
::micromsg::SKBuiltinBuffer_t* SearchContactResponse::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.ImgBuf)
  clear_has_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
void SearchContactResponse::set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.ImgBuf)
}

// optional string Province = 8;
bool SearchContactResponse::has_province() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SearchContactResponse::set_has_province() {
  _has_bits_[0] |= 0x00000001u;
}
void SearchContactResponse::clear_has_province() {
  _has_bits_[0] &= ~0x00000001u;
}
void SearchContactResponse::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
const ::std::string& SearchContactResponse::province() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.Province)
  return province_.GetNoArena();
}
void SearchContactResponse::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.Province)
}
#if LANG_CXX11
void SearchContactResponse::set_province(::std::string&& value) {
  set_has_province();
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.Province)
}
#endif
void SearchContactResponse::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.Province)
}
void SearchContactResponse::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.Province)
}
::std::string* SearchContactResponse::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.Province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactResponse::release_province() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.Province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactResponse::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.Province)
}

// optional string City = 9;
bool SearchContactResponse::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SearchContactResponse::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
void SearchContactResponse::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
void SearchContactResponse::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
const ::std::string& SearchContactResponse::city() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.City)
  return city_.GetNoArena();
}
void SearchContactResponse::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.City)
}
#if LANG_CXX11
void SearchContactResponse::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.City)
}
#endif
void SearchContactResponse::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.City)
}
void SearchContactResponse::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.City)
}
::std::string* SearchContactResponse::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.City)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactResponse::release_city() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.City)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactResponse::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.City)
}

// optional string Signature = 10;
bool SearchContactResponse::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SearchContactResponse::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
void SearchContactResponse::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
void SearchContactResponse::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
const ::std::string& SearchContactResponse::signature() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.Signature)
  return signature_.GetNoArena();
}
void SearchContactResponse::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.Signature)
}
#if LANG_CXX11
void SearchContactResponse::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.Signature)
}
#endif
void SearchContactResponse::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.Signature)
}
void SearchContactResponse::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.Signature)
}
::std::string* SearchContactResponse::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactResponse::release_signature() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactResponse::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.Signature)
}

// optional uint32 PersonalCard = 11;
bool SearchContactResponse::has_personalcard() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void SearchContactResponse::set_has_personalcard() {
  _has_bits_[0] |= 0x01000000u;
}
void SearchContactResponse::clear_has_personalcard() {
  _has_bits_[0] &= ~0x01000000u;
}
void SearchContactResponse::clear_personalcard() {
  personalcard_ = 0u;
  clear_has_personalcard();
}
::google::protobuf::uint32 SearchContactResponse::personalcard() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.PersonalCard)
  return personalcard_;
}
void SearchContactResponse::set_personalcard(::google::protobuf::uint32 value) {
  set_has_personalcard();
  personalcard_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.PersonalCard)
}

// optional uint32 VerifyFlag = 12;
bool SearchContactResponse::has_verifyflag() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void SearchContactResponse::set_has_verifyflag() {
  _has_bits_[0] |= 0x02000000u;
}
void SearchContactResponse::clear_has_verifyflag() {
  _has_bits_[0] &= ~0x02000000u;
}
void SearchContactResponse::clear_verifyflag() {
  verifyflag_ = 0u;
  clear_has_verifyflag();
}
::google::protobuf::uint32 SearchContactResponse::verifyflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.VerifyFlag)
  return verifyflag_;
}
void SearchContactResponse::set_verifyflag(::google::protobuf::uint32 value) {
  set_has_verifyflag();
  verifyflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.VerifyFlag)
}

// optional string VerifyInfo = 13;
bool SearchContactResponse::has_verifyinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SearchContactResponse::set_has_verifyinfo() {
  _has_bits_[0] |= 0x00000008u;
}
void SearchContactResponse::clear_has_verifyinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
void SearchContactResponse::clear_verifyinfo() {
  verifyinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifyinfo();
}
const ::std::string& SearchContactResponse::verifyinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.VerifyInfo)
  return verifyinfo_.GetNoArena();
}
void SearchContactResponse::set_verifyinfo(const ::std::string& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.VerifyInfo)
}
#if LANG_CXX11
void SearchContactResponse::set_verifyinfo(::std::string&& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.VerifyInfo)
}
#endif
void SearchContactResponse::set_verifyinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.VerifyInfo)
}
void SearchContactResponse::set_verifyinfo(const char* value, size_t size) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.VerifyInfo)
}
::std::string* SearchContactResponse::mutable_verifyinfo() {
  set_has_verifyinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.VerifyInfo)
  return verifyinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactResponse::release_verifyinfo() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.VerifyInfo)
  clear_has_verifyinfo();
  return verifyinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactResponse::set_allocated_verifyinfo(::std::string* verifyinfo) {
  if (verifyinfo != NULL) {
    set_has_verifyinfo();
  } else {
    clear_has_verifyinfo();
  }
  verifyinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifyinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.VerifyInfo)
}

// optional string Weibo = 14;
bool SearchContactResponse::has_weibo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SearchContactResponse::set_has_weibo() {
  _has_bits_[0] |= 0x00000010u;
}
void SearchContactResponse::clear_has_weibo() {
  _has_bits_[0] &= ~0x00000010u;
}
void SearchContactResponse::clear_weibo() {
  weibo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibo();
}
const ::std::string& SearchContactResponse::weibo() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.Weibo)
  return weibo_.GetNoArena();
}
void SearchContactResponse::set_weibo(const ::std::string& value) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.Weibo)
}
#if LANG_CXX11
void SearchContactResponse::set_weibo(::std::string&& value) {
  set_has_weibo();
  weibo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.Weibo)
}
#endif
void SearchContactResponse::set_weibo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.Weibo)
}
void SearchContactResponse::set_weibo(const char* value, size_t size) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.Weibo)
}
::std::string* SearchContactResponse::mutable_weibo() {
  set_has_weibo();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.Weibo)
  return weibo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactResponse::release_weibo() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.Weibo)
  clear_has_weibo();
  return weibo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactResponse::set_allocated_weibo(::std::string* weibo) {
  if (weibo != NULL) {
    set_has_weibo();
  } else {
    clear_has_weibo();
  }
  weibo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.Weibo)
}

// optional string Alias = 15;
bool SearchContactResponse::has_alias() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SearchContactResponse::set_has_alias() {
  _has_bits_[0] |= 0x00000020u;
}
void SearchContactResponse::clear_has_alias() {
  _has_bits_[0] &= ~0x00000020u;
}
void SearchContactResponse::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
const ::std::string& SearchContactResponse::alias() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.Alias)
  return alias_.GetNoArena();
}
void SearchContactResponse::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.Alias)
}
#if LANG_CXX11
void SearchContactResponse::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.Alias)
}
#endif
void SearchContactResponse::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.Alias)
}
void SearchContactResponse::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.Alias)
}
::std::string* SearchContactResponse::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactResponse::release_alias() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.Alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactResponse::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.Alias)
}

// optional string WeiboNickname = 16;
bool SearchContactResponse::has_weibonickname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SearchContactResponse::set_has_weibonickname() {
  _has_bits_[0] |= 0x00000040u;
}
void SearchContactResponse::clear_has_weibonickname() {
  _has_bits_[0] &= ~0x00000040u;
}
void SearchContactResponse::clear_weibonickname() {
  weibonickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibonickname();
}
const ::std::string& SearchContactResponse::weibonickname() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.WeiboNickname)
  return weibonickname_.GetNoArena();
}
void SearchContactResponse::set_weibonickname(const ::std::string& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.WeiboNickname)
}
#if LANG_CXX11
void SearchContactResponse::set_weibonickname(::std::string&& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.WeiboNickname)
}
#endif
void SearchContactResponse::set_weibonickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.WeiboNickname)
}
void SearchContactResponse::set_weibonickname(const char* value, size_t size) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.WeiboNickname)
}
::std::string* SearchContactResponse::mutable_weibonickname() {
  set_has_weibonickname();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.WeiboNickname)
  return weibonickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactResponse::release_weibonickname() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.WeiboNickname)
  clear_has_weibonickname();
  return weibonickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactResponse::set_allocated_weibonickname(::std::string* weibonickname) {
  if (weibonickname != NULL) {
    set_has_weibonickname();
  } else {
    clear_has_weibonickname();
  }
  weibonickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibonickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.WeiboNickname)
}

// optional uint32 WeiboFlag = 17;
bool SearchContactResponse::has_weiboflag() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void SearchContactResponse::set_has_weiboflag() {
  _has_bits_[0] |= 0x04000000u;
}
void SearchContactResponse::clear_has_weiboflag() {
  _has_bits_[0] &= ~0x04000000u;
}
void SearchContactResponse::clear_weiboflag() {
  weiboflag_ = 0u;
  clear_has_weiboflag();
}
::google::protobuf::uint32 SearchContactResponse::weiboflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.WeiboFlag)
  return weiboflag_;
}
void SearchContactResponse::set_weiboflag(::google::protobuf::uint32 value) {
  set_has_weiboflag();
  weiboflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.WeiboFlag)
}

// optional int32 AlbumStyle = 18;
bool SearchContactResponse::has_albumstyle() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void SearchContactResponse::set_has_albumstyle() {
  _has_bits_[0] |= 0x08000000u;
}
void SearchContactResponse::clear_has_albumstyle() {
  _has_bits_[0] &= ~0x08000000u;
}
void SearchContactResponse::clear_albumstyle() {
  albumstyle_ = 0;
  clear_has_albumstyle();
}
::google::protobuf::int32 SearchContactResponse::albumstyle() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.AlbumStyle)
  return albumstyle_;
}
void SearchContactResponse::set_albumstyle(::google::protobuf::int32 value) {
  set_has_albumstyle();
  albumstyle_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.AlbumStyle)
}

// optional int32 AlbumFlag = 19;
bool SearchContactResponse::has_albumflag() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void SearchContactResponse::set_has_albumflag() {
  _has_bits_[0] |= 0x10000000u;
}
void SearchContactResponse::clear_has_albumflag() {
  _has_bits_[0] &= ~0x10000000u;
}
void SearchContactResponse::clear_albumflag() {
  albumflag_ = 0;
  clear_has_albumflag();
}
::google::protobuf::int32 SearchContactResponse::albumflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.AlbumFlag)
  return albumflag_;
}
void SearchContactResponse::set_albumflag(::google::protobuf::int32 value) {
  set_has_albumflag();
  albumflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.AlbumFlag)
}

// optional string AlbumBGImgID = 20;
bool SearchContactResponse::has_albumbgimgid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SearchContactResponse::set_has_albumbgimgid() {
  _has_bits_[0] |= 0x00000080u;
}
void SearchContactResponse::clear_has_albumbgimgid() {
  _has_bits_[0] &= ~0x00000080u;
}
void SearchContactResponse::clear_albumbgimgid() {
  albumbgimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_albumbgimgid();
}
const ::std::string& SearchContactResponse::albumbgimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.AlbumBGImgID)
  return albumbgimgid_.GetNoArena();
}
void SearchContactResponse::set_albumbgimgid(const ::std::string& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.AlbumBGImgID)
}
#if LANG_CXX11
void SearchContactResponse::set_albumbgimgid(::std::string&& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.AlbumBGImgID)
}
#endif
void SearchContactResponse::set_albumbgimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.AlbumBGImgID)
}
void SearchContactResponse::set_albumbgimgid(const char* value, size_t size) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.AlbumBGImgID)
}
::std::string* SearchContactResponse::mutable_albumbgimgid() {
  set_has_albumbgimgid();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.AlbumBGImgID)
  return albumbgimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactResponse::release_albumbgimgid() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.AlbumBGImgID)
  clear_has_albumbgimgid();
  return albumbgimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactResponse::set_allocated_albumbgimgid(::std::string* albumbgimgid) {
  if (albumbgimgid != NULL) {
    set_has_albumbgimgid();
  } else {
    clear_has_albumbgimgid();
  }
  albumbgimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albumbgimgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.AlbumBGImgID)
}

// optional .micromsg.SnsUserInfo SnsUserInfo = 21;
bool SearchContactResponse::has_snsuserinfo() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SearchContactResponse::set_has_snsuserinfo() {
  _has_bits_[0] |= 0x00100000u;
}
void SearchContactResponse::clear_has_snsuserinfo() {
  _has_bits_[0] &= ~0x00100000u;
}
void SearchContactResponse::clear_snsuserinfo() {
  if (snsuserinfo_ != NULL) snsuserinfo_->::micromsg::SnsUserInfo::Clear();
  clear_has_snsuserinfo();
}
const ::micromsg::SnsUserInfo& SearchContactResponse::snsuserinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.SnsUserInfo)
  return snsuserinfo_ != NULL ? *snsuserinfo_
                         : *::micromsg::SnsUserInfo::internal_default_instance();
}
::micromsg::SnsUserInfo* SearchContactResponse::mutable_snsuserinfo() {
  set_has_snsuserinfo();
  if (snsuserinfo_ == NULL) {
    snsuserinfo_ = new ::micromsg::SnsUserInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.SnsUserInfo)
  return snsuserinfo_;
}
::micromsg::SnsUserInfo* SearchContactResponse::release_snsuserinfo() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.SnsUserInfo)
  clear_has_snsuserinfo();
  ::micromsg::SnsUserInfo* temp = snsuserinfo_;
  snsuserinfo_ = NULL;
  return temp;
}
void SearchContactResponse::set_allocated_snsuserinfo(::micromsg::SnsUserInfo* snsuserinfo) {
  delete snsuserinfo_;
  snsuserinfo_ = snsuserinfo;
  if (snsuserinfo) {
    set_has_snsuserinfo();
  } else {
    clear_has_snsuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.SnsUserInfo)
}

// optional string Country = 22;
bool SearchContactResponse::has_country() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SearchContactResponse::set_has_country() {
  _has_bits_[0] |= 0x00000100u;
}
void SearchContactResponse::clear_has_country() {
  _has_bits_[0] &= ~0x00000100u;
}
void SearchContactResponse::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
const ::std::string& SearchContactResponse::country() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.Country)
  return country_.GetNoArena();
}
void SearchContactResponse::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.Country)
}
#if LANG_CXX11
void SearchContactResponse::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.Country)
}
#endif
void SearchContactResponse::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.Country)
}
void SearchContactResponse::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.Country)
}
::std::string* SearchContactResponse::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.Country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactResponse::release_country() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.Country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactResponse::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.Country)
}

// optional string MyBrandList = 23;
bool SearchContactResponse::has_mybrandlist() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SearchContactResponse::set_has_mybrandlist() {
  _has_bits_[0] |= 0x00000200u;
}
void SearchContactResponse::clear_has_mybrandlist() {
  _has_bits_[0] &= ~0x00000200u;
}
void SearchContactResponse::clear_mybrandlist() {
  mybrandlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mybrandlist();
}
const ::std::string& SearchContactResponse::mybrandlist() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.MyBrandList)
  return mybrandlist_.GetNoArena();
}
void SearchContactResponse::set_mybrandlist(const ::std::string& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.MyBrandList)
}
#if LANG_CXX11
void SearchContactResponse::set_mybrandlist(::std::string&& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.MyBrandList)
}
#endif
void SearchContactResponse::set_mybrandlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.MyBrandList)
}
void SearchContactResponse::set_mybrandlist(const char* value, size_t size) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.MyBrandList)
}
::std::string* SearchContactResponse::mutable_mybrandlist() {
  set_has_mybrandlist();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.MyBrandList)
  return mybrandlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactResponse::release_mybrandlist() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.MyBrandList)
  clear_has_mybrandlist();
  return mybrandlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactResponse::set_allocated_mybrandlist(::std::string* mybrandlist) {
  if (mybrandlist != NULL) {
    set_has_mybrandlist();
  } else {
    clear_has_mybrandlist();
  }
  mybrandlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mybrandlist);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.MyBrandList)
}

// optional .micromsg.CustomizedInfo CustomizedInfo = 24;
bool SearchContactResponse::has_customizedinfo() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void SearchContactResponse::set_has_customizedinfo() {
  _has_bits_[0] |= 0x00200000u;
}
void SearchContactResponse::clear_has_customizedinfo() {
  _has_bits_[0] &= ~0x00200000u;
}
void SearchContactResponse::clear_customizedinfo() {
  if (customizedinfo_ != NULL) customizedinfo_->::micromsg::CustomizedInfo::Clear();
  clear_has_customizedinfo();
}
const ::micromsg::CustomizedInfo& SearchContactResponse::customizedinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.CustomizedInfo)
  return customizedinfo_ != NULL ? *customizedinfo_
                         : *::micromsg::CustomizedInfo::internal_default_instance();
}
::micromsg::CustomizedInfo* SearchContactResponse::mutable_customizedinfo() {
  set_has_customizedinfo();
  if (customizedinfo_ == NULL) {
    customizedinfo_ = new ::micromsg::CustomizedInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.CustomizedInfo)
  return customizedinfo_;
}
::micromsg::CustomizedInfo* SearchContactResponse::release_customizedinfo() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.CustomizedInfo)
  clear_has_customizedinfo();
  ::micromsg::CustomizedInfo* temp = customizedinfo_;
  customizedinfo_ = NULL;
  return temp;
}
void SearchContactResponse::set_allocated_customizedinfo(::micromsg::CustomizedInfo* customizedinfo) {
  delete customizedinfo_;
  customizedinfo_ = customizedinfo;
  if (customizedinfo) {
    set_has_customizedinfo();
  } else {
    clear_has_customizedinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.CustomizedInfo)
}

// optional uint32 ContactCount = 25;
bool SearchContactResponse::has_contactcount() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void SearchContactResponse::set_has_contactcount() {
  _has_bits_[0] |= 0x20000000u;
}
void SearchContactResponse::clear_has_contactcount() {
  _has_bits_[0] &= ~0x20000000u;
}
void SearchContactResponse::clear_contactcount() {
  contactcount_ = 0u;
  clear_has_contactcount();
}
::google::protobuf::uint32 SearchContactResponse::contactcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.ContactCount)
  return contactcount_;
}
void SearchContactResponse::set_contactcount(::google::protobuf::uint32 value) {
  set_has_contactcount();
  contactcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.ContactCount)
}

// repeated .micromsg.SearchContactItem ContactList = 26;
int SearchContactResponse::contactlist_size() const {
  return contactlist_.size();
}
void SearchContactResponse::clear_contactlist() {
  contactlist_.Clear();
}
const ::micromsg::SearchContactItem& SearchContactResponse::contactlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.ContactList)
  return contactlist_.Get(index);
}
::micromsg::SearchContactItem* SearchContactResponse::mutable_contactlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.ContactList)
  return contactlist_.Mutable(index);
}
::micromsg::SearchContactItem* SearchContactResponse::add_contactlist() {
  // @@protoc_insertion_point(field_add:micromsg.SearchContactResponse.ContactList)
  return contactlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SearchContactItem >*
SearchContactResponse::mutable_contactlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SearchContactResponse.ContactList)
  return &contactlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SearchContactItem >&
SearchContactResponse::contactlist() const {
  // @@protoc_insertion_point(field_list:micromsg.SearchContactResponse.ContactList)
  return contactlist_;
}

// optional string BigHeadImgUrl = 27;
bool SearchContactResponse::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SearchContactResponse::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000400u;
}
void SearchContactResponse::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000400u;
}
void SearchContactResponse::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
const ::std::string& SearchContactResponse::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
void SearchContactResponse::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.BigHeadImgUrl)
}
#if LANG_CXX11
void SearchContactResponse::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.BigHeadImgUrl)
}
#endif
void SearchContactResponse::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.BigHeadImgUrl)
}
void SearchContactResponse::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.BigHeadImgUrl)
}
::std::string* SearchContactResponse::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactResponse::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactResponse::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 28;
bool SearchContactResponse::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SearchContactResponse::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00000800u;
}
void SearchContactResponse::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00000800u;
}
void SearchContactResponse::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
const ::std::string& SearchContactResponse::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
void SearchContactResponse::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.SmallHeadImgUrl)
}
#if LANG_CXX11
void SearchContactResponse::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.SmallHeadImgUrl)
}
#endif
void SearchContactResponse::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.SmallHeadImgUrl)
}
void SearchContactResponse::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.SmallHeadImgUrl)
}
::std::string* SearchContactResponse::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactResponse::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactResponse::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.SmallHeadImgUrl)
}

// optional .micromsg.SKBuiltinBuffer_t ResBuf = 29;
bool SearchContactResponse::has_resbuf() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void SearchContactResponse::set_has_resbuf() {
  _has_bits_[0] |= 0x00400000u;
}
void SearchContactResponse::clear_has_resbuf() {
  _has_bits_[0] &= ~0x00400000u;
}
void SearchContactResponse::clear_resbuf() {
  if (resbuf_ != NULL) resbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_resbuf();
}
const ::micromsg::SKBuiltinBuffer_t& SearchContactResponse::resbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.ResBuf)
  return resbuf_ != NULL ? *resbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* SearchContactResponse::mutable_resbuf() {
  set_has_resbuf();
  if (resbuf_ == NULL) {
    resbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.ResBuf)
  return resbuf_;
}
::micromsg::SKBuiltinBuffer_t* SearchContactResponse::release_resbuf() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.ResBuf)
  clear_has_resbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = resbuf_;
  resbuf_ = NULL;
  return temp;
}
void SearchContactResponse::set_allocated_resbuf(::micromsg::SKBuiltinBuffer_t* resbuf) {
  delete resbuf_;
  resbuf_ = resbuf;
  if (resbuf) {
    set_has_resbuf();
  } else {
    clear_has_resbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.ResBuf)
}

// optional string AntispamTicket = 30;
bool SearchContactResponse::has_antispamticket() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SearchContactResponse::set_has_antispamticket() {
  _has_bits_[0] |= 0x00001000u;
}
void SearchContactResponse::clear_has_antispamticket() {
  _has_bits_[0] &= ~0x00001000u;
}
void SearchContactResponse::clear_antispamticket() {
  antispamticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_antispamticket();
}
const ::std::string& SearchContactResponse::antispamticket() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.AntispamTicket)
  return antispamticket_.GetNoArena();
}
void SearchContactResponse::set_antispamticket(const ::std::string& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.AntispamTicket)
}
#if LANG_CXX11
void SearchContactResponse::set_antispamticket(::std::string&& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.AntispamTicket)
}
#endif
void SearchContactResponse::set_antispamticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.AntispamTicket)
}
void SearchContactResponse::set_antispamticket(const char* value, size_t size) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.AntispamTicket)
}
::std::string* SearchContactResponse::mutable_antispamticket() {
  set_has_antispamticket();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.AntispamTicket)
  return antispamticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactResponse::release_antispamticket() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.AntispamTicket)
  clear_has_antispamticket();
  return antispamticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactResponse::set_allocated_antispamticket(::std::string* antispamticket) {
  if (antispamticket != NULL) {
    set_has_antispamticket();
  } else {
    clear_has_antispamticket();
  }
  antispamticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), antispamticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.AntispamTicket)
}

// optional string KFWorkerID = 31;
bool SearchContactResponse::has_kfworkerid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SearchContactResponse::set_has_kfworkerid() {
  _has_bits_[0] |= 0x00002000u;
}
void SearchContactResponse::clear_has_kfworkerid() {
  _has_bits_[0] &= ~0x00002000u;
}
void SearchContactResponse::clear_kfworkerid() {
  kfworkerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_kfworkerid();
}
const ::std::string& SearchContactResponse::kfworkerid() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.KFWorkerID)
  return kfworkerid_.GetNoArena();
}
void SearchContactResponse::set_kfworkerid(const ::std::string& value) {
  set_has_kfworkerid();
  kfworkerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.KFWorkerID)
}
#if LANG_CXX11
void SearchContactResponse::set_kfworkerid(::std::string&& value) {
  set_has_kfworkerid();
  kfworkerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.KFWorkerID)
}
#endif
void SearchContactResponse::set_kfworkerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_kfworkerid();
  kfworkerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.KFWorkerID)
}
void SearchContactResponse::set_kfworkerid(const char* value, size_t size) {
  set_has_kfworkerid();
  kfworkerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.KFWorkerID)
}
::std::string* SearchContactResponse::mutable_kfworkerid() {
  set_has_kfworkerid();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.KFWorkerID)
  return kfworkerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchContactResponse::release_kfworkerid() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.KFWorkerID)
  clear_has_kfworkerid();
  return kfworkerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchContactResponse::set_allocated_kfworkerid(::std::string* kfworkerid) {
  if (kfworkerid != NULL) {
    set_has_kfworkerid();
  } else {
    clear_has_kfworkerid();
  }
  kfworkerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kfworkerid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.KFWorkerID)
}

// optional uint32 MatchType = 32;
bool SearchContactResponse::has_matchtype() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void SearchContactResponse::set_has_matchtype() {
  _has_bits_[0] |= 0x40000000u;
}
void SearchContactResponse::clear_has_matchtype() {
  _has_bits_[0] &= ~0x40000000u;
}
void SearchContactResponse::clear_matchtype() {
  matchtype_ = 0u;
  clear_has_matchtype();
}
::google::protobuf::uint32 SearchContactResponse::matchtype() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.MatchType)
  return matchtype_;
}
void SearchContactResponse::set_matchtype(::google::protobuf::uint32 value) {
  set_has_matchtype();
  matchtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.MatchType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupCardReq::kGroupCardNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupCardReq::GroupCardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GroupCardReq)
}
GroupCardReq::GroupCardReq(const GroupCardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  groupcardname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupcardname()) {
    groupcardname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupcardname_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GroupCardReq)
}

void GroupCardReq::SharedCtor() {
  _cached_size_ = 0;
  groupcardname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GroupCardReq::~GroupCardReq() {
  // @@protoc_insertion_point(destructor:micromsg.GroupCardReq)
  SharedDtor();
}

void GroupCardReq::SharedDtor() {
  groupcardname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GroupCardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupCardReq::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GroupCardReq& GroupCardReq::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GroupCardReq* GroupCardReq::New(::google::protobuf::Arena* arena) const {
  GroupCardReq* n = new GroupCardReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupCardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GroupCardReq)
  if (has_groupcardname()) {
    GOOGLE_DCHECK(!groupcardname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*groupcardname_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GroupCardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GroupCardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GroupCardName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupcardname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupcardname().data(), this->groupcardname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GroupCardReq.GroupCardName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GroupCardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GroupCardReq)
  return false;
#undef DO_
}

void GroupCardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GroupCardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string GroupCardName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupcardname().data(), this->groupcardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GroupCardReq.GroupCardName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->groupcardname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GroupCardReq)
}

::google::protobuf::uint8* GroupCardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GroupCardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string GroupCardName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupcardname().data(), this->groupcardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GroupCardReq.GroupCardName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupcardname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GroupCardReq)
  return target;
}

size_t GroupCardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GroupCardReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string GroupCardName = 1;
  if (has_groupcardname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupcardname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupCardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GroupCardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupCardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupCardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GroupCardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GroupCardReq)
    MergeFrom(*source);
  }
}

void GroupCardReq::MergeFrom(const GroupCardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GroupCardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_groupcardname()) {
    set_has_groupcardname();
    groupcardname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupcardname_);
  }
}

void GroupCardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GroupCardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupCardReq::CopyFrom(const GroupCardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GroupCardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupCardReq::IsInitialized() const {
  return true;
}

void GroupCardReq::Swap(GroupCardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupCardReq::InternalSwap(GroupCardReq* other) {
  groupcardname_.Swap(&other->groupcardname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupCardReq::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupCardReq

// optional string GroupCardName = 1;
bool GroupCardReq::has_groupcardname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GroupCardReq::set_has_groupcardname() {
  _has_bits_[0] |= 0x00000001u;
}
void GroupCardReq::clear_has_groupcardname() {
  _has_bits_[0] &= ~0x00000001u;
}
void GroupCardReq::clear_groupcardname() {
  groupcardname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupcardname();
}
const ::std::string& GroupCardReq::groupcardname() const {
  // @@protoc_insertion_point(field_get:micromsg.GroupCardReq.GroupCardName)
  return groupcardname_.GetNoArena();
}
void GroupCardReq::set_groupcardname(const ::std::string& value) {
  set_has_groupcardname();
  groupcardname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GroupCardReq.GroupCardName)
}
#if LANG_CXX11
void GroupCardReq::set_groupcardname(::std::string&& value) {
  set_has_groupcardname();
  groupcardname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GroupCardReq.GroupCardName)
}
#endif
void GroupCardReq::set_groupcardname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupcardname();
  groupcardname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GroupCardReq.GroupCardName)
}
void GroupCardReq::set_groupcardname(const char* value, size_t size) {
  set_has_groupcardname();
  groupcardname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GroupCardReq.GroupCardName)
}
::std::string* GroupCardReq::mutable_groupcardname() {
  set_has_groupcardname();
  // @@protoc_insertion_point(field_mutable:micromsg.GroupCardReq.GroupCardName)
  return groupcardname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GroupCardReq::release_groupcardname() {
  // @@protoc_insertion_point(field_release:micromsg.GroupCardReq.GroupCardName)
  clear_has_groupcardname();
  return groupcardname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GroupCardReq::set_allocated_groupcardname(::std::string* groupcardname) {
  if (groupcardname != NULL) {
    set_has_groupcardname();
  } else {
    clear_has_groupcardname();
  }
  groupcardname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupcardname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GroupCardReq.GroupCardName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarMember::kMemberNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarMember::RadarMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.RadarMember)
}
RadarMember::RadarMember(const RadarMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  membername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_membername()) {
    membername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.membername_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.RadarMember)
}

void RadarMember::SharedCtor() {
  _cached_size_ = 0;
  membername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RadarMember::~RadarMember() {
  // @@protoc_insertion_point(destructor:micromsg.RadarMember)
  SharedDtor();
}

void RadarMember::SharedDtor() {
  membername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RadarMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarMember::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RadarMember& RadarMember::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

RadarMember* RadarMember::New(::google::protobuf::Arena* arena) const {
  RadarMember* n = new RadarMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadarMember::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.RadarMember)
  if (has_membername()) {
    GOOGLE_DCHECK(!membername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*membername_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RadarMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.RadarMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string MemberName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_membername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->membername().data(), this->membername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RadarMember.MemberName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.RadarMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.RadarMember)
  return false;
#undef DO_
}

void RadarMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.RadarMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string MemberName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->membername().data(), this->membername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RadarMember.MemberName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->membername(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.RadarMember)
}

::google::protobuf::uint8* RadarMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.RadarMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string MemberName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->membername().data(), this->membername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RadarMember.MemberName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->membername(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.RadarMember)
  return target;
}

size_t RadarMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.RadarMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string MemberName = 1;
  if (has_membername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->membername());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.RadarMember)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.RadarMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.RadarMember)
    MergeFrom(*source);
  }
}

void RadarMember::MergeFrom(const RadarMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.RadarMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_membername()) {
    set_has_membername();
    membername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.membername_);
  }
}

void RadarMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.RadarMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarMember::CopyFrom(const RadarMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.RadarMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarMember::IsInitialized() const {
  return true;
}

void RadarMember::Swap(RadarMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarMember::InternalSwap(RadarMember* other) {
  membername_.Swap(&other->membername_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadarMember::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RadarMember

// optional string MemberName = 1;
bool RadarMember::has_membername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RadarMember::set_has_membername() {
  _has_bits_[0] |= 0x00000001u;
}
void RadarMember::clear_has_membername() {
  _has_bits_[0] &= ~0x00000001u;
}
void RadarMember::clear_membername() {
  membername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_membername();
}
const ::std::string& RadarMember::membername() const {
  // @@protoc_insertion_point(field_get:micromsg.RadarMember.MemberName)
  return membername_.GetNoArena();
}
void RadarMember::set_membername(const ::std::string& value) {
  set_has_membername();
  membername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RadarMember.MemberName)
}
#if LANG_CXX11
void RadarMember::set_membername(::std::string&& value) {
  set_has_membername();
  membername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RadarMember.MemberName)
}
#endif
void RadarMember::set_membername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_membername();
  membername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RadarMember.MemberName)
}
void RadarMember::set_membername(const char* value, size_t size) {
  set_has_membername();
  membername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RadarMember.MemberName)
}
::std::string* RadarMember::mutable_membername() {
  set_has_membername();
  // @@protoc_insertion_point(field_mutable:micromsg.RadarMember.MemberName)
  return membername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RadarMember::release_membername() {
  // @@protoc_insertion_point(field_release:micromsg.RadarMember.MemberName)
  clear_has_membername();
  return membername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RadarMember::set_allocated_membername(::std::string* membername) {
  if (membername != NULL) {
    set_has_membername();
  } else {
    clear_has_membername();
  }
  membername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), membername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RadarMember.MemberName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarCreateChatRoomParameter::kTicketFieldNumber;
const int RadarCreateChatRoomParameter::kRadarMemberCountFieldNumber;
const int RadarCreateChatRoomParameter::kRadarMemberListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarCreateChatRoomParameter::RadarCreateChatRoomParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.RadarCreateChatRoomParameter)
}
RadarCreateChatRoomParameter::RadarCreateChatRoomParameter(const RadarCreateChatRoomParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      radarmemberlist_(from.radarmemberlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  radarmembercount_ = from.radarmembercount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.RadarCreateChatRoomParameter)
}

void RadarCreateChatRoomParameter::SharedCtor() {
  _cached_size_ = 0;
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  radarmembercount_ = 0u;
}

RadarCreateChatRoomParameter::~RadarCreateChatRoomParameter() {
  // @@protoc_insertion_point(destructor:micromsg.RadarCreateChatRoomParameter)
  SharedDtor();
}

void RadarCreateChatRoomParameter::SharedDtor() {
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RadarCreateChatRoomParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarCreateChatRoomParameter::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RadarCreateChatRoomParameter& RadarCreateChatRoomParameter::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

RadarCreateChatRoomParameter* RadarCreateChatRoomParameter::New(::google::protobuf::Arena* arena) const {
  RadarCreateChatRoomParameter* n = new RadarCreateChatRoomParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadarCreateChatRoomParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.RadarCreateChatRoomParameter)
  radarmemberlist_.Clear();
  if (has_ticket()) {
    GOOGLE_DCHECK(!ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ticket_.UnsafeRawStringPointer())->clear();
  }
  radarmembercount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RadarCreateChatRoomParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.RadarCreateChatRoomParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticket().data(), this->ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RadarCreateChatRoomParameter.Ticket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 RadarMemberCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_radarmembercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radarmembercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.RadarMember RadarMemberList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_radarmemberlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.RadarCreateChatRoomParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.RadarCreateChatRoomParameter)
  return false;
#undef DO_
}

void RadarCreateChatRoomParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.RadarCreateChatRoomParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RadarCreateChatRoomParameter.Ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ticket(), output);
  }

  // optional uint32 RadarMemberCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->radarmembercount(), output);
  }

  // repeated .micromsg.RadarMember RadarMemberList = 3;
  for (unsigned int i = 0, n = this->radarmemberlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->radarmemberlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.RadarCreateChatRoomParameter)
}

::google::protobuf::uint8* RadarCreateChatRoomParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.RadarCreateChatRoomParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RadarCreateChatRoomParameter.Ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ticket(), target);
  }

  // optional uint32 RadarMemberCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->radarmembercount(), target);
  }

  // repeated .micromsg.RadarMember RadarMemberList = 3;
  for (unsigned int i = 0, n = this->radarmemberlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->radarmemberlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.RadarCreateChatRoomParameter)
  return target;
}

size_t RadarCreateChatRoomParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.RadarCreateChatRoomParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .micromsg.RadarMember RadarMemberList = 3;
  {
    unsigned int count = this->radarmemberlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radarmemberlist(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string Ticket = 1;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket());
    }

    // optional uint32 RadarMemberCount = 2;
    if (has_radarmembercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radarmembercount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarCreateChatRoomParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.RadarCreateChatRoomParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarCreateChatRoomParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarCreateChatRoomParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.RadarCreateChatRoomParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.RadarCreateChatRoomParameter)
    MergeFrom(*source);
  }
}

void RadarCreateChatRoomParameter::MergeFrom(const RadarCreateChatRoomParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.RadarCreateChatRoomParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  radarmemberlist_.MergeFrom(from.radarmemberlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      radarmembercount_ = from.radarmembercount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadarCreateChatRoomParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.RadarCreateChatRoomParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarCreateChatRoomParameter::CopyFrom(const RadarCreateChatRoomParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.RadarCreateChatRoomParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarCreateChatRoomParameter::IsInitialized() const {
  return true;
}

void RadarCreateChatRoomParameter::Swap(RadarCreateChatRoomParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarCreateChatRoomParameter::InternalSwap(RadarCreateChatRoomParameter* other) {
  radarmemberlist_.InternalSwap(&other->radarmemberlist_);
  ticket_.Swap(&other->ticket_);
  std::swap(radarmembercount_, other->radarmembercount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadarCreateChatRoomParameter::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RadarCreateChatRoomParameter

// optional string Ticket = 1;
bool RadarCreateChatRoomParameter::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RadarCreateChatRoomParameter::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
void RadarCreateChatRoomParameter::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
void RadarCreateChatRoomParameter::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
const ::std::string& RadarCreateChatRoomParameter::ticket() const {
  // @@protoc_insertion_point(field_get:micromsg.RadarCreateChatRoomParameter.Ticket)
  return ticket_.GetNoArena();
}
void RadarCreateChatRoomParameter::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RadarCreateChatRoomParameter.Ticket)
}
#if LANG_CXX11
void RadarCreateChatRoomParameter::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RadarCreateChatRoomParameter.Ticket)
}
#endif
void RadarCreateChatRoomParameter::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RadarCreateChatRoomParameter.Ticket)
}
void RadarCreateChatRoomParameter::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RadarCreateChatRoomParameter.Ticket)
}
::std::string* RadarCreateChatRoomParameter::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:micromsg.RadarCreateChatRoomParameter.Ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RadarCreateChatRoomParameter::release_ticket() {
  // @@protoc_insertion_point(field_release:micromsg.RadarCreateChatRoomParameter.Ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RadarCreateChatRoomParameter::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RadarCreateChatRoomParameter.Ticket)
}

// optional uint32 RadarMemberCount = 2;
bool RadarCreateChatRoomParameter::has_radarmembercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RadarCreateChatRoomParameter::set_has_radarmembercount() {
  _has_bits_[0] |= 0x00000002u;
}
void RadarCreateChatRoomParameter::clear_has_radarmembercount() {
  _has_bits_[0] &= ~0x00000002u;
}
void RadarCreateChatRoomParameter::clear_radarmembercount() {
  radarmembercount_ = 0u;
  clear_has_radarmembercount();
}
::google::protobuf::uint32 RadarCreateChatRoomParameter::radarmembercount() const {
  // @@protoc_insertion_point(field_get:micromsg.RadarCreateChatRoomParameter.RadarMemberCount)
  return radarmembercount_;
}
void RadarCreateChatRoomParameter::set_radarmembercount(::google::protobuf::uint32 value) {
  set_has_radarmembercount();
  radarmembercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RadarCreateChatRoomParameter.RadarMemberCount)
}

// repeated .micromsg.RadarMember RadarMemberList = 3;
int RadarCreateChatRoomParameter::radarmemberlist_size() const {
  return radarmemberlist_.size();
}
void RadarCreateChatRoomParameter::clear_radarmemberlist() {
  radarmemberlist_.Clear();
}
const ::micromsg::RadarMember& RadarCreateChatRoomParameter::radarmemberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.RadarCreateChatRoomParameter.RadarMemberList)
  return radarmemberlist_.Get(index);
}
::micromsg::RadarMember* RadarCreateChatRoomParameter::mutable_radarmemberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.RadarCreateChatRoomParameter.RadarMemberList)
  return radarmemberlist_.Mutable(index);
}
::micromsg::RadarMember* RadarCreateChatRoomParameter::add_radarmemberlist() {
  // @@protoc_insertion_point(field_add:micromsg.RadarCreateChatRoomParameter.RadarMemberList)
  return radarmemberlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::RadarMember >*
RadarCreateChatRoomParameter::mutable_radarmemberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.RadarCreateChatRoomParameter.RadarMemberList)
  return &radarmemberlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::RadarMember >&
RadarCreateChatRoomParameter::radarmemberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.RadarCreateChatRoomParameter.RadarMemberList)
  return radarmemberlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateChatRoomRequest::kBaseRequestFieldNumber;
const int CreateChatRoomRequest::kTopicFieldNumber;
const int CreateChatRoomRequest::kMemberCountFieldNumber;
const int CreateChatRoomRequest::kMemberListFieldNumber;
const int CreateChatRoomRequest::kSceneFieldNumber;
const int CreateChatRoomRequest::kExtBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateChatRoomRequest::CreateChatRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CreateChatRoomRequest)
}
CreateChatRoomRequest::CreateChatRoomRequest(const CreateChatRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      memberlist_(from.memberlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_topic()) {
    topic_ = new ::micromsg::SKBuiltinString_t(*from.topic_);
  } else {
    topic_ = NULL;
  }
  if (from.has_extbuffer()) {
    extbuffer_ = new ::micromsg::SKBuiltinBuffer_t(*from.extbuffer_);
  } else {
    extbuffer_ = NULL;
  }
  ::memcpy(&membercount_, &from.membercount_,
    reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&membercount_) + sizeof(scene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.CreateChatRoomRequest)
}

void CreateChatRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

CreateChatRoomRequest::~CreateChatRoomRequest() {
  // @@protoc_insertion_point(destructor:micromsg.CreateChatRoomRequest)
  SharedDtor();
}

void CreateChatRoomRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete topic_;
  }
  if (this != internal_default_instance()) {
    delete extbuffer_;
  }
}

void CreateChatRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateChatRoomRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateChatRoomRequest& CreateChatRoomRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateChatRoomRequest* CreateChatRoomRequest::New(::google::protobuf::Arena* arena) const {
  CreateChatRoomRequest* n = new CreateChatRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateChatRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CreateChatRoomRequest)
  memberlist_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_topic()) {
      GOOGLE_DCHECK(topic_ != NULL);
      topic_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_extbuffer()) {
      GOOGLE_DCHECK(extbuffer_ != NULL);
      extbuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&membercount_, 0, reinterpret_cast<char*>(&scene_) -
      reinterpret_cast<char*>(&membercount_) + sizeof(scene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreateChatRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CreateChatRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t Topic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MemberCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_membercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.MemberReq MemberList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t ExtBuffer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extbuffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CreateChatRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CreateChatRoomRequest)
  return false;
#undef DO_
}

void CreateChatRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CreateChatRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SKBuiltinString_t Topic = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->topic_, output);
  }

  // required uint32 MemberCount = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->membercount(), output);
  }

  // repeated .micromsg.MemberReq MemberList = 4;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->memberlist(i), output);
  }

  // optional uint32 Scene = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->scene(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t ExtBuffer = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->extbuffer_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CreateChatRoomRequest)
}

::google::protobuf::uint8* CreateChatRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CreateChatRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t Topic = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->topic_, deterministic, target);
  }

  // required uint32 MemberCount = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->membercount(), target);
  }

  // repeated .micromsg.MemberReq MemberList = 4;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->memberlist(i), deterministic, target);
  }

  // optional uint32 Scene = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->scene(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t ExtBuffer = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->extbuffer_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CreateChatRoomRequest)
  return target;
}

size_t CreateChatRoomRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CreateChatRoomRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_topic()) {
    // required .micromsg.SKBuiltinString_t Topic = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->topic_);
  }

  if (has_membercount()) {
    // required uint32 MemberCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());
  }

  return total_size;
}
size_t CreateChatRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CreateChatRoomRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinString_t Topic = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->topic_);

    // required uint32 MemberCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.MemberReq MemberList = 4;
  {
    unsigned int count = this->memberlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberlist(i));
    }
  }

  // optional .micromsg.SKBuiltinBuffer_t ExtBuffer = 6;
  if (has_extbuffer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extbuffer_);
  }

  // optional uint32 Scene = 5;
  if (has_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateChatRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CreateChatRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateChatRoomRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateChatRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CreateChatRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CreateChatRoomRequest)
    MergeFrom(*source);
  }
}

void CreateChatRoomRequest::MergeFrom(const CreateChatRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CreateChatRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memberlist_.MergeFrom(from.memberlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_topic()->::micromsg::SKBuiltinString_t::MergeFrom(from.topic());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_extbuffer()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.extbuffer());
    }
    if (cached_has_bits & 0x00000008u) {
      membercount_ = from.membercount_;
    }
    if (cached_has_bits & 0x00000010u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateChatRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CreateChatRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChatRoomRequest::CopyFrom(const CreateChatRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CreateChatRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChatRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->memberlist())) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_extbuffer()) {
    if (!this->extbuffer_->IsInitialized()) return false;
  }
  return true;
}

void CreateChatRoomRequest::Swap(CreateChatRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateChatRoomRequest::InternalSwap(CreateChatRoomRequest* other) {
  memberlist_.InternalSwap(&other->memberlist_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(topic_, other->topic_);
  std::swap(extbuffer_, other->extbuffer_);
  std::swap(membercount_, other->membercount_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateChatRoomRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateChatRoomRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool CreateChatRoomRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreateChatRoomRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void CreateChatRoomRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreateChatRoomRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& CreateChatRoomRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* CreateChatRoomRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* CreateChatRoomRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void CreateChatRoomRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomRequest.BaseRequest)
}

// required .micromsg.SKBuiltinString_t Topic = 2;
bool CreateChatRoomRequest::has_topic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CreateChatRoomRequest::set_has_topic() {
  _has_bits_[0] |= 0x00000002u;
}
void CreateChatRoomRequest::clear_has_topic() {
  _has_bits_[0] &= ~0x00000002u;
}
void CreateChatRoomRequest::clear_topic() {
  if (topic_ != NULL) topic_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_topic();
}
const ::micromsg::SKBuiltinString_t& CreateChatRoomRequest::topic() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomRequest.Topic)
  return topic_ != NULL ? *topic_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* CreateChatRoomRequest::mutable_topic() {
  set_has_topic();
  if (topic_ == NULL) {
    topic_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomRequest.Topic)
  return topic_;
}
::micromsg::SKBuiltinString_t* CreateChatRoomRequest::release_topic() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomRequest.Topic)
  clear_has_topic();
  ::micromsg::SKBuiltinString_t* temp = topic_;
  topic_ = NULL;
  return temp;
}
void CreateChatRoomRequest::set_allocated_topic(::micromsg::SKBuiltinString_t* topic) {
  delete topic_;
  topic_ = topic;
  if (topic) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomRequest.Topic)
}

// required uint32 MemberCount = 3;
bool CreateChatRoomRequest::has_membercount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CreateChatRoomRequest::set_has_membercount() {
  _has_bits_[0] |= 0x00000008u;
}
void CreateChatRoomRequest::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000008u;
}
void CreateChatRoomRequest::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
::google::protobuf::uint32 CreateChatRoomRequest::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomRequest.MemberCount)
  return membercount_;
}
void CreateChatRoomRequest::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CreateChatRoomRequest.MemberCount)
}

// repeated .micromsg.MemberReq MemberList = 4;
int CreateChatRoomRequest::memberlist_size() const {
  return memberlist_.size();
}
void CreateChatRoomRequest::clear_memberlist() {
  memberlist_.Clear();
}
const ::micromsg::MemberReq& CreateChatRoomRequest::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomRequest.MemberList)
  return memberlist_.Get(index);
}
::micromsg::MemberReq* CreateChatRoomRequest::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomRequest.MemberList)
  return memberlist_.Mutable(index);
}
::micromsg::MemberReq* CreateChatRoomRequest::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.CreateChatRoomRequest.MemberList)
  return memberlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >*
CreateChatRoomRequest::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.CreateChatRoomRequest.MemberList)
  return &memberlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >&
CreateChatRoomRequest::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.CreateChatRoomRequest.MemberList)
  return memberlist_;
}

// optional uint32 Scene = 5;
bool CreateChatRoomRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CreateChatRoomRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000010u;
}
void CreateChatRoomRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000010u;
}
void CreateChatRoomRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 CreateChatRoomRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomRequest.Scene)
  return scene_;
}
void CreateChatRoomRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CreateChatRoomRequest.Scene)
}

// optional .micromsg.SKBuiltinBuffer_t ExtBuffer = 6;
bool CreateChatRoomRequest::has_extbuffer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CreateChatRoomRequest::set_has_extbuffer() {
  _has_bits_[0] |= 0x00000004u;
}
void CreateChatRoomRequest::clear_has_extbuffer() {
  _has_bits_[0] &= ~0x00000004u;
}
void CreateChatRoomRequest::clear_extbuffer() {
  if (extbuffer_ != NULL) extbuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_extbuffer();
}
const ::micromsg::SKBuiltinBuffer_t& CreateChatRoomRequest::extbuffer() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomRequest.ExtBuffer)
  return extbuffer_ != NULL ? *extbuffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* CreateChatRoomRequest::mutable_extbuffer() {
  set_has_extbuffer();
  if (extbuffer_ == NULL) {
    extbuffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomRequest.ExtBuffer)
  return extbuffer_;
}
::micromsg::SKBuiltinBuffer_t* CreateChatRoomRequest::release_extbuffer() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomRequest.ExtBuffer)
  clear_has_extbuffer();
  ::micromsg::SKBuiltinBuffer_t* temp = extbuffer_;
  extbuffer_ = NULL;
  return temp;
}
void CreateChatRoomRequest::set_allocated_extbuffer(::micromsg::SKBuiltinBuffer_t* extbuffer) {
  delete extbuffer_;
  extbuffer_ = extbuffer;
  if (extbuffer) {
    set_has_extbuffer();
  } else {
    clear_has_extbuffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomRequest.ExtBuffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateChatRoomResponse::kBaseResponseFieldNumber;
const int CreateChatRoomResponse::kTopicFieldNumber;
const int CreateChatRoomResponse::kPYInitialFieldNumber;
const int CreateChatRoomResponse::kQuanPinFieldNumber;
const int CreateChatRoomResponse::kMemberCountFieldNumber;
const int CreateChatRoomResponse::kMemberListFieldNumber;
const int CreateChatRoomResponse::kChatRoomNameFieldNumber;
const int CreateChatRoomResponse::kImgBufFieldNumber;
const int CreateChatRoomResponse::kBigHeadImgUrlFieldNumber;
const int CreateChatRoomResponse::kSmallHeadImgUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateChatRoomResponse::CreateChatRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CreateChatRoomResponse)
}
CreateChatRoomResponse::CreateChatRoomResponse(const CreateChatRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      memberlist_(from.memberlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bigheadimgurl()) {
    bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadimgurl_);
  }
  smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_smallheadimgurl()) {
    smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadimgurl_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_topic()) {
    topic_ = new ::micromsg::SKBuiltinString_t(*from.topic_);
  } else {
    topic_ = NULL;
  }
  if (from.has_pyinitial()) {
    pyinitial_ = new ::micromsg::SKBuiltinString_t(*from.pyinitial_);
  } else {
    pyinitial_ = NULL;
  }
  if (from.has_quanpin()) {
    quanpin_ = new ::micromsg::SKBuiltinString_t(*from.quanpin_);
  } else {
    quanpin_ = NULL;
  }
  if (from.has_chatroomname()) {
    chatroomname_ = new ::micromsg::SKBuiltinString_t(*from.chatroomname_);
  } else {
    chatroomname_ = NULL;
  }
  if (from.has_imgbuf()) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.imgbuf_);
  } else {
    imgbuf_ = NULL;
  }
  membercount_ = from.membercount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.CreateChatRoomResponse)
}

void CreateChatRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&membercount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(membercount_));
}

CreateChatRoomResponse::~CreateChatRoomResponse() {
  // @@protoc_insertion_point(destructor:micromsg.CreateChatRoomResponse)
  SharedDtor();
}

void CreateChatRoomResponse::SharedDtor() {
  bigheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete topic_;
  }
  if (this != internal_default_instance()) {
    delete pyinitial_;
  }
  if (this != internal_default_instance()) {
    delete quanpin_;
  }
  if (this != internal_default_instance()) {
    delete chatroomname_;
  }
  if (this != internal_default_instance()) {
    delete imgbuf_;
  }
}

void CreateChatRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateChatRoomResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateChatRoomResponse& CreateChatRoomResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateChatRoomResponse* CreateChatRoomResponse::New(::google::protobuf::Arena* arena) const {
  CreateChatRoomResponse* n = new CreateChatRoomResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateChatRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CreateChatRoomResponse)
  memberlist_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_bigheadimgurl()) {
      GOOGLE_DCHECK(!bigheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bigheadimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_smallheadimgurl()) {
      GOOGLE_DCHECK(!smallheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*smallheadimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_topic()) {
      GOOGLE_DCHECK(topic_ != NULL);
      topic_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_pyinitial()) {
      GOOGLE_DCHECK(pyinitial_ != NULL);
      pyinitial_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_quanpin()) {
      GOOGLE_DCHECK(quanpin_ != NULL);
      quanpin_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_chatroomname()) {
      GOOGLE_DCHECK(chatroomname_ != NULL);
      chatroomname_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_imgbuf()) {
      GOOGLE_DCHECK(imgbuf_ != NULL);
      imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  membercount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreateChatRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CreateChatRoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t Topic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t PYInitial = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pyinitial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t QuanPin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quanpin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MemberCount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_membercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.MemberResp MemberList = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t ChatRoomName = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatroomname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BigHeadImgUrl = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bigheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bigheadimgurl().data(), this->bigheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CreateChatRoomResponse.BigHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SmallHeadImgUrl = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smallheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->smallheadimgurl().data(), this->smallheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CreateChatRoomResponse.SmallHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CreateChatRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CreateChatRoomResponse)
  return false;
#undef DO_
}

void CreateChatRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CreateChatRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.SKBuiltinString_t Topic = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->topic_, output);
  }

  // required .micromsg.SKBuiltinString_t PYInitial = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pyinitial_, output);
  }

  // required .micromsg.SKBuiltinString_t QuanPin = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->quanpin_, output);
  }

  // required uint32 MemberCount = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->membercount(), output);
  }

  // repeated .micromsg.MemberResp MemberList = 6;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->memberlist(i), output);
  }

  // required .micromsg.SKBuiltinString_t ChatRoomName = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->chatroomname_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->imgbuf_, output);
  }

  // optional string BigHeadImgUrl = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadimgurl().data(), this->bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CreateChatRoomResponse.BigHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->bigheadimgurl(), output);
  }

  // optional string SmallHeadImgUrl = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadimgurl().data(), this->smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CreateChatRoomResponse.SmallHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->smallheadimgurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CreateChatRoomResponse)
}

::google::protobuf::uint8* CreateChatRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CreateChatRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t Topic = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->topic_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t PYInitial = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pyinitial_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t QuanPin = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->quanpin_, deterministic, target);
  }

  // required uint32 MemberCount = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->membercount(), target);
  }

  // repeated .micromsg.MemberResp MemberList = 6;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->memberlist(i), deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t ChatRoomName = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->chatroomname_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->imgbuf_, deterministic, target);
  }

  // optional string BigHeadImgUrl = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadimgurl().data(), this->bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CreateChatRoomResponse.BigHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->bigheadimgurl(), target);
  }

  // optional string SmallHeadImgUrl = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadimgurl().data(), this->smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CreateChatRoomResponse.SmallHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->smallheadimgurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CreateChatRoomResponse)
  return target;
}

size_t CreateChatRoomResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CreateChatRoomResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_topic()) {
    // required .micromsg.SKBuiltinString_t Topic = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->topic_);
  }

  if (has_pyinitial()) {
    // required .micromsg.SKBuiltinString_t PYInitial = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pyinitial_);
  }

  if (has_quanpin()) {
    // required .micromsg.SKBuiltinString_t QuanPin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quanpin_);
  }

  if (has_chatroomname()) {
    // required .micromsg.SKBuiltinString_t ChatRoomName = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chatroomname_);
  }

  if (has_imgbuf()) {
    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);
  }

  if (has_membercount()) {
    // required uint32 MemberCount = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());
  }

  return total_size;
}
size_t CreateChatRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CreateChatRoomResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001fc) ^ 0x000001fc) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinString_t Topic = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->topic_);

    // required .micromsg.SKBuiltinString_t PYInitial = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pyinitial_);

    // required .micromsg.SKBuiltinString_t QuanPin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quanpin_);

    // required .micromsg.SKBuiltinString_t ChatRoomName = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chatroomname_);

    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);

    // required uint32 MemberCount = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.MemberResp MemberList = 6;
  {
    unsigned int count = this->memberlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberlist(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string BigHeadImgUrl = 9;
    if (has_bigheadimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bigheadimgurl());
    }

    // optional string SmallHeadImgUrl = 10;
    if (has_smallheadimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->smallheadimgurl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateChatRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CreateChatRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateChatRoomResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateChatRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CreateChatRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CreateChatRoomResponse)
    MergeFrom(*source);
  }
}

void CreateChatRoomResponse::MergeFrom(const CreateChatRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CreateChatRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memberlist_.MergeFrom(from.memberlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_bigheadimgurl();
      bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadimgurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_smallheadimgurl();
      smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadimgurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_topic()->::micromsg::SKBuiltinString_t::MergeFrom(from.topic());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_pyinitial()->::micromsg::SKBuiltinString_t::MergeFrom(from.pyinitial());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_quanpin()->::micromsg::SKBuiltinString_t::MergeFrom(from.quanpin());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_chatroomname()->::micromsg::SKBuiltinString_t::MergeFrom(from.chatroomname());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_imgbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.imgbuf());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    set_membercount(from.membercount());
  }
}

void CreateChatRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CreateChatRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChatRoomResponse::CopyFrom(const CreateChatRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CreateChatRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChatRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001fc) != 0x000001fc) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->memberlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_imgbuf()) {
    if (!this->imgbuf_->IsInitialized()) return false;
  }
  return true;
}

void CreateChatRoomResponse::Swap(CreateChatRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateChatRoomResponse::InternalSwap(CreateChatRoomResponse* other) {
  memberlist_.InternalSwap(&other->memberlist_);
  bigheadimgurl_.Swap(&other->bigheadimgurl_);
  smallheadimgurl_.Swap(&other->smallheadimgurl_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(topic_, other->topic_);
  std::swap(pyinitial_, other->pyinitial_);
  std::swap(quanpin_, other->quanpin_);
  std::swap(chatroomname_, other->chatroomname_);
  std::swap(imgbuf_, other->imgbuf_);
  std::swap(membercount_, other->membercount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateChatRoomResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateChatRoomResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool CreateChatRoomResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CreateChatRoomResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void CreateChatRoomResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void CreateChatRoomResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& CreateChatRoomResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* CreateChatRoomResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* CreateChatRoomResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void CreateChatRoomResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomResponse.BaseResponse)
}

// required .micromsg.SKBuiltinString_t Topic = 2;
bool CreateChatRoomResponse::has_topic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CreateChatRoomResponse::set_has_topic() {
  _has_bits_[0] |= 0x00000008u;
}
void CreateChatRoomResponse::clear_has_topic() {
  _has_bits_[0] &= ~0x00000008u;
}
void CreateChatRoomResponse::clear_topic() {
  if (topic_ != NULL) topic_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_topic();
}
const ::micromsg::SKBuiltinString_t& CreateChatRoomResponse::topic() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomResponse.Topic)
  return topic_ != NULL ? *topic_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* CreateChatRoomResponse::mutable_topic() {
  set_has_topic();
  if (topic_ == NULL) {
    topic_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomResponse.Topic)
  return topic_;
}
::micromsg::SKBuiltinString_t* CreateChatRoomResponse::release_topic() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomResponse.Topic)
  clear_has_topic();
  ::micromsg::SKBuiltinString_t* temp = topic_;
  topic_ = NULL;
  return temp;
}
void CreateChatRoomResponse::set_allocated_topic(::micromsg::SKBuiltinString_t* topic) {
  delete topic_;
  topic_ = topic;
  if (topic) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomResponse.Topic)
}

// required .micromsg.SKBuiltinString_t PYInitial = 3;
bool CreateChatRoomResponse::has_pyinitial() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CreateChatRoomResponse::set_has_pyinitial() {
  _has_bits_[0] |= 0x00000010u;
}
void CreateChatRoomResponse::clear_has_pyinitial() {
  _has_bits_[0] &= ~0x00000010u;
}
void CreateChatRoomResponse::clear_pyinitial() {
  if (pyinitial_ != NULL) pyinitial_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_pyinitial();
}
const ::micromsg::SKBuiltinString_t& CreateChatRoomResponse::pyinitial() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomResponse.PYInitial)
  return pyinitial_ != NULL ? *pyinitial_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* CreateChatRoomResponse::mutable_pyinitial() {
  set_has_pyinitial();
  if (pyinitial_ == NULL) {
    pyinitial_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomResponse.PYInitial)
  return pyinitial_;
}
::micromsg::SKBuiltinString_t* CreateChatRoomResponse::release_pyinitial() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomResponse.PYInitial)
  clear_has_pyinitial();
  ::micromsg::SKBuiltinString_t* temp = pyinitial_;
  pyinitial_ = NULL;
  return temp;
}
void CreateChatRoomResponse::set_allocated_pyinitial(::micromsg::SKBuiltinString_t* pyinitial) {
  delete pyinitial_;
  pyinitial_ = pyinitial;
  if (pyinitial) {
    set_has_pyinitial();
  } else {
    clear_has_pyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomResponse.PYInitial)
}

// required .micromsg.SKBuiltinString_t QuanPin = 4;
bool CreateChatRoomResponse::has_quanpin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CreateChatRoomResponse::set_has_quanpin() {
  _has_bits_[0] |= 0x00000020u;
}
void CreateChatRoomResponse::clear_has_quanpin() {
  _has_bits_[0] &= ~0x00000020u;
}
void CreateChatRoomResponse::clear_quanpin() {
  if (quanpin_ != NULL) quanpin_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_quanpin();
}
const ::micromsg::SKBuiltinString_t& CreateChatRoomResponse::quanpin() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomResponse.QuanPin)
  return quanpin_ != NULL ? *quanpin_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* CreateChatRoomResponse::mutable_quanpin() {
  set_has_quanpin();
  if (quanpin_ == NULL) {
    quanpin_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomResponse.QuanPin)
  return quanpin_;
}
::micromsg::SKBuiltinString_t* CreateChatRoomResponse::release_quanpin() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomResponse.QuanPin)
  clear_has_quanpin();
  ::micromsg::SKBuiltinString_t* temp = quanpin_;
  quanpin_ = NULL;
  return temp;
}
void CreateChatRoomResponse::set_allocated_quanpin(::micromsg::SKBuiltinString_t* quanpin) {
  delete quanpin_;
  quanpin_ = quanpin;
  if (quanpin) {
    set_has_quanpin();
  } else {
    clear_has_quanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomResponse.QuanPin)
}

// required uint32 MemberCount = 5;
bool CreateChatRoomResponse::has_membercount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CreateChatRoomResponse::set_has_membercount() {
  _has_bits_[0] |= 0x00000100u;
}
void CreateChatRoomResponse::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000100u;
}
void CreateChatRoomResponse::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
::google::protobuf::uint32 CreateChatRoomResponse::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomResponse.MemberCount)
  return membercount_;
}
void CreateChatRoomResponse::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CreateChatRoomResponse.MemberCount)
}

// repeated .micromsg.MemberResp MemberList = 6;
int CreateChatRoomResponse::memberlist_size() const {
  return memberlist_.size();
}
void CreateChatRoomResponse::clear_memberlist() {
  memberlist_.Clear();
}
const ::micromsg::MemberResp& CreateChatRoomResponse::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomResponse.MemberList)
  return memberlist_.Get(index);
}
::micromsg::MemberResp* CreateChatRoomResponse::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomResponse.MemberList)
  return memberlist_.Mutable(index);
}
::micromsg::MemberResp* CreateChatRoomResponse::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.CreateChatRoomResponse.MemberList)
  return memberlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >*
CreateChatRoomResponse::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.CreateChatRoomResponse.MemberList)
  return &memberlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >&
CreateChatRoomResponse::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.CreateChatRoomResponse.MemberList)
  return memberlist_;
}

// required .micromsg.SKBuiltinString_t ChatRoomName = 7;
bool CreateChatRoomResponse::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CreateChatRoomResponse::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000040u;
}
void CreateChatRoomResponse::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000040u;
}
void CreateChatRoomResponse::clear_chatroomname() {
  if (chatroomname_ != NULL) chatroomname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_chatroomname();
}
const ::micromsg::SKBuiltinString_t& CreateChatRoomResponse::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomResponse.ChatRoomName)
  return chatroomname_ != NULL ? *chatroomname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* CreateChatRoomResponse::mutable_chatroomname() {
  set_has_chatroomname();
  if (chatroomname_ == NULL) {
    chatroomname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomResponse.ChatRoomName)
  return chatroomname_;
}
::micromsg::SKBuiltinString_t* CreateChatRoomResponse::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomResponse.ChatRoomName)
  clear_has_chatroomname();
  ::micromsg::SKBuiltinString_t* temp = chatroomname_;
  chatroomname_ = NULL;
  return temp;
}
void CreateChatRoomResponse::set_allocated_chatroomname(::micromsg::SKBuiltinString_t* chatroomname) {
  delete chatroomname_;
  chatroomname_ = chatroomname;
  if (chatroomname) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomResponse.ChatRoomName)
}

// required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
bool CreateChatRoomResponse::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CreateChatRoomResponse::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000080u;
}
void CreateChatRoomResponse::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000080u;
}
void CreateChatRoomResponse::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_imgbuf();
}
const ::micromsg::SKBuiltinBuffer_t& CreateChatRoomResponse::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomResponse.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* CreateChatRoomResponse::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomResponse.ImgBuf)
  return imgbuf_;
}
::micromsg::SKBuiltinBuffer_t* CreateChatRoomResponse::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomResponse.ImgBuf)
  clear_has_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
void CreateChatRoomResponse::set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomResponse.ImgBuf)
}

// optional string BigHeadImgUrl = 9;
bool CreateChatRoomResponse::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreateChatRoomResponse::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000001u;
}
void CreateChatRoomResponse::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreateChatRoomResponse::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
const ::std::string& CreateChatRoomResponse::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomResponse.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
void CreateChatRoomResponse::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CreateChatRoomResponse.BigHeadImgUrl)
}
#if LANG_CXX11
void CreateChatRoomResponse::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CreateChatRoomResponse.BigHeadImgUrl)
}
#endif
void CreateChatRoomResponse::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CreateChatRoomResponse.BigHeadImgUrl)
}
void CreateChatRoomResponse::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CreateChatRoomResponse.BigHeadImgUrl)
}
::std::string* CreateChatRoomResponse::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomResponse.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateChatRoomResponse::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomResponse.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateChatRoomResponse::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomResponse.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 10;
bool CreateChatRoomResponse::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CreateChatRoomResponse::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00000002u;
}
void CreateChatRoomResponse::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void CreateChatRoomResponse::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
const ::std::string& CreateChatRoomResponse::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomResponse.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
void CreateChatRoomResponse::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CreateChatRoomResponse.SmallHeadImgUrl)
}
#if LANG_CXX11
void CreateChatRoomResponse::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CreateChatRoomResponse.SmallHeadImgUrl)
}
#endif
void CreateChatRoomResponse::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CreateChatRoomResponse.SmallHeadImgUrl)
}
void CreateChatRoomResponse::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CreateChatRoomResponse.SmallHeadImgUrl)
}
::std::string* CreateChatRoomResponse::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomResponse.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateChatRoomResponse::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomResponse.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateChatRoomResponse::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomResponse.SmallHeadImgUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddChatRoomMemberRequest::kBaseRequestFieldNumber;
const int AddChatRoomMemberRequest::kMemberCountFieldNumber;
const int AddChatRoomMemberRequest::kMemberListFieldNumber;
const int AddChatRoomMemberRequest::kChatRoomNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddChatRoomMemberRequest::AddChatRoomMemberRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AddChatRoomMemberRequest)
}
AddChatRoomMemberRequest::AddChatRoomMemberRequest(const AddChatRoomMemberRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      memberlist_(from.memberlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_chatroomname()) {
    chatroomname_ = new ::micromsg::SKBuiltinString_t(*from.chatroomname_);
  } else {
    chatroomname_ = NULL;
  }
  membercount_ = from.membercount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.AddChatRoomMemberRequest)
}

void AddChatRoomMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&membercount_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(membercount_));
}

AddChatRoomMemberRequest::~AddChatRoomMemberRequest() {
  // @@protoc_insertion_point(destructor:micromsg.AddChatRoomMemberRequest)
  SharedDtor();
}

void AddChatRoomMemberRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete chatroomname_;
  }
}

void AddChatRoomMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddChatRoomMemberRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddChatRoomMemberRequest& AddChatRoomMemberRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddChatRoomMemberRequest* AddChatRoomMemberRequest::New(::google::protobuf::Arena* arena) const {
  AddChatRoomMemberRequest* n = new AddChatRoomMemberRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddChatRoomMemberRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AddChatRoomMemberRequest)
  memberlist_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_chatroomname()) {
      GOOGLE_DCHECK(chatroomname_ != NULL);
      chatroomname_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  membercount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddChatRoomMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AddChatRoomMemberRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MemberCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_membercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.MemberReq MemberList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t ChatRoomName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatroomname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AddChatRoomMemberRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AddChatRoomMemberRequest)
  return false;
#undef DO_
}

void AddChatRoomMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AddChatRoomMemberRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 MemberCount = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->membercount(), output);
  }

  // repeated .micromsg.MemberReq MemberList = 3;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->memberlist(i), output);
  }

  // required .micromsg.SKBuiltinString_t ChatRoomName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->chatroomname_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AddChatRoomMemberRequest)
}

::google::protobuf::uint8* AddChatRoomMemberRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AddChatRoomMemberRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 MemberCount = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->membercount(), target);
  }

  // repeated .micromsg.MemberReq MemberList = 3;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->memberlist(i), deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t ChatRoomName = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->chatroomname_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AddChatRoomMemberRequest)
  return target;
}

size_t AddChatRoomMemberRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.AddChatRoomMemberRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_chatroomname()) {
    // required .micromsg.SKBuiltinString_t ChatRoomName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chatroomname_);
  }

  if (has_membercount()) {
    // required uint32 MemberCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());
  }

  return total_size;
}
size_t AddChatRoomMemberRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AddChatRoomMemberRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinString_t ChatRoomName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chatroomname_);

    // required uint32 MemberCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.MemberReq MemberList = 3;
  {
    unsigned int count = this->memberlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddChatRoomMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AddChatRoomMemberRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddChatRoomMemberRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddChatRoomMemberRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AddChatRoomMemberRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AddChatRoomMemberRequest)
    MergeFrom(*source);
  }
}

void AddChatRoomMemberRequest::MergeFrom(const AddChatRoomMemberRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AddChatRoomMemberRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memberlist_.MergeFrom(from.memberlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_chatroomname()->::micromsg::SKBuiltinString_t::MergeFrom(from.chatroomname());
    }
    if (cached_has_bits & 0x00000004u) {
      membercount_ = from.membercount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddChatRoomMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AddChatRoomMemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddChatRoomMemberRequest::CopyFrom(const AddChatRoomMemberRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AddChatRoomMemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddChatRoomMemberRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->memberlist())) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void AddChatRoomMemberRequest::Swap(AddChatRoomMemberRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddChatRoomMemberRequest::InternalSwap(AddChatRoomMemberRequest* other) {
  memberlist_.InternalSwap(&other->memberlist_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(chatroomname_, other->chatroomname_);
  std::swap(membercount_, other->membercount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddChatRoomMemberRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddChatRoomMemberRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool AddChatRoomMemberRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddChatRoomMemberRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void AddChatRoomMemberRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddChatRoomMemberRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& AddChatRoomMemberRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomMemberRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* AddChatRoomMemberRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomMemberRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* AddChatRoomMemberRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.AddChatRoomMemberRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void AddChatRoomMemberRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddChatRoomMemberRequest.BaseRequest)
}

// required uint32 MemberCount = 2;
bool AddChatRoomMemberRequest::has_membercount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AddChatRoomMemberRequest::set_has_membercount() {
  _has_bits_[0] |= 0x00000004u;
}
void AddChatRoomMemberRequest::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000004u;
}
void AddChatRoomMemberRequest::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
::google::protobuf::uint32 AddChatRoomMemberRequest::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomMemberRequest.MemberCount)
  return membercount_;
}
void AddChatRoomMemberRequest::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddChatRoomMemberRequest.MemberCount)
}

// repeated .micromsg.MemberReq MemberList = 3;
int AddChatRoomMemberRequest::memberlist_size() const {
  return memberlist_.size();
}
void AddChatRoomMemberRequest::clear_memberlist() {
  memberlist_.Clear();
}
const ::micromsg::MemberReq& AddChatRoomMemberRequest::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomMemberRequest.MemberList)
  return memberlist_.Get(index);
}
::micromsg::MemberReq* AddChatRoomMemberRequest::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomMemberRequest.MemberList)
  return memberlist_.Mutable(index);
}
::micromsg::MemberReq* AddChatRoomMemberRequest::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.AddChatRoomMemberRequest.MemberList)
  return memberlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >*
AddChatRoomMemberRequest::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.AddChatRoomMemberRequest.MemberList)
  return &memberlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >&
AddChatRoomMemberRequest::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.AddChatRoomMemberRequest.MemberList)
  return memberlist_;
}

// required .micromsg.SKBuiltinString_t ChatRoomName = 4;
bool AddChatRoomMemberRequest::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddChatRoomMemberRequest::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000002u;
}
void AddChatRoomMemberRequest::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddChatRoomMemberRequest::clear_chatroomname() {
  if (chatroomname_ != NULL) chatroomname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_chatroomname();
}
const ::micromsg::SKBuiltinString_t& AddChatRoomMemberRequest::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomMemberRequest.ChatRoomName)
  return chatroomname_ != NULL ? *chatroomname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* AddChatRoomMemberRequest::mutable_chatroomname() {
  set_has_chatroomname();
  if (chatroomname_ == NULL) {
    chatroomname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomMemberRequest.ChatRoomName)
  return chatroomname_;
}
::micromsg::SKBuiltinString_t* AddChatRoomMemberRequest::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.AddChatRoomMemberRequest.ChatRoomName)
  clear_has_chatroomname();
  ::micromsg::SKBuiltinString_t* temp = chatroomname_;
  chatroomname_ = NULL;
  return temp;
}
void AddChatRoomMemberRequest::set_allocated_chatroomname(::micromsg::SKBuiltinString_t* chatroomname) {
  delete chatroomname_;
  chatroomname_ = chatroomname;
  if (chatroomname) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddChatRoomMemberRequest.ChatRoomName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddChatRoomMemberResponse::kBaseResponseFieldNumber;
const int AddChatRoomMemberResponse::kMemberCountFieldNumber;
const int AddChatRoomMemberResponse::kMemberListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddChatRoomMemberResponse::AddChatRoomMemberResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AddChatRoomMemberResponse)
}
AddChatRoomMemberResponse::AddChatRoomMemberResponse(const AddChatRoomMemberResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      memberlist_(from.memberlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  membercount_ = from.membercount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.AddChatRoomMemberResponse)
}

void AddChatRoomMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&membercount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(membercount_));
}

AddChatRoomMemberResponse::~AddChatRoomMemberResponse() {
  // @@protoc_insertion_point(destructor:micromsg.AddChatRoomMemberResponse)
  SharedDtor();
}

void AddChatRoomMemberResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void AddChatRoomMemberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddChatRoomMemberResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddChatRoomMemberResponse& AddChatRoomMemberResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddChatRoomMemberResponse* AddChatRoomMemberResponse::New(::google::protobuf::Arena* arena) const {
  AddChatRoomMemberResponse* n = new AddChatRoomMemberResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddChatRoomMemberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AddChatRoomMemberResponse)
  memberlist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  membercount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddChatRoomMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AddChatRoomMemberResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MemberCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_membercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.MemberResp MemberList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AddChatRoomMemberResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AddChatRoomMemberResponse)
  return false;
#undef DO_
}

void AddChatRoomMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AddChatRoomMemberResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 MemberCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->membercount(), output);
  }

  // repeated .micromsg.MemberResp MemberList = 3;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->memberlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AddChatRoomMemberResponse)
}

::google::protobuf::uint8* AddChatRoomMemberResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AddChatRoomMemberResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 MemberCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->membercount(), target);
  }

  // repeated .micromsg.MemberResp MemberList = 3;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->memberlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AddChatRoomMemberResponse)
  return target;
}

size_t AddChatRoomMemberResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.AddChatRoomMemberResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_membercount()) {
    // required uint32 MemberCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());
  }

  return total_size;
}
size_t AddChatRoomMemberResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AddChatRoomMemberResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 MemberCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.MemberResp MemberList = 3;
  {
    unsigned int count = this->memberlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddChatRoomMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AddChatRoomMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddChatRoomMemberResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddChatRoomMemberResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AddChatRoomMemberResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AddChatRoomMemberResponse)
    MergeFrom(*source);
  }
}

void AddChatRoomMemberResponse::MergeFrom(const AddChatRoomMemberResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AddChatRoomMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memberlist_.MergeFrom(from.memberlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      membercount_ = from.membercount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddChatRoomMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AddChatRoomMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddChatRoomMemberResponse::CopyFrom(const AddChatRoomMemberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AddChatRoomMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddChatRoomMemberResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->memberlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void AddChatRoomMemberResponse::Swap(AddChatRoomMemberResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddChatRoomMemberResponse::InternalSwap(AddChatRoomMemberResponse* other) {
  memberlist_.InternalSwap(&other->memberlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(membercount_, other->membercount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddChatRoomMemberResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddChatRoomMemberResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool AddChatRoomMemberResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddChatRoomMemberResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void AddChatRoomMemberResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddChatRoomMemberResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& AddChatRoomMemberResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomMemberResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* AddChatRoomMemberResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomMemberResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* AddChatRoomMemberResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.AddChatRoomMemberResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void AddChatRoomMemberResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddChatRoomMemberResponse.BaseResponse)
}

// required uint32 MemberCount = 2;
bool AddChatRoomMemberResponse::has_membercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddChatRoomMemberResponse::set_has_membercount() {
  _has_bits_[0] |= 0x00000002u;
}
void AddChatRoomMemberResponse::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddChatRoomMemberResponse::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
::google::protobuf::uint32 AddChatRoomMemberResponse::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomMemberResponse.MemberCount)
  return membercount_;
}
void AddChatRoomMemberResponse::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddChatRoomMemberResponse.MemberCount)
}

// repeated .micromsg.MemberResp MemberList = 3;
int AddChatRoomMemberResponse::memberlist_size() const {
  return memberlist_.size();
}
void AddChatRoomMemberResponse::clear_memberlist() {
  memberlist_.Clear();
}
const ::micromsg::MemberResp& AddChatRoomMemberResponse::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomMemberResponse.MemberList)
  return memberlist_.Get(index);
}
::micromsg::MemberResp* AddChatRoomMemberResponse::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomMemberResponse.MemberList)
  return memberlist_.Mutable(index);
}
::micromsg::MemberResp* AddChatRoomMemberResponse::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.AddChatRoomMemberResponse.MemberList)
  return memberlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >*
AddChatRoomMemberResponse::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.AddChatRoomMemberResponse.MemberList)
  return &memberlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >&
AddChatRoomMemberResponse::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.AddChatRoomMemberResponse.MemberList)
  return memberlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelChatRoomMemberRequest::kBaseRequestFieldNumber;
const int DelChatRoomMemberRequest::kMemberCountFieldNumber;
const int DelChatRoomMemberRequest::kMemberListFieldNumber;
const int DelChatRoomMemberRequest::kChatRoomNameFieldNumber;
const int DelChatRoomMemberRequest::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelChatRoomMemberRequest::DelChatRoomMemberRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DelChatRoomMemberRequest)
}
DelChatRoomMemberRequest::DelChatRoomMemberRequest(const DelChatRoomMemberRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      memberlist_(from.memberlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomname()) {
    chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&membercount_, &from.membercount_,
    reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&membercount_) + sizeof(scene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.DelChatRoomMemberRequest)
}

void DelChatRoomMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

DelChatRoomMemberRequest::~DelChatRoomMemberRequest() {
  // @@protoc_insertion_point(destructor:micromsg.DelChatRoomMemberRequest)
  SharedDtor();
}

void DelChatRoomMemberRequest::SharedDtor() {
  chatroomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void DelChatRoomMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelChatRoomMemberRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelChatRoomMemberRequest& DelChatRoomMemberRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelChatRoomMemberRequest* DelChatRoomMemberRequest::New(::google::protobuf::Arena* arena) const {
  DelChatRoomMemberRequest* n = new DelChatRoomMemberRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelChatRoomMemberRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DelChatRoomMemberRequest)
  memberlist_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_chatroomname()) {
      GOOGLE_DCHECK(!chatroomname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomname_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&membercount_, 0, reinterpret_cast<char*>(&scene_) -
      reinterpret_cast<char*>(&membercount_) + sizeof(scene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelChatRoomMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DelChatRoomMemberRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MemberCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_membercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.DelMemberReq MemberList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ChatRoomName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomname().data(), this->chatroomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.DelChatRoomMemberRequest.ChatRoomName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DelChatRoomMemberRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DelChatRoomMemberRequest)
  return false;
#undef DO_
}

void DelChatRoomMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DelChatRoomMemberRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 MemberCount = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->membercount(), output);
  }

  // repeated .micromsg.DelMemberReq MemberList = 3;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->memberlist(i), output);
  }

  // optional string ChatRoomName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DelChatRoomMemberRequest.ChatRoomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->chatroomname(), output);
  }

  // optional uint32 Scene = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DelChatRoomMemberRequest)
}

::google::protobuf::uint8* DelChatRoomMemberRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DelChatRoomMemberRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 MemberCount = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->membercount(), target);
  }

  // repeated .micromsg.DelMemberReq MemberList = 3;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->memberlist(i), deterministic, target);
  }

  // optional string ChatRoomName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DelChatRoomMemberRequest.ChatRoomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chatroomname(), target);
  }

  // optional uint32 Scene = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DelChatRoomMemberRequest)
  return target;
}

size_t DelChatRoomMemberRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.DelChatRoomMemberRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_membercount()) {
    // required uint32 MemberCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());
  }

  return total_size;
}
size_t DelChatRoomMemberRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DelChatRoomMemberRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 MemberCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.DelMemberReq MemberList = 3;
  {
    unsigned int count = this->memberlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberlist(i));
    }
  }

  // optional string ChatRoomName = 4;
  if (has_chatroomname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatroomname());
  }

  // optional uint32 Scene = 5;
  if (has_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelChatRoomMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DelChatRoomMemberRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DelChatRoomMemberRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelChatRoomMemberRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DelChatRoomMemberRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DelChatRoomMemberRequest)
    MergeFrom(*source);
  }
}

void DelChatRoomMemberRequest::MergeFrom(const DelChatRoomMemberRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DelChatRoomMemberRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memberlist_.MergeFrom(from.memberlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chatroomname();
      chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      membercount_ = from.membercount_;
    }
    if (cached_has_bits & 0x00000008u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelChatRoomMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DelChatRoomMemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelChatRoomMemberRequest::CopyFrom(const DelChatRoomMemberRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DelChatRoomMemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelChatRoomMemberRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->memberlist())) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void DelChatRoomMemberRequest::Swap(DelChatRoomMemberRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelChatRoomMemberRequest::InternalSwap(DelChatRoomMemberRequest* other) {
  memberlist_.InternalSwap(&other->memberlist_);
  chatroomname_.Swap(&other->chatroomname_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(membercount_, other->membercount_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelChatRoomMemberRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelChatRoomMemberRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool DelChatRoomMemberRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DelChatRoomMemberRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void DelChatRoomMemberRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void DelChatRoomMemberRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& DelChatRoomMemberRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.DelChatRoomMemberRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* DelChatRoomMemberRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelChatRoomMemberRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* DelChatRoomMemberRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.DelChatRoomMemberRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void DelChatRoomMemberRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelChatRoomMemberRequest.BaseRequest)
}

// required uint32 MemberCount = 2;
bool DelChatRoomMemberRequest::has_membercount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DelChatRoomMemberRequest::set_has_membercount() {
  _has_bits_[0] |= 0x00000004u;
}
void DelChatRoomMemberRequest::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000004u;
}
void DelChatRoomMemberRequest::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
::google::protobuf::uint32 DelChatRoomMemberRequest::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.DelChatRoomMemberRequest.MemberCount)
  return membercount_;
}
void DelChatRoomMemberRequest::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelChatRoomMemberRequest.MemberCount)
}

// repeated .micromsg.DelMemberReq MemberList = 3;
int DelChatRoomMemberRequest::memberlist_size() const {
  return memberlist_.size();
}
void DelChatRoomMemberRequest::clear_memberlist() {
  memberlist_.Clear();
}
const ::micromsg::DelMemberReq& DelChatRoomMemberRequest::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.DelChatRoomMemberRequest.MemberList)
  return memberlist_.Get(index);
}
::micromsg::DelMemberReq* DelChatRoomMemberRequest::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.DelChatRoomMemberRequest.MemberList)
  return memberlist_.Mutable(index);
}
::micromsg::DelMemberReq* DelChatRoomMemberRequest::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.DelChatRoomMemberRequest.MemberList)
  return memberlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberReq >*
DelChatRoomMemberRequest::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.DelChatRoomMemberRequest.MemberList)
  return &memberlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberReq >&
DelChatRoomMemberRequest::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.DelChatRoomMemberRequest.MemberList)
  return memberlist_;
}

// optional string ChatRoomName = 4;
bool DelChatRoomMemberRequest::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelChatRoomMemberRequest::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
void DelChatRoomMemberRequest::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelChatRoomMemberRequest::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
const ::std::string& DelChatRoomMemberRequest::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.DelChatRoomMemberRequest.ChatRoomName)
  return chatroomname_.GetNoArena();
}
void DelChatRoomMemberRequest::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DelChatRoomMemberRequest.ChatRoomName)
}
#if LANG_CXX11
void DelChatRoomMemberRequest::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DelChatRoomMemberRequest.ChatRoomName)
}
#endif
void DelChatRoomMemberRequest::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DelChatRoomMemberRequest.ChatRoomName)
}
void DelChatRoomMemberRequest::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DelChatRoomMemberRequest.ChatRoomName)
}
::std::string* DelChatRoomMemberRequest::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.DelChatRoomMemberRequest.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DelChatRoomMemberRequest::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.DelChatRoomMemberRequest.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DelChatRoomMemberRequest::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelChatRoomMemberRequest.ChatRoomName)
}

// optional uint32 Scene = 5;
bool DelChatRoomMemberRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DelChatRoomMemberRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000008u;
}
void DelChatRoomMemberRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000008u;
}
void DelChatRoomMemberRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 DelChatRoomMemberRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.DelChatRoomMemberRequest.Scene)
  return scene_;
}
void DelChatRoomMemberRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelChatRoomMemberRequest.Scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelChatRoomMemberResponse::kBaseResponseFieldNumber;
const int DelChatRoomMemberResponse::kMemberCountFieldNumber;
const int DelChatRoomMemberResponse::kMemberListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelChatRoomMemberResponse::DelChatRoomMemberResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DelChatRoomMemberResponse)
}
DelChatRoomMemberResponse::DelChatRoomMemberResponse(const DelChatRoomMemberResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      memberlist_(from.memberlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  membercount_ = from.membercount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.DelChatRoomMemberResponse)
}

void DelChatRoomMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&membercount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(membercount_));
}

DelChatRoomMemberResponse::~DelChatRoomMemberResponse() {
  // @@protoc_insertion_point(destructor:micromsg.DelChatRoomMemberResponse)
  SharedDtor();
}

void DelChatRoomMemberResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void DelChatRoomMemberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelChatRoomMemberResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelChatRoomMemberResponse& DelChatRoomMemberResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelChatRoomMemberResponse* DelChatRoomMemberResponse::New(::google::protobuf::Arena* arena) const {
  DelChatRoomMemberResponse* n = new DelChatRoomMemberResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelChatRoomMemberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DelChatRoomMemberResponse)
  memberlist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  membercount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelChatRoomMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DelChatRoomMemberResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MemberCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_membercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.DelMemberResp MemberList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DelChatRoomMemberResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DelChatRoomMemberResponse)
  return false;
#undef DO_
}

void DelChatRoomMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DelChatRoomMemberResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 MemberCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->membercount(), output);
  }

  // repeated .micromsg.DelMemberResp MemberList = 3;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->memberlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DelChatRoomMemberResponse)
}

::google::protobuf::uint8* DelChatRoomMemberResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DelChatRoomMemberResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 MemberCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->membercount(), target);
  }

  // repeated .micromsg.DelMemberResp MemberList = 3;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->memberlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DelChatRoomMemberResponse)
  return target;
}

size_t DelChatRoomMemberResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.DelChatRoomMemberResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_membercount()) {
    // required uint32 MemberCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());
  }

  return total_size;
}
size_t DelChatRoomMemberResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DelChatRoomMemberResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 MemberCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.DelMemberResp MemberList = 3;
  {
    unsigned int count = this->memberlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelChatRoomMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DelChatRoomMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DelChatRoomMemberResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelChatRoomMemberResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DelChatRoomMemberResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DelChatRoomMemberResponse)
    MergeFrom(*source);
  }
}

void DelChatRoomMemberResponse::MergeFrom(const DelChatRoomMemberResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DelChatRoomMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memberlist_.MergeFrom(from.memberlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      membercount_ = from.membercount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelChatRoomMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DelChatRoomMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelChatRoomMemberResponse::CopyFrom(const DelChatRoomMemberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DelChatRoomMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelChatRoomMemberResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->memberlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void DelChatRoomMemberResponse::Swap(DelChatRoomMemberResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelChatRoomMemberResponse::InternalSwap(DelChatRoomMemberResponse* other) {
  memberlist_.InternalSwap(&other->memberlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(membercount_, other->membercount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelChatRoomMemberResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelChatRoomMemberResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool DelChatRoomMemberResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelChatRoomMemberResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void DelChatRoomMemberResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelChatRoomMemberResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& DelChatRoomMemberResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.DelChatRoomMemberResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* DelChatRoomMemberResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelChatRoomMemberResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* DelChatRoomMemberResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.DelChatRoomMemberResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void DelChatRoomMemberResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelChatRoomMemberResponse.BaseResponse)
}

// required uint32 MemberCount = 2;
bool DelChatRoomMemberResponse::has_membercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DelChatRoomMemberResponse::set_has_membercount() {
  _has_bits_[0] |= 0x00000002u;
}
void DelChatRoomMemberResponse::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000002u;
}
void DelChatRoomMemberResponse::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
::google::protobuf::uint32 DelChatRoomMemberResponse::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.DelChatRoomMemberResponse.MemberCount)
  return membercount_;
}
void DelChatRoomMemberResponse::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelChatRoomMemberResponse.MemberCount)
}

// repeated .micromsg.DelMemberResp MemberList = 3;
int DelChatRoomMemberResponse::memberlist_size() const {
  return memberlist_.size();
}
void DelChatRoomMemberResponse::clear_memberlist() {
  memberlist_.Clear();
}
const ::micromsg::DelMemberResp& DelChatRoomMemberResponse::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.DelChatRoomMemberResponse.MemberList)
  return memberlist_.Get(index);
}
::micromsg::DelMemberResp* DelChatRoomMemberResponse::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.DelChatRoomMemberResponse.MemberList)
  return memberlist_.Mutable(index);
}
::micromsg::DelMemberResp* DelChatRoomMemberResponse::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.DelChatRoomMemberResponse.MemberList)
  return memberlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberResp >*
DelChatRoomMemberResponse::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.DelChatRoomMemberResponse.MemberList)
  return &memberlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberResp >&
DelChatRoomMemberResponse::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.DelChatRoomMemberResponse.MemberList)
  return memberlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CollectChatRoomReq::kBaseRequestFieldNumber;
const int CollectChatRoomReq::kGroupCardCountFieldNumber;
const int CollectChatRoomReq::kGroupCardListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CollectChatRoomReq::CollectChatRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CollectChatRoomReq)
}
CollectChatRoomReq::CollectChatRoomReq(const CollectChatRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      groupcardlist_(from.groupcardlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  groupcardcount_ = from.groupcardcount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.CollectChatRoomReq)
}

void CollectChatRoomReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&groupcardcount_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(groupcardcount_));
}

CollectChatRoomReq::~CollectChatRoomReq() {
  // @@protoc_insertion_point(destructor:micromsg.CollectChatRoomReq)
  SharedDtor();
}

void CollectChatRoomReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void CollectChatRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollectChatRoomReq::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CollectChatRoomReq& CollectChatRoomReq::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

CollectChatRoomReq* CollectChatRoomReq::New(::google::protobuf::Arena* arena) const {
  CollectChatRoomReq* n = new CollectChatRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CollectChatRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CollectChatRoomReq)
  groupcardlist_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  groupcardcount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CollectChatRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CollectChatRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 GroupCardCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_groupcardcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupcardcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.GroupCardReq GroupCardList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groupcardlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CollectChatRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CollectChatRoomReq)
  return false;
#undef DO_
}

void CollectChatRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CollectChatRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 GroupCardCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->groupcardcount(), output);
  }

  // repeated .micromsg.GroupCardReq GroupCardList = 3;
  for (unsigned int i = 0, n = this->groupcardlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->groupcardlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CollectChatRoomReq)
}

::google::protobuf::uint8* CollectChatRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CollectChatRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 GroupCardCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->groupcardcount(), target);
  }

  // repeated .micromsg.GroupCardReq GroupCardList = 3;
  for (unsigned int i = 0, n = this->groupcardlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->groupcardlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CollectChatRoomReq)
  return target;
}

size_t CollectChatRoomReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CollectChatRoomReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_groupcardcount()) {
    // required uint32 GroupCardCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->groupcardcount());
  }

  return total_size;
}
size_t CollectChatRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CollectChatRoomReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 GroupCardCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->groupcardcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.GroupCardReq GroupCardList = 3;
  {
    unsigned int count = this->groupcardlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groupcardlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectChatRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CollectChatRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectChatRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CollectChatRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CollectChatRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CollectChatRoomReq)
    MergeFrom(*source);
  }
}

void CollectChatRoomReq::MergeFrom(const CollectChatRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CollectChatRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groupcardlist_.MergeFrom(from.groupcardlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      groupcardcount_ = from.groupcardcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CollectChatRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CollectChatRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectChatRoomReq::CopyFrom(const CollectChatRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CollectChatRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectChatRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void CollectChatRoomReq::Swap(CollectChatRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CollectChatRoomReq::InternalSwap(CollectChatRoomReq* other) {
  groupcardlist_.InternalSwap(&other->groupcardlist_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(groupcardcount_, other->groupcardcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CollectChatRoomReq::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CollectChatRoomReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool CollectChatRoomReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CollectChatRoomReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void CollectChatRoomReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void CollectChatRoomReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& CollectChatRoomReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.CollectChatRoomReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* CollectChatRoomReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CollectChatRoomReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* CollectChatRoomReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.CollectChatRoomReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void CollectChatRoomReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CollectChatRoomReq.BaseRequest)
}

// required uint32 GroupCardCount = 2;
bool CollectChatRoomReq::has_groupcardcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CollectChatRoomReq::set_has_groupcardcount() {
  _has_bits_[0] |= 0x00000002u;
}
void CollectChatRoomReq::clear_has_groupcardcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void CollectChatRoomReq::clear_groupcardcount() {
  groupcardcount_ = 0u;
  clear_has_groupcardcount();
}
::google::protobuf::uint32 CollectChatRoomReq::groupcardcount() const {
  // @@protoc_insertion_point(field_get:micromsg.CollectChatRoomReq.GroupCardCount)
  return groupcardcount_;
}
void CollectChatRoomReq::set_groupcardcount(::google::protobuf::uint32 value) {
  set_has_groupcardcount();
  groupcardcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CollectChatRoomReq.GroupCardCount)
}

// repeated .micromsg.GroupCardReq GroupCardList = 3;
int CollectChatRoomReq::groupcardlist_size() const {
  return groupcardlist_.size();
}
void CollectChatRoomReq::clear_groupcardlist() {
  groupcardlist_.Clear();
}
const ::micromsg::GroupCardReq& CollectChatRoomReq::groupcardlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.CollectChatRoomReq.GroupCardList)
  return groupcardlist_.Get(index);
}
::micromsg::GroupCardReq* CollectChatRoomReq::mutable_groupcardlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.CollectChatRoomReq.GroupCardList)
  return groupcardlist_.Mutable(index);
}
::micromsg::GroupCardReq* CollectChatRoomReq::add_groupcardlist() {
  // @@protoc_insertion_point(field_add:micromsg.CollectChatRoomReq.GroupCardList)
  return groupcardlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::GroupCardReq >*
CollectChatRoomReq::mutable_groupcardlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.CollectChatRoomReq.GroupCardList)
  return &groupcardlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::GroupCardReq >&
CollectChatRoomReq::groupcardlist() const {
  // @@protoc_insertion_point(field_list:micromsg.CollectChatRoomReq.GroupCardList)
  return groupcardlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CollectChatRoomResp::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CollectChatRoomResp::CollectChatRoomResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CollectChatRoomResp)
}
CollectChatRoomResp::CollectChatRoomResp(const CollectChatRoomResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.CollectChatRoomResp)
}

void CollectChatRoomResp::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

CollectChatRoomResp::~CollectChatRoomResp() {
  // @@protoc_insertion_point(destructor:micromsg.CollectChatRoomResp)
  SharedDtor();
}

void CollectChatRoomResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void CollectChatRoomResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollectChatRoomResp::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CollectChatRoomResp& CollectChatRoomResp::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

CollectChatRoomResp* CollectChatRoomResp::New(::google::protobuf::Arena* arena) const {
  CollectChatRoomResp* n = new CollectChatRoomResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CollectChatRoomResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CollectChatRoomResp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CollectChatRoomResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CollectChatRoomResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CollectChatRoomResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CollectChatRoomResp)
  return false;
#undef DO_
}

void CollectChatRoomResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CollectChatRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CollectChatRoomResp)
}

::google::protobuf::uint8* CollectChatRoomResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CollectChatRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CollectChatRoomResp)
  return target;
}

size_t CollectChatRoomResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CollectChatRoomResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectChatRoomResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CollectChatRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectChatRoomResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CollectChatRoomResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CollectChatRoomResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CollectChatRoomResp)
    MergeFrom(*source);
  }
}

void CollectChatRoomResp::MergeFrom(const CollectChatRoomResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CollectChatRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void CollectChatRoomResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CollectChatRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectChatRoomResp::CopyFrom(const CollectChatRoomResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CollectChatRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectChatRoomResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void CollectChatRoomResp::Swap(CollectChatRoomResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CollectChatRoomResp::InternalSwap(CollectChatRoomResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CollectChatRoomResp::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CollectChatRoomResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool CollectChatRoomResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CollectChatRoomResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void CollectChatRoomResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void CollectChatRoomResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& CollectChatRoomResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.CollectChatRoomResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* CollectChatRoomResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CollectChatRoomResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* CollectChatRoomResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.CollectChatRoomResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void CollectChatRoomResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CollectChatRoomResp.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetHeadImgRequest::kBaseRequestFieldNumber;
const int BatchGetHeadImgRequest::kCountFieldNumber;
const int BatchGetHeadImgRequest::kUserNameListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetHeadImgRequest::BatchGetHeadImgRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchGetHeadImgRequest)
}
BatchGetHeadImgRequest::BatchGetHeadImgRequest(const BatchGetHeadImgRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      usernamelist_(from.usernamelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchGetHeadImgRequest)
}

void BatchGetHeadImgRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(count_));
}

BatchGetHeadImgRequest::~BatchGetHeadImgRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BatchGetHeadImgRequest)
  SharedDtor();
}

void BatchGetHeadImgRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void BatchGetHeadImgRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetHeadImgRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchGetHeadImgRequest& BatchGetHeadImgRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchGetHeadImgRequest* BatchGetHeadImgRequest::New(::google::protobuf::Arena* arena) const {
  BatchGetHeadImgRequest* n = new BatchGetHeadImgRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchGetHeadImgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchGetHeadImgRequest)
  usernamelist_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchGetHeadImgRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchGetHeadImgRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t UserNameList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usernamelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchGetHeadImgRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchGetHeadImgRequest)
  return false;
#undef DO_
}

void BatchGetHeadImgRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchGetHeadImgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .micromsg.SKBuiltinString_t UserNameList = 3;
  for (unsigned int i = 0, n = this->usernamelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->usernamelist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchGetHeadImgRequest)
}

::google::protobuf::uint8* BatchGetHeadImgRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchGetHeadImgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.SKBuiltinString_t UserNameList = 3;
  for (unsigned int i = 0, n = this->usernamelist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->usernamelist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchGetHeadImgRequest)
  return target;
}

size_t BatchGetHeadImgRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BatchGetHeadImgRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t BatchGetHeadImgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchGetHeadImgRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SKBuiltinString_t UserNameList = 3;
  {
    unsigned int count = this->usernamelist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usernamelist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetHeadImgRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchGetHeadImgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchGetHeadImgRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchGetHeadImgRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchGetHeadImgRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchGetHeadImgRequest)
    MergeFrom(*source);
  }
}

void BatchGetHeadImgRequest::MergeFrom(const BatchGetHeadImgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchGetHeadImgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  usernamelist_.MergeFrom(from.usernamelist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchGetHeadImgRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchGetHeadImgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetHeadImgRequest::CopyFrom(const BatchGetHeadImgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchGetHeadImgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetHeadImgRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void BatchGetHeadImgRequest::Swap(BatchGetHeadImgRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetHeadImgRequest::InternalSwap(BatchGetHeadImgRequest* other) {
  usernamelist_.InternalSwap(&other->usernamelist_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchGetHeadImgRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchGetHeadImgRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BatchGetHeadImgRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchGetHeadImgRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchGetHeadImgRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchGetHeadImgRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BatchGetHeadImgRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetHeadImgRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BatchGetHeadImgRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetHeadImgRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BatchGetHeadImgRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BatchGetHeadImgRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BatchGetHeadImgRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchGetHeadImgRequest.BaseRequest)
}

// required uint32 Count = 2;
bool BatchGetHeadImgRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchGetHeadImgRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchGetHeadImgRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchGetHeadImgRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 BatchGetHeadImgRequest::count() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetHeadImgRequest.Count)
  return count_;
}
void BatchGetHeadImgRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchGetHeadImgRequest.Count)
}

// repeated .micromsg.SKBuiltinString_t UserNameList = 3;
int BatchGetHeadImgRequest::usernamelist_size() const {
  return usernamelist_.size();
}
void BatchGetHeadImgRequest::clear_usernamelist() {
  usernamelist_.Clear();
}
const ::micromsg::SKBuiltinString_t& BatchGetHeadImgRequest::usernamelist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetHeadImgRequest.UserNameList)
  return usernamelist_.Get(index);
}
::micromsg::SKBuiltinString_t* BatchGetHeadImgRequest::mutable_usernamelist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetHeadImgRequest.UserNameList)
  return usernamelist_.Mutable(index);
}
::micromsg::SKBuiltinString_t* BatchGetHeadImgRequest::add_usernamelist() {
  // @@protoc_insertion_point(field_add:micromsg.BatchGetHeadImgRequest.UserNameList)
  return usernamelist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
BatchGetHeadImgRequest::mutable_usernamelist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchGetHeadImgRequest.UserNameList)
  return &usernamelist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
BatchGetHeadImgRequest::usernamelist() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchGetHeadImgRequest.UserNameList)
  return usernamelist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImgPair::kImgBufFieldNumber;
const int ImgPair::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImgPair::ImgPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ImgPair)
}
ImgPair::ImgPair(const ImgPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_imgbuf()) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.imgbuf_);
  } else {
    imgbuf_ = NULL;
  }
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.ImgPair)
}

void ImgPair::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&imgbuf_, 0, reinterpret_cast<char*>(&username_) -
    reinterpret_cast<char*>(&imgbuf_) + sizeof(username_));
}

ImgPair::~ImgPair() {
  // @@protoc_insertion_point(destructor:micromsg.ImgPair)
  SharedDtor();
}

void ImgPair::SharedDtor() {
  if (this != internal_default_instance()) {
    delete imgbuf_;
  }
  if (this != internal_default_instance()) {
    delete username_;
  }
}

void ImgPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImgPair::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImgPair& ImgPair::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImgPair* ImgPair::New(::google::protobuf::Arena* arena) const {
  ImgPair* n = new ImgPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImgPair::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ImgPair)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_imgbuf()) {
      GOOGLE_DCHECK(imgbuf_ != NULL);
      imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(username_ != NULL);
      username_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImgPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ImgPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinBuffer_t ImgBuf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t Username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ImgPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ImgPair)
  return false;
#undef DO_
}

void ImgPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ImgPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->imgbuf_, output);
  }

  // required .micromsg.SKBuiltinString_t Username = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->username_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ImgPair)
}

::google::protobuf::uint8* ImgPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ImgPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->imgbuf_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t Username = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->username_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ImgPair)
  return target;
}

size_t ImgPair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ImgPair)
  size_t total_size = 0;

  if (has_imgbuf()) {
    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);
  }

  if (has_username()) {
    // required .micromsg.SKBuiltinString_t Username = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }

  return total_size;
}
size_t ImgPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ImgPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);

    // required .micromsg.SKBuiltinString_t Username = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImgPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ImgPair)
  GOOGLE_DCHECK_NE(&from, this);
  const ImgPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImgPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ImgPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ImgPair)
    MergeFrom(*source);
  }
}

void ImgPair::MergeFrom(const ImgPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ImgPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_imgbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.imgbuf());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
    }
  }
}

void ImgPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ImgPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImgPair::CopyFrom(const ImgPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ImgPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImgPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_imgbuf()) {
    if (!this->imgbuf_->IsInitialized()) return false;
  }
  return true;
}

void ImgPair::Swap(ImgPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImgPair::InternalSwap(ImgPair* other) {
  std::swap(imgbuf_, other->imgbuf_);
  std::swap(username_, other->username_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImgPair::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImgPair

// required .micromsg.SKBuiltinBuffer_t ImgBuf = 1;
bool ImgPair::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImgPair::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000001u;
}
void ImgPair::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImgPair::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_imgbuf();
}
const ::micromsg::SKBuiltinBuffer_t& ImgPair::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.ImgPair.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* ImgPair::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ImgPair.ImgBuf)
  return imgbuf_;
}
::micromsg::SKBuiltinBuffer_t* ImgPair::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.ImgPair.ImgBuf)
  clear_has_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
void ImgPair::set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ImgPair.ImgBuf)
}

// required .micromsg.SKBuiltinString_t Username = 2;
bool ImgPair::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImgPair::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
void ImgPair::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImgPair::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& ImgPair::username() const {
  // @@protoc_insertion_point(field_get:micromsg.ImgPair.Username)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ImgPair::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ImgPair.Username)
  return username_;
}
::micromsg::SKBuiltinString_t* ImgPair::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.ImgPair.Username)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void ImgPair::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ImgPair.Username)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetHeadImgResponse::kBaseResponseFieldNumber;
const int BatchGetHeadImgResponse::kCountFieldNumber;
const int BatchGetHeadImgResponse::kImgPairListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetHeadImgResponse::BatchGetHeadImgResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchGetHeadImgResponse)
}
BatchGetHeadImgResponse::BatchGetHeadImgResponse(const BatchGetHeadImgResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      imgpairlist_(from.imgpairlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchGetHeadImgResponse)
}

void BatchGetHeadImgResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(count_));
}

BatchGetHeadImgResponse::~BatchGetHeadImgResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BatchGetHeadImgResponse)
  SharedDtor();
}

void BatchGetHeadImgResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BatchGetHeadImgResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetHeadImgResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchGetHeadImgResponse& BatchGetHeadImgResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchGetHeadImgResponse* BatchGetHeadImgResponse::New(::google::protobuf::Arena* arena) const {
  BatchGetHeadImgResponse* n = new BatchGetHeadImgResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchGetHeadImgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchGetHeadImgResponse)
  imgpairlist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchGetHeadImgResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchGetHeadImgResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.ImgPair ImgPairList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_imgpairlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchGetHeadImgResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchGetHeadImgResponse)
  return false;
#undef DO_
}

void BatchGetHeadImgResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchGetHeadImgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .micromsg.ImgPair ImgPairList = 3;
  for (unsigned int i = 0, n = this->imgpairlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->imgpairlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchGetHeadImgResponse)
}

::google::protobuf::uint8* BatchGetHeadImgResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchGetHeadImgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.ImgPair ImgPairList = 3;
  for (unsigned int i = 0, n = this->imgpairlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->imgpairlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchGetHeadImgResponse)
  return target;
}

size_t BatchGetHeadImgResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BatchGetHeadImgResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t BatchGetHeadImgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchGetHeadImgResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.ImgPair ImgPairList = 3;
  {
    unsigned int count = this->imgpairlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imgpairlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetHeadImgResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchGetHeadImgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchGetHeadImgResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchGetHeadImgResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchGetHeadImgResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchGetHeadImgResponse)
    MergeFrom(*source);
  }
}

void BatchGetHeadImgResponse::MergeFrom(const BatchGetHeadImgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchGetHeadImgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  imgpairlist_.MergeFrom(from.imgpairlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchGetHeadImgResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchGetHeadImgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetHeadImgResponse::CopyFrom(const BatchGetHeadImgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchGetHeadImgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetHeadImgResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->imgpairlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BatchGetHeadImgResponse::Swap(BatchGetHeadImgResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetHeadImgResponse::InternalSwap(BatchGetHeadImgResponse* other) {
  imgpairlist_.InternalSwap(&other->imgpairlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchGetHeadImgResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchGetHeadImgResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BatchGetHeadImgResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchGetHeadImgResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchGetHeadImgResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchGetHeadImgResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BatchGetHeadImgResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetHeadImgResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BatchGetHeadImgResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetHeadImgResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BatchGetHeadImgResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BatchGetHeadImgResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BatchGetHeadImgResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchGetHeadImgResponse.BaseResponse)
}

// required uint32 Count = 2;
bool BatchGetHeadImgResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchGetHeadImgResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchGetHeadImgResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchGetHeadImgResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 BatchGetHeadImgResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetHeadImgResponse.Count)
  return count_;
}
void BatchGetHeadImgResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchGetHeadImgResponse.Count)
}

// repeated .micromsg.ImgPair ImgPairList = 3;
int BatchGetHeadImgResponse::imgpairlist_size() const {
  return imgpairlist_.size();
}
void BatchGetHeadImgResponse::clear_imgpairlist() {
  imgpairlist_.Clear();
}
const ::micromsg::ImgPair& BatchGetHeadImgResponse::imgpairlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetHeadImgResponse.ImgPairList)
  return imgpairlist_.Get(index);
}
::micromsg::ImgPair* BatchGetHeadImgResponse::mutable_imgpairlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetHeadImgResponse.ImgPairList)
  return imgpairlist_.Mutable(index);
}
::micromsg::ImgPair* BatchGetHeadImgResponse::add_imgpairlist() {
  // @@protoc_insertion_point(field_add:micromsg.BatchGetHeadImgResponse.ImgPairList)
  return imgpairlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::ImgPair >*
BatchGetHeadImgResponse::mutable_imgpairlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchGetHeadImgResponse.ImgPairList)
  return &imgpairlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::ImgPair >&
BatchGetHeadImgResponse::imgpairlist() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchGetHeadImgResponse.ImgPairList)
  return imgpairlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchFriendRequest::kBaseRequestFieldNumber;
const int SearchFriendRequest::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchFriendRequest::SearchFriendRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SearchFriendRequest)
}
SearchFriendRequest::SearchFriendRequest(const SearchFriendRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.SearchFriendRequest)
}

void SearchFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

SearchFriendRequest::~SearchFriendRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SearchFriendRequest)
  SharedDtor();
}

void SearchFriendRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void SearchFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchFriendRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchFriendRequest& SearchFriendRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchFriendRequest* SearchFriendRequest::New(::google::protobuf::Arena* arena) const {
  SearchFriendRequest* n = new SearchFriendRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchFriendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SearchFriendRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SearchFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SearchFriendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SearchFriendRequest.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SearchFriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SearchFriendRequest)
  return false;
#undef DO_
}

void SearchFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SearchFriendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchFriendRequest.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SearchFriendRequest)
}

::google::protobuf::uint8* SearchFriendRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SearchFriendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SearchFriendRequest.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SearchFriendRequest)
  return target;
}

size_t SearchFriendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SearchFriendRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string UserName = 2;
  if (has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchFriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SearchFriendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchFriendRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchFriendRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SearchFriendRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SearchFriendRequest)
    MergeFrom(*source);
  }
}

void SearchFriendRequest::MergeFrom(const SearchFriendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SearchFriendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void SearchFriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SearchFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchFriendRequest::CopyFrom(const SearchFriendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SearchFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchFriendRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void SearchFriendRequest::Swap(SearchFriendRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchFriendRequest::InternalSwap(SearchFriendRequest* other) {
  username_.Swap(&other->username_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchFriendRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchFriendRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SearchFriendRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SearchFriendRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void SearchFriendRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void SearchFriendRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SearchFriendRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchFriendRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SearchFriendRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchFriendRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SearchFriendRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SearchFriendRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SearchFriendRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchFriendRequest.BaseRequest)
}

// optional string UserName = 2;
bool SearchFriendRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SearchFriendRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void SearchFriendRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void SearchFriendRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& SearchFriendRequest::username() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchFriendRequest.UserName)
  return username_.GetNoArena();
}
void SearchFriendRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchFriendRequest.UserName)
}
#if LANG_CXX11
void SearchFriendRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchFriendRequest.UserName)
}
#endif
void SearchFriendRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchFriendRequest.UserName)
}
void SearchFriendRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchFriendRequest.UserName)
}
::std::string* SearchFriendRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchFriendRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchFriendRequest::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.SearchFriendRequest.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchFriendRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchFriendRequest.UserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendInfo::kDisplayUserNameFieldNumber;
const int FriendInfo::kDisplayNickNameFieldNumber;
const int FriendInfo::kDisplayRemarkFieldNumber;
const int FriendInfo::kWXUserNameFieldNumber;
const int FriendInfo::kWXNickNameFieldNumber;
const int FriendInfo::kWXRemarkFieldNumber;
const int FriendInfo::kTypeFieldNumber;
const int FriendInfo::kStatusFieldNumber;
const int FriendInfo::kSourceFieldNumber;
const int FriendInfo::kMatchFieldFieldNumber;
const int FriendInfo::kAliasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendInfo::FriendInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.FriendInfo)
}
FriendInfo::FriendInfo(const FriendInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  displayusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_displayusername()) {
    displayusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.displayusername_);
  }
  displaynickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_displaynickname()) {
    displaynickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.displaynickname_);
  }
  displayremark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_displayremark()) {
    displayremark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.displayremark_);
  }
  wxusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wxusername()) {
    wxusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxusername_);
  }
  wxnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wxnickname()) {
    wxnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxnickname_);
  }
  wxremark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wxremark()) {
    wxremark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxremark_);
  }
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_alias()) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&matchfield_) -
    reinterpret_cast<char*>(&type_) + sizeof(matchfield_));
  // @@protoc_insertion_point(copy_constructor:micromsg.FriendInfo)
}

void FriendInfo::SharedCtor() {
  _cached_size_ = 0;
  displayusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  displaynickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  displayremark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wxusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wxnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wxremark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&matchfield_) -
    reinterpret_cast<char*>(&type_) + sizeof(matchfield_));
}

FriendInfo::~FriendInfo() {
  // @@protoc_insertion_point(destructor:micromsg.FriendInfo)
  SharedDtor();
}

void FriendInfo::SharedDtor() {
  displayusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  displaynickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  displayremark_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wxusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wxnickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wxremark_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendInfo::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendInfo& FriendInfo::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendInfo* FriendInfo::New(::google::protobuf::Arena* arena) const {
  FriendInfo* n = new FriendInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.FriendInfo)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_displayusername()) {
      GOOGLE_DCHECK(!displayusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*displayusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_displaynickname()) {
      GOOGLE_DCHECK(!displaynickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*displaynickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_displayremark()) {
      GOOGLE_DCHECK(!displayremark_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*displayremark_.UnsafeRawStringPointer())->clear();
    }
    if (has_wxusername()) {
      GOOGLE_DCHECK(!wxusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*wxusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_wxnickname()) {
      GOOGLE_DCHECK(!wxnickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*wxnickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_wxremark()) {
      GOOGLE_DCHECK(!wxremark_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*wxremark_.UnsafeRawStringPointer())->clear();
    }
    if (has_source()) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (has_alias()) {
      GOOGLE_DCHECK(!alias_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*alias_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&matchfield_) -
      reinterpret_cast<char*>(&type_) + sizeof(matchfield_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.FriendInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DisplayUserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displayusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->displayusername().data(), this->displayusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FriendInfo.DisplayUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DisplayNickName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displaynickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->displaynickname().data(), this->displaynickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FriendInfo.DisplayNickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DisplayRemark = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displayremark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->displayremark().data(), this->displayremark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FriendInfo.DisplayRemark");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string WXUserName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wxusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wxusername().data(), this->wxusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FriendInfo.WXUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string WXNickName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wxnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wxnickname().data(), this->wxnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FriendInfo.WXNickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string WXRemark = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wxremark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wxremark().data(), this->wxremark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FriendInfo.WXRemark");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Source = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FriendInfo.Source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 MatchField = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_matchfield();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchfield_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Alias = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FriendInfo.Alias");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.FriendInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.FriendInfo)
  return false;
#undef DO_
}

void FriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.FriendInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string DisplayUserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displayusername().data(), this->displayusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FriendInfo.DisplayUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->displayusername(), output);
  }

  // optional string DisplayNickName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displaynickname().data(), this->displaynickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FriendInfo.DisplayNickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->displaynickname(), output);
  }

  // optional string DisplayRemark = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displayremark().data(), this->displayremark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FriendInfo.DisplayRemark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->displayremark(), output);
  }

  // optional string WXUserName = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxusername().data(), this->wxusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FriendInfo.WXUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->wxusername(), output);
  }

  // optional string WXNickName = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxnickname().data(), this->wxnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FriendInfo.WXNickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->wxnickname(), output);
  }

  // optional string WXRemark = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxremark().data(), this->wxremark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FriendInfo.WXRemark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->wxremark(), output);
  }

  // required uint32 Type = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->type(), output);
  }

  // required uint32 Status = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->status(), output);
  }

  // optional string Source = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FriendInfo.Source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->source(), output);
  }

  // optional uint32 MatchField = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->matchfield(), output);
  }

  // optional string Alias = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FriendInfo.Alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->alias(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.FriendInfo)
}

::google::protobuf::uint8* FriendInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.FriendInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string DisplayUserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displayusername().data(), this->displayusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FriendInfo.DisplayUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->displayusername(), target);
  }

  // optional string DisplayNickName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displaynickname().data(), this->displaynickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FriendInfo.DisplayNickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->displaynickname(), target);
  }

  // optional string DisplayRemark = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displayremark().data(), this->displayremark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FriendInfo.DisplayRemark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->displayremark(), target);
  }

  // optional string WXUserName = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxusername().data(), this->wxusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FriendInfo.WXUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->wxusername(), target);
  }

  // optional string WXNickName = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxnickname().data(), this->wxnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FriendInfo.WXNickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->wxnickname(), target);
  }

  // optional string WXRemark = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxremark().data(), this->wxremark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FriendInfo.WXRemark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->wxremark(), target);
  }

  // required uint32 Type = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->type(), target);
  }

  // required uint32 Status = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->status(), target);
  }

  // optional string Source = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FriendInfo.Source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->source(), target);
  }

  // optional uint32 MatchField = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->matchfield(), target);
  }

  // optional string Alias = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FriendInfo.Alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->alias(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.FriendInfo)
  return target;
}

size_t FriendInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.FriendInfo)
  size_t total_size = 0;

  if (has_type()) {
    // required uint32 Type = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_status()) {
    // required uint32 Status = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  return total_size;
}
size_t FriendInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.FriendInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000300) ^ 0x00000300) == 0) {  // All required fields are present.
    // required uint32 Type = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 Status = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string DisplayUserName = 1;
    if (has_displayusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displayusername());
    }

    // optional string DisplayNickName = 2;
    if (has_displaynickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displaynickname());
    }

    // optional string DisplayRemark = 3;
    if (has_displayremark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displayremark());
    }

    // optional string WXUserName = 4;
    if (has_wxusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wxusername());
    }

    // optional string WXNickName = 5;
    if (has_wxnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wxnickname());
    }

    // optional string WXRemark = 6;
    if (has_wxremark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wxremark());
    }

    // optional string Source = 9;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string Alias = 11;
    if (has_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

  }
  // optional uint32 MatchField = 10;
  if (has_matchfield()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchfield());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.FriendInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.FriendInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.FriendInfo)
    MergeFrom(*source);
  }
}

void FriendInfo::MergeFrom(const FriendInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.FriendInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_displayusername();
      displayusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.displayusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_displaynickname();
      displaynickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.displaynickname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_displayremark();
      displayremark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.displayremark_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_wxusername();
      wxusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxusername_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_wxnickname();
      wxnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxnickname_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_wxremark();
      wxremark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxremark_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_alias();
      alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000200u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000400u) {
      matchfield_ = from.matchfield_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.FriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendInfo::CopyFrom(const FriendInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.FriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000300) != 0x00000300) return false;
  return true;
}

void FriendInfo::Swap(FriendInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendInfo::InternalSwap(FriendInfo* other) {
  displayusername_.Swap(&other->displayusername_);
  displaynickname_.Swap(&other->displaynickname_);
  displayremark_.Swap(&other->displayremark_);
  wxusername_.Swap(&other->wxusername_);
  wxnickname_.Swap(&other->wxnickname_);
  wxremark_.Swap(&other->wxremark_);
  source_.Swap(&other->source_);
  alias_.Swap(&other->alias_);
  std::swap(type_, other->type_);
  std::swap(status_, other->status_);
  std::swap(matchfield_, other->matchfield_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendInfo::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendInfo

// optional string DisplayUserName = 1;
bool FriendInfo::has_displayusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FriendInfo::set_has_displayusername() {
  _has_bits_[0] |= 0x00000001u;
}
void FriendInfo::clear_has_displayusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void FriendInfo::clear_displayusername() {
  displayusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_displayusername();
}
const ::std::string& FriendInfo::displayusername() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.DisplayUserName)
  return displayusername_.GetNoArena();
}
void FriendInfo::set_displayusername(const ::std::string& value) {
  set_has_displayusername();
  displayusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.DisplayUserName)
}
#if LANG_CXX11
void FriendInfo::set_displayusername(::std::string&& value) {
  set_has_displayusername();
  displayusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FriendInfo.DisplayUserName)
}
#endif
void FriendInfo::set_displayusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_displayusername();
  displayusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FriendInfo.DisplayUserName)
}
void FriendInfo::set_displayusername(const char* value, size_t size) {
  set_has_displayusername();
  displayusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FriendInfo.DisplayUserName)
}
::std::string* FriendInfo::mutable_displayusername() {
  set_has_displayusername();
  // @@protoc_insertion_point(field_mutable:micromsg.FriendInfo.DisplayUserName)
  return displayusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FriendInfo::release_displayusername() {
  // @@protoc_insertion_point(field_release:micromsg.FriendInfo.DisplayUserName)
  clear_has_displayusername();
  return displayusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FriendInfo::set_allocated_displayusername(::std::string* displayusername) {
  if (displayusername != NULL) {
    set_has_displayusername();
  } else {
    clear_has_displayusername();
  }
  displayusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), displayusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FriendInfo.DisplayUserName)
}

// optional string DisplayNickName = 2;
bool FriendInfo::has_displaynickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FriendInfo::set_has_displaynickname() {
  _has_bits_[0] |= 0x00000002u;
}
void FriendInfo::clear_has_displaynickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void FriendInfo::clear_displaynickname() {
  displaynickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_displaynickname();
}
const ::std::string& FriendInfo::displaynickname() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.DisplayNickName)
  return displaynickname_.GetNoArena();
}
void FriendInfo::set_displaynickname(const ::std::string& value) {
  set_has_displaynickname();
  displaynickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.DisplayNickName)
}
#if LANG_CXX11
void FriendInfo::set_displaynickname(::std::string&& value) {
  set_has_displaynickname();
  displaynickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FriendInfo.DisplayNickName)
}
#endif
void FriendInfo::set_displaynickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_displaynickname();
  displaynickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FriendInfo.DisplayNickName)
}
void FriendInfo::set_displaynickname(const char* value, size_t size) {
  set_has_displaynickname();
  displaynickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FriendInfo.DisplayNickName)
}
::std::string* FriendInfo::mutable_displaynickname() {
  set_has_displaynickname();
  // @@protoc_insertion_point(field_mutable:micromsg.FriendInfo.DisplayNickName)
  return displaynickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FriendInfo::release_displaynickname() {
  // @@protoc_insertion_point(field_release:micromsg.FriendInfo.DisplayNickName)
  clear_has_displaynickname();
  return displaynickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FriendInfo::set_allocated_displaynickname(::std::string* displaynickname) {
  if (displaynickname != NULL) {
    set_has_displaynickname();
  } else {
    clear_has_displaynickname();
  }
  displaynickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), displaynickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FriendInfo.DisplayNickName)
}

// optional string DisplayRemark = 3;
bool FriendInfo::has_displayremark() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FriendInfo::set_has_displayremark() {
  _has_bits_[0] |= 0x00000004u;
}
void FriendInfo::clear_has_displayremark() {
  _has_bits_[0] &= ~0x00000004u;
}
void FriendInfo::clear_displayremark() {
  displayremark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_displayremark();
}
const ::std::string& FriendInfo::displayremark() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.DisplayRemark)
  return displayremark_.GetNoArena();
}
void FriendInfo::set_displayremark(const ::std::string& value) {
  set_has_displayremark();
  displayremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.DisplayRemark)
}
#if LANG_CXX11
void FriendInfo::set_displayremark(::std::string&& value) {
  set_has_displayremark();
  displayremark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FriendInfo.DisplayRemark)
}
#endif
void FriendInfo::set_displayremark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_displayremark();
  displayremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FriendInfo.DisplayRemark)
}
void FriendInfo::set_displayremark(const char* value, size_t size) {
  set_has_displayremark();
  displayremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FriendInfo.DisplayRemark)
}
::std::string* FriendInfo::mutable_displayremark() {
  set_has_displayremark();
  // @@protoc_insertion_point(field_mutable:micromsg.FriendInfo.DisplayRemark)
  return displayremark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FriendInfo::release_displayremark() {
  // @@protoc_insertion_point(field_release:micromsg.FriendInfo.DisplayRemark)
  clear_has_displayremark();
  return displayremark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FriendInfo::set_allocated_displayremark(::std::string* displayremark) {
  if (displayremark != NULL) {
    set_has_displayremark();
  } else {
    clear_has_displayremark();
  }
  displayremark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), displayremark);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FriendInfo.DisplayRemark)
}

// optional string WXUserName = 4;
bool FriendInfo::has_wxusername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FriendInfo::set_has_wxusername() {
  _has_bits_[0] |= 0x00000008u;
}
void FriendInfo::clear_has_wxusername() {
  _has_bits_[0] &= ~0x00000008u;
}
void FriendInfo::clear_wxusername() {
  wxusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wxusername();
}
const ::std::string& FriendInfo::wxusername() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.WXUserName)
  return wxusername_.GetNoArena();
}
void FriendInfo::set_wxusername(const ::std::string& value) {
  set_has_wxusername();
  wxusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.WXUserName)
}
#if LANG_CXX11
void FriendInfo::set_wxusername(::std::string&& value) {
  set_has_wxusername();
  wxusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FriendInfo.WXUserName)
}
#endif
void FriendInfo::set_wxusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wxusername();
  wxusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FriendInfo.WXUserName)
}
void FriendInfo::set_wxusername(const char* value, size_t size) {
  set_has_wxusername();
  wxusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FriendInfo.WXUserName)
}
::std::string* FriendInfo::mutable_wxusername() {
  set_has_wxusername();
  // @@protoc_insertion_point(field_mutable:micromsg.FriendInfo.WXUserName)
  return wxusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FriendInfo::release_wxusername() {
  // @@protoc_insertion_point(field_release:micromsg.FriendInfo.WXUserName)
  clear_has_wxusername();
  return wxusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FriendInfo::set_allocated_wxusername(::std::string* wxusername) {
  if (wxusername != NULL) {
    set_has_wxusername();
  } else {
    clear_has_wxusername();
  }
  wxusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wxusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FriendInfo.WXUserName)
}

// optional string WXNickName = 5;
bool FriendInfo::has_wxnickname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FriendInfo::set_has_wxnickname() {
  _has_bits_[0] |= 0x00000010u;
}
void FriendInfo::clear_has_wxnickname() {
  _has_bits_[0] &= ~0x00000010u;
}
void FriendInfo::clear_wxnickname() {
  wxnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wxnickname();
}
const ::std::string& FriendInfo::wxnickname() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.WXNickName)
  return wxnickname_.GetNoArena();
}
void FriendInfo::set_wxnickname(const ::std::string& value) {
  set_has_wxnickname();
  wxnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.WXNickName)
}
#if LANG_CXX11
void FriendInfo::set_wxnickname(::std::string&& value) {
  set_has_wxnickname();
  wxnickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FriendInfo.WXNickName)
}
#endif
void FriendInfo::set_wxnickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wxnickname();
  wxnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FriendInfo.WXNickName)
}
void FriendInfo::set_wxnickname(const char* value, size_t size) {
  set_has_wxnickname();
  wxnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FriendInfo.WXNickName)
}
::std::string* FriendInfo::mutable_wxnickname() {
  set_has_wxnickname();
  // @@protoc_insertion_point(field_mutable:micromsg.FriendInfo.WXNickName)
  return wxnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FriendInfo::release_wxnickname() {
  // @@protoc_insertion_point(field_release:micromsg.FriendInfo.WXNickName)
  clear_has_wxnickname();
  return wxnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FriendInfo::set_allocated_wxnickname(::std::string* wxnickname) {
  if (wxnickname != NULL) {
    set_has_wxnickname();
  } else {
    clear_has_wxnickname();
  }
  wxnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wxnickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FriendInfo.WXNickName)
}

// optional string WXRemark = 6;
bool FriendInfo::has_wxremark() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FriendInfo::set_has_wxremark() {
  _has_bits_[0] |= 0x00000020u;
}
void FriendInfo::clear_has_wxremark() {
  _has_bits_[0] &= ~0x00000020u;
}
void FriendInfo::clear_wxremark() {
  wxremark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wxremark();
}
const ::std::string& FriendInfo::wxremark() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.WXRemark)
  return wxremark_.GetNoArena();
}
void FriendInfo::set_wxremark(const ::std::string& value) {
  set_has_wxremark();
  wxremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.WXRemark)
}
#if LANG_CXX11
void FriendInfo::set_wxremark(::std::string&& value) {
  set_has_wxremark();
  wxremark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FriendInfo.WXRemark)
}
#endif
void FriendInfo::set_wxremark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wxremark();
  wxremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FriendInfo.WXRemark)
}
void FriendInfo::set_wxremark(const char* value, size_t size) {
  set_has_wxremark();
  wxremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FriendInfo.WXRemark)
}
::std::string* FriendInfo::mutable_wxremark() {
  set_has_wxremark();
  // @@protoc_insertion_point(field_mutable:micromsg.FriendInfo.WXRemark)
  return wxremark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FriendInfo::release_wxremark() {
  // @@protoc_insertion_point(field_release:micromsg.FriendInfo.WXRemark)
  clear_has_wxremark();
  return wxremark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FriendInfo::set_allocated_wxremark(::std::string* wxremark) {
  if (wxremark != NULL) {
    set_has_wxremark();
  } else {
    clear_has_wxremark();
  }
  wxremark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wxremark);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FriendInfo.WXRemark)
}

// required uint32 Type = 7;
bool FriendInfo::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FriendInfo::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
void FriendInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void FriendInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 FriendInfo::type() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.Type)
  return type_;
}
void FriendInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.Type)
}

// required uint32 Status = 8;
bool FriendInfo::has_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FriendInfo::set_has_status() {
  _has_bits_[0] |= 0x00000200u;
}
void FriendInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000200u;
}
void FriendInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 FriendInfo::status() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.Status)
  return status_;
}
void FriendInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.Status)
}

// optional string Source = 9;
bool FriendInfo::has_source() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FriendInfo::set_has_source() {
  _has_bits_[0] |= 0x00000040u;
}
void FriendInfo::clear_has_source() {
  _has_bits_[0] &= ~0x00000040u;
}
void FriendInfo::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& FriendInfo::source() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.Source)
  return source_.GetNoArena();
}
void FriendInfo::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.Source)
}
#if LANG_CXX11
void FriendInfo::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FriendInfo.Source)
}
#endif
void FriendInfo::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FriendInfo.Source)
}
void FriendInfo::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FriendInfo.Source)
}
::std::string* FriendInfo::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:micromsg.FriendInfo.Source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FriendInfo::release_source() {
  // @@protoc_insertion_point(field_release:micromsg.FriendInfo.Source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FriendInfo::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FriendInfo.Source)
}

// optional uint32 MatchField = 10;
bool FriendInfo::has_matchfield() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FriendInfo::set_has_matchfield() {
  _has_bits_[0] |= 0x00000400u;
}
void FriendInfo::clear_has_matchfield() {
  _has_bits_[0] &= ~0x00000400u;
}
void FriendInfo::clear_matchfield() {
  matchfield_ = 0u;
  clear_has_matchfield();
}
::google::protobuf::uint32 FriendInfo::matchfield() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.MatchField)
  return matchfield_;
}
void FriendInfo::set_matchfield(::google::protobuf::uint32 value) {
  set_has_matchfield();
  matchfield_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.MatchField)
}

// optional string Alias = 11;
bool FriendInfo::has_alias() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FriendInfo::set_has_alias() {
  _has_bits_[0] |= 0x00000080u;
}
void FriendInfo::clear_has_alias() {
  _has_bits_[0] &= ~0x00000080u;
}
void FriendInfo::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
const ::std::string& FriendInfo::alias() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.Alias)
  return alias_.GetNoArena();
}
void FriendInfo::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.Alias)
}
#if LANG_CXX11
void FriendInfo::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FriendInfo.Alias)
}
#endif
void FriendInfo::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FriendInfo.Alias)
}
void FriendInfo::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FriendInfo.Alias)
}
::std::string* FriendInfo::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:micromsg.FriendInfo.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FriendInfo::release_alias() {
  // @@protoc_insertion_point(field_release:micromsg.FriendInfo.Alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FriendInfo::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FriendInfo.Alias)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchFriendResponse::kBaseResponseFieldNumber;
const int SearchFriendResponse::kFriendCountFieldNumber;
const int SearchFriendResponse::kFriendListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchFriendResponse::SearchFriendResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SearchFriendResponse)
}
SearchFriendResponse::SearchFriendResponse(const SearchFriendResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      friendlist_(from.friendlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  friendcount_ = from.friendcount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SearchFriendResponse)
}

void SearchFriendResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&friendcount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(friendcount_));
}

SearchFriendResponse::~SearchFriendResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SearchFriendResponse)
  SharedDtor();
}

void SearchFriendResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void SearchFriendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchFriendResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchFriendResponse& SearchFriendResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchFriendResponse* SearchFriendResponse::New(::google::protobuf::Arena* arena) const {
  SearchFriendResponse* n = new SearchFriendResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchFriendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SearchFriendResponse)
  friendlist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  friendcount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SearchFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SearchFriendResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 FriendCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_friendcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.FriendInfo FriendList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SearchFriendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SearchFriendResponse)
  return false;
#undef DO_
}

void SearchFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SearchFriendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 FriendCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->friendcount(), output);
  }

  // repeated .micromsg.FriendInfo FriendList = 3;
  for (unsigned int i = 0, n = this->friendlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->friendlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SearchFriendResponse)
}

::google::protobuf::uint8* SearchFriendResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SearchFriendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 FriendCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->friendcount(), target);
  }

  // repeated .micromsg.FriendInfo FriendList = 3;
  for (unsigned int i = 0, n = this->friendlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->friendlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SearchFriendResponse)
  return target;
}

size_t SearchFriendResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SearchFriendResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_friendcount()) {
    // required uint32 FriendCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->friendcount());
  }

  return total_size;
}
size_t SearchFriendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SearchFriendResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 FriendCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->friendcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.FriendInfo FriendList = 3;
  {
    unsigned int count = this->friendlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchFriendResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SearchFriendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchFriendResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchFriendResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SearchFriendResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SearchFriendResponse)
    MergeFrom(*source);
  }
}

void SearchFriendResponse::MergeFrom(const SearchFriendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SearchFriendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friendlist_.MergeFrom(from.friendlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      friendcount_ = from.friendcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SearchFriendResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SearchFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchFriendResponse::CopyFrom(const SearchFriendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SearchFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchFriendResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->friendlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void SearchFriendResponse::Swap(SearchFriendResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchFriendResponse::InternalSwap(SearchFriendResponse* other) {
  friendlist_.InternalSwap(&other->friendlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(friendcount_, other->friendcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchFriendResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchFriendResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SearchFriendResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SearchFriendResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void SearchFriendResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void SearchFriendResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SearchFriendResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchFriendResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SearchFriendResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchFriendResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SearchFriendResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SearchFriendResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SearchFriendResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchFriendResponse.BaseResponse)
}

// required uint32 FriendCount = 2;
bool SearchFriendResponse::has_friendcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SearchFriendResponse::set_has_friendcount() {
  _has_bits_[0] |= 0x00000002u;
}
void SearchFriendResponse::clear_has_friendcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void SearchFriendResponse::clear_friendcount() {
  friendcount_ = 0u;
  clear_has_friendcount();
}
::google::protobuf::uint32 SearchFriendResponse::friendcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchFriendResponse.FriendCount)
  return friendcount_;
}
void SearchFriendResponse::set_friendcount(::google::protobuf::uint32 value) {
  set_has_friendcount();
  friendcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchFriendResponse.FriendCount)
}

// repeated .micromsg.FriendInfo FriendList = 3;
int SearchFriendResponse::friendlist_size() const {
  return friendlist_.size();
}
void SearchFriendResponse::clear_friendlist() {
  friendlist_.Clear();
}
const ::micromsg::FriendInfo& SearchFriendResponse::friendlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SearchFriendResponse.FriendList)
  return friendlist_.Get(index);
}
::micromsg::FriendInfo* SearchFriendResponse::mutable_friendlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SearchFriendResponse.FriendList)
  return friendlist_.Mutable(index);
}
::micromsg::FriendInfo* SearchFriendResponse::add_friendlist() {
  // @@protoc_insertion_point(field_add:micromsg.SearchFriendResponse.FriendList)
  return friendlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::FriendInfo >*
SearchFriendResponse::mutable_friendlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SearchFriendResponse.FriendList)
  return &friendlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::FriendInfo >&
SearchFriendResponse::friendlist() const {
  // @@protoc_insertion_point(field_list:micromsg.SearchFriendResponse.FriendList)
  return friendlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChatRoomUpgradeInfoReq::kBaseRequestFieldNumber;
const int GetChatRoomUpgradeInfoReq::kChatRoomNameFieldNumber;
const int GetChatRoomUpgradeInfoReq::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChatRoomUpgradeInfoReq::GetChatRoomUpgradeInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetChatRoomUpgradeInfoReq)
}
GetChatRoomUpgradeInfoReq::GetChatRoomUpgradeInfoReq(const GetChatRoomUpgradeInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomname()) {
    chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  scene_ = from.scene_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetChatRoomUpgradeInfoReq)
}

void GetChatRoomUpgradeInfoReq::SharedCtor() {
  _cached_size_ = 0;
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

GetChatRoomUpgradeInfoReq::~GetChatRoomUpgradeInfoReq() {
  // @@protoc_insertion_point(destructor:micromsg.GetChatRoomUpgradeInfoReq)
  SharedDtor();
}

void GetChatRoomUpgradeInfoReq::SharedDtor() {
  chatroomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetChatRoomUpgradeInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChatRoomUpgradeInfoReq::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChatRoomUpgradeInfoReq& GetChatRoomUpgradeInfoReq::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetChatRoomUpgradeInfoReq* GetChatRoomUpgradeInfoReq::New(::google::protobuf::Arena* arena) const {
  GetChatRoomUpgradeInfoReq* n = new GetChatRoomUpgradeInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetChatRoomUpgradeInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetChatRoomUpgradeInfoReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_chatroomname()) {
      GOOGLE_DCHECK(!chatroomname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomname_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  scene_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetChatRoomUpgradeInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetChatRoomUpgradeInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ChatRoomName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomname().data(), this->chatroomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetChatRoomUpgradeInfoReq.ChatRoomName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetChatRoomUpgradeInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetChatRoomUpgradeInfoReq)
  return false;
#undef DO_
}

void GetChatRoomUpgradeInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetChatRoomUpgradeInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomUpgradeInfoReq.ChatRoomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chatroomname(), output);
  }

  // optional uint32 Scene = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetChatRoomUpgradeInfoReq)
}

::google::protobuf::uint8* GetChatRoomUpgradeInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetChatRoomUpgradeInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomUpgradeInfoReq.ChatRoomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatroomname(), target);
  }

  // optional uint32 Scene = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetChatRoomUpgradeInfoReq)
  return target;
}

size_t GetChatRoomUpgradeInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetChatRoomUpgradeInfoReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string ChatRoomName = 2;
  if (has_chatroomname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatroomname());
  }

  // optional uint32 Scene = 3;
  if (has_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChatRoomUpgradeInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetChatRoomUpgradeInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatRoomUpgradeInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChatRoomUpgradeInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetChatRoomUpgradeInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetChatRoomUpgradeInfoReq)
    MergeFrom(*source);
  }
}

void GetChatRoomUpgradeInfoReq::MergeFrom(const GetChatRoomUpgradeInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetChatRoomUpgradeInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chatroomname();
      chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetChatRoomUpgradeInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetChatRoomUpgradeInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatRoomUpgradeInfoReq::CopyFrom(const GetChatRoomUpgradeInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetChatRoomUpgradeInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatRoomUpgradeInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetChatRoomUpgradeInfoReq::Swap(GetChatRoomUpgradeInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChatRoomUpgradeInfoReq::InternalSwap(GetChatRoomUpgradeInfoReq* other) {
  chatroomname_.Swap(&other->chatroomname_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetChatRoomUpgradeInfoReq::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetChatRoomUpgradeInfoReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetChatRoomUpgradeInfoReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetChatRoomUpgradeInfoReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GetChatRoomUpgradeInfoReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetChatRoomUpgradeInfoReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetChatRoomUpgradeInfoReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeInfoReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetChatRoomUpgradeInfoReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomUpgradeInfoReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetChatRoomUpgradeInfoReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomUpgradeInfoReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetChatRoomUpgradeInfoReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomUpgradeInfoReq.BaseRequest)
}

// optional string ChatRoomName = 2;
bool GetChatRoomUpgradeInfoReq::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetChatRoomUpgradeInfoReq::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
void GetChatRoomUpgradeInfoReq::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetChatRoomUpgradeInfoReq::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
const ::std::string& GetChatRoomUpgradeInfoReq::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeInfoReq.ChatRoomName)
  return chatroomname_.GetNoArena();
}
void GetChatRoomUpgradeInfoReq::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeInfoReq.ChatRoomName)
}
#if LANG_CXX11
void GetChatRoomUpgradeInfoReq::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomUpgradeInfoReq.ChatRoomName)
}
#endif
void GetChatRoomUpgradeInfoReq::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomUpgradeInfoReq.ChatRoomName)
}
void GetChatRoomUpgradeInfoReq::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomUpgradeInfoReq.ChatRoomName)
}
::std::string* GetChatRoomUpgradeInfoReq::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomUpgradeInfoReq.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetChatRoomUpgradeInfoReq::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomUpgradeInfoReq.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetChatRoomUpgradeInfoReq::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomUpgradeInfoReq.ChatRoomName)
}

// optional uint32 Scene = 3;
bool GetChatRoomUpgradeInfoReq::has_scene() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetChatRoomUpgradeInfoReq::set_has_scene() {
  _has_bits_[0] |= 0x00000004u;
}
void GetChatRoomUpgradeInfoReq::clear_has_scene() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetChatRoomUpgradeInfoReq::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 GetChatRoomUpgradeInfoReq::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeInfoReq.Scene)
  return scene_;
}
void GetChatRoomUpgradeInfoReq::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeInfoReq.Scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChatRoomUpgradeInfoResp::kBaseResponseFieldNumber;
const int GetChatRoomUpgradeInfoResp::kChatRoomUpgradeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChatRoomUpgradeInfoResp::GetChatRoomUpgradeInfoResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetChatRoomUpgradeInfoResp)
}
GetChatRoomUpgradeInfoResp::GetChatRoomUpgradeInfoResp(const GetChatRoomUpgradeInfoResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatroomupgradeinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomupgradeinfo()) {
    chatroomupgradeinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomupgradeinfo_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetChatRoomUpgradeInfoResp)
}

void GetChatRoomUpgradeInfoResp::SharedCtor() {
  _cached_size_ = 0;
  chatroomupgradeinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

GetChatRoomUpgradeInfoResp::~GetChatRoomUpgradeInfoResp() {
  // @@protoc_insertion_point(destructor:micromsg.GetChatRoomUpgradeInfoResp)
  SharedDtor();
}

void GetChatRoomUpgradeInfoResp::SharedDtor() {
  chatroomupgradeinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetChatRoomUpgradeInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChatRoomUpgradeInfoResp::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChatRoomUpgradeInfoResp& GetChatRoomUpgradeInfoResp::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetChatRoomUpgradeInfoResp* GetChatRoomUpgradeInfoResp::New(::google::protobuf::Arena* arena) const {
  GetChatRoomUpgradeInfoResp* n = new GetChatRoomUpgradeInfoResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetChatRoomUpgradeInfoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetChatRoomUpgradeInfoResp)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_chatroomupgradeinfo()) {
      GOOGLE_DCHECK(!chatroomupgradeinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomupgradeinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetChatRoomUpgradeInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetChatRoomUpgradeInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ChatRoomUpgradeInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomupgradeinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomupgradeinfo().data(), this->chatroomupgradeinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetChatRoomUpgradeInfoResp.ChatRoomUpgradeInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetChatRoomUpgradeInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetChatRoomUpgradeInfoResp)
  return false;
#undef DO_
}

void GetChatRoomUpgradeInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetChatRoomUpgradeInfoResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string ChatRoomUpgradeInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomupgradeinfo().data(), this->chatroomupgradeinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomUpgradeInfoResp.ChatRoomUpgradeInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chatroomupgradeinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetChatRoomUpgradeInfoResp)
}

::google::protobuf::uint8* GetChatRoomUpgradeInfoResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetChatRoomUpgradeInfoResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string ChatRoomUpgradeInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomupgradeinfo().data(), this->chatroomupgradeinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomUpgradeInfoResp.ChatRoomUpgradeInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatroomupgradeinfo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetChatRoomUpgradeInfoResp)
  return target;
}

size_t GetChatRoomUpgradeInfoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetChatRoomUpgradeInfoResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional string ChatRoomUpgradeInfo = 2;
  if (has_chatroomupgradeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatroomupgradeinfo());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChatRoomUpgradeInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetChatRoomUpgradeInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatRoomUpgradeInfoResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChatRoomUpgradeInfoResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetChatRoomUpgradeInfoResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetChatRoomUpgradeInfoResp)
    MergeFrom(*source);
  }
}

void GetChatRoomUpgradeInfoResp::MergeFrom(const GetChatRoomUpgradeInfoResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetChatRoomUpgradeInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chatroomupgradeinfo();
      chatroomupgradeinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomupgradeinfo_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void GetChatRoomUpgradeInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetChatRoomUpgradeInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatRoomUpgradeInfoResp::CopyFrom(const GetChatRoomUpgradeInfoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetChatRoomUpgradeInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatRoomUpgradeInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetChatRoomUpgradeInfoResp::Swap(GetChatRoomUpgradeInfoResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChatRoomUpgradeInfoResp::InternalSwap(GetChatRoomUpgradeInfoResp* other) {
  chatroomupgradeinfo_.Swap(&other->chatroomupgradeinfo_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetChatRoomUpgradeInfoResp::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetChatRoomUpgradeInfoResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetChatRoomUpgradeInfoResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetChatRoomUpgradeInfoResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void GetChatRoomUpgradeInfoResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetChatRoomUpgradeInfoResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetChatRoomUpgradeInfoResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeInfoResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetChatRoomUpgradeInfoResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomUpgradeInfoResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetChatRoomUpgradeInfoResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomUpgradeInfoResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetChatRoomUpgradeInfoResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomUpgradeInfoResp.BaseResponse)
}

// optional string ChatRoomUpgradeInfo = 2;
bool GetChatRoomUpgradeInfoResp::has_chatroomupgradeinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetChatRoomUpgradeInfoResp::set_has_chatroomupgradeinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void GetChatRoomUpgradeInfoResp::clear_has_chatroomupgradeinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetChatRoomUpgradeInfoResp::clear_chatroomupgradeinfo() {
  chatroomupgradeinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomupgradeinfo();
}
const ::std::string& GetChatRoomUpgradeInfoResp::chatroomupgradeinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeInfoResp.ChatRoomUpgradeInfo)
  return chatroomupgradeinfo_.GetNoArena();
}
void GetChatRoomUpgradeInfoResp::set_chatroomupgradeinfo(const ::std::string& value) {
  set_has_chatroomupgradeinfo();
  chatroomupgradeinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeInfoResp.ChatRoomUpgradeInfo)
}
#if LANG_CXX11
void GetChatRoomUpgradeInfoResp::set_chatroomupgradeinfo(::std::string&& value) {
  set_has_chatroomupgradeinfo();
  chatroomupgradeinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomUpgradeInfoResp.ChatRoomUpgradeInfo)
}
#endif
void GetChatRoomUpgradeInfoResp::set_chatroomupgradeinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomupgradeinfo();
  chatroomupgradeinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomUpgradeInfoResp.ChatRoomUpgradeInfo)
}
void GetChatRoomUpgradeInfoResp::set_chatroomupgradeinfo(const char* value, size_t size) {
  set_has_chatroomupgradeinfo();
  chatroomupgradeinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomUpgradeInfoResp.ChatRoomUpgradeInfo)
}
::std::string* GetChatRoomUpgradeInfoResp::mutable_chatroomupgradeinfo() {
  set_has_chatroomupgradeinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomUpgradeInfoResp.ChatRoomUpgradeInfo)
  return chatroomupgradeinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetChatRoomUpgradeInfoResp::release_chatroomupgradeinfo() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomUpgradeInfoResp.ChatRoomUpgradeInfo)
  clear_has_chatroomupgradeinfo();
  return chatroomupgradeinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetChatRoomUpgradeInfoResp::set_allocated_chatroomupgradeinfo(::std::string* chatroomupgradeinfo) {
  if (chatroomupgradeinfo != NULL) {
    set_has_chatroomupgradeinfo();
  } else {
    clear_has_chatroomupgradeinfo();
  }
  chatroomupgradeinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomupgradeinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomUpgradeInfoResp.ChatRoomUpgradeInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValStr::kKeyFieldNumber;
const int KeyValStr::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValStr::KeyValStr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.KeyValStr)
}
KeyValStr::KeyValStr(const KeyValStr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_val()) {
    val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
  }
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:micromsg.KeyValStr)
}

void KeyValStr::SharedCtor() {
  _cached_size_ = 0;
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = 0u;
}

KeyValStr::~KeyValStr() {
  // @@protoc_insertion_point(destructor:micromsg.KeyValStr)
  SharedDtor();
}

void KeyValStr::SharedDtor() {
  val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KeyValStr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValStr::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyValStr& KeyValStr::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeyValStr* KeyValStr::New(::google::protobuf::Arena* arena) const {
  KeyValStr* n = new KeyValStr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyValStr::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.KeyValStr)
  if (has_val()) {
    GOOGLE_DCHECK(!val_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*val_.UnsafeRawStringPointer())->clear();
  }
  key_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KeyValStr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.KeyValStr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Val = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->val().data(), this->val().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.KeyValStr.Val");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.KeyValStr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.KeyValStr)
  return false;
#undef DO_
}

void KeyValStr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.KeyValStr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Key = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // optional string Val = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.KeyValStr.Val");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.KeyValStr)
}

::google::protobuf::uint8* KeyValStr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.KeyValStr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Key = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // optional string Val = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.KeyValStr.Val");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.KeyValStr)
  return target;
}

size_t KeyValStr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.KeyValStr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key());
  }
  // optional string Val = 2;
  if (has_val()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->val());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValStr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.KeyValStr)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValStr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyValStr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.KeyValStr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.KeyValStr)
    MergeFrom(*source);
  }
}

void KeyValStr::MergeFrom(const KeyValStr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.KeyValStr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_val();
      val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
    }
    if (cached_has_bits & 0x00000002u) {
      key_ = from.key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KeyValStr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.KeyValStr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValStr::CopyFrom(const KeyValStr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.KeyValStr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValStr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void KeyValStr::Swap(KeyValStr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValStr::InternalSwap(KeyValStr* other) {
  val_.Swap(&other->val_);
  std::swap(key_, other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyValStr::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyValStr

// required uint32 Key = 1;
bool KeyValStr::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KeyValStr::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void KeyValStr::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void KeyValStr::clear_key() {
  key_ = 0u;
  clear_has_key();
}
::google::protobuf::uint32 KeyValStr::key() const {
  // @@protoc_insertion_point(field_get:micromsg.KeyValStr.Key)
  return key_;
}
void KeyValStr::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:micromsg.KeyValStr.Key)
}

// optional string Val = 2;
bool KeyValStr::has_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeyValStr::set_has_val() {
  _has_bits_[0] |= 0x00000001u;
}
void KeyValStr::clear_has_val() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeyValStr::clear_val() {
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_val();
}
const ::std::string& KeyValStr::val() const {
  // @@protoc_insertion_point(field_get:micromsg.KeyValStr.Val)
  return val_.GetNoArena();
}
void KeyValStr::set_val(const ::std::string& value) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.KeyValStr.Val)
}
#if LANG_CXX11
void KeyValStr::set_val(::std::string&& value) {
  set_has_val();
  val_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.KeyValStr.Val)
}
#endif
void KeyValStr::set_val(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.KeyValStr.Val)
}
void KeyValStr::set_val(const char* value, size_t size) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.KeyValStr.Val)
}
::std::string* KeyValStr::mutable_val() {
  set_has_val();
  // @@protoc_insertion_point(field_mutable:micromsg.KeyValStr.Val)
  return val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyValStr::release_val() {
  // @@protoc_insertion_point(field_release:micromsg.KeyValStr.Val)
  clear_has_val();
  return val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyValStr::set_allocated_val(::std::string* val) {
  if (val != NULL) {
    set_has_val();
  } else {
    clear_has_val();
  }
  val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:micromsg.KeyValStr.Val)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDonateInfoReq::kBaseRequestFieldNumber;
const int GetDonateInfoReq::kTypeFieldNumber;
const int GetDonateInfoReq::kSceneFieldNumber;
const int GetDonateInfoReq::kExtInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDonateInfoReq::GetDonateInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetDonateInfoReq)
}
GetDonateInfoReq::GetDonateInfoReq(const GetDonateInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extinfo()) {
    extinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extinfo_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&type_) + sizeof(scene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetDonateInfoReq)
}

void GetDonateInfoReq::SharedCtor() {
  _cached_size_ = 0;
  extinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

GetDonateInfoReq::~GetDonateInfoReq() {
  // @@protoc_insertion_point(destructor:micromsg.GetDonateInfoReq)
  SharedDtor();
}

void GetDonateInfoReq::SharedDtor() {
  extinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetDonateInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDonateInfoReq::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetDonateInfoReq& GetDonateInfoReq::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDonateInfoReq* GetDonateInfoReq::New(::google::protobuf::Arena* arena) const {
  GetDonateInfoReq* n = new GetDonateInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDonateInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetDonateInfoReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_extinfo()) {
      GOOGLE_DCHECK(!extinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&scene_) -
      reinterpret_cast<char*>(&type_) + sizeof(scene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetDonateInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetDonateInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Scene = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ExtInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extinfo().data(), this->extinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetDonateInfoReq.ExtInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetDonateInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetDonateInfoReq)
  return false;
#undef DO_
}

void GetDonateInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetDonateInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 Scene = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene(), output);
  }

  // optional string ExtInfo = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extinfo().data(), this->extinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetDonateInfoReq.ExtInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->extinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetDonateInfoReq)
}

::google::protobuf::uint8* GetDonateInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetDonateInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 Scene = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene(), target);
  }

  // optional string ExtInfo = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extinfo().data(), this->extinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetDonateInfoReq.ExtInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->extinfo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetDonateInfoReq)
  return target;
}

size_t GetDonateInfoReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetDonateInfoReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_type()) {
    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_scene()) {
    // required uint32 Scene = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  return total_size;
}
size_t GetDonateInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetDonateInfoReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 Scene = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string ExtInfo = 4;
  if (has_extinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extinfo());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDonateInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetDonateInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDonateInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDonateInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetDonateInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetDonateInfoReq)
    MergeFrom(*source);
  }
}

void GetDonateInfoReq::MergeFrom(const GetDonateInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetDonateInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_extinfo();
      extinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extinfo_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetDonateInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetDonateInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDonateInfoReq::CopyFrom(const GetDonateInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetDonateInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDonateInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetDonateInfoReq::Swap(GetDonateInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDonateInfoReq::InternalSwap(GetDonateInfoReq* other) {
  extinfo_.Swap(&other->extinfo_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(type_, other->type_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDonateInfoReq::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDonateInfoReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetDonateInfoReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetDonateInfoReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GetDonateInfoReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetDonateInfoReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetDonateInfoReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetDonateInfoReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetDonateInfoReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetDonateInfoReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetDonateInfoReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetDonateInfoReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetDonateInfoReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetDonateInfoReq.BaseRequest)
}

// required uint32 Type = 2;
bool GetDonateInfoReq::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetDonateInfoReq::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void GetDonateInfoReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetDonateInfoReq::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 GetDonateInfoReq::type() const {
  // @@protoc_insertion_point(field_get:micromsg.GetDonateInfoReq.Type)
  return type_;
}
void GetDonateInfoReq::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetDonateInfoReq.Type)
}

// required uint32 Scene = 3;
bool GetDonateInfoReq::has_scene() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetDonateInfoReq::set_has_scene() {
  _has_bits_[0] |= 0x00000008u;
}
void GetDonateInfoReq::clear_has_scene() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetDonateInfoReq::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 GetDonateInfoReq::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.GetDonateInfoReq.Scene)
  return scene_;
}
void GetDonateInfoReq::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetDonateInfoReq.Scene)
}

// optional string ExtInfo = 4;
bool GetDonateInfoReq::has_extinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetDonateInfoReq::set_has_extinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void GetDonateInfoReq::clear_has_extinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetDonateInfoReq::clear_extinfo() {
  extinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extinfo();
}
const ::std::string& GetDonateInfoReq::extinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.GetDonateInfoReq.ExtInfo)
  return extinfo_.GetNoArena();
}
void GetDonateInfoReq::set_extinfo(const ::std::string& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetDonateInfoReq.ExtInfo)
}
#if LANG_CXX11
void GetDonateInfoReq::set_extinfo(::std::string&& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetDonateInfoReq.ExtInfo)
}
#endif
void GetDonateInfoReq::set_extinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetDonateInfoReq.ExtInfo)
}
void GetDonateInfoReq::set_extinfo(const char* value, size_t size) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetDonateInfoReq.ExtInfo)
}
::std::string* GetDonateInfoReq::mutable_extinfo() {
  set_has_extinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.GetDonateInfoReq.ExtInfo)
  return extinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetDonateInfoReq::release_extinfo() {
  // @@protoc_insertion_point(field_release:micromsg.GetDonateInfoReq.ExtInfo)
  clear_has_extinfo();
  return extinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetDonateInfoReq::set_allocated_extinfo(::std::string* extinfo) {
  if (extinfo != NULL) {
    set_has_extinfo();
  } else {
    clear_has_extinfo();
  }
  extinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetDonateInfoReq.ExtInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDonateInfoResp::kBaseResponseFieldNumber;
const int GetDonateInfoResp::kDonateInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDonateInfoResp::GetDonateInfoResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetDonateInfoResp)
}
GetDonateInfoResp::GetDonateInfoResp(const GetDonateInfoResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  donateinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_donateinfo()) {
    donateinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.donateinfo_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetDonateInfoResp)
}

void GetDonateInfoResp::SharedCtor() {
  _cached_size_ = 0;
  donateinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

GetDonateInfoResp::~GetDonateInfoResp() {
  // @@protoc_insertion_point(destructor:micromsg.GetDonateInfoResp)
  SharedDtor();
}

void GetDonateInfoResp::SharedDtor() {
  donateinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetDonateInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDonateInfoResp::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetDonateInfoResp& GetDonateInfoResp::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDonateInfoResp* GetDonateInfoResp::New(::google::protobuf::Arena* arena) const {
  GetDonateInfoResp* n = new GetDonateInfoResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDonateInfoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetDonateInfoResp)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_donateinfo()) {
      GOOGLE_DCHECK(!donateinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*donateinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetDonateInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetDonateInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DonateInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_donateinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->donateinfo().data(), this->donateinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetDonateInfoResp.DonateInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetDonateInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetDonateInfoResp)
  return false;
#undef DO_
}

void GetDonateInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetDonateInfoResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string DonateInfo = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->donateinfo().data(), this->donateinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetDonateInfoResp.DonateInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->donateinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetDonateInfoResp)
}

::google::protobuf::uint8* GetDonateInfoResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetDonateInfoResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string DonateInfo = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->donateinfo().data(), this->donateinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetDonateInfoResp.DonateInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->donateinfo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetDonateInfoResp)
  return target;
}

size_t GetDonateInfoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetDonateInfoResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional string DonateInfo = 3;
  if (has_donateinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->donateinfo());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDonateInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetDonateInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDonateInfoResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDonateInfoResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetDonateInfoResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetDonateInfoResp)
    MergeFrom(*source);
  }
}

void GetDonateInfoResp::MergeFrom(const GetDonateInfoResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetDonateInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_donateinfo();
      donateinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.donateinfo_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void GetDonateInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetDonateInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDonateInfoResp::CopyFrom(const GetDonateInfoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetDonateInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDonateInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetDonateInfoResp::Swap(GetDonateInfoResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDonateInfoResp::InternalSwap(GetDonateInfoResp* other) {
  donateinfo_.Swap(&other->donateinfo_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDonateInfoResp::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDonateInfoResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetDonateInfoResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetDonateInfoResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void GetDonateInfoResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetDonateInfoResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetDonateInfoResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetDonateInfoResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetDonateInfoResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetDonateInfoResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetDonateInfoResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetDonateInfoResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetDonateInfoResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetDonateInfoResp.BaseResponse)
}

// optional string DonateInfo = 3;
bool GetDonateInfoResp::has_donateinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetDonateInfoResp::set_has_donateinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void GetDonateInfoResp::clear_has_donateinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetDonateInfoResp::clear_donateinfo() {
  donateinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_donateinfo();
}
const ::std::string& GetDonateInfoResp::donateinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.GetDonateInfoResp.DonateInfo)
  return donateinfo_.GetNoArena();
}
void GetDonateInfoResp::set_donateinfo(const ::std::string& value) {
  set_has_donateinfo();
  donateinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetDonateInfoResp.DonateInfo)
}
#if LANG_CXX11
void GetDonateInfoResp::set_donateinfo(::std::string&& value) {
  set_has_donateinfo();
  donateinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetDonateInfoResp.DonateInfo)
}
#endif
void GetDonateInfoResp::set_donateinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_donateinfo();
  donateinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetDonateInfoResp.DonateInfo)
}
void GetDonateInfoResp::set_donateinfo(const char* value, size_t size) {
  set_has_donateinfo();
  donateinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetDonateInfoResp.DonateInfo)
}
::std::string* GetDonateInfoResp::mutable_donateinfo() {
  set_has_donateinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.GetDonateInfoResp.DonateInfo)
  return donateinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetDonateInfoResp::release_donateinfo() {
  // @@protoc_insertion_point(field_release:micromsg.GetDonateInfoResp.DonateInfo)
  clear_has_donateinfo();
  return donateinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetDonateInfoResp::set_allocated_donateinfo(::std::string* donateinfo) {
  if (donateinfo != NULL) {
    set_has_donateinfo();
  } else {
    clear_has_donateinfo();
  }
  donateinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), donateinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetDonateInfoResp.DonateInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPayPurchasePackageReq::kBaseRequestFieldNumber;
const int GetPayPurchasePackageReq::kTypeFieldNumber;
const int GetPayPurchasePackageReq::kPriceFieldNumber;
const int GetPayPurchasePackageReq::kPriceTypeFieldNumber;
const int GetPayPurchasePackageReq::kExtInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPayPurchasePackageReq::GetPayPurchasePackageReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetPayPurchasePackageReq)
}
GetPayPurchasePackageReq::GetPayPurchasePackageReq(const GetPayPurchasePackageReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pricetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pricetype()) {
    pricetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pricetype_);
  }
  extinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extinfo()) {
    extinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extinfo_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&type_) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetPayPurchasePackageReq)
}

void GetPayPurchasePackageReq::SharedCtor() {
  _cached_size_ = 0;
  pricetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(price_));
}

GetPayPurchasePackageReq::~GetPayPurchasePackageReq() {
  // @@protoc_insertion_point(destructor:micromsg.GetPayPurchasePackageReq)
  SharedDtor();
}

void GetPayPurchasePackageReq::SharedDtor() {
  pricetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetPayPurchasePackageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPayPurchasePackageReq::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPayPurchasePackageReq& GetPayPurchasePackageReq::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPayPurchasePackageReq* GetPayPurchasePackageReq::New(::google::protobuf::Arena* arena) const {
  GetPayPurchasePackageReq* n = new GetPayPurchasePackageReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPayPurchasePackageReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetPayPurchasePackageReq)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_pricetype()) {
      GOOGLE_DCHECK(!pricetype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pricetype_.UnsafeRawStringPointer())->clear();
    }
    if (has_extinfo()) {
      GOOGLE_DCHECK(!extinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&type_) + sizeof(price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetPayPurchasePackageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetPayPurchasePackageReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PriceType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pricetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pricetype().data(), this->pricetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetPayPurchasePackageReq.PriceType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ExtInfo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extinfo().data(), this->extinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetPayPurchasePackageReq.ExtInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetPayPurchasePackageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetPayPurchasePackageReq)
  return false;
#undef DO_
}

void GetPayPurchasePackageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetPayPurchasePackageReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 Price = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->price(), output);
  }

  // optional string PriceType = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricetype().data(), this->pricetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetPayPurchasePackageReq.PriceType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pricetype(), output);
  }

  // optional string ExtInfo = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extinfo().data(), this->extinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetPayPurchasePackageReq.ExtInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->extinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetPayPurchasePackageReq)
}

::google::protobuf::uint8* GetPayPurchasePackageReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetPayPurchasePackageReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 Price = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->price(), target);
  }

  // optional string PriceType = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricetype().data(), this->pricetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetPayPurchasePackageReq.PriceType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pricetype(), target);
  }

  // optional string ExtInfo = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extinfo().data(), this->extinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetPayPurchasePackageReq.ExtInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->extinfo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetPayPurchasePackageReq)
  return target;
}

size_t GetPayPurchasePackageReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetPayPurchasePackageReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_type()) {
    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_price()) {
    // required uint32 Price = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->price());
  }

  return total_size;
}
size_t GetPayPurchasePackageReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetPayPurchasePackageReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 Price = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->price());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string PriceType = 4;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pricetype());
    }

    // optional string ExtInfo = 5;
    if (has_extinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extinfo());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPayPurchasePackageReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetPayPurchasePackageReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPayPurchasePackageReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPayPurchasePackageReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetPayPurchasePackageReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetPayPurchasePackageReq)
    MergeFrom(*source);
  }
}

void GetPayPurchasePackageReq::MergeFrom(const GetPayPurchasePackageReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetPayPurchasePackageReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pricetype();
      pricetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pricetype_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_extinfo();
      extinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extinfo_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      price_ = from.price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetPayPurchasePackageReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetPayPurchasePackageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPayPurchasePackageReq::CopyFrom(const GetPayPurchasePackageReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetPayPurchasePackageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPayPurchasePackageReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetPayPurchasePackageReq::Swap(GetPayPurchasePackageReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPayPurchasePackageReq::InternalSwap(GetPayPurchasePackageReq* other) {
  pricetype_.Swap(&other->pricetype_);
  extinfo_.Swap(&other->extinfo_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(type_, other->type_);
  std::swap(price_, other->price_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPayPurchasePackageReq::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPayPurchasePackageReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetPayPurchasePackageReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetPayPurchasePackageReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void GetPayPurchasePackageReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetPayPurchasePackageReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetPayPurchasePackageReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPayPurchasePackageReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetPayPurchasePackageReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetPayPurchasePackageReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetPayPurchasePackageReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetPayPurchasePackageReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetPayPurchasePackageReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPayPurchasePackageReq.BaseRequest)
}

// required uint32 Type = 2;
bool GetPayPurchasePackageReq::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetPayPurchasePackageReq::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void GetPayPurchasePackageReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetPayPurchasePackageReq::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 GetPayPurchasePackageReq::type() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPayPurchasePackageReq.Type)
  return type_;
}
void GetPayPurchasePackageReq::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetPayPurchasePackageReq.Type)
}

// required uint32 Price = 3;
bool GetPayPurchasePackageReq::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetPayPurchasePackageReq::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
void GetPayPurchasePackageReq::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetPayPurchasePackageReq::clear_price() {
  price_ = 0u;
  clear_has_price();
}
::google::protobuf::uint32 GetPayPurchasePackageReq::price() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPayPurchasePackageReq.Price)
  return price_;
}
void GetPayPurchasePackageReq::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetPayPurchasePackageReq.Price)
}

// optional string PriceType = 4;
bool GetPayPurchasePackageReq::has_pricetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetPayPurchasePackageReq::set_has_pricetype() {
  _has_bits_[0] |= 0x00000001u;
}
void GetPayPurchasePackageReq::clear_has_pricetype() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetPayPurchasePackageReq::clear_pricetype() {
  pricetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pricetype();
}
const ::std::string& GetPayPurchasePackageReq::pricetype() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPayPurchasePackageReq.PriceType)
  return pricetype_.GetNoArena();
}
void GetPayPurchasePackageReq::set_pricetype(const ::std::string& value) {
  set_has_pricetype();
  pricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetPayPurchasePackageReq.PriceType)
}
#if LANG_CXX11
void GetPayPurchasePackageReq::set_pricetype(::std::string&& value) {
  set_has_pricetype();
  pricetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetPayPurchasePackageReq.PriceType)
}
#endif
void GetPayPurchasePackageReq::set_pricetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pricetype();
  pricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetPayPurchasePackageReq.PriceType)
}
void GetPayPurchasePackageReq::set_pricetype(const char* value, size_t size) {
  set_has_pricetype();
  pricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetPayPurchasePackageReq.PriceType)
}
::std::string* GetPayPurchasePackageReq::mutable_pricetype() {
  set_has_pricetype();
  // @@protoc_insertion_point(field_mutable:micromsg.GetPayPurchasePackageReq.PriceType)
  return pricetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetPayPurchasePackageReq::release_pricetype() {
  // @@protoc_insertion_point(field_release:micromsg.GetPayPurchasePackageReq.PriceType)
  clear_has_pricetype();
  return pricetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPayPurchasePackageReq::set_allocated_pricetype(::std::string* pricetype) {
  if (pricetype != NULL) {
    set_has_pricetype();
  } else {
    clear_has_pricetype();
  }
  pricetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pricetype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPayPurchasePackageReq.PriceType)
}

// optional string ExtInfo = 5;
bool GetPayPurchasePackageReq::has_extinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetPayPurchasePackageReq::set_has_extinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void GetPayPurchasePackageReq::clear_has_extinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetPayPurchasePackageReq::clear_extinfo() {
  extinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extinfo();
}
const ::std::string& GetPayPurchasePackageReq::extinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPayPurchasePackageReq.ExtInfo)
  return extinfo_.GetNoArena();
}
void GetPayPurchasePackageReq::set_extinfo(const ::std::string& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetPayPurchasePackageReq.ExtInfo)
}
#if LANG_CXX11
void GetPayPurchasePackageReq::set_extinfo(::std::string&& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetPayPurchasePackageReq.ExtInfo)
}
#endif
void GetPayPurchasePackageReq::set_extinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetPayPurchasePackageReq.ExtInfo)
}
void GetPayPurchasePackageReq::set_extinfo(const char* value, size_t size) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetPayPurchasePackageReq.ExtInfo)
}
::std::string* GetPayPurchasePackageReq::mutable_extinfo() {
  set_has_extinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.GetPayPurchasePackageReq.ExtInfo)
  return extinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetPayPurchasePackageReq::release_extinfo() {
  // @@protoc_insertion_point(field_release:micromsg.GetPayPurchasePackageReq.ExtInfo)
  clear_has_extinfo();
  return extinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPayPurchasePackageReq::set_allocated_extinfo(::std::string* extinfo) {
  if (extinfo != NULL) {
    set_has_extinfo();
  } else {
    clear_has_extinfo();
  }
  extinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPayPurchasePackageReq.ExtInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPayPurchasePackageResp::kBaseResponseFieldNumber;
const int GetPayPurchasePackageResp::kPackageFieldNumber;
const int GetPayPurchasePackageResp::kExtInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPayPurchasePackageResp::GetPayPurchasePackageResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetPayPurchasePackageResp)
}
GetPayPurchasePackageResp::GetPayPurchasePackageResp(const GetPayPurchasePackageResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_package()) {
    package_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_);
  }
  extinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extinfo()) {
    extinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extinfo_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetPayPurchasePackageResp)
}

void GetPayPurchasePackageResp::SharedCtor() {
  _cached_size_ = 0;
  package_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

GetPayPurchasePackageResp::~GetPayPurchasePackageResp() {
  // @@protoc_insertion_point(destructor:micromsg.GetPayPurchasePackageResp)
  SharedDtor();
}

void GetPayPurchasePackageResp::SharedDtor() {
  package_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetPayPurchasePackageResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPayPurchasePackageResp::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPayPurchasePackageResp& GetPayPurchasePackageResp::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPayPurchasePackageResp* GetPayPurchasePackageResp::New(::google::protobuf::Arena* arena) const {
  GetPayPurchasePackageResp* n = new GetPayPurchasePackageResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPayPurchasePackageResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetPayPurchasePackageResp)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_package()) {
      GOOGLE_DCHECK(!package_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*package_.UnsafeRawStringPointer())->clear();
    }
    if (has_extinfo()) {
      GOOGLE_DCHECK(!extinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetPayPurchasePackageResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetPayPurchasePackageResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Package = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->package().data(), this->package().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetPayPurchasePackageResp.Package");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ExtInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extinfo().data(), this->extinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetPayPurchasePackageResp.ExtInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetPayPurchasePackageResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetPayPurchasePackageResp)
  return false;
#undef DO_
}

void GetPayPurchasePackageResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetPayPurchasePackageResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string Package = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package().data(), this->package().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetPayPurchasePackageResp.Package");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->package(), output);
  }

  // optional string ExtInfo = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extinfo().data(), this->extinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetPayPurchasePackageResp.ExtInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->extinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetPayPurchasePackageResp)
}

::google::protobuf::uint8* GetPayPurchasePackageResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetPayPurchasePackageResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string Package = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package().data(), this->package().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetPayPurchasePackageResp.Package");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->package(), target);
  }

  // optional string ExtInfo = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extinfo().data(), this->extinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetPayPurchasePackageResp.ExtInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->extinfo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetPayPurchasePackageResp)
  return target;
}

size_t GetPayPurchasePackageResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetPayPurchasePackageResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string Package = 2;
    if (has_package()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->package());
    }

    // optional string ExtInfo = 3;
    if (has_extinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extinfo());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPayPurchasePackageResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetPayPurchasePackageResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPayPurchasePackageResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPayPurchasePackageResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetPayPurchasePackageResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetPayPurchasePackageResp)
    MergeFrom(*source);
  }
}

void GetPayPurchasePackageResp::MergeFrom(const GetPayPurchasePackageResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetPayPurchasePackageResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_package();
      package_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_extinfo();
      extinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extinfo_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void GetPayPurchasePackageResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetPayPurchasePackageResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPayPurchasePackageResp::CopyFrom(const GetPayPurchasePackageResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetPayPurchasePackageResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPayPurchasePackageResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetPayPurchasePackageResp::Swap(GetPayPurchasePackageResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPayPurchasePackageResp::InternalSwap(GetPayPurchasePackageResp* other) {
  package_.Swap(&other->package_);
  extinfo_.Swap(&other->extinfo_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPayPurchasePackageResp::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPayPurchasePackageResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetPayPurchasePackageResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetPayPurchasePackageResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void GetPayPurchasePackageResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetPayPurchasePackageResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetPayPurchasePackageResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPayPurchasePackageResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetPayPurchasePackageResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetPayPurchasePackageResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetPayPurchasePackageResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetPayPurchasePackageResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetPayPurchasePackageResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPayPurchasePackageResp.BaseResponse)
}

// optional string Package = 2;
bool GetPayPurchasePackageResp::has_package() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetPayPurchasePackageResp::set_has_package() {
  _has_bits_[0] |= 0x00000001u;
}
void GetPayPurchasePackageResp::clear_has_package() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetPayPurchasePackageResp::clear_package() {
  package_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_package();
}
const ::std::string& GetPayPurchasePackageResp::package() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPayPurchasePackageResp.Package)
  return package_.GetNoArena();
}
void GetPayPurchasePackageResp::set_package(const ::std::string& value) {
  set_has_package();
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetPayPurchasePackageResp.Package)
}
#if LANG_CXX11
void GetPayPurchasePackageResp::set_package(::std::string&& value) {
  set_has_package();
  package_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetPayPurchasePackageResp.Package)
}
#endif
void GetPayPurchasePackageResp::set_package(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_package();
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetPayPurchasePackageResp.Package)
}
void GetPayPurchasePackageResp::set_package(const char* value, size_t size) {
  set_has_package();
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetPayPurchasePackageResp.Package)
}
::std::string* GetPayPurchasePackageResp::mutable_package() {
  set_has_package();
  // @@protoc_insertion_point(field_mutable:micromsg.GetPayPurchasePackageResp.Package)
  return package_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetPayPurchasePackageResp::release_package() {
  // @@protoc_insertion_point(field_release:micromsg.GetPayPurchasePackageResp.Package)
  clear_has_package();
  return package_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPayPurchasePackageResp::set_allocated_package(::std::string* package) {
  if (package != NULL) {
    set_has_package();
  } else {
    clear_has_package();
  }
  package_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPayPurchasePackageResp.Package)
}

// optional string ExtInfo = 3;
bool GetPayPurchasePackageResp::has_extinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetPayPurchasePackageResp::set_has_extinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void GetPayPurchasePackageResp::clear_has_extinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetPayPurchasePackageResp::clear_extinfo() {
  extinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extinfo();
}
const ::std::string& GetPayPurchasePackageResp::extinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPayPurchasePackageResp.ExtInfo)
  return extinfo_.GetNoArena();
}
void GetPayPurchasePackageResp::set_extinfo(const ::std::string& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetPayPurchasePackageResp.ExtInfo)
}
#if LANG_CXX11
void GetPayPurchasePackageResp::set_extinfo(::std::string&& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetPayPurchasePackageResp.ExtInfo)
}
#endif
void GetPayPurchasePackageResp::set_extinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetPayPurchasePackageResp.ExtInfo)
}
void GetPayPurchasePackageResp::set_extinfo(const char* value, size_t size) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetPayPurchasePackageResp.ExtInfo)
}
::std::string* GetPayPurchasePackageResp::mutable_extinfo() {
  set_has_extinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.GetPayPurchasePackageResp.ExtInfo)
  return extinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetPayPurchasePackageResp::release_extinfo() {
  // @@protoc_insertion_point(field_release:micromsg.GetPayPurchasePackageResp.ExtInfo)
  clear_has_extinfo();
  return extinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPayPurchasePackageResp::set_allocated_extinfo(::std::string* extinfo) {
  if (extinfo != NULL) {
    set_has_extinfo();
  } else {
    clear_has_extinfo();
  }
  extinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPayPurchasePackageResp.ExtInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyPayTransitionReq::kBaseRequestFieldNumber;
const int VerifyPayTransitionReq::kTypeFieldNumber;
const int VerifyPayTransitionReq::kOutTradeNoFieldNumber;
const int VerifyPayTransitionReq::kExtInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyPayTransitionReq::VerifyPayTransitionReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VerifyPayTransitionReq)
}
VerifyPayTransitionReq::VerifyPayTransitionReq(const VerifyPayTransitionReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  outtradeno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_outtradeno()) {
    outtradeno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.outtradeno_);
  }
  extinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extinfo()) {
    extinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extinfo_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:micromsg.VerifyPayTransitionReq)
}

void VerifyPayTransitionReq::SharedCtor() {
  _cached_size_ = 0;
  outtradeno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(type_));
}

VerifyPayTransitionReq::~VerifyPayTransitionReq() {
  // @@protoc_insertion_point(destructor:micromsg.VerifyPayTransitionReq)
  SharedDtor();
}

void VerifyPayTransitionReq::SharedDtor() {
  outtradeno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void VerifyPayTransitionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyPayTransitionReq::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VerifyPayTransitionReq& VerifyPayTransitionReq::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

VerifyPayTransitionReq* VerifyPayTransitionReq::New(::google::protobuf::Arena* arena) const {
  VerifyPayTransitionReq* n = new VerifyPayTransitionReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyPayTransitionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VerifyPayTransitionReq)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_outtradeno()) {
      GOOGLE_DCHECK(!outtradeno_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*outtradeno_.UnsafeRawStringPointer())->clear();
    }
    if (has_extinfo()) {
      GOOGLE_DCHECK(!extinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VerifyPayTransitionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VerifyPayTransitionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string OutTradeNo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outtradeno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->outtradeno().data(), this->outtradeno().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VerifyPayTransitionReq.OutTradeNo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ExtInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extinfo().data(), this->extinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VerifyPayTransitionReq.ExtInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VerifyPayTransitionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VerifyPayTransitionReq)
  return false;
#undef DO_
}

void VerifyPayTransitionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VerifyPayTransitionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional string OutTradeNo = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->outtradeno().data(), this->outtradeno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPayTransitionReq.OutTradeNo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->outtradeno(), output);
  }

  // optional string ExtInfo = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extinfo().data(), this->extinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPayTransitionReq.ExtInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->extinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VerifyPayTransitionReq)
}

::google::protobuf::uint8* VerifyPayTransitionReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VerifyPayTransitionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional string OutTradeNo = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->outtradeno().data(), this->outtradeno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPayTransitionReq.OutTradeNo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->outtradeno(), target);
  }

  // optional string ExtInfo = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extinfo().data(), this->extinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPayTransitionReq.ExtInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->extinfo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VerifyPayTransitionReq)
  return target;
}

size_t VerifyPayTransitionReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VerifyPayTransitionReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_type()) {
    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  return total_size;
}
size_t VerifyPayTransitionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VerifyPayTransitionReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string OutTradeNo = 3;
    if (has_outtradeno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outtradeno());
    }

    // optional string ExtInfo = 4;
    if (has_extinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extinfo());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyPayTransitionReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VerifyPayTransitionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyPayTransitionReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyPayTransitionReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VerifyPayTransitionReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VerifyPayTransitionReq)
    MergeFrom(*source);
  }
}

void VerifyPayTransitionReq::MergeFrom(const VerifyPayTransitionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VerifyPayTransitionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_outtradeno();
      outtradeno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.outtradeno_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_extinfo();
      extinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extinfo_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VerifyPayTransitionReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VerifyPayTransitionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyPayTransitionReq::CopyFrom(const VerifyPayTransitionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VerifyPayTransitionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyPayTransitionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void VerifyPayTransitionReq::Swap(VerifyPayTransitionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyPayTransitionReq::InternalSwap(VerifyPayTransitionReq* other) {
  outtradeno_.Swap(&other->outtradeno_);
  extinfo_.Swap(&other->extinfo_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerifyPayTransitionReq::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyPayTransitionReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool VerifyPayTransitionReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VerifyPayTransitionReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void VerifyPayTransitionReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void VerifyPayTransitionReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VerifyPayTransitionReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPayTransitionReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VerifyPayTransitionReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPayTransitionReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VerifyPayTransitionReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPayTransitionReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VerifyPayTransitionReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPayTransitionReq.BaseRequest)
}

// required uint32 Type = 2;
bool VerifyPayTransitionReq::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VerifyPayTransitionReq::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void VerifyPayTransitionReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void VerifyPayTransitionReq::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 VerifyPayTransitionReq::type() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPayTransitionReq.Type)
  return type_;
}
void VerifyPayTransitionReq::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VerifyPayTransitionReq.Type)
}

// optional string OutTradeNo = 3;
bool VerifyPayTransitionReq::has_outtradeno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VerifyPayTransitionReq::set_has_outtradeno() {
  _has_bits_[0] |= 0x00000001u;
}
void VerifyPayTransitionReq::clear_has_outtradeno() {
  _has_bits_[0] &= ~0x00000001u;
}
void VerifyPayTransitionReq::clear_outtradeno() {
  outtradeno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_outtradeno();
}
const ::std::string& VerifyPayTransitionReq::outtradeno() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPayTransitionReq.OutTradeNo)
  return outtradeno_.GetNoArena();
}
void VerifyPayTransitionReq::set_outtradeno(const ::std::string& value) {
  set_has_outtradeno();
  outtradeno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyPayTransitionReq.OutTradeNo)
}
#if LANG_CXX11
void VerifyPayTransitionReq::set_outtradeno(::std::string&& value) {
  set_has_outtradeno();
  outtradeno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyPayTransitionReq.OutTradeNo)
}
#endif
void VerifyPayTransitionReq::set_outtradeno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_outtradeno();
  outtradeno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyPayTransitionReq.OutTradeNo)
}
void VerifyPayTransitionReq::set_outtradeno(const char* value, size_t size) {
  set_has_outtradeno();
  outtradeno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyPayTransitionReq.OutTradeNo)
}
::std::string* VerifyPayTransitionReq::mutable_outtradeno() {
  set_has_outtradeno();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPayTransitionReq.OutTradeNo)
  return outtradeno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyPayTransitionReq::release_outtradeno() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPayTransitionReq.OutTradeNo)
  clear_has_outtradeno();
  return outtradeno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyPayTransitionReq::set_allocated_outtradeno(::std::string* outtradeno) {
  if (outtradeno != NULL) {
    set_has_outtradeno();
  } else {
    clear_has_outtradeno();
  }
  outtradeno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), outtradeno);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPayTransitionReq.OutTradeNo)
}

// optional string ExtInfo = 4;
bool VerifyPayTransitionReq::has_extinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VerifyPayTransitionReq::set_has_extinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void VerifyPayTransitionReq::clear_has_extinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void VerifyPayTransitionReq::clear_extinfo() {
  extinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extinfo();
}
const ::std::string& VerifyPayTransitionReq::extinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPayTransitionReq.ExtInfo)
  return extinfo_.GetNoArena();
}
void VerifyPayTransitionReq::set_extinfo(const ::std::string& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyPayTransitionReq.ExtInfo)
}
#if LANG_CXX11
void VerifyPayTransitionReq::set_extinfo(::std::string&& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyPayTransitionReq.ExtInfo)
}
#endif
void VerifyPayTransitionReq::set_extinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyPayTransitionReq.ExtInfo)
}
void VerifyPayTransitionReq::set_extinfo(const char* value, size_t size) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyPayTransitionReq.ExtInfo)
}
::std::string* VerifyPayTransitionReq::mutable_extinfo() {
  set_has_extinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPayTransitionReq.ExtInfo)
  return extinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyPayTransitionReq::release_extinfo() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPayTransitionReq.ExtInfo)
  clear_has_extinfo();
  return extinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyPayTransitionReq::set_allocated_extinfo(::std::string* extinfo) {
  if (extinfo != NULL) {
    set_has_extinfo();
  } else {
    clear_has_extinfo();
  }
  extinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPayTransitionReq.ExtInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyPayTransitionResp::kBaseResponseFieldNumber;
const int VerifyPayTransitionResp::kResultMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyPayTransitionResp::VerifyPayTransitionResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VerifyPayTransitionResp)
}
VerifyPayTransitionResp::VerifyPayTransitionResp(const VerifyPayTransitionResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resultmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_resultmsg()) {
    resultmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resultmsg_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.VerifyPayTransitionResp)
}

void VerifyPayTransitionResp::SharedCtor() {
  _cached_size_ = 0;
  resultmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

VerifyPayTransitionResp::~VerifyPayTransitionResp() {
  // @@protoc_insertion_point(destructor:micromsg.VerifyPayTransitionResp)
  SharedDtor();
}

void VerifyPayTransitionResp::SharedDtor() {
  resultmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void VerifyPayTransitionResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyPayTransitionResp::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VerifyPayTransitionResp& VerifyPayTransitionResp::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

VerifyPayTransitionResp* VerifyPayTransitionResp::New(::google::protobuf::Arena* arena) const {
  VerifyPayTransitionResp* n = new VerifyPayTransitionResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyPayTransitionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VerifyPayTransitionResp)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_resultmsg()) {
      GOOGLE_DCHECK(!resultmsg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*resultmsg_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VerifyPayTransitionResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VerifyPayTransitionResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ResultMsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resultmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resultmsg().data(), this->resultmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VerifyPayTransitionResp.ResultMsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VerifyPayTransitionResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VerifyPayTransitionResp)
  return false;
#undef DO_
}

void VerifyPayTransitionResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VerifyPayTransitionResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string ResultMsg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resultmsg().data(), this->resultmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPayTransitionResp.ResultMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->resultmsg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VerifyPayTransitionResp)
}

::google::protobuf::uint8* VerifyPayTransitionResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VerifyPayTransitionResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string ResultMsg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resultmsg().data(), this->resultmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPayTransitionResp.ResultMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resultmsg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VerifyPayTransitionResp)
  return target;
}

size_t VerifyPayTransitionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VerifyPayTransitionResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional string ResultMsg = 2;
  if (has_resultmsg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resultmsg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyPayTransitionResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VerifyPayTransitionResp)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyPayTransitionResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyPayTransitionResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VerifyPayTransitionResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VerifyPayTransitionResp)
    MergeFrom(*source);
  }
}

void VerifyPayTransitionResp::MergeFrom(const VerifyPayTransitionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VerifyPayTransitionResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_resultmsg();
      resultmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resultmsg_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void VerifyPayTransitionResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VerifyPayTransitionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyPayTransitionResp::CopyFrom(const VerifyPayTransitionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VerifyPayTransitionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyPayTransitionResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void VerifyPayTransitionResp::Swap(VerifyPayTransitionResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyPayTransitionResp::InternalSwap(VerifyPayTransitionResp* other) {
  resultmsg_.Swap(&other->resultmsg_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerifyPayTransitionResp::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyPayTransitionResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool VerifyPayTransitionResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VerifyPayTransitionResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void VerifyPayTransitionResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void VerifyPayTransitionResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VerifyPayTransitionResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPayTransitionResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VerifyPayTransitionResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPayTransitionResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VerifyPayTransitionResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPayTransitionResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VerifyPayTransitionResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPayTransitionResp.BaseResponse)
}

// optional string ResultMsg = 2;
bool VerifyPayTransitionResp::has_resultmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VerifyPayTransitionResp::set_has_resultmsg() {
  _has_bits_[0] |= 0x00000001u;
}
void VerifyPayTransitionResp::clear_has_resultmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
void VerifyPayTransitionResp::clear_resultmsg() {
  resultmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resultmsg();
}
const ::std::string& VerifyPayTransitionResp::resultmsg() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPayTransitionResp.ResultMsg)
  return resultmsg_.GetNoArena();
}
void VerifyPayTransitionResp::set_resultmsg(const ::std::string& value) {
  set_has_resultmsg();
  resultmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyPayTransitionResp.ResultMsg)
}
#if LANG_CXX11
void VerifyPayTransitionResp::set_resultmsg(::std::string&& value) {
  set_has_resultmsg();
  resultmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyPayTransitionResp.ResultMsg)
}
#endif
void VerifyPayTransitionResp::set_resultmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_resultmsg();
  resultmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyPayTransitionResp.ResultMsg)
}
void VerifyPayTransitionResp::set_resultmsg(const char* value, size_t size) {
  set_has_resultmsg();
  resultmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyPayTransitionResp.ResultMsg)
}
::std::string* VerifyPayTransitionResp::mutable_resultmsg() {
  set_has_resultmsg();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPayTransitionResp.ResultMsg)
  return resultmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyPayTransitionResp::release_resultmsg() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPayTransitionResp.ResultMsg)
  clear_has_resultmsg();
  return resultmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyPayTransitionResp::set_allocated_resultmsg(::std::string* resultmsg) {
  if (resultmsg != NULL) {
    set_has_resultmsg();
  } else {
    clear_has_resultmsg();
  }
  resultmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resultmsg);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPayTransitionResp.ResultMsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChatRoomDonateHistoryReq::kBaseRequestFieldNumber;
const int GetChatRoomDonateHistoryReq::kChatRoomNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChatRoomDonateHistoryReq::GetChatRoomDonateHistoryReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetChatRoomDonateHistoryReq)
}
GetChatRoomDonateHistoryReq::GetChatRoomDonateHistoryReq(const GetChatRoomDonateHistoryReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomname()) {
    chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetChatRoomDonateHistoryReq)
}

void GetChatRoomDonateHistoryReq::SharedCtor() {
  _cached_size_ = 0;
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

GetChatRoomDonateHistoryReq::~GetChatRoomDonateHistoryReq() {
  // @@protoc_insertion_point(destructor:micromsg.GetChatRoomDonateHistoryReq)
  SharedDtor();
}

void GetChatRoomDonateHistoryReq::SharedDtor() {
  chatroomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetChatRoomDonateHistoryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChatRoomDonateHistoryReq::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChatRoomDonateHistoryReq& GetChatRoomDonateHistoryReq::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetChatRoomDonateHistoryReq* GetChatRoomDonateHistoryReq::New(::google::protobuf::Arena* arena) const {
  GetChatRoomDonateHistoryReq* n = new GetChatRoomDonateHistoryReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetChatRoomDonateHistoryReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetChatRoomDonateHistoryReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_chatroomname()) {
      GOOGLE_DCHECK(!chatroomname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomname_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetChatRoomDonateHistoryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetChatRoomDonateHistoryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ChatRoomName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomname().data(), this->chatroomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetChatRoomDonateHistoryReq.ChatRoomName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetChatRoomDonateHistoryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetChatRoomDonateHistoryReq)
  return false;
#undef DO_
}

void GetChatRoomDonateHistoryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetChatRoomDonateHistoryReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomDonateHistoryReq.ChatRoomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chatroomname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetChatRoomDonateHistoryReq)
}

::google::protobuf::uint8* GetChatRoomDonateHistoryReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetChatRoomDonateHistoryReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomDonateHistoryReq.ChatRoomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatroomname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetChatRoomDonateHistoryReq)
  return target;
}

size_t GetChatRoomDonateHistoryReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetChatRoomDonateHistoryReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string ChatRoomName = 2;
  if (has_chatroomname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatroomname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChatRoomDonateHistoryReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetChatRoomDonateHistoryReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatRoomDonateHistoryReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChatRoomDonateHistoryReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetChatRoomDonateHistoryReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetChatRoomDonateHistoryReq)
    MergeFrom(*source);
  }
}

void GetChatRoomDonateHistoryReq::MergeFrom(const GetChatRoomDonateHistoryReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetChatRoomDonateHistoryReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chatroomname();
      chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void GetChatRoomDonateHistoryReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetChatRoomDonateHistoryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatRoomDonateHistoryReq::CopyFrom(const GetChatRoomDonateHistoryReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetChatRoomDonateHistoryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatRoomDonateHistoryReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetChatRoomDonateHistoryReq::Swap(GetChatRoomDonateHistoryReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChatRoomDonateHistoryReq::InternalSwap(GetChatRoomDonateHistoryReq* other) {
  chatroomname_.Swap(&other->chatroomname_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetChatRoomDonateHistoryReq::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetChatRoomDonateHistoryReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetChatRoomDonateHistoryReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetChatRoomDonateHistoryReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GetChatRoomDonateHistoryReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetChatRoomDonateHistoryReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetChatRoomDonateHistoryReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomDonateHistoryReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetChatRoomDonateHistoryReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomDonateHistoryReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetChatRoomDonateHistoryReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomDonateHistoryReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetChatRoomDonateHistoryReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomDonateHistoryReq.BaseRequest)
}

// optional string ChatRoomName = 2;
bool GetChatRoomDonateHistoryReq::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetChatRoomDonateHistoryReq::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
void GetChatRoomDonateHistoryReq::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetChatRoomDonateHistoryReq::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
const ::std::string& GetChatRoomDonateHistoryReq::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomDonateHistoryReq.ChatRoomName)
  return chatroomname_.GetNoArena();
}
void GetChatRoomDonateHistoryReq::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomDonateHistoryReq.ChatRoomName)
}
#if LANG_CXX11
void GetChatRoomDonateHistoryReq::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomDonateHistoryReq.ChatRoomName)
}
#endif
void GetChatRoomDonateHistoryReq::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomDonateHistoryReq.ChatRoomName)
}
void GetChatRoomDonateHistoryReq::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomDonateHistoryReq.ChatRoomName)
}
::std::string* GetChatRoomDonateHistoryReq::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomDonateHistoryReq.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetChatRoomDonateHistoryReq::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomDonateHistoryReq.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetChatRoomDonateHistoryReq::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomDonateHistoryReq.ChatRoomName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Donor::kTimeFieldNumber;
const int Donor::kUserNameFieldNumber;
const int Donor::kNickNameFieldNumber;
const int Donor::kDonateTitleFieldNumber;
const int Donor::kDonateUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Donor::Donor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.Donor)
}
Donor::Donor(const Donor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  donatetitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_donatetitle()) {
    donatetitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.donatetitle_);
  }
  donateurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_donateurl()) {
    donateurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.donateurl_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:micromsg.Donor)
}

void Donor::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  donatetitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  donateurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0u;
}

Donor::~Donor() {
  // @@protoc_insertion_point(destructor:micromsg.Donor)
  SharedDtor();
}

void Donor::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  donatetitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  donateurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Donor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Donor::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Donor& Donor::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

Donor* Donor::New(::google::protobuf::Arena* arena) const {
  Donor* n = new Donor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Donor::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.Donor)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_donatetitle()) {
      GOOGLE_DCHECK(!donatetitle_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*donatetitle_.UnsafeRawStringPointer())->clear();
    }
    if (has_donateurl()) {
      GOOGLE_DCHECK(!donateurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*donateurl_.UnsafeRawStringPointer())->clear();
    }
  }
  time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Donor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.Donor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.Donor.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string NickName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.Donor.NickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DonateTitle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_donatetitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->donatetitle().data(), this->donatetitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.Donor.DonateTitle");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DonateUrl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_donateurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->donateurl().data(), this->donateurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.Donor.DonateUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.Donor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.Donor)
  return false;
#undef DO_
}

void Donor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.Donor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Time = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Donor.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string NickName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Donor.NickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional string DonateTitle = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->donatetitle().data(), this->donatetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Donor.DonateTitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->donatetitle(), output);
  }

  // optional string DonateUrl = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->donateurl().data(), this->donateurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Donor.DonateUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->donateurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.Donor)
}

::google::protobuf::uint8* Donor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.Donor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Time = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Donor.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string NickName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Donor.NickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional string DonateTitle = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->donatetitle().data(), this->donatetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Donor.DonateTitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->donatetitle(), target);
  }

  // optional string DonateUrl = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->donateurl().data(), this->donateurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Donor.DonateUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->donateurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.Donor)
  return target;
}

size_t Donor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.Donor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Time = 1;
  if (has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string NickName = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string DonateTitle = 4;
    if (has_donatetitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->donatetitle());
    }

    // optional string DonateUrl = 5;
    if (has_donateurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->donateurl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Donor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.Donor)
  GOOGLE_DCHECK_NE(&from, this);
  const Donor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Donor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.Donor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.Donor)
    MergeFrom(*source);
  }
}

void Donor::MergeFrom(const Donor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.Donor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_donatetitle();
      donatetitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.donatetitle_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_donateurl();
      donateurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.donateurl_);
    }
    if (cached_has_bits & 0x00000010u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Donor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.Donor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Donor::CopyFrom(const Donor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.Donor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Donor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  return true;
}

void Donor::Swap(Donor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Donor::InternalSwap(Donor* other) {
  username_.Swap(&other->username_);
  nickname_.Swap(&other->nickname_);
  donatetitle_.Swap(&other->donatetitle_);
  donateurl_.Swap(&other->donateurl_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Donor::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Donor

// required uint32 Time = 1;
bool Donor::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Donor::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
void Donor::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void Donor::clear_time() {
  time_ = 0u;
  clear_has_time();
}
::google::protobuf::uint32 Donor::time() const {
  // @@protoc_insertion_point(field_get:micromsg.Donor.Time)
  return time_;
}
void Donor::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:micromsg.Donor.Time)
}

// optional string UserName = 2;
bool Donor::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Donor::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void Donor::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void Donor::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& Donor::username() const {
  // @@protoc_insertion_point(field_get:micromsg.Donor.UserName)
  return username_.GetNoArena();
}
void Donor::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.Donor.UserName)
}
#if LANG_CXX11
void Donor::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.Donor.UserName)
}
#endif
void Donor::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.Donor.UserName)
}
void Donor::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.Donor.UserName)
}
::std::string* Donor::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.Donor.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Donor::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.Donor.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Donor::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.Donor.UserName)
}

// optional string NickName = 3;
bool Donor::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Donor::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void Donor::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void Donor::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& Donor::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.Donor.NickName)
  return nickname_.GetNoArena();
}
void Donor::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.Donor.NickName)
}
#if LANG_CXX11
void Donor::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.Donor.NickName)
}
#endif
void Donor::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.Donor.NickName)
}
void Donor::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.Donor.NickName)
}
::std::string* Donor::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.Donor.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Donor::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.Donor.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Donor::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.Donor.NickName)
}

// optional string DonateTitle = 4;
bool Donor::has_donatetitle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Donor::set_has_donatetitle() {
  _has_bits_[0] |= 0x00000004u;
}
void Donor::clear_has_donatetitle() {
  _has_bits_[0] &= ~0x00000004u;
}
void Donor::clear_donatetitle() {
  donatetitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_donatetitle();
}
const ::std::string& Donor::donatetitle() const {
  // @@protoc_insertion_point(field_get:micromsg.Donor.DonateTitle)
  return donatetitle_.GetNoArena();
}
void Donor::set_donatetitle(const ::std::string& value) {
  set_has_donatetitle();
  donatetitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.Donor.DonateTitle)
}
#if LANG_CXX11
void Donor::set_donatetitle(::std::string&& value) {
  set_has_donatetitle();
  donatetitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.Donor.DonateTitle)
}
#endif
void Donor::set_donatetitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_donatetitle();
  donatetitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.Donor.DonateTitle)
}
void Donor::set_donatetitle(const char* value, size_t size) {
  set_has_donatetitle();
  donatetitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.Donor.DonateTitle)
}
::std::string* Donor::mutable_donatetitle() {
  set_has_donatetitle();
  // @@protoc_insertion_point(field_mutable:micromsg.Donor.DonateTitle)
  return donatetitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Donor::release_donatetitle() {
  // @@protoc_insertion_point(field_release:micromsg.Donor.DonateTitle)
  clear_has_donatetitle();
  return donatetitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Donor::set_allocated_donatetitle(::std::string* donatetitle) {
  if (donatetitle != NULL) {
    set_has_donatetitle();
  } else {
    clear_has_donatetitle();
  }
  donatetitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), donatetitle);
  // @@protoc_insertion_point(field_set_allocated:micromsg.Donor.DonateTitle)
}

// optional string DonateUrl = 5;
bool Donor::has_donateurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Donor::set_has_donateurl() {
  _has_bits_[0] |= 0x00000008u;
}
void Donor::clear_has_donateurl() {
  _has_bits_[0] &= ~0x00000008u;
}
void Donor::clear_donateurl() {
  donateurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_donateurl();
}
const ::std::string& Donor::donateurl() const {
  // @@protoc_insertion_point(field_get:micromsg.Donor.DonateUrl)
  return donateurl_.GetNoArena();
}
void Donor::set_donateurl(const ::std::string& value) {
  set_has_donateurl();
  donateurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.Donor.DonateUrl)
}
#if LANG_CXX11
void Donor::set_donateurl(::std::string&& value) {
  set_has_donateurl();
  donateurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.Donor.DonateUrl)
}
#endif
void Donor::set_donateurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_donateurl();
  donateurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.Donor.DonateUrl)
}
void Donor::set_donateurl(const char* value, size_t size) {
  set_has_donateurl();
  donateurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.Donor.DonateUrl)
}
::std::string* Donor::mutable_donateurl() {
  set_has_donateurl();
  // @@protoc_insertion_point(field_mutable:micromsg.Donor.DonateUrl)
  return donateurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Donor::release_donateurl() {
  // @@protoc_insertion_point(field_release:micromsg.Donor.DonateUrl)
  clear_has_donateurl();
  return donateurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Donor::set_allocated_donateurl(::std::string* donateurl) {
  if (donateurl != NULL) {
    set_has_donateurl();
  } else {
    clear_has_donateurl();
  }
  donateurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), donateurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.Donor.DonateUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChatRoomDonateHistoryResp::kBaseResponseFieldNumber;
const int GetChatRoomDonateHistoryResp::kTotalCountFieldNumber;
const int GetChatRoomDonateHistoryResp::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChatRoomDonateHistoryResp::GetChatRoomDonateHistoryResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetChatRoomDonateHistoryResp)
}
GetChatRoomDonateHistoryResp::GetChatRoomDonateHistoryResp(const GetChatRoomDonateHistoryResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  totalcount_ = from.totalcount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetChatRoomDonateHistoryResp)
}

void GetChatRoomDonateHistoryResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&totalcount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(totalcount_));
}

GetChatRoomDonateHistoryResp::~GetChatRoomDonateHistoryResp() {
  // @@protoc_insertion_point(destructor:micromsg.GetChatRoomDonateHistoryResp)
  SharedDtor();
}

void GetChatRoomDonateHistoryResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetChatRoomDonateHistoryResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChatRoomDonateHistoryResp::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChatRoomDonateHistoryResp& GetChatRoomDonateHistoryResp::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetChatRoomDonateHistoryResp* GetChatRoomDonateHistoryResp::New(::google::protobuf::Arena* arena) const {
  GetChatRoomDonateHistoryResp* n = new GetChatRoomDonateHistoryResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetChatRoomDonateHistoryResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetChatRoomDonateHistoryResp)
  list_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  totalcount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetChatRoomDonateHistoryResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetChatRoomDonateHistoryResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TotalCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_totalcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.Donor List = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetChatRoomDonateHistoryResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetChatRoomDonateHistoryResp)
  return false;
#undef DO_
}

void GetChatRoomDonateHistoryResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetChatRoomDonateHistoryResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 TotalCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totalcount(), output);
  }

  // repeated .micromsg.Donor List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetChatRoomDonateHistoryResp)
}

::google::protobuf::uint8* GetChatRoomDonateHistoryResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetChatRoomDonateHistoryResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 TotalCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->totalcount(), target);
  }

  // repeated .micromsg.Donor List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetChatRoomDonateHistoryResp)
  return target;
}

size_t GetChatRoomDonateHistoryResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetChatRoomDonateHistoryResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_totalcount()) {
    // required uint32 TotalCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalcount());
  }

  return total_size;
}
size_t GetChatRoomDonateHistoryResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetChatRoomDonateHistoryResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 TotalCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.Donor List = 3;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChatRoomDonateHistoryResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetChatRoomDonateHistoryResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatRoomDonateHistoryResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChatRoomDonateHistoryResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetChatRoomDonateHistoryResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetChatRoomDonateHistoryResp)
    MergeFrom(*source);
  }
}

void GetChatRoomDonateHistoryResp::MergeFrom(const GetChatRoomDonateHistoryResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetChatRoomDonateHistoryResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      totalcount_ = from.totalcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetChatRoomDonateHistoryResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetChatRoomDonateHistoryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatRoomDonateHistoryResp::CopyFrom(const GetChatRoomDonateHistoryResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetChatRoomDonateHistoryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatRoomDonateHistoryResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetChatRoomDonateHistoryResp::Swap(GetChatRoomDonateHistoryResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChatRoomDonateHistoryResp::InternalSwap(GetChatRoomDonateHistoryResp* other) {
  list_.InternalSwap(&other->list_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(totalcount_, other->totalcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetChatRoomDonateHistoryResp::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetChatRoomDonateHistoryResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetChatRoomDonateHistoryResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetChatRoomDonateHistoryResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetChatRoomDonateHistoryResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetChatRoomDonateHistoryResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetChatRoomDonateHistoryResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomDonateHistoryResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetChatRoomDonateHistoryResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomDonateHistoryResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetChatRoomDonateHistoryResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomDonateHistoryResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetChatRoomDonateHistoryResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomDonateHistoryResp.BaseResponse)
}

// required uint32 TotalCount = 2;
bool GetChatRoomDonateHistoryResp::has_totalcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetChatRoomDonateHistoryResp::set_has_totalcount() {
  _has_bits_[0] |= 0x00000002u;
}
void GetChatRoomDonateHistoryResp::clear_has_totalcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetChatRoomDonateHistoryResp::clear_totalcount() {
  totalcount_ = 0u;
  clear_has_totalcount();
}
::google::protobuf::uint32 GetChatRoomDonateHistoryResp::totalcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomDonateHistoryResp.TotalCount)
  return totalcount_;
}
void GetChatRoomDonateHistoryResp::set_totalcount(::google::protobuf::uint32 value) {
  set_has_totalcount();
  totalcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomDonateHistoryResp.TotalCount)
}

// repeated .micromsg.Donor List = 3;
int GetChatRoomDonateHistoryResp::list_size() const {
  return list_.size();
}
void GetChatRoomDonateHistoryResp::clear_list() {
  list_.Clear();
}
const ::micromsg::Donor& GetChatRoomDonateHistoryResp::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomDonateHistoryResp.List)
  return list_.Get(index);
}
::micromsg::Donor* GetChatRoomDonateHistoryResp::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomDonateHistoryResp.List)
  return list_.Mutable(index);
}
::micromsg::Donor* GetChatRoomDonateHistoryResp::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.GetChatRoomDonateHistoryResp.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::Donor >*
GetChatRoomDonateHistoryResp::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetChatRoomDonateHistoryResp.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::Donor >&
GetChatRoomDonateHistoryResp::list() const {
  // @@protoc_insertion_point(field_list:micromsg.GetChatRoomDonateHistoryResp.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChatRoomPresentHistoryReq::kBaseRequestFieldNumber;
const int GetChatRoomPresentHistoryReq::kChatRoomNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChatRoomPresentHistoryReq::GetChatRoomPresentHistoryReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetChatRoomPresentHistoryReq)
}
GetChatRoomPresentHistoryReq::GetChatRoomPresentHistoryReq(const GetChatRoomPresentHistoryReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomname()) {
    chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetChatRoomPresentHistoryReq)
}

void GetChatRoomPresentHistoryReq::SharedCtor() {
  _cached_size_ = 0;
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

GetChatRoomPresentHistoryReq::~GetChatRoomPresentHistoryReq() {
  // @@protoc_insertion_point(destructor:micromsg.GetChatRoomPresentHistoryReq)
  SharedDtor();
}

void GetChatRoomPresentHistoryReq::SharedDtor() {
  chatroomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetChatRoomPresentHistoryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChatRoomPresentHistoryReq::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChatRoomPresentHistoryReq& GetChatRoomPresentHistoryReq::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetChatRoomPresentHistoryReq* GetChatRoomPresentHistoryReq::New(::google::protobuf::Arena* arena) const {
  GetChatRoomPresentHistoryReq* n = new GetChatRoomPresentHistoryReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetChatRoomPresentHistoryReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetChatRoomPresentHistoryReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_chatroomname()) {
      GOOGLE_DCHECK(!chatroomname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomname_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetChatRoomPresentHistoryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetChatRoomPresentHistoryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ChatRoomName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomname().data(), this->chatroomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetChatRoomPresentHistoryReq.ChatRoomName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetChatRoomPresentHistoryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetChatRoomPresentHistoryReq)
  return false;
#undef DO_
}

void GetChatRoomPresentHistoryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetChatRoomPresentHistoryReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomPresentHistoryReq.ChatRoomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chatroomname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetChatRoomPresentHistoryReq)
}

::google::protobuf::uint8* GetChatRoomPresentHistoryReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetChatRoomPresentHistoryReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomPresentHistoryReq.ChatRoomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatroomname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetChatRoomPresentHistoryReq)
  return target;
}

size_t GetChatRoomPresentHistoryReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetChatRoomPresentHistoryReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string ChatRoomName = 2;
  if (has_chatroomname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatroomname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChatRoomPresentHistoryReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetChatRoomPresentHistoryReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatRoomPresentHistoryReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChatRoomPresentHistoryReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetChatRoomPresentHistoryReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetChatRoomPresentHistoryReq)
    MergeFrom(*source);
  }
}

void GetChatRoomPresentHistoryReq::MergeFrom(const GetChatRoomPresentHistoryReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetChatRoomPresentHistoryReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chatroomname();
      chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void GetChatRoomPresentHistoryReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetChatRoomPresentHistoryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatRoomPresentHistoryReq::CopyFrom(const GetChatRoomPresentHistoryReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetChatRoomPresentHistoryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatRoomPresentHistoryReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetChatRoomPresentHistoryReq::Swap(GetChatRoomPresentHistoryReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChatRoomPresentHistoryReq::InternalSwap(GetChatRoomPresentHistoryReq* other) {
  chatroomname_.Swap(&other->chatroomname_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetChatRoomPresentHistoryReq::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetChatRoomPresentHistoryReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetChatRoomPresentHistoryReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetChatRoomPresentHistoryReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GetChatRoomPresentHistoryReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetChatRoomPresentHistoryReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetChatRoomPresentHistoryReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomPresentHistoryReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetChatRoomPresentHistoryReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomPresentHistoryReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetChatRoomPresentHistoryReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomPresentHistoryReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetChatRoomPresentHistoryReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomPresentHistoryReq.BaseRequest)
}

// optional string ChatRoomName = 2;
bool GetChatRoomPresentHistoryReq::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetChatRoomPresentHistoryReq::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
void GetChatRoomPresentHistoryReq::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetChatRoomPresentHistoryReq::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
const ::std::string& GetChatRoomPresentHistoryReq::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomPresentHistoryReq.ChatRoomName)
  return chatroomname_.GetNoArena();
}
void GetChatRoomPresentHistoryReq::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomPresentHistoryReq.ChatRoomName)
}
#if LANG_CXX11
void GetChatRoomPresentHistoryReq::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomPresentHistoryReq.ChatRoomName)
}
#endif
void GetChatRoomPresentHistoryReq::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomPresentHistoryReq.ChatRoomName)
}
void GetChatRoomPresentHistoryReq::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomPresentHistoryReq.ChatRoomName)
}
::std::string* GetChatRoomPresentHistoryReq::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomPresentHistoryReq.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetChatRoomPresentHistoryReq::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomPresentHistoryReq.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetChatRoomPresentHistoryReq::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomPresentHistoryReq.ChatRoomName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Presentation::kTimeFieldNumber;
const int Presentation::kUserNameFieldNumber;
const int Presentation::kNickNameFieldNumber;
const int Presentation::kTitleFieldNumber;
const int Presentation::kPriceFieldNumber;
const int Presentation::kWebUrlFieldNumber;
const int Presentation::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Presentation::Presentation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.Presentation)
}
Presentation::Presentation(const Presentation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  weburl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weburl()) {
    weburl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weburl_);
  }
  ::memcpy(&time_, &from.time_,
    reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&time_) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:micromsg.Presentation)
}

void Presentation::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weburl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&time_) + sizeof(num_));
}

Presentation::~Presentation() {
  // @@protoc_insertion_point(destructor:micromsg.Presentation)
  SharedDtor();
}

void Presentation::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weburl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Presentation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Presentation::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Presentation& Presentation::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

Presentation* Presentation::New(::google::protobuf::Arena* arena) const {
  Presentation* n = new Presentation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Presentation::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.Presentation)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_weburl()) {
      GOOGLE_DCHECK(!weburl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*weburl_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 112u) {
    ::memset(&time_, 0, reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&time_) + sizeof(num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Presentation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.Presentation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.Presentation.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string NickName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.Presentation.NickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Title = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.Presentation.Title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Price = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string WebUrl = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weburl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weburl().data(), this->weburl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.Presentation.WebUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Num = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.Presentation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.Presentation)
  return false;
#undef DO_
}

void Presentation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.Presentation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Time = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Presentation.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string NickName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Presentation.NickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional string Title = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Presentation.Title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->title(), output);
  }

  // required uint32 Price = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->price(), output);
  }

  // optional string WebUrl = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weburl().data(), this->weburl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Presentation.WebUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->weburl(), output);
  }

  // required uint32 Num = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.Presentation)
}

::google::protobuf::uint8* Presentation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.Presentation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Time = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Presentation.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string NickName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Presentation.NickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional string Title = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Presentation.Title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // required uint32 Price = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->price(), target);
  }

  // optional string WebUrl = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weburl().data(), this->weburl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Presentation.WebUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->weburl(), target);
  }

  // required uint32 Num = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.Presentation)
  return target;
}

size_t Presentation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.Presentation)
  size_t total_size = 0;

  if (has_time()) {
    // required uint32 Time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  if (has_price()) {
    // required uint32 Price = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->price());
  }

  if (has_num()) {
    // required uint32 Num = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());
  }

  return total_size;
}
size_t Presentation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.Presentation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000070) ^ 0x00000070) == 0) {  // All required fields are present.
    // required uint32 Time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());

    // required uint32 Price = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->price());

    // required uint32 Num = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string NickName = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string Title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string WebUrl = 6;
    if (has_weburl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weburl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Presentation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.Presentation)
  GOOGLE_DCHECK_NE(&from, this);
  const Presentation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Presentation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.Presentation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.Presentation)
    MergeFrom(*source);
  }
}

void Presentation::MergeFrom(const Presentation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.Presentation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_weburl();
      weburl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weburl_);
    }
    if (cached_has_bits & 0x00000010u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000020u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Presentation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.Presentation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Presentation::CopyFrom(const Presentation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.Presentation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Presentation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000070) != 0x00000070) return false;
  return true;
}

void Presentation::Swap(Presentation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Presentation::InternalSwap(Presentation* other) {
  username_.Swap(&other->username_);
  nickname_.Swap(&other->nickname_);
  title_.Swap(&other->title_);
  weburl_.Swap(&other->weburl_);
  std::swap(time_, other->time_);
  std::swap(price_, other->price_);
  std::swap(num_, other->num_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Presentation::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Presentation

// required uint32 Time = 1;
bool Presentation::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Presentation::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
void Presentation::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void Presentation::clear_time() {
  time_ = 0u;
  clear_has_time();
}
::google::protobuf::uint32 Presentation::time() const {
  // @@protoc_insertion_point(field_get:micromsg.Presentation.Time)
  return time_;
}
void Presentation::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:micromsg.Presentation.Time)
}

// optional string UserName = 2;
bool Presentation::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Presentation::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void Presentation::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void Presentation::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& Presentation::username() const {
  // @@protoc_insertion_point(field_get:micromsg.Presentation.UserName)
  return username_.GetNoArena();
}
void Presentation::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.Presentation.UserName)
}
#if LANG_CXX11
void Presentation::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.Presentation.UserName)
}
#endif
void Presentation::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.Presentation.UserName)
}
void Presentation::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.Presentation.UserName)
}
::std::string* Presentation::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.Presentation.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Presentation::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.Presentation.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Presentation::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.Presentation.UserName)
}

// optional string NickName = 3;
bool Presentation::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Presentation::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void Presentation::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void Presentation::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& Presentation::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.Presentation.NickName)
  return nickname_.GetNoArena();
}
void Presentation::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.Presentation.NickName)
}
#if LANG_CXX11
void Presentation::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.Presentation.NickName)
}
#endif
void Presentation::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.Presentation.NickName)
}
void Presentation::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.Presentation.NickName)
}
::std::string* Presentation::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.Presentation.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Presentation::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.Presentation.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Presentation::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.Presentation.NickName)
}

// optional string Title = 4;
bool Presentation::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Presentation::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
void Presentation::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
void Presentation::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& Presentation::title() const {
  // @@protoc_insertion_point(field_get:micromsg.Presentation.Title)
  return title_.GetNoArena();
}
void Presentation::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.Presentation.Title)
}
#if LANG_CXX11
void Presentation::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.Presentation.Title)
}
#endif
void Presentation::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.Presentation.Title)
}
void Presentation::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.Presentation.Title)
}
::std::string* Presentation::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:micromsg.Presentation.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Presentation::release_title() {
  // @@protoc_insertion_point(field_release:micromsg.Presentation.Title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Presentation::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:micromsg.Presentation.Title)
}

// required uint32 Price = 5;
bool Presentation::has_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Presentation::set_has_price() {
  _has_bits_[0] |= 0x00000020u;
}
void Presentation::clear_has_price() {
  _has_bits_[0] &= ~0x00000020u;
}
void Presentation::clear_price() {
  price_ = 0u;
  clear_has_price();
}
::google::protobuf::uint32 Presentation::price() const {
  // @@protoc_insertion_point(field_get:micromsg.Presentation.Price)
  return price_;
}
void Presentation::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:micromsg.Presentation.Price)
}

// optional string WebUrl = 6;
bool Presentation::has_weburl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Presentation::set_has_weburl() {
  _has_bits_[0] |= 0x00000008u;
}
void Presentation::clear_has_weburl() {
  _has_bits_[0] &= ~0x00000008u;
}
void Presentation::clear_weburl() {
  weburl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weburl();
}
const ::std::string& Presentation::weburl() const {
  // @@protoc_insertion_point(field_get:micromsg.Presentation.WebUrl)
  return weburl_.GetNoArena();
}
void Presentation::set_weburl(const ::std::string& value) {
  set_has_weburl();
  weburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.Presentation.WebUrl)
}
#if LANG_CXX11
void Presentation::set_weburl(::std::string&& value) {
  set_has_weburl();
  weburl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.Presentation.WebUrl)
}
#endif
void Presentation::set_weburl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weburl();
  weburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.Presentation.WebUrl)
}
void Presentation::set_weburl(const char* value, size_t size) {
  set_has_weburl();
  weburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.Presentation.WebUrl)
}
::std::string* Presentation::mutable_weburl() {
  set_has_weburl();
  // @@protoc_insertion_point(field_mutable:micromsg.Presentation.WebUrl)
  return weburl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Presentation::release_weburl() {
  // @@protoc_insertion_point(field_release:micromsg.Presentation.WebUrl)
  clear_has_weburl();
  return weburl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Presentation::set_allocated_weburl(::std::string* weburl) {
  if (weburl != NULL) {
    set_has_weburl();
  } else {
    clear_has_weburl();
  }
  weburl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weburl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.Presentation.WebUrl)
}

// required uint32 Num = 7;
bool Presentation::has_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Presentation::set_has_num() {
  _has_bits_[0] |= 0x00000040u;
}
void Presentation::clear_has_num() {
  _has_bits_[0] &= ~0x00000040u;
}
void Presentation::clear_num() {
  num_ = 0u;
  clear_has_num();
}
::google::protobuf::uint32 Presentation::num() const {
  // @@protoc_insertion_point(field_get:micromsg.Presentation.Num)
  return num_;
}
void Presentation::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:micromsg.Presentation.Num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChatRoomPresentHistoryResp::kBaseResponseFieldNumber;
const int GetChatRoomPresentHistoryResp::kTotalCountFieldNumber;
const int GetChatRoomPresentHistoryResp::kListFieldNumber;
const int GetChatRoomPresentHistoryResp::kUrlFieldNumber;
const int GetChatRoomPresentHistoryResp::kDonateStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChatRoomPresentHistoryResp::GetChatRoomPresentHistoryResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetChatRoomPresentHistoryResp)
}
GetChatRoomPresentHistoryResp::GetChatRoomPresentHistoryResp(const GetChatRoomPresentHistoryResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&totalcount_, &from.totalcount_,
    reinterpret_cast<char*>(&donatestatus_) -
    reinterpret_cast<char*>(&totalcount_) + sizeof(donatestatus_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetChatRoomPresentHistoryResp)
}

void GetChatRoomPresentHistoryResp::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&donatestatus_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(donatestatus_));
}

GetChatRoomPresentHistoryResp::~GetChatRoomPresentHistoryResp() {
  // @@protoc_insertion_point(destructor:micromsg.GetChatRoomPresentHistoryResp)
  SharedDtor();
}

void GetChatRoomPresentHistoryResp::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetChatRoomPresentHistoryResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChatRoomPresentHistoryResp::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChatRoomPresentHistoryResp& GetChatRoomPresentHistoryResp::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetChatRoomPresentHistoryResp* GetChatRoomPresentHistoryResp::New(::google::protobuf::Arena* arena) const {
  GetChatRoomPresentHistoryResp* n = new GetChatRoomPresentHistoryResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetChatRoomPresentHistoryResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetChatRoomPresentHistoryResp)
  list_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&totalcount_, 0, reinterpret_cast<char*>(&donatestatus_) -
      reinterpret_cast<char*>(&totalcount_) + sizeof(donatestatus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetChatRoomPresentHistoryResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetChatRoomPresentHistoryResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TotalCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_totalcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.Presentation List = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Url = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetChatRoomPresentHistoryResp.Url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DonateStatus = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_donatestatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donatestatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetChatRoomPresentHistoryResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetChatRoomPresentHistoryResp)
  return false;
#undef DO_
}

void GetChatRoomPresentHistoryResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetChatRoomPresentHistoryResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 TotalCount = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totalcount(), output);
  }

  // repeated .micromsg.Presentation List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  // optional string Url = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomPresentHistoryResp.Url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->url(), output);
  }

  // required uint32 DonateStatus = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->donatestatus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetChatRoomPresentHistoryResp)
}

::google::protobuf::uint8* GetChatRoomPresentHistoryResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetChatRoomPresentHistoryResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 TotalCount = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->totalcount(), target);
  }

  // repeated .micromsg.Presentation List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->list(i), deterministic, target);
  }

  // optional string Url = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomPresentHistoryResp.Url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url(), target);
  }

  // required uint32 DonateStatus = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->donatestatus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetChatRoomPresentHistoryResp)
  return target;
}

size_t GetChatRoomPresentHistoryResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetChatRoomPresentHistoryResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_totalcount()) {
    // required uint32 TotalCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalcount());
  }

  if (has_donatestatus()) {
    // required uint32 DonateStatus = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->donatestatus());
  }

  return total_size;
}
size_t GetChatRoomPresentHistoryResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetChatRoomPresentHistoryResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 TotalCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalcount());

    // required uint32 DonateStatus = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->donatestatus());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.Presentation List = 3;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  // optional string Url = 4;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChatRoomPresentHistoryResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetChatRoomPresentHistoryResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatRoomPresentHistoryResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChatRoomPresentHistoryResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetChatRoomPresentHistoryResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetChatRoomPresentHistoryResp)
    MergeFrom(*source);
  }
}

void GetChatRoomPresentHistoryResp::MergeFrom(const GetChatRoomPresentHistoryResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetChatRoomPresentHistoryResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      totalcount_ = from.totalcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      donatestatus_ = from.donatestatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetChatRoomPresentHistoryResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetChatRoomPresentHistoryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatRoomPresentHistoryResp::CopyFrom(const GetChatRoomPresentHistoryResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetChatRoomPresentHistoryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatRoomPresentHistoryResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetChatRoomPresentHistoryResp::Swap(GetChatRoomPresentHistoryResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChatRoomPresentHistoryResp::InternalSwap(GetChatRoomPresentHistoryResp* other) {
  list_.InternalSwap(&other->list_);
  url_.Swap(&other->url_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(totalcount_, other->totalcount_);
  std::swap(donatestatus_, other->donatestatus_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetChatRoomPresentHistoryResp::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetChatRoomPresentHistoryResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetChatRoomPresentHistoryResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetChatRoomPresentHistoryResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void GetChatRoomPresentHistoryResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetChatRoomPresentHistoryResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetChatRoomPresentHistoryResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomPresentHistoryResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetChatRoomPresentHistoryResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomPresentHistoryResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetChatRoomPresentHistoryResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomPresentHistoryResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetChatRoomPresentHistoryResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomPresentHistoryResp.BaseResponse)
}

// required uint32 TotalCount = 2;
bool GetChatRoomPresentHistoryResp::has_totalcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetChatRoomPresentHistoryResp::set_has_totalcount() {
  _has_bits_[0] |= 0x00000004u;
}
void GetChatRoomPresentHistoryResp::clear_has_totalcount() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetChatRoomPresentHistoryResp::clear_totalcount() {
  totalcount_ = 0u;
  clear_has_totalcount();
}
::google::protobuf::uint32 GetChatRoomPresentHistoryResp::totalcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomPresentHistoryResp.TotalCount)
  return totalcount_;
}
void GetChatRoomPresentHistoryResp::set_totalcount(::google::protobuf::uint32 value) {
  set_has_totalcount();
  totalcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomPresentHistoryResp.TotalCount)
}

// repeated .micromsg.Presentation List = 3;
int GetChatRoomPresentHistoryResp::list_size() const {
  return list_.size();
}
void GetChatRoomPresentHistoryResp::clear_list() {
  list_.Clear();
}
const ::micromsg::Presentation& GetChatRoomPresentHistoryResp::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomPresentHistoryResp.List)
  return list_.Get(index);
}
::micromsg::Presentation* GetChatRoomPresentHistoryResp::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomPresentHistoryResp.List)
  return list_.Mutable(index);
}
::micromsg::Presentation* GetChatRoomPresentHistoryResp::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.GetChatRoomPresentHistoryResp.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::Presentation >*
GetChatRoomPresentHistoryResp::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetChatRoomPresentHistoryResp.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::Presentation >&
GetChatRoomPresentHistoryResp::list() const {
  // @@protoc_insertion_point(field_list:micromsg.GetChatRoomPresentHistoryResp.List)
  return list_;
}

// optional string Url = 4;
bool GetChatRoomPresentHistoryResp::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetChatRoomPresentHistoryResp::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void GetChatRoomPresentHistoryResp::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetChatRoomPresentHistoryResp::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& GetChatRoomPresentHistoryResp::url() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomPresentHistoryResp.Url)
  return url_.GetNoArena();
}
void GetChatRoomPresentHistoryResp::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomPresentHistoryResp.Url)
}
#if LANG_CXX11
void GetChatRoomPresentHistoryResp::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomPresentHistoryResp.Url)
}
#endif
void GetChatRoomPresentHistoryResp::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomPresentHistoryResp.Url)
}
void GetChatRoomPresentHistoryResp::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomPresentHistoryResp.Url)
}
::std::string* GetChatRoomPresentHistoryResp::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomPresentHistoryResp.Url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetChatRoomPresentHistoryResp::release_url() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomPresentHistoryResp.Url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetChatRoomPresentHistoryResp::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomPresentHistoryResp.Url)
}

// required uint32 DonateStatus = 5;
bool GetChatRoomPresentHistoryResp::has_donatestatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetChatRoomPresentHistoryResp::set_has_donatestatus() {
  _has_bits_[0] |= 0x00000008u;
}
void GetChatRoomPresentHistoryResp::clear_has_donatestatus() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetChatRoomPresentHistoryResp::clear_donatestatus() {
  donatestatus_ = 0u;
  clear_has_donatestatus();
}
::google::protobuf::uint32 GetChatRoomPresentHistoryResp::donatestatus() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomPresentHistoryResp.DonateStatus)
  return donatestatus_;
}
void GetChatRoomPresentHistoryResp::set_donatestatus(::google::protobuf::uint32 value) {
  set_has_donatestatus();
  donatestatus_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomPresentHistoryResp.DonateStatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPersonalDonateHistoryReq::kBaseRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPersonalDonateHistoryReq::GetPersonalDonateHistoryReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetPersonalDonateHistoryReq)
}
GetPersonalDonateHistoryReq::GetPersonalDonateHistoryReq(const GetPersonalDonateHistoryReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetPersonalDonateHistoryReq)
}

void GetPersonalDonateHistoryReq::SharedCtor() {
  _cached_size_ = 0;
  baserequest_ = NULL;
}

GetPersonalDonateHistoryReq::~GetPersonalDonateHistoryReq() {
  // @@protoc_insertion_point(destructor:micromsg.GetPersonalDonateHistoryReq)
  SharedDtor();
}

void GetPersonalDonateHistoryReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetPersonalDonateHistoryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPersonalDonateHistoryReq::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPersonalDonateHistoryReq& GetPersonalDonateHistoryReq::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPersonalDonateHistoryReq* GetPersonalDonateHistoryReq::New(::google::protobuf::Arena* arena) const {
  GetPersonalDonateHistoryReq* n = new GetPersonalDonateHistoryReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPersonalDonateHistoryReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetPersonalDonateHistoryReq)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetPersonalDonateHistoryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetPersonalDonateHistoryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetPersonalDonateHistoryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetPersonalDonateHistoryReq)
  return false;
#undef DO_
}

void GetPersonalDonateHistoryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetPersonalDonateHistoryReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetPersonalDonateHistoryReq)
}

::google::protobuf::uint8* GetPersonalDonateHistoryReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetPersonalDonateHistoryReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetPersonalDonateHistoryReq)
  return target;
}

size_t GetPersonalDonateHistoryReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetPersonalDonateHistoryReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPersonalDonateHistoryReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetPersonalDonateHistoryReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPersonalDonateHistoryReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPersonalDonateHistoryReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetPersonalDonateHistoryReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetPersonalDonateHistoryReq)
    MergeFrom(*source);
  }
}

void GetPersonalDonateHistoryReq::MergeFrom(const GetPersonalDonateHistoryReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetPersonalDonateHistoryReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baserequest()) {
    mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
  }
}

void GetPersonalDonateHistoryReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetPersonalDonateHistoryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPersonalDonateHistoryReq::CopyFrom(const GetPersonalDonateHistoryReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetPersonalDonateHistoryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPersonalDonateHistoryReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetPersonalDonateHistoryReq::Swap(GetPersonalDonateHistoryReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPersonalDonateHistoryReq::InternalSwap(GetPersonalDonateHistoryReq* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPersonalDonateHistoryReq::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPersonalDonateHistoryReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetPersonalDonateHistoryReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetPersonalDonateHistoryReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void GetPersonalDonateHistoryReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetPersonalDonateHistoryReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetPersonalDonateHistoryReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPersonalDonateHistoryReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetPersonalDonateHistoryReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetPersonalDonateHistoryReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetPersonalDonateHistoryReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetPersonalDonateHistoryReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetPersonalDonateHistoryReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPersonalDonateHistoryReq.BaseRequest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DonateHistory::kTimeFieldNumber;
const int DonateHistory::kDonateTitleFieldNumber;
const int DonateHistory::kDonateUrlFieldNumber;
const int DonateHistory::kPriceFieldNumber;
const int DonateHistory::kDonateThumbUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DonateHistory::DonateHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DonateHistory)
}
DonateHistory::DonateHistory(const DonateHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  donatetitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_donatetitle()) {
    donatetitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.donatetitle_);
  }
  donateurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_donateurl()) {
    donateurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.donateurl_);
  }
  donatethumburl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_donatethumburl()) {
    donatethumburl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.donatethumburl_);
  }
  ::memcpy(&time_, &from.time_,
    reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&time_) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:micromsg.DonateHistory)
}

void DonateHistory::SharedCtor() {
  _cached_size_ = 0;
  donatetitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  donateurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  donatethumburl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&time_) + sizeof(price_));
}

DonateHistory::~DonateHistory() {
  // @@protoc_insertion_point(destructor:micromsg.DonateHistory)
  SharedDtor();
}

void DonateHistory::SharedDtor() {
  donatetitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  donateurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  donatethumburl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DonateHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DonateHistory::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DonateHistory& DonateHistory::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

DonateHistory* DonateHistory::New(::google::protobuf::Arena* arena) const {
  DonateHistory* n = new DonateHistory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DonateHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DonateHistory)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_donatetitle()) {
      GOOGLE_DCHECK(!donatetitle_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*donatetitle_.UnsafeRawStringPointer())->clear();
    }
    if (has_donateurl()) {
      GOOGLE_DCHECK(!donateurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*donateurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_donatethumburl()) {
      GOOGLE_DCHECK(!donatethumburl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*donatethumburl_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&time_, 0, reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&time_) + sizeof(price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DonateHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DonateHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DonateTitle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_donatetitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->donatetitle().data(), this->donatetitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.DonateHistory.DonateTitle");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DonateUrl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_donateurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->donateurl().data(), this->donateurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.DonateHistory.DonateUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DonateThumbUrl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_donatethumburl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->donatethumburl().data(), this->donatethumburl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.DonateHistory.DonateThumbUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DonateHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DonateHistory)
  return false;
#undef DO_
}

void DonateHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DonateHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Time = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional string DonateTitle = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->donatetitle().data(), this->donatetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DonateHistory.DonateTitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->donatetitle(), output);
  }

  // optional string DonateUrl = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->donateurl().data(), this->donateurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DonateHistory.DonateUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->donateurl(), output);
  }

  // required uint32 Price = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->price(), output);
  }

  // optional string DonateThumbUrl = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->donatethumburl().data(), this->donatethumburl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DonateHistory.DonateThumbUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->donatethumburl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DonateHistory)
}

::google::protobuf::uint8* DonateHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DonateHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Time = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional string DonateTitle = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->donatetitle().data(), this->donatetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DonateHistory.DonateTitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->donatetitle(), target);
  }

  // optional string DonateUrl = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->donateurl().data(), this->donateurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DonateHistory.DonateUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->donateurl(), target);
  }

  // required uint32 Price = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->price(), target);
  }

  // optional string DonateThumbUrl = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->donatethumburl().data(), this->donatethumburl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DonateHistory.DonateThumbUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->donatethumburl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DonateHistory)
  return target;
}

size_t DonateHistory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.DonateHistory)
  size_t total_size = 0;

  if (has_time()) {
    // required uint32 Time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  if (has_price()) {
    // required uint32 Price = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->price());
  }

  return total_size;
}
size_t DonateHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DonateHistory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000018) ^ 0x00000018) == 0) {  // All required fields are present.
    // required uint32 Time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());

    // required uint32 Price = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->price());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string DonateTitle = 2;
    if (has_donatetitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->donatetitle());
    }

    // optional string DonateUrl = 3;
    if (has_donateurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->donateurl());
    }

    // optional string DonateThumbUrl = 5;
    if (has_donatethumburl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->donatethumburl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DonateHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DonateHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const DonateHistory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DonateHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DonateHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DonateHistory)
    MergeFrom(*source);
  }
}

void DonateHistory::MergeFrom(const DonateHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DonateHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_donatetitle();
      donatetitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.donatetitle_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_donateurl();
      donateurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.donateurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_donatethumburl();
      donatethumburl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.donatethumburl_);
    }
    if (cached_has_bits & 0x00000008u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000010u) {
      price_ = from.price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DonateHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DonateHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DonateHistory::CopyFrom(const DonateHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DonateHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DonateHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;
  return true;
}

void DonateHistory::Swap(DonateHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DonateHistory::InternalSwap(DonateHistory* other) {
  donatetitle_.Swap(&other->donatetitle_);
  donateurl_.Swap(&other->donateurl_);
  donatethumburl_.Swap(&other->donatethumburl_);
  std::swap(time_, other->time_);
  std::swap(price_, other->price_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DonateHistory::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DonateHistory

// required uint32 Time = 1;
bool DonateHistory::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DonateHistory::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
void DonateHistory::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void DonateHistory::clear_time() {
  time_ = 0u;
  clear_has_time();
}
::google::protobuf::uint32 DonateHistory::time() const {
  // @@protoc_insertion_point(field_get:micromsg.DonateHistory.Time)
  return time_;
}
void DonateHistory::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DonateHistory.Time)
}

// optional string DonateTitle = 2;
bool DonateHistory::has_donatetitle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DonateHistory::set_has_donatetitle() {
  _has_bits_[0] |= 0x00000001u;
}
void DonateHistory::clear_has_donatetitle() {
  _has_bits_[0] &= ~0x00000001u;
}
void DonateHistory::clear_donatetitle() {
  donatetitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_donatetitle();
}
const ::std::string& DonateHistory::donatetitle() const {
  // @@protoc_insertion_point(field_get:micromsg.DonateHistory.DonateTitle)
  return donatetitle_.GetNoArena();
}
void DonateHistory::set_donatetitle(const ::std::string& value) {
  set_has_donatetitle();
  donatetitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DonateHistory.DonateTitle)
}
#if LANG_CXX11
void DonateHistory::set_donatetitle(::std::string&& value) {
  set_has_donatetitle();
  donatetitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DonateHistory.DonateTitle)
}
#endif
void DonateHistory::set_donatetitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_donatetitle();
  donatetitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DonateHistory.DonateTitle)
}
void DonateHistory::set_donatetitle(const char* value, size_t size) {
  set_has_donatetitle();
  donatetitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DonateHistory.DonateTitle)
}
::std::string* DonateHistory::mutable_donatetitle() {
  set_has_donatetitle();
  // @@protoc_insertion_point(field_mutable:micromsg.DonateHistory.DonateTitle)
  return donatetitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DonateHistory::release_donatetitle() {
  // @@protoc_insertion_point(field_release:micromsg.DonateHistory.DonateTitle)
  clear_has_donatetitle();
  return donatetitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DonateHistory::set_allocated_donatetitle(::std::string* donatetitle) {
  if (donatetitle != NULL) {
    set_has_donatetitle();
  } else {
    clear_has_donatetitle();
  }
  donatetitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), donatetitle);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DonateHistory.DonateTitle)
}

// optional string DonateUrl = 3;
bool DonateHistory::has_donateurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DonateHistory::set_has_donateurl() {
  _has_bits_[0] |= 0x00000002u;
}
void DonateHistory::clear_has_donateurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void DonateHistory::clear_donateurl() {
  donateurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_donateurl();
}
const ::std::string& DonateHistory::donateurl() const {
  // @@protoc_insertion_point(field_get:micromsg.DonateHistory.DonateUrl)
  return donateurl_.GetNoArena();
}
void DonateHistory::set_donateurl(const ::std::string& value) {
  set_has_donateurl();
  donateurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DonateHistory.DonateUrl)
}
#if LANG_CXX11
void DonateHistory::set_donateurl(::std::string&& value) {
  set_has_donateurl();
  donateurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DonateHistory.DonateUrl)
}
#endif
void DonateHistory::set_donateurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_donateurl();
  donateurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DonateHistory.DonateUrl)
}
void DonateHistory::set_donateurl(const char* value, size_t size) {
  set_has_donateurl();
  donateurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DonateHistory.DonateUrl)
}
::std::string* DonateHistory::mutable_donateurl() {
  set_has_donateurl();
  // @@protoc_insertion_point(field_mutable:micromsg.DonateHistory.DonateUrl)
  return donateurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DonateHistory::release_donateurl() {
  // @@protoc_insertion_point(field_release:micromsg.DonateHistory.DonateUrl)
  clear_has_donateurl();
  return donateurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DonateHistory::set_allocated_donateurl(::std::string* donateurl) {
  if (donateurl != NULL) {
    set_has_donateurl();
  } else {
    clear_has_donateurl();
  }
  donateurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), donateurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DonateHistory.DonateUrl)
}

// required uint32 Price = 4;
bool DonateHistory::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DonateHistory::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
void DonateHistory::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
void DonateHistory::clear_price() {
  price_ = 0u;
  clear_has_price();
}
::google::protobuf::uint32 DonateHistory::price() const {
  // @@protoc_insertion_point(field_get:micromsg.DonateHistory.Price)
  return price_;
}
void DonateHistory::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DonateHistory.Price)
}

// optional string DonateThumbUrl = 5;
bool DonateHistory::has_donatethumburl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DonateHistory::set_has_donatethumburl() {
  _has_bits_[0] |= 0x00000004u;
}
void DonateHistory::clear_has_donatethumburl() {
  _has_bits_[0] &= ~0x00000004u;
}
void DonateHistory::clear_donatethumburl() {
  donatethumburl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_donatethumburl();
}
const ::std::string& DonateHistory::donatethumburl() const {
  // @@protoc_insertion_point(field_get:micromsg.DonateHistory.DonateThumbUrl)
  return donatethumburl_.GetNoArena();
}
void DonateHistory::set_donatethumburl(const ::std::string& value) {
  set_has_donatethumburl();
  donatethumburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DonateHistory.DonateThumbUrl)
}
#if LANG_CXX11
void DonateHistory::set_donatethumburl(::std::string&& value) {
  set_has_donatethumburl();
  donatethumburl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DonateHistory.DonateThumbUrl)
}
#endif
void DonateHistory::set_donatethumburl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_donatethumburl();
  donatethumburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DonateHistory.DonateThumbUrl)
}
void DonateHistory::set_donatethumburl(const char* value, size_t size) {
  set_has_donatethumburl();
  donatethumburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DonateHistory.DonateThumbUrl)
}
::std::string* DonateHistory::mutable_donatethumburl() {
  set_has_donatethumburl();
  // @@protoc_insertion_point(field_mutable:micromsg.DonateHistory.DonateThumbUrl)
  return donatethumburl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DonateHistory::release_donatethumburl() {
  // @@protoc_insertion_point(field_release:micromsg.DonateHistory.DonateThumbUrl)
  clear_has_donatethumburl();
  return donatethumburl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DonateHistory::set_allocated_donatethumburl(::std::string* donatethumburl) {
  if (donatethumburl != NULL) {
    set_has_donatethumburl();
  } else {
    clear_has_donatethumburl();
  }
  donatethumburl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), donatethumburl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DonateHistory.DonateThumbUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPersonalDonateHistoryResp::kBaseResponseFieldNumber;
const int GetPersonalDonateHistoryResp::kTotalAmountFieldNumber;
const int GetPersonalDonateHistoryResp::kTotalCountFieldNumber;
const int GetPersonalDonateHistoryResp::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPersonalDonateHistoryResp::GetPersonalDonateHistoryResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetPersonalDonateHistoryResp)
}
GetPersonalDonateHistoryResp::GetPersonalDonateHistoryResp(const GetPersonalDonateHistoryResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&totalamount_, &from.totalamount_,
    reinterpret_cast<char*>(&totalcount_) -
    reinterpret_cast<char*>(&totalamount_) + sizeof(totalcount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetPersonalDonateHistoryResp)
}

void GetPersonalDonateHistoryResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&totalcount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(totalcount_));
}

GetPersonalDonateHistoryResp::~GetPersonalDonateHistoryResp() {
  // @@protoc_insertion_point(destructor:micromsg.GetPersonalDonateHistoryResp)
  SharedDtor();
}

void GetPersonalDonateHistoryResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetPersonalDonateHistoryResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPersonalDonateHistoryResp::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPersonalDonateHistoryResp& GetPersonalDonateHistoryResp::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPersonalDonateHistoryResp* GetPersonalDonateHistoryResp::New(::google::protobuf::Arena* arena) const {
  GetPersonalDonateHistoryResp* n = new GetPersonalDonateHistoryResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPersonalDonateHistoryResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetPersonalDonateHistoryResp)
  list_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&totalamount_, 0, reinterpret_cast<char*>(&totalcount_) -
      reinterpret_cast<char*>(&totalamount_) + sizeof(totalcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetPersonalDonateHistoryResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetPersonalDonateHistoryResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TotalAmount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_totalamount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalamount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TotalCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_totalcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.DonateHistory List = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetPersonalDonateHistoryResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetPersonalDonateHistoryResp)
  return false;
#undef DO_
}

void GetPersonalDonateHistoryResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetPersonalDonateHistoryResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 TotalAmount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totalamount(), output);
  }

  // required uint32 TotalCount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totalcount(), output);
  }

  // repeated .micromsg.DonateHistory List = 4;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetPersonalDonateHistoryResp)
}

::google::protobuf::uint8* GetPersonalDonateHistoryResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetPersonalDonateHistoryResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 TotalAmount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->totalamount(), target);
  }

  // required uint32 TotalCount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->totalcount(), target);
  }

  // repeated .micromsg.DonateHistory List = 4;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetPersonalDonateHistoryResp)
  return target;
}

size_t GetPersonalDonateHistoryResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetPersonalDonateHistoryResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_totalamount()) {
    // required uint32 TotalAmount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalamount());
  }

  if (has_totalcount()) {
    // required uint32 TotalCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalcount());
  }

  return total_size;
}
size_t GetPersonalDonateHistoryResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetPersonalDonateHistoryResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 TotalAmount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalamount());

    // required uint32 TotalCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.DonateHistory List = 4;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPersonalDonateHistoryResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetPersonalDonateHistoryResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPersonalDonateHistoryResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPersonalDonateHistoryResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetPersonalDonateHistoryResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetPersonalDonateHistoryResp)
    MergeFrom(*source);
  }
}

void GetPersonalDonateHistoryResp::MergeFrom(const GetPersonalDonateHistoryResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetPersonalDonateHistoryResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      totalamount_ = from.totalamount_;
    }
    if (cached_has_bits & 0x00000004u) {
      totalcount_ = from.totalcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetPersonalDonateHistoryResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetPersonalDonateHistoryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPersonalDonateHistoryResp::CopyFrom(const GetPersonalDonateHistoryResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetPersonalDonateHistoryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPersonalDonateHistoryResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetPersonalDonateHistoryResp::Swap(GetPersonalDonateHistoryResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPersonalDonateHistoryResp::InternalSwap(GetPersonalDonateHistoryResp* other) {
  list_.InternalSwap(&other->list_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(totalamount_, other->totalamount_);
  std::swap(totalcount_, other->totalcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPersonalDonateHistoryResp::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPersonalDonateHistoryResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetPersonalDonateHistoryResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetPersonalDonateHistoryResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetPersonalDonateHistoryResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetPersonalDonateHistoryResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetPersonalDonateHistoryResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPersonalDonateHistoryResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetPersonalDonateHistoryResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetPersonalDonateHistoryResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetPersonalDonateHistoryResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetPersonalDonateHistoryResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetPersonalDonateHistoryResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPersonalDonateHistoryResp.BaseResponse)
}

// required uint32 TotalAmount = 2;
bool GetPersonalDonateHistoryResp::has_totalamount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetPersonalDonateHistoryResp::set_has_totalamount() {
  _has_bits_[0] |= 0x00000002u;
}
void GetPersonalDonateHistoryResp::clear_has_totalamount() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetPersonalDonateHistoryResp::clear_totalamount() {
  totalamount_ = 0u;
  clear_has_totalamount();
}
::google::protobuf::uint32 GetPersonalDonateHistoryResp::totalamount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPersonalDonateHistoryResp.TotalAmount)
  return totalamount_;
}
void GetPersonalDonateHistoryResp::set_totalamount(::google::protobuf::uint32 value) {
  set_has_totalamount();
  totalamount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetPersonalDonateHistoryResp.TotalAmount)
}

// required uint32 TotalCount = 3;
bool GetPersonalDonateHistoryResp::has_totalcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetPersonalDonateHistoryResp::set_has_totalcount() {
  _has_bits_[0] |= 0x00000004u;
}
void GetPersonalDonateHistoryResp::clear_has_totalcount() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetPersonalDonateHistoryResp::clear_totalcount() {
  totalcount_ = 0u;
  clear_has_totalcount();
}
::google::protobuf::uint32 GetPersonalDonateHistoryResp::totalcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPersonalDonateHistoryResp.TotalCount)
  return totalcount_;
}
void GetPersonalDonateHistoryResp::set_totalcount(::google::protobuf::uint32 value) {
  set_has_totalcount();
  totalcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetPersonalDonateHistoryResp.TotalCount)
}

// repeated .micromsg.DonateHistory List = 4;
int GetPersonalDonateHistoryResp::list_size() const {
  return list_.size();
}
void GetPersonalDonateHistoryResp::clear_list() {
  list_.Clear();
}
const ::micromsg::DonateHistory& GetPersonalDonateHistoryResp::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetPersonalDonateHistoryResp.List)
  return list_.Get(index);
}
::micromsg::DonateHistory* GetPersonalDonateHistoryResp::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetPersonalDonateHistoryResp.List)
  return list_.Mutable(index);
}
::micromsg::DonateHistory* GetPersonalDonateHistoryResp::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.GetPersonalDonateHistoryResp.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::DonateHistory >*
GetPersonalDonateHistoryResp::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetPersonalDonateHistoryResp.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::DonateHistory >&
GetPersonalDonateHistoryResp::list() const {
  // @@protoc_insertion_point(field_list:micromsg.GetPersonalDonateHistoryResp.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyPersonalInfoReq::kBaseRequestFieldNumber;
const int VerifyPersonalInfoReq::kUserRealNameFieldNumber;
const int VerifyPersonalInfoReq::kUserIDCardTypeFieldNumber;
const int VerifyPersonalInfoReq::kUserIDCardNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyPersonalInfoReq::VerifyPersonalInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VerifyPersonalInfoReq)
}
VerifyPersonalInfoReq::VerifyPersonalInfoReq(const VerifyPersonalInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userrealname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userrealname()) {
    userrealname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userrealname_);
  }
  useridcardnum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_useridcardnum()) {
    useridcardnum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useridcardnum_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  useridcardtype_ = from.useridcardtype_;
  // @@protoc_insertion_point(copy_constructor:micromsg.VerifyPersonalInfoReq)
}

void VerifyPersonalInfoReq::SharedCtor() {
  _cached_size_ = 0;
  userrealname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  useridcardnum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&useridcardtype_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(useridcardtype_));
}

VerifyPersonalInfoReq::~VerifyPersonalInfoReq() {
  // @@protoc_insertion_point(destructor:micromsg.VerifyPersonalInfoReq)
  SharedDtor();
}

void VerifyPersonalInfoReq::SharedDtor() {
  userrealname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  useridcardnum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void VerifyPersonalInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyPersonalInfoReq::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VerifyPersonalInfoReq& VerifyPersonalInfoReq::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

VerifyPersonalInfoReq* VerifyPersonalInfoReq::New(::google::protobuf::Arena* arena) const {
  VerifyPersonalInfoReq* n = new VerifyPersonalInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyPersonalInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VerifyPersonalInfoReq)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_userrealname()) {
      GOOGLE_DCHECK(!userrealname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*userrealname_.UnsafeRawStringPointer())->clear();
    }
    if (has_useridcardnum()) {
      GOOGLE_DCHECK(!useridcardnum_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*useridcardnum_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  useridcardtype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VerifyPersonalInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VerifyPersonalInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserRealName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userrealname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userrealname().data(), this->userrealname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VerifyPersonalInfoReq.UserRealName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 UserIDCardType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_useridcardtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &useridcardtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserIDCardNum = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useridcardnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->useridcardnum().data(), this->useridcardnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VerifyPersonalInfoReq.UserIDCardNum");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VerifyPersonalInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VerifyPersonalInfoReq)
  return false;
#undef DO_
}

void VerifyPersonalInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VerifyPersonalInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string UserRealName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userrealname().data(), this->userrealname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPersonalInfoReq.UserRealName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userrealname(), output);
  }

  // required uint32 UserIDCardType = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->useridcardtype(), output);
  }

  // optional string UserIDCardNum = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useridcardnum().data(), this->useridcardnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPersonalInfoReq.UserIDCardNum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->useridcardnum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VerifyPersonalInfoReq)
}

::google::protobuf::uint8* VerifyPersonalInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VerifyPersonalInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string UserRealName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userrealname().data(), this->userrealname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPersonalInfoReq.UserRealName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userrealname(), target);
  }

  // required uint32 UserIDCardType = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->useridcardtype(), target);
  }

  // optional string UserIDCardNum = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useridcardnum().data(), this->useridcardnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPersonalInfoReq.UserIDCardNum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->useridcardnum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VerifyPersonalInfoReq)
  return target;
}

size_t VerifyPersonalInfoReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VerifyPersonalInfoReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_useridcardtype()) {
    // required uint32 UserIDCardType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->useridcardtype());
  }

  return total_size;
}
size_t VerifyPersonalInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VerifyPersonalInfoReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 UserIDCardType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->useridcardtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string UserRealName = 2;
    if (has_userrealname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userrealname());
    }

    // optional string UserIDCardNum = 4;
    if (has_useridcardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->useridcardnum());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyPersonalInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VerifyPersonalInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyPersonalInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyPersonalInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VerifyPersonalInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VerifyPersonalInfoReq)
    MergeFrom(*source);
  }
}

void VerifyPersonalInfoReq::MergeFrom(const VerifyPersonalInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VerifyPersonalInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_userrealname();
      userrealname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userrealname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_useridcardnum();
      useridcardnum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useridcardnum_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      useridcardtype_ = from.useridcardtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VerifyPersonalInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VerifyPersonalInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyPersonalInfoReq::CopyFrom(const VerifyPersonalInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VerifyPersonalInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyPersonalInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void VerifyPersonalInfoReq::Swap(VerifyPersonalInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyPersonalInfoReq::InternalSwap(VerifyPersonalInfoReq* other) {
  userrealname_.Swap(&other->userrealname_);
  useridcardnum_.Swap(&other->useridcardnum_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(useridcardtype_, other->useridcardtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerifyPersonalInfoReq::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyPersonalInfoReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool VerifyPersonalInfoReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VerifyPersonalInfoReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void VerifyPersonalInfoReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void VerifyPersonalInfoReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VerifyPersonalInfoReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPersonalInfoReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VerifyPersonalInfoReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPersonalInfoReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VerifyPersonalInfoReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPersonalInfoReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VerifyPersonalInfoReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPersonalInfoReq.BaseRequest)
}

// optional string UserRealName = 2;
bool VerifyPersonalInfoReq::has_userrealname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VerifyPersonalInfoReq::set_has_userrealname() {
  _has_bits_[0] |= 0x00000001u;
}
void VerifyPersonalInfoReq::clear_has_userrealname() {
  _has_bits_[0] &= ~0x00000001u;
}
void VerifyPersonalInfoReq::clear_userrealname() {
  userrealname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userrealname();
}
const ::std::string& VerifyPersonalInfoReq::userrealname() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPersonalInfoReq.UserRealName)
  return userrealname_.GetNoArena();
}
void VerifyPersonalInfoReq::set_userrealname(const ::std::string& value) {
  set_has_userrealname();
  userrealname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyPersonalInfoReq.UserRealName)
}
#if LANG_CXX11
void VerifyPersonalInfoReq::set_userrealname(::std::string&& value) {
  set_has_userrealname();
  userrealname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyPersonalInfoReq.UserRealName)
}
#endif
void VerifyPersonalInfoReq::set_userrealname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userrealname();
  userrealname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyPersonalInfoReq.UserRealName)
}
void VerifyPersonalInfoReq::set_userrealname(const char* value, size_t size) {
  set_has_userrealname();
  userrealname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyPersonalInfoReq.UserRealName)
}
::std::string* VerifyPersonalInfoReq::mutable_userrealname() {
  set_has_userrealname();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPersonalInfoReq.UserRealName)
  return userrealname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyPersonalInfoReq::release_userrealname() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPersonalInfoReq.UserRealName)
  clear_has_userrealname();
  return userrealname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyPersonalInfoReq::set_allocated_userrealname(::std::string* userrealname) {
  if (userrealname != NULL) {
    set_has_userrealname();
  } else {
    clear_has_userrealname();
  }
  userrealname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userrealname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPersonalInfoReq.UserRealName)
}

// required uint32 UserIDCardType = 3;
bool VerifyPersonalInfoReq::has_useridcardtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VerifyPersonalInfoReq::set_has_useridcardtype() {
  _has_bits_[0] |= 0x00000008u;
}
void VerifyPersonalInfoReq::clear_has_useridcardtype() {
  _has_bits_[0] &= ~0x00000008u;
}
void VerifyPersonalInfoReq::clear_useridcardtype() {
  useridcardtype_ = 0u;
  clear_has_useridcardtype();
}
::google::protobuf::uint32 VerifyPersonalInfoReq::useridcardtype() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPersonalInfoReq.UserIDCardType)
  return useridcardtype_;
}
void VerifyPersonalInfoReq::set_useridcardtype(::google::protobuf::uint32 value) {
  set_has_useridcardtype();
  useridcardtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VerifyPersonalInfoReq.UserIDCardType)
}

// optional string UserIDCardNum = 4;
bool VerifyPersonalInfoReq::has_useridcardnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VerifyPersonalInfoReq::set_has_useridcardnum() {
  _has_bits_[0] |= 0x00000002u;
}
void VerifyPersonalInfoReq::clear_has_useridcardnum() {
  _has_bits_[0] &= ~0x00000002u;
}
void VerifyPersonalInfoReq::clear_useridcardnum() {
  useridcardnum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_useridcardnum();
}
const ::std::string& VerifyPersonalInfoReq::useridcardnum() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPersonalInfoReq.UserIDCardNum)
  return useridcardnum_.GetNoArena();
}
void VerifyPersonalInfoReq::set_useridcardnum(const ::std::string& value) {
  set_has_useridcardnum();
  useridcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyPersonalInfoReq.UserIDCardNum)
}
#if LANG_CXX11
void VerifyPersonalInfoReq::set_useridcardnum(::std::string&& value) {
  set_has_useridcardnum();
  useridcardnum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyPersonalInfoReq.UserIDCardNum)
}
#endif
void VerifyPersonalInfoReq::set_useridcardnum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_useridcardnum();
  useridcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyPersonalInfoReq.UserIDCardNum)
}
void VerifyPersonalInfoReq::set_useridcardnum(const char* value, size_t size) {
  set_has_useridcardnum();
  useridcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyPersonalInfoReq.UserIDCardNum)
}
::std::string* VerifyPersonalInfoReq::mutable_useridcardnum() {
  set_has_useridcardnum();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPersonalInfoReq.UserIDCardNum)
  return useridcardnum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyPersonalInfoReq::release_useridcardnum() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPersonalInfoReq.UserIDCardNum)
  clear_has_useridcardnum();
  return useridcardnum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyPersonalInfoReq::set_allocated_useridcardnum(::std::string* useridcardnum) {
  if (useridcardnum != NULL) {
    set_has_useridcardnum();
  } else {
    clear_has_useridcardnum();
  }
  useridcardnum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), useridcardnum);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPersonalInfoReq.UserIDCardNum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyPersonalInfoResp::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyPersonalInfoResp::VerifyPersonalInfoResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VerifyPersonalInfoResp)
}
VerifyPersonalInfoResp::VerifyPersonalInfoResp(const VerifyPersonalInfoResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.VerifyPersonalInfoResp)
}

void VerifyPersonalInfoResp::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

VerifyPersonalInfoResp::~VerifyPersonalInfoResp() {
  // @@protoc_insertion_point(destructor:micromsg.VerifyPersonalInfoResp)
  SharedDtor();
}

void VerifyPersonalInfoResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void VerifyPersonalInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyPersonalInfoResp::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VerifyPersonalInfoResp& VerifyPersonalInfoResp::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

VerifyPersonalInfoResp* VerifyPersonalInfoResp::New(::google::protobuf::Arena* arena) const {
  VerifyPersonalInfoResp* n = new VerifyPersonalInfoResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyPersonalInfoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VerifyPersonalInfoResp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VerifyPersonalInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VerifyPersonalInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VerifyPersonalInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VerifyPersonalInfoResp)
  return false;
#undef DO_
}

void VerifyPersonalInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VerifyPersonalInfoResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VerifyPersonalInfoResp)
}

::google::protobuf::uint8* VerifyPersonalInfoResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VerifyPersonalInfoResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VerifyPersonalInfoResp)
  return target;
}

size_t VerifyPersonalInfoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VerifyPersonalInfoResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyPersonalInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VerifyPersonalInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyPersonalInfoResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyPersonalInfoResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VerifyPersonalInfoResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VerifyPersonalInfoResp)
    MergeFrom(*source);
  }
}

void VerifyPersonalInfoResp::MergeFrom(const VerifyPersonalInfoResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VerifyPersonalInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void VerifyPersonalInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VerifyPersonalInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyPersonalInfoResp::CopyFrom(const VerifyPersonalInfoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VerifyPersonalInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyPersonalInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void VerifyPersonalInfoResp::Swap(VerifyPersonalInfoResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyPersonalInfoResp::InternalSwap(VerifyPersonalInfoResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerifyPersonalInfoResp::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyPersonalInfoResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool VerifyPersonalInfoResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VerifyPersonalInfoResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void VerifyPersonalInfoResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void VerifyPersonalInfoResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VerifyPersonalInfoResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPersonalInfoResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VerifyPersonalInfoResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPersonalInfoResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VerifyPersonalInfoResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPersonalInfoResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VerifyPersonalInfoResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPersonalInfoResp.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyChatRoomReq::kBaseRequestFieldNumber;
const int VerifyChatRoomReq::kOpCodeFieldNumber;
const int VerifyChatRoomReq::kApplyUserNameFieldNumber;
const int VerifyChatRoomReq::kChatRoomNameFieldNumber;
const int VerifyChatRoomReq::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyChatRoomReq::VerifyChatRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VerifyChatRoomReq)
}
VerifyChatRoomReq::VerifyChatRoomReq(const VerifyChatRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  applyusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_applyusername()) {
    applyusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.applyusername_);
  }
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomname()) {
    chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
  }
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  opcode_ = from.opcode_;
  // @@protoc_insertion_point(copy_constructor:micromsg.VerifyChatRoomReq)
}

void VerifyChatRoomReq::SharedCtor() {
  _cached_size_ = 0;
  applyusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(opcode_));
}

VerifyChatRoomReq::~VerifyChatRoomReq() {
  // @@protoc_insertion_point(destructor:micromsg.VerifyChatRoomReq)
  SharedDtor();
}

void VerifyChatRoomReq::SharedDtor() {
  applyusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatroomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void VerifyChatRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyChatRoomReq::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VerifyChatRoomReq& VerifyChatRoomReq::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

VerifyChatRoomReq* VerifyChatRoomReq::New(::google::protobuf::Arena* arena) const {
  VerifyChatRoomReq* n = new VerifyChatRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyChatRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VerifyChatRoomReq)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_applyusername()) {
      GOOGLE_DCHECK(!applyusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*applyusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_chatroomname()) {
      GOOGLE_DCHECK(!chatroomname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomname_.UnsafeRawStringPointer())->clear();
    }
    if (has_ticket()) {
      GOOGLE_DCHECK(!ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  opcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VerifyChatRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VerifyChatRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 OpCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ApplyUserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applyusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->applyusername().data(), this->applyusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VerifyChatRoomReq.ApplyUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ChatRoomName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomname().data(), this->chatroomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VerifyChatRoomReq.ChatRoomName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Ticket = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticket().data(), this->ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VerifyChatRoomReq.Ticket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VerifyChatRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VerifyChatRoomReq)
  return false;
#undef DO_
}

void VerifyChatRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VerifyChatRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 OpCode = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opcode(), output);
  }

  // optional string ApplyUserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->applyusername().data(), this->applyusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyChatRoomReq.ApplyUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->applyusername(), output);
  }

  // optional string ChatRoomName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyChatRoomReq.ChatRoomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->chatroomname(), output);
  }

  // optional string Ticket = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyChatRoomReq.Ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ticket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VerifyChatRoomReq)
}

::google::protobuf::uint8* VerifyChatRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VerifyChatRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 OpCode = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opcode(), target);
  }

  // optional string ApplyUserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->applyusername().data(), this->applyusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyChatRoomReq.ApplyUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->applyusername(), target);
  }

  // optional string ChatRoomName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyChatRoomReq.ChatRoomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chatroomname(), target);
  }

  // optional string Ticket = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyChatRoomReq.Ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ticket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VerifyChatRoomReq)
  return target;
}

size_t VerifyChatRoomReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VerifyChatRoomReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_opcode()) {
    // required uint32 OpCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  return total_size;
}
size_t VerifyChatRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VerifyChatRoomReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000018) ^ 0x00000018) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 OpCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string ApplyUserName = 3;
    if (has_applyusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applyusername());
    }

    // optional string ChatRoomName = 4;
    if (has_chatroomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatroomname());
    }

    // optional string Ticket = 5;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyChatRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VerifyChatRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyChatRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyChatRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VerifyChatRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VerifyChatRoomReq)
    MergeFrom(*source);
  }
}

void VerifyChatRoomReq::MergeFrom(const VerifyChatRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VerifyChatRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_applyusername();
      applyusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.applyusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_chatroomname();
      chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000010u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VerifyChatRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VerifyChatRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyChatRoomReq::CopyFrom(const VerifyChatRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VerifyChatRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyChatRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void VerifyChatRoomReq::Swap(VerifyChatRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyChatRoomReq::InternalSwap(VerifyChatRoomReq* other) {
  applyusername_.Swap(&other->applyusername_);
  chatroomname_.Swap(&other->chatroomname_);
  ticket_.Swap(&other->ticket_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerifyChatRoomReq::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyChatRoomReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool VerifyChatRoomReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VerifyChatRoomReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000008u;
}
void VerifyChatRoomReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000008u;
}
void VerifyChatRoomReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VerifyChatRoomReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyChatRoomReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VerifyChatRoomReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyChatRoomReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VerifyChatRoomReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyChatRoomReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VerifyChatRoomReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyChatRoomReq.BaseRequest)
}

// required uint32 OpCode = 2;
bool VerifyChatRoomReq::has_opcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VerifyChatRoomReq::set_has_opcode() {
  _has_bits_[0] |= 0x00000010u;
}
void VerifyChatRoomReq::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000010u;
}
void VerifyChatRoomReq::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 VerifyChatRoomReq::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyChatRoomReq.OpCode)
  return opcode_;
}
void VerifyChatRoomReq::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VerifyChatRoomReq.OpCode)
}

// optional string ApplyUserName = 3;
bool VerifyChatRoomReq::has_applyusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VerifyChatRoomReq::set_has_applyusername() {
  _has_bits_[0] |= 0x00000001u;
}
void VerifyChatRoomReq::clear_has_applyusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void VerifyChatRoomReq::clear_applyusername() {
  applyusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_applyusername();
}
const ::std::string& VerifyChatRoomReq::applyusername() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyChatRoomReq.ApplyUserName)
  return applyusername_.GetNoArena();
}
void VerifyChatRoomReq::set_applyusername(const ::std::string& value) {
  set_has_applyusername();
  applyusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyChatRoomReq.ApplyUserName)
}
#if LANG_CXX11
void VerifyChatRoomReq::set_applyusername(::std::string&& value) {
  set_has_applyusername();
  applyusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyChatRoomReq.ApplyUserName)
}
#endif
void VerifyChatRoomReq::set_applyusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_applyusername();
  applyusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyChatRoomReq.ApplyUserName)
}
void VerifyChatRoomReq::set_applyusername(const char* value, size_t size) {
  set_has_applyusername();
  applyusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyChatRoomReq.ApplyUserName)
}
::std::string* VerifyChatRoomReq::mutable_applyusername() {
  set_has_applyusername();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyChatRoomReq.ApplyUserName)
  return applyusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyChatRoomReq::release_applyusername() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyChatRoomReq.ApplyUserName)
  clear_has_applyusername();
  return applyusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyChatRoomReq::set_allocated_applyusername(::std::string* applyusername) {
  if (applyusername != NULL) {
    set_has_applyusername();
  } else {
    clear_has_applyusername();
  }
  applyusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), applyusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyChatRoomReq.ApplyUserName)
}

// optional string ChatRoomName = 4;
bool VerifyChatRoomReq::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VerifyChatRoomReq::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000002u;
}
void VerifyChatRoomReq::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000002u;
}
void VerifyChatRoomReq::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
const ::std::string& VerifyChatRoomReq::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyChatRoomReq.ChatRoomName)
  return chatroomname_.GetNoArena();
}
void VerifyChatRoomReq::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyChatRoomReq.ChatRoomName)
}
#if LANG_CXX11
void VerifyChatRoomReq::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyChatRoomReq.ChatRoomName)
}
#endif
void VerifyChatRoomReq::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyChatRoomReq.ChatRoomName)
}
void VerifyChatRoomReq::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyChatRoomReq.ChatRoomName)
}
::std::string* VerifyChatRoomReq::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyChatRoomReq.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyChatRoomReq::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyChatRoomReq.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyChatRoomReq::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyChatRoomReq.ChatRoomName)
}

// optional string Ticket = 5;
bool VerifyChatRoomReq::has_ticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VerifyChatRoomReq::set_has_ticket() {
  _has_bits_[0] |= 0x00000004u;
}
void VerifyChatRoomReq::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000004u;
}
void VerifyChatRoomReq::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
const ::std::string& VerifyChatRoomReq::ticket() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyChatRoomReq.Ticket)
  return ticket_.GetNoArena();
}
void VerifyChatRoomReq::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyChatRoomReq.Ticket)
}
#if LANG_CXX11
void VerifyChatRoomReq::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyChatRoomReq.Ticket)
}
#endif
void VerifyChatRoomReq::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyChatRoomReq.Ticket)
}
void VerifyChatRoomReq::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyChatRoomReq.Ticket)
}
::std::string* VerifyChatRoomReq::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyChatRoomReq.Ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyChatRoomReq::release_ticket() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyChatRoomReq.Ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyChatRoomReq::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyChatRoomReq.Ticket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyChatRoomResp::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyChatRoomResp::VerifyChatRoomResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VerifyChatRoomResp)
}
VerifyChatRoomResp::VerifyChatRoomResp(const VerifyChatRoomResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.VerifyChatRoomResp)
}

void VerifyChatRoomResp::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

VerifyChatRoomResp::~VerifyChatRoomResp() {
  // @@protoc_insertion_point(destructor:micromsg.VerifyChatRoomResp)
  SharedDtor();
}

void VerifyChatRoomResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void VerifyChatRoomResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyChatRoomResp::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VerifyChatRoomResp& VerifyChatRoomResp::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

VerifyChatRoomResp* VerifyChatRoomResp::New(::google::protobuf::Arena* arena) const {
  VerifyChatRoomResp* n = new VerifyChatRoomResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyChatRoomResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VerifyChatRoomResp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VerifyChatRoomResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VerifyChatRoomResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VerifyChatRoomResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VerifyChatRoomResp)
  return false;
#undef DO_
}

void VerifyChatRoomResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VerifyChatRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VerifyChatRoomResp)
}

::google::protobuf::uint8* VerifyChatRoomResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VerifyChatRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VerifyChatRoomResp)
  return target;
}

size_t VerifyChatRoomResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VerifyChatRoomResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyChatRoomResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VerifyChatRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyChatRoomResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyChatRoomResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VerifyChatRoomResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VerifyChatRoomResp)
    MergeFrom(*source);
  }
}

void VerifyChatRoomResp::MergeFrom(const VerifyChatRoomResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VerifyChatRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void VerifyChatRoomResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VerifyChatRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyChatRoomResp::CopyFrom(const VerifyChatRoomResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VerifyChatRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyChatRoomResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void VerifyChatRoomResp::Swap(VerifyChatRoomResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyChatRoomResp::InternalSwap(VerifyChatRoomResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerifyChatRoomResp::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyChatRoomResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool VerifyChatRoomResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VerifyChatRoomResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void VerifyChatRoomResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void VerifyChatRoomResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VerifyChatRoomResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyChatRoomResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VerifyChatRoomResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyChatRoomResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VerifyChatRoomResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyChatRoomResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VerifyChatRoomResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyChatRoomResp.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuitChatRoomReq::kBaseRequestFieldNumber;
const int QuitChatRoomReq::kChatRoomNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuitChatRoomReq::QuitChatRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.QuitChatRoomReq)
}
QuitChatRoomReq::QuitChatRoomReq(const QuitChatRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomname()) {
    chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.QuitChatRoomReq)
}

void QuitChatRoomReq::SharedCtor() {
  _cached_size_ = 0;
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

QuitChatRoomReq::~QuitChatRoomReq() {
  // @@protoc_insertion_point(destructor:micromsg.QuitChatRoomReq)
  SharedDtor();
}

void QuitChatRoomReq::SharedDtor() {
  chatroomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void QuitChatRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitChatRoomReq::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuitChatRoomReq& QuitChatRoomReq::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuitChatRoomReq* QuitChatRoomReq::New(::google::protobuf::Arena* arena) const {
  QuitChatRoomReq* n = new QuitChatRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuitChatRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.QuitChatRoomReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_chatroomname()) {
      GOOGLE_DCHECK(!chatroomname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomname_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QuitChatRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.QuitChatRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ChatRoomName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomname().data(), this->chatroomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.QuitChatRoomReq.ChatRoomName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.QuitChatRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.QuitChatRoomReq)
  return false;
#undef DO_
}

void QuitChatRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.QuitChatRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.QuitChatRoomReq.ChatRoomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chatroomname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.QuitChatRoomReq)
}

::google::protobuf::uint8* QuitChatRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.QuitChatRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.QuitChatRoomReq.ChatRoomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatroomname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.QuitChatRoomReq)
  return target;
}

size_t QuitChatRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.QuitChatRoomReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string ChatRoomName = 2;
  if (has_chatroomname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatroomname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitChatRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.QuitChatRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitChatRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuitChatRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.QuitChatRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.QuitChatRoomReq)
    MergeFrom(*source);
  }
}

void QuitChatRoomReq::MergeFrom(const QuitChatRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.QuitChatRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chatroomname();
      chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void QuitChatRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.QuitChatRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitChatRoomReq::CopyFrom(const QuitChatRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.QuitChatRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitChatRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void QuitChatRoomReq::Swap(QuitChatRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuitChatRoomReq::InternalSwap(QuitChatRoomReq* other) {
  chatroomname_.Swap(&other->chatroomname_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuitChatRoomReq::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuitChatRoomReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool QuitChatRoomReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QuitChatRoomReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void QuitChatRoomReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void QuitChatRoomReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& QuitChatRoomReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.QuitChatRoomReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* QuitChatRoomReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.QuitChatRoomReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* QuitChatRoomReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.QuitChatRoomReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void QuitChatRoomReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.QuitChatRoomReq.BaseRequest)
}

// optional string ChatRoomName = 2;
bool QuitChatRoomReq::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QuitChatRoomReq::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
void QuitChatRoomReq::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
void QuitChatRoomReq::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
const ::std::string& QuitChatRoomReq::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.QuitChatRoomReq.ChatRoomName)
  return chatroomname_.GetNoArena();
}
void QuitChatRoomReq::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.QuitChatRoomReq.ChatRoomName)
}
#if LANG_CXX11
void QuitChatRoomReq::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.QuitChatRoomReq.ChatRoomName)
}
#endif
void QuitChatRoomReq::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.QuitChatRoomReq.ChatRoomName)
}
void QuitChatRoomReq::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.QuitChatRoomReq.ChatRoomName)
}
::std::string* QuitChatRoomReq::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.QuitChatRoomReq.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuitChatRoomReq::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.QuitChatRoomReq.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuitChatRoomReq::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.QuitChatRoomReq.ChatRoomName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuitChatRoomResp::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuitChatRoomResp::QuitChatRoomResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.QuitChatRoomResp)
}
QuitChatRoomResp::QuitChatRoomResp(const QuitChatRoomResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.QuitChatRoomResp)
}

void QuitChatRoomResp::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

QuitChatRoomResp::~QuitChatRoomResp() {
  // @@protoc_insertion_point(destructor:micromsg.QuitChatRoomResp)
  SharedDtor();
}

void QuitChatRoomResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void QuitChatRoomResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitChatRoomResp::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuitChatRoomResp& QuitChatRoomResp::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuitChatRoomResp* QuitChatRoomResp::New(::google::protobuf::Arena* arena) const {
  QuitChatRoomResp* n = new QuitChatRoomResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuitChatRoomResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.QuitChatRoomResp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QuitChatRoomResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.QuitChatRoomResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.QuitChatRoomResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.QuitChatRoomResp)
  return false;
#undef DO_
}

void QuitChatRoomResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.QuitChatRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.QuitChatRoomResp)
}

::google::protobuf::uint8* QuitChatRoomResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.QuitChatRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.QuitChatRoomResp)
  return target;
}

size_t QuitChatRoomResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.QuitChatRoomResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitChatRoomResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.QuitChatRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitChatRoomResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuitChatRoomResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.QuitChatRoomResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.QuitChatRoomResp)
    MergeFrom(*source);
  }
}

void QuitChatRoomResp::MergeFrom(const QuitChatRoomResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.QuitChatRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void QuitChatRoomResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.QuitChatRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitChatRoomResp::CopyFrom(const QuitChatRoomResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.QuitChatRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitChatRoomResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void QuitChatRoomResp::Swap(QuitChatRoomResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuitChatRoomResp::InternalSwap(QuitChatRoomResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuitChatRoomResp::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuitChatRoomResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool QuitChatRoomResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QuitChatRoomResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void QuitChatRoomResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void QuitChatRoomResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& QuitChatRoomResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.QuitChatRoomResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* QuitChatRoomResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.QuitChatRoomResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* QuitChatRoomResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.QuitChatRoomResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void QuitChatRoomResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.QuitChatRoomResp.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChatRoomUpgradeStatusReq::kBaseRequestFieldNumber;
const int GetChatRoomUpgradeStatusReq::kChatRoomNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChatRoomUpgradeStatusReq::GetChatRoomUpgradeStatusReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetChatRoomUpgradeStatusReq)
}
GetChatRoomUpgradeStatusReq::GetChatRoomUpgradeStatusReq(const GetChatRoomUpgradeStatusReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomname()) {
    chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetChatRoomUpgradeStatusReq)
}

void GetChatRoomUpgradeStatusReq::SharedCtor() {
  _cached_size_ = 0;
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

GetChatRoomUpgradeStatusReq::~GetChatRoomUpgradeStatusReq() {
  // @@protoc_insertion_point(destructor:micromsg.GetChatRoomUpgradeStatusReq)
  SharedDtor();
}

void GetChatRoomUpgradeStatusReq::SharedDtor() {
  chatroomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetChatRoomUpgradeStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChatRoomUpgradeStatusReq::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChatRoomUpgradeStatusReq& GetChatRoomUpgradeStatusReq::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetChatRoomUpgradeStatusReq* GetChatRoomUpgradeStatusReq::New(::google::protobuf::Arena* arena) const {
  GetChatRoomUpgradeStatusReq* n = new GetChatRoomUpgradeStatusReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetChatRoomUpgradeStatusReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetChatRoomUpgradeStatusReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_chatroomname()) {
      GOOGLE_DCHECK(!chatroomname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomname_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetChatRoomUpgradeStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetChatRoomUpgradeStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ChatRoomName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomname().data(), this->chatroomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetChatRoomUpgradeStatusReq.ChatRoomName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetChatRoomUpgradeStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetChatRoomUpgradeStatusReq)
  return false;
#undef DO_
}

void GetChatRoomUpgradeStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetChatRoomUpgradeStatusReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomUpgradeStatusReq.ChatRoomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chatroomname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetChatRoomUpgradeStatusReq)
}

::google::protobuf::uint8* GetChatRoomUpgradeStatusReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetChatRoomUpgradeStatusReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomUpgradeStatusReq.ChatRoomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatroomname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetChatRoomUpgradeStatusReq)
  return target;
}

size_t GetChatRoomUpgradeStatusReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetChatRoomUpgradeStatusReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string ChatRoomName = 2;
  if (has_chatroomname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatroomname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChatRoomUpgradeStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetChatRoomUpgradeStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatRoomUpgradeStatusReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChatRoomUpgradeStatusReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetChatRoomUpgradeStatusReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetChatRoomUpgradeStatusReq)
    MergeFrom(*source);
  }
}

void GetChatRoomUpgradeStatusReq::MergeFrom(const GetChatRoomUpgradeStatusReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetChatRoomUpgradeStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chatroomname();
      chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void GetChatRoomUpgradeStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetChatRoomUpgradeStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatRoomUpgradeStatusReq::CopyFrom(const GetChatRoomUpgradeStatusReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetChatRoomUpgradeStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatRoomUpgradeStatusReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetChatRoomUpgradeStatusReq::Swap(GetChatRoomUpgradeStatusReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChatRoomUpgradeStatusReq::InternalSwap(GetChatRoomUpgradeStatusReq* other) {
  chatroomname_.Swap(&other->chatroomname_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetChatRoomUpgradeStatusReq::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetChatRoomUpgradeStatusReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetChatRoomUpgradeStatusReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetChatRoomUpgradeStatusReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GetChatRoomUpgradeStatusReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetChatRoomUpgradeStatusReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetChatRoomUpgradeStatusReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeStatusReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetChatRoomUpgradeStatusReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomUpgradeStatusReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetChatRoomUpgradeStatusReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomUpgradeStatusReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetChatRoomUpgradeStatusReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomUpgradeStatusReq.BaseRequest)
}

// optional string ChatRoomName = 2;
bool GetChatRoomUpgradeStatusReq::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetChatRoomUpgradeStatusReq::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
void GetChatRoomUpgradeStatusReq::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetChatRoomUpgradeStatusReq::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
const ::std::string& GetChatRoomUpgradeStatusReq::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeStatusReq.ChatRoomName)
  return chatroomname_.GetNoArena();
}
void GetChatRoomUpgradeStatusReq::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeStatusReq.ChatRoomName)
}
#if LANG_CXX11
void GetChatRoomUpgradeStatusReq::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomUpgradeStatusReq.ChatRoomName)
}
#endif
void GetChatRoomUpgradeStatusReq::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomUpgradeStatusReq.ChatRoomName)
}
void GetChatRoomUpgradeStatusReq::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomUpgradeStatusReq.ChatRoomName)
}
::std::string* GetChatRoomUpgradeStatusReq::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomUpgradeStatusReq.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetChatRoomUpgradeStatusReq::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomUpgradeStatusReq.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetChatRoomUpgradeStatusReq::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomUpgradeStatusReq.ChatRoomName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChatRoomUpgradeStatusResp::kBaseResponseFieldNumber;
const int GetChatRoomUpgradeStatusResp::kStatusFieldNumber;
const int GetChatRoomUpgradeStatusResp::kMobileQuotaFieldNumber;
const int GetChatRoomUpgradeStatusResp::kCardQuotaFieldNumber;
const int GetChatRoomUpgradeStatusResp::kDonateQuotaFieldNumber;
const int GetChatRoomUpgradeStatusResp::kMaxCountFieldNumber;
const int GetChatRoomUpgradeStatusResp::kResultMsgFieldNumber;
const int GetChatRoomUpgradeStatusResp::kTotalQuotaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChatRoomUpgradeStatusResp::GetChatRoomUpgradeStatusResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetChatRoomUpgradeStatusResp)
}
GetChatRoomUpgradeStatusResp::GetChatRoomUpgradeStatusResp(const GetChatRoomUpgradeStatusResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resultmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_resultmsg()) {
    resultmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resultmsg_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&status_, &from.status_,
    reinterpret_cast<char*>(&totalquota_) -
    reinterpret_cast<char*>(&status_) + sizeof(totalquota_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetChatRoomUpgradeStatusResp)
}

void GetChatRoomUpgradeStatusResp::SharedCtor() {
  _cached_size_ = 0;
  resultmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&totalquota_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(totalquota_));
}

GetChatRoomUpgradeStatusResp::~GetChatRoomUpgradeStatusResp() {
  // @@protoc_insertion_point(destructor:micromsg.GetChatRoomUpgradeStatusResp)
  SharedDtor();
}

void GetChatRoomUpgradeStatusResp::SharedDtor() {
  resultmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetChatRoomUpgradeStatusResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChatRoomUpgradeStatusResp::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChatRoomUpgradeStatusResp& GetChatRoomUpgradeStatusResp::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetChatRoomUpgradeStatusResp* GetChatRoomUpgradeStatusResp::New(::google::protobuf::Arena* arena) const {
  GetChatRoomUpgradeStatusResp* n = new GetChatRoomUpgradeStatusResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetChatRoomUpgradeStatusResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetChatRoomUpgradeStatusResp)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_resultmsg()) {
      GOOGLE_DCHECK(!resultmsg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*resultmsg_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&status_, 0, reinterpret_cast<char*>(&totalquota_) -
      reinterpret_cast<char*>(&status_) + sizeof(totalquota_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetChatRoomUpgradeStatusResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetChatRoomUpgradeStatusResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MobileQuota = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_mobilequota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mobilequota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CardQuota = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_cardquota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardquota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DonateQuota = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_donatequota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donatequota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MaxCount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_maxcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ResultMsg = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resultmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resultmsg().data(), this->resultmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetChatRoomUpgradeStatusResp.ResultMsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TotalQuota = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_totalquota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalquota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetChatRoomUpgradeStatusResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetChatRoomUpgradeStatusResp)
  return false;
#undef DO_
}

void GetChatRoomUpgradeStatusResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetChatRoomUpgradeStatusResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Status = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // required uint32 MobileQuota = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mobilequota(), output);
  }

  // required uint32 CardQuota = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cardquota(), output);
  }

  // required uint32 DonateQuota = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->donatequota(), output);
  }

  // required uint32 MaxCount = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->maxcount(), output);
  }

  // optional string ResultMsg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resultmsg().data(), this->resultmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomUpgradeStatusResp.ResultMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->resultmsg(), output);
  }

  // optional uint32 TotalQuota = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->totalquota(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetChatRoomUpgradeStatusResp)
}

::google::protobuf::uint8* GetChatRoomUpgradeStatusResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetChatRoomUpgradeStatusResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Status = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // required uint32 MobileQuota = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mobilequota(), target);
  }

  // required uint32 CardQuota = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cardquota(), target);
  }

  // required uint32 DonateQuota = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->donatequota(), target);
  }

  // required uint32 MaxCount = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->maxcount(), target);
  }

  // optional string ResultMsg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resultmsg().data(), this->resultmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomUpgradeStatusResp.ResultMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->resultmsg(), target);
  }

  // optional uint32 TotalQuota = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->totalquota(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetChatRoomUpgradeStatusResp)
  return target;
}

size_t GetChatRoomUpgradeStatusResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetChatRoomUpgradeStatusResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_status()) {
    // required uint32 Status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  if (has_mobilequota()) {
    // required uint32 MobileQuota = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mobilequota());
  }

  if (has_cardquota()) {
    // required uint32 CardQuota = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cardquota());
  }

  if (has_donatequota()) {
    // required uint32 DonateQuota = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->donatequota());
  }

  if (has_maxcount()) {
    // required uint32 MaxCount = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxcount());
  }

  return total_size;
}
size_t GetChatRoomUpgradeStatusResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetChatRoomUpgradeStatusResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007e) ^ 0x0000007e) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());

    // required uint32 MobileQuota = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mobilequota());

    // required uint32 CardQuota = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cardquota());

    // required uint32 DonateQuota = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->donatequota());

    // required uint32 MaxCount = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string ResultMsg = 7;
  if (has_resultmsg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resultmsg());
  }

  // optional uint32 TotalQuota = 8;
  if (has_totalquota()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalquota());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChatRoomUpgradeStatusResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetChatRoomUpgradeStatusResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatRoomUpgradeStatusResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChatRoomUpgradeStatusResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetChatRoomUpgradeStatusResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetChatRoomUpgradeStatusResp)
    MergeFrom(*source);
  }
}

void GetChatRoomUpgradeStatusResp::MergeFrom(const GetChatRoomUpgradeStatusResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetChatRoomUpgradeStatusResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_resultmsg();
      resultmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resultmsg_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      mobilequota_ = from.mobilequota_;
    }
    if (cached_has_bits & 0x00000010u) {
      cardquota_ = from.cardquota_;
    }
    if (cached_has_bits & 0x00000020u) {
      donatequota_ = from.donatequota_;
    }
    if (cached_has_bits & 0x00000040u) {
      maxcount_ = from.maxcount_;
    }
    if (cached_has_bits & 0x00000080u) {
      totalquota_ = from.totalquota_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetChatRoomUpgradeStatusResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetChatRoomUpgradeStatusResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatRoomUpgradeStatusResp::CopyFrom(const GetChatRoomUpgradeStatusResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetChatRoomUpgradeStatusResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatRoomUpgradeStatusResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007e) != 0x0000007e) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetChatRoomUpgradeStatusResp::Swap(GetChatRoomUpgradeStatusResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChatRoomUpgradeStatusResp::InternalSwap(GetChatRoomUpgradeStatusResp* other) {
  resultmsg_.Swap(&other->resultmsg_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(status_, other->status_);
  std::swap(mobilequota_, other->mobilequota_);
  std::swap(cardquota_, other->cardquota_);
  std::swap(donatequota_, other->donatequota_);
  std::swap(maxcount_, other->maxcount_);
  std::swap(totalquota_, other->totalquota_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetChatRoomUpgradeStatusResp::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetChatRoomUpgradeStatusResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetChatRoomUpgradeStatusResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetChatRoomUpgradeStatusResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void GetChatRoomUpgradeStatusResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetChatRoomUpgradeStatusResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetChatRoomUpgradeStatusResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeStatusResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetChatRoomUpgradeStatusResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomUpgradeStatusResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetChatRoomUpgradeStatusResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomUpgradeStatusResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetChatRoomUpgradeStatusResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomUpgradeStatusResp.BaseResponse)
}

// required uint32 Status = 2;
bool GetChatRoomUpgradeStatusResp::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetChatRoomUpgradeStatusResp::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void GetChatRoomUpgradeStatusResp::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetChatRoomUpgradeStatusResp::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 GetChatRoomUpgradeStatusResp::status() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeStatusResp.Status)
  return status_;
}
void GetChatRoomUpgradeStatusResp::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeStatusResp.Status)
}

// required uint32 MobileQuota = 3;
bool GetChatRoomUpgradeStatusResp::has_mobilequota() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetChatRoomUpgradeStatusResp::set_has_mobilequota() {
  _has_bits_[0] |= 0x00000008u;
}
void GetChatRoomUpgradeStatusResp::clear_has_mobilequota() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetChatRoomUpgradeStatusResp::clear_mobilequota() {
  mobilequota_ = 0u;
  clear_has_mobilequota();
}
::google::protobuf::uint32 GetChatRoomUpgradeStatusResp::mobilequota() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeStatusResp.MobileQuota)
  return mobilequota_;
}
void GetChatRoomUpgradeStatusResp::set_mobilequota(::google::protobuf::uint32 value) {
  set_has_mobilequota();
  mobilequota_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeStatusResp.MobileQuota)
}

// required uint32 CardQuota = 4;
bool GetChatRoomUpgradeStatusResp::has_cardquota() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetChatRoomUpgradeStatusResp::set_has_cardquota() {
  _has_bits_[0] |= 0x00000010u;
}
void GetChatRoomUpgradeStatusResp::clear_has_cardquota() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetChatRoomUpgradeStatusResp::clear_cardquota() {
  cardquota_ = 0u;
  clear_has_cardquota();
}
::google::protobuf::uint32 GetChatRoomUpgradeStatusResp::cardquota() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeStatusResp.CardQuota)
  return cardquota_;
}
void GetChatRoomUpgradeStatusResp::set_cardquota(::google::protobuf::uint32 value) {
  set_has_cardquota();
  cardquota_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeStatusResp.CardQuota)
}

// required uint32 DonateQuota = 5;
bool GetChatRoomUpgradeStatusResp::has_donatequota() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetChatRoomUpgradeStatusResp::set_has_donatequota() {
  _has_bits_[0] |= 0x00000020u;
}
void GetChatRoomUpgradeStatusResp::clear_has_donatequota() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetChatRoomUpgradeStatusResp::clear_donatequota() {
  donatequota_ = 0u;
  clear_has_donatequota();
}
::google::protobuf::uint32 GetChatRoomUpgradeStatusResp::donatequota() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeStatusResp.DonateQuota)
  return donatequota_;
}
void GetChatRoomUpgradeStatusResp::set_donatequota(::google::protobuf::uint32 value) {
  set_has_donatequota();
  donatequota_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeStatusResp.DonateQuota)
}

// required uint32 MaxCount = 6;
bool GetChatRoomUpgradeStatusResp::has_maxcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GetChatRoomUpgradeStatusResp::set_has_maxcount() {
  _has_bits_[0] |= 0x00000040u;
}
void GetChatRoomUpgradeStatusResp::clear_has_maxcount() {
  _has_bits_[0] &= ~0x00000040u;
}
void GetChatRoomUpgradeStatusResp::clear_maxcount() {
  maxcount_ = 0u;
  clear_has_maxcount();
}
::google::protobuf::uint32 GetChatRoomUpgradeStatusResp::maxcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeStatusResp.MaxCount)
  return maxcount_;
}
void GetChatRoomUpgradeStatusResp::set_maxcount(::google::protobuf::uint32 value) {
  set_has_maxcount();
  maxcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeStatusResp.MaxCount)
}

// optional string ResultMsg = 7;
bool GetChatRoomUpgradeStatusResp::has_resultmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetChatRoomUpgradeStatusResp::set_has_resultmsg() {
  _has_bits_[0] |= 0x00000001u;
}
void GetChatRoomUpgradeStatusResp::clear_has_resultmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetChatRoomUpgradeStatusResp::clear_resultmsg() {
  resultmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resultmsg();
}
const ::std::string& GetChatRoomUpgradeStatusResp::resultmsg() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeStatusResp.ResultMsg)
  return resultmsg_.GetNoArena();
}
void GetChatRoomUpgradeStatusResp::set_resultmsg(const ::std::string& value) {
  set_has_resultmsg();
  resultmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeStatusResp.ResultMsg)
}
#if LANG_CXX11
void GetChatRoomUpgradeStatusResp::set_resultmsg(::std::string&& value) {
  set_has_resultmsg();
  resultmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomUpgradeStatusResp.ResultMsg)
}
#endif
void GetChatRoomUpgradeStatusResp::set_resultmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_resultmsg();
  resultmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomUpgradeStatusResp.ResultMsg)
}
void GetChatRoomUpgradeStatusResp::set_resultmsg(const char* value, size_t size) {
  set_has_resultmsg();
  resultmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomUpgradeStatusResp.ResultMsg)
}
::std::string* GetChatRoomUpgradeStatusResp::mutable_resultmsg() {
  set_has_resultmsg();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomUpgradeStatusResp.ResultMsg)
  return resultmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetChatRoomUpgradeStatusResp::release_resultmsg() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomUpgradeStatusResp.ResultMsg)
  clear_has_resultmsg();
  return resultmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetChatRoomUpgradeStatusResp::set_allocated_resultmsg(::std::string* resultmsg) {
  if (resultmsg != NULL) {
    set_has_resultmsg();
  } else {
    clear_has_resultmsg();
  }
  resultmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resultmsg);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomUpgradeStatusResp.ResultMsg)
}

// optional uint32 TotalQuota = 8;
bool GetChatRoomUpgradeStatusResp::has_totalquota() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GetChatRoomUpgradeStatusResp::set_has_totalquota() {
  _has_bits_[0] |= 0x00000080u;
}
void GetChatRoomUpgradeStatusResp::clear_has_totalquota() {
  _has_bits_[0] &= ~0x00000080u;
}
void GetChatRoomUpgradeStatusResp::clear_totalquota() {
  totalquota_ = 0u;
  clear_has_totalquota();
}
::google::protobuf::uint32 GetChatRoomUpgradeStatusResp::totalquota() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeStatusResp.TotalQuota)
  return totalquota_;
}
void GetChatRoomUpgradeStatusResp::set_totalquota(::google::protobuf::uint32 value) {
  set_has_totalquota();
  totalquota_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeStatusResp.TotalQuota)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpgradeChatRoomReq::kBaseRequestFieldNumber;
const int UpgradeChatRoomReq::kChatRoomNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpgradeChatRoomReq::UpgradeChatRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UpgradeChatRoomReq)
}
UpgradeChatRoomReq::UpgradeChatRoomReq(const UpgradeChatRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomname()) {
    chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.UpgradeChatRoomReq)
}

void UpgradeChatRoomReq::SharedCtor() {
  _cached_size_ = 0;
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

UpgradeChatRoomReq::~UpgradeChatRoomReq() {
  // @@protoc_insertion_point(destructor:micromsg.UpgradeChatRoomReq)
  SharedDtor();
}

void UpgradeChatRoomReq::SharedDtor() {
  chatroomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void UpgradeChatRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeChatRoomReq::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpgradeChatRoomReq& UpgradeChatRoomReq::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpgradeChatRoomReq* UpgradeChatRoomReq::New(::google::protobuf::Arena* arena) const {
  UpgradeChatRoomReq* n = new UpgradeChatRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpgradeChatRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UpgradeChatRoomReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_chatroomname()) {
      GOOGLE_DCHECK(!chatroomname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomname_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpgradeChatRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UpgradeChatRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ChatRoomName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomname().data(), this->chatroomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UpgradeChatRoomReq.ChatRoomName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UpgradeChatRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UpgradeChatRoomReq)
  return false;
#undef DO_
}

void UpgradeChatRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UpgradeChatRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UpgradeChatRoomReq.ChatRoomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chatroomname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UpgradeChatRoomReq)
}

::google::protobuf::uint8* UpgradeChatRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UpgradeChatRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UpgradeChatRoomReq.ChatRoomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatroomname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UpgradeChatRoomReq)
  return target;
}

size_t UpgradeChatRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UpgradeChatRoomReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string ChatRoomName = 2;
  if (has_chatroomname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatroomname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeChatRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UpgradeChatRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UpgradeChatRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpgradeChatRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UpgradeChatRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UpgradeChatRoomReq)
    MergeFrom(*source);
  }
}

void UpgradeChatRoomReq::MergeFrom(const UpgradeChatRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UpgradeChatRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chatroomname();
      chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void UpgradeChatRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UpgradeChatRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeChatRoomReq::CopyFrom(const UpgradeChatRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UpgradeChatRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeChatRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void UpgradeChatRoomReq::Swap(UpgradeChatRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpgradeChatRoomReq::InternalSwap(UpgradeChatRoomReq* other) {
  chatroomname_.Swap(&other->chatroomname_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpgradeChatRoomReq::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpgradeChatRoomReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool UpgradeChatRoomReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UpgradeChatRoomReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void UpgradeChatRoomReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void UpgradeChatRoomReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& UpgradeChatRoomReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.UpgradeChatRoomReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* UpgradeChatRoomReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UpgradeChatRoomReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* UpgradeChatRoomReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.UpgradeChatRoomReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void UpgradeChatRoomReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UpgradeChatRoomReq.BaseRequest)
}

// optional string ChatRoomName = 2;
bool UpgradeChatRoomReq::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpgradeChatRoomReq::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
void UpgradeChatRoomReq::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpgradeChatRoomReq::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
const ::std::string& UpgradeChatRoomReq::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.UpgradeChatRoomReq.ChatRoomName)
  return chatroomname_.GetNoArena();
}
void UpgradeChatRoomReq::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UpgradeChatRoomReq.ChatRoomName)
}
#if LANG_CXX11
void UpgradeChatRoomReq::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UpgradeChatRoomReq.ChatRoomName)
}
#endif
void UpgradeChatRoomReq::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UpgradeChatRoomReq.ChatRoomName)
}
void UpgradeChatRoomReq::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UpgradeChatRoomReq.ChatRoomName)
}
::std::string* UpgradeChatRoomReq::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.UpgradeChatRoomReq.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpgradeChatRoomReq::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.UpgradeChatRoomReq.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpgradeChatRoomReq::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UpgradeChatRoomReq.ChatRoomName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpgradeChatRoomResp::kBaseResponseFieldNumber;
const int UpgradeChatRoomResp::kChatRoomDataFieldNumber;
const int UpgradeChatRoomResp::kResultMsgFieldNumber;
const int UpgradeChatRoomResp::kMaxCountFieldNumber;
const int UpgradeChatRoomResp::kMobileQuotaFieldNumber;
const int UpgradeChatRoomResp::kCardQuotaFieldNumber;
const int UpgradeChatRoomResp::kDonateQuotaFieldNumber;
const int UpgradeChatRoomResp::kTotalQuotaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpgradeChatRoomResp::UpgradeChatRoomResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UpgradeChatRoomResp)
}
UpgradeChatRoomResp::UpgradeChatRoomResp(const UpgradeChatRoomResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatroomdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomdata()) {
    chatroomdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomdata_);
  }
  resultmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_resultmsg()) {
    resultmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resultmsg_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&maxcount_, &from.maxcount_,
    reinterpret_cast<char*>(&totalquota_) -
    reinterpret_cast<char*>(&maxcount_) + sizeof(totalquota_));
  // @@protoc_insertion_point(copy_constructor:micromsg.UpgradeChatRoomResp)
}

void UpgradeChatRoomResp::SharedCtor() {
  _cached_size_ = 0;
  chatroomdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resultmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&totalquota_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(totalquota_));
}

UpgradeChatRoomResp::~UpgradeChatRoomResp() {
  // @@protoc_insertion_point(destructor:micromsg.UpgradeChatRoomResp)
  SharedDtor();
}

void UpgradeChatRoomResp::SharedDtor() {
  chatroomdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resultmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void UpgradeChatRoomResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeChatRoomResp::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpgradeChatRoomResp& UpgradeChatRoomResp::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpgradeChatRoomResp* UpgradeChatRoomResp::New(::google::protobuf::Arena* arena) const {
  UpgradeChatRoomResp* n = new UpgradeChatRoomResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpgradeChatRoomResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UpgradeChatRoomResp)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_chatroomdata()) {
      GOOGLE_DCHECK(!chatroomdata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomdata_.UnsafeRawStringPointer())->clear();
    }
    if (has_resultmsg()) {
      GOOGLE_DCHECK(!resultmsg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*resultmsg_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&maxcount_, 0, reinterpret_cast<char*>(&totalquota_) -
      reinterpret_cast<char*>(&maxcount_) + sizeof(totalquota_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpgradeChatRoomResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UpgradeChatRoomResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ChatRoomData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomdata().data(), this->chatroomdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UpgradeChatRoomResp.ChatRoomData");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ResultMsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resultmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resultmsg().data(), this->resultmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UpgradeChatRoomResp.ResultMsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 MaxCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_maxcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MobileQuota = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_mobilequota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mobilequota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CardQuota = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_cardquota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardquota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DonateQuota = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_donatequota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donatequota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TotalQuota = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_totalquota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalquota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UpgradeChatRoomResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UpgradeChatRoomResp)
  return false;
#undef DO_
}

void UpgradeChatRoomResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UpgradeChatRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string ChatRoomData = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomdata().data(), this->chatroomdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UpgradeChatRoomResp.ChatRoomData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chatroomdata(), output);
  }

  // optional string ResultMsg = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resultmsg().data(), this->resultmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UpgradeChatRoomResp.ResultMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->resultmsg(), output);
  }

  // optional uint32 MaxCount = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxcount(), output);
  }

  // required uint32 MobileQuota = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mobilequota(), output);
  }

  // required uint32 CardQuota = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cardquota(), output);
  }

  // required uint32 DonateQuota = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->donatequota(), output);
  }

  // optional uint32 TotalQuota = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->totalquota(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UpgradeChatRoomResp)
}

::google::protobuf::uint8* UpgradeChatRoomResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UpgradeChatRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string ChatRoomData = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomdata().data(), this->chatroomdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UpgradeChatRoomResp.ChatRoomData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatroomdata(), target);
  }

  // optional string ResultMsg = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resultmsg().data(), this->resultmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UpgradeChatRoomResp.ResultMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resultmsg(), target);
  }

  // optional uint32 MaxCount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxcount(), target);
  }

  // required uint32 MobileQuota = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mobilequota(), target);
  }

  // required uint32 CardQuota = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cardquota(), target);
  }

  // required uint32 DonateQuota = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->donatequota(), target);
  }

  // optional uint32 TotalQuota = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->totalquota(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UpgradeChatRoomResp)
  return target;
}

size_t UpgradeChatRoomResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.UpgradeChatRoomResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_mobilequota()) {
    // required uint32 MobileQuota = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mobilequota());
  }

  if (has_cardquota()) {
    // required uint32 CardQuota = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cardquota());
  }

  if (has_donatequota()) {
    // required uint32 DonateQuota = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->donatequota());
  }

  return total_size;
}
size_t UpgradeChatRoomResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UpgradeChatRoomResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000074) ^ 0x00000074) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 MobileQuota = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mobilequota());

    // required uint32 CardQuota = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cardquota());

    // required uint32 DonateQuota = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->donatequota());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ChatRoomData = 2;
    if (has_chatroomdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatroomdata());
    }

    // optional string ResultMsg = 3;
    if (has_resultmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resultmsg());
    }

  }
  // optional uint32 MaxCount = 4;
  if (has_maxcount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxcount());
  }

  // optional uint32 TotalQuota = 8;
  if (has_totalquota()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalquota());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeChatRoomResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UpgradeChatRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  const UpgradeChatRoomResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpgradeChatRoomResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UpgradeChatRoomResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UpgradeChatRoomResp)
    MergeFrom(*source);
  }
}

void UpgradeChatRoomResp::MergeFrom(const UpgradeChatRoomResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UpgradeChatRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chatroomdata();
      chatroomdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomdata_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_resultmsg();
      resultmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resultmsg_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000008u) {
      maxcount_ = from.maxcount_;
    }
    if (cached_has_bits & 0x00000010u) {
      mobilequota_ = from.mobilequota_;
    }
    if (cached_has_bits & 0x00000020u) {
      cardquota_ = from.cardquota_;
    }
    if (cached_has_bits & 0x00000040u) {
      donatequota_ = from.donatequota_;
    }
    if (cached_has_bits & 0x00000080u) {
      totalquota_ = from.totalquota_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpgradeChatRoomResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UpgradeChatRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeChatRoomResp::CopyFrom(const UpgradeChatRoomResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UpgradeChatRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeChatRoomResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000074) != 0x00000074) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void UpgradeChatRoomResp::Swap(UpgradeChatRoomResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpgradeChatRoomResp::InternalSwap(UpgradeChatRoomResp* other) {
  chatroomdata_.Swap(&other->chatroomdata_);
  resultmsg_.Swap(&other->resultmsg_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(maxcount_, other->maxcount_);
  std::swap(mobilequota_, other->mobilequota_);
  std::swap(cardquota_, other->cardquota_);
  std::swap(donatequota_, other->donatequota_);
  std::swap(totalquota_, other->totalquota_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpgradeChatRoomResp::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpgradeChatRoomResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool UpgradeChatRoomResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UpgradeChatRoomResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void UpgradeChatRoomResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void UpgradeChatRoomResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& UpgradeChatRoomResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UpgradeChatRoomResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* UpgradeChatRoomResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UpgradeChatRoomResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* UpgradeChatRoomResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UpgradeChatRoomResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void UpgradeChatRoomResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UpgradeChatRoomResp.BaseResponse)
}

// optional string ChatRoomData = 2;
bool UpgradeChatRoomResp::has_chatroomdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpgradeChatRoomResp::set_has_chatroomdata() {
  _has_bits_[0] |= 0x00000001u;
}
void UpgradeChatRoomResp::clear_has_chatroomdata() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpgradeChatRoomResp::clear_chatroomdata() {
  chatroomdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomdata();
}
const ::std::string& UpgradeChatRoomResp::chatroomdata() const {
  // @@protoc_insertion_point(field_get:micromsg.UpgradeChatRoomResp.ChatRoomData)
  return chatroomdata_.GetNoArena();
}
void UpgradeChatRoomResp::set_chatroomdata(const ::std::string& value) {
  set_has_chatroomdata();
  chatroomdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UpgradeChatRoomResp.ChatRoomData)
}
#if LANG_CXX11
void UpgradeChatRoomResp::set_chatroomdata(::std::string&& value) {
  set_has_chatroomdata();
  chatroomdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UpgradeChatRoomResp.ChatRoomData)
}
#endif
void UpgradeChatRoomResp::set_chatroomdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomdata();
  chatroomdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UpgradeChatRoomResp.ChatRoomData)
}
void UpgradeChatRoomResp::set_chatroomdata(const char* value, size_t size) {
  set_has_chatroomdata();
  chatroomdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UpgradeChatRoomResp.ChatRoomData)
}
::std::string* UpgradeChatRoomResp::mutable_chatroomdata() {
  set_has_chatroomdata();
  // @@protoc_insertion_point(field_mutable:micromsg.UpgradeChatRoomResp.ChatRoomData)
  return chatroomdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpgradeChatRoomResp::release_chatroomdata() {
  // @@protoc_insertion_point(field_release:micromsg.UpgradeChatRoomResp.ChatRoomData)
  clear_has_chatroomdata();
  return chatroomdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpgradeChatRoomResp::set_allocated_chatroomdata(::std::string* chatroomdata) {
  if (chatroomdata != NULL) {
    set_has_chatroomdata();
  } else {
    clear_has_chatroomdata();
  }
  chatroomdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomdata);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UpgradeChatRoomResp.ChatRoomData)
}

// optional string ResultMsg = 3;
bool UpgradeChatRoomResp::has_resultmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UpgradeChatRoomResp::set_has_resultmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void UpgradeChatRoomResp::clear_has_resultmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void UpgradeChatRoomResp::clear_resultmsg() {
  resultmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resultmsg();
}
const ::std::string& UpgradeChatRoomResp::resultmsg() const {
  // @@protoc_insertion_point(field_get:micromsg.UpgradeChatRoomResp.ResultMsg)
  return resultmsg_.GetNoArena();
}
void UpgradeChatRoomResp::set_resultmsg(const ::std::string& value) {
  set_has_resultmsg();
  resultmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UpgradeChatRoomResp.ResultMsg)
}
#if LANG_CXX11
void UpgradeChatRoomResp::set_resultmsg(::std::string&& value) {
  set_has_resultmsg();
  resultmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UpgradeChatRoomResp.ResultMsg)
}
#endif
void UpgradeChatRoomResp::set_resultmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_resultmsg();
  resultmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UpgradeChatRoomResp.ResultMsg)
}
void UpgradeChatRoomResp::set_resultmsg(const char* value, size_t size) {
  set_has_resultmsg();
  resultmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UpgradeChatRoomResp.ResultMsg)
}
::std::string* UpgradeChatRoomResp::mutable_resultmsg() {
  set_has_resultmsg();
  // @@protoc_insertion_point(field_mutable:micromsg.UpgradeChatRoomResp.ResultMsg)
  return resultmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpgradeChatRoomResp::release_resultmsg() {
  // @@protoc_insertion_point(field_release:micromsg.UpgradeChatRoomResp.ResultMsg)
  clear_has_resultmsg();
  return resultmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpgradeChatRoomResp::set_allocated_resultmsg(::std::string* resultmsg) {
  if (resultmsg != NULL) {
    set_has_resultmsg();
  } else {
    clear_has_resultmsg();
  }
  resultmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resultmsg);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UpgradeChatRoomResp.ResultMsg)
}

// optional uint32 MaxCount = 4;
bool UpgradeChatRoomResp::has_maxcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UpgradeChatRoomResp::set_has_maxcount() {
  _has_bits_[0] |= 0x00000008u;
}
void UpgradeChatRoomResp::clear_has_maxcount() {
  _has_bits_[0] &= ~0x00000008u;
}
void UpgradeChatRoomResp::clear_maxcount() {
  maxcount_ = 0u;
  clear_has_maxcount();
}
::google::protobuf::uint32 UpgradeChatRoomResp::maxcount() const {
  // @@protoc_insertion_point(field_get:micromsg.UpgradeChatRoomResp.MaxCount)
  return maxcount_;
}
void UpgradeChatRoomResp::set_maxcount(::google::protobuf::uint32 value) {
  set_has_maxcount();
  maxcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UpgradeChatRoomResp.MaxCount)
}

// required uint32 MobileQuota = 5;
bool UpgradeChatRoomResp::has_mobilequota() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UpgradeChatRoomResp::set_has_mobilequota() {
  _has_bits_[0] |= 0x00000010u;
}
void UpgradeChatRoomResp::clear_has_mobilequota() {
  _has_bits_[0] &= ~0x00000010u;
}
void UpgradeChatRoomResp::clear_mobilequota() {
  mobilequota_ = 0u;
  clear_has_mobilequota();
}
::google::protobuf::uint32 UpgradeChatRoomResp::mobilequota() const {
  // @@protoc_insertion_point(field_get:micromsg.UpgradeChatRoomResp.MobileQuota)
  return mobilequota_;
}
void UpgradeChatRoomResp::set_mobilequota(::google::protobuf::uint32 value) {
  set_has_mobilequota();
  mobilequota_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UpgradeChatRoomResp.MobileQuota)
}

// required uint32 CardQuota = 6;
bool UpgradeChatRoomResp::has_cardquota() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UpgradeChatRoomResp::set_has_cardquota() {
  _has_bits_[0] |= 0x00000020u;
}
void UpgradeChatRoomResp::clear_has_cardquota() {
  _has_bits_[0] &= ~0x00000020u;
}
void UpgradeChatRoomResp::clear_cardquota() {
  cardquota_ = 0u;
  clear_has_cardquota();
}
::google::protobuf::uint32 UpgradeChatRoomResp::cardquota() const {
  // @@protoc_insertion_point(field_get:micromsg.UpgradeChatRoomResp.CardQuota)
  return cardquota_;
}
void UpgradeChatRoomResp::set_cardquota(::google::protobuf::uint32 value) {
  set_has_cardquota();
  cardquota_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UpgradeChatRoomResp.CardQuota)
}

// required uint32 DonateQuota = 7;
bool UpgradeChatRoomResp::has_donatequota() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UpgradeChatRoomResp::set_has_donatequota() {
  _has_bits_[0] |= 0x00000040u;
}
void UpgradeChatRoomResp::clear_has_donatequota() {
  _has_bits_[0] &= ~0x00000040u;
}
void UpgradeChatRoomResp::clear_donatequota() {
  donatequota_ = 0u;
  clear_has_donatequota();
}
::google::protobuf::uint32 UpgradeChatRoomResp::donatequota() const {
  // @@protoc_insertion_point(field_get:micromsg.UpgradeChatRoomResp.DonateQuota)
  return donatequota_;
}
void UpgradeChatRoomResp::set_donatequota(::google::protobuf::uint32 value) {
  set_has_donatequota();
  donatequota_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UpgradeChatRoomResp.DonateQuota)
}

// optional uint32 TotalQuota = 8;
bool UpgradeChatRoomResp::has_totalquota() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UpgradeChatRoomResp::set_has_totalquota() {
  _has_bits_[0] |= 0x00000080u;
}
void UpgradeChatRoomResp::clear_has_totalquota() {
  _has_bits_[0] &= ~0x00000080u;
}
void UpgradeChatRoomResp::clear_totalquota() {
  totalquota_ = 0u;
  clear_has_totalquota();
}
::google::protobuf::uint32 UpgradeChatRoomResp::totalquota() const {
  // @@protoc_insertion_point(field_get:micromsg.UpgradeChatRoomResp.TotalQuota)
  return totalquota_;
}
void UpgradeChatRoomResp::set_totalquota(::google::protobuf::uint32 value) {
  set_has_totalquota();
  totalquota_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UpgradeChatRoomResp.TotalQuota)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddChatRoomDonateRecordReq::kBaseRequestFieldNumber;
const int AddChatRoomDonateRecordReq::kChatRoomNameFieldNumber;
const int AddChatRoomDonateRecordReq::kTransIDFieldNumber;
const int AddChatRoomDonateRecordReq::kTitleFieldNumber;
const int AddChatRoomDonateRecordReq::kWebUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddChatRoomDonateRecordReq::AddChatRoomDonateRecordReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AddChatRoomDonateRecordReq)
}
AddChatRoomDonateRecordReq::AddChatRoomDonateRecordReq(const AddChatRoomDonateRecordReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomname()) {
    chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
  }
  transid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transid()) {
    transid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transid_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  weburl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weburl()) {
    weburl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weburl_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.AddChatRoomDonateRecordReq)
}

void AddChatRoomDonateRecordReq::SharedCtor() {
  _cached_size_ = 0;
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weburl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

AddChatRoomDonateRecordReq::~AddChatRoomDonateRecordReq() {
  // @@protoc_insertion_point(destructor:micromsg.AddChatRoomDonateRecordReq)
  SharedDtor();
}

void AddChatRoomDonateRecordReq::SharedDtor() {
  chatroomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weburl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void AddChatRoomDonateRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddChatRoomDonateRecordReq::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddChatRoomDonateRecordReq& AddChatRoomDonateRecordReq::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddChatRoomDonateRecordReq* AddChatRoomDonateRecordReq::New(::google::protobuf::Arena* arena) const {
  AddChatRoomDonateRecordReq* n = new AddChatRoomDonateRecordReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddChatRoomDonateRecordReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AddChatRoomDonateRecordReq)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_chatroomname()) {
      GOOGLE_DCHECK(!chatroomname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomname_.UnsafeRawStringPointer())->clear();
    }
    if (has_transid()) {
      GOOGLE_DCHECK(!transid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*transid_.UnsafeRawStringPointer())->clear();
    }
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_weburl()) {
      GOOGLE_DCHECK(!weburl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*weburl_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddChatRoomDonateRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AddChatRoomDonateRecordReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ChatRoomName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomname().data(), this->chatroomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AddChatRoomDonateRecordReq.ChatRoomName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TransID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->transid().data(), this->transid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AddChatRoomDonateRecordReq.TransID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Title = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AddChatRoomDonateRecordReq.Title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string WebUrl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weburl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weburl().data(), this->weburl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AddChatRoomDonateRecordReq.WebUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AddChatRoomDonateRecordReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AddChatRoomDonateRecordReq)
  return false;
#undef DO_
}

void AddChatRoomDonateRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AddChatRoomDonateRecordReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddChatRoomDonateRecordReq.ChatRoomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chatroomname(), output);
  }

  // optional string TransID = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transid().data(), this->transid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddChatRoomDonateRecordReq.TransID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->transid(), output);
  }

  // optional string Title = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddChatRoomDonateRecordReq.Title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->title(), output);
  }

  // optional string WebUrl = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weburl().data(), this->weburl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddChatRoomDonateRecordReq.WebUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->weburl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AddChatRoomDonateRecordReq)
}

::google::protobuf::uint8* AddChatRoomDonateRecordReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AddChatRoomDonateRecordReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddChatRoomDonateRecordReq.ChatRoomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatroomname(), target);
  }

  // optional string TransID = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transid().data(), this->transid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddChatRoomDonateRecordReq.TransID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->transid(), target);
  }

  // optional string Title = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddChatRoomDonateRecordReq.Title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // optional string WebUrl = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weburl().data(), this->weburl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddChatRoomDonateRecordReq.WebUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->weburl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AddChatRoomDonateRecordReq)
  return target;
}

size_t AddChatRoomDonateRecordReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AddChatRoomDonateRecordReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string ChatRoomName = 2;
    if (has_chatroomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatroomname());
    }

    // optional string TransID = 3;
    if (has_transid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transid());
    }

    // optional string Title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string WebUrl = 5;
    if (has_weburl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weburl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddChatRoomDonateRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AddChatRoomDonateRecordReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AddChatRoomDonateRecordReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddChatRoomDonateRecordReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AddChatRoomDonateRecordReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AddChatRoomDonateRecordReq)
    MergeFrom(*source);
  }
}

void AddChatRoomDonateRecordReq::MergeFrom(const AddChatRoomDonateRecordReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AddChatRoomDonateRecordReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chatroomname();
      chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_transid();
      transid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_weburl();
      weburl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weburl_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void AddChatRoomDonateRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AddChatRoomDonateRecordReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddChatRoomDonateRecordReq::CopyFrom(const AddChatRoomDonateRecordReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AddChatRoomDonateRecordReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddChatRoomDonateRecordReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void AddChatRoomDonateRecordReq::Swap(AddChatRoomDonateRecordReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddChatRoomDonateRecordReq::InternalSwap(AddChatRoomDonateRecordReq* other) {
  chatroomname_.Swap(&other->chatroomname_);
  transid_.Swap(&other->transid_);
  title_.Swap(&other->title_);
  weburl_.Swap(&other->weburl_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddChatRoomDonateRecordReq::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddChatRoomDonateRecordReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool AddChatRoomDonateRecordReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AddChatRoomDonateRecordReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000010u;
}
void AddChatRoomDonateRecordReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000010u;
}
void AddChatRoomDonateRecordReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& AddChatRoomDonateRecordReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomDonateRecordReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* AddChatRoomDonateRecordReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomDonateRecordReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* AddChatRoomDonateRecordReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.AddChatRoomDonateRecordReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void AddChatRoomDonateRecordReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddChatRoomDonateRecordReq.BaseRequest)
}

// optional string ChatRoomName = 2;
bool AddChatRoomDonateRecordReq::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddChatRoomDonateRecordReq::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
void AddChatRoomDonateRecordReq::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddChatRoomDonateRecordReq::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
const ::std::string& AddChatRoomDonateRecordReq::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomDonateRecordReq.ChatRoomName)
  return chatroomname_.GetNoArena();
}
void AddChatRoomDonateRecordReq::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AddChatRoomDonateRecordReq.ChatRoomName)
}
#if LANG_CXX11
void AddChatRoomDonateRecordReq::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AddChatRoomDonateRecordReq.ChatRoomName)
}
#endif
void AddChatRoomDonateRecordReq::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AddChatRoomDonateRecordReq.ChatRoomName)
}
void AddChatRoomDonateRecordReq::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AddChatRoomDonateRecordReq.ChatRoomName)
}
::std::string* AddChatRoomDonateRecordReq::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomDonateRecordReq.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddChatRoomDonateRecordReq::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.AddChatRoomDonateRecordReq.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddChatRoomDonateRecordReq::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddChatRoomDonateRecordReq.ChatRoomName)
}

// optional string TransID = 3;
bool AddChatRoomDonateRecordReq::has_transid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddChatRoomDonateRecordReq::set_has_transid() {
  _has_bits_[0] |= 0x00000002u;
}
void AddChatRoomDonateRecordReq::clear_has_transid() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddChatRoomDonateRecordReq::clear_transid() {
  transid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transid();
}
const ::std::string& AddChatRoomDonateRecordReq::transid() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomDonateRecordReq.TransID)
  return transid_.GetNoArena();
}
void AddChatRoomDonateRecordReq::set_transid(const ::std::string& value) {
  set_has_transid();
  transid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AddChatRoomDonateRecordReq.TransID)
}
#if LANG_CXX11
void AddChatRoomDonateRecordReq::set_transid(::std::string&& value) {
  set_has_transid();
  transid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AddChatRoomDonateRecordReq.TransID)
}
#endif
void AddChatRoomDonateRecordReq::set_transid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_transid();
  transid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AddChatRoomDonateRecordReq.TransID)
}
void AddChatRoomDonateRecordReq::set_transid(const char* value, size_t size) {
  set_has_transid();
  transid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AddChatRoomDonateRecordReq.TransID)
}
::std::string* AddChatRoomDonateRecordReq::mutable_transid() {
  set_has_transid();
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomDonateRecordReq.TransID)
  return transid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddChatRoomDonateRecordReq::release_transid() {
  // @@protoc_insertion_point(field_release:micromsg.AddChatRoomDonateRecordReq.TransID)
  clear_has_transid();
  return transid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddChatRoomDonateRecordReq::set_allocated_transid(::std::string* transid) {
  if (transid != NULL) {
    set_has_transid();
  } else {
    clear_has_transid();
  }
  transid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddChatRoomDonateRecordReq.TransID)
}

// optional string Title = 4;
bool AddChatRoomDonateRecordReq::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AddChatRoomDonateRecordReq::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
void AddChatRoomDonateRecordReq::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
void AddChatRoomDonateRecordReq::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& AddChatRoomDonateRecordReq::title() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomDonateRecordReq.Title)
  return title_.GetNoArena();
}
void AddChatRoomDonateRecordReq::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AddChatRoomDonateRecordReq.Title)
}
#if LANG_CXX11
void AddChatRoomDonateRecordReq::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AddChatRoomDonateRecordReq.Title)
}
#endif
void AddChatRoomDonateRecordReq::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AddChatRoomDonateRecordReq.Title)
}
void AddChatRoomDonateRecordReq::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AddChatRoomDonateRecordReq.Title)
}
::std::string* AddChatRoomDonateRecordReq::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomDonateRecordReq.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddChatRoomDonateRecordReq::release_title() {
  // @@protoc_insertion_point(field_release:micromsg.AddChatRoomDonateRecordReq.Title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddChatRoomDonateRecordReq::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddChatRoomDonateRecordReq.Title)
}

// optional string WebUrl = 5;
bool AddChatRoomDonateRecordReq::has_weburl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AddChatRoomDonateRecordReq::set_has_weburl() {
  _has_bits_[0] |= 0x00000008u;
}
void AddChatRoomDonateRecordReq::clear_has_weburl() {
  _has_bits_[0] &= ~0x00000008u;
}
void AddChatRoomDonateRecordReq::clear_weburl() {
  weburl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weburl();
}
const ::std::string& AddChatRoomDonateRecordReq::weburl() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomDonateRecordReq.WebUrl)
  return weburl_.GetNoArena();
}
void AddChatRoomDonateRecordReq::set_weburl(const ::std::string& value) {
  set_has_weburl();
  weburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AddChatRoomDonateRecordReq.WebUrl)
}
#if LANG_CXX11
void AddChatRoomDonateRecordReq::set_weburl(::std::string&& value) {
  set_has_weburl();
  weburl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AddChatRoomDonateRecordReq.WebUrl)
}
#endif
void AddChatRoomDonateRecordReq::set_weburl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weburl();
  weburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AddChatRoomDonateRecordReq.WebUrl)
}
void AddChatRoomDonateRecordReq::set_weburl(const char* value, size_t size) {
  set_has_weburl();
  weburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AddChatRoomDonateRecordReq.WebUrl)
}
::std::string* AddChatRoomDonateRecordReq::mutable_weburl() {
  set_has_weburl();
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomDonateRecordReq.WebUrl)
  return weburl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddChatRoomDonateRecordReq::release_weburl() {
  // @@protoc_insertion_point(field_release:micromsg.AddChatRoomDonateRecordReq.WebUrl)
  clear_has_weburl();
  return weburl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddChatRoomDonateRecordReq::set_allocated_weburl(::std::string* weburl) {
  if (weburl != NULL) {
    set_has_weburl();
  } else {
    clear_has_weburl();
  }
  weburl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weburl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddChatRoomDonateRecordReq.WebUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddChatRoomDonateRecordResp::kBaseResponseFieldNumber;
const int AddChatRoomDonateRecordResp::kMaxCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddChatRoomDonateRecordResp::AddChatRoomDonateRecordResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AddChatRoomDonateRecordResp)
}
AddChatRoomDonateRecordResp::AddChatRoomDonateRecordResp(const AddChatRoomDonateRecordResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  maxcount_ = from.maxcount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.AddChatRoomDonateRecordResp)
}

void AddChatRoomDonateRecordResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&maxcount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(maxcount_));
}

AddChatRoomDonateRecordResp::~AddChatRoomDonateRecordResp() {
  // @@protoc_insertion_point(destructor:micromsg.AddChatRoomDonateRecordResp)
  SharedDtor();
}

void AddChatRoomDonateRecordResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void AddChatRoomDonateRecordResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddChatRoomDonateRecordResp::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddChatRoomDonateRecordResp& AddChatRoomDonateRecordResp::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddChatRoomDonateRecordResp* AddChatRoomDonateRecordResp::New(::google::protobuf::Arena* arena) const {
  AddChatRoomDonateRecordResp* n = new AddChatRoomDonateRecordResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddChatRoomDonateRecordResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AddChatRoomDonateRecordResp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  maxcount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddChatRoomDonateRecordResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AddChatRoomDonateRecordResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MaxCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_maxcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AddChatRoomDonateRecordResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AddChatRoomDonateRecordResp)
  return false;
#undef DO_
}

void AddChatRoomDonateRecordResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AddChatRoomDonateRecordResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 MaxCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AddChatRoomDonateRecordResp)
}

::google::protobuf::uint8* AddChatRoomDonateRecordResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AddChatRoomDonateRecordResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 MaxCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AddChatRoomDonateRecordResp)
  return target;
}

size_t AddChatRoomDonateRecordResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.AddChatRoomDonateRecordResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_maxcount()) {
    // required uint32 MaxCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxcount());
  }

  return total_size;
}
size_t AddChatRoomDonateRecordResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AddChatRoomDonateRecordResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 MaxCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddChatRoomDonateRecordResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AddChatRoomDonateRecordResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AddChatRoomDonateRecordResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddChatRoomDonateRecordResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AddChatRoomDonateRecordResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AddChatRoomDonateRecordResp)
    MergeFrom(*source);
  }
}

void AddChatRoomDonateRecordResp::MergeFrom(const AddChatRoomDonateRecordResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AddChatRoomDonateRecordResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      maxcount_ = from.maxcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddChatRoomDonateRecordResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AddChatRoomDonateRecordResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddChatRoomDonateRecordResp::CopyFrom(const AddChatRoomDonateRecordResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AddChatRoomDonateRecordResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddChatRoomDonateRecordResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void AddChatRoomDonateRecordResp::Swap(AddChatRoomDonateRecordResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddChatRoomDonateRecordResp::InternalSwap(AddChatRoomDonateRecordResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(maxcount_, other->maxcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddChatRoomDonateRecordResp::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddChatRoomDonateRecordResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool AddChatRoomDonateRecordResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddChatRoomDonateRecordResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void AddChatRoomDonateRecordResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddChatRoomDonateRecordResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& AddChatRoomDonateRecordResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomDonateRecordResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* AddChatRoomDonateRecordResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomDonateRecordResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* AddChatRoomDonateRecordResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.AddChatRoomDonateRecordResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void AddChatRoomDonateRecordResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddChatRoomDonateRecordResp.BaseResponse)
}

// required uint32 MaxCount = 2;
bool AddChatRoomDonateRecordResp::has_maxcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddChatRoomDonateRecordResp::set_has_maxcount() {
  _has_bits_[0] |= 0x00000002u;
}
void AddChatRoomDonateRecordResp::clear_has_maxcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddChatRoomDonateRecordResp::clear_maxcount() {
  maxcount_ = 0u;
  clear_has_maxcount();
}
::google::protobuf::uint32 AddChatRoomDonateRecordResp::maxcount() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomDonateRecordResp.MaxCount)
  return maxcount_;
}
void AddChatRoomDonateRecordResp::set_maxcount(::google::protobuf::uint32 value) {
  set_has_maxcount();
  maxcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddChatRoomDonateRecordResp.MaxCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GoogleContactUploadItem::kGoogleContactNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GoogleContactUploadItem::GoogleContactUploadItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GoogleContactUploadItem)
}
GoogleContactUploadItem::GoogleContactUploadItem(const GoogleContactUploadItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  googlecontactname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_googlecontactname()) {
    googlecontactname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.googlecontactname_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GoogleContactUploadItem)
}

void GoogleContactUploadItem::SharedCtor() {
  _cached_size_ = 0;
  googlecontactname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GoogleContactUploadItem::~GoogleContactUploadItem() {
  // @@protoc_insertion_point(destructor:micromsg.GoogleContactUploadItem)
  SharedDtor();
}

void GoogleContactUploadItem::SharedDtor() {
  googlecontactname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GoogleContactUploadItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoogleContactUploadItem::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GoogleContactUploadItem& GoogleContactUploadItem::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GoogleContactUploadItem* GoogleContactUploadItem::New(::google::protobuf::Arena* arena) const {
  GoogleContactUploadItem* n = new GoogleContactUploadItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GoogleContactUploadItem::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GoogleContactUploadItem)
  if (has_googlecontactname()) {
    GOOGLE_DCHECK(!googlecontactname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*googlecontactname_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GoogleContactUploadItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GoogleContactUploadItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GoogleContactName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_googlecontactname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->googlecontactname().data(), this->googlecontactname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GoogleContactUploadItem.GoogleContactName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GoogleContactUploadItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GoogleContactUploadItem)
  return false;
#undef DO_
}

void GoogleContactUploadItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GoogleContactUploadItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string GoogleContactName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->googlecontactname().data(), this->googlecontactname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GoogleContactUploadItem.GoogleContactName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->googlecontactname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GoogleContactUploadItem)
}

::google::protobuf::uint8* GoogleContactUploadItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GoogleContactUploadItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string GoogleContactName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->googlecontactname().data(), this->googlecontactname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GoogleContactUploadItem.GoogleContactName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->googlecontactname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GoogleContactUploadItem)
  return target;
}

size_t GoogleContactUploadItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GoogleContactUploadItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string GoogleContactName = 1;
  if (has_googlecontactname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->googlecontactname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoogleContactUploadItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GoogleContactUploadItem)
  GOOGLE_DCHECK_NE(&from, this);
  const GoogleContactUploadItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GoogleContactUploadItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GoogleContactUploadItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GoogleContactUploadItem)
    MergeFrom(*source);
  }
}

void GoogleContactUploadItem::MergeFrom(const GoogleContactUploadItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GoogleContactUploadItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_googlecontactname()) {
    set_has_googlecontactname();
    googlecontactname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.googlecontactname_);
  }
}

void GoogleContactUploadItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GoogleContactUploadItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoogleContactUploadItem::CopyFrom(const GoogleContactUploadItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GoogleContactUploadItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoogleContactUploadItem::IsInitialized() const {
  return true;
}

void GoogleContactUploadItem::Swap(GoogleContactUploadItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GoogleContactUploadItem::InternalSwap(GoogleContactUploadItem* other) {
  googlecontactname_.Swap(&other->googlecontactname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GoogleContactUploadItem::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GoogleContactUploadItem

// optional string GoogleContactName = 1;
bool GoogleContactUploadItem::has_googlecontactname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GoogleContactUploadItem::set_has_googlecontactname() {
  _has_bits_[0] |= 0x00000001u;
}
void GoogleContactUploadItem::clear_has_googlecontactname() {
  _has_bits_[0] &= ~0x00000001u;
}
void GoogleContactUploadItem::clear_googlecontactname() {
  googlecontactname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_googlecontactname();
}
const ::std::string& GoogleContactUploadItem::googlecontactname() const {
  // @@protoc_insertion_point(field_get:micromsg.GoogleContactUploadItem.GoogleContactName)
  return googlecontactname_.GetNoArena();
}
void GoogleContactUploadItem::set_googlecontactname(const ::std::string& value) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GoogleContactUploadItem.GoogleContactName)
}
#if LANG_CXX11
void GoogleContactUploadItem::set_googlecontactname(::std::string&& value) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GoogleContactUploadItem.GoogleContactName)
}
#endif
void GoogleContactUploadItem::set_googlecontactname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GoogleContactUploadItem.GoogleContactName)
}
void GoogleContactUploadItem::set_googlecontactname(const char* value, size_t size) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GoogleContactUploadItem.GoogleContactName)
}
::std::string* GoogleContactUploadItem::mutable_googlecontactname() {
  set_has_googlecontactname();
  // @@protoc_insertion_point(field_mutable:micromsg.GoogleContactUploadItem.GoogleContactName)
  return googlecontactname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GoogleContactUploadItem::release_googlecontactname() {
  // @@protoc_insertion_point(field_release:micromsg.GoogleContactUploadItem.GoogleContactName)
  clear_has_googlecontactname();
  return googlecontactname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GoogleContactUploadItem::set_allocated_googlecontactname(::std::string* googlecontactname) {
  if (googlecontactname != NULL) {
    set_has_googlecontactname();
  } else {
    clear_has_googlecontactname();
  }
  googlecontactname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), googlecontactname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GoogleContactUploadItem.GoogleContactName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListGoogleContactRequest::kBaseRequestFieldNumber;
const int ListGoogleContactRequest::kCountFieldNumber;
const int ListGoogleContactRequest::kListFieldNumber;
const int ListGoogleContactRequest::kContinueFlagFieldNumber;
const int ListGoogleContactRequest::kClickSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListGoogleContactRequest::ListGoogleContactRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ListGoogleContactRequest)
}
ListGoogleContactRequest::ListGoogleContactRequest(const ListGoogleContactRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&count_, &from.count_,
    reinterpret_cast<char*>(&clicksource_) -
    reinterpret_cast<char*>(&count_) + sizeof(clicksource_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ListGoogleContactRequest)
}

void ListGoogleContactRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&clicksource_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(clicksource_));
}

ListGoogleContactRequest::~ListGoogleContactRequest() {
  // @@protoc_insertion_point(destructor:micromsg.ListGoogleContactRequest)
  SharedDtor();
}

void ListGoogleContactRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void ListGoogleContactRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListGoogleContactRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListGoogleContactRequest& ListGoogleContactRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListGoogleContactRequest* ListGoogleContactRequest::New(::google::protobuf::Arena* arena) const {
  ListGoogleContactRequest* n = new ListGoogleContactRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListGoogleContactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ListGoogleContactRequest)
  list_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&count_, 0, reinterpret_cast<char*>(&clicksource_) -
      reinterpret_cast<char*>(&count_) + sizeof(clicksource_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ListGoogleContactRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ListGoogleContactRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.GoogleContactUploadItem List = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ContinueFlag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_continueflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &continueflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ClickSource = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_clicksource();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clicksource_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ListGoogleContactRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ListGoogleContactRequest)
  return false;
#undef DO_
}

void ListGoogleContactRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ListGoogleContactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .micromsg.GoogleContactUploadItem List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  // required uint32 ContinueFlag = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->continueflag(), output);
  }

  // required uint32 ClickSource = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->clicksource(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ListGoogleContactRequest)
}

::google::protobuf::uint8* ListGoogleContactRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ListGoogleContactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.GoogleContactUploadItem List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->list(i), deterministic, target);
  }

  // required uint32 ContinueFlag = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->continueflag(), target);
  }

  // required uint32 ClickSource = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->clicksource(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ListGoogleContactRequest)
  return target;
}

size_t ListGoogleContactRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ListGoogleContactRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  if (has_continueflag()) {
    // required uint32 ContinueFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->continueflag());
  }

  if (has_clicksource()) {
    // required uint32 ClickSource = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clicksource());
  }

  return total_size;
}
size_t ListGoogleContactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ListGoogleContactRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

    // required uint32 ContinueFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->continueflag());

    // required uint32 ClickSource = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clicksource());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.GoogleContactUploadItem List = 3;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListGoogleContactRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ListGoogleContactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListGoogleContactRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListGoogleContactRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ListGoogleContactRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ListGoogleContactRequest)
    MergeFrom(*source);
  }
}

void ListGoogleContactRequest::MergeFrom(const ListGoogleContactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ListGoogleContactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      continueflag_ = from.continueflag_;
    }
    if (cached_has_bits & 0x00000008u) {
      clicksource_ = from.clicksource_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ListGoogleContactRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ListGoogleContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListGoogleContactRequest::CopyFrom(const ListGoogleContactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ListGoogleContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListGoogleContactRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void ListGoogleContactRequest::Swap(ListGoogleContactRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListGoogleContactRequest::InternalSwap(ListGoogleContactRequest* other) {
  list_.InternalSwap(&other->list_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(count_, other->count_);
  std::swap(continueflag_, other->continueflag_);
  std::swap(clicksource_, other->clicksource_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListGoogleContactRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListGoogleContactRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool ListGoogleContactRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ListGoogleContactRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void ListGoogleContactRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void ListGoogleContactRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& ListGoogleContactRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ListGoogleContactRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* ListGoogleContactRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ListGoogleContactRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* ListGoogleContactRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ListGoogleContactRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void ListGoogleContactRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ListGoogleContactRequest.BaseRequest)
}

// required uint32 Count = 2;
bool ListGoogleContactRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ListGoogleContactRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void ListGoogleContactRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void ListGoogleContactRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 ListGoogleContactRequest::count() const {
  // @@protoc_insertion_point(field_get:micromsg.ListGoogleContactRequest.Count)
  return count_;
}
void ListGoogleContactRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ListGoogleContactRequest.Count)
}

// repeated .micromsg.GoogleContactUploadItem List = 3;
int ListGoogleContactRequest::list_size() const {
  return list_.size();
}
void ListGoogleContactRequest::clear_list() {
  list_.Clear();
}
const ::micromsg::GoogleContactUploadItem& ListGoogleContactRequest::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ListGoogleContactRequest.List)
  return list_.Get(index);
}
::micromsg::GoogleContactUploadItem* ListGoogleContactRequest::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.ListGoogleContactRequest.List)
  return list_.Mutable(index);
}
::micromsg::GoogleContactUploadItem* ListGoogleContactRequest::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.ListGoogleContactRequest.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::GoogleContactUploadItem >*
ListGoogleContactRequest::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ListGoogleContactRequest.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::GoogleContactUploadItem >&
ListGoogleContactRequest::list() const {
  // @@protoc_insertion_point(field_list:micromsg.ListGoogleContactRequest.List)
  return list_;
}

// required uint32 ContinueFlag = 4;
bool ListGoogleContactRequest::has_continueflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ListGoogleContactRequest::set_has_continueflag() {
  _has_bits_[0] |= 0x00000004u;
}
void ListGoogleContactRequest::clear_has_continueflag() {
  _has_bits_[0] &= ~0x00000004u;
}
void ListGoogleContactRequest::clear_continueflag() {
  continueflag_ = 0u;
  clear_has_continueflag();
}
::google::protobuf::uint32 ListGoogleContactRequest::continueflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ListGoogleContactRequest.ContinueFlag)
  return continueflag_;
}
void ListGoogleContactRequest::set_continueflag(::google::protobuf::uint32 value) {
  set_has_continueflag();
  continueflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ListGoogleContactRequest.ContinueFlag)
}

// required uint32 ClickSource = 5;
bool ListGoogleContactRequest::has_clicksource() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ListGoogleContactRequest::set_has_clicksource() {
  _has_bits_[0] |= 0x00000008u;
}
void ListGoogleContactRequest::clear_has_clicksource() {
  _has_bits_[0] &= ~0x00000008u;
}
void ListGoogleContactRequest::clear_clicksource() {
  clicksource_ = 0u;
  clear_has_clicksource();
}
::google::protobuf::uint32 ListGoogleContactRequest::clicksource() const {
  // @@protoc_insertion_point(field_get:micromsg.ListGoogleContactRequest.ClickSource)
  return clicksource_;
}
void ListGoogleContactRequest::set_clicksource(::google::protobuf::uint32 value) {
  set_has_clicksource();
  clicksource_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ListGoogleContactRequest.ClickSource)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GoogleContactItem::kGoogleContactNameFieldNumber;
const int GoogleContactItem::kUserNameFieldNumber;
const int GoogleContactItem::kBigHeadUrlFieldNumber;
const int GoogleContactItem::kSmallHeadUrlFieldNumber;
const int GoogleContactItem::kRetFieldNumber;
const int GoogleContactItem::kNickNameFieldNumber;
const int GoogleContactItem::kAntispamTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GoogleContactItem::GoogleContactItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GoogleContactItem)
}
GoogleContactItem::GoogleContactItem(const GoogleContactItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  googlecontactname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_googlecontactname()) {
    googlecontactname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.googlecontactname_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  bigheadurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bigheadurl()) {
    bigheadurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadurl_);
  }
  smallheadurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_smallheadurl()) {
    smallheadurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadurl_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  antispamticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_antispamticket()) {
    antispamticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.antispamticket_);
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GoogleContactItem)
}

void GoogleContactItem::SharedCtor() {
  _cached_size_ = 0;
  googlecontactname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigheadurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  antispamticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_ = 0;
}

GoogleContactItem::~GoogleContactItem() {
  // @@protoc_insertion_point(destructor:micromsg.GoogleContactItem)
  SharedDtor();
}

void GoogleContactItem::SharedDtor() {
  googlecontactname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigheadurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  antispamticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GoogleContactItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoogleContactItem::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GoogleContactItem& GoogleContactItem::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GoogleContactItem* GoogleContactItem::New(::google::protobuf::Arena* arena) const {
  GoogleContactItem* n = new GoogleContactItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GoogleContactItem::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GoogleContactItem)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_googlecontactname()) {
      GOOGLE_DCHECK(!googlecontactname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*googlecontactname_.UnsafeRawStringPointer())->clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_bigheadurl()) {
      GOOGLE_DCHECK(!bigheadurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bigheadurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_smallheadurl()) {
      GOOGLE_DCHECK(!smallheadurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*smallheadurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_antispamticket()) {
      GOOGLE_DCHECK(!antispamticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*antispamticket_.UnsafeRawStringPointer())->clear();
    }
  }
  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GoogleContactItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GoogleContactItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GoogleContactName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_googlecontactname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->googlecontactname().data(), this->googlecontactname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GoogleContactItem.GoogleContactName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GoogleContactItem.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BigHeadUrl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bigheadurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bigheadurl().data(), this->bigheadurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GoogleContactItem.BigHeadUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SmallHeadUrl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smallheadurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->smallheadurl().data(), this->smallheadurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GoogleContactItem.SmallHeadUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Ret = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string NickName = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GoogleContactItem.NickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AntispamTicket = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_antispamticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->antispamticket().data(), this->antispamticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GoogleContactItem.AntispamTicket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GoogleContactItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GoogleContactItem)
  return false;
#undef DO_
}

void GoogleContactItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GoogleContactItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string GoogleContactName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->googlecontactname().data(), this->googlecontactname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GoogleContactItem.GoogleContactName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->googlecontactname(), output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GoogleContactItem.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string BigHeadUrl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadurl().data(), this->bigheadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GoogleContactItem.BigHeadUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bigheadurl(), output);
  }

  // optional string SmallHeadUrl = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadurl().data(), this->smallheadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GoogleContactItem.SmallHeadUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->smallheadurl(), output);
  }

  // required int32 Ret = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ret(), output);
  }

  // optional string NickName = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GoogleContactItem.NickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->nickname(), output);
  }

  // optional string AntispamTicket = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->antispamticket().data(), this->antispamticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GoogleContactItem.AntispamTicket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->antispamticket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GoogleContactItem)
}

::google::protobuf::uint8* GoogleContactItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GoogleContactItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string GoogleContactName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->googlecontactname().data(), this->googlecontactname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GoogleContactItem.GoogleContactName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->googlecontactname(), target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GoogleContactItem.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string BigHeadUrl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadurl().data(), this->bigheadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GoogleContactItem.BigHeadUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bigheadurl(), target);
  }

  // optional string SmallHeadUrl = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadurl().data(), this->smallheadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GoogleContactItem.SmallHeadUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->smallheadurl(), target);
  }

  // required int32 Ret = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ret(), target);
  }

  // optional string NickName = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GoogleContactItem.NickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->nickname(), target);
  }

  // optional string AntispamTicket = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->antispamticket().data(), this->antispamticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GoogleContactItem.AntispamTicket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->antispamticket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GoogleContactItem)
  return target;
}

size_t GoogleContactItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GoogleContactItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 Ret = 5;
  if (has_ret()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string GoogleContactName = 1;
    if (has_googlecontactname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->googlecontactname());
    }

    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string BigHeadUrl = 3;
    if (has_bigheadurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bigheadurl());
    }

    // optional string SmallHeadUrl = 4;
    if (has_smallheadurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->smallheadurl());
    }

    // optional string NickName = 6;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string AntispamTicket = 7;
    if (has_antispamticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->antispamticket());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoogleContactItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GoogleContactItem)
  GOOGLE_DCHECK_NE(&from, this);
  const GoogleContactItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GoogleContactItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GoogleContactItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GoogleContactItem)
    MergeFrom(*source);
  }
}

void GoogleContactItem::MergeFrom(const GoogleContactItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GoogleContactItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_googlecontactname();
      googlecontactname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.googlecontactname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_bigheadurl();
      bigheadurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadurl_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_smallheadurl();
      smallheadurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadurl_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_antispamticket();
      antispamticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.antispamticket_);
    }
    if (cached_has_bits & 0x00000040u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GoogleContactItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GoogleContactItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoogleContactItem::CopyFrom(const GoogleContactItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GoogleContactItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoogleContactItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;
  return true;
}

void GoogleContactItem::Swap(GoogleContactItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GoogleContactItem::InternalSwap(GoogleContactItem* other) {
  googlecontactname_.Swap(&other->googlecontactname_);
  username_.Swap(&other->username_);
  bigheadurl_.Swap(&other->bigheadurl_);
  smallheadurl_.Swap(&other->smallheadurl_);
  nickname_.Swap(&other->nickname_);
  antispamticket_.Swap(&other->antispamticket_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GoogleContactItem::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GoogleContactItem

// optional string GoogleContactName = 1;
bool GoogleContactItem::has_googlecontactname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GoogleContactItem::set_has_googlecontactname() {
  _has_bits_[0] |= 0x00000001u;
}
void GoogleContactItem::clear_has_googlecontactname() {
  _has_bits_[0] &= ~0x00000001u;
}
void GoogleContactItem::clear_googlecontactname() {
  googlecontactname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_googlecontactname();
}
const ::std::string& GoogleContactItem::googlecontactname() const {
  // @@protoc_insertion_point(field_get:micromsg.GoogleContactItem.GoogleContactName)
  return googlecontactname_.GetNoArena();
}
void GoogleContactItem::set_googlecontactname(const ::std::string& value) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GoogleContactItem.GoogleContactName)
}
#if LANG_CXX11
void GoogleContactItem::set_googlecontactname(::std::string&& value) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GoogleContactItem.GoogleContactName)
}
#endif
void GoogleContactItem::set_googlecontactname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GoogleContactItem.GoogleContactName)
}
void GoogleContactItem::set_googlecontactname(const char* value, size_t size) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GoogleContactItem.GoogleContactName)
}
::std::string* GoogleContactItem::mutable_googlecontactname() {
  set_has_googlecontactname();
  // @@protoc_insertion_point(field_mutable:micromsg.GoogleContactItem.GoogleContactName)
  return googlecontactname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GoogleContactItem::release_googlecontactname() {
  // @@protoc_insertion_point(field_release:micromsg.GoogleContactItem.GoogleContactName)
  clear_has_googlecontactname();
  return googlecontactname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GoogleContactItem::set_allocated_googlecontactname(::std::string* googlecontactname) {
  if (googlecontactname != NULL) {
    set_has_googlecontactname();
  } else {
    clear_has_googlecontactname();
  }
  googlecontactname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), googlecontactname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GoogleContactItem.GoogleContactName)
}

// optional string UserName = 2;
bool GoogleContactItem::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GoogleContactItem::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
void GoogleContactItem::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void GoogleContactItem::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& GoogleContactItem::username() const {
  // @@protoc_insertion_point(field_get:micromsg.GoogleContactItem.UserName)
  return username_.GetNoArena();
}
void GoogleContactItem::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GoogleContactItem.UserName)
}
#if LANG_CXX11
void GoogleContactItem::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GoogleContactItem.UserName)
}
#endif
void GoogleContactItem::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GoogleContactItem.UserName)
}
void GoogleContactItem::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GoogleContactItem.UserName)
}
::std::string* GoogleContactItem::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.GoogleContactItem.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GoogleContactItem::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.GoogleContactItem.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GoogleContactItem::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GoogleContactItem.UserName)
}

// optional string BigHeadUrl = 3;
bool GoogleContactItem::has_bigheadurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GoogleContactItem::set_has_bigheadurl() {
  _has_bits_[0] |= 0x00000004u;
}
void GoogleContactItem::clear_has_bigheadurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void GoogleContactItem::clear_bigheadurl() {
  bigheadurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadurl();
}
const ::std::string& GoogleContactItem::bigheadurl() const {
  // @@protoc_insertion_point(field_get:micromsg.GoogleContactItem.BigHeadUrl)
  return bigheadurl_.GetNoArena();
}
void GoogleContactItem::set_bigheadurl(const ::std::string& value) {
  set_has_bigheadurl();
  bigheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GoogleContactItem.BigHeadUrl)
}
#if LANG_CXX11
void GoogleContactItem::set_bigheadurl(::std::string&& value) {
  set_has_bigheadurl();
  bigheadurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GoogleContactItem.BigHeadUrl)
}
#endif
void GoogleContactItem::set_bigheadurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadurl();
  bigheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GoogleContactItem.BigHeadUrl)
}
void GoogleContactItem::set_bigheadurl(const char* value, size_t size) {
  set_has_bigheadurl();
  bigheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GoogleContactItem.BigHeadUrl)
}
::std::string* GoogleContactItem::mutable_bigheadurl() {
  set_has_bigheadurl();
  // @@protoc_insertion_point(field_mutable:micromsg.GoogleContactItem.BigHeadUrl)
  return bigheadurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GoogleContactItem::release_bigheadurl() {
  // @@protoc_insertion_point(field_release:micromsg.GoogleContactItem.BigHeadUrl)
  clear_has_bigheadurl();
  return bigheadurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GoogleContactItem::set_allocated_bigheadurl(::std::string* bigheadurl) {
  if (bigheadurl != NULL) {
    set_has_bigheadurl();
  } else {
    clear_has_bigheadurl();
  }
  bigheadurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GoogleContactItem.BigHeadUrl)
}

// optional string SmallHeadUrl = 4;
bool GoogleContactItem::has_smallheadurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GoogleContactItem::set_has_smallheadurl() {
  _has_bits_[0] |= 0x00000008u;
}
void GoogleContactItem::clear_has_smallheadurl() {
  _has_bits_[0] &= ~0x00000008u;
}
void GoogleContactItem::clear_smallheadurl() {
  smallheadurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadurl();
}
const ::std::string& GoogleContactItem::smallheadurl() const {
  // @@protoc_insertion_point(field_get:micromsg.GoogleContactItem.SmallHeadUrl)
  return smallheadurl_.GetNoArena();
}
void GoogleContactItem::set_smallheadurl(const ::std::string& value) {
  set_has_smallheadurl();
  smallheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GoogleContactItem.SmallHeadUrl)
}
#if LANG_CXX11
void GoogleContactItem::set_smallheadurl(::std::string&& value) {
  set_has_smallheadurl();
  smallheadurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GoogleContactItem.SmallHeadUrl)
}
#endif
void GoogleContactItem::set_smallheadurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadurl();
  smallheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GoogleContactItem.SmallHeadUrl)
}
void GoogleContactItem::set_smallheadurl(const char* value, size_t size) {
  set_has_smallheadurl();
  smallheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GoogleContactItem.SmallHeadUrl)
}
::std::string* GoogleContactItem::mutable_smallheadurl() {
  set_has_smallheadurl();
  // @@protoc_insertion_point(field_mutable:micromsg.GoogleContactItem.SmallHeadUrl)
  return smallheadurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GoogleContactItem::release_smallheadurl() {
  // @@protoc_insertion_point(field_release:micromsg.GoogleContactItem.SmallHeadUrl)
  clear_has_smallheadurl();
  return smallheadurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GoogleContactItem::set_allocated_smallheadurl(::std::string* smallheadurl) {
  if (smallheadurl != NULL) {
    set_has_smallheadurl();
  } else {
    clear_has_smallheadurl();
  }
  smallheadurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GoogleContactItem.SmallHeadUrl)
}

// required int32 Ret = 5;
bool GoogleContactItem::has_ret() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GoogleContactItem::set_has_ret() {
  _has_bits_[0] |= 0x00000040u;
}
void GoogleContactItem::clear_has_ret() {
  _has_bits_[0] &= ~0x00000040u;
}
void GoogleContactItem::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::google::protobuf::int32 GoogleContactItem::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.GoogleContactItem.Ret)
  return ret_;
}
void GoogleContactItem::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GoogleContactItem.Ret)
}

// optional string NickName = 6;
bool GoogleContactItem::has_nickname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GoogleContactItem::set_has_nickname() {
  _has_bits_[0] |= 0x00000010u;
}
void GoogleContactItem::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000010u;
}
void GoogleContactItem::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& GoogleContactItem::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.GoogleContactItem.NickName)
  return nickname_.GetNoArena();
}
void GoogleContactItem::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GoogleContactItem.NickName)
}
#if LANG_CXX11
void GoogleContactItem::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GoogleContactItem.NickName)
}
#endif
void GoogleContactItem::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GoogleContactItem.NickName)
}
void GoogleContactItem::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GoogleContactItem.NickName)
}
::std::string* GoogleContactItem::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.GoogleContactItem.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GoogleContactItem::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.GoogleContactItem.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GoogleContactItem::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GoogleContactItem.NickName)
}

// optional string AntispamTicket = 7;
bool GoogleContactItem::has_antispamticket() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GoogleContactItem::set_has_antispamticket() {
  _has_bits_[0] |= 0x00000020u;
}
void GoogleContactItem::clear_has_antispamticket() {
  _has_bits_[0] &= ~0x00000020u;
}
void GoogleContactItem::clear_antispamticket() {
  antispamticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_antispamticket();
}
const ::std::string& GoogleContactItem::antispamticket() const {
  // @@protoc_insertion_point(field_get:micromsg.GoogleContactItem.AntispamTicket)
  return antispamticket_.GetNoArena();
}
void GoogleContactItem::set_antispamticket(const ::std::string& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GoogleContactItem.AntispamTicket)
}
#if LANG_CXX11
void GoogleContactItem::set_antispamticket(::std::string&& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GoogleContactItem.AntispamTicket)
}
#endif
void GoogleContactItem::set_antispamticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GoogleContactItem.AntispamTicket)
}
void GoogleContactItem::set_antispamticket(const char* value, size_t size) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GoogleContactItem.AntispamTicket)
}
::std::string* GoogleContactItem::mutable_antispamticket() {
  set_has_antispamticket();
  // @@protoc_insertion_point(field_mutable:micromsg.GoogleContactItem.AntispamTicket)
  return antispamticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GoogleContactItem::release_antispamticket() {
  // @@protoc_insertion_point(field_release:micromsg.GoogleContactItem.AntispamTicket)
  clear_has_antispamticket();
  return antispamticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GoogleContactItem::set_allocated_antispamticket(::std::string* antispamticket) {
  if (antispamticket != NULL) {
    set_has_antispamticket();
  } else {
    clear_has_antispamticket();
  }
  antispamticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), antispamticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GoogleContactItem.AntispamTicket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListGoogleContactResponse::kBaseResponseFieldNumber;
const int ListGoogleContactResponse::kCountFieldNumber;
const int ListGoogleContactResponse::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListGoogleContactResponse::ListGoogleContactResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ListGoogleContactResponse)
}
ListGoogleContactResponse::ListGoogleContactResponse(const ListGoogleContactResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.ListGoogleContactResponse)
}

void ListGoogleContactResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(count_));
}

ListGoogleContactResponse::~ListGoogleContactResponse() {
  // @@protoc_insertion_point(destructor:micromsg.ListGoogleContactResponse)
  SharedDtor();
}

void ListGoogleContactResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void ListGoogleContactResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListGoogleContactResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListGoogleContactResponse& ListGoogleContactResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListGoogleContactResponse* ListGoogleContactResponse::New(::google::protobuf::Arena* arena) const {
  ListGoogleContactResponse* n = new ListGoogleContactResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListGoogleContactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ListGoogleContactResponse)
  list_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ListGoogleContactResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ListGoogleContactResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.GoogleContactItem List = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ListGoogleContactResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ListGoogleContactResponse)
  return false;
#undef DO_
}

void ListGoogleContactResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ListGoogleContactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .micromsg.GoogleContactItem List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ListGoogleContactResponse)
}

::google::protobuf::uint8* ListGoogleContactResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ListGoogleContactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.GoogleContactItem List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ListGoogleContactResponse)
  return target;
}

size_t ListGoogleContactResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ListGoogleContactResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t ListGoogleContactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ListGoogleContactResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.GoogleContactItem List = 3;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListGoogleContactResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ListGoogleContactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListGoogleContactResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListGoogleContactResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ListGoogleContactResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ListGoogleContactResponse)
    MergeFrom(*source);
  }
}

void ListGoogleContactResponse::MergeFrom(const ListGoogleContactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ListGoogleContactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ListGoogleContactResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ListGoogleContactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListGoogleContactResponse::CopyFrom(const ListGoogleContactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ListGoogleContactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListGoogleContactResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void ListGoogleContactResponse::Swap(ListGoogleContactResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListGoogleContactResponse::InternalSwap(ListGoogleContactResponse* other) {
  list_.InternalSwap(&other->list_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListGoogleContactResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListGoogleContactResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool ListGoogleContactResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ListGoogleContactResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void ListGoogleContactResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void ListGoogleContactResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& ListGoogleContactResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ListGoogleContactResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* ListGoogleContactResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ListGoogleContactResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* ListGoogleContactResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ListGoogleContactResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void ListGoogleContactResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ListGoogleContactResponse.BaseResponse)
}

// required uint32 Count = 2;
bool ListGoogleContactResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ListGoogleContactResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void ListGoogleContactResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void ListGoogleContactResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 ListGoogleContactResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.ListGoogleContactResponse.Count)
  return count_;
}
void ListGoogleContactResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ListGoogleContactResponse.Count)
}

// repeated .micromsg.GoogleContactItem List = 3;
int ListGoogleContactResponse::list_size() const {
  return list_.size();
}
void ListGoogleContactResponse::clear_list() {
  list_.Clear();
}
const ::micromsg::GoogleContactItem& ListGoogleContactResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ListGoogleContactResponse.List)
  return list_.Get(index);
}
::micromsg::GoogleContactItem* ListGoogleContactResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.ListGoogleContactResponse.List)
  return list_.Mutable(index);
}
::micromsg::GoogleContactItem* ListGoogleContactResponse::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.ListGoogleContactResponse.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::GoogleContactItem >*
ListGoogleContactResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ListGoogleContactResponse.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::GoogleContactItem >&
ListGoogleContactResponse::list() const {
  // @@protoc_insertion_point(field_list:micromsg.ListGoogleContactResponse.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InviteGoogleContactItem::kGoogleContactNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InviteGoogleContactItem::InviteGoogleContactItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.InviteGoogleContactItem)
}
InviteGoogleContactItem::InviteGoogleContactItem(const InviteGoogleContactItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  googlecontactname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_googlecontactname()) {
    googlecontactname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.googlecontactname_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.InviteGoogleContactItem)
}

void InviteGoogleContactItem::SharedCtor() {
  _cached_size_ = 0;
  googlecontactname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InviteGoogleContactItem::~InviteGoogleContactItem() {
  // @@protoc_insertion_point(destructor:micromsg.InviteGoogleContactItem)
  SharedDtor();
}

void InviteGoogleContactItem::SharedDtor() {
  googlecontactname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InviteGoogleContactItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteGoogleContactItem::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InviteGoogleContactItem& InviteGoogleContactItem::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

InviteGoogleContactItem* InviteGoogleContactItem::New(::google::protobuf::Arena* arena) const {
  InviteGoogleContactItem* n = new InviteGoogleContactItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InviteGoogleContactItem::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.InviteGoogleContactItem)
  if (has_googlecontactname()) {
    GOOGLE_DCHECK(!googlecontactname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*googlecontactname_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InviteGoogleContactItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.InviteGoogleContactItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GoogleContactName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_googlecontactname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->googlecontactname().data(), this->googlecontactname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.InviteGoogleContactItem.GoogleContactName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.InviteGoogleContactItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.InviteGoogleContactItem)
  return false;
#undef DO_
}

void InviteGoogleContactItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.InviteGoogleContactItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string GoogleContactName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->googlecontactname().data(), this->googlecontactname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.InviteGoogleContactItem.GoogleContactName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->googlecontactname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.InviteGoogleContactItem)
}

::google::protobuf::uint8* InviteGoogleContactItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.InviteGoogleContactItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string GoogleContactName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->googlecontactname().data(), this->googlecontactname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.InviteGoogleContactItem.GoogleContactName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->googlecontactname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.InviteGoogleContactItem)
  return target;
}

size_t InviteGoogleContactItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.InviteGoogleContactItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string GoogleContactName = 1;
  if (has_googlecontactname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->googlecontactname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteGoogleContactItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.InviteGoogleContactItem)
  GOOGLE_DCHECK_NE(&from, this);
  const InviteGoogleContactItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InviteGoogleContactItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.InviteGoogleContactItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.InviteGoogleContactItem)
    MergeFrom(*source);
  }
}

void InviteGoogleContactItem::MergeFrom(const InviteGoogleContactItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.InviteGoogleContactItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_googlecontactname()) {
    set_has_googlecontactname();
    googlecontactname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.googlecontactname_);
  }
}

void InviteGoogleContactItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.InviteGoogleContactItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteGoogleContactItem::CopyFrom(const InviteGoogleContactItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.InviteGoogleContactItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteGoogleContactItem::IsInitialized() const {
  return true;
}

void InviteGoogleContactItem::Swap(InviteGoogleContactItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InviteGoogleContactItem::InternalSwap(InviteGoogleContactItem* other) {
  googlecontactname_.Swap(&other->googlecontactname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InviteGoogleContactItem::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InviteGoogleContactItem

// optional string GoogleContactName = 1;
bool InviteGoogleContactItem::has_googlecontactname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InviteGoogleContactItem::set_has_googlecontactname() {
  _has_bits_[0] |= 0x00000001u;
}
void InviteGoogleContactItem::clear_has_googlecontactname() {
  _has_bits_[0] &= ~0x00000001u;
}
void InviteGoogleContactItem::clear_googlecontactname() {
  googlecontactname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_googlecontactname();
}
const ::std::string& InviteGoogleContactItem::googlecontactname() const {
  // @@protoc_insertion_point(field_get:micromsg.InviteGoogleContactItem.GoogleContactName)
  return googlecontactname_.GetNoArena();
}
void InviteGoogleContactItem::set_googlecontactname(const ::std::string& value) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.InviteGoogleContactItem.GoogleContactName)
}
#if LANG_CXX11
void InviteGoogleContactItem::set_googlecontactname(::std::string&& value) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.InviteGoogleContactItem.GoogleContactName)
}
#endif
void InviteGoogleContactItem::set_googlecontactname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.InviteGoogleContactItem.GoogleContactName)
}
void InviteGoogleContactItem::set_googlecontactname(const char* value, size_t size) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.InviteGoogleContactItem.GoogleContactName)
}
::std::string* InviteGoogleContactItem::mutable_googlecontactname() {
  set_has_googlecontactname();
  // @@protoc_insertion_point(field_mutable:micromsg.InviteGoogleContactItem.GoogleContactName)
  return googlecontactname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InviteGoogleContactItem::release_googlecontactname() {
  // @@protoc_insertion_point(field_release:micromsg.InviteGoogleContactItem.GoogleContactName)
  clear_has_googlecontactname();
  return googlecontactname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InviteGoogleContactItem::set_allocated_googlecontactname(::std::string* googlecontactname) {
  if (googlecontactname != NULL) {
    set_has_googlecontactname();
  } else {
    clear_has_googlecontactname();
  }
  googlecontactname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), googlecontactname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.InviteGoogleContactItem.GoogleContactName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InviteGoogleContactRequest::kBaseRequestFieldNumber;
const int InviteGoogleContactRequest::kCountFieldNumber;
const int InviteGoogleContactRequest::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InviteGoogleContactRequest::InviteGoogleContactRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.InviteGoogleContactRequest)
}
InviteGoogleContactRequest::InviteGoogleContactRequest(const InviteGoogleContactRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.InviteGoogleContactRequest)
}

void InviteGoogleContactRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(count_));
}

InviteGoogleContactRequest::~InviteGoogleContactRequest() {
  // @@protoc_insertion_point(destructor:micromsg.InviteGoogleContactRequest)
  SharedDtor();
}

void InviteGoogleContactRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void InviteGoogleContactRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteGoogleContactRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InviteGoogleContactRequest& InviteGoogleContactRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

InviteGoogleContactRequest* InviteGoogleContactRequest::New(::google::protobuf::Arena* arena) const {
  InviteGoogleContactRequest* n = new InviteGoogleContactRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InviteGoogleContactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.InviteGoogleContactRequest)
  list_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InviteGoogleContactRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.InviteGoogleContactRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.InviteGoogleContactItem List = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.InviteGoogleContactRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.InviteGoogleContactRequest)
  return false;
#undef DO_
}

void InviteGoogleContactRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.InviteGoogleContactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .micromsg.InviteGoogleContactItem List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.InviteGoogleContactRequest)
}

::google::protobuf::uint8* InviteGoogleContactRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.InviteGoogleContactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.InviteGoogleContactItem List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.InviteGoogleContactRequest)
  return target;
}

size_t InviteGoogleContactRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.InviteGoogleContactRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t InviteGoogleContactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.InviteGoogleContactRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.InviteGoogleContactItem List = 3;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteGoogleContactRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.InviteGoogleContactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InviteGoogleContactRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InviteGoogleContactRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.InviteGoogleContactRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.InviteGoogleContactRequest)
    MergeFrom(*source);
  }
}

void InviteGoogleContactRequest::MergeFrom(const InviteGoogleContactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.InviteGoogleContactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InviteGoogleContactRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.InviteGoogleContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteGoogleContactRequest::CopyFrom(const InviteGoogleContactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.InviteGoogleContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteGoogleContactRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void InviteGoogleContactRequest::Swap(InviteGoogleContactRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InviteGoogleContactRequest::InternalSwap(InviteGoogleContactRequest* other) {
  list_.InternalSwap(&other->list_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InviteGoogleContactRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InviteGoogleContactRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool InviteGoogleContactRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InviteGoogleContactRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void InviteGoogleContactRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void InviteGoogleContactRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& InviteGoogleContactRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.InviteGoogleContactRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* InviteGoogleContactRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.InviteGoogleContactRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* InviteGoogleContactRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.InviteGoogleContactRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void InviteGoogleContactRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.InviteGoogleContactRequest.BaseRequest)
}

// required uint32 Count = 2;
bool InviteGoogleContactRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InviteGoogleContactRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void InviteGoogleContactRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void InviteGoogleContactRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 InviteGoogleContactRequest::count() const {
  // @@protoc_insertion_point(field_get:micromsg.InviteGoogleContactRequest.Count)
  return count_;
}
void InviteGoogleContactRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.InviteGoogleContactRequest.Count)
}

// repeated .micromsg.InviteGoogleContactItem List = 3;
int InviteGoogleContactRequest::list_size() const {
  return list_.size();
}
void InviteGoogleContactRequest::clear_list() {
  list_.Clear();
}
const ::micromsg::InviteGoogleContactItem& InviteGoogleContactRequest::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.InviteGoogleContactRequest.List)
  return list_.Get(index);
}
::micromsg::InviteGoogleContactItem* InviteGoogleContactRequest::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.InviteGoogleContactRequest.List)
  return list_.Mutable(index);
}
::micromsg::InviteGoogleContactItem* InviteGoogleContactRequest::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.InviteGoogleContactRequest.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::InviteGoogleContactItem >*
InviteGoogleContactRequest::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.InviteGoogleContactRequest.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::InviteGoogleContactItem >&
InviteGoogleContactRequest::list() const {
  // @@protoc_insertion_point(field_list:micromsg.InviteGoogleContactRequest.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InviteGoogleContactResponse::kBaseResponseFieldNumber;
const int InviteGoogleContactResponse::kCountFieldNumber;
const int InviteGoogleContactResponse::kRetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InviteGoogleContactResponse::InviteGoogleContactResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.InviteGoogleContactResponse)
}
InviteGoogleContactResponse::InviteGoogleContactResponse(const InviteGoogleContactResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      rets_(from.rets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.InviteGoogleContactResponse)
}

void InviteGoogleContactResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(count_));
}

InviteGoogleContactResponse::~InviteGoogleContactResponse() {
  // @@protoc_insertion_point(destructor:micromsg.InviteGoogleContactResponse)
  SharedDtor();
}

void InviteGoogleContactResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void InviteGoogleContactResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteGoogleContactResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InviteGoogleContactResponse& InviteGoogleContactResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

InviteGoogleContactResponse* InviteGoogleContactResponse::New(::google::protobuf::Arena* arena) const {
  InviteGoogleContactResponse* n = new InviteGoogleContactResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InviteGoogleContactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.InviteGoogleContactResponse)
  rets_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InviteGoogleContactResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.InviteGoogleContactResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 Rets = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rets())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_rets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.InviteGoogleContactResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.InviteGoogleContactResponse)
  return false;
#undef DO_
}

void InviteGoogleContactResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.InviteGoogleContactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated int32 Rets = 3 [packed = true];
  if (this->rets_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rets_cached_byte_size_);
  }
  for (int i = 0, n = this->rets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->rets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.InviteGoogleContactResponse)
}

::google::protobuf::uint8* InviteGoogleContactResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.InviteGoogleContactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated int32 Rets = 3 [packed = true];
  if (this->rets_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _rets_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->rets_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.InviteGoogleContactResponse)
  return target;
}

size_t InviteGoogleContactResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.InviteGoogleContactResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t InviteGoogleContactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.InviteGoogleContactResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 Rets = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->rets_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rets_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteGoogleContactResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.InviteGoogleContactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InviteGoogleContactResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InviteGoogleContactResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.InviteGoogleContactResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.InviteGoogleContactResponse)
    MergeFrom(*source);
  }
}

void InviteGoogleContactResponse::MergeFrom(const InviteGoogleContactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.InviteGoogleContactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rets_.MergeFrom(from.rets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InviteGoogleContactResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.InviteGoogleContactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteGoogleContactResponse::CopyFrom(const InviteGoogleContactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.InviteGoogleContactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteGoogleContactResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void InviteGoogleContactResponse::Swap(InviteGoogleContactResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InviteGoogleContactResponse::InternalSwap(InviteGoogleContactResponse* other) {
  rets_.InternalSwap(&other->rets_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InviteGoogleContactResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InviteGoogleContactResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool InviteGoogleContactResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InviteGoogleContactResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void InviteGoogleContactResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void InviteGoogleContactResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& InviteGoogleContactResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.InviteGoogleContactResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* InviteGoogleContactResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.InviteGoogleContactResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* InviteGoogleContactResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.InviteGoogleContactResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void InviteGoogleContactResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.InviteGoogleContactResponse.BaseResponse)
}

// required uint32 Count = 2;
bool InviteGoogleContactResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InviteGoogleContactResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void InviteGoogleContactResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void InviteGoogleContactResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 InviteGoogleContactResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.InviteGoogleContactResponse.Count)
  return count_;
}
void InviteGoogleContactResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.InviteGoogleContactResponse.Count)
}

// repeated int32 Rets = 3 [packed = true];
int InviteGoogleContactResponse::rets_size() const {
  return rets_.size();
}
void InviteGoogleContactResponse::clear_rets() {
  rets_.Clear();
}
::google::protobuf::int32 InviteGoogleContactResponse::rets(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.InviteGoogleContactResponse.Rets)
  return rets_.Get(index);
}
void InviteGoogleContactResponse::set_rets(int index, ::google::protobuf::int32 value) {
  rets_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.InviteGoogleContactResponse.Rets)
}
void InviteGoogleContactResponse::add_rets(::google::protobuf::int32 value) {
  rets_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.InviteGoogleContactResponse.Rets)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InviteGoogleContactResponse::rets() const {
  // @@protoc_insertion_point(field_list:micromsg.InviteGoogleContactResponse.Rets)
  return rets_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InviteGoogleContactResponse::mutable_rets() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.InviteGoogleContactResponse.Rets)
  return &rets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BBMContactUploadItem::kBBPPIDFieldNumber;
const int BBMContactUploadItem::kBBPINFieldNumber;
const int BBMContactUploadItem::kBBMNickNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BBMContactUploadItem::BBMContactUploadItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BBMContactUploadItem)
}
BBMContactUploadItem::BBMContactUploadItem(const BBMContactUploadItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bbppid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bbppid()) {
    bbppid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbppid_);
  }
  bbpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bbpin()) {
    bbpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbpin_);
  }
  bbmnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bbmnickname()) {
    bbmnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbmnickname_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.BBMContactUploadItem)
}

void BBMContactUploadItem::SharedCtor() {
  _cached_size_ = 0;
  bbppid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bbpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bbmnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BBMContactUploadItem::~BBMContactUploadItem() {
  // @@protoc_insertion_point(destructor:micromsg.BBMContactUploadItem)
  SharedDtor();
}

void BBMContactUploadItem::SharedDtor() {
  bbppid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bbpin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bbmnickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BBMContactUploadItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BBMContactUploadItem::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BBMContactUploadItem& BBMContactUploadItem::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

BBMContactUploadItem* BBMContactUploadItem::New(::google::protobuf::Arena* arena) const {
  BBMContactUploadItem* n = new BBMContactUploadItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BBMContactUploadItem::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BBMContactUploadItem)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_bbppid()) {
      GOOGLE_DCHECK(!bbppid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bbppid_.UnsafeRawStringPointer())->clear();
    }
    if (has_bbpin()) {
      GOOGLE_DCHECK(!bbpin_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bbpin_.UnsafeRawStringPointer())->clear();
    }
    if (has_bbmnickname()) {
      GOOGLE_DCHECK(!bbmnickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bbmnickname_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BBMContactUploadItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BBMContactUploadItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string BBPPID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bbppid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bbppid().data(), this->bbppid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BBMContactUploadItem.BBPPID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BBPIN = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bbpin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bbpin().data(), this->bbpin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BBMContactUploadItem.BBPIN");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BBMNickName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bbmnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bbmnickname().data(), this->bbmnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BBMContactUploadItem.BBMNickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BBMContactUploadItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BBMContactUploadItem)
  return false;
#undef DO_
}

void BBMContactUploadItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BBMContactUploadItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string BBPPID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbppid().data(), this->bbppid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactUploadItem.BBPPID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bbppid(), output);
  }

  // optional string BBPIN = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbpin().data(), this->bbpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactUploadItem.BBPIN");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bbpin(), output);
  }

  // optional string BBMNickName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbmnickname().data(), this->bbmnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactUploadItem.BBMNickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bbmnickname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BBMContactUploadItem)
}

::google::protobuf::uint8* BBMContactUploadItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BBMContactUploadItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string BBPPID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbppid().data(), this->bbppid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactUploadItem.BBPPID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bbppid(), target);
  }

  // optional string BBPIN = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbpin().data(), this->bbpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactUploadItem.BBPIN");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bbpin(), target);
  }

  // optional string BBMNickName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbmnickname().data(), this->bbmnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactUploadItem.BBMNickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bbmnickname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BBMContactUploadItem)
  return target;
}

size_t BBMContactUploadItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BBMContactUploadItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string BBPPID = 1;
    if (has_bbppid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bbppid());
    }

    // optional string BBPIN = 2;
    if (has_bbpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bbpin());
    }

    // optional string BBMNickName = 3;
    if (has_bbmnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bbmnickname());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BBMContactUploadItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BBMContactUploadItem)
  GOOGLE_DCHECK_NE(&from, this);
  const BBMContactUploadItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BBMContactUploadItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BBMContactUploadItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BBMContactUploadItem)
    MergeFrom(*source);
  }
}

void BBMContactUploadItem::MergeFrom(const BBMContactUploadItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BBMContactUploadItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_bbppid();
      bbppid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbppid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_bbpin();
      bbpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbpin_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_bbmnickname();
      bbmnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbmnickname_);
    }
  }
}

void BBMContactUploadItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BBMContactUploadItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBMContactUploadItem::CopyFrom(const BBMContactUploadItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BBMContactUploadItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBMContactUploadItem::IsInitialized() const {
  return true;
}

void BBMContactUploadItem::Swap(BBMContactUploadItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BBMContactUploadItem::InternalSwap(BBMContactUploadItem* other) {
  bbppid_.Swap(&other->bbppid_);
  bbpin_.Swap(&other->bbpin_);
  bbmnickname_.Swap(&other->bbmnickname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BBMContactUploadItem::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BBMContactUploadItem

// optional string BBPPID = 1;
bool BBMContactUploadItem::has_bbppid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BBMContactUploadItem::set_has_bbppid() {
  _has_bits_[0] |= 0x00000001u;
}
void BBMContactUploadItem::clear_has_bbppid() {
  _has_bits_[0] &= ~0x00000001u;
}
void BBMContactUploadItem::clear_bbppid() {
  bbppid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbppid();
}
const ::std::string& BBMContactUploadItem::bbppid() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactUploadItem.BBPPID)
  return bbppid_.GetNoArena();
}
void BBMContactUploadItem::set_bbppid(const ::std::string& value) {
  set_has_bbppid();
  bbppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactUploadItem.BBPPID)
}
#if LANG_CXX11
void BBMContactUploadItem::set_bbppid(::std::string&& value) {
  set_has_bbppid();
  bbppid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactUploadItem.BBPPID)
}
#endif
void BBMContactUploadItem::set_bbppid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bbppid();
  bbppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactUploadItem.BBPPID)
}
void BBMContactUploadItem::set_bbppid(const char* value, size_t size) {
  set_has_bbppid();
  bbppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactUploadItem.BBPPID)
}
::std::string* BBMContactUploadItem::mutable_bbppid() {
  set_has_bbppid();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactUploadItem.BBPPID)
  return bbppid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BBMContactUploadItem::release_bbppid() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactUploadItem.BBPPID)
  clear_has_bbppid();
  return bbppid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BBMContactUploadItem::set_allocated_bbppid(::std::string* bbppid) {
  if (bbppid != NULL) {
    set_has_bbppid();
  } else {
    clear_has_bbppid();
  }
  bbppid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbppid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactUploadItem.BBPPID)
}

// optional string BBPIN = 2;
bool BBMContactUploadItem::has_bbpin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BBMContactUploadItem::set_has_bbpin() {
  _has_bits_[0] |= 0x00000002u;
}
void BBMContactUploadItem::clear_has_bbpin() {
  _has_bits_[0] &= ~0x00000002u;
}
void BBMContactUploadItem::clear_bbpin() {
  bbpin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbpin();
}
const ::std::string& BBMContactUploadItem::bbpin() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactUploadItem.BBPIN)
  return bbpin_.GetNoArena();
}
void BBMContactUploadItem::set_bbpin(const ::std::string& value) {
  set_has_bbpin();
  bbpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactUploadItem.BBPIN)
}
#if LANG_CXX11
void BBMContactUploadItem::set_bbpin(::std::string&& value) {
  set_has_bbpin();
  bbpin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactUploadItem.BBPIN)
}
#endif
void BBMContactUploadItem::set_bbpin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bbpin();
  bbpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactUploadItem.BBPIN)
}
void BBMContactUploadItem::set_bbpin(const char* value, size_t size) {
  set_has_bbpin();
  bbpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactUploadItem.BBPIN)
}
::std::string* BBMContactUploadItem::mutable_bbpin() {
  set_has_bbpin();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactUploadItem.BBPIN)
  return bbpin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BBMContactUploadItem::release_bbpin() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactUploadItem.BBPIN)
  clear_has_bbpin();
  return bbpin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BBMContactUploadItem::set_allocated_bbpin(::std::string* bbpin) {
  if (bbpin != NULL) {
    set_has_bbpin();
  } else {
    clear_has_bbpin();
  }
  bbpin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbpin);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactUploadItem.BBPIN)
}

// optional string BBMNickName = 3;
bool BBMContactUploadItem::has_bbmnickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BBMContactUploadItem::set_has_bbmnickname() {
  _has_bits_[0] |= 0x00000004u;
}
void BBMContactUploadItem::clear_has_bbmnickname() {
  _has_bits_[0] &= ~0x00000004u;
}
void BBMContactUploadItem::clear_bbmnickname() {
  bbmnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbmnickname();
}
const ::std::string& BBMContactUploadItem::bbmnickname() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactUploadItem.BBMNickName)
  return bbmnickname_.GetNoArena();
}
void BBMContactUploadItem::set_bbmnickname(const ::std::string& value) {
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactUploadItem.BBMNickName)
}
#if LANG_CXX11
void BBMContactUploadItem::set_bbmnickname(::std::string&& value) {
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactUploadItem.BBMNickName)
}
#endif
void BBMContactUploadItem::set_bbmnickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactUploadItem.BBMNickName)
}
void BBMContactUploadItem::set_bbmnickname(const char* value, size_t size) {
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactUploadItem.BBMNickName)
}
::std::string* BBMContactUploadItem::mutable_bbmnickname() {
  set_has_bbmnickname();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactUploadItem.BBMNickName)
  return bbmnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BBMContactUploadItem::release_bbmnickname() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactUploadItem.BBMNickName)
  clear_has_bbmnickname();
  return bbmnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BBMContactUploadItem::set_allocated_bbmnickname(::std::string* bbmnickname) {
  if (bbmnickname != NULL) {
    set_has_bbmnickname();
  } else {
    clear_has_bbmnickname();
  }
  bbmnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbmnickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactUploadItem.BBMNickName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListBBMContactRequest::kBaseRequestFieldNumber;
const int ListBBMContactRequest::kCountFieldNumber;
const int ListBBMContactRequest::kListFieldNumber;
const int ListBBMContactRequest::kContinueFlagFieldNumber;
const int ListBBMContactRequest::kClickSourceFieldNumber;
const int ListBBMContactRequest::kOpcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListBBMContactRequest::ListBBMContactRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ListBBMContactRequest)
}
ListBBMContactRequest::ListBBMContactRequest(const ListBBMContactRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&count_, &from.count_,
    reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&count_) + sizeof(opcode_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ListBBMContactRequest)
}

void ListBBMContactRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(opcode_));
}

ListBBMContactRequest::~ListBBMContactRequest() {
  // @@protoc_insertion_point(destructor:micromsg.ListBBMContactRequest)
  SharedDtor();
}

void ListBBMContactRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void ListBBMContactRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListBBMContactRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListBBMContactRequest& ListBBMContactRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListBBMContactRequest* ListBBMContactRequest::New(::google::protobuf::Arena* arena) const {
  ListBBMContactRequest* n = new ListBBMContactRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListBBMContactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ListBBMContactRequest)
  list_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&count_, 0, reinterpret_cast<char*>(&opcode_) -
      reinterpret_cast<char*>(&count_) + sizeof(opcode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ListBBMContactRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ListBBMContactRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.BBMContactUploadItem List = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ContinueFlag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_continueflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &continueflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ClickSource = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_clicksource();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clicksource_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Opcode = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ListBBMContactRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ListBBMContactRequest)
  return false;
#undef DO_
}

void ListBBMContactRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ListBBMContactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .micromsg.BBMContactUploadItem List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  // required uint32 ContinueFlag = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->continueflag(), output);
  }

  // required uint32 ClickSource = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->clicksource(), output);
  }

  // required uint32 Opcode = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->opcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ListBBMContactRequest)
}

::google::protobuf::uint8* ListBBMContactRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ListBBMContactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.BBMContactUploadItem List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->list(i), deterministic, target);
  }

  // required uint32 ContinueFlag = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->continueflag(), target);
  }

  // required uint32 ClickSource = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->clicksource(), target);
  }

  // required uint32 Opcode = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->opcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ListBBMContactRequest)
  return target;
}

size_t ListBBMContactRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ListBBMContactRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  if (has_continueflag()) {
    // required uint32 ContinueFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->continueflag());
  }

  if (has_clicksource()) {
    // required uint32 ClickSource = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clicksource());
  }

  if (has_opcode()) {
    // required uint32 Opcode = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  return total_size;
}
size_t ListBBMContactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ListBBMContactRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

    // required uint32 ContinueFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->continueflag());

    // required uint32 ClickSource = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clicksource());

    // required uint32 Opcode = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.BBMContactUploadItem List = 3;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListBBMContactRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ListBBMContactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListBBMContactRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListBBMContactRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ListBBMContactRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ListBBMContactRequest)
    MergeFrom(*source);
  }
}

void ListBBMContactRequest::MergeFrom(const ListBBMContactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ListBBMContactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      continueflag_ = from.continueflag_;
    }
    if (cached_has_bits & 0x00000008u) {
      clicksource_ = from.clicksource_;
    }
    if (cached_has_bits & 0x00000010u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ListBBMContactRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ListBBMContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListBBMContactRequest::CopyFrom(const ListBBMContactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ListBBMContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListBBMContactRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void ListBBMContactRequest::Swap(ListBBMContactRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListBBMContactRequest::InternalSwap(ListBBMContactRequest* other) {
  list_.InternalSwap(&other->list_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(count_, other->count_);
  std::swap(continueflag_, other->continueflag_);
  std::swap(clicksource_, other->clicksource_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListBBMContactRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListBBMContactRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool ListBBMContactRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ListBBMContactRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void ListBBMContactRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void ListBBMContactRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& ListBBMContactRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ListBBMContactRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* ListBBMContactRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ListBBMContactRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* ListBBMContactRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ListBBMContactRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void ListBBMContactRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ListBBMContactRequest.BaseRequest)
}

// required uint32 Count = 2;
bool ListBBMContactRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ListBBMContactRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void ListBBMContactRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void ListBBMContactRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 ListBBMContactRequest::count() const {
  // @@protoc_insertion_point(field_get:micromsg.ListBBMContactRequest.Count)
  return count_;
}
void ListBBMContactRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ListBBMContactRequest.Count)
}

// repeated .micromsg.BBMContactUploadItem List = 3;
int ListBBMContactRequest::list_size() const {
  return list_.size();
}
void ListBBMContactRequest::clear_list() {
  list_.Clear();
}
const ::micromsg::BBMContactUploadItem& ListBBMContactRequest::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ListBBMContactRequest.List)
  return list_.Get(index);
}
::micromsg::BBMContactUploadItem* ListBBMContactRequest::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.ListBBMContactRequest.List)
  return list_.Mutable(index);
}
::micromsg::BBMContactUploadItem* ListBBMContactRequest::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.ListBBMContactRequest.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::BBMContactUploadItem >*
ListBBMContactRequest::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ListBBMContactRequest.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::BBMContactUploadItem >&
ListBBMContactRequest::list() const {
  // @@protoc_insertion_point(field_list:micromsg.ListBBMContactRequest.List)
  return list_;
}

// required uint32 ContinueFlag = 4;
bool ListBBMContactRequest::has_continueflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ListBBMContactRequest::set_has_continueflag() {
  _has_bits_[0] |= 0x00000004u;
}
void ListBBMContactRequest::clear_has_continueflag() {
  _has_bits_[0] &= ~0x00000004u;
}
void ListBBMContactRequest::clear_continueflag() {
  continueflag_ = 0u;
  clear_has_continueflag();
}
::google::protobuf::uint32 ListBBMContactRequest::continueflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ListBBMContactRequest.ContinueFlag)
  return continueflag_;
}
void ListBBMContactRequest::set_continueflag(::google::protobuf::uint32 value) {
  set_has_continueflag();
  continueflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ListBBMContactRequest.ContinueFlag)
}

// required uint32 ClickSource = 5;
bool ListBBMContactRequest::has_clicksource() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ListBBMContactRequest::set_has_clicksource() {
  _has_bits_[0] |= 0x00000008u;
}
void ListBBMContactRequest::clear_has_clicksource() {
  _has_bits_[0] &= ~0x00000008u;
}
void ListBBMContactRequest::clear_clicksource() {
  clicksource_ = 0u;
  clear_has_clicksource();
}
::google::protobuf::uint32 ListBBMContactRequest::clicksource() const {
  // @@protoc_insertion_point(field_get:micromsg.ListBBMContactRequest.ClickSource)
  return clicksource_;
}
void ListBBMContactRequest::set_clicksource(::google::protobuf::uint32 value) {
  set_has_clicksource();
  clicksource_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ListBBMContactRequest.ClickSource)
}

// required uint32 Opcode = 6;
bool ListBBMContactRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ListBBMContactRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000010u;
}
void ListBBMContactRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000010u;
}
void ListBBMContactRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 ListBBMContactRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.ListBBMContactRequest.Opcode)
  return opcode_;
}
void ListBBMContactRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ListBBMContactRequest.Opcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BBMContactItem::kBBPPIDFieldNumber;
const int BBMContactItem::kUserNameFieldNumber;
const int BBMContactItem::kBigHeadUrlFieldNumber;
const int BBMContactItem::kSmallHeadUrlFieldNumber;
const int BBMContactItem::kBBPINFieldNumber;
const int BBMContactItem::kBBMNickNameFieldNumber;
const int BBMContactItem::kRetFieldNumber;
const int BBMContactItem::kNickNameFieldNumber;
const int BBMContactItem::kAntispamTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BBMContactItem::BBMContactItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BBMContactItem)
}
BBMContactItem::BBMContactItem(const BBMContactItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bbppid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bbppid()) {
    bbppid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbppid_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  bigheadurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bigheadurl()) {
    bigheadurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadurl_);
  }
  smallheadurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_smallheadurl()) {
    smallheadurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadurl_);
  }
  bbpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bbpin()) {
    bbpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbpin_);
  }
  bbmnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bbmnickname()) {
    bbmnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbmnickname_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  antispamticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_antispamticket()) {
    antispamticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.antispamticket_);
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BBMContactItem)
}

void BBMContactItem::SharedCtor() {
  _cached_size_ = 0;
  bbppid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigheadurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bbpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bbmnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  antispamticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_ = 0;
}

BBMContactItem::~BBMContactItem() {
  // @@protoc_insertion_point(destructor:micromsg.BBMContactItem)
  SharedDtor();
}

void BBMContactItem::SharedDtor() {
  bbppid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigheadurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bbpin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bbmnickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  antispamticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BBMContactItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BBMContactItem::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BBMContactItem& BBMContactItem::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

BBMContactItem* BBMContactItem::New(::google::protobuf::Arena* arena) const {
  BBMContactItem* n = new BBMContactItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BBMContactItem::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BBMContactItem)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_bbppid()) {
      GOOGLE_DCHECK(!bbppid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bbppid_.UnsafeRawStringPointer())->clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_bigheadurl()) {
      GOOGLE_DCHECK(!bigheadurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bigheadurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_smallheadurl()) {
      GOOGLE_DCHECK(!smallheadurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*smallheadurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_bbpin()) {
      GOOGLE_DCHECK(!bbpin_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bbpin_.UnsafeRawStringPointer())->clear();
    }
    if (has_bbmnickname()) {
      GOOGLE_DCHECK(!bbmnickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bbmnickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_antispamticket()) {
      GOOGLE_DCHECK(!antispamticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*antispamticket_.UnsafeRawStringPointer())->clear();
    }
  }
  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BBMContactItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BBMContactItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string BBPPID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bbppid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bbppid().data(), this->bbppid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BBMContactItem.BBPPID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BBMContactItem.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BigHeadUrl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bigheadurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bigheadurl().data(), this->bigheadurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BBMContactItem.BigHeadUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SmallHeadUrl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smallheadurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->smallheadurl().data(), this->smallheadurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BBMContactItem.SmallHeadUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BBPIN = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bbpin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bbpin().data(), this->bbpin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BBMContactItem.BBPIN");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BBMNickName = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bbmnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bbmnickname().data(), this->bbmnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BBMContactItem.BBMNickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Ret = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string NickName = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BBMContactItem.NickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AntispamTicket = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_antispamticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->antispamticket().data(), this->antispamticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BBMContactItem.AntispamTicket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BBMContactItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BBMContactItem)
  return false;
#undef DO_
}

void BBMContactItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BBMContactItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string BBPPID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbppid().data(), this->bbppid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactItem.BBPPID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bbppid(), output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactItem.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string BigHeadUrl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadurl().data(), this->bigheadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactItem.BigHeadUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bigheadurl(), output);
  }

  // optional string SmallHeadUrl = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadurl().data(), this->smallheadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactItem.SmallHeadUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->smallheadurl(), output);
  }

  // optional string BBPIN = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbpin().data(), this->bbpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactItem.BBPIN");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bbpin(), output);
  }

  // optional string BBMNickName = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbmnickname().data(), this->bbmnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactItem.BBMNickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->bbmnickname(), output);
  }

  // required int32 Ret = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ret(), output);
  }

  // optional string NickName = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactItem.NickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->nickname(), output);
  }

  // optional string AntispamTicket = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->antispamticket().data(), this->antispamticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactItem.AntispamTicket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->antispamticket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BBMContactItem)
}

::google::protobuf::uint8* BBMContactItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BBMContactItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string BBPPID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbppid().data(), this->bbppid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactItem.BBPPID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bbppid(), target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactItem.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string BigHeadUrl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadurl().data(), this->bigheadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactItem.BigHeadUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bigheadurl(), target);
  }

  // optional string SmallHeadUrl = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadurl().data(), this->smallheadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactItem.SmallHeadUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->smallheadurl(), target);
  }

  // optional string BBPIN = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbpin().data(), this->bbpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactItem.BBPIN");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bbpin(), target);
  }

  // optional string BBMNickName = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbmnickname().data(), this->bbmnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactItem.BBMNickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bbmnickname(), target);
  }

  // required int32 Ret = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ret(), target);
  }

  // optional string NickName = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactItem.NickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->nickname(), target);
  }

  // optional string AntispamTicket = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->antispamticket().data(), this->antispamticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BBMContactItem.AntispamTicket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->antispamticket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BBMContactItem)
  return target;
}

size_t BBMContactItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BBMContactItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 Ret = 7;
  if (has_ret()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string BBPPID = 1;
    if (has_bbppid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bbppid());
    }

    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string BigHeadUrl = 3;
    if (has_bigheadurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bigheadurl());
    }

    // optional string SmallHeadUrl = 4;
    if (has_smallheadurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->smallheadurl());
    }

    // optional string BBPIN = 5;
    if (has_bbpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bbpin());
    }

    // optional string BBMNickName = 6;
    if (has_bbmnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bbmnickname());
    }

    // optional string NickName = 8;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string AntispamTicket = 9;
    if (has_antispamticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->antispamticket());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BBMContactItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BBMContactItem)
  GOOGLE_DCHECK_NE(&from, this);
  const BBMContactItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BBMContactItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BBMContactItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BBMContactItem)
    MergeFrom(*source);
  }
}

void BBMContactItem::MergeFrom(const BBMContactItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BBMContactItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_bbppid();
      bbppid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbppid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_bigheadurl();
      bigheadurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadurl_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_smallheadurl();
      smallheadurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadurl_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_bbpin();
      bbpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbpin_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_bbmnickname();
      bbmnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbmnickname_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_antispamticket();
      antispamticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.antispamticket_);
    }
  }
  if (cached_has_bits & 0x00000100u) {
    set_ret(from.ret());
  }
}

void BBMContactItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BBMContactItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBMContactItem::CopyFrom(const BBMContactItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BBMContactItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBMContactItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;
  return true;
}

void BBMContactItem::Swap(BBMContactItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BBMContactItem::InternalSwap(BBMContactItem* other) {
  bbppid_.Swap(&other->bbppid_);
  username_.Swap(&other->username_);
  bigheadurl_.Swap(&other->bigheadurl_);
  smallheadurl_.Swap(&other->smallheadurl_);
  bbpin_.Swap(&other->bbpin_);
  bbmnickname_.Swap(&other->bbmnickname_);
  nickname_.Swap(&other->nickname_);
  antispamticket_.Swap(&other->antispamticket_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BBMContactItem::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BBMContactItem

// optional string BBPPID = 1;
bool BBMContactItem::has_bbppid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BBMContactItem::set_has_bbppid() {
  _has_bits_[0] |= 0x00000001u;
}
void BBMContactItem::clear_has_bbppid() {
  _has_bits_[0] &= ~0x00000001u;
}
void BBMContactItem::clear_bbppid() {
  bbppid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbppid();
}
const ::std::string& BBMContactItem::bbppid() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactItem.BBPPID)
  return bbppid_.GetNoArena();
}
void BBMContactItem::set_bbppid(const ::std::string& value) {
  set_has_bbppid();
  bbppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactItem.BBPPID)
}
#if LANG_CXX11
void BBMContactItem::set_bbppid(::std::string&& value) {
  set_has_bbppid();
  bbppid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactItem.BBPPID)
}
#endif
void BBMContactItem::set_bbppid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bbppid();
  bbppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactItem.BBPPID)
}
void BBMContactItem::set_bbppid(const char* value, size_t size) {
  set_has_bbppid();
  bbppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactItem.BBPPID)
}
::std::string* BBMContactItem::mutable_bbppid() {
  set_has_bbppid();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactItem.BBPPID)
  return bbppid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BBMContactItem::release_bbppid() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactItem.BBPPID)
  clear_has_bbppid();
  return bbppid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BBMContactItem::set_allocated_bbppid(::std::string* bbppid) {
  if (bbppid != NULL) {
    set_has_bbppid();
  } else {
    clear_has_bbppid();
  }
  bbppid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbppid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactItem.BBPPID)
}

// optional string UserName = 2;
bool BBMContactItem::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BBMContactItem::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
void BBMContactItem::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void BBMContactItem::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& BBMContactItem::username() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactItem.UserName)
  return username_.GetNoArena();
}
void BBMContactItem::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactItem.UserName)
}
#if LANG_CXX11
void BBMContactItem::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactItem.UserName)
}
#endif
void BBMContactItem::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactItem.UserName)
}
void BBMContactItem::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactItem.UserName)
}
::std::string* BBMContactItem::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactItem.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BBMContactItem::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactItem.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BBMContactItem::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactItem.UserName)
}

// optional string BigHeadUrl = 3;
bool BBMContactItem::has_bigheadurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BBMContactItem::set_has_bigheadurl() {
  _has_bits_[0] |= 0x00000004u;
}
void BBMContactItem::clear_has_bigheadurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void BBMContactItem::clear_bigheadurl() {
  bigheadurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadurl();
}
const ::std::string& BBMContactItem::bigheadurl() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactItem.BigHeadUrl)
  return bigheadurl_.GetNoArena();
}
void BBMContactItem::set_bigheadurl(const ::std::string& value) {
  set_has_bigheadurl();
  bigheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactItem.BigHeadUrl)
}
#if LANG_CXX11
void BBMContactItem::set_bigheadurl(::std::string&& value) {
  set_has_bigheadurl();
  bigheadurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactItem.BigHeadUrl)
}
#endif
void BBMContactItem::set_bigheadurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadurl();
  bigheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactItem.BigHeadUrl)
}
void BBMContactItem::set_bigheadurl(const char* value, size_t size) {
  set_has_bigheadurl();
  bigheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactItem.BigHeadUrl)
}
::std::string* BBMContactItem::mutable_bigheadurl() {
  set_has_bigheadurl();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactItem.BigHeadUrl)
  return bigheadurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BBMContactItem::release_bigheadurl() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactItem.BigHeadUrl)
  clear_has_bigheadurl();
  return bigheadurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BBMContactItem::set_allocated_bigheadurl(::std::string* bigheadurl) {
  if (bigheadurl != NULL) {
    set_has_bigheadurl();
  } else {
    clear_has_bigheadurl();
  }
  bigheadurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactItem.BigHeadUrl)
}

// optional string SmallHeadUrl = 4;
bool BBMContactItem::has_smallheadurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BBMContactItem::set_has_smallheadurl() {
  _has_bits_[0] |= 0x00000008u;
}
void BBMContactItem::clear_has_smallheadurl() {
  _has_bits_[0] &= ~0x00000008u;
}
void BBMContactItem::clear_smallheadurl() {
  smallheadurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadurl();
}
const ::std::string& BBMContactItem::smallheadurl() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactItem.SmallHeadUrl)
  return smallheadurl_.GetNoArena();
}
void BBMContactItem::set_smallheadurl(const ::std::string& value) {
  set_has_smallheadurl();
  smallheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactItem.SmallHeadUrl)
}
#if LANG_CXX11
void BBMContactItem::set_smallheadurl(::std::string&& value) {
  set_has_smallheadurl();
  smallheadurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactItem.SmallHeadUrl)
}
#endif
void BBMContactItem::set_smallheadurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadurl();
  smallheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactItem.SmallHeadUrl)
}
void BBMContactItem::set_smallheadurl(const char* value, size_t size) {
  set_has_smallheadurl();
  smallheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactItem.SmallHeadUrl)
}
::std::string* BBMContactItem::mutable_smallheadurl() {
  set_has_smallheadurl();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactItem.SmallHeadUrl)
  return smallheadurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BBMContactItem::release_smallheadurl() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactItem.SmallHeadUrl)
  clear_has_smallheadurl();
  return smallheadurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BBMContactItem::set_allocated_smallheadurl(::std::string* smallheadurl) {
  if (smallheadurl != NULL) {
    set_has_smallheadurl();
  } else {
    clear_has_smallheadurl();
  }
  smallheadurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactItem.SmallHeadUrl)
}

// optional string BBPIN = 5;
bool BBMContactItem::has_bbpin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BBMContactItem::set_has_bbpin() {
  _has_bits_[0] |= 0x00000010u;
}
void BBMContactItem::clear_has_bbpin() {
  _has_bits_[0] &= ~0x00000010u;
}
void BBMContactItem::clear_bbpin() {
  bbpin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbpin();
}
const ::std::string& BBMContactItem::bbpin() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactItem.BBPIN)
  return bbpin_.GetNoArena();
}
void BBMContactItem::set_bbpin(const ::std::string& value) {
  set_has_bbpin();
  bbpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactItem.BBPIN)
}
#if LANG_CXX11
void BBMContactItem::set_bbpin(::std::string&& value) {
  set_has_bbpin();
  bbpin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactItem.BBPIN)
}
#endif
void BBMContactItem::set_bbpin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bbpin();
  bbpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactItem.BBPIN)
}
void BBMContactItem::set_bbpin(const char* value, size_t size) {
  set_has_bbpin();
  bbpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactItem.BBPIN)
}
::std::string* BBMContactItem::mutable_bbpin() {
  set_has_bbpin();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactItem.BBPIN)
  return bbpin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BBMContactItem::release_bbpin() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactItem.BBPIN)
  clear_has_bbpin();
  return bbpin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BBMContactItem::set_allocated_bbpin(::std::string* bbpin) {
  if (bbpin != NULL) {
    set_has_bbpin();
  } else {
    clear_has_bbpin();
  }
  bbpin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbpin);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactItem.BBPIN)
}

// optional string BBMNickName = 6;
bool BBMContactItem::has_bbmnickname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BBMContactItem::set_has_bbmnickname() {
  _has_bits_[0] |= 0x00000020u;
}
void BBMContactItem::clear_has_bbmnickname() {
  _has_bits_[0] &= ~0x00000020u;
}
void BBMContactItem::clear_bbmnickname() {
  bbmnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbmnickname();
}
const ::std::string& BBMContactItem::bbmnickname() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactItem.BBMNickName)
  return bbmnickname_.GetNoArena();
}
void BBMContactItem::set_bbmnickname(const ::std::string& value) {
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactItem.BBMNickName)
}
#if LANG_CXX11
void BBMContactItem::set_bbmnickname(::std::string&& value) {
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactItem.BBMNickName)
}
#endif
void BBMContactItem::set_bbmnickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactItem.BBMNickName)
}
void BBMContactItem::set_bbmnickname(const char* value, size_t size) {
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactItem.BBMNickName)
}
::std::string* BBMContactItem::mutable_bbmnickname() {
  set_has_bbmnickname();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactItem.BBMNickName)
  return bbmnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BBMContactItem::release_bbmnickname() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactItem.BBMNickName)
  clear_has_bbmnickname();
  return bbmnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BBMContactItem::set_allocated_bbmnickname(::std::string* bbmnickname) {
  if (bbmnickname != NULL) {
    set_has_bbmnickname();
  } else {
    clear_has_bbmnickname();
  }
  bbmnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbmnickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactItem.BBMNickName)
}

// required int32 Ret = 7;
bool BBMContactItem::has_ret() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BBMContactItem::set_has_ret() {
  _has_bits_[0] |= 0x00000100u;
}
void BBMContactItem::clear_has_ret() {
  _has_bits_[0] &= ~0x00000100u;
}
void BBMContactItem::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::google::protobuf::int32 BBMContactItem::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactItem.Ret)
  return ret_;
}
void BBMContactItem::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BBMContactItem.Ret)
}

// optional string NickName = 8;
bool BBMContactItem::has_nickname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BBMContactItem::set_has_nickname() {
  _has_bits_[0] |= 0x00000040u;
}
void BBMContactItem::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000040u;
}
void BBMContactItem::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& BBMContactItem::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactItem.NickName)
  return nickname_.GetNoArena();
}
void BBMContactItem::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactItem.NickName)
}
#if LANG_CXX11
void BBMContactItem::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactItem.NickName)
}
#endif
void BBMContactItem::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactItem.NickName)
}
void BBMContactItem::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactItem.NickName)
}
::std::string* BBMContactItem::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactItem.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BBMContactItem::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactItem.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BBMContactItem::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactItem.NickName)
}

// optional string AntispamTicket = 9;
bool BBMContactItem::has_antispamticket() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BBMContactItem::set_has_antispamticket() {
  _has_bits_[0] |= 0x00000080u;
}
void BBMContactItem::clear_has_antispamticket() {
  _has_bits_[0] &= ~0x00000080u;
}
void BBMContactItem::clear_antispamticket() {
  antispamticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_antispamticket();
}
const ::std::string& BBMContactItem::antispamticket() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactItem.AntispamTicket)
  return antispamticket_.GetNoArena();
}
void BBMContactItem::set_antispamticket(const ::std::string& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactItem.AntispamTicket)
}
#if LANG_CXX11
void BBMContactItem::set_antispamticket(::std::string&& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactItem.AntispamTicket)
}
#endif
void BBMContactItem::set_antispamticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactItem.AntispamTicket)
}
void BBMContactItem::set_antispamticket(const char* value, size_t size) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactItem.AntispamTicket)
}
::std::string* BBMContactItem::mutable_antispamticket() {
  set_has_antispamticket();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactItem.AntispamTicket)
  return antispamticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BBMContactItem::release_antispamticket() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactItem.AntispamTicket)
  clear_has_antispamticket();
  return antispamticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BBMContactItem::set_allocated_antispamticket(::std::string* antispamticket) {
  if (antispamticket != NULL) {
    set_has_antispamticket();
  } else {
    clear_has_antispamticket();
  }
  antispamticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), antispamticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactItem.AntispamTicket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListBBMContactResponse::kBaseResponseFieldNumber;
const int ListBBMContactResponse::kCountFieldNumber;
const int ListBBMContactResponse::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListBBMContactResponse::ListBBMContactResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ListBBMContactResponse)
}
ListBBMContactResponse::ListBBMContactResponse(const ListBBMContactResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.ListBBMContactResponse)
}

void ListBBMContactResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(count_));
}

ListBBMContactResponse::~ListBBMContactResponse() {
  // @@protoc_insertion_point(destructor:micromsg.ListBBMContactResponse)
  SharedDtor();
}

void ListBBMContactResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void ListBBMContactResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListBBMContactResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListBBMContactResponse& ListBBMContactResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListBBMContactResponse* ListBBMContactResponse::New(::google::protobuf::Arena* arena) const {
  ListBBMContactResponse* n = new ListBBMContactResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListBBMContactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ListBBMContactResponse)
  list_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ListBBMContactResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ListBBMContactResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.BBMContactItem List = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ListBBMContactResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ListBBMContactResponse)
  return false;
#undef DO_
}

void ListBBMContactResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ListBBMContactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .micromsg.BBMContactItem List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ListBBMContactResponse)
}

::google::protobuf::uint8* ListBBMContactResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ListBBMContactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.BBMContactItem List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ListBBMContactResponse)
  return target;
}

size_t ListBBMContactResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ListBBMContactResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t ListBBMContactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ListBBMContactResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.BBMContactItem List = 3;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListBBMContactResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ListBBMContactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListBBMContactResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListBBMContactResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ListBBMContactResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ListBBMContactResponse)
    MergeFrom(*source);
  }
}

void ListBBMContactResponse::MergeFrom(const ListBBMContactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ListBBMContactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ListBBMContactResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ListBBMContactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListBBMContactResponse::CopyFrom(const ListBBMContactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ListBBMContactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListBBMContactResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void ListBBMContactResponse::Swap(ListBBMContactResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListBBMContactResponse::InternalSwap(ListBBMContactResponse* other) {
  list_.InternalSwap(&other->list_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListBBMContactResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListBBMContactResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool ListBBMContactResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ListBBMContactResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void ListBBMContactResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void ListBBMContactResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& ListBBMContactResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ListBBMContactResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* ListBBMContactResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ListBBMContactResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* ListBBMContactResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ListBBMContactResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void ListBBMContactResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ListBBMContactResponse.BaseResponse)
}

// required uint32 Count = 2;
bool ListBBMContactResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ListBBMContactResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void ListBBMContactResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void ListBBMContactResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 ListBBMContactResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.ListBBMContactResponse.Count)
  return count_;
}
void ListBBMContactResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ListBBMContactResponse.Count)
}

// repeated .micromsg.BBMContactItem List = 3;
int ListBBMContactResponse::list_size() const {
  return list_.size();
}
void ListBBMContactResponse::clear_list() {
  list_.Clear();
}
const ::micromsg::BBMContactItem& ListBBMContactResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ListBBMContactResponse.List)
  return list_.Get(index);
}
::micromsg::BBMContactItem* ListBBMContactResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.ListBBMContactResponse.List)
  return list_.Mutable(index);
}
::micromsg::BBMContactItem* ListBBMContactResponse::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.ListBBMContactResponse.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::BBMContactItem >*
ListBBMContactResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ListBBMContactResponse.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::BBMContactItem >&
ListBBMContactResponse::list() const {
  // @@protoc_insertion_point(field_list:micromsg.ListBBMContactResponse.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnlineInfo::kDeviceTypeFieldNumber;
const int OnlineInfo::kDeviceIDFieldNumber;
const int OnlineInfo::kWordingXMLFieldNumber;
const int OnlineInfo::kClientKeyFieldNumber;
const int OnlineInfo::kOnlineStatusFieldNumber;
const int OnlineInfo::kDeviceHelperTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnlineInfo::OnlineInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.OnlineInfo)
}
OnlineInfo::OnlineInfo(const OnlineInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_deviceid()) {
    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  wordingxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wordingxml()) {
    wordingxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wordingxml_);
  }
  if (from.has_clientkey()) {
    clientkey_ = new ::micromsg::SKBuiltinBuffer_t(*from.clientkey_);
  } else {
    clientkey_ = NULL;
  }
  ::memcpy(&devicetype_, &from.devicetype_,
    reinterpret_cast<char*>(&devicehelpertype_) -
    reinterpret_cast<char*>(&devicetype_) + sizeof(devicehelpertype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.OnlineInfo)
}

void OnlineInfo::SharedCtor() {
  _cached_size_ = 0;
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wordingxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clientkey_, 0, reinterpret_cast<char*>(&devicehelpertype_) -
    reinterpret_cast<char*>(&clientkey_) + sizeof(devicehelpertype_));
}

OnlineInfo::~OnlineInfo() {
  // @@protoc_insertion_point(destructor:micromsg.OnlineInfo)
  SharedDtor();
}

void OnlineInfo::SharedDtor() {
  deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wordingxml_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete clientkey_;
  }
}

void OnlineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineInfo::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OnlineInfo& OnlineInfo::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

OnlineInfo* OnlineInfo::New(::google::protobuf::Arena* arena) const {
  OnlineInfo* n = new OnlineInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OnlineInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.OnlineInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_deviceid()) {
      GOOGLE_DCHECK(!deviceid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*deviceid_.UnsafeRawStringPointer())->clear();
    }
    if (has_wordingxml()) {
      GOOGLE_DCHECK(!wordingxml_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*wordingxml_.UnsafeRawStringPointer())->clear();
    }
    if (has_clientkey()) {
      GOOGLE_DCHECK(clientkey_ != NULL);
      clientkey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&devicetype_, 0, reinterpret_cast<char*>(&devicehelpertype_) -
      reinterpret_cast<char*>(&devicetype_) + sizeof(devicehelpertype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OnlineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.OnlineInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 DeviceType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_devicetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devicetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes DeviceID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deviceid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string WordingXML = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wordingxml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wordingxml().data(), this->wordingxml().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.OnlineInfo.WordingXML");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ClientKey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 OnlineStatus = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_onlinestatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinestatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DeviceHelperType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_devicehelpertype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devicehelpertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.OnlineInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.OnlineInfo)
  return false;
#undef DO_
}

void OnlineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.OnlineInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 DeviceType = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->devicetype(), output);
  }

  // optional bytes DeviceID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->deviceid(), output);
  }

  // optional string WordingXML = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wordingxml().data(), this->wordingxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.OnlineInfo.WordingXML");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->wordingxml(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t ClientKey = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->clientkey_, output);
  }

  // required uint32 OnlineStatus = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->onlinestatus(), output);
  }

  // required uint32 DeviceHelperType = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->devicehelpertype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.OnlineInfo)
}

::google::protobuf::uint8* OnlineInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.OnlineInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 DeviceType = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->devicetype(), target);
  }

  // optional bytes DeviceID = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->deviceid(), target);
  }

  // optional string WordingXML = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wordingxml().data(), this->wordingxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.OnlineInfo.WordingXML");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->wordingxml(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t ClientKey = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->clientkey_, deterministic, target);
  }

  // required uint32 OnlineStatus = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->onlinestatus(), target);
  }

  // required uint32 DeviceHelperType = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->devicehelpertype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.OnlineInfo)
  return target;
}

size_t OnlineInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.OnlineInfo)
  size_t total_size = 0;

  if (has_clientkey()) {
    // required .micromsg.SKBuiltinBuffer_t ClientKey = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clientkey_);
  }

  if (has_devicetype()) {
    // required uint32 DeviceType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->devicetype());
  }

  if (has_onlinestatus()) {
    // required uint32 OnlineStatus = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->onlinestatus());
  }

  if (has_devicehelpertype()) {
    // required uint32 DeviceHelperType = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->devicehelpertype());
  }

  return total_size;
}
size_t OnlineInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.OnlineInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t ClientKey = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clientkey_);

    // required uint32 DeviceType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->devicetype());

    // required uint32 OnlineStatus = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->onlinestatus());

    // required uint32 DeviceHelperType = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->devicehelpertype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes DeviceID = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->deviceid());
    }

    // optional string WordingXML = 3;
    if (has_wordingxml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wordingxml());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.OnlineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OnlineInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OnlineInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.OnlineInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.OnlineInfo)
    MergeFrom(*source);
  }
}

void OnlineInfo::MergeFrom(const OnlineInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.OnlineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_deviceid();
      deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_wordingxml();
      wordingxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wordingxml_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_clientkey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.clientkey());
    }
    if (cached_has_bits & 0x00000008u) {
      devicetype_ = from.devicetype_;
    }
    if (cached_has_bits & 0x00000010u) {
      onlinestatus_ = from.onlinestatus_;
    }
    if (cached_has_bits & 0x00000020u) {
      devicehelpertype_ = from.devicehelpertype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OnlineInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.OnlineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineInfo::CopyFrom(const OnlineInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.OnlineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003c) != 0x0000003c) return false;
  if (has_clientkey()) {
    if (!this->clientkey_->IsInitialized()) return false;
  }
  return true;
}

void OnlineInfo::Swap(OnlineInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnlineInfo::InternalSwap(OnlineInfo* other) {
  deviceid_.Swap(&other->deviceid_);
  wordingxml_.Swap(&other->wordingxml_);
  std::swap(clientkey_, other->clientkey_);
  std::swap(devicetype_, other->devicetype_);
  std::swap(onlinestatus_, other->onlinestatus_);
  std::swap(devicehelpertype_, other->devicehelpertype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OnlineInfo::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OnlineInfo

// required uint32 DeviceType = 1;
bool OnlineInfo::has_devicetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OnlineInfo::set_has_devicetype() {
  _has_bits_[0] |= 0x00000008u;
}
void OnlineInfo::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000008u;
}
void OnlineInfo::clear_devicetype() {
  devicetype_ = 0u;
  clear_has_devicetype();
}
::google::protobuf::uint32 OnlineInfo::devicetype() const {
  // @@protoc_insertion_point(field_get:micromsg.OnlineInfo.DeviceType)
  return devicetype_;
}
void OnlineInfo::set_devicetype(::google::protobuf::uint32 value) {
  set_has_devicetype();
  devicetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.OnlineInfo.DeviceType)
}

// optional bytes DeviceID = 2;
bool OnlineInfo::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OnlineInfo::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
void OnlineInfo::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
void OnlineInfo::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deviceid();
}
const ::std::string& OnlineInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:micromsg.OnlineInfo.DeviceID)
  return deviceid_.GetNoArena();
}
void OnlineInfo::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.OnlineInfo.DeviceID)
}
#if LANG_CXX11
void OnlineInfo::set_deviceid(::std::string&& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.OnlineInfo.DeviceID)
}
#endif
void OnlineInfo::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.OnlineInfo.DeviceID)
}
void OnlineInfo::set_deviceid(const void* value, size_t size) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.OnlineInfo.DeviceID)
}
::std::string* OnlineInfo::mutable_deviceid() {
  set_has_deviceid();
  // @@protoc_insertion_point(field_mutable:micromsg.OnlineInfo.DeviceID)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnlineInfo::release_deviceid() {
  // @@protoc_insertion_point(field_release:micromsg.OnlineInfo.DeviceID)
  clear_has_deviceid();
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnlineInfo::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    set_has_deviceid();
  } else {
    clear_has_deviceid();
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.OnlineInfo.DeviceID)
}

// optional string WordingXML = 3;
bool OnlineInfo::has_wordingxml() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OnlineInfo::set_has_wordingxml() {
  _has_bits_[0] |= 0x00000002u;
}
void OnlineInfo::clear_has_wordingxml() {
  _has_bits_[0] &= ~0x00000002u;
}
void OnlineInfo::clear_wordingxml() {
  wordingxml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wordingxml();
}
const ::std::string& OnlineInfo::wordingxml() const {
  // @@protoc_insertion_point(field_get:micromsg.OnlineInfo.WordingXML)
  return wordingxml_.GetNoArena();
}
void OnlineInfo::set_wordingxml(const ::std::string& value) {
  set_has_wordingxml();
  wordingxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.OnlineInfo.WordingXML)
}
#if LANG_CXX11
void OnlineInfo::set_wordingxml(::std::string&& value) {
  set_has_wordingxml();
  wordingxml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.OnlineInfo.WordingXML)
}
#endif
void OnlineInfo::set_wordingxml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wordingxml();
  wordingxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.OnlineInfo.WordingXML)
}
void OnlineInfo::set_wordingxml(const char* value, size_t size) {
  set_has_wordingxml();
  wordingxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.OnlineInfo.WordingXML)
}
::std::string* OnlineInfo::mutable_wordingxml() {
  set_has_wordingxml();
  // @@protoc_insertion_point(field_mutable:micromsg.OnlineInfo.WordingXML)
  return wordingxml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnlineInfo::release_wordingxml() {
  // @@protoc_insertion_point(field_release:micromsg.OnlineInfo.WordingXML)
  clear_has_wordingxml();
  return wordingxml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnlineInfo::set_allocated_wordingxml(::std::string* wordingxml) {
  if (wordingxml != NULL) {
    set_has_wordingxml();
  } else {
    clear_has_wordingxml();
  }
  wordingxml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wordingxml);
  // @@protoc_insertion_point(field_set_allocated:micromsg.OnlineInfo.WordingXML)
}

// required .micromsg.SKBuiltinBuffer_t ClientKey = 4;
bool OnlineInfo::has_clientkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OnlineInfo::set_has_clientkey() {
  _has_bits_[0] |= 0x00000004u;
}
void OnlineInfo::clear_has_clientkey() {
  _has_bits_[0] &= ~0x00000004u;
}
void OnlineInfo::clear_clientkey() {
  if (clientkey_ != NULL) clientkey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_clientkey();
}
const ::micromsg::SKBuiltinBuffer_t& OnlineInfo::clientkey() const {
  // @@protoc_insertion_point(field_get:micromsg.OnlineInfo.ClientKey)
  return clientkey_ != NULL ? *clientkey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* OnlineInfo::mutable_clientkey() {
  set_has_clientkey();
  if (clientkey_ == NULL) {
    clientkey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.OnlineInfo.ClientKey)
  return clientkey_;
}
::micromsg::SKBuiltinBuffer_t* OnlineInfo::release_clientkey() {
  // @@protoc_insertion_point(field_release:micromsg.OnlineInfo.ClientKey)
  clear_has_clientkey();
  ::micromsg::SKBuiltinBuffer_t* temp = clientkey_;
  clientkey_ = NULL;
  return temp;
}
void OnlineInfo::set_allocated_clientkey(::micromsg::SKBuiltinBuffer_t* clientkey) {
  delete clientkey_;
  clientkey_ = clientkey;
  if (clientkey) {
    set_has_clientkey();
  } else {
    clear_has_clientkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.OnlineInfo.ClientKey)
}

// required uint32 OnlineStatus = 5;
bool OnlineInfo::has_onlinestatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OnlineInfo::set_has_onlinestatus() {
  _has_bits_[0] |= 0x00000010u;
}
void OnlineInfo::clear_has_onlinestatus() {
  _has_bits_[0] &= ~0x00000010u;
}
void OnlineInfo::clear_onlinestatus() {
  onlinestatus_ = 0u;
  clear_has_onlinestatus();
}
::google::protobuf::uint32 OnlineInfo::onlinestatus() const {
  // @@protoc_insertion_point(field_get:micromsg.OnlineInfo.OnlineStatus)
  return onlinestatus_;
}
void OnlineInfo::set_onlinestatus(::google::protobuf::uint32 value) {
  set_has_onlinestatus();
  onlinestatus_ = value;
  // @@protoc_insertion_point(field_set:micromsg.OnlineInfo.OnlineStatus)
}

// required uint32 DeviceHelperType = 6;
bool OnlineInfo::has_devicehelpertype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OnlineInfo::set_has_devicehelpertype() {
  _has_bits_[0] |= 0x00000020u;
}
void OnlineInfo::clear_has_devicehelpertype() {
  _has_bits_[0] &= ~0x00000020u;
}
void OnlineInfo::clear_devicehelpertype() {
  devicehelpertype_ = 0u;
  clear_has_devicehelpertype();
}
::google::protobuf::uint32 OnlineInfo::devicehelpertype() const {
  // @@protoc_insertion_point(field_get:micromsg.OnlineInfo.DeviceHelperType)
  return devicehelpertype_;
}
void OnlineInfo::set_devicehelpertype(::google::protobuf::uint32 value) {
  set_has_devicehelpertype();
  devicehelpertype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.OnlineInfo.DeviceHelperType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetOnlineInfoRequest::kBaseRequestFieldNumber;
const int GetOnlineInfoRequest::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetOnlineInfoRequest::GetOnlineInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetOnlineInfoRequest)
}
GetOnlineInfoRequest::GetOnlineInfoRequest(const GetOnlineInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetOnlineInfoRequest)
}

void GetOnlineInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

GetOnlineInfoRequest::~GetOnlineInfoRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetOnlineInfoRequest)
  SharedDtor();
}

void GetOnlineInfoRequest::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetOnlineInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOnlineInfoRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetOnlineInfoRequest& GetOnlineInfoRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetOnlineInfoRequest* GetOnlineInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetOnlineInfoRequest* n = new GetOnlineInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetOnlineInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetOnlineInfoRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_language()) {
      GOOGLE_DCHECK(!language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*language_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetOnlineInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetOnlineInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Language = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetOnlineInfoRequest.Language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetOnlineInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetOnlineInfoRequest)
  return false;
#undef DO_
}

void GetOnlineInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetOnlineInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string Language = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetOnlineInfoRequest.Language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetOnlineInfoRequest)
}

::google::protobuf::uint8* GetOnlineInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetOnlineInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string Language = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetOnlineInfoRequest.Language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetOnlineInfoRequest)
  return target;
}

size_t GetOnlineInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetOnlineInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string Language = 2;
  if (has_language()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOnlineInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetOnlineInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOnlineInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetOnlineInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetOnlineInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetOnlineInfoRequest)
    MergeFrom(*source);
  }
}

void GetOnlineInfoRequest::MergeFrom(const GetOnlineInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetOnlineInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void GetOnlineInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetOnlineInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOnlineInfoRequest::CopyFrom(const GetOnlineInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetOnlineInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOnlineInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetOnlineInfoRequest::Swap(GetOnlineInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetOnlineInfoRequest::InternalSwap(GetOnlineInfoRequest* other) {
  language_.Swap(&other->language_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetOnlineInfoRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetOnlineInfoRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetOnlineInfoRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetOnlineInfoRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GetOnlineInfoRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetOnlineInfoRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetOnlineInfoRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetOnlineInfoRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetOnlineInfoRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetOnlineInfoRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetOnlineInfoRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetOnlineInfoRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetOnlineInfoRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetOnlineInfoRequest.BaseRequest)
}

// optional string Language = 2;
bool GetOnlineInfoRequest::has_language() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetOnlineInfoRequest::set_has_language() {
  _has_bits_[0] |= 0x00000001u;
}
void GetOnlineInfoRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetOnlineInfoRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
const ::std::string& GetOnlineInfoRequest::language() const {
  // @@protoc_insertion_point(field_get:micromsg.GetOnlineInfoRequest.Language)
  return language_.GetNoArena();
}
void GetOnlineInfoRequest::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetOnlineInfoRequest.Language)
}
#if LANG_CXX11
void GetOnlineInfoRequest::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetOnlineInfoRequest.Language)
}
#endif
void GetOnlineInfoRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetOnlineInfoRequest.Language)
}
void GetOnlineInfoRequest::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetOnlineInfoRequest.Language)
}
::std::string* GetOnlineInfoRequest::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:micromsg.GetOnlineInfoRequest.Language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetOnlineInfoRequest::release_language() {
  // @@protoc_insertion_point(field_release:micromsg.GetOnlineInfoRequest.Language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetOnlineInfoRequest::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetOnlineInfoRequest.Language)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetOnlineInfoResponse::kBaseResponseFieldNumber;
const int GetOnlineInfoResponse::kOnlineCountFieldNumber;
const int GetOnlineInfoResponse::kOnlineListFieldNumber;
const int GetOnlineInfoResponse::kSummaryXMLFieldNumber;
const int GetOnlineInfoResponse::kFlagFieldNumber;
const int GetOnlineInfoResponse::kIConTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetOnlineInfoResponse::GetOnlineInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetOnlineInfoResponse)
}
GetOnlineInfoResponse::GetOnlineInfoResponse(const GetOnlineInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      onlinelist_(from.onlinelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  summaryxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_summaryxml()) {
    summaryxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.summaryxml_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&onlinecount_, &from.onlinecount_,
    reinterpret_cast<char*>(&icontype_) -
    reinterpret_cast<char*>(&onlinecount_) + sizeof(icontype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetOnlineInfoResponse)
}

void GetOnlineInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  summaryxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&icontype_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(icontype_));
}

GetOnlineInfoResponse::~GetOnlineInfoResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetOnlineInfoResponse)
  SharedDtor();
}

void GetOnlineInfoResponse::SharedDtor() {
  summaryxml_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetOnlineInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOnlineInfoResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetOnlineInfoResponse& GetOnlineInfoResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetOnlineInfoResponse* GetOnlineInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetOnlineInfoResponse* n = new GetOnlineInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetOnlineInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetOnlineInfoResponse)
  onlinelist_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_summaryxml()) {
      GOOGLE_DCHECK(!summaryxml_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*summaryxml_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&onlinecount_, 0, reinterpret_cast<char*>(&icontype_) -
      reinterpret_cast<char*>(&onlinecount_) + sizeof(icontype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetOnlineInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetOnlineInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 OnlineCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_onlinecount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.OnlineInfo OnlineList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_onlinelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SummaryXML = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_summaryxml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->summaryxml().data(), this->summaryxml().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetOnlineInfoResponse.SummaryXML");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Flag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IConType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_icontype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &icontype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetOnlineInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetOnlineInfoResponse)
  return false;
#undef DO_
}

void GetOnlineInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetOnlineInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 OnlineCount = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->onlinecount(), output);
  }

  // repeated .micromsg.OnlineInfo OnlineList = 3;
  for (unsigned int i = 0, n = this->onlinelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->onlinelist(i), output);
  }

  // optional string SummaryXML = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summaryxml().data(), this->summaryxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetOnlineInfoResponse.SummaryXML");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->summaryxml(), output);
  }

  // optional uint32 Flag = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flag(), output);
  }

  // optional uint32 IConType = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->icontype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetOnlineInfoResponse)
}

::google::protobuf::uint8* GetOnlineInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetOnlineInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 OnlineCount = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->onlinecount(), target);
  }

  // repeated .micromsg.OnlineInfo OnlineList = 3;
  for (unsigned int i = 0, n = this->onlinelist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->onlinelist(i), deterministic, target);
  }

  // optional string SummaryXML = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summaryxml().data(), this->summaryxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetOnlineInfoResponse.SummaryXML");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->summaryxml(), target);
  }

  // optional uint32 Flag = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->flag(), target);
  }

  // optional uint32 IConType = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->icontype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetOnlineInfoResponse)
  return target;
}

size_t GetOnlineInfoResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetOnlineInfoResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_onlinecount()) {
    // required uint32 OnlineCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->onlinecount());
  }

  return total_size;
}
size_t GetOnlineInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetOnlineInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 OnlineCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->onlinecount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.OnlineInfo OnlineList = 3;
  {
    unsigned int count = this->onlinelist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onlinelist(i));
    }
  }

  // optional string SummaryXML = 4;
  if (has_summaryxml()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->summaryxml());
  }

  if (_has_bits_[0 / 32] & 24u) {
    // optional uint32 Flag = 5;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional uint32 IConType = 6;
    if (has_icontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->icontype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOnlineInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetOnlineInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOnlineInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetOnlineInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetOnlineInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetOnlineInfoResponse)
    MergeFrom(*source);
  }
}

void GetOnlineInfoResponse::MergeFrom(const GetOnlineInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetOnlineInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  onlinelist_.MergeFrom(from.onlinelist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_summaryxml();
      summaryxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.summaryxml_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      onlinecount_ = from.onlinecount_;
    }
    if (cached_has_bits & 0x00000008u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000010u) {
      icontype_ = from.icontype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetOnlineInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetOnlineInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOnlineInfoResponse::CopyFrom(const GetOnlineInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetOnlineInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOnlineInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->onlinelist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetOnlineInfoResponse::Swap(GetOnlineInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetOnlineInfoResponse::InternalSwap(GetOnlineInfoResponse* other) {
  onlinelist_.InternalSwap(&other->onlinelist_);
  summaryxml_.Swap(&other->summaryxml_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(onlinecount_, other->onlinecount_);
  std::swap(flag_, other->flag_);
  std::swap(icontype_, other->icontype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetOnlineInfoResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetOnlineInfoResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetOnlineInfoResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetOnlineInfoResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void GetOnlineInfoResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetOnlineInfoResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetOnlineInfoResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetOnlineInfoResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetOnlineInfoResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetOnlineInfoResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetOnlineInfoResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetOnlineInfoResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetOnlineInfoResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetOnlineInfoResponse.BaseResponse)
}

// required uint32 OnlineCount = 2;
bool GetOnlineInfoResponse::has_onlinecount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetOnlineInfoResponse::set_has_onlinecount() {
  _has_bits_[0] |= 0x00000004u;
}
void GetOnlineInfoResponse::clear_has_onlinecount() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetOnlineInfoResponse::clear_onlinecount() {
  onlinecount_ = 0u;
  clear_has_onlinecount();
}
::google::protobuf::uint32 GetOnlineInfoResponse::onlinecount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetOnlineInfoResponse.OnlineCount)
  return onlinecount_;
}
void GetOnlineInfoResponse::set_onlinecount(::google::protobuf::uint32 value) {
  set_has_onlinecount();
  onlinecount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetOnlineInfoResponse.OnlineCount)
}

// repeated .micromsg.OnlineInfo OnlineList = 3;
int GetOnlineInfoResponse::onlinelist_size() const {
  return onlinelist_.size();
}
void GetOnlineInfoResponse::clear_onlinelist() {
  onlinelist_.Clear();
}
const ::micromsg::OnlineInfo& GetOnlineInfoResponse::onlinelist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetOnlineInfoResponse.OnlineList)
  return onlinelist_.Get(index);
}
::micromsg::OnlineInfo* GetOnlineInfoResponse::mutable_onlinelist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetOnlineInfoResponse.OnlineList)
  return onlinelist_.Mutable(index);
}
::micromsg::OnlineInfo* GetOnlineInfoResponse::add_onlinelist() {
  // @@protoc_insertion_point(field_add:micromsg.GetOnlineInfoResponse.OnlineList)
  return onlinelist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::OnlineInfo >*
GetOnlineInfoResponse::mutable_onlinelist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetOnlineInfoResponse.OnlineList)
  return &onlinelist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::OnlineInfo >&
GetOnlineInfoResponse::onlinelist() const {
  // @@protoc_insertion_point(field_list:micromsg.GetOnlineInfoResponse.OnlineList)
  return onlinelist_;
}

// optional string SummaryXML = 4;
bool GetOnlineInfoResponse::has_summaryxml() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetOnlineInfoResponse::set_has_summaryxml() {
  _has_bits_[0] |= 0x00000001u;
}
void GetOnlineInfoResponse::clear_has_summaryxml() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetOnlineInfoResponse::clear_summaryxml() {
  summaryxml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_summaryxml();
}
const ::std::string& GetOnlineInfoResponse::summaryxml() const {
  // @@protoc_insertion_point(field_get:micromsg.GetOnlineInfoResponse.SummaryXML)
  return summaryxml_.GetNoArena();
}
void GetOnlineInfoResponse::set_summaryxml(const ::std::string& value) {
  set_has_summaryxml();
  summaryxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetOnlineInfoResponse.SummaryXML)
}
#if LANG_CXX11
void GetOnlineInfoResponse::set_summaryxml(::std::string&& value) {
  set_has_summaryxml();
  summaryxml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetOnlineInfoResponse.SummaryXML)
}
#endif
void GetOnlineInfoResponse::set_summaryxml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_summaryxml();
  summaryxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetOnlineInfoResponse.SummaryXML)
}
void GetOnlineInfoResponse::set_summaryxml(const char* value, size_t size) {
  set_has_summaryxml();
  summaryxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetOnlineInfoResponse.SummaryXML)
}
::std::string* GetOnlineInfoResponse::mutable_summaryxml() {
  set_has_summaryxml();
  // @@protoc_insertion_point(field_mutable:micromsg.GetOnlineInfoResponse.SummaryXML)
  return summaryxml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetOnlineInfoResponse::release_summaryxml() {
  // @@protoc_insertion_point(field_release:micromsg.GetOnlineInfoResponse.SummaryXML)
  clear_has_summaryxml();
  return summaryxml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetOnlineInfoResponse::set_allocated_summaryxml(::std::string* summaryxml) {
  if (summaryxml != NULL) {
    set_has_summaryxml();
  } else {
    clear_has_summaryxml();
  }
  summaryxml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), summaryxml);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetOnlineInfoResponse.SummaryXML)
}

// optional uint32 Flag = 5;
bool GetOnlineInfoResponse::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetOnlineInfoResponse::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
void GetOnlineInfoResponse::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetOnlineInfoResponse::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
::google::protobuf::uint32 GetOnlineInfoResponse::flag() const {
  // @@protoc_insertion_point(field_get:micromsg.GetOnlineInfoResponse.Flag)
  return flag_;
}
void GetOnlineInfoResponse::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetOnlineInfoResponse.Flag)
}

// optional uint32 IConType = 6;
bool GetOnlineInfoResponse::has_icontype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetOnlineInfoResponse::set_has_icontype() {
  _has_bits_[0] |= 0x00000010u;
}
void GetOnlineInfoResponse::clear_has_icontype() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetOnlineInfoResponse::clear_icontype() {
  icontype_ = 0u;
  clear_has_icontype();
}
::google::protobuf::uint32 GetOnlineInfoResponse::icontype() const {
  // @@protoc_insertion_point(field_get:micromsg.GetOnlineInfoResponse.IConType)
  return icontype_;
}
void GetOnlineInfoResponse::set_icontype(::google::protobuf::uint32 value) {
  set_has_icontype();
  icontype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetOnlineInfoResponse.IConType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChatroomMemberDetailRequest::kBaseRequestFieldNumber;
const int GetChatroomMemberDetailRequest::kChatroomUserNameFieldNumber;
const int GetChatroomMemberDetailRequest::kClientVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChatroomMemberDetailRequest::GetChatroomMemberDetailRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetChatroomMemberDetailRequest)
}
GetChatroomMemberDetailRequest::GetChatroomMemberDetailRequest(const GetChatroomMemberDetailRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatroomusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomusername()) {
    chatroomusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomusername_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  clientversion_ = from.clientversion_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetChatroomMemberDetailRequest)
}

void GetChatroomMemberDetailRequest::SharedCtor() {
  _cached_size_ = 0;
  chatroomusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&clientversion_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(clientversion_));
}

GetChatroomMemberDetailRequest::~GetChatroomMemberDetailRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetChatroomMemberDetailRequest)
  SharedDtor();
}

void GetChatroomMemberDetailRequest::SharedDtor() {
  chatroomusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetChatroomMemberDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChatroomMemberDetailRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChatroomMemberDetailRequest& GetChatroomMemberDetailRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetChatroomMemberDetailRequest* GetChatroomMemberDetailRequest::New(::google::protobuf::Arena* arena) const {
  GetChatroomMemberDetailRequest* n = new GetChatroomMemberDetailRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetChatroomMemberDetailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetChatroomMemberDetailRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_chatroomusername()) {
      GOOGLE_DCHECK(!chatroomusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  clientversion_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetChatroomMemberDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetChatroomMemberDetailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ChatroomUserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomusername().data(), this->chatroomusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetChatroomMemberDetailRequest.ChatroomUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ClientVersion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_clientversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetChatroomMemberDetailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetChatroomMemberDetailRequest)
  return false;
#undef DO_
}

void GetChatroomMemberDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetChatroomMemberDetailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ChatroomUserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomusername().data(), this->chatroomusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatroomMemberDetailRequest.ChatroomUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chatroomusername(), output);
  }

  // required uint32 ClientVersion = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clientversion(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetChatroomMemberDetailRequest)
}

::google::protobuf::uint8* GetChatroomMemberDetailRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetChatroomMemberDetailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ChatroomUserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomusername().data(), this->chatroomusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatroomMemberDetailRequest.ChatroomUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatroomusername(), target);
  }

  // required uint32 ClientVersion = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clientversion(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetChatroomMemberDetailRequest)
  return target;
}

size_t GetChatroomMemberDetailRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetChatroomMemberDetailRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_clientversion()) {
    // required uint32 ClientVersion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientversion());
  }

  return total_size;
}
size_t GetChatroomMemberDetailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetChatroomMemberDetailRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 ClientVersion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string ChatroomUserName = 2;
  if (has_chatroomusername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatroomusername());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChatroomMemberDetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetChatroomMemberDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatroomMemberDetailRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChatroomMemberDetailRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetChatroomMemberDetailRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetChatroomMemberDetailRequest)
    MergeFrom(*source);
  }
}

void GetChatroomMemberDetailRequest::MergeFrom(const GetChatroomMemberDetailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetChatroomMemberDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chatroomusername();
      chatroomusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      clientversion_ = from.clientversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetChatroomMemberDetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetChatroomMemberDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatroomMemberDetailRequest::CopyFrom(const GetChatroomMemberDetailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetChatroomMemberDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatroomMemberDetailRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetChatroomMemberDetailRequest::Swap(GetChatroomMemberDetailRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChatroomMemberDetailRequest::InternalSwap(GetChatroomMemberDetailRequest* other) {
  chatroomusername_.Swap(&other->chatroomusername_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(clientversion_, other->clientversion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetChatroomMemberDetailRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetChatroomMemberDetailRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetChatroomMemberDetailRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetChatroomMemberDetailRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GetChatroomMemberDetailRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetChatroomMemberDetailRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetChatroomMemberDetailRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatroomMemberDetailRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetChatroomMemberDetailRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatroomMemberDetailRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetChatroomMemberDetailRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatroomMemberDetailRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetChatroomMemberDetailRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatroomMemberDetailRequest.BaseRequest)
}

// optional string ChatroomUserName = 2;
bool GetChatroomMemberDetailRequest::has_chatroomusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetChatroomMemberDetailRequest::set_has_chatroomusername() {
  _has_bits_[0] |= 0x00000001u;
}
void GetChatroomMemberDetailRequest::clear_has_chatroomusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetChatroomMemberDetailRequest::clear_chatroomusername() {
  chatroomusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomusername();
}
const ::std::string& GetChatroomMemberDetailRequest::chatroomusername() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatroomMemberDetailRequest.ChatroomUserName)
  return chatroomusername_.GetNoArena();
}
void GetChatroomMemberDetailRequest::set_chatroomusername(const ::std::string& value) {
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatroomMemberDetailRequest.ChatroomUserName)
}
#if LANG_CXX11
void GetChatroomMemberDetailRequest::set_chatroomusername(::std::string&& value) {
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatroomMemberDetailRequest.ChatroomUserName)
}
#endif
void GetChatroomMemberDetailRequest::set_chatroomusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatroomMemberDetailRequest.ChatroomUserName)
}
void GetChatroomMemberDetailRequest::set_chatroomusername(const char* value, size_t size) {
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatroomMemberDetailRequest.ChatroomUserName)
}
::std::string* GetChatroomMemberDetailRequest::mutable_chatroomusername() {
  set_has_chatroomusername();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatroomMemberDetailRequest.ChatroomUserName)
  return chatroomusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetChatroomMemberDetailRequest::release_chatroomusername() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatroomMemberDetailRequest.ChatroomUserName)
  clear_has_chatroomusername();
  return chatroomusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetChatroomMemberDetailRequest::set_allocated_chatroomusername(::std::string* chatroomusername) {
  if (chatroomusername != NULL) {
    set_has_chatroomusername();
  } else {
    clear_has_chatroomusername();
  }
  chatroomusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatroomMemberDetailRequest.ChatroomUserName)
}

// required uint32 ClientVersion = 3;
bool GetChatroomMemberDetailRequest::has_clientversion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetChatroomMemberDetailRequest::set_has_clientversion() {
  _has_bits_[0] |= 0x00000004u;
}
void GetChatroomMemberDetailRequest::clear_has_clientversion() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetChatroomMemberDetailRequest::clear_clientversion() {
  clientversion_ = 0u;
  clear_has_clientversion();
}
::google::protobuf::uint32 GetChatroomMemberDetailRequest::clientversion() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatroomMemberDetailRequest.ClientVersion)
  return clientversion_;
}
void GetChatroomMemberDetailRequest::set_clientversion(::google::protobuf::uint32 value) {
  set_has_clientversion();
  clientversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatroomMemberDetailRequest.ClientVersion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChatroomMemberDetailResponse::kBaseResponseFieldNumber;
const int GetChatroomMemberDetailResponse::kChatroomUserNameFieldNumber;
const int GetChatroomMemberDetailResponse::kServerVersionFieldNumber;
const int GetChatroomMemberDetailResponse::kNewChatroomDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChatroomMemberDetailResponse::GetChatroomMemberDetailResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetChatroomMemberDetailResponse)
}
GetChatroomMemberDetailResponse::GetChatroomMemberDetailResponse(const GetChatroomMemberDetailResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatroomusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomusername()) {
    chatroomusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomusername_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_newchatroomdata()) {
    newchatroomdata_ = new ::micromsg::ChatRoomMemberData(*from.newchatroomdata_);
  } else {
    newchatroomdata_ = NULL;
  }
  serverversion_ = from.serverversion_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetChatroomMemberDetailResponse)
}

void GetChatroomMemberDetailResponse::SharedCtor() {
  _cached_size_ = 0;
  chatroomusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&serverversion_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(serverversion_));
}

GetChatroomMemberDetailResponse::~GetChatroomMemberDetailResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetChatroomMemberDetailResponse)
  SharedDtor();
}

void GetChatroomMemberDetailResponse::SharedDtor() {
  chatroomusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete newchatroomdata_;
  }
}

void GetChatroomMemberDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChatroomMemberDetailResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChatroomMemberDetailResponse& GetChatroomMemberDetailResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetChatroomMemberDetailResponse* GetChatroomMemberDetailResponse::New(::google::protobuf::Arena* arena) const {
  GetChatroomMemberDetailResponse* n = new GetChatroomMemberDetailResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetChatroomMemberDetailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetChatroomMemberDetailResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_chatroomusername()) {
      GOOGLE_DCHECK(!chatroomusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_newchatroomdata()) {
      GOOGLE_DCHECK(newchatroomdata_ != NULL);
      newchatroomdata_->::micromsg::ChatRoomMemberData::Clear();
    }
  }
  serverversion_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetChatroomMemberDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetChatroomMemberDetailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ChatroomUserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomusername().data(), this->chatroomusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetChatroomMemberDetailResponse.ChatroomUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ServerVersion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_serverversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.ChatRoomMemberData NewChatroomData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newchatroomdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetChatroomMemberDetailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetChatroomMemberDetailResponse)
  return false;
#undef DO_
}

void GetChatroomMemberDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetChatroomMemberDetailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string ChatroomUserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomusername().data(), this->chatroomusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatroomMemberDetailResponse.ChatroomUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chatroomusername(), output);
  }

  // required uint32 ServerVersion = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverversion(), output);
  }

  // required .micromsg.ChatRoomMemberData NewChatroomData = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->newchatroomdata_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetChatroomMemberDetailResponse)
}

::google::protobuf::uint8* GetChatroomMemberDetailResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetChatroomMemberDetailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string ChatroomUserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomusername().data(), this->chatroomusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatroomMemberDetailResponse.ChatroomUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatroomusername(), target);
  }

  // required uint32 ServerVersion = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverversion(), target);
  }

  // required .micromsg.ChatRoomMemberData NewChatroomData = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->newchatroomdata_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetChatroomMemberDetailResponse)
  return target;
}

size_t GetChatroomMemberDetailResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetChatroomMemberDetailResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_newchatroomdata()) {
    // required .micromsg.ChatRoomMemberData NewChatroomData = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->newchatroomdata_);
  }

  if (has_serverversion()) {
    // required uint32 ServerVersion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serverversion());
  }

  return total_size;
}
size_t GetChatroomMemberDetailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetChatroomMemberDetailResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.ChatRoomMemberData NewChatroomData = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->newchatroomdata_);

    // required uint32 ServerVersion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serverversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string ChatroomUserName = 2;
  if (has_chatroomusername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatroomusername());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChatroomMemberDetailResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetChatroomMemberDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatroomMemberDetailResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChatroomMemberDetailResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetChatroomMemberDetailResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetChatroomMemberDetailResponse)
    MergeFrom(*source);
  }
}

void GetChatroomMemberDetailResponse::MergeFrom(const GetChatroomMemberDetailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetChatroomMemberDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chatroomusername();
      chatroomusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_newchatroomdata()->::micromsg::ChatRoomMemberData::MergeFrom(from.newchatroomdata());
    }
    if (cached_has_bits & 0x00000008u) {
      serverversion_ = from.serverversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetChatroomMemberDetailResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetChatroomMemberDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatroomMemberDetailResponse::CopyFrom(const GetChatroomMemberDetailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetChatroomMemberDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatroomMemberDetailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_newchatroomdata()) {
    if (!this->newchatroomdata_->IsInitialized()) return false;
  }
  return true;
}

void GetChatroomMemberDetailResponse::Swap(GetChatroomMemberDetailResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChatroomMemberDetailResponse::InternalSwap(GetChatroomMemberDetailResponse* other) {
  chatroomusername_.Swap(&other->chatroomusername_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(newchatroomdata_, other->newchatroomdata_);
  std::swap(serverversion_, other->serverversion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetChatroomMemberDetailResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetChatroomMemberDetailResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetChatroomMemberDetailResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetChatroomMemberDetailResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void GetChatroomMemberDetailResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetChatroomMemberDetailResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetChatroomMemberDetailResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatroomMemberDetailResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetChatroomMemberDetailResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatroomMemberDetailResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetChatroomMemberDetailResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatroomMemberDetailResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetChatroomMemberDetailResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatroomMemberDetailResponse.BaseResponse)
}

// optional string ChatroomUserName = 2;
bool GetChatroomMemberDetailResponse::has_chatroomusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetChatroomMemberDetailResponse::set_has_chatroomusername() {
  _has_bits_[0] |= 0x00000001u;
}
void GetChatroomMemberDetailResponse::clear_has_chatroomusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetChatroomMemberDetailResponse::clear_chatroomusername() {
  chatroomusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomusername();
}
const ::std::string& GetChatroomMemberDetailResponse::chatroomusername() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatroomMemberDetailResponse.ChatroomUserName)
  return chatroomusername_.GetNoArena();
}
void GetChatroomMemberDetailResponse::set_chatroomusername(const ::std::string& value) {
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatroomMemberDetailResponse.ChatroomUserName)
}
#if LANG_CXX11
void GetChatroomMemberDetailResponse::set_chatroomusername(::std::string&& value) {
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatroomMemberDetailResponse.ChatroomUserName)
}
#endif
void GetChatroomMemberDetailResponse::set_chatroomusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatroomMemberDetailResponse.ChatroomUserName)
}
void GetChatroomMemberDetailResponse::set_chatroomusername(const char* value, size_t size) {
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatroomMemberDetailResponse.ChatroomUserName)
}
::std::string* GetChatroomMemberDetailResponse::mutable_chatroomusername() {
  set_has_chatroomusername();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatroomMemberDetailResponse.ChatroomUserName)
  return chatroomusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetChatroomMemberDetailResponse::release_chatroomusername() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatroomMemberDetailResponse.ChatroomUserName)
  clear_has_chatroomusername();
  return chatroomusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetChatroomMemberDetailResponse::set_allocated_chatroomusername(::std::string* chatroomusername) {
  if (chatroomusername != NULL) {
    set_has_chatroomusername();
  } else {
    clear_has_chatroomusername();
  }
  chatroomusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatroomMemberDetailResponse.ChatroomUserName)
}

// required uint32 ServerVersion = 3;
bool GetChatroomMemberDetailResponse::has_serverversion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetChatroomMemberDetailResponse::set_has_serverversion() {
  _has_bits_[0] |= 0x00000008u;
}
void GetChatroomMemberDetailResponse::clear_has_serverversion() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetChatroomMemberDetailResponse::clear_serverversion() {
  serverversion_ = 0u;
  clear_has_serverversion();
}
::google::protobuf::uint32 GetChatroomMemberDetailResponse::serverversion() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatroomMemberDetailResponse.ServerVersion)
  return serverversion_;
}
void GetChatroomMemberDetailResponse::set_serverversion(::google::protobuf::uint32 value) {
  set_has_serverversion();
  serverversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatroomMemberDetailResponse.ServerVersion)
}

// required .micromsg.ChatRoomMemberData NewChatroomData = 4;
bool GetChatroomMemberDetailResponse::has_newchatroomdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetChatroomMemberDetailResponse::set_has_newchatroomdata() {
  _has_bits_[0] |= 0x00000004u;
}
void GetChatroomMemberDetailResponse::clear_has_newchatroomdata() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetChatroomMemberDetailResponse::clear_newchatroomdata() {
  if (newchatroomdata_ != NULL) newchatroomdata_->::micromsg::ChatRoomMemberData::Clear();
  clear_has_newchatroomdata();
}
const ::micromsg::ChatRoomMemberData& GetChatroomMemberDetailResponse::newchatroomdata() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatroomMemberDetailResponse.NewChatroomData)
  return newchatroomdata_ != NULL ? *newchatroomdata_
                         : *::micromsg::ChatRoomMemberData::internal_default_instance();
}
::micromsg::ChatRoomMemberData* GetChatroomMemberDetailResponse::mutable_newchatroomdata() {
  set_has_newchatroomdata();
  if (newchatroomdata_ == NULL) {
    newchatroomdata_ = new ::micromsg::ChatRoomMemberData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatroomMemberDetailResponse.NewChatroomData)
  return newchatroomdata_;
}
::micromsg::ChatRoomMemberData* GetChatroomMemberDetailResponse::release_newchatroomdata() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatroomMemberDetailResponse.NewChatroomData)
  clear_has_newchatroomdata();
  ::micromsg::ChatRoomMemberData* temp = newchatroomdata_;
  newchatroomdata_ = NULL;
  return temp;
}
void GetChatroomMemberDetailResponse::set_allocated_newchatroomdata(::micromsg::ChatRoomMemberData* newchatroomdata) {
  delete newchatroomdata_;
  newchatroomdata_ = newchatroomdata;
  if (newchatroomdata) {
    set_has_newchatroomdata();
  } else {
    clear_has_newchatroomdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatroomMemberDetailResponse.NewChatroomData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetContactRequest::kBaseRequestFieldNumber;
const int GetContactRequest::kUserCountFieldNumber;
const int GetContactRequest::kUserNameListFieldNumber;
const int GetContactRequest::kAntispamTicketCountFieldNumber;
const int GetContactRequest::kAntispamTicketFieldNumber;
const int GetContactRequest::kFromChatRoomCountFieldNumber;
const int GetContactRequest::kFromChatRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetContactRequest::GetContactRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetContactRequest)
}
GetContactRequest::GetContactRequest(const GetContactRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      usernamelist_(from.usernamelist_),
      antispamticket_(from.antispamticket_),
      fromchatroom_(from.fromchatroom_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&usercount_, &from.usercount_,
    reinterpret_cast<char*>(&fromchatroomcount_) -
    reinterpret_cast<char*>(&usercount_) + sizeof(fromchatroomcount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetContactRequest)
}

void GetContactRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&fromchatroomcount_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(fromchatroomcount_));
}

GetContactRequest::~GetContactRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetContactRequest)
  SharedDtor();
}

void GetContactRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetContactRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetContactRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetContactRequest& GetContactRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetContactRequest* GetContactRequest::New(::google::protobuf::Arena* arena) const {
  GetContactRequest* n = new GetContactRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetContactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetContactRequest)
  usernamelist_.Clear();
  antispamticket_.Clear();
  fromchatroom_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&usercount_, 0, reinterpret_cast<char*>(&fromchatroomcount_) -
      reinterpret_cast<char*>(&usercount_) + sizeof(fromchatroomcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetContactRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetContactRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 UserCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_usercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t UserNameList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usernamelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 AntispamTicketCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_antispamticketcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &antispamticketcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t AntispamTicket = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_antispamticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 FromChatRoomCount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_fromchatroomcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromchatroomcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t FromChatRoom = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fromchatroom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetContactRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetContactRequest)
  return false;
#undef DO_
}

void GetContactRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetContactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 UserCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usercount(), output);
  }

  // repeated .micromsg.SKBuiltinString_t UserNameList = 3;
  for (unsigned int i = 0, n = this->usernamelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->usernamelist(i), output);
  }

  // optional uint32 AntispamTicketCount = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->antispamticketcount(), output);
  }

  // repeated .micromsg.SKBuiltinString_t AntispamTicket = 5;
  for (unsigned int i = 0, n = this->antispamticket_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->antispamticket(i), output);
  }

  // optional uint32 FromChatRoomCount = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fromchatroomcount(), output);
  }

  // repeated .micromsg.SKBuiltinString_t FromChatRoom = 7;
  for (unsigned int i = 0, n = this->fromchatroom_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fromchatroom(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetContactRequest)
}

::google::protobuf::uint8* GetContactRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetContactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 UserCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usercount(), target);
  }

  // repeated .micromsg.SKBuiltinString_t UserNameList = 3;
  for (unsigned int i = 0, n = this->usernamelist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->usernamelist(i), deterministic, target);
  }

  // optional uint32 AntispamTicketCount = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->antispamticketcount(), target);
  }

  // repeated .micromsg.SKBuiltinString_t AntispamTicket = 5;
  for (unsigned int i = 0, n = this->antispamticket_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->antispamticket(i), deterministic, target);
  }

  // optional uint32 FromChatRoomCount = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fromchatroomcount(), target);
  }

  // repeated .micromsg.SKBuiltinString_t FromChatRoom = 7;
  for (unsigned int i = 0, n = this->fromchatroom_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->fromchatroom(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetContactRequest)
  return target;
}

size_t GetContactRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetContactRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_usercount()) {
    // required uint32 UserCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->usercount());
  }

  return total_size;
}
size_t GetContactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetContactRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 UserCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->usercount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SKBuiltinString_t UserNameList = 3;
  {
    unsigned int count = this->usernamelist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usernamelist(i));
    }
  }

  // repeated .micromsg.SKBuiltinString_t AntispamTicket = 5;
  {
    unsigned int count = this->antispamticket_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->antispamticket(i));
    }
  }

  // repeated .micromsg.SKBuiltinString_t FromChatRoom = 7;
  {
    unsigned int count = this->fromchatroom_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fromchatroom(i));
    }
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 AntispamTicketCount = 4;
    if (has_antispamticketcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->antispamticketcount());
    }

    // optional uint32 FromChatRoomCount = 6;
    if (has_fromchatroomcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromchatroomcount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetContactRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetContactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetContactRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetContactRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetContactRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetContactRequest)
    MergeFrom(*source);
  }
}

void GetContactRequest::MergeFrom(const GetContactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetContactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  usernamelist_.MergeFrom(from.usernamelist_);
  antispamticket_.MergeFrom(from.antispamticket_);
  fromchatroom_.MergeFrom(from.fromchatroom_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      usercount_ = from.usercount_;
    }
    if (cached_has_bits & 0x00000004u) {
      antispamticketcount_ = from.antispamticketcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      fromchatroomcount_ = from.fromchatroomcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetContactRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContactRequest::CopyFrom(const GetContactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContactRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetContactRequest::Swap(GetContactRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetContactRequest::InternalSwap(GetContactRequest* other) {
  usernamelist_.InternalSwap(&other->usernamelist_);
  antispamticket_.InternalSwap(&other->antispamticket_);
  fromchatroom_.InternalSwap(&other->fromchatroom_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(usercount_, other->usercount_);
  std::swap(antispamticketcount_, other->antispamticketcount_);
  std::swap(fromchatroomcount_, other->fromchatroomcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetContactRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetContactRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetContactRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetContactRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void GetContactRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetContactRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetContactRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetContactRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetContactRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetContactRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetContactRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetContactRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetContactRequest.BaseRequest)
}

// required uint32 UserCount = 2;
bool GetContactRequest::has_usercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetContactRequest::set_has_usercount() {
  _has_bits_[0] |= 0x00000002u;
}
void GetContactRequest::clear_has_usercount() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetContactRequest::clear_usercount() {
  usercount_ = 0u;
  clear_has_usercount();
}
::google::protobuf::uint32 GetContactRequest::usercount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactRequest.UserCount)
  return usercount_;
}
void GetContactRequest::set_usercount(::google::protobuf::uint32 value) {
  set_has_usercount();
  usercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetContactRequest.UserCount)
}

// repeated .micromsg.SKBuiltinString_t UserNameList = 3;
int GetContactRequest::usernamelist_size() const {
  return usernamelist_.size();
}
void GetContactRequest::clear_usernamelist() {
  usernamelist_.Clear();
}
const ::micromsg::SKBuiltinString_t& GetContactRequest::usernamelist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactRequest.UserNameList)
  return usernamelist_.Get(index);
}
::micromsg::SKBuiltinString_t* GetContactRequest::mutable_usernamelist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetContactRequest.UserNameList)
  return usernamelist_.Mutable(index);
}
::micromsg::SKBuiltinString_t* GetContactRequest::add_usernamelist() {
  // @@protoc_insertion_point(field_add:micromsg.GetContactRequest.UserNameList)
  return usernamelist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
GetContactRequest::mutable_usernamelist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetContactRequest.UserNameList)
  return &usernamelist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
GetContactRequest::usernamelist() const {
  // @@protoc_insertion_point(field_list:micromsg.GetContactRequest.UserNameList)
  return usernamelist_;
}

// optional uint32 AntispamTicketCount = 4;
bool GetContactRequest::has_antispamticketcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetContactRequest::set_has_antispamticketcount() {
  _has_bits_[0] |= 0x00000004u;
}
void GetContactRequest::clear_has_antispamticketcount() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetContactRequest::clear_antispamticketcount() {
  antispamticketcount_ = 0u;
  clear_has_antispamticketcount();
}
::google::protobuf::uint32 GetContactRequest::antispamticketcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactRequest.AntispamTicketCount)
  return antispamticketcount_;
}
void GetContactRequest::set_antispamticketcount(::google::protobuf::uint32 value) {
  set_has_antispamticketcount();
  antispamticketcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetContactRequest.AntispamTicketCount)
}

// repeated .micromsg.SKBuiltinString_t AntispamTicket = 5;
int GetContactRequest::antispamticket_size() const {
  return antispamticket_.size();
}
void GetContactRequest::clear_antispamticket() {
  antispamticket_.Clear();
}
const ::micromsg::SKBuiltinString_t& GetContactRequest::antispamticket(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactRequest.AntispamTicket)
  return antispamticket_.Get(index);
}
::micromsg::SKBuiltinString_t* GetContactRequest::mutable_antispamticket(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetContactRequest.AntispamTicket)
  return antispamticket_.Mutable(index);
}
::micromsg::SKBuiltinString_t* GetContactRequest::add_antispamticket() {
  // @@protoc_insertion_point(field_add:micromsg.GetContactRequest.AntispamTicket)
  return antispamticket_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
GetContactRequest::mutable_antispamticket() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetContactRequest.AntispamTicket)
  return &antispamticket_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
GetContactRequest::antispamticket() const {
  // @@protoc_insertion_point(field_list:micromsg.GetContactRequest.AntispamTicket)
  return antispamticket_;
}

// optional uint32 FromChatRoomCount = 6;
bool GetContactRequest::has_fromchatroomcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetContactRequest::set_has_fromchatroomcount() {
  _has_bits_[0] |= 0x00000008u;
}
void GetContactRequest::clear_has_fromchatroomcount() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetContactRequest::clear_fromchatroomcount() {
  fromchatroomcount_ = 0u;
  clear_has_fromchatroomcount();
}
::google::protobuf::uint32 GetContactRequest::fromchatroomcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactRequest.FromChatRoomCount)
  return fromchatroomcount_;
}
void GetContactRequest::set_fromchatroomcount(::google::protobuf::uint32 value) {
  set_has_fromchatroomcount();
  fromchatroomcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetContactRequest.FromChatRoomCount)
}

// repeated .micromsg.SKBuiltinString_t FromChatRoom = 7;
int GetContactRequest::fromchatroom_size() const {
  return fromchatroom_.size();
}
void GetContactRequest::clear_fromchatroom() {
  fromchatroom_.Clear();
}
const ::micromsg::SKBuiltinString_t& GetContactRequest::fromchatroom(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactRequest.FromChatRoom)
  return fromchatroom_.Get(index);
}
::micromsg::SKBuiltinString_t* GetContactRequest::mutable_fromchatroom(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetContactRequest.FromChatRoom)
  return fromchatroom_.Mutable(index);
}
::micromsg::SKBuiltinString_t* GetContactRequest::add_fromchatroom() {
  // @@protoc_insertion_point(field_add:micromsg.GetContactRequest.FromChatRoom)
  return fromchatroom_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
GetContactRequest::mutable_fromchatroom() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetContactRequest.FromChatRoom)
  return &fromchatroom_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
GetContactRequest::fromchatroom() const {
  // @@protoc_insertion_point(field_list:micromsg.GetContactRequest.FromChatRoom)
  return fromchatroom_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetContactResponse::kBaseResponseFieldNumber;
const int GetContactResponse::kContactCountFieldNumber;
const int GetContactResponse::kContactListFieldNumber;
const int GetContactResponse::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetContactResponse::GetContactResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetContactResponse)
}
GetContactResponse::GetContactResponse(const GetContactResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      contactlist_(from.contactlist_),
      ret_(from.ret_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  contactcount_ = from.contactcount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetContactResponse)
}

void GetContactResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&contactcount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(contactcount_));
}

GetContactResponse::~GetContactResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetContactResponse)
  SharedDtor();
}

void GetContactResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetContactResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetContactResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetContactResponse& GetContactResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetContactResponse* GetContactResponse::New(::google::protobuf::Arena* arena) const {
  GetContactResponse* n = new GetContactResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetContactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetContactResponse)
  contactlist_.Clear();
  ret_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  contactcount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetContactResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetContactResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ContactCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_contactcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contactcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.ModContact ContactList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contactlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 Ret = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ret())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_ret())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetContactResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetContactResponse)
  return false;
#undef DO_
}

void GetContactResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetContactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 ContactCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->contactcount(), output);
  }

  // repeated .micromsg.ModContact ContactList = 3;
  for (unsigned int i = 0, n = this->contactlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->contactlist(i), output);
  }

  // repeated int32 Ret = 4 [packed = true];
  if (this->ret_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ret_cached_byte_size_);
  }
  for (int i = 0, n = this->ret_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->ret(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetContactResponse)
}

::google::protobuf::uint8* GetContactResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetContactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 ContactCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->contactcount(), target);
  }

  // repeated .micromsg.ModContact ContactList = 3;
  for (unsigned int i = 0, n = this->contactlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->contactlist(i), deterministic, target);
  }

  // repeated int32 Ret = 4 [packed = true];
  if (this->ret_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ret_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->ret_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetContactResponse)
  return target;
}

size_t GetContactResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetContactResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_contactcount()) {
    // required uint32 ContactCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contactcount());
  }

  return total_size;
}
size_t GetContactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetContactResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 ContactCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contactcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.ModContact ContactList = 3;
  {
    unsigned int count = this->contactlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contactlist(i));
    }
  }

  // repeated int32 Ret = 4 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->ret_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ret_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetContactResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetContactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetContactResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetContactResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetContactResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetContactResponse)
    MergeFrom(*source);
  }
}

void GetContactResponse::MergeFrom(const GetContactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetContactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contactlist_.MergeFrom(from.contactlist_);
  ret_.MergeFrom(from.ret_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      contactcount_ = from.contactcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetContactResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetContactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContactResponse::CopyFrom(const GetContactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetContactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContactResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->contactlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetContactResponse::Swap(GetContactResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetContactResponse::InternalSwap(GetContactResponse* other) {
  contactlist_.InternalSwap(&other->contactlist_);
  ret_.InternalSwap(&other->ret_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(contactcount_, other->contactcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetContactResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetContactResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetContactResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetContactResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetContactResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetContactResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetContactResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetContactResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetContactResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetContactResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetContactResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetContactResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetContactResponse.BaseResponse)
}

// required uint32 ContactCount = 2;
bool GetContactResponse::has_contactcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetContactResponse::set_has_contactcount() {
  _has_bits_[0] |= 0x00000002u;
}
void GetContactResponse::clear_has_contactcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetContactResponse::clear_contactcount() {
  contactcount_ = 0u;
  clear_has_contactcount();
}
::google::protobuf::uint32 GetContactResponse::contactcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactResponse.ContactCount)
  return contactcount_;
}
void GetContactResponse::set_contactcount(::google::protobuf::uint32 value) {
  set_has_contactcount();
  contactcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetContactResponse.ContactCount)
}

// repeated .micromsg.ModContact ContactList = 3;
int GetContactResponse::contactlist_size() const {
  return contactlist_.size();
}
void GetContactResponse::clear_contactlist() {
  contactlist_.Clear();
}
const ::micromsg::ModContact& GetContactResponse::contactlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactResponse.ContactList)
  return contactlist_.Get(index);
}
::micromsg::ModContact* GetContactResponse::mutable_contactlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetContactResponse.ContactList)
  return contactlist_.Mutable(index);
}
::micromsg::ModContact* GetContactResponse::add_contactlist() {
  // @@protoc_insertion_point(field_add:micromsg.GetContactResponse.ContactList)
  return contactlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::ModContact >*
GetContactResponse::mutable_contactlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetContactResponse.ContactList)
  return &contactlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::ModContact >&
GetContactResponse::contactlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GetContactResponse.ContactList)
  return contactlist_;
}

// repeated int32 Ret = 4 [packed = true];
int GetContactResponse::ret_size() const {
  return ret_.size();
}
void GetContactResponse::clear_ret() {
  ret_.Clear();
}
::google::protobuf::int32 GetContactResponse::ret(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactResponse.Ret)
  return ret_.Get(index);
}
void GetContactResponse::set_ret(int index, ::google::protobuf::int32 value) {
  ret_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.GetContactResponse.Ret)
}
void GetContactResponse::add_ret(::google::protobuf::int32 value) {
  ret_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.GetContactResponse.Ret)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GetContactResponse::ret() const {
  // @@protoc_insertion_point(field_list:micromsg.GetContactResponse.Ret)
  return ret_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GetContactResponse::mutable_ret() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetContactResponse.Ret)
  return &ret_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadCardImgRequest::kBaseRequestFieldNumber;
const int UploadCardImgRequest::kClientIdFieldNumber;
const int UploadCardImgRequest::kTotalLenFieldNumber;
const int UploadCardImgRequest::kStartPosFieldNumber;
const int UploadCardImgRequest::kDataLenFieldNumber;
const int UploadCardImgRequest::kDataFieldNumber;
const int UploadCardImgRequest::kContactUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadCardImgRequest::UploadCardImgRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UploadCardImgRequest)
}
UploadCardImgRequest::UploadCardImgRequest(const UploadCardImgRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  contactusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_contactusername()) {
    contactusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contactusername_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::micromsg::SKBuiltinBuffer_t(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&totallen_, &from.totallen_,
    reinterpret_cast<char*>(&datalen_) -
    reinterpret_cast<char*>(&totallen_) + sizeof(datalen_));
  // @@protoc_insertion_point(copy_constructor:micromsg.UploadCardImgRequest)
}

void UploadCardImgRequest::SharedCtor() {
  _cached_size_ = 0;
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contactusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&datalen_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(datalen_));
}

UploadCardImgRequest::~UploadCardImgRequest() {
  // @@protoc_insertion_point(destructor:micromsg.UploadCardImgRequest)
  SharedDtor();
}

void UploadCardImgRequest::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contactusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void UploadCardImgRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadCardImgRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UploadCardImgRequest& UploadCardImgRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

UploadCardImgRequest* UploadCardImgRequest::New(::google::protobuf::Arena* arena) const {
  UploadCardImgRequest* n = new UploadCardImgRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadCardImgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UploadCardImgRequest)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_clientid()) {
      GOOGLE_DCHECK(!clientid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientid_.UnsafeRawStringPointer())->clear();
    }
    if (has_contactusername()) {
      GOOGLE_DCHECK(!contactusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*contactusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 112u) {
    ::memset(&totallen_, 0, reinterpret_cast<char*>(&datalen_) -
      reinterpret_cast<char*>(&totallen_) + sizeof(datalen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UploadCardImgRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UploadCardImgRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadCardImgRequest.ClientId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TotalLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 StartPos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DataLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_datalen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datalen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ContactUserName = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contactusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contactusername().data(), this->contactusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadCardImgRequest.ContactUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UploadCardImgRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UploadCardImgRequest)
  return false;
#undef DO_
}

void UploadCardImgRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UploadCardImgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ClientId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadCardImgRequest.ClientId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientid(), output);
  }

  // required uint32 TotalLen = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totallen(), output);
  }

  // required uint32 StartPos = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->startpos(), output);
  }

  // required uint32 DataLen = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->datalen(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->data_, output);
  }

  // optional string ContactUserName = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contactusername().data(), this->contactusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadCardImgRequest.ContactUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->contactusername(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UploadCardImgRequest)
}

::google::protobuf::uint8* UploadCardImgRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UploadCardImgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ClientId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadCardImgRequest.ClientId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientid(), target);
  }

  // required uint32 TotalLen = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->totallen(), target);
  }

  // required uint32 StartPos = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->startpos(), target);
  }

  // required uint32 DataLen = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->datalen(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->data_, deterministic, target);
  }

  // optional string ContactUserName = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contactusername().data(), this->contactusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadCardImgRequest.ContactUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->contactusername(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UploadCardImgRequest)
  return target;
}

size_t UploadCardImgRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.UploadCardImgRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_data()) {
    // required .micromsg.SKBuiltinBuffer_t Data = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  if (has_totallen()) {
    // required uint32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());
  }

  if (has_startpos()) {
    // required uint32 StartPos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());
  }

  if (has_datalen()) {
    // required uint32 DataLen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalen());
  }

  return total_size;
}
size_t UploadCardImgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UploadCardImgRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007c) ^ 0x0000007c) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t Data = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);

    // required uint32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());

    // required uint32 StartPos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());

    // required uint32 DataLen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ClientId = 2;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientid());
    }

    // optional string ContactUserName = 7;
    if (has_contactusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contactusername());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadCardImgRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UploadCardImgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadCardImgRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadCardImgRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UploadCardImgRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UploadCardImgRequest)
    MergeFrom(*source);
  }
}

void UploadCardImgRequest::MergeFrom(const UploadCardImgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UploadCardImgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_contactusername();
      contactusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contactusername_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_data()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000010u) {
      totallen_ = from.totallen_;
    }
    if (cached_has_bits & 0x00000020u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00000040u) {
      datalen_ = from.datalen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UploadCardImgRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UploadCardImgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadCardImgRequest::CopyFrom(const UploadCardImgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UploadCardImgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadCardImgRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007c) != 0x0000007c) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void UploadCardImgRequest::Swap(UploadCardImgRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadCardImgRequest::InternalSwap(UploadCardImgRequest* other) {
  clientid_.Swap(&other->clientid_);
  contactusername_.Swap(&other->contactusername_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(data_, other->data_);
  std::swap(totallen_, other->totallen_);
  std::swap(startpos_, other->startpos_);
  std::swap(datalen_, other->datalen_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadCardImgRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadCardImgRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool UploadCardImgRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UploadCardImgRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void UploadCardImgRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void UploadCardImgRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& UploadCardImgRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* UploadCardImgRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadCardImgRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* UploadCardImgRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.UploadCardImgRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void UploadCardImgRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadCardImgRequest.BaseRequest)
}

// optional string ClientId = 2;
bool UploadCardImgRequest::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UploadCardImgRequest::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
void UploadCardImgRequest::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UploadCardImgRequest::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
const ::std::string& UploadCardImgRequest::clientid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgRequest.ClientId)
  return clientid_.GetNoArena();
}
void UploadCardImgRequest::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadCardImgRequest.ClientId)
}
#if LANG_CXX11
void UploadCardImgRequest::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadCardImgRequest.ClientId)
}
#endif
void UploadCardImgRequest::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadCardImgRequest.ClientId)
}
void UploadCardImgRequest::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadCardImgRequest.ClientId)
}
::std::string* UploadCardImgRequest::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadCardImgRequest.ClientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadCardImgRequest::release_clientid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadCardImgRequest.ClientId)
  clear_has_clientid();
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadCardImgRequest::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadCardImgRequest.ClientId)
}

// required uint32 TotalLen = 3;
bool UploadCardImgRequest::has_totallen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UploadCardImgRequest::set_has_totallen() {
  _has_bits_[0] |= 0x00000010u;
}
void UploadCardImgRequest::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000010u;
}
void UploadCardImgRequest::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
::google::protobuf::uint32 UploadCardImgRequest::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgRequest.TotalLen)
  return totallen_;
}
void UploadCardImgRequest::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadCardImgRequest.TotalLen)
}

// required uint32 StartPos = 4;
bool UploadCardImgRequest::has_startpos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UploadCardImgRequest::set_has_startpos() {
  _has_bits_[0] |= 0x00000020u;
}
void UploadCardImgRequest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000020u;
}
void UploadCardImgRequest::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
::google::protobuf::uint32 UploadCardImgRequest::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgRequest.StartPos)
  return startpos_;
}
void UploadCardImgRequest::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadCardImgRequest.StartPos)
}

// required uint32 DataLen = 5;
bool UploadCardImgRequest::has_datalen() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UploadCardImgRequest::set_has_datalen() {
  _has_bits_[0] |= 0x00000040u;
}
void UploadCardImgRequest::clear_has_datalen() {
  _has_bits_[0] &= ~0x00000040u;
}
void UploadCardImgRequest::clear_datalen() {
  datalen_ = 0u;
  clear_has_datalen();
}
::google::protobuf::uint32 UploadCardImgRequest::datalen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgRequest.DataLen)
  return datalen_;
}
void UploadCardImgRequest::set_datalen(::google::protobuf::uint32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadCardImgRequest.DataLen)
}

// required .micromsg.SKBuiltinBuffer_t Data = 6;
bool UploadCardImgRequest::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UploadCardImgRequest::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
void UploadCardImgRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void UploadCardImgRequest::clear_data() {
  if (data_ != NULL) data_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_data();
}
const ::micromsg::SKBuiltinBuffer_t& UploadCardImgRequest::data() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgRequest.Data)
  return data_ != NULL ? *data_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* UploadCardImgRequest::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadCardImgRequest.Data)
  return data_;
}
::micromsg::SKBuiltinBuffer_t* UploadCardImgRequest::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.UploadCardImgRequest.Data)
  clear_has_data();
  ::micromsg::SKBuiltinBuffer_t* temp = data_;
  data_ = NULL;
  return temp;
}
void UploadCardImgRequest::set_allocated_data(::micromsg::SKBuiltinBuffer_t* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadCardImgRequest.Data)
}

// optional string ContactUserName = 7;
bool UploadCardImgRequest::has_contactusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UploadCardImgRequest::set_has_contactusername() {
  _has_bits_[0] |= 0x00000002u;
}
void UploadCardImgRequest::clear_has_contactusername() {
  _has_bits_[0] &= ~0x00000002u;
}
void UploadCardImgRequest::clear_contactusername() {
  contactusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contactusername();
}
const ::std::string& UploadCardImgRequest::contactusername() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgRequest.ContactUserName)
  return contactusername_.GetNoArena();
}
void UploadCardImgRequest::set_contactusername(const ::std::string& value) {
  set_has_contactusername();
  contactusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadCardImgRequest.ContactUserName)
}
#if LANG_CXX11
void UploadCardImgRequest::set_contactusername(::std::string&& value) {
  set_has_contactusername();
  contactusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadCardImgRequest.ContactUserName)
}
#endif
void UploadCardImgRequest::set_contactusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contactusername();
  contactusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadCardImgRequest.ContactUserName)
}
void UploadCardImgRequest::set_contactusername(const char* value, size_t size) {
  set_has_contactusername();
  contactusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadCardImgRequest.ContactUserName)
}
::std::string* UploadCardImgRequest::mutable_contactusername() {
  set_has_contactusername();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadCardImgRequest.ContactUserName)
  return contactusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadCardImgRequest::release_contactusername() {
  // @@protoc_insertion_point(field_release:micromsg.UploadCardImgRequest.ContactUserName)
  clear_has_contactusername();
  return contactusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadCardImgRequest::set_allocated_contactusername(::std::string* contactusername) {
  if (contactusername != NULL) {
    set_has_contactusername();
  } else {
    clear_has_contactusername();
  }
  contactusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contactusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadCardImgRequest.ContactUserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadCardImgResponse::kBaseResponseFieldNumber;
const int UploadCardImgResponse::kStartPosFieldNumber;
const int UploadCardImgResponse::kTotalLenFieldNumber;
const int UploadCardImgResponse::kClientIdFieldNumber;
const int UploadCardImgResponse::kCardImgUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadCardImgResponse::UploadCardImgResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UploadCardImgResponse)
}
UploadCardImgResponse::UploadCardImgResponse(const UploadCardImgResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  cardimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cardimgurl()) {
    cardimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cardimgurl_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&startpos_, &from.startpos_,
    reinterpret_cast<char*>(&totallen_) -
    reinterpret_cast<char*>(&startpos_) + sizeof(totallen_));
  // @@protoc_insertion_point(copy_constructor:micromsg.UploadCardImgResponse)
}

void UploadCardImgResponse::SharedCtor() {
  _cached_size_ = 0;
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cardimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&totallen_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(totallen_));
}

UploadCardImgResponse::~UploadCardImgResponse() {
  // @@protoc_insertion_point(destructor:micromsg.UploadCardImgResponse)
  SharedDtor();
}

void UploadCardImgResponse::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cardimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void UploadCardImgResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadCardImgResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UploadCardImgResponse& UploadCardImgResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

UploadCardImgResponse* UploadCardImgResponse::New(::google::protobuf::Arena* arena) const {
  UploadCardImgResponse* n = new UploadCardImgResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadCardImgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UploadCardImgResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_clientid()) {
      GOOGLE_DCHECK(!clientid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientid_.UnsafeRawStringPointer())->clear();
    }
    if (has_cardimgurl()) {
      GOOGLE_DCHECK(!cardimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cardimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&startpos_, 0, reinterpret_cast<char*>(&totallen_) -
      reinterpret_cast<char*>(&startpos_) + sizeof(totallen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UploadCardImgResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UploadCardImgResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 StartPos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TotalLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadCardImgResponse.ClientId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CardImgUrl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cardimgurl().data(), this->cardimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadCardImgResponse.CardImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UploadCardImgResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UploadCardImgResponse)
  return false;
#undef DO_
}

void UploadCardImgResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UploadCardImgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 StartPos = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->startpos(), output);
  }

  // required uint32 TotalLen = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totallen(), output);
  }

  // optional string ClientId = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadCardImgResponse.ClientId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->clientid(), output);
  }

  // optional string CardImgUrl = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cardimgurl().data(), this->cardimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadCardImgResponse.CardImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cardimgurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UploadCardImgResponse)
}

::google::protobuf::uint8* UploadCardImgResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UploadCardImgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 StartPos = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->startpos(), target);
  }

  // required uint32 TotalLen = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->totallen(), target);
  }

  // optional string ClientId = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadCardImgResponse.ClientId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->clientid(), target);
  }

  // optional string CardImgUrl = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cardimgurl().data(), this->cardimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadCardImgResponse.CardImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cardimgurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UploadCardImgResponse)
  return target;
}

size_t UploadCardImgResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.UploadCardImgResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_startpos()) {
    // required uint32 StartPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());
  }

  if (has_totallen()) {
    // required uint32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());
  }

  return total_size;
}
size_t UploadCardImgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UploadCardImgResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 StartPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());

    // required uint32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ClientId = 4;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientid());
    }

    // optional string CardImgUrl = 5;
    if (has_cardimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardimgurl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadCardImgResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UploadCardImgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadCardImgResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadCardImgResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UploadCardImgResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UploadCardImgResponse)
    MergeFrom(*source);
  }
}

void UploadCardImgResponse::MergeFrom(const UploadCardImgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UploadCardImgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_cardimgurl();
      cardimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cardimgurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000008u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00000010u) {
      totallen_ = from.totallen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UploadCardImgResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UploadCardImgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadCardImgResponse::CopyFrom(const UploadCardImgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UploadCardImgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadCardImgResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void UploadCardImgResponse::Swap(UploadCardImgResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadCardImgResponse::InternalSwap(UploadCardImgResponse* other) {
  clientid_.Swap(&other->clientid_);
  cardimgurl_.Swap(&other->cardimgurl_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(startpos_, other->startpos_);
  std::swap(totallen_, other->totallen_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadCardImgResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadCardImgResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool UploadCardImgResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UploadCardImgResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void UploadCardImgResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void UploadCardImgResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& UploadCardImgResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* UploadCardImgResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadCardImgResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* UploadCardImgResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UploadCardImgResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void UploadCardImgResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadCardImgResponse.BaseResponse)
}

// required uint32 StartPos = 2;
bool UploadCardImgResponse::has_startpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UploadCardImgResponse::set_has_startpos() {
  _has_bits_[0] |= 0x00000008u;
}
void UploadCardImgResponse::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000008u;
}
void UploadCardImgResponse::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
::google::protobuf::uint32 UploadCardImgResponse::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgResponse.StartPos)
  return startpos_;
}
void UploadCardImgResponse::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadCardImgResponse.StartPos)
}

// required uint32 TotalLen = 3;
bool UploadCardImgResponse::has_totallen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UploadCardImgResponse::set_has_totallen() {
  _has_bits_[0] |= 0x00000010u;
}
void UploadCardImgResponse::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000010u;
}
void UploadCardImgResponse::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
::google::protobuf::uint32 UploadCardImgResponse::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgResponse.TotalLen)
  return totallen_;
}
void UploadCardImgResponse::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadCardImgResponse.TotalLen)
}

// optional string ClientId = 4;
bool UploadCardImgResponse::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UploadCardImgResponse::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
void UploadCardImgResponse::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UploadCardImgResponse::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
const ::std::string& UploadCardImgResponse::clientid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgResponse.ClientId)
  return clientid_.GetNoArena();
}
void UploadCardImgResponse::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadCardImgResponse.ClientId)
}
#if LANG_CXX11
void UploadCardImgResponse::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadCardImgResponse.ClientId)
}
#endif
void UploadCardImgResponse::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadCardImgResponse.ClientId)
}
void UploadCardImgResponse::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadCardImgResponse.ClientId)
}
::std::string* UploadCardImgResponse::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadCardImgResponse.ClientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadCardImgResponse::release_clientid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadCardImgResponse.ClientId)
  clear_has_clientid();
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadCardImgResponse::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadCardImgResponse.ClientId)
}

// optional string CardImgUrl = 5;
bool UploadCardImgResponse::has_cardimgurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UploadCardImgResponse::set_has_cardimgurl() {
  _has_bits_[0] |= 0x00000002u;
}
void UploadCardImgResponse::clear_has_cardimgurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void UploadCardImgResponse::clear_cardimgurl() {
  cardimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cardimgurl();
}
const ::std::string& UploadCardImgResponse::cardimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgResponse.CardImgUrl)
  return cardimgurl_.GetNoArena();
}
void UploadCardImgResponse::set_cardimgurl(const ::std::string& value) {
  set_has_cardimgurl();
  cardimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadCardImgResponse.CardImgUrl)
}
#if LANG_CXX11
void UploadCardImgResponse::set_cardimgurl(::std::string&& value) {
  set_has_cardimgurl();
  cardimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadCardImgResponse.CardImgUrl)
}
#endif
void UploadCardImgResponse::set_cardimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cardimgurl();
  cardimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadCardImgResponse.CardImgUrl)
}
void UploadCardImgResponse::set_cardimgurl(const char* value, size_t size) {
  set_has_cardimgurl();
  cardimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadCardImgResponse.CardImgUrl)
}
::std::string* UploadCardImgResponse::mutable_cardimgurl() {
  set_has_cardimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadCardImgResponse.CardImgUrl)
  return cardimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadCardImgResponse::release_cardimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.UploadCardImgResponse.CardImgUrl)
  clear_has_cardimgurl();
  return cardimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadCardImgResponse::set_allocated_cardimgurl(::std::string* cardimgurl) {
  if (cardimgurl != NULL) {
    set_has_cardimgurl();
  } else {
    clear_has_cardimgurl();
  }
  cardimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cardimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadCardImgResponse.CardImgUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteCardImgRequest::kBaseRequestFieldNumber;
const int DeleteCardImgRequest::kContactUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteCardImgRequest::DeleteCardImgRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DeleteCardImgRequest)
}
DeleteCardImgRequest::DeleteCardImgRequest(const DeleteCardImgRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  contactusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_contactusername()) {
    contactusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contactusername_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.DeleteCardImgRequest)
}

void DeleteCardImgRequest::SharedCtor() {
  _cached_size_ = 0;
  contactusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

DeleteCardImgRequest::~DeleteCardImgRequest() {
  // @@protoc_insertion_point(destructor:micromsg.DeleteCardImgRequest)
  SharedDtor();
}

void DeleteCardImgRequest::SharedDtor() {
  contactusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void DeleteCardImgRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteCardImgRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteCardImgRequest& DeleteCardImgRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteCardImgRequest* DeleteCardImgRequest::New(::google::protobuf::Arena* arena) const {
  DeleteCardImgRequest* n = new DeleteCardImgRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteCardImgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DeleteCardImgRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_contactusername()) {
      GOOGLE_DCHECK(!contactusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*contactusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeleteCardImgRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DeleteCardImgRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ContactUserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contactusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contactusername().data(), this->contactusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.DeleteCardImgRequest.ContactUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DeleteCardImgRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DeleteCardImgRequest)
  return false;
#undef DO_
}

void DeleteCardImgRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DeleteCardImgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ContactUserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contactusername().data(), this->contactusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DeleteCardImgRequest.ContactUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->contactusername(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DeleteCardImgRequest)
}

::google::protobuf::uint8* DeleteCardImgRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DeleteCardImgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ContactUserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contactusername().data(), this->contactusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DeleteCardImgRequest.ContactUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contactusername(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DeleteCardImgRequest)
  return target;
}

size_t DeleteCardImgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DeleteCardImgRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string ContactUserName = 2;
  if (has_contactusername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contactusername());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteCardImgRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DeleteCardImgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteCardImgRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteCardImgRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DeleteCardImgRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DeleteCardImgRequest)
    MergeFrom(*source);
  }
}

void DeleteCardImgRequest::MergeFrom(const DeleteCardImgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DeleteCardImgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_contactusername();
      contactusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contactusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void DeleteCardImgRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DeleteCardImgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCardImgRequest::CopyFrom(const DeleteCardImgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DeleteCardImgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCardImgRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void DeleteCardImgRequest::Swap(DeleteCardImgRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteCardImgRequest::InternalSwap(DeleteCardImgRequest* other) {
  contactusername_.Swap(&other->contactusername_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteCardImgRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteCardImgRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool DeleteCardImgRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeleteCardImgRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void DeleteCardImgRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeleteCardImgRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& DeleteCardImgRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.DeleteCardImgRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* DeleteCardImgRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DeleteCardImgRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* DeleteCardImgRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.DeleteCardImgRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void DeleteCardImgRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DeleteCardImgRequest.BaseRequest)
}

// optional string ContactUserName = 2;
bool DeleteCardImgRequest::has_contactusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeleteCardImgRequest::set_has_contactusername() {
  _has_bits_[0] |= 0x00000001u;
}
void DeleteCardImgRequest::clear_has_contactusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeleteCardImgRequest::clear_contactusername() {
  contactusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contactusername();
}
const ::std::string& DeleteCardImgRequest::contactusername() const {
  // @@protoc_insertion_point(field_get:micromsg.DeleteCardImgRequest.ContactUserName)
  return contactusername_.GetNoArena();
}
void DeleteCardImgRequest::set_contactusername(const ::std::string& value) {
  set_has_contactusername();
  contactusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DeleteCardImgRequest.ContactUserName)
}
#if LANG_CXX11
void DeleteCardImgRequest::set_contactusername(::std::string&& value) {
  set_has_contactusername();
  contactusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DeleteCardImgRequest.ContactUserName)
}
#endif
void DeleteCardImgRequest::set_contactusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contactusername();
  contactusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DeleteCardImgRequest.ContactUserName)
}
void DeleteCardImgRequest::set_contactusername(const char* value, size_t size) {
  set_has_contactusername();
  contactusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DeleteCardImgRequest.ContactUserName)
}
::std::string* DeleteCardImgRequest::mutable_contactusername() {
  set_has_contactusername();
  // @@protoc_insertion_point(field_mutable:micromsg.DeleteCardImgRequest.ContactUserName)
  return contactusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteCardImgRequest::release_contactusername() {
  // @@protoc_insertion_point(field_release:micromsg.DeleteCardImgRequest.ContactUserName)
  clear_has_contactusername();
  return contactusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteCardImgRequest::set_allocated_contactusername(::std::string* contactusername) {
  if (contactusername != NULL) {
    set_has_contactusername();
  } else {
    clear_has_contactusername();
  }
  contactusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contactusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DeleteCardImgRequest.ContactUserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteCardImgResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteCardImgResponse::DeleteCardImgResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DeleteCardImgResponse)
}
DeleteCardImgResponse::DeleteCardImgResponse(const DeleteCardImgResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.DeleteCardImgResponse)
}

void DeleteCardImgResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

DeleteCardImgResponse::~DeleteCardImgResponse() {
  // @@protoc_insertion_point(destructor:micromsg.DeleteCardImgResponse)
  SharedDtor();
}

void DeleteCardImgResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void DeleteCardImgResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteCardImgResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteCardImgResponse& DeleteCardImgResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteCardImgResponse* DeleteCardImgResponse::New(::google::protobuf::Arena* arena) const {
  DeleteCardImgResponse* n = new DeleteCardImgResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteCardImgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DeleteCardImgResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeleteCardImgResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DeleteCardImgResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DeleteCardImgResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DeleteCardImgResponse)
  return false;
#undef DO_
}

void DeleteCardImgResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DeleteCardImgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DeleteCardImgResponse)
}

::google::protobuf::uint8* DeleteCardImgResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DeleteCardImgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DeleteCardImgResponse)
  return target;
}

size_t DeleteCardImgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DeleteCardImgResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteCardImgResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DeleteCardImgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteCardImgResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteCardImgResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DeleteCardImgResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DeleteCardImgResponse)
    MergeFrom(*source);
  }
}

void DeleteCardImgResponse::MergeFrom(const DeleteCardImgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DeleteCardImgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void DeleteCardImgResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DeleteCardImgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCardImgResponse::CopyFrom(const DeleteCardImgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DeleteCardImgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCardImgResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void DeleteCardImgResponse::Swap(DeleteCardImgResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteCardImgResponse::InternalSwap(DeleteCardImgResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteCardImgResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteCardImgResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool DeleteCardImgResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeleteCardImgResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void DeleteCardImgResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeleteCardImgResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& DeleteCardImgResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.DeleteCardImgResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* DeleteCardImgResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DeleteCardImgResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* DeleteCardImgResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.DeleteCardImgResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void DeleteCardImgResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DeleteCardImgResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InviteChatRoomMemberRequest::kBaseRequestFieldNumber;
const int InviteChatRoomMemberRequest::kMemberCountFieldNumber;
const int InviteChatRoomMemberRequest::kMemberListFieldNumber;
const int InviteChatRoomMemberRequest::kChatRoomNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InviteChatRoomMemberRequest::InviteChatRoomMemberRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.InviteChatRoomMemberRequest)
}
InviteChatRoomMemberRequest::InviteChatRoomMemberRequest(const InviteChatRoomMemberRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      memberlist_(from.memberlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_chatroomname()) {
    chatroomname_ = new ::micromsg::SKBuiltinString_t(*from.chatroomname_);
  } else {
    chatroomname_ = NULL;
  }
  membercount_ = from.membercount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.InviteChatRoomMemberRequest)
}

void InviteChatRoomMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&membercount_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(membercount_));
}

InviteChatRoomMemberRequest::~InviteChatRoomMemberRequest() {
  // @@protoc_insertion_point(destructor:micromsg.InviteChatRoomMemberRequest)
  SharedDtor();
}

void InviteChatRoomMemberRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete chatroomname_;
  }
}

void InviteChatRoomMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteChatRoomMemberRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InviteChatRoomMemberRequest& InviteChatRoomMemberRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

InviteChatRoomMemberRequest* InviteChatRoomMemberRequest::New(::google::protobuf::Arena* arena) const {
  InviteChatRoomMemberRequest* n = new InviteChatRoomMemberRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InviteChatRoomMemberRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.InviteChatRoomMemberRequest)
  memberlist_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_chatroomname()) {
      GOOGLE_DCHECK(chatroomname_ != NULL);
      chatroomname_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  membercount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InviteChatRoomMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.InviteChatRoomMemberRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MemberCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_membercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.MemberReq MemberList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t ChatRoomName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatroomname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.InviteChatRoomMemberRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.InviteChatRoomMemberRequest)
  return false;
#undef DO_
}

void InviteChatRoomMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.InviteChatRoomMemberRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 MemberCount = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->membercount(), output);
  }

  // repeated .micromsg.MemberReq MemberList = 3;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->memberlist(i), output);
  }

  // required .micromsg.SKBuiltinString_t ChatRoomName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->chatroomname_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.InviteChatRoomMemberRequest)
}

::google::protobuf::uint8* InviteChatRoomMemberRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.InviteChatRoomMemberRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 MemberCount = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->membercount(), target);
  }

  // repeated .micromsg.MemberReq MemberList = 3;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->memberlist(i), deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t ChatRoomName = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->chatroomname_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.InviteChatRoomMemberRequest)
  return target;
}

size_t InviteChatRoomMemberRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.InviteChatRoomMemberRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_chatroomname()) {
    // required .micromsg.SKBuiltinString_t ChatRoomName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chatroomname_);
  }

  if (has_membercount()) {
    // required uint32 MemberCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());
  }

  return total_size;
}
size_t InviteChatRoomMemberRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.InviteChatRoomMemberRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinString_t ChatRoomName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chatroomname_);

    // required uint32 MemberCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.MemberReq MemberList = 3;
  {
    unsigned int count = this->memberlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteChatRoomMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.InviteChatRoomMemberRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InviteChatRoomMemberRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InviteChatRoomMemberRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.InviteChatRoomMemberRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.InviteChatRoomMemberRequest)
    MergeFrom(*source);
  }
}

void InviteChatRoomMemberRequest::MergeFrom(const InviteChatRoomMemberRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.InviteChatRoomMemberRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memberlist_.MergeFrom(from.memberlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_chatroomname()->::micromsg::SKBuiltinString_t::MergeFrom(from.chatroomname());
    }
    if (cached_has_bits & 0x00000004u) {
      membercount_ = from.membercount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InviteChatRoomMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.InviteChatRoomMemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteChatRoomMemberRequest::CopyFrom(const InviteChatRoomMemberRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.InviteChatRoomMemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteChatRoomMemberRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->memberlist())) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void InviteChatRoomMemberRequest::Swap(InviteChatRoomMemberRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InviteChatRoomMemberRequest::InternalSwap(InviteChatRoomMemberRequest* other) {
  memberlist_.InternalSwap(&other->memberlist_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(chatroomname_, other->chatroomname_);
  std::swap(membercount_, other->membercount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InviteChatRoomMemberRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InviteChatRoomMemberRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool InviteChatRoomMemberRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InviteChatRoomMemberRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void InviteChatRoomMemberRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void InviteChatRoomMemberRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& InviteChatRoomMemberRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.InviteChatRoomMemberRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* InviteChatRoomMemberRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.InviteChatRoomMemberRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* InviteChatRoomMemberRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.InviteChatRoomMemberRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void InviteChatRoomMemberRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.InviteChatRoomMemberRequest.BaseRequest)
}

// required uint32 MemberCount = 2;
bool InviteChatRoomMemberRequest::has_membercount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InviteChatRoomMemberRequest::set_has_membercount() {
  _has_bits_[0] |= 0x00000004u;
}
void InviteChatRoomMemberRequest::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000004u;
}
void InviteChatRoomMemberRequest::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
::google::protobuf::uint32 InviteChatRoomMemberRequest::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.InviteChatRoomMemberRequest.MemberCount)
  return membercount_;
}
void InviteChatRoomMemberRequest::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.InviteChatRoomMemberRequest.MemberCount)
}

// repeated .micromsg.MemberReq MemberList = 3;
int InviteChatRoomMemberRequest::memberlist_size() const {
  return memberlist_.size();
}
void InviteChatRoomMemberRequest::clear_memberlist() {
  memberlist_.Clear();
}
const ::micromsg::MemberReq& InviteChatRoomMemberRequest::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.InviteChatRoomMemberRequest.MemberList)
  return memberlist_.Get(index);
}
::micromsg::MemberReq* InviteChatRoomMemberRequest::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.InviteChatRoomMemberRequest.MemberList)
  return memberlist_.Mutable(index);
}
::micromsg::MemberReq* InviteChatRoomMemberRequest::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.InviteChatRoomMemberRequest.MemberList)
  return memberlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >*
InviteChatRoomMemberRequest::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.InviteChatRoomMemberRequest.MemberList)
  return &memberlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >&
InviteChatRoomMemberRequest::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.InviteChatRoomMemberRequest.MemberList)
  return memberlist_;
}

// required .micromsg.SKBuiltinString_t ChatRoomName = 4;
bool InviteChatRoomMemberRequest::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InviteChatRoomMemberRequest::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000002u;
}
void InviteChatRoomMemberRequest::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000002u;
}
void InviteChatRoomMemberRequest::clear_chatroomname() {
  if (chatroomname_ != NULL) chatroomname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_chatroomname();
}
const ::micromsg::SKBuiltinString_t& InviteChatRoomMemberRequest::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.InviteChatRoomMemberRequest.ChatRoomName)
  return chatroomname_ != NULL ? *chatroomname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* InviteChatRoomMemberRequest::mutable_chatroomname() {
  set_has_chatroomname();
  if (chatroomname_ == NULL) {
    chatroomname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.InviteChatRoomMemberRequest.ChatRoomName)
  return chatroomname_;
}
::micromsg::SKBuiltinString_t* InviteChatRoomMemberRequest::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.InviteChatRoomMemberRequest.ChatRoomName)
  clear_has_chatroomname();
  ::micromsg::SKBuiltinString_t* temp = chatroomname_;
  chatroomname_ = NULL;
  return temp;
}
void InviteChatRoomMemberRequest::set_allocated_chatroomname(::micromsg::SKBuiltinString_t* chatroomname) {
  delete chatroomname_;
  chatroomname_ = chatroomname;
  if (chatroomname) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.InviteChatRoomMemberRequest.ChatRoomName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InviteChatRoomMemberResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InviteChatRoomMemberResponse::InviteChatRoomMemberResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.InviteChatRoomMemberResponse)
}
InviteChatRoomMemberResponse::InviteChatRoomMemberResponse(const InviteChatRoomMemberResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.InviteChatRoomMemberResponse)
}

void InviteChatRoomMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

InviteChatRoomMemberResponse::~InviteChatRoomMemberResponse() {
  // @@protoc_insertion_point(destructor:micromsg.InviteChatRoomMemberResponse)
  SharedDtor();
}

void InviteChatRoomMemberResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void InviteChatRoomMemberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteChatRoomMemberResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InviteChatRoomMemberResponse& InviteChatRoomMemberResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

InviteChatRoomMemberResponse* InviteChatRoomMemberResponse::New(::google::protobuf::Arena* arena) const {
  InviteChatRoomMemberResponse* n = new InviteChatRoomMemberResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InviteChatRoomMemberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.InviteChatRoomMemberResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InviteChatRoomMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.InviteChatRoomMemberResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.InviteChatRoomMemberResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.InviteChatRoomMemberResponse)
  return false;
#undef DO_
}

void InviteChatRoomMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.InviteChatRoomMemberResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.InviteChatRoomMemberResponse)
}

::google::protobuf::uint8* InviteChatRoomMemberResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.InviteChatRoomMemberResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.InviteChatRoomMemberResponse)
  return target;
}

size_t InviteChatRoomMemberResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.InviteChatRoomMemberResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteChatRoomMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.InviteChatRoomMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InviteChatRoomMemberResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InviteChatRoomMemberResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.InviteChatRoomMemberResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.InviteChatRoomMemberResponse)
    MergeFrom(*source);
  }
}

void InviteChatRoomMemberResponse::MergeFrom(const InviteChatRoomMemberResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.InviteChatRoomMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void InviteChatRoomMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.InviteChatRoomMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteChatRoomMemberResponse::CopyFrom(const InviteChatRoomMemberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.InviteChatRoomMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteChatRoomMemberResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void InviteChatRoomMemberResponse::Swap(InviteChatRoomMemberResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InviteChatRoomMemberResponse::InternalSwap(InviteChatRoomMemberResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InviteChatRoomMemberResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InviteChatRoomMemberResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool InviteChatRoomMemberResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InviteChatRoomMemberResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void InviteChatRoomMemberResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void InviteChatRoomMemberResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& InviteChatRoomMemberResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.InviteChatRoomMemberResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* InviteChatRoomMemberResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.InviteChatRoomMemberResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* InviteChatRoomMemberResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.InviteChatRoomMemberResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void InviteChatRoomMemberResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.InviteChatRoomMemberResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelPair::kLabelNameFieldNumber;
const int LabelPair::kLabelIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelPair::LabelPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.LabelPair)
}
LabelPair::LabelPair(const LabelPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_labelname()) {
    labelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.labelname_);
  }
  labelid_ = from.labelid_;
  // @@protoc_insertion_point(copy_constructor:micromsg.LabelPair)
}

void LabelPair::SharedCtor() {
  _cached_size_ = 0;
  labelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  labelid_ = 0u;
}

LabelPair::~LabelPair() {
  // @@protoc_insertion_point(destructor:micromsg.LabelPair)
  SharedDtor();
}

void LabelPair::SharedDtor() {
  labelname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LabelPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelPair::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LabelPair& LabelPair::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

LabelPair* LabelPair::New(::google::protobuf::Arena* arena) const {
  LabelPair* n = new LabelPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelPair::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.LabelPair)
  if (has_labelname()) {
    GOOGLE_DCHECK(!labelname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*labelname_.UnsafeRawStringPointer())->clear();
  }
  labelid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LabelPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.LabelPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string LabelName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_labelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labelname().data(), this->labelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.LabelPair.LabelName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 LabelID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_labelid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &labelid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.LabelPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.LabelPair)
  return false;
#undef DO_
}

void LabelPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.LabelPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string LabelName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labelname().data(), this->labelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LabelPair.LabelName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->labelname(), output);
  }

  // required uint32 LabelID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->labelid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.LabelPair)
}

::google::protobuf::uint8* LabelPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.LabelPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string LabelName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labelname().data(), this->labelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LabelPair.LabelName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->labelname(), target);
  }

  // required uint32 LabelID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->labelid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.LabelPair)
  return target;
}

size_t LabelPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.LabelPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 LabelID = 2;
  if (has_labelid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->labelid());
  }
  // optional string LabelName = 1;
  if (has_labelname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->labelname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.LabelPair)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.LabelPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.LabelPair)
    MergeFrom(*source);
  }
}

void LabelPair::MergeFrom(const LabelPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.LabelPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_labelname();
      labelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.labelname_);
    }
    if (cached_has_bits & 0x00000002u) {
      labelid_ = from.labelid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LabelPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.LabelPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelPair::CopyFrom(const LabelPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.LabelPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void LabelPair::Swap(LabelPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelPair::InternalSwap(LabelPair* other) {
  labelname_.Swap(&other->labelname_);
  std::swap(labelid_, other->labelid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelPair::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelPair

// optional string LabelName = 1;
bool LabelPair::has_labelname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LabelPair::set_has_labelname() {
  _has_bits_[0] |= 0x00000001u;
}
void LabelPair::clear_has_labelname() {
  _has_bits_[0] &= ~0x00000001u;
}
void LabelPair::clear_labelname() {
  labelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_labelname();
}
const ::std::string& LabelPair::labelname() const {
  // @@protoc_insertion_point(field_get:micromsg.LabelPair.LabelName)
  return labelname_.GetNoArena();
}
void LabelPair::set_labelname(const ::std::string& value) {
  set_has_labelname();
  labelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.LabelPair.LabelName)
}
#if LANG_CXX11
void LabelPair::set_labelname(::std::string&& value) {
  set_has_labelname();
  labelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.LabelPair.LabelName)
}
#endif
void LabelPair::set_labelname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_labelname();
  labelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.LabelPair.LabelName)
}
void LabelPair::set_labelname(const char* value, size_t size) {
  set_has_labelname();
  labelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.LabelPair.LabelName)
}
::std::string* LabelPair::mutable_labelname() {
  set_has_labelname();
  // @@protoc_insertion_point(field_mutable:micromsg.LabelPair.LabelName)
  return labelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LabelPair::release_labelname() {
  // @@protoc_insertion_point(field_release:micromsg.LabelPair.LabelName)
  clear_has_labelname();
  return labelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LabelPair::set_allocated_labelname(::std::string* labelname) {
  if (labelname != NULL) {
    set_has_labelname();
  } else {
    clear_has_labelname();
  }
  labelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), labelname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.LabelPair.LabelName)
}

// required uint32 LabelID = 2;
bool LabelPair::has_labelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LabelPair::set_has_labelid() {
  _has_bits_[0] |= 0x00000002u;
}
void LabelPair::clear_has_labelid() {
  _has_bits_[0] &= ~0x00000002u;
}
void LabelPair::clear_labelid() {
  labelid_ = 0u;
  clear_has_labelid();
}
::google::protobuf::uint32 LabelPair::labelid() const {
  // @@protoc_insertion_point(field_get:micromsg.LabelPair.LabelID)
  return labelid_;
}
void LabelPair::set_labelid(::google::protobuf::uint32 value) {
  set_has_labelid();
  labelid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.LabelPair.LabelID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddContactLabelRequest::kBaseRequestFieldNumber;
const int AddContactLabelRequest::kLabelCountFieldNumber;
const int AddContactLabelRequest::kLabelPairListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddContactLabelRequest::AddContactLabelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AddContactLabelRequest)
}
AddContactLabelRequest::AddContactLabelRequest(const AddContactLabelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      labelpairlist_(from.labelpairlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  labelcount_ = from.labelcount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.AddContactLabelRequest)
}

void AddContactLabelRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&labelcount_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(labelcount_));
}

AddContactLabelRequest::~AddContactLabelRequest() {
  // @@protoc_insertion_point(destructor:micromsg.AddContactLabelRequest)
  SharedDtor();
}

void AddContactLabelRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void AddContactLabelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddContactLabelRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddContactLabelRequest& AddContactLabelRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddContactLabelRequest* AddContactLabelRequest::New(::google::protobuf::Arena* arena) const {
  AddContactLabelRequest* n = new AddContactLabelRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddContactLabelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AddContactLabelRequest)
  labelpairlist_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  labelcount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddContactLabelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AddContactLabelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 LabelCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_labelcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &labelcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.LabelPair LabelPairList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labelpairlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AddContactLabelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AddContactLabelRequest)
  return false;
#undef DO_
}

void AddContactLabelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AddContactLabelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 LabelCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->labelcount(), output);
  }

  // repeated .micromsg.LabelPair LabelPairList = 3;
  for (unsigned int i = 0, n = this->labelpairlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->labelpairlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AddContactLabelRequest)
}

::google::protobuf::uint8* AddContactLabelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AddContactLabelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 LabelCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->labelcount(), target);
  }

  // repeated .micromsg.LabelPair LabelPairList = 3;
  for (unsigned int i = 0, n = this->labelpairlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->labelpairlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AddContactLabelRequest)
  return target;
}

size_t AddContactLabelRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.AddContactLabelRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_labelcount()) {
    // required uint32 LabelCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->labelcount());
  }

  return total_size;
}
size_t AddContactLabelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AddContactLabelRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 LabelCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->labelcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.LabelPair LabelPairList = 3;
  {
    unsigned int count = this->labelpairlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->labelpairlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddContactLabelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AddContactLabelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddContactLabelRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddContactLabelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AddContactLabelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AddContactLabelRequest)
    MergeFrom(*source);
  }
}

void AddContactLabelRequest::MergeFrom(const AddContactLabelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AddContactLabelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labelpairlist_.MergeFrom(from.labelpairlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      labelcount_ = from.labelcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddContactLabelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AddContactLabelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddContactLabelRequest::CopyFrom(const AddContactLabelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AddContactLabelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddContactLabelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->labelpairlist())) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void AddContactLabelRequest::Swap(AddContactLabelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddContactLabelRequest::InternalSwap(AddContactLabelRequest* other) {
  labelpairlist_.InternalSwap(&other->labelpairlist_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(labelcount_, other->labelcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddContactLabelRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddContactLabelRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool AddContactLabelRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddContactLabelRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void AddContactLabelRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddContactLabelRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& AddContactLabelRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.AddContactLabelRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* AddContactLabelRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddContactLabelRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* AddContactLabelRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.AddContactLabelRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void AddContactLabelRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddContactLabelRequest.BaseRequest)
}

// required uint32 LabelCount = 2;
bool AddContactLabelRequest::has_labelcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddContactLabelRequest::set_has_labelcount() {
  _has_bits_[0] |= 0x00000002u;
}
void AddContactLabelRequest::clear_has_labelcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddContactLabelRequest::clear_labelcount() {
  labelcount_ = 0u;
  clear_has_labelcount();
}
::google::protobuf::uint32 AddContactLabelRequest::labelcount() const {
  // @@protoc_insertion_point(field_get:micromsg.AddContactLabelRequest.LabelCount)
  return labelcount_;
}
void AddContactLabelRequest::set_labelcount(::google::protobuf::uint32 value) {
  set_has_labelcount();
  labelcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddContactLabelRequest.LabelCount)
}

// repeated .micromsg.LabelPair LabelPairList = 3;
int AddContactLabelRequest::labelpairlist_size() const {
  return labelpairlist_.size();
}
void AddContactLabelRequest::clear_labelpairlist() {
  labelpairlist_.Clear();
}
const ::micromsg::LabelPair& AddContactLabelRequest::labelpairlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.AddContactLabelRequest.LabelPairList)
  return labelpairlist_.Get(index);
}
::micromsg::LabelPair* AddContactLabelRequest::mutable_labelpairlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.AddContactLabelRequest.LabelPairList)
  return labelpairlist_.Mutable(index);
}
::micromsg::LabelPair* AddContactLabelRequest::add_labelpairlist() {
  // @@protoc_insertion_point(field_add:micromsg.AddContactLabelRequest.LabelPairList)
  return labelpairlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::LabelPair >*
AddContactLabelRequest::mutable_labelpairlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.AddContactLabelRequest.LabelPairList)
  return &labelpairlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::LabelPair >&
AddContactLabelRequest::labelpairlist() const {
  // @@protoc_insertion_point(field_list:micromsg.AddContactLabelRequest.LabelPairList)
  return labelpairlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddContactLabelResponse::kBaseResponseFieldNumber;
const int AddContactLabelResponse::kLabelCountFieldNumber;
const int AddContactLabelResponse::kLabelPairListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddContactLabelResponse::AddContactLabelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AddContactLabelResponse)
}
AddContactLabelResponse::AddContactLabelResponse(const AddContactLabelResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      labelpairlist_(from.labelpairlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  labelcount_ = from.labelcount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.AddContactLabelResponse)
}

void AddContactLabelResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&labelcount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(labelcount_));
}

AddContactLabelResponse::~AddContactLabelResponse() {
  // @@protoc_insertion_point(destructor:micromsg.AddContactLabelResponse)
  SharedDtor();
}

void AddContactLabelResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void AddContactLabelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddContactLabelResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddContactLabelResponse& AddContactLabelResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddContactLabelResponse* AddContactLabelResponse::New(::google::protobuf::Arena* arena) const {
  AddContactLabelResponse* n = new AddContactLabelResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddContactLabelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AddContactLabelResponse)
  labelpairlist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  labelcount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddContactLabelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AddContactLabelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 LabelCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_labelcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &labelcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.LabelPair LabelPairList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labelpairlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AddContactLabelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AddContactLabelResponse)
  return false;
#undef DO_
}

void AddContactLabelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AddContactLabelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 LabelCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->labelcount(), output);
  }

  // repeated .micromsg.LabelPair LabelPairList = 3;
  for (unsigned int i = 0, n = this->labelpairlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->labelpairlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AddContactLabelResponse)
}

::google::protobuf::uint8* AddContactLabelResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AddContactLabelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 LabelCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->labelcount(), target);
  }

  // repeated .micromsg.LabelPair LabelPairList = 3;
  for (unsigned int i = 0, n = this->labelpairlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->labelpairlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AddContactLabelResponse)
  return target;
}

size_t AddContactLabelResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.AddContactLabelResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_labelcount()) {
    // required uint32 LabelCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->labelcount());
  }

  return total_size;
}
size_t AddContactLabelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AddContactLabelResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 LabelCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->labelcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.LabelPair LabelPairList = 3;
  {
    unsigned int count = this->labelpairlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->labelpairlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddContactLabelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AddContactLabelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddContactLabelResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddContactLabelResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AddContactLabelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AddContactLabelResponse)
    MergeFrom(*source);
  }
}

void AddContactLabelResponse::MergeFrom(const AddContactLabelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AddContactLabelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labelpairlist_.MergeFrom(from.labelpairlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      labelcount_ = from.labelcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddContactLabelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AddContactLabelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddContactLabelResponse::CopyFrom(const AddContactLabelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AddContactLabelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddContactLabelResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->labelpairlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void AddContactLabelResponse::Swap(AddContactLabelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddContactLabelResponse::InternalSwap(AddContactLabelResponse* other) {
  labelpairlist_.InternalSwap(&other->labelpairlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(labelcount_, other->labelcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddContactLabelResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddContactLabelResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool AddContactLabelResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddContactLabelResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void AddContactLabelResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddContactLabelResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& AddContactLabelResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.AddContactLabelResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* AddContactLabelResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddContactLabelResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* AddContactLabelResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.AddContactLabelResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void AddContactLabelResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddContactLabelResponse.BaseResponse)
}

// required uint32 LabelCount = 2;
bool AddContactLabelResponse::has_labelcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddContactLabelResponse::set_has_labelcount() {
  _has_bits_[0] |= 0x00000002u;
}
void AddContactLabelResponse::clear_has_labelcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddContactLabelResponse::clear_labelcount() {
  labelcount_ = 0u;
  clear_has_labelcount();
}
::google::protobuf::uint32 AddContactLabelResponse::labelcount() const {
  // @@protoc_insertion_point(field_get:micromsg.AddContactLabelResponse.LabelCount)
  return labelcount_;
}
void AddContactLabelResponse::set_labelcount(::google::protobuf::uint32 value) {
  set_has_labelcount();
  labelcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddContactLabelResponse.LabelCount)
}

// repeated .micromsg.LabelPair LabelPairList = 3;
int AddContactLabelResponse::labelpairlist_size() const {
  return labelpairlist_.size();
}
void AddContactLabelResponse::clear_labelpairlist() {
  labelpairlist_.Clear();
}
const ::micromsg::LabelPair& AddContactLabelResponse::labelpairlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.AddContactLabelResponse.LabelPairList)
  return labelpairlist_.Get(index);
}
::micromsg::LabelPair* AddContactLabelResponse::mutable_labelpairlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.AddContactLabelResponse.LabelPairList)
  return labelpairlist_.Mutable(index);
}
::micromsg::LabelPair* AddContactLabelResponse::add_labelpairlist() {
  // @@protoc_insertion_point(field_add:micromsg.AddContactLabelResponse.LabelPairList)
  return labelpairlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::LabelPair >*
AddContactLabelResponse::mutable_labelpairlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.AddContactLabelResponse.LabelPairList)
  return &labelpairlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::LabelPair >&
AddContactLabelResponse::labelpairlist() const {
  // @@protoc_insertion_point(field_list:micromsg.AddContactLabelResponse.LabelPairList)
  return labelpairlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelContactLabelRequest::kBaseRequestFieldNumber;
const int DelContactLabelRequest::kLabelIDListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelContactLabelRequest::DelContactLabelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DelContactLabelRequest)
}
DelContactLabelRequest::DelContactLabelRequest(const DelContactLabelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labelidlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_labelidlist()) {
    labelidlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.labelidlist_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.DelContactLabelRequest)
}

void DelContactLabelRequest::SharedCtor() {
  _cached_size_ = 0;
  labelidlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

DelContactLabelRequest::~DelContactLabelRequest() {
  // @@protoc_insertion_point(destructor:micromsg.DelContactLabelRequest)
  SharedDtor();
}

void DelContactLabelRequest::SharedDtor() {
  labelidlist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void DelContactLabelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelContactLabelRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelContactLabelRequest& DelContactLabelRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelContactLabelRequest* DelContactLabelRequest::New(::google::protobuf::Arena* arena) const {
  DelContactLabelRequest* n = new DelContactLabelRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelContactLabelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DelContactLabelRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_labelidlist()) {
      GOOGLE_DCHECK(!labelidlist_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*labelidlist_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelContactLabelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DelContactLabelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string LabelIDList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_labelidlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labelidlist().data(), this->labelidlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.DelContactLabelRequest.LabelIDList");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DelContactLabelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DelContactLabelRequest)
  return false;
#undef DO_
}

void DelContactLabelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DelContactLabelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string LabelIDList = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labelidlist().data(), this->labelidlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DelContactLabelRequest.LabelIDList");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->labelidlist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DelContactLabelRequest)
}

::google::protobuf::uint8* DelContactLabelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DelContactLabelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string LabelIDList = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labelidlist().data(), this->labelidlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DelContactLabelRequest.LabelIDList");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->labelidlist(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DelContactLabelRequest)
  return target;
}

size_t DelContactLabelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DelContactLabelRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string LabelIDList = 2;
  if (has_labelidlist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->labelidlist());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelContactLabelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DelContactLabelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DelContactLabelRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelContactLabelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DelContactLabelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DelContactLabelRequest)
    MergeFrom(*source);
  }
}

void DelContactLabelRequest::MergeFrom(const DelContactLabelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DelContactLabelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_labelidlist();
      labelidlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.labelidlist_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void DelContactLabelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DelContactLabelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelContactLabelRequest::CopyFrom(const DelContactLabelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DelContactLabelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelContactLabelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void DelContactLabelRequest::Swap(DelContactLabelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelContactLabelRequest::InternalSwap(DelContactLabelRequest* other) {
  labelidlist_.Swap(&other->labelidlist_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelContactLabelRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelContactLabelRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool DelContactLabelRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DelContactLabelRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void DelContactLabelRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void DelContactLabelRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& DelContactLabelRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.DelContactLabelRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* DelContactLabelRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelContactLabelRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* DelContactLabelRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.DelContactLabelRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void DelContactLabelRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelContactLabelRequest.BaseRequest)
}

// optional string LabelIDList = 2;
bool DelContactLabelRequest::has_labelidlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelContactLabelRequest::set_has_labelidlist() {
  _has_bits_[0] |= 0x00000001u;
}
void DelContactLabelRequest::clear_has_labelidlist() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelContactLabelRequest::clear_labelidlist() {
  labelidlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_labelidlist();
}
const ::std::string& DelContactLabelRequest::labelidlist() const {
  // @@protoc_insertion_point(field_get:micromsg.DelContactLabelRequest.LabelIDList)
  return labelidlist_.GetNoArena();
}
void DelContactLabelRequest::set_labelidlist(const ::std::string& value) {
  set_has_labelidlist();
  labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DelContactLabelRequest.LabelIDList)
}
#if LANG_CXX11
void DelContactLabelRequest::set_labelidlist(::std::string&& value) {
  set_has_labelidlist();
  labelidlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DelContactLabelRequest.LabelIDList)
}
#endif
void DelContactLabelRequest::set_labelidlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_labelidlist();
  labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DelContactLabelRequest.LabelIDList)
}
void DelContactLabelRequest::set_labelidlist(const char* value, size_t size) {
  set_has_labelidlist();
  labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DelContactLabelRequest.LabelIDList)
}
::std::string* DelContactLabelRequest::mutable_labelidlist() {
  set_has_labelidlist();
  // @@protoc_insertion_point(field_mutable:micromsg.DelContactLabelRequest.LabelIDList)
  return labelidlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DelContactLabelRequest::release_labelidlist() {
  // @@protoc_insertion_point(field_release:micromsg.DelContactLabelRequest.LabelIDList)
  clear_has_labelidlist();
  return labelidlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DelContactLabelRequest::set_allocated_labelidlist(::std::string* labelidlist) {
  if (labelidlist != NULL) {
    set_has_labelidlist();
  } else {
    clear_has_labelidlist();
  }
  labelidlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), labelidlist);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelContactLabelRequest.LabelIDList)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelContactLabelResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelContactLabelResponse::DelContactLabelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DelContactLabelResponse)
}
DelContactLabelResponse::DelContactLabelResponse(const DelContactLabelResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.DelContactLabelResponse)
}

void DelContactLabelResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

DelContactLabelResponse::~DelContactLabelResponse() {
  // @@protoc_insertion_point(destructor:micromsg.DelContactLabelResponse)
  SharedDtor();
}

void DelContactLabelResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void DelContactLabelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelContactLabelResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelContactLabelResponse& DelContactLabelResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelContactLabelResponse* DelContactLabelResponse::New(::google::protobuf::Arena* arena) const {
  DelContactLabelResponse* n = new DelContactLabelResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelContactLabelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DelContactLabelResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelContactLabelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DelContactLabelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DelContactLabelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DelContactLabelResponse)
  return false;
#undef DO_
}

void DelContactLabelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DelContactLabelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DelContactLabelResponse)
}

::google::protobuf::uint8* DelContactLabelResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DelContactLabelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DelContactLabelResponse)
  return target;
}

size_t DelContactLabelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DelContactLabelResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelContactLabelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DelContactLabelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DelContactLabelResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelContactLabelResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DelContactLabelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DelContactLabelResponse)
    MergeFrom(*source);
  }
}

void DelContactLabelResponse::MergeFrom(const DelContactLabelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DelContactLabelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void DelContactLabelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DelContactLabelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelContactLabelResponse::CopyFrom(const DelContactLabelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DelContactLabelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelContactLabelResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void DelContactLabelResponse::Swap(DelContactLabelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelContactLabelResponse::InternalSwap(DelContactLabelResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelContactLabelResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelContactLabelResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool DelContactLabelResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelContactLabelResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void DelContactLabelResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelContactLabelResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& DelContactLabelResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.DelContactLabelResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* DelContactLabelResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelContactLabelResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* DelContactLabelResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.DelContactLabelResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void DelContactLabelResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelContactLabelResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateContactLabelRequest::kBaseRequestFieldNumber;
const int UpdateContactLabelRequest::kLabelPairFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateContactLabelRequest::UpdateContactLabelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UpdateContactLabelRequest)
}
UpdateContactLabelRequest::UpdateContactLabelRequest(const UpdateContactLabelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_labelpair()) {
    labelpair_ = new ::micromsg::LabelPair(*from.labelpair_);
  } else {
    labelpair_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.UpdateContactLabelRequest)
}

void UpdateContactLabelRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&labelpair_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(labelpair_));
}

UpdateContactLabelRequest::~UpdateContactLabelRequest() {
  // @@protoc_insertion_point(destructor:micromsg.UpdateContactLabelRequest)
  SharedDtor();
}

void UpdateContactLabelRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete labelpair_;
  }
}

void UpdateContactLabelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateContactLabelRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateContactLabelRequest& UpdateContactLabelRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateContactLabelRequest* UpdateContactLabelRequest::New(::google::protobuf::Arena* arena) const {
  UpdateContactLabelRequest* n = new UpdateContactLabelRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateContactLabelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UpdateContactLabelRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_labelpair()) {
      GOOGLE_DCHECK(labelpair_ != NULL);
      labelpair_->::micromsg::LabelPair::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateContactLabelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UpdateContactLabelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.LabelPair LabelPair = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_labelpair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UpdateContactLabelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UpdateContactLabelRequest)
  return false;
#undef DO_
}

void UpdateContactLabelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UpdateContactLabelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.LabelPair LabelPair = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->labelpair_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UpdateContactLabelRequest)
}

::google::protobuf::uint8* UpdateContactLabelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UpdateContactLabelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.LabelPair LabelPair = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->labelpair_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UpdateContactLabelRequest)
  return target;
}

size_t UpdateContactLabelRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.UpdateContactLabelRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_labelpair()) {
    // required .micromsg.LabelPair LabelPair = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->labelpair_);
  }

  return total_size;
}
size_t UpdateContactLabelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UpdateContactLabelRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.LabelPair LabelPair = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->labelpair_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateContactLabelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UpdateContactLabelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateContactLabelRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateContactLabelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UpdateContactLabelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UpdateContactLabelRequest)
    MergeFrom(*source);
  }
}

void UpdateContactLabelRequest::MergeFrom(const UpdateContactLabelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UpdateContactLabelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_labelpair()->::micromsg::LabelPair::MergeFrom(from.labelpair());
    }
  }
}

void UpdateContactLabelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UpdateContactLabelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateContactLabelRequest::CopyFrom(const UpdateContactLabelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UpdateContactLabelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateContactLabelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_labelpair()) {
    if (!this->labelpair_->IsInitialized()) return false;
  }
  return true;
}

void UpdateContactLabelRequest::Swap(UpdateContactLabelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateContactLabelRequest::InternalSwap(UpdateContactLabelRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(labelpair_, other->labelpair_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateContactLabelRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateContactLabelRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool UpdateContactLabelRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpdateContactLabelRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void UpdateContactLabelRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateContactLabelRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& UpdateContactLabelRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.UpdateContactLabelRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* UpdateContactLabelRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UpdateContactLabelRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* UpdateContactLabelRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.UpdateContactLabelRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void UpdateContactLabelRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UpdateContactLabelRequest.BaseRequest)
}

// required .micromsg.LabelPair LabelPair = 2;
bool UpdateContactLabelRequest::has_labelpair() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UpdateContactLabelRequest::set_has_labelpair() {
  _has_bits_[0] |= 0x00000002u;
}
void UpdateContactLabelRequest::clear_has_labelpair() {
  _has_bits_[0] &= ~0x00000002u;
}
void UpdateContactLabelRequest::clear_labelpair() {
  if (labelpair_ != NULL) labelpair_->::micromsg::LabelPair::Clear();
  clear_has_labelpair();
}
const ::micromsg::LabelPair& UpdateContactLabelRequest::labelpair() const {
  // @@protoc_insertion_point(field_get:micromsg.UpdateContactLabelRequest.LabelPair)
  return labelpair_ != NULL ? *labelpair_
                         : *::micromsg::LabelPair::internal_default_instance();
}
::micromsg::LabelPair* UpdateContactLabelRequest::mutable_labelpair() {
  set_has_labelpair();
  if (labelpair_ == NULL) {
    labelpair_ = new ::micromsg::LabelPair;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UpdateContactLabelRequest.LabelPair)
  return labelpair_;
}
::micromsg::LabelPair* UpdateContactLabelRequest::release_labelpair() {
  // @@protoc_insertion_point(field_release:micromsg.UpdateContactLabelRequest.LabelPair)
  clear_has_labelpair();
  ::micromsg::LabelPair* temp = labelpair_;
  labelpair_ = NULL;
  return temp;
}
void UpdateContactLabelRequest::set_allocated_labelpair(::micromsg::LabelPair* labelpair) {
  delete labelpair_;
  labelpair_ = labelpair;
  if (labelpair) {
    set_has_labelpair();
  } else {
    clear_has_labelpair();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UpdateContactLabelRequest.LabelPair)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateContactLabelResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateContactLabelResponse::UpdateContactLabelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UpdateContactLabelResponse)
}
UpdateContactLabelResponse::UpdateContactLabelResponse(const UpdateContactLabelResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.UpdateContactLabelResponse)
}

void UpdateContactLabelResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

UpdateContactLabelResponse::~UpdateContactLabelResponse() {
  // @@protoc_insertion_point(destructor:micromsg.UpdateContactLabelResponse)
  SharedDtor();
}

void UpdateContactLabelResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void UpdateContactLabelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateContactLabelResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateContactLabelResponse& UpdateContactLabelResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateContactLabelResponse* UpdateContactLabelResponse::New(::google::protobuf::Arena* arena) const {
  UpdateContactLabelResponse* n = new UpdateContactLabelResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateContactLabelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UpdateContactLabelResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateContactLabelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UpdateContactLabelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UpdateContactLabelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UpdateContactLabelResponse)
  return false;
#undef DO_
}

void UpdateContactLabelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UpdateContactLabelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UpdateContactLabelResponse)
}

::google::protobuf::uint8* UpdateContactLabelResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UpdateContactLabelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UpdateContactLabelResponse)
  return target;
}

size_t UpdateContactLabelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UpdateContactLabelResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateContactLabelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UpdateContactLabelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateContactLabelResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateContactLabelResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UpdateContactLabelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UpdateContactLabelResponse)
    MergeFrom(*source);
  }
}

void UpdateContactLabelResponse::MergeFrom(const UpdateContactLabelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UpdateContactLabelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void UpdateContactLabelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UpdateContactLabelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateContactLabelResponse::CopyFrom(const UpdateContactLabelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UpdateContactLabelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateContactLabelResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void UpdateContactLabelResponse::Swap(UpdateContactLabelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateContactLabelResponse::InternalSwap(UpdateContactLabelResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateContactLabelResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateContactLabelResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool UpdateContactLabelResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpdateContactLabelResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void UpdateContactLabelResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateContactLabelResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& UpdateContactLabelResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UpdateContactLabelResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* UpdateContactLabelResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UpdateContactLabelResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* UpdateContactLabelResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UpdateContactLabelResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void UpdateContactLabelResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UpdateContactLabelResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetContactLabelListRequest::kBaseRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetContactLabelListRequest::GetContactLabelListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetContactLabelListRequest)
}
GetContactLabelListRequest::GetContactLabelListRequest(const GetContactLabelListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetContactLabelListRequest)
}

void GetContactLabelListRequest::SharedCtor() {
  _cached_size_ = 0;
  baserequest_ = NULL;
}

GetContactLabelListRequest::~GetContactLabelListRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetContactLabelListRequest)
  SharedDtor();
}

void GetContactLabelListRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetContactLabelListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetContactLabelListRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetContactLabelListRequest& GetContactLabelListRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetContactLabelListRequest* GetContactLabelListRequest::New(::google::protobuf::Arena* arena) const {
  GetContactLabelListRequest* n = new GetContactLabelListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetContactLabelListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetContactLabelListRequest)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetContactLabelListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetContactLabelListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetContactLabelListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetContactLabelListRequest)
  return false;
#undef DO_
}

void GetContactLabelListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetContactLabelListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetContactLabelListRequest)
}

::google::protobuf::uint8* GetContactLabelListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetContactLabelListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetContactLabelListRequest)
  return target;
}

size_t GetContactLabelListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetContactLabelListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetContactLabelListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetContactLabelListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetContactLabelListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetContactLabelListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetContactLabelListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetContactLabelListRequest)
    MergeFrom(*source);
  }
}

void GetContactLabelListRequest::MergeFrom(const GetContactLabelListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetContactLabelListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baserequest()) {
    mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
  }
}

void GetContactLabelListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetContactLabelListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContactLabelListRequest::CopyFrom(const GetContactLabelListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetContactLabelListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContactLabelListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetContactLabelListRequest::Swap(GetContactLabelListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetContactLabelListRequest::InternalSwap(GetContactLabelListRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetContactLabelListRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetContactLabelListRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetContactLabelListRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetContactLabelListRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void GetContactLabelListRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetContactLabelListRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetContactLabelListRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactLabelListRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetContactLabelListRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetContactLabelListRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetContactLabelListRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetContactLabelListRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetContactLabelListRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetContactLabelListRequest.BaseRequest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetContactLabelListResponse::kBaseResponseFieldNumber;
const int GetContactLabelListResponse::kLabelCountFieldNumber;
const int GetContactLabelListResponse::kLabelPairListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetContactLabelListResponse::GetContactLabelListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetContactLabelListResponse)
}
GetContactLabelListResponse::GetContactLabelListResponse(const GetContactLabelListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      labelpairlist_(from.labelpairlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  labelcount_ = from.labelcount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetContactLabelListResponse)
}

void GetContactLabelListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&labelcount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(labelcount_));
}

GetContactLabelListResponse::~GetContactLabelListResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetContactLabelListResponse)
  SharedDtor();
}

void GetContactLabelListResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetContactLabelListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetContactLabelListResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetContactLabelListResponse& GetContactLabelListResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetContactLabelListResponse* GetContactLabelListResponse::New(::google::protobuf::Arena* arena) const {
  GetContactLabelListResponse* n = new GetContactLabelListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetContactLabelListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetContactLabelListResponse)
  labelpairlist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  labelcount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetContactLabelListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetContactLabelListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 LabelCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_labelcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &labelcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.LabelPair LabelPairList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labelpairlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetContactLabelListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetContactLabelListResponse)
  return false;
#undef DO_
}

void GetContactLabelListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetContactLabelListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 LabelCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->labelcount(), output);
  }

  // repeated .micromsg.LabelPair LabelPairList = 3;
  for (unsigned int i = 0, n = this->labelpairlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->labelpairlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetContactLabelListResponse)
}

::google::protobuf::uint8* GetContactLabelListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetContactLabelListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 LabelCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->labelcount(), target);
  }

  // repeated .micromsg.LabelPair LabelPairList = 3;
  for (unsigned int i = 0, n = this->labelpairlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->labelpairlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetContactLabelListResponse)
  return target;
}

size_t GetContactLabelListResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetContactLabelListResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_labelcount()) {
    // required uint32 LabelCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->labelcount());
  }

  return total_size;
}
size_t GetContactLabelListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetContactLabelListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 LabelCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->labelcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.LabelPair LabelPairList = 3;
  {
    unsigned int count = this->labelpairlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->labelpairlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetContactLabelListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetContactLabelListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetContactLabelListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetContactLabelListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetContactLabelListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetContactLabelListResponse)
    MergeFrom(*source);
  }
}

void GetContactLabelListResponse::MergeFrom(const GetContactLabelListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetContactLabelListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labelpairlist_.MergeFrom(from.labelpairlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      labelcount_ = from.labelcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetContactLabelListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetContactLabelListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContactLabelListResponse::CopyFrom(const GetContactLabelListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetContactLabelListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContactLabelListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->labelpairlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetContactLabelListResponse::Swap(GetContactLabelListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetContactLabelListResponse::InternalSwap(GetContactLabelListResponse* other) {
  labelpairlist_.InternalSwap(&other->labelpairlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(labelcount_, other->labelcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetContactLabelListResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetContactLabelListResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetContactLabelListResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetContactLabelListResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetContactLabelListResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetContactLabelListResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetContactLabelListResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactLabelListResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetContactLabelListResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetContactLabelListResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetContactLabelListResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetContactLabelListResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetContactLabelListResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetContactLabelListResponse.BaseResponse)
}

// required uint32 LabelCount = 2;
bool GetContactLabelListResponse::has_labelcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetContactLabelListResponse::set_has_labelcount() {
  _has_bits_[0] |= 0x00000002u;
}
void GetContactLabelListResponse::clear_has_labelcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetContactLabelListResponse::clear_labelcount() {
  labelcount_ = 0u;
  clear_has_labelcount();
}
::google::protobuf::uint32 GetContactLabelListResponse::labelcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactLabelListResponse.LabelCount)
  return labelcount_;
}
void GetContactLabelListResponse::set_labelcount(::google::protobuf::uint32 value) {
  set_has_labelcount();
  labelcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetContactLabelListResponse.LabelCount)
}

// repeated .micromsg.LabelPair LabelPairList = 3;
int GetContactLabelListResponse::labelpairlist_size() const {
  return labelpairlist_.size();
}
void GetContactLabelListResponse::clear_labelpairlist() {
  labelpairlist_.Clear();
}
const ::micromsg::LabelPair& GetContactLabelListResponse::labelpairlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactLabelListResponse.LabelPairList)
  return labelpairlist_.Get(index);
}
::micromsg::LabelPair* GetContactLabelListResponse::mutable_labelpairlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetContactLabelListResponse.LabelPairList)
  return labelpairlist_.Mutable(index);
}
::micromsg::LabelPair* GetContactLabelListResponse::add_labelpairlist() {
  // @@protoc_insertion_point(field_add:micromsg.GetContactLabelListResponse.LabelPairList)
  return labelpairlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::LabelPair >*
GetContactLabelListResponse::mutable_labelpairlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetContactLabelListResponse.LabelPairList)
  return &labelpairlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::LabelPair >&
GetContactLabelListResponse::labelpairlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GetContactLabelListResponse.LabelPairList)
  return labelpairlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserLabelInfo::kUserNameFieldNumber;
const int UserLabelInfo::kLabelIDListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserLabelInfo::UserLabelInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UserLabelInfo)
}
UserLabelInfo::UserLabelInfo(const UserLabelInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  labelidlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_labelidlist()) {
    labelidlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.labelidlist_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.UserLabelInfo)
}

void UserLabelInfo::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  labelidlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserLabelInfo::~UserLabelInfo() {
  // @@protoc_insertion_point(destructor:micromsg.UserLabelInfo)
  SharedDtor();
}

void UserLabelInfo::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  labelidlist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserLabelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLabelInfo::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserLabelInfo& UserLabelInfo::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserLabelInfo* UserLabelInfo::New(::google::protobuf::Arena* arena) const {
  UserLabelInfo* n = new UserLabelInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserLabelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UserLabelInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_labelidlist()) {
      GOOGLE_DCHECK(!labelidlist_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*labelidlist_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserLabelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UserLabelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UserLabelInfo.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string LabelIDList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_labelidlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labelidlist().data(), this->labelidlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UserLabelInfo.LabelIDList");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UserLabelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UserLabelInfo)
  return false;
#undef DO_
}

void UserLabelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UserLabelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserLabelInfo.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string LabelIDList = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labelidlist().data(), this->labelidlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserLabelInfo.LabelIDList");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->labelidlist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UserLabelInfo)
}

::google::protobuf::uint8* UserLabelInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UserLabelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserLabelInfo.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string LabelIDList = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labelidlist().data(), this->labelidlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserLabelInfo.LabelIDList");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->labelidlist(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UserLabelInfo)
  return target;
}

size_t UserLabelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UserLabelInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string UserName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string LabelIDList = 2;
    if (has_labelidlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->labelidlist());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLabelInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UserLabelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserLabelInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserLabelInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UserLabelInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UserLabelInfo)
    MergeFrom(*source);
  }
}

void UserLabelInfo::MergeFrom(const UserLabelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UserLabelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_labelidlist();
      labelidlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.labelidlist_);
    }
  }
}

void UserLabelInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UserLabelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLabelInfo::CopyFrom(const UserLabelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UserLabelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLabelInfo::IsInitialized() const {
  return true;
}

void UserLabelInfo::Swap(UserLabelInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserLabelInfo::InternalSwap(UserLabelInfo* other) {
  username_.Swap(&other->username_);
  labelidlist_.Swap(&other->labelidlist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserLabelInfo::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserLabelInfo

// optional string UserName = 1;
bool UserLabelInfo::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserLabelInfo::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void UserLabelInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserLabelInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& UserLabelInfo::username() const {
  // @@protoc_insertion_point(field_get:micromsg.UserLabelInfo.UserName)
  return username_.GetNoArena();
}
void UserLabelInfo::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserLabelInfo.UserName)
}
#if LANG_CXX11
void UserLabelInfo::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserLabelInfo.UserName)
}
#endif
void UserLabelInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserLabelInfo.UserName)
}
void UserLabelInfo::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserLabelInfo.UserName)
}
::std::string* UserLabelInfo::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.UserLabelInfo.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserLabelInfo::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.UserLabelInfo.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserLabelInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserLabelInfo.UserName)
}

// optional string LabelIDList = 2;
bool UserLabelInfo::has_labelidlist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserLabelInfo::set_has_labelidlist() {
  _has_bits_[0] |= 0x00000002u;
}
void UserLabelInfo::clear_has_labelidlist() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserLabelInfo::clear_labelidlist() {
  labelidlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_labelidlist();
}
const ::std::string& UserLabelInfo::labelidlist() const {
  // @@protoc_insertion_point(field_get:micromsg.UserLabelInfo.LabelIDList)
  return labelidlist_.GetNoArena();
}
void UserLabelInfo::set_labelidlist(const ::std::string& value) {
  set_has_labelidlist();
  labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserLabelInfo.LabelIDList)
}
#if LANG_CXX11
void UserLabelInfo::set_labelidlist(::std::string&& value) {
  set_has_labelidlist();
  labelidlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserLabelInfo.LabelIDList)
}
#endif
void UserLabelInfo::set_labelidlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_labelidlist();
  labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserLabelInfo.LabelIDList)
}
void UserLabelInfo::set_labelidlist(const char* value, size_t size) {
  set_has_labelidlist();
  labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserLabelInfo.LabelIDList)
}
::std::string* UserLabelInfo::mutable_labelidlist() {
  set_has_labelidlist();
  // @@protoc_insertion_point(field_mutable:micromsg.UserLabelInfo.LabelIDList)
  return labelidlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserLabelInfo::release_labelidlist() {
  // @@protoc_insertion_point(field_release:micromsg.UserLabelInfo.LabelIDList)
  clear_has_labelidlist();
  return labelidlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserLabelInfo::set_allocated_labelidlist(::std::string* labelidlist) {
  if (labelidlist != NULL) {
    set_has_labelidlist();
  } else {
    clear_has_labelidlist();
  }
  labelidlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), labelidlist);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserLabelInfo.LabelIDList)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifyContactLabelListRequest::kBaseRequestFieldNumber;
const int ModifyContactLabelListRequest::kUserCountFieldNumber;
const int ModifyContactLabelListRequest::kUserLabelInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifyContactLabelListRequest::ModifyContactLabelListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModifyContactLabelListRequest)
}
ModifyContactLabelListRequest::ModifyContactLabelListRequest(const ModifyContactLabelListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      userlabelinfolist_(from.userlabelinfolist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  usercount_ = from.usercount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.ModifyContactLabelListRequest)
}

void ModifyContactLabelListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&usercount_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(usercount_));
}

ModifyContactLabelListRequest::~ModifyContactLabelListRequest() {
  // @@protoc_insertion_point(destructor:micromsg.ModifyContactLabelListRequest)
  SharedDtor();
}

void ModifyContactLabelListRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void ModifyContactLabelListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyContactLabelListRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModifyContactLabelListRequest& ModifyContactLabelListRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModifyContactLabelListRequest* ModifyContactLabelListRequest::New(::google::protobuf::Arena* arena) const {
  ModifyContactLabelListRequest* n = new ModifyContactLabelListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModifyContactLabelListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModifyContactLabelListRequest)
  userlabelinfolist_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  usercount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModifyContactLabelListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModifyContactLabelListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 UserCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_usercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.UserLabelInfo UserLabelInfoList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userlabelinfolist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModifyContactLabelListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModifyContactLabelListRequest)
  return false;
#undef DO_
}

void ModifyContactLabelListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModifyContactLabelListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 UserCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usercount(), output);
  }

  // repeated .micromsg.UserLabelInfo UserLabelInfoList = 3;
  for (unsigned int i = 0, n = this->userlabelinfolist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userlabelinfolist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModifyContactLabelListRequest)
}

::google::protobuf::uint8* ModifyContactLabelListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModifyContactLabelListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 UserCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usercount(), target);
  }

  // repeated .micromsg.UserLabelInfo UserLabelInfoList = 3;
  for (unsigned int i = 0, n = this->userlabelinfolist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->userlabelinfolist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModifyContactLabelListRequest)
  return target;
}

size_t ModifyContactLabelListRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ModifyContactLabelListRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_usercount()) {
    // required uint32 UserCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->usercount());
  }

  return total_size;
}
size_t ModifyContactLabelListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModifyContactLabelListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 UserCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->usercount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.UserLabelInfo UserLabelInfoList = 3;
  {
    unsigned int count = this->userlabelinfolist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userlabelinfolist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyContactLabelListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModifyContactLabelListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyContactLabelListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModifyContactLabelListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModifyContactLabelListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModifyContactLabelListRequest)
    MergeFrom(*source);
  }
}

void ModifyContactLabelListRequest::MergeFrom(const ModifyContactLabelListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModifyContactLabelListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  userlabelinfolist_.MergeFrom(from.userlabelinfolist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      usercount_ = from.usercount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModifyContactLabelListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModifyContactLabelListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyContactLabelListRequest::CopyFrom(const ModifyContactLabelListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModifyContactLabelListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyContactLabelListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void ModifyContactLabelListRequest::Swap(ModifyContactLabelListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModifyContactLabelListRequest::InternalSwap(ModifyContactLabelListRequest* other) {
  userlabelinfolist_.InternalSwap(&other->userlabelinfolist_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(usercount_, other->usercount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModifyContactLabelListRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModifyContactLabelListRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool ModifyContactLabelListRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModifyContactLabelListRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void ModifyContactLabelListRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModifyContactLabelListRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& ModifyContactLabelListRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ModifyContactLabelListRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* ModifyContactLabelListRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModifyContactLabelListRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* ModifyContactLabelListRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ModifyContactLabelListRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void ModifyContactLabelListRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModifyContactLabelListRequest.BaseRequest)
}

// required uint32 UserCount = 2;
bool ModifyContactLabelListRequest::has_usercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModifyContactLabelListRequest::set_has_usercount() {
  _has_bits_[0] |= 0x00000002u;
}
void ModifyContactLabelListRequest::clear_has_usercount() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModifyContactLabelListRequest::clear_usercount() {
  usercount_ = 0u;
  clear_has_usercount();
}
::google::protobuf::uint32 ModifyContactLabelListRequest::usercount() const {
  // @@protoc_insertion_point(field_get:micromsg.ModifyContactLabelListRequest.UserCount)
  return usercount_;
}
void ModifyContactLabelListRequest::set_usercount(::google::protobuf::uint32 value) {
  set_has_usercount();
  usercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModifyContactLabelListRequest.UserCount)
}

// repeated .micromsg.UserLabelInfo UserLabelInfoList = 3;
int ModifyContactLabelListRequest::userlabelinfolist_size() const {
  return userlabelinfolist_.size();
}
void ModifyContactLabelListRequest::clear_userlabelinfolist() {
  userlabelinfolist_.Clear();
}
const ::micromsg::UserLabelInfo& ModifyContactLabelListRequest::userlabelinfolist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ModifyContactLabelListRequest.UserLabelInfoList)
  return userlabelinfolist_.Get(index);
}
::micromsg::UserLabelInfo* ModifyContactLabelListRequest::mutable_userlabelinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.ModifyContactLabelListRequest.UserLabelInfoList)
  return userlabelinfolist_.Mutable(index);
}
::micromsg::UserLabelInfo* ModifyContactLabelListRequest::add_userlabelinfolist() {
  // @@protoc_insertion_point(field_add:micromsg.ModifyContactLabelListRequest.UserLabelInfoList)
  return userlabelinfolist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::UserLabelInfo >*
ModifyContactLabelListRequest::mutable_userlabelinfolist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ModifyContactLabelListRequest.UserLabelInfoList)
  return &userlabelinfolist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::UserLabelInfo >&
ModifyContactLabelListRequest::userlabelinfolist() const {
  // @@protoc_insertion_point(field_list:micromsg.ModifyContactLabelListRequest.UserLabelInfoList)
  return userlabelinfolist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifyContactLabelListResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifyContactLabelListResponse::ModifyContactLabelListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModifyContactLabelListResponse)
}
ModifyContactLabelListResponse::ModifyContactLabelListResponse(const ModifyContactLabelListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.ModifyContactLabelListResponse)
}

void ModifyContactLabelListResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

ModifyContactLabelListResponse::~ModifyContactLabelListResponse() {
  // @@protoc_insertion_point(destructor:micromsg.ModifyContactLabelListResponse)
  SharedDtor();
}

void ModifyContactLabelListResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void ModifyContactLabelListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyContactLabelListResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModifyContactLabelListResponse& ModifyContactLabelListResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModifyContactLabelListResponse* ModifyContactLabelListResponse::New(::google::protobuf::Arena* arena) const {
  ModifyContactLabelListResponse* n = new ModifyContactLabelListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModifyContactLabelListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModifyContactLabelListResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModifyContactLabelListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModifyContactLabelListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModifyContactLabelListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModifyContactLabelListResponse)
  return false;
#undef DO_
}

void ModifyContactLabelListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModifyContactLabelListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModifyContactLabelListResponse)
}

::google::protobuf::uint8* ModifyContactLabelListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModifyContactLabelListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModifyContactLabelListResponse)
  return target;
}

size_t ModifyContactLabelListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModifyContactLabelListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyContactLabelListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModifyContactLabelListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyContactLabelListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModifyContactLabelListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModifyContactLabelListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModifyContactLabelListResponse)
    MergeFrom(*source);
  }
}

void ModifyContactLabelListResponse::MergeFrom(const ModifyContactLabelListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModifyContactLabelListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void ModifyContactLabelListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModifyContactLabelListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyContactLabelListResponse::CopyFrom(const ModifyContactLabelListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModifyContactLabelListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyContactLabelListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void ModifyContactLabelListResponse::Swap(ModifyContactLabelListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModifyContactLabelListResponse::InternalSwap(ModifyContactLabelListResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModifyContactLabelListResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModifyContactLabelListResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool ModifyContactLabelListResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModifyContactLabelListResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void ModifyContactLabelListResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModifyContactLabelListResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& ModifyContactLabelListResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ModifyContactLabelListResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* ModifyContactLabelListResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModifyContactLabelListResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* ModifyContactLabelListResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ModifyContactLabelListResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void ModifyContactLabelListResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModifyContactLabelListResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferChatRoomOwnerRequest::kBaseRequestFieldNumber;
const int TransferChatRoomOwnerRequest::kChatRoomNameFieldNumber;
const int TransferChatRoomOwnerRequest::kNewOwnerUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferChatRoomOwnerRequest::TransferChatRoomOwnerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.TransferChatRoomOwnerRequest)
}
TransferChatRoomOwnerRequest::TransferChatRoomOwnerRequest(const TransferChatRoomOwnerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomname()) {
    chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
  }
  newownerusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_newownerusername()) {
    newownerusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newownerusername_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.TransferChatRoomOwnerRequest)
}

void TransferChatRoomOwnerRequest::SharedCtor() {
  _cached_size_ = 0;
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newownerusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

TransferChatRoomOwnerRequest::~TransferChatRoomOwnerRequest() {
  // @@protoc_insertion_point(destructor:micromsg.TransferChatRoomOwnerRequest)
  SharedDtor();
}

void TransferChatRoomOwnerRequest::SharedDtor() {
  chatroomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newownerusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void TransferChatRoomOwnerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferChatRoomOwnerRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransferChatRoomOwnerRequest& TransferChatRoomOwnerRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransferChatRoomOwnerRequest* TransferChatRoomOwnerRequest::New(::google::protobuf::Arena* arena) const {
  TransferChatRoomOwnerRequest* n = new TransferChatRoomOwnerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferChatRoomOwnerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.TransferChatRoomOwnerRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_chatroomname()) {
      GOOGLE_DCHECK(!chatroomname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomname_.UnsafeRawStringPointer())->clear();
    }
    if (has_newownerusername()) {
      GOOGLE_DCHECK(!newownerusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*newownerusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransferChatRoomOwnerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.TransferChatRoomOwnerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ChatRoomName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomname().data(), this->chatroomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.TransferChatRoomOwnerRequest.ChatRoomName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string NewOwnerUserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newownerusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newownerusername().data(), this->newownerusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.TransferChatRoomOwnerRequest.NewOwnerUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.TransferChatRoomOwnerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.TransferChatRoomOwnerRequest)
  return false;
#undef DO_
}

void TransferChatRoomOwnerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.TransferChatRoomOwnerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.TransferChatRoomOwnerRequest.ChatRoomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chatroomname(), output);
  }

  // optional string NewOwnerUserName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newownerusername().data(), this->newownerusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.TransferChatRoomOwnerRequest.NewOwnerUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->newownerusername(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.TransferChatRoomOwnerRequest)
}

::google::protobuf::uint8* TransferChatRoomOwnerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.TransferChatRoomOwnerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.TransferChatRoomOwnerRequest.ChatRoomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatroomname(), target);
  }

  // optional string NewOwnerUserName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newownerusername().data(), this->newownerusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.TransferChatRoomOwnerRequest.NewOwnerUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->newownerusername(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.TransferChatRoomOwnerRequest)
  return target;
}

size_t TransferChatRoomOwnerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.TransferChatRoomOwnerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ChatRoomName = 2;
    if (has_chatroomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatroomname());
    }

    // optional string NewOwnerUserName = 3;
    if (has_newownerusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newownerusername());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferChatRoomOwnerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.TransferChatRoomOwnerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferChatRoomOwnerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferChatRoomOwnerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.TransferChatRoomOwnerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.TransferChatRoomOwnerRequest)
    MergeFrom(*source);
  }
}

void TransferChatRoomOwnerRequest::MergeFrom(const TransferChatRoomOwnerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.TransferChatRoomOwnerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chatroomname();
      chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_newownerusername();
      newownerusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newownerusername_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void TransferChatRoomOwnerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.TransferChatRoomOwnerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferChatRoomOwnerRequest::CopyFrom(const TransferChatRoomOwnerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.TransferChatRoomOwnerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferChatRoomOwnerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void TransferChatRoomOwnerRequest::Swap(TransferChatRoomOwnerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferChatRoomOwnerRequest::InternalSwap(TransferChatRoomOwnerRequest* other) {
  chatroomname_.Swap(&other->chatroomname_);
  newownerusername_.Swap(&other->newownerusername_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferChatRoomOwnerRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferChatRoomOwnerRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool TransferChatRoomOwnerRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransferChatRoomOwnerRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void TransferChatRoomOwnerRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransferChatRoomOwnerRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& TransferChatRoomOwnerRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.TransferChatRoomOwnerRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* TransferChatRoomOwnerRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TransferChatRoomOwnerRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* TransferChatRoomOwnerRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.TransferChatRoomOwnerRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void TransferChatRoomOwnerRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TransferChatRoomOwnerRequest.BaseRequest)
}

// optional string ChatRoomName = 2;
bool TransferChatRoomOwnerRequest::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransferChatRoomOwnerRequest::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
void TransferChatRoomOwnerRequest::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransferChatRoomOwnerRequest::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
const ::std::string& TransferChatRoomOwnerRequest::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.TransferChatRoomOwnerRequest.ChatRoomName)
  return chatroomname_.GetNoArena();
}
void TransferChatRoomOwnerRequest::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.TransferChatRoomOwnerRequest.ChatRoomName)
}
#if LANG_CXX11
void TransferChatRoomOwnerRequest::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.TransferChatRoomOwnerRequest.ChatRoomName)
}
#endif
void TransferChatRoomOwnerRequest::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.TransferChatRoomOwnerRequest.ChatRoomName)
}
void TransferChatRoomOwnerRequest::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.TransferChatRoomOwnerRequest.ChatRoomName)
}
::std::string* TransferChatRoomOwnerRequest::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.TransferChatRoomOwnerRequest.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransferChatRoomOwnerRequest::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.TransferChatRoomOwnerRequest.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransferChatRoomOwnerRequest::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.TransferChatRoomOwnerRequest.ChatRoomName)
}

// optional string NewOwnerUserName = 3;
bool TransferChatRoomOwnerRequest::has_newownerusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransferChatRoomOwnerRequest::set_has_newownerusername() {
  _has_bits_[0] |= 0x00000002u;
}
void TransferChatRoomOwnerRequest::clear_has_newownerusername() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransferChatRoomOwnerRequest::clear_newownerusername() {
  newownerusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_newownerusername();
}
const ::std::string& TransferChatRoomOwnerRequest::newownerusername() const {
  // @@protoc_insertion_point(field_get:micromsg.TransferChatRoomOwnerRequest.NewOwnerUserName)
  return newownerusername_.GetNoArena();
}
void TransferChatRoomOwnerRequest::set_newownerusername(const ::std::string& value) {
  set_has_newownerusername();
  newownerusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.TransferChatRoomOwnerRequest.NewOwnerUserName)
}
#if LANG_CXX11
void TransferChatRoomOwnerRequest::set_newownerusername(::std::string&& value) {
  set_has_newownerusername();
  newownerusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.TransferChatRoomOwnerRequest.NewOwnerUserName)
}
#endif
void TransferChatRoomOwnerRequest::set_newownerusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_newownerusername();
  newownerusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.TransferChatRoomOwnerRequest.NewOwnerUserName)
}
void TransferChatRoomOwnerRequest::set_newownerusername(const char* value, size_t size) {
  set_has_newownerusername();
  newownerusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.TransferChatRoomOwnerRequest.NewOwnerUserName)
}
::std::string* TransferChatRoomOwnerRequest::mutable_newownerusername() {
  set_has_newownerusername();
  // @@protoc_insertion_point(field_mutable:micromsg.TransferChatRoomOwnerRequest.NewOwnerUserName)
  return newownerusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransferChatRoomOwnerRequest::release_newownerusername() {
  // @@protoc_insertion_point(field_release:micromsg.TransferChatRoomOwnerRequest.NewOwnerUserName)
  clear_has_newownerusername();
  return newownerusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransferChatRoomOwnerRequest::set_allocated_newownerusername(::std::string* newownerusername) {
  if (newownerusername != NULL) {
    set_has_newownerusername();
  } else {
    clear_has_newownerusername();
  }
  newownerusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), newownerusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.TransferChatRoomOwnerRequest.NewOwnerUserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferChatRoomOwnerResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferChatRoomOwnerResponse::TransferChatRoomOwnerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.TransferChatRoomOwnerResponse)
}
TransferChatRoomOwnerResponse::TransferChatRoomOwnerResponse(const TransferChatRoomOwnerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.TransferChatRoomOwnerResponse)
}

void TransferChatRoomOwnerResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

TransferChatRoomOwnerResponse::~TransferChatRoomOwnerResponse() {
  // @@protoc_insertion_point(destructor:micromsg.TransferChatRoomOwnerResponse)
  SharedDtor();
}

void TransferChatRoomOwnerResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void TransferChatRoomOwnerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferChatRoomOwnerResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransferChatRoomOwnerResponse& TransferChatRoomOwnerResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransferChatRoomOwnerResponse* TransferChatRoomOwnerResponse::New(::google::protobuf::Arena* arena) const {
  TransferChatRoomOwnerResponse* n = new TransferChatRoomOwnerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferChatRoomOwnerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.TransferChatRoomOwnerResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransferChatRoomOwnerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.TransferChatRoomOwnerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.TransferChatRoomOwnerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.TransferChatRoomOwnerResponse)
  return false;
#undef DO_
}

void TransferChatRoomOwnerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.TransferChatRoomOwnerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.TransferChatRoomOwnerResponse)
}

::google::protobuf::uint8* TransferChatRoomOwnerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.TransferChatRoomOwnerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.TransferChatRoomOwnerResponse)
  return target;
}

size_t TransferChatRoomOwnerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.TransferChatRoomOwnerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferChatRoomOwnerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.TransferChatRoomOwnerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferChatRoomOwnerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferChatRoomOwnerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.TransferChatRoomOwnerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.TransferChatRoomOwnerResponse)
    MergeFrom(*source);
  }
}

void TransferChatRoomOwnerResponse::MergeFrom(const TransferChatRoomOwnerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.TransferChatRoomOwnerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void TransferChatRoomOwnerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.TransferChatRoomOwnerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferChatRoomOwnerResponse::CopyFrom(const TransferChatRoomOwnerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.TransferChatRoomOwnerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferChatRoomOwnerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void TransferChatRoomOwnerResponse::Swap(TransferChatRoomOwnerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferChatRoomOwnerResponse::InternalSwap(TransferChatRoomOwnerResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferChatRoomOwnerResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferChatRoomOwnerResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool TransferChatRoomOwnerResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransferChatRoomOwnerResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void TransferChatRoomOwnerResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransferChatRoomOwnerResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& TransferChatRoomOwnerResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.TransferChatRoomOwnerResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* TransferChatRoomOwnerResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TransferChatRoomOwnerResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* TransferChatRoomOwnerResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.TransferChatRoomOwnerResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void TransferChatRoomOwnerResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TransferChatRoomOwnerResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChatRoomAnnouncementRequest::kBaseRequestFieldNumber;
const int GetChatRoomAnnouncementRequest::kChatRoomNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChatRoomAnnouncementRequest::GetChatRoomAnnouncementRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetChatRoomAnnouncementRequest)
}
GetChatRoomAnnouncementRequest::GetChatRoomAnnouncementRequest(const GetChatRoomAnnouncementRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomname()) {
    chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetChatRoomAnnouncementRequest)
}

void GetChatRoomAnnouncementRequest::SharedCtor() {
  _cached_size_ = 0;
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

GetChatRoomAnnouncementRequest::~GetChatRoomAnnouncementRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetChatRoomAnnouncementRequest)
  SharedDtor();
}

void GetChatRoomAnnouncementRequest::SharedDtor() {
  chatroomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetChatRoomAnnouncementRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChatRoomAnnouncementRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChatRoomAnnouncementRequest& GetChatRoomAnnouncementRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetChatRoomAnnouncementRequest* GetChatRoomAnnouncementRequest::New(::google::protobuf::Arena* arena) const {
  GetChatRoomAnnouncementRequest* n = new GetChatRoomAnnouncementRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetChatRoomAnnouncementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetChatRoomAnnouncementRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_chatroomname()) {
      GOOGLE_DCHECK(!chatroomname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomname_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetChatRoomAnnouncementRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetChatRoomAnnouncementRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ChatRoomName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomname().data(), this->chatroomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetChatRoomAnnouncementRequest.ChatRoomName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetChatRoomAnnouncementRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetChatRoomAnnouncementRequest)
  return false;
#undef DO_
}

void GetChatRoomAnnouncementRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetChatRoomAnnouncementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomAnnouncementRequest.ChatRoomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chatroomname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetChatRoomAnnouncementRequest)
}

::google::protobuf::uint8* GetChatRoomAnnouncementRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetChatRoomAnnouncementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomAnnouncementRequest.ChatRoomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatroomname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetChatRoomAnnouncementRequest)
  return target;
}

size_t GetChatRoomAnnouncementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetChatRoomAnnouncementRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string ChatRoomName = 2;
  if (has_chatroomname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatroomname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChatRoomAnnouncementRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetChatRoomAnnouncementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatRoomAnnouncementRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChatRoomAnnouncementRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetChatRoomAnnouncementRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetChatRoomAnnouncementRequest)
    MergeFrom(*source);
  }
}

void GetChatRoomAnnouncementRequest::MergeFrom(const GetChatRoomAnnouncementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetChatRoomAnnouncementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chatroomname();
      chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void GetChatRoomAnnouncementRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetChatRoomAnnouncementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatRoomAnnouncementRequest::CopyFrom(const GetChatRoomAnnouncementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetChatRoomAnnouncementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatRoomAnnouncementRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetChatRoomAnnouncementRequest::Swap(GetChatRoomAnnouncementRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChatRoomAnnouncementRequest::InternalSwap(GetChatRoomAnnouncementRequest* other) {
  chatroomname_.Swap(&other->chatroomname_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetChatRoomAnnouncementRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetChatRoomAnnouncementRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetChatRoomAnnouncementRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetChatRoomAnnouncementRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GetChatRoomAnnouncementRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetChatRoomAnnouncementRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetChatRoomAnnouncementRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomAnnouncementRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetChatRoomAnnouncementRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomAnnouncementRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetChatRoomAnnouncementRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomAnnouncementRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetChatRoomAnnouncementRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomAnnouncementRequest.BaseRequest)
}

// optional string ChatRoomName = 2;
bool GetChatRoomAnnouncementRequest::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetChatRoomAnnouncementRequest::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
void GetChatRoomAnnouncementRequest::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetChatRoomAnnouncementRequest::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
const ::std::string& GetChatRoomAnnouncementRequest::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomAnnouncementRequest.ChatRoomName)
  return chatroomname_.GetNoArena();
}
void GetChatRoomAnnouncementRequest::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomAnnouncementRequest.ChatRoomName)
}
#if LANG_CXX11
void GetChatRoomAnnouncementRequest::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomAnnouncementRequest.ChatRoomName)
}
#endif
void GetChatRoomAnnouncementRequest::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomAnnouncementRequest.ChatRoomName)
}
void GetChatRoomAnnouncementRequest::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomAnnouncementRequest.ChatRoomName)
}
::std::string* GetChatRoomAnnouncementRequest::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomAnnouncementRequest.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetChatRoomAnnouncementRequest::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomAnnouncementRequest.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetChatRoomAnnouncementRequest::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomAnnouncementRequest.ChatRoomName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChatRoomAnnouncementResponse::kBaseResponseFieldNumber;
const int GetChatRoomAnnouncementResponse::kAnnouncementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChatRoomAnnouncementResponse::GetChatRoomAnnouncementResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetChatRoomAnnouncementResponse)
}
GetChatRoomAnnouncementResponse::GetChatRoomAnnouncementResponse(const GetChatRoomAnnouncementResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  announcement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_announcement()) {
    announcement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.announcement_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetChatRoomAnnouncementResponse)
}

void GetChatRoomAnnouncementResponse::SharedCtor() {
  _cached_size_ = 0;
  announcement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

GetChatRoomAnnouncementResponse::~GetChatRoomAnnouncementResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetChatRoomAnnouncementResponse)
  SharedDtor();
}

void GetChatRoomAnnouncementResponse::SharedDtor() {
  announcement_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetChatRoomAnnouncementResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChatRoomAnnouncementResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChatRoomAnnouncementResponse& GetChatRoomAnnouncementResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetChatRoomAnnouncementResponse* GetChatRoomAnnouncementResponse::New(::google::protobuf::Arena* arena) const {
  GetChatRoomAnnouncementResponse* n = new GetChatRoomAnnouncementResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetChatRoomAnnouncementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetChatRoomAnnouncementResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_announcement()) {
      GOOGLE_DCHECK(!announcement_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*announcement_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetChatRoomAnnouncementResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetChatRoomAnnouncementResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Announcement = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_announcement()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->announcement().data(), this->announcement().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetChatRoomAnnouncementResponse.Announcement");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetChatRoomAnnouncementResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetChatRoomAnnouncementResponse)
  return false;
#undef DO_
}

void GetChatRoomAnnouncementResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetChatRoomAnnouncementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string Announcement = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->announcement().data(), this->announcement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomAnnouncementResponse.Announcement");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->announcement(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetChatRoomAnnouncementResponse)
}

::google::protobuf::uint8* GetChatRoomAnnouncementResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetChatRoomAnnouncementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string Announcement = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->announcement().data(), this->announcement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomAnnouncementResponse.Announcement");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->announcement(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetChatRoomAnnouncementResponse)
  return target;
}

size_t GetChatRoomAnnouncementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetChatRoomAnnouncementResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional string Announcement = 2;
  if (has_announcement()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->announcement());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChatRoomAnnouncementResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetChatRoomAnnouncementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatRoomAnnouncementResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChatRoomAnnouncementResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetChatRoomAnnouncementResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetChatRoomAnnouncementResponse)
    MergeFrom(*source);
  }
}

void GetChatRoomAnnouncementResponse::MergeFrom(const GetChatRoomAnnouncementResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetChatRoomAnnouncementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_announcement();
      announcement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.announcement_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void GetChatRoomAnnouncementResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetChatRoomAnnouncementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatRoomAnnouncementResponse::CopyFrom(const GetChatRoomAnnouncementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetChatRoomAnnouncementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatRoomAnnouncementResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetChatRoomAnnouncementResponse::Swap(GetChatRoomAnnouncementResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChatRoomAnnouncementResponse::InternalSwap(GetChatRoomAnnouncementResponse* other) {
  announcement_.Swap(&other->announcement_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetChatRoomAnnouncementResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetChatRoomAnnouncementResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetChatRoomAnnouncementResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetChatRoomAnnouncementResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void GetChatRoomAnnouncementResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetChatRoomAnnouncementResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetChatRoomAnnouncementResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomAnnouncementResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetChatRoomAnnouncementResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomAnnouncementResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetChatRoomAnnouncementResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomAnnouncementResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetChatRoomAnnouncementResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomAnnouncementResponse.BaseResponse)
}

// optional string Announcement = 2;
bool GetChatRoomAnnouncementResponse::has_announcement() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetChatRoomAnnouncementResponse::set_has_announcement() {
  _has_bits_[0] |= 0x00000001u;
}
void GetChatRoomAnnouncementResponse::clear_has_announcement() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetChatRoomAnnouncementResponse::clear_announcement() {
  announcement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_announcement();
}
const ::std::string& GetChatRoomAnnouncementResponse::announcement() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomAnnouncementResponse.Announcement)
  return announcement_.GetNoArena();
}
void GetChatRoomAnnouncementResponse::set_announcement(const ::std::string& value) {
  set_has_announcement();
  announcement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomAnnouncementResponse.Announcement)
}
#if LANG_CXX11
void GetChatRoomAnnouncementResponse::set_announcement(::std::string&& value) {
  set_has_announcement();
  announcement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomAnnouncementResponse.Announcement)
}
#endif
void GetChatRoomAnnouncementResponse::set_announcement(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_announcement();
  announcement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomAnnouncementResponse.Announcement)
}
void GetChatRoomAnnouncementResponse::set_announcement(const char* value, size_t size) {
  set_has_announcement();
  announcement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomAnnouncementResponse.Announcement)
}
::std::string* GetChatRoomAnnouncementResponse::mutable_announcement() {
  set_has_announcement();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomAnnouncementResponse.Announcement)
  return announcement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetChatRoomAnnouncementResponse::release_announcement() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomAnnouncementResponse.Announcement)
  clear_has_announcement();
  return announcement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetChatRoomAnnouncementResponse::set_allocated_announcement(::std::string* announcement) {
  if (announcement != NULL) {
    set_has_announcement();
  } else {
    clear_has_announcement();
  }
  announcement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), announcement);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomAnnouncementResponse.Announcement)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetChatRoomAnnouncementRequest::kBaseRequestFieldNumber;
const int SetChatRoomAnnouncementRequest::kChatRoomNameFieldNumber;
const int SetChatRoomAnnouncementRequest::kAnnouncementFieldNumber;
const int SetChatRoomAnnouncementRequest::kSetAnnouncementFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetChatRoomAnnouncementRequest::SetChatRoomAnnouncementRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SetChatRoomAnnouncementRequest)
}
SetChatRoomAnnouncementRequest::SetChatRoomAnnouncementRequest(const SetChatRoomAnnouncementRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomname()) {
    chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
  }
  announcement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_announcement()) {
    announcement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.announcement_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  setannouncementflag_ = from.setannouncementflag_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SetChatRoomAnnouncementRequest)
}

void SetChatRoomAnnouncementRequest::SharedCtor() {
  _cached_size_ = 0;
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  announcement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&setannouncementflag_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(setannouncementflag_));
}

SetChatRoomAnnouncementRequest::~SetChatRoomAnnouncementRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SetChatRoomAnnouncementRequest)
  SharedDtor();
}

void SetChatRoomAnnouncementRequest::SharedDtor() {
  chatroomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  announcement_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void SetChatRoomAnnouncementRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetChatRoomAnnouncementRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetChatRoomAnnouncementRequest& SetChatRoomAnnouncementRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetChatRoomAnnouncementRequest* SetChatRoomAnnouncementRequest::New(::google::protobuf::Arena* arena) const {
  SetChatRoomAnnouncementRequest* n = new SetChatRoomAnnouncementRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetChatRoomAnnouncementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SetChatRoomAnnouncementRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_chatroomname()) {
      GOOGLE_DCHECK(!chatroomname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomname_.UnsafeRawStringPointer())->clear();
    }
    if (has_announcement()) {
      GOOGLE_DCHECK(!announcement_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*announcement_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  setannouncementflag_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SetChatRoomAnnouncementRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SetChatRoomAnnouncementRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ChatRoomName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomname().data(), this->chatroomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SetChatRoomAnnouncementRequest.ChatRoomName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Announcement = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_announcement()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->announcement().data(), this->announcement().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SetChatRoomAnnouncementRequest.Announcement");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SetAnnouncementFlag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_setannouncementflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &setannouncementflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SetChatRoomAnnouncementRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SetChatRoomAnnouncementRequest)
  return false;
#undef DO_
}

void SetChatRoomAnnouncementRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SetChatRoomAnnouncementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SetChatRoomAnnouncementRequest.ChatRoomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chatroomname(), output);
  }

  // optional string Announcement = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->announcement().data(), this->announcement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SetChatRoomAnnouncementRequest.Announcement");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->announcement(), output);
  }

  // optional uint32 SetAnnouncementFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->setannouncementflag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SetChatRoomAnnouncementRequest)
}

::google::protobuf::uint8* SetChatRoomAnnouncementRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SetChatRoomAnnouncementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SetChatRoomAnnouncementRequest.ChatRoomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatroomname(), target);
  }

  // optional string Announcement = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->announcement().data(), this->announcement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SetChatRoomAnnouncementRequest.Announcement");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->announcement(), target);
  }

  // optional uint32 SetAnnouncementFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->setannouncementflag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SetChatRoomAnnouncementRequest)
  return target;
}

size_t SetChatRoomAnnouncementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SetChatRoomAnnouncementRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ChatRoomName = 2;
    if (has_chatroomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatroomname());
    }

    // optional string Announcement = 3;
    if (has_announcement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->announcement());
    }

  }
  // optional uint32 SetAnnouncementFlag = 4;
  if (has_setannouncementflag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->setannouncementflag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetChatRoomAnnouncementRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SetChatRoomAnnouncementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetChatRoomAnnouncementRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetChatRoomAnnouncementRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SetChatRoomAnnouncementRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SetChatRoomAnnouncementRequest)
    MergeFrom(*source);
  }
}

void SetChatRoomAnnouncementRequest::MergeFrom(const SetChatRoomAnnouncementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SetChatRoomAnnouncementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chatroomname();
      chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_announcement();
      announcement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.announcement_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      setannouncementflag_ = from.setannouncementflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetChatRoomAnnouncementRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SetChatRoomAnnouncementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetChatRoomAnnouncementRequest::CopyFrom(const SetChatRoomAnnouncementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SetChatRoomAnnouncementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetChatRoomAnnouncementRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void SetChatRoomAnnouncementRequest::Swap(SetChatRoomAnnouncementRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetChatRoomAnnouncementRequest::InternalSwap(SetChatRoomAnnouncementRequest* other) {
  chatroomname_.Swap(&other->chatroomname_);
  announcement_.Swap(&other->announcement_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(setannouncementflag_, other->setannouncementflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetChatRoomAnnouncementRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetChatRoomAnnouncementRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SetChatRoomAnnouncementRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SetChatRoomAnnouncementRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void SetChatRoomAnnouncementRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void SetChatRoomAnnouncementRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SetChatRoomAnnouncementRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SetChatRoomAnnouncementRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SetChatRoomAnnouncementRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SetChatRoomAnnouncementRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SetChatRoomAnnouncementRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SetChatRoomAnnouncementRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SetChatRoomAnnouncementRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetChatRoomAnnouncementRequest.BaseRequest)
}

// optional string ChatRoomName = 2;
bool SetChatRoomAnnouncementRequest::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetChatRoomAnnouncementRequest::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
void SetChatRoomAnnouncementRequest::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
void SetChatRoomAnnouncementRequest::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
const ::std::string& SetChatRoomAnnouncementRequest::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.SetChatRoomAnnouncementRequest.ChatRoomName)
  return chatroomname_.GetNoArena();
}
void SetChatRoomAnnouncementRequest::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SetChatRoomAnnouncementRequest.ChatRoomName)
}
#if LANG_CXX11
void SetChatRoomAnnouncementRequest::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SetChatRoomAnnouncementRequest.ChatRoomName)
}
#endif
void SetChatRoomAnnouncementRequest::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SetChatRoomAnnouncementRequest.ChatRoomName)
}
void SetChatRoomAnnouncementRequest::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SetChatRoomAnnouncementRequest.ChatRoomName)
}
::std::string* SetChatRoomAnnouncementRequest::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.SetChatRoomAnnouncementRequest.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetChatRoomAnnouncementRequest::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.SetChatRoomAnnouncementRequest.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetChatRoomAnnouncementRequest::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetChatRoomAnnouncementRequest.ChatRoomName)
}

// optional string Announcement = 3;
bool SetChatRoomAnnouncementRequest::has_announcement() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SetChatRoomAnnouncementRequest::set_has_announcement() {
  _has_bits_[0] |= 0x00000002u;
}
void SetChatRoomAnnouncementRequest::clear_has_announcement() {
  _has_bits_[0] &= ~0x00000002u;
}
void SetChatRoomAnnouncementRequest::clear_announcement() {
  announcement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_announcement();
}
const ::std::string& SetChatRoomAnnouncementRequest::announcement() const {
  // @@protoc_insertion_point(field_get:micromsg.SetChatRoomAnnouncementRequest.Announcement)
  return announcement_.GetNoArena();
}
void SetChatRoomAnnouncementRequest::set_announcement(const ::std::string& value) {
  set_has_announcement();
  announcement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SetChatRoomAnnouncementRequest.Announcement)
}
#if LANG_CXX11
void SetChatRoomAnnouncementRequest::set_announcement(::std::string&& value) {
  set_has_announcement();
  announcement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SetChatRoomAnnouncementRequest.Announcement)
}
#endif
void SetChatRoomAnnouncementRequest::set_announcement(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_announcement();
  announcement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SetChatRoomAnnouncementRequest.Announcement)
}
void SetChatRoomAnnouncementRequest::set_announcement(const char* value, size_t size) {
  set_has_announcement();
  announcement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SetChatRoomAnnouncementRequest.Announcement)
}
::std::string* SetChatRoomAnnouncementRequest::mutable_announcement() {
  set_has_announcement();
  // @@protoc_insertion_point(field_mutable:micromsg.SetChatRoomAnnouncementRequest.Announcement)
  return announcement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetChatRoomAnnouncementRequest::release_announcement() {
  // @@protoc_insertion_point(field_release:micromsg.SetChatRoomAnnouncementRequest.Announcement)
  clear_has_announcement();
  return announcement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetChatRoomAnnouncementRequest::set_allocated_announcement(::std::string* announcement) {
  if (announcement != NULL) {
    set_has_announcement();
  } else {
    clear_has_announcement();
  }
  announcement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), announcement);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetChatRoomAnnouncementRequest.Announcement)
}

// optional uint32 SetAnnouncementFlag = 4;
bool SetChatRoomAnnouncementRequest::has_setannouncementflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SetChatRoomAnnouncementRequest::set_has_setannouncementflag() {
  _has_bits_[0] |= 0x00000008u;
}
void SetChatRoomAnnouncementRequest::clear_has_setannouncementflag() {
  _has_bits_[0] &= ~0x00000008u;
}
void SetChatRoomAnnouncementRequest::clear_setannouncementflag() {
  setannouncementflag_ = 0u;
  clear_has_setannouncementflag();
}
::google::protobuf::uint32 SetChatRoomAnnouncementRequest::setannouncementflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SetChatRoomAnnouncementRequest.SetAnnouncementFlag)
  return setannouncementflag_;
}
void SetChatRoomAnnouncementRequest::set_setannouncementflag(::google::protobuf::uint32 value) {
  set_has_setannouncementflag();
  setannouncementflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SetChatRoomAnnouncementRequest.SetAnnouncementFlag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetChatRoomAnnouncementResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetChatRoomAnnouncementResponse::SetChatRoomAnnouncementResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SetChatRoomAnnouncementResponse)
}
SetChatRoomAnnouncementResponse::SetChatRoomAnnouncementResponse(const SetChatRoomAnnouncementResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.SetChatRoomAnnouncementResponse)
}

void SetChatRoomAnnouncementResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

SetChatRoomAnnouncementResponse::~SetChatRoomAnnouncementResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SetChatRoomAnnouncementResponse)
  SharedDtor();
}

void SetChatRoomAnnouncementResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void SetChatRoomAnnouncementResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetChatRoomAnnouncementResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetChatRoomAnnouncementResponse& SetChatRoomAnnouncementResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetChatRoomAnnouncementResponse* SetChatRoomAnnouncementResponse::New(::google::protobuf::Arena* arena) const {
  SetChatRoomAnnouncementResponse* n = new SetChatRoomAnnouncementResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetChatRoomAnnouncementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SetChatRoomAnnouncementResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SetChatRoomAnnouncementResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SetChatRoomAnnouncementResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SetChatRoomAnnouncementResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SetChatRoomAnnouncementResponse)
  return false;
#undef DO_
}

void SetChatRoomAnnouncementResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SetChatRoomAnnouncementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SetChatRoomAnnouncementResponse)
}

::google::protobuf::uint8* SetChatRoomAnnouncementResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SetChatRoomAnnouncementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SetChatRoomAnnouncementResponse)
  return target;
}

size_t SetChatRoomAnnouncementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SetChatRoomAnnouncementResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetChatRoomAnnouncementResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SetChatRoomAnnouncementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetChatRoomAnnouncementResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetChatRoomAnnouncementResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SetChatRoomAnnouncementResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SetChatRoomAnnouncementResponse)
    MergeFrom(*source);
  }
}

void SetChatRoomAnnouncementResponse::MergeFrom(const SetChatRoomAnnouncementResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SetChatRoomAnnouncementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void SetChatRoomAnnouncementResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SetChatRoomAnnouncementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetChatRoomAnnouncementResponse::CopyFrom(const SetChatRoomAnnouncementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SetChatRoomAnnouncementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetChatRoomAnnouncementResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void SetChatRoomAnnouncementResponse::Swap(SetChatRoomAnnouncementResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetChatRoomAnnouncementResponse::InternalSwap(SetChatRoomAnnouncementResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetChatRoomAnnouncementResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetChatRoomAnnouncementResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SetChatRoomAnnouncementResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetChatRoomAnnouncementResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void SetChatRoomAnnouncementResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void SetChatRoomAnnouncementResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SetChatRoomAnnouncementResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SetChatRoomAnnouncementResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SetChatRoomAnnouncementResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SetChatRoomAnnouncementResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SetChatRoomAnnouncementResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SetChatRoomAnnouncementResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SetChatRoomAnnouncementResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetChatRoomAnnouncementResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChatRoomInfoDetailRequest::kBaseRequestFieldNumber;
const int GetChatRoomInfoDetailRequest::kChatRoomNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChatRoomInfoDetailRequest::GetChatRoomInfoDetailRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetChatRoomInfoDetailRequest)
}
GetChatRoomInfoDetailRequest::GetChatRoomInfoDetailRequest(const GetChatRoomInfoDetailRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomname()) {
    chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetChatRoomInfoDetailRequest)
}

void GetChatRoomInfoDetailRequest::SharedCtor() {
  _cached_size_ = 0;
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

GetChatRoomInfoDetailRequest::~GetChatRoomInfoDetailRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetChatRoomInfoDetailRequest)
  SharedDtor();
}

void GetChatRoomInfoDetailRequest::SharedDtor() {
  chatroomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetChatRoomInfoDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChatRoomInfoDetailRequest::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChatRoomInfoDetailRequest& GetChatRoomInfoDetailRequest::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetChatRoomInfoDetailRequest* GetChatRoomInfoDetailRequest::New(::google::protobuf::Arena* arena) const {
  GetChatRoomInfoDetailRequest* n = new GetChatRoomInfoDetailRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetChatRoomInfoDetailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetChatRoomInfoDetailRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_chatroomname()) {
      GOOGLE_DCHECK(!chatroomname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomname_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetChatRoomInfoDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetChatRoomInfoDetailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ChatRoomName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomname().data(), this->chatroomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetChatRoomInfoDetailRequest.ChatRoomName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetChatRoomInfoDetailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetChatRoomInfoDetailRequest)
  return false;
#undef DO_
}

void GetChatRoomInfoDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetChatRoomInfoDetailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomInfoDetailRequest.ChatRoomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chatroomname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetChatRoomInfoDetailRequest)
}

::google::protobuf::uint8* GetChatRoomInfoDetailRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetChatRoomInfoDetailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ChatRoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomInfoDetailRequest.ChatRoomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatroomname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetChatRoomInfoDetailRequest)
  return target;
}

size_t GetChatRoomInfoDetailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetChatRoomInfoDetailRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string ChatRoomName = 2;
  if (has_chatroomname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatroomname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChatRoomInfoDetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetChatRoomInfoDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatRoomInfoDetailRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChatRoomInfoDetailRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetChatRoomInfoDetailRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetChatRoomInfoDetailRequest)
    MergeFrom(*source);
  }
}

void GetChatRoomInfoDetailRequest::MergeFrom(const GetChatRoomInfoDetailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetChatRoomInfoDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chatroomname();
      chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void GetChatRoomInfoDetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetChatRoomInfoDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatRoomInfoDetailRequest::CopyFrom(const GetChatRoomInfoDetailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetChatRoomInfoDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatRoomInfoDetailRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetChatRoomInfoDetailRequest::Swap(GetChatRoomInfoDetailRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChatRoomInfoDetailRequest::InternalSwap(GetChatRoomInfoDetailRequest* other) {
  chatroomname_.Swap(&other->chatroomname_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetChatRoomInfoDetailRequest::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetChatRoomInfoDetailRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetChatRoomInfoDetailRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetChatRoomInfoDetailRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GetChatRoomInfoDetailRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetChatRoomInfoDetailRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetChatRoomInfoDetailRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomInfoDetailRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetChatRoomInfoDetailRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomInfoDetailRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetChatRoomInfoDetailRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomInfoDetailRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetChatRoomInfoDetailRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomInfoDetailRequest.BaseRequest)
}

// optional string ChatRoomName = 2;
bool GetChatRoomInfoDetailRequest::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetChatRoomInfoDetailRequest::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
void GetChatRoomInfoDetailRequest::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetChatRoomInfoDetailRequest::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
const ::std::string& GetChatRoomInfoDetailRequest::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomInfoDetailRequest.ChatRoomName)
  return chatroomname_.GetNoArena();
}
void GetChatRoomInfoDetailRequest::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomInfoDetailRequest.ChatRoomName)
}
#if LANG_CXX11
void GetChatRoomInfoDetailRequest::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomInfoDetailRequest.ChatRoomName)
}
#endif
void GetChatRoomInfoDetailRequest::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomInfoDetailRequest.ChatRoomName)
}
void GetChatRoomInfoDetailRequest::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomInfoDetailRequest.ChatRoomName)
}
::std::string* GetChatRoomInfoDetailRequest::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomInfoDetailRequest.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetChatRoomInfoDetailRequest::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomInfoDetailRequest.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetChatRoomInfoDetailRequest::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomInfoDetailRequest.ChatRoomName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChatRoomInfoDetailResponse::kBaseResponseFieldNumber;
const int GetChatRoomInfoDetailResponse::kAnnouncementFieldNumber;
const int GetChatRoomInfoDetailResponse::kChatRoomInfoVersionFieldNumber;
const int GetChatRoomInfoDetailResponse::kAnnouncementEditorFieldNumber;
const int GetChatRoomInfoDetailResponse::kAnnouncementPublishTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChatRoomInfoDetailResponse::GetChatRoomInfoDetailResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcontact_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetChatRoomInfoDetailResponse)
}
GetChatRoomInfoDetailResponse::GetChatRoomInfoDetailResponse(const GetChatRoomInfoDetailResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  announcement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_announcement()) {
    announcement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.announcement_);
  }
  announcementeditor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_announcementeditor()) {
    announcementeditor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.announcementeditor_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&chatroominfoversion_, &from.chatroominfoversion_,
    reinterpret_cast<char*>(&announcementpublishtime_) -
    reinterpret_cast<char*>(&chatroominfoversion_) + sizeof(announcementpublishtime_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetChatRoomInfoDetailResponse)
}

void GetChatRoomInfoDetailResponse::SharedCtor() {
  _cached_size_ = 0;
  announcement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  announcementeditor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&announcementpublishtime_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(announcementpublishtime_));
}

GetChatRoomInfoDetailResponse::~GetChatRoomInfoDetailResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetChatRoomInfoDetailResponse)
  SharedDtor();
}

void GetChatRoomInfoDetailResponse::SharedDtor() {
  announcement_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  announcementeditor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetChatRoomInfoDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChatRoomInfoDetailResponse::descriptor() {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChatRoomInfoDetailResponse& GetChatRoomInfoDetailResponse::default_instance() {
  protobuf_mmcontact_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetChatRoomInfoDetailResponse* GetChatRoomInfoDetailResponse::New(::google::protobuf::Arena* arena) const {
  GetChatRoomInfoDetailResponse* n = new GetChatRoomInfoDetailResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetChatRoomInfoDetailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetChatRoomInfoDetailResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_announcement()) {
      GOOGLE_DCHECK(!announcement_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*announcement_.UnsafeRawStringPointer())->clear();
    }
    if (has_announcementeditor()) {
      GOOGLE_DCHECK(!announcementeditor_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*announcementeditor_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&chatroominfoversion_, 0, reinterpret_cast<char*>(&announcementpublishtime_) -
      reinterpret_cast<char*>(&chatroominfoversion_) + sizeof(announcementpublishtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetChatRoomInfoDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetChatRoomInfoDetailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Announcement = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_announcement()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->announcement().data(), this->announcement().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetChatRoomInfoDetailResponse.Announcement");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ChatRoomInfoVersion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_chatroominfoversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chatroominfoversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AnnouncementEditor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_announcementeditor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->announcementeditor().data(), this->announcementeditor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetChatRoomInfoDetailResponse.AnnouncementEditor");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 AnnouncementPublishTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_announcementpublishtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &announcementpublishtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetChatRoomInfoDetailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetChatRoomInfoDetailResponse)
  return false;
#undef DO_
}

void GetChatRoomInfoDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetChatRoomInfoDetailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string Announcement = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->announcement().data(), this->announcement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomInfoDetailResponse.Announcement");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->announcement(), output);
  }

  // optional uint32 ChatRoomInfoVersion = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->chatroominfoversion(), output);
  }

  // optional string AnnouncementEditor = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->announcementeditor().data(), this->announcementeditor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomInfoDetailResponse.AnnouncementEditor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->announcementeditor(), output);
  }

  // optional uint32 AnnouncementPublishTime = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->announcementpublishtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetChatRoomInfoDetailResponse)
}

::google::protobuf::uint8* GetChatRoomInfoDetailResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetChatRoomInfoDetailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string Announcement = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->announcement().data(), this->announcement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomInfoDetailResponse.Announcement");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->announcement(), target);
  }

  // optional uint32 ChatRoomInfoVersion = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->chatroominfoversion(), target);
  }

  // optional string AnnouncementEditor = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->announcementeditor().data(), this->announcementeditor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetChatRoomInfoDetailResponse.AnnouncementEditor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->announcementeditor(), target);
  }

  // optional uint32 AnnouncementPublishTime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->announcementpublishtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetChatRoomInfoDetailResponse)
  return target;
}

size_t GetChatRoomInfoDetailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetChatRoomInfoDetailResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string Announcement = 2;
    if (has_announcement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->announcement());
    }

    // optional string AnnouncementEditor = 4;
    if (has_announcementeditor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->announcementeditor());
    }

  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional uint32 ChatRoomInfoVersion = 3;
    if (has_chatroominfoversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chatroominfoversion());
    }

    // optional uint32 AnnouncementPublishTime = 5;
    if (has_announcementpublishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->announcementpublishtime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChatRoomInfoDetailResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetChatRoomInfoDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatRoomInfoDetailResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChatRoomInfoDetailResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetChatRoomInfoDetailResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetChatRoomInfoDetailResponse)
    MergeFrom(*source);
  }
}

void GetChatRoomInfoDetailResponse::MergeFrom(const GetChatRoomInfoDetailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetChatRoomInfoDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_announcement();
      announcement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.announcement_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_announcementeditor();
      announcementeditor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.announcementeditor_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000008u) {
      chatroominfoversion_ = from.chatroominfoversion_;
    }
    if (cached_has_bits & 0x00000010u) {
      announcementpublishtime_ = from.announcementpublishtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetChatRoomInfoDetailResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetChatRoomInfoDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatRoomInfoDetailResponse::CopyFrom(const GetChatRoomInfoDetailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetChatRoomInfoDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatRoomInfoDetailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetChatRoomInfoDetailResponse::Swap(GetChatRoomInfoDetailResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChatRoomInfoDetailResponse::InternalSwap(GetChatRoomInfoDetailResponse* other) {
  announcement_.Swap(&other->announcement_);
  announcementeditor_.Swap(&other->announcementeditor_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(chatroominfoversion_, other->chatroominfoversion_);
  std::swap(announcementpublishtime_, other->announcementpublishtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetChatRoomInfoDetailResponse::GetMetadata() const {
  protobuf_mmcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetChatRoomInfoDetailResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetChatRoomInfoDetailResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetChatRoomInfoDetailResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void GetChatRoomInfoDetailResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetChatRoomInfoDetailResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetChatRoomInfoDetailResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomInfoDetailResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetChatRoomInfoDetailResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomInfoDetailResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetChatRoomInfoDetailResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomInfoDetailResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetChatRoomInfoDetailResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomInfoDetailResponse.BaseResponse)
}

// optional string Announcement = 2;
bool GetChatRoomInfoDetailResponse::has_announcement() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetChatRoomInfoDetailResponse::set_has_announcement() {
  _has_bits_[0] |= 0x00000001u;
}
void GetChatRoomInfoDetailResponse::clear_has_announcement() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetChatRoomInfoDetailResponse::clear_announcement() {
  announcement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_announcement();
}
const ::std::string& GetChatRoomInfoDetailResponse::announcement() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomInfoDetailResponse.Announcement)
  return announcement_.GetNoArena();
}
void GetChatRoomInfoDetailResponse::set_announcement(const ::std::string& value) {
  set_has_announcement();
  announcement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomInfoDetailResponse.Announcement)
}
#if LANG_CXX11
void GetChatRoomInfoDetailResponse::set_announcement(::std::string&& value) {
  set_has_announcement();
  announcement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomInfoDetailResponse.Announcement)
}
#endif
void GetChatRoomInfoDetailResponse::set_announcement(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_announcement();
  announcement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomInfoDetailResponse.Announcement)
}
void GetChatRoomInfoDetailResponse::set_announcement(const char* value, size_t size) {
  set_has_announcement();
  announcement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomInfoDetailResponse.Announcement)
}
::std::string* GetChatRoomInfoDetailResponse::mutable_announcement() {
  set_has_announcement();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomInfoDetailResponse.Announcement)
  return announcement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetChatRoomInfoDetailResponse::release_announcement() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomInfoDetailResponse.Announcement)
  clear_has_announcement();
  return announcement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetChatRoomInfoDetailResponse::set_allocated_announcement(::std::string* announcement) {
  if (announcement != NULL) {
    set_has_announcement();
  } else {
    clear_has_announcement();
  }
  announcement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), announcement);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomInfoDetailResponse.Announcement)
}

// optional uint32 ChatRoomInfoVersion = 3;
bool GetChatRoomInfoDetailResponse::has_chatroominfoversion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetChatRoomInfoDetailResponse::set_has_chatroominfoversion() {
  _has_bits_[0] |= 0x00000008u;
}
void GetChatRoomInfoDetailResponse::clear_has_chatroominfoversion() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetChatRoomInfoDetailResponse::clear_chatroominfoversion() {
  chatroominfoversion_ = 0u;
  clear_has_chatroominfoversion();
}
::google::protobuf::uint32 GetChatRoomInfoDetailResponse::chatroominfoversion() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomInfoDetailResponse.ChatRoomInfoVersion)
  return chatroominfoversion_;
}
void GetChatRoomInfoDetailResponse::set_chatroominfoversion(::google::protobuf::uint32 value) {
  set_has_chatroominfoversion();
  chatroominfoversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomInfoDetailResponse.ChatRoomInfoVersion)
}

// optional string AnnouncementEditor = 4;
bool GetChatRoomInfoDetailResponse::has_announcementeditor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetChatRoomInfoDetailResponse::set_has_announcementeditor() {
  _has_bits_[0] |= 0x00000002u;
}
void GetChatRoomInfoDetailResponse::clear_has_announcementeditor() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetChatRoomInfoDetailResponse::clear_announcementeditor() {
  announcementeditor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_announcementeditor();
}
const ::std::string& GetChatRoomInfoDetailResponse::announcementeditor() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomInfoDetailResponse.AnnouncementEditor)
  return announcementeditor_.GetNoArena();
}
void GetChatRoomInfoDetailResponse::set_announcementeditor(const ::std::string& value) {
  set_has_announcementeditor();
  announcementeditor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomInfoDetailResponse.AnnouncementEditor)
}
#if LANG_CXX11
void GetChatRoomInfoDetailResponse::set_announcementeditor(::std::string&& value) {
  set_has_announcementeditor();
  announcementeditor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomInfoDetailResponse.AnnouncementEditor)
}
#endif
void GetChatRoomInfoDetailResponse::set_announcementeditor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_announcementeditor();
  announcementeditor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomInfoDetailResponse.AnnouncementEditor)
}
void GetChatRoomInfoDetailResponse::set_announcementeditor(const char* value, size_t size) {
  set_has_announcementeditor();
  announcementeditor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomInfoDetailResponse.AnnouncementEditor)
}
::std::string* GetChatRoomInfoDetailResponse::mutable_announcementeditor() {
  set_has_announcementeditor();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomInfoDetailResponse.AnnouncementEditor)
  return announcementeditor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetChatRoomInfoDetailResponse::release_announcementeditor() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomInfoDetailResponse.AnnouncementEditor)
  clear_has_announcementeditor();
  return announcementeditor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetChatRoomInfoDetailResponse::set_allocated_announcementeditor(::std::string* announcementeditor) {
  if (announcementeditor != NULL) {
    set_has_announcementeditor();
  } else {
    clear_has_announcementeditor();
  }
  announcementeditor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), announcementeditor);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomInfoDetailResponse.AnnouncementEditor)
}

// optional uint32 AnnouncementPublishTime = 5;
bool GetChatRoomInfoDetailResponse::has_announcementpublishtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetChatRoomInfoDetailResponse::set_has_announcementpublishtime() {
  _has_bits_[0] |= 0x00000010u;
}
void GetChatRoomInfoDetailResponse::clear_has_announcementpublishtime() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetChatRoomInfoDetailResponse::clear_announcementpublishtime() {
  announcementpublishtime_ = 0u;
  clear_has_announcementpublishtime();
}
::google::protobuf::uint32 GetChatRoomInfoDetailResponse::announcementpublishtime() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomInfoDetailResponse.AnnouncementPublishTime)
  return announcementpublishtime_;
}
void GetChatRoomInfoDetailResponse::set_announcementpublishtime(::google::protobuf::uint32 value) {
  set_has_announcementpublishtime();
  announcementpublishtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomInfoDetailResponse.AnnouncementPublishTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg

// @@protoc_insertion_point(global_scope)
