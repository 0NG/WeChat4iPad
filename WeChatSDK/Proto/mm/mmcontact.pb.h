// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmcontact.proto

#ifndef PROTOBUF_mmcontact_2eproto__INCLUDED
#define PROTOBUF_mmcontact_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mmbuiltintype.pb.h"
#include "mmbase.pb.h"
// @@protoc_insertion_point(includes)
namespace micromsg {
class APPItem;
class APPItemDefaultTypeInternal;
extern APPItemDefaultTypeInternal _APPItem_default_instance_;
class AddChatRoomDonateRecordReq;
class AddChatRoomDonateRecordReqDefaultTypeInternal;
extern AddChatRoomDonateRecordReqDefaultTypeInternal _AddChatRoomDonateRecordReq_default_instance_;
class AddChatRoomDonateRecordResp;
class AddChatRoomDonateRecordRespDefaultTypeInternal;
extern AddChatRoomDonateRecordRespDefaultTypeInternal _AddChatRoomDonateRecordResp_default_instance_;
class AddChatRoomMemberRequest;
class AddChatRoomMemberRequestDefaultTypeInternal;
extern AddChatRoomMemberRequestDefaultTypeInternal _AddChatRoomMemberRequest_default_instance_;
class AddChatRoomMemberResponse;
class AddChatRoomMemberResponseDefaultTypeInternal;
extern AddChatRoomMemberResponseDefaultTypeInternal _AddChatRoomMemberResponse_default_instance_;
class AddContactLabelRequest;
class AddContactLabelRequestDefaultTypeInternal;
extern AddContactLabelRequestDefaultTypeInternal _AddContactLabelRequest_default_instance_;
class AddContactLabelResponse;
class AddContactLabelResponseDefaultTypeInternal;
extern AddContactLabelResponseDefaultTypeInternal _AddContactLabelResponse_default_instance_;
class AdditionalContactList;
class AdditionalContactListDefaultTypeInternal;
extern AdditionalContactListDefaultTypeInternal _AdditionalContactList_default_instance_;
class BBMContactItem;
class BBMContactItemDefaultTypeInternal;
extern BBMContactItemDefaultTypeInternal _BBMContactItem_default_instance_;
class BBMContactUploadItem;
class BBMContactUploadItemDefaultTypeInternal;
extern BBMContactUploadItemDefaultTypeInternal _BBMContactUploadItem_default_instance_;
class BaseRequest;
class BaseRequestDefaultTypeInternal;
extern BaseRequestDefaultTypeInternal _BaseRequest_default_instance_;
class BaseResponse;
class BaseResponseDefaultTypeInternal;
extern BaseResponseDefaultTypeInternal _BaseResponse_default_instance_;
class BatchGetHeadImgRequest;
class BatchGetHeadImgRequestDefaultTypeInternal;
extern BatchGetHeadImgRequestDefaultTypeInternal _BatchGetHeadImgRequest_default_instance_;
class BatchGetHeadImgResponse;
class BatchGetHeadImgResponseDefaultTypeInternal;
extern BatchGetHeadImgResponseDefaultTypeInternal _BatchGetHeadImgResponse_default_instance_;
class BindEmailRequest;
class BindEmailRequestDefaultTypeInternal;
extern BindEmailRequestDefaultTypeInternal _BindEmailRequest_default_instance_;
class BindEmailResponse;
class BindEmailResponseDefaultTypeInternal;
extern BindEmailResponseDefaultTypeInternal _BindEmailResponse_default_instance_;
class BuiltinIP;
class BuiltinIPDefaultTypeInternal;
extern BuiltinIPDefaultTypeInternal _BuiltinIP_default_instance_;
class BuiltinIPList;
class BuiltinIPListDefaultTypeInternal;
extern BuiltinIPListDefaultTypeInternal _BuiltinIPList_default_instance_;
class CDNDnsInfo;
class CDNDnsInfoDefaultTypeInternal;
extern CDNDnsInfoDefaultTypeInternal _CDNDnsInfo_default_instance_;
class ChatRoomMemberData;
class ChatRoomMemberDataDefaultTypeInternal;
extern ChatRoomMemberDataDefaultTypeInternal _ChatRoomMemberData_default_instance_;
class ChatRoomMemberInfo;
class ChatRoomMemberInfoDefaultTypeInternal;
extern ChatRoomMemberInfoDefaultTypeInternal _ChatRoomMemberInfo_default_instance_;
class CmdItem;
class CmdItemDefaultTypeInternal;
extern CmdItemDefaultTypeInternal _CmdItem_default_instance_;
class CmdList;
class CmdListDefaultTypeInternal;
extern CmdListDefaultTypeInternal _CmdList_default_instance_;
class CollectChatRoomReq;
class CollectChatRoomReqDefaultTypeInternal;
extern CollectChatRoomReqDefaultTypeInternal _CollectChatRoomReq_default_instance_;
class CollectChatRoomResp;
class CollectChatRoomRespDefaultTypeInternal;
extern CollectChatRoomRespDefaultTypeInternal _CollectChatRoomResp_default_instance_;
class CreateChatRoomRequest;
class CreateChatRoomRequestDefaultTypeInternal;
extern CreateChatRoomRequestDefaultTypeInternal _CreateChatRoomRequest_default_instance_;
class CreateChatRoomResponse;
class CreateChatRoomResponseDefaultTypeInternal;
extern CreateChatRoomResponseDefaultTypeInternal _CreateChatRoomResponse_default_instance_;
class CustomizedInfo;
class CustomizedInfoDefaultTypeInternal;
extern CustomizedInfoDefaultTypeInternal _CustomizedInfo_default_instance_;
class DelChatRoomMemberRequest;
class DelChatRoomMemberRequestDefaultTypeInternal;
extern DelChatRoomMemberRequestDefaultTypeInternal _DelChatRoomMemberRequest_default_instance_;
class DelChatRoomMemberResponse;
class DelChatRoomMemberResponseDefaultTypeInternal;
extern DelChatRoomMemberResponseDefaultTypeInternal _DelChatRoomMemberResponse_default_instance_;
class DelContactLabelRequest;
class DelContactLabelRequestDefaultTypeInternal;
extern DelContactLabelRequestDefaultTypeInternal _DelContactLabelRequest_default_instance_;
class DelContactLabelResponse;
class DelContactLabelResponseDefaultTypeInternal;
extern DelContactLabelResponseDefaultTypeInternal _DelContactLabelResponse_default_instance_;
class DelMemberReq;
class DelMemberReqDefaultTypeInternal;
extern DelMemberReqDefaultTypeInternal _DelMemberReq_default_instance_;
class DelMemberResp;
class DelMemberRespDefaultTypeInternal;
extern DelMemberRespDefaultTypeInternal _DelMemberResp_default_instance_;
class DeleteCardImgRequest;
class DeleteCardImgRequestDefaultTypeInternal;
extern DeleteCardImgRequestDefaultTypeInternal _DeleteCardImgRequest_default_instance_;
class DeleteCardImgResponse;
class DeleteCardImgResponseDefaultTypeInternal;
extern DeleteCardImgResponseDefaultTypeInternal _DeleteCardImgResponse_default_instance_;
class DisturbSetting;
class DisturbSettingDefaultTypeInternal;
extern DisturbSettingDefaultTypeInternal _DisturbSetting_default_instance_;
class DisturbTimeSpan;
class DisturbTimeSpanDefaultTypeInternal;
extern DisturbTimeSpanDefaultTypeInternal _DisturbTimeSpan_default_instance_;
class DonateHistory;
class DonateHistoryDefaultTypeInternal;
extern DonateHistoryDefaultTypeInternal _DonateHistory_default_instance_;
class Donor;
class DonorDefaultTypeInternal;
extern DonorDefaultTypeInternal _Donor_default_instance_;
class FriendInfo;
class FriendInfoDefaultTypeInternal;
extern FriendInfoDefaultTypeInternal _FriendInfo_default_instance_;
class GetAPPListRequest;
class GetAPPListRequestDefaultTypeInternal;
extern GetAPPListRequestDefaultTypeInternal _GetAPPListRequest_default_instance_;
class GetAPPListResponse;
class GetAPPListResponseDefaultTypeInternal;
extern GetAPPListResponseDefaultTypeInternal _GetAPPListResponse_default_instance_;
class GetBrandListRequest;
class GetBrandListRequestDefaultTypeInternal;
extern GetBrandListRequestDefaultTypeInternal _GetBrandListRequest_default_instance_;
class GetBrandListRequestBuffer;
class GetBrandListRequestBufferDefaultTypeInternal;
extern GetBrandListRequestBufferDefaultTypeInternal _GetBrandListRequestBuffer_default_instance_;
class GetBrandListResponse;
class GetBrandListResponseDefaultTypeInternal;
extern GetBrandListResponseDefaultTypeInternal _GetBrandListResponse_default_instance_;
class GetChatRoomAnnouncementRequest;
class GetChatRoomAnnouncementRequestDefaultTypeInternal;
extern GetChatRoomAnnouncementRequestDefaultTypeInternal _GetChatRoomAnnouncementRequest_default_instance_;
class GetChatRoomAnnouncementResponse;
class GetChatRoomAnnouncementResponseDefaultTypeInternal;
extern GetChatRoomAnnouncementResponseDefaultTypeInternal _GetChatRoomAnnouncementResponse_default_instance_;
class GetChatRoomDonateHistoryReq;
class GetChatRoomDonateHistoryReqDefaultTypeInternal;
extern GetChatRoomDonateHistoryReqDefaultTypeInternal _GetChatRoomDonateHistoryReq_default_instance_;
class GetChatRoomDonateHistoryResp;
class GetChatRoomDonateHistoryRespDefaultTypeInternal;
extern GetChatRoomDonateHistoryRespDefaultTypeInternal _GetChatRoomDonateHistoryResp_default_instance_;
class GetChatRoomInfoDetailRequest;
class GetChatRoomInfoDetailRequestDefaultTypeInternal;
extern GetChatRoomInfoDetailRequestDefaultTypeInternal _GetChatRoomInfoDetailRequest_default_instance_;
class GetChatRoomInfoDetailResponse;
class GetChatRoomInfoDetailResponseDefaultTypeInternal;
extern GetChatRoomInfoDetailResponseDefaultTypeInternal _GetChatRoomInfoDetailResponse_default_instance_;
class GetChatRoomPresentHistoryReq;
class GetChatRoomPresentHistoryReqDefaultTypeInternal;
extern GetChatRoomPresentHistoryReqDefaultTypeInternal _GetChatRoomPresentHistoryReq_default_instance_;
class GetChatRoomPresentHistoryResp;
class GetChatRoomPresentHistoryRespDefaultTypeInternal;
extern GetChatRoomPresentHistoryRespDefaultTypeInternal _GetChatRoomPresentHistoryResp_default_instance_;
class GetChatRoomUpgradeInfoReq;
class GetChatRoomUpgradeInfoReqDefaultTypeInternal;
extern GetChatRoomUpgradeInfoReqDefaultTypeInternal _GetChatRoomUpgradeInfoReq_default_instance_;
class GetChatRoomUpgradeInfoResp;
class GetChatRoomUpgradeInfoRespDefaultTypeInternal;
extern GetChatRoomUpgradeInfoRespDefaultTypeInternal _GetChatRoomUpgradeInfoResp_default_instance_;
class GetChatRoomUpgradeStatusReq;
class GetChatRoomUpgradeStatusReqDefaultTypeInternal;
extern GetChatRoomUpgradeStatusReqDefaultTypeInternal _GetChatRoomUpgradeStatusReq_default_instance_;
class GetChatRoomUpgradeStatusResp;
class GetChatRoomUpgradeStatusRespDefaultTypeInternal;
extern GetChatRoomUpgradeStatusRespDefaultTypeInternal _GetChatRoomUpgradeStatusResp_default_instance_;
class GetChatroomMemberDetailRequest;
class GetChatroomMemberDetailRequestDefaultTypeInternal;
extern GetChatroomMemberDetailRequestDefaultTypeInternal _GetChatroomMemberDetailRequest_default_instance_;
class GetChatroomMemberDetailResponse;
class GetChatroomMemberDetailResponseDefaultTypeInternal;
extern GetChatroomMemberDetailResponseDefaultTypeInternal _GetChatroomMemberDetailResponse_default_instance_;
class GetContactLabelListRequest;
class GetContactLabelListRequestDefaultTypeInternal;
extern GetContactLabelListRequestDefaultTypeInternal _GetContactLabelListRequest_default_instance_;
class GetContactLabelListResponse;
class GetContactLabelListResponseDefaultTypeInternal;
extern GetContactLabelListResponseDefaultTypeInternal _GetContactLabelListResponse_default_instance_;
class GetContactRequest;
class GetContactRequestDefaultTypeInternal;
extern GetContactRequestDefaultTypeInternal _GetContactRequest_default_instance_;
class GetContactResponse;
class GetContactResponseDefaultTypeInternal;
extern GetContactResponseDefaultTypeInternal _GetContactResponse_default_instance_;
class GetDonateInfoReq;
class GetDonateInfoReqDefaultTypeInternal;
extern GetDonateInfoReqDefaultTypeInternal _GetDonateInfoReq_default_instance_;
class GetDonateInfoResp;
class GetDonateInfoRespDefaultTypeInternal;
extern GetDonateInfoRespDefaultTypeInternal _GetDonateInfoResp_default_instance_;
class GetLocationRequest;
class GetLocationRequestDefaultTypeInternal;
extern GetLocationRequestDefaultTypeInternal _GetLocationRequest_default_instance_;
class GetLocationResponse;
class GetLocationResponseDefaultTypeInternal;
extern GetLocationResponseDefaultTypeInternal _GetLocationResponse_default_instance_;
class GetOnlineInfoRequest;
class GetOnlineInfoRequestDefaultTypeInternal;
extern GetOnlineInfoRequestDefaultTypeInternal _GetOnlineInfoRequest_default_instance_;
class GetOnlineInfoResponse;
class GetOnlineInfoResponseDefaultTypeInternal;
extern GetOnlineInfoResponseDefaultTypeInternal _GetOnlineInfoResponse_default_instance_;
class GetPayPurchasePackageReq;
class GetPayPurchasePackageReqDefaultTypeInternal;
extern GetPayPurchasePackageReqDefaultTypeInternal _GetPayPurchasePackageReq_default_instance_;
class GetPayPurchasePackageResp;
class GetPayPurchasePackageRespDefaultTypeInternal;
extern GetPayPurchasePackageRespDefaultTypeInternal _GetPayPurchasePackageResp_default_instance_;
class GetPersonalDonateHistoryReq;
class GetPersonalDonateHistoryReqDefaultTypeInternal;
extern GetPersonalDonateHistoryReqDefaultTypeInternal _GetPersonalDonateHistoryReq_default_instance_;
class GetPersonalDonateHistoryResp;
class GetPersonalDonateHistoryRespDefaultTypeInternal;
extern GetPersonalDonateHistoryRespDefaultTypeInternal _GetPersonalDonateHistoryResp_default_instance_;
class GmailInfo;
class GmailInfoDefaultTypeInternal;
extern GmailInfoDefaultTypeInternal _GmailInfo_default_instance_;
class GmailList;
class GmailListDefaultTypeInternal;
extern GmailListDefaultTypeInternal _GmailList_default_instance_;
class GoogleContactItem;
class GoogleContactItemDefaultTypeInternal;
extern GoogleContactItemDefaultTypeInternal _GoogleContactItem_default_instance_;
class GoogleContactUploadItem;
class GoogleContactUploadItemDefaultTypeInternal;
extern GoogleContactUploadItemDefaultTypeInternal _GoogleContactUploadItem_default_instance_;
class GroupCardReq;
class GroupCardReqDefaultTypeInternal;
extern GroupCardReqDefaultTypeInternal _GroupCardReq_default_instance_;
class HardDevice;
class HardDeviceDefaultTypeInternal;
extern HardDeviceDefaultTypeInternal _HardDevice_default_instance_;
class Host;
class HostDefaultTypeInternal;
extern HostDefaultTypeInternal _Host_default_instance_;
class HostList;
class HostListDefaultTypeInternal;
extern HostListDefaultTypeInternal _HostList_default_instance_;
class ImgPair;
class ImgPairDefaultTypeInternal;
extern ImgPairDefaultTypeInternal _ImgPair_default_instance_;
class InviteChatRoomMemberRequest;
class InviteChatRoomMemberRequestDefaultTypeInternal;
extern InviteChatRoomMemberRequestDefaultTypeInternal _InviteChatRoomMemberRequest_default_instance_;
class InviteChatRoomMemberResponse;
class InviteChatRoomMemberResponseDefaultTypeInternal;
extern InviteChatRoomMemberResponseDefaultTypeInternal _InviteChatRoomMemberResponse_default_instance_;
class InviteGoogleContactItem;
class InviteGoogleContactItemDefaultTypeInternal;
extern InviteGoogleContactItemDefaultTypeInternal _InviteGoogleContactItem_default_instance_;
class InviteGoogleContactRequest;
class InviteGoogleContactRequestDefaultTypeInternal;
extern InviteGoogleContactRequestDefaultTypeInternal _InviteGoogleContactRequest_default_instance_;
class InviteGoogleContactResponse;
class InviteGoogleContactResponseDefaultTypeInternal;
extern InviteGoogleContactResponseDefaultTypeInternal _InviteGoogleContactResponse_default_instance_;
class KeyValStr;
class KeyValStrDefaultTypeInternal;
extern KeyValStrDefaultTypeInternal _KeyValStr_default_instance_;
class LabelPair;
class LabelPairDefaultTypeInternal;
extern LabelPairDefaultTypeInternal _LabelPair_default_instance_;
class LinkedinContactItem;
class LinkedinContactItemDefaultTypeInternal;
extern LinkedinContactItemDefaultTypeInternal _LinkedinContactItem_default_instance_;
class ListBBMContactRequest;
class ListBBMContactRequestDefaultTypeInternal;
extern ListBBMContactRequestDefaultTypeInternal _ListBBMContactRequest_default_instance_;
class ListBBMContactResponse;
class ListBBMContactResponseDefaultTypeInternal;
extern ListBBMContactResponseDefaultTypeInternal _ListBBMContactResponse_default_instance_;
class ListGoogleContactRequest;
class ListGoogleContactRequestDefaultTypeInternal;
extern ListGoogleContactRequestDefaultTypeInternal _ListGoogleContactRequest_default_instance_;
class ListGoogleContactResponse;
class ListGoogleContactResponseDefaultTypeInternal;
extern ListGoogleContactResponseDefaultTypeInternal _ListGoogleContactResponse_default_instance_;
class MemberReq;
class MemberReqDefaultTypeInternal;
extern MemberReqDefaultTypeInternal _MemberReq_default_instance_;
class MemberResp;
class MemberRespDefaultTypeInternal;
extern MemberRespDefaultTypeInternal _MemberResp_default_instance_;
class ModContact;
class ModContactDefaultTypeInternal;
extern ModContactDefaultTypeInternal _ModContact_default_instance_;
class ModUserInfo;
class ModUserInfoDefaultTypeInternal;
extern ModUserInfoDefaultTypeInternal _ModUserInfo_default_instance_;
class ModifyContactLabelListRequest;
class ModifyContactLabelListRequestDefaultTypeInternal;
extern ModifyContactLabelListRequestDefaultTypeInternal _ModifyContactLabelListRequest_default_instance_;
class ModifyContactLabelListResponse;
class ModifyContactLabelListResponseDefaultTypeInternal;
extern ModifyContactLabelListResponseDefaultTypeInternal _ModifyContactLabelListResponse_default_instance_;
class NetworkControl;
class NetworkControlDefaultTypeInternal;
extern NetworkControlDefaultTypeInternal _NetworkControl_default_instance_;
class OnlineInfo;
class OnlineInfoDefaultTypeInternal;
extern OnlineInfoDefaultTypeInternal _OnlineInfo_default_instance_;
class PatternLockInfo;
class PatternLockInfoDefaultTypeInternal;
extern PatternLockInfoDefaultTypeInternal _PatternLockInfo_default_instance_;
class PluginKey;
class PluginKeyDefaultTypeInternal;
extern PluginKeyDefaultTypeInternal _PluginKey_default_instance_;
class PluginKeyList;
class PluginKeyListDefaultTypeInternal;
extern PluginKeyListDefaultTypeInternal _PluginKeyList_default_instance_;
class PositionInfo;
class PositionInfoDefaultTypeInternal;
extern PositionInfoDefaultTypeInternal _PositionInfo_default_instance_;
class Presentation;
class PresentationDefaultTypeInternal;
extern PresentationDefaultTypeInternal _Presentation_default_instance_;
class QuitChatRoomReq;
class QuitChatRoomReqDefaultTypeInternal;
extern QuitChatRoomReqDefaultTypeInternal _QuitChatRoomReq_default_instance_;
class QuitChatRoomResp;
class QuitChatRoomRespDefaultTypeInternal;
extern QuitChatRoomRespDefaultTypeInternal _QuitChatRoomResp_default_instance_;
class RadarCreateChatRoomParameter;
class RadarCreateChatRoomParameterDefaultTypeInternal;
extern RadarCreateChatRoomParameterDefaultTypeInternal _RadarCreateChatRoomParameter_default_instance_;
class RadarMember;
class RadarMemberDefaultTypeInternal;
extern RadarMemberDefaultTypeInternal _RadarMember_default_instance_;
class RoomInfo;
class RoomInfoDefaultTypeInternal;
extern RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
class SKBuiltinBuffer_t;
class SKBuiltinBuffer_tDefaultTypeInternal;
extern SKBuiltinBuffer_tDefaultTypeInternal _SKBuiltinBuffer_t_default_instance_;
class SKBuiltinChar_t;
class SKBuiltinChar_tDefaultTypeInternal;
extern SKBuiltinChar_tDefaultTypeInternal _SKBuiltinChar_t_default_instance_;
class SKBuiltinDouble64_t;
class SKBuiltinDouble64_tDefaultTypeInternal;
extern SKBuiltinDouble64_tDefaultTypeInternal _SKBuiltinDouble64_t_default_instance_;
class SKBuiltinFloat32_t;
class SKBuiltinFloat32_tDefaultTypeInternal;
extern SKBuiltinFloat32_tDefaultTypeInternal _SKBuiltinFloat32_t_default_instance_;
class SKBuiltinInt16_t;
class SKBuiltinInt16_tDefaultTypeInternal;
extern SKBuiltinInt16_tDefaultTypeInternal _SKBuiltinInt16_t_default_instance_;
class SKBuiltinInt32_t;
class SKBuiltinInt32_tDefaultTypeInternal;
extern SKBuiltinInt32_tDefaultTypeInternal _SKBuiltinInt32_t_default_instance_;
class SKBuiltinInt64_t;
class SKBuiltinInt64_tDefaultTypeInternal;
extern SKBuiltinInt64_tDefaultTypeInternal _SKBuiltinInt64_t_default_instance_;
class SKBuiltinInt8_t;
class SKBuiltinInt8_tDefaultTypeInternal;
extern SKBuiltinInt8_tDefaultTypeInternal _SKBuiltinInt8_t_default_instance_;
class SKBuiltinString_t;
class SKBuiltinString_tDefaultTypeInternal;
extern SKBuiltinString_tDefaultTypeInternal _SKBuiltinString_t_default_instance_;
class SKBuiltinUchar_t;
class SKBuiltinUchar_tDefaultTypeInternal;
extern SKBuiltinUchar_tDefaultTypeInternal _SKBuiltinUchar_t_default_instance_;
class SKBuiltinUint16_t;
class SKBuiltinUint16_tDefaultTypeInternal;
extern SKBuiltinUint16_tDefaultTypeInternal _SKBuiltinUint16_t_default_instance_;
class SKBuiltinUint32_t;
class SKBuiltinUint32_tDefaultTypeInternal;
extern SKBuiltinUint32_tDefaultTypeInternal _SKBuiltinUint32_t_default_instance_;
class SKBuiltinUint64_t;
class SKBuiltinUint64_tDefaultTypeInternal;
extern SKBuiltinUint64_tDefaultTypeInternal _SKBuiltinUint64_t_default_instance_;
class SKBuiltinUint8_t;
class SKBuiltinUint8_tDefaultTypeInternal;
extern SKBuiltinUint8_tDefaultTypeInternal _SKBuiltinUint8_t_default_instance_;
class SafeDevice;
class SafeDeviceDefaultTypeInternal;
extern SafeDeviceDefaultTypeInternal _SafeDevice_default_instance_;
class SafeDeviceList;
class SafeDeviceListDefaultTypeInternal;
extern SafeDeviceListDefaultTypeInternal _SafeDeviceList_default_instance_;
class SearchContactItem;
class SearchContactItemDefaultTypeInternal;
extern SearchContactItemDefaultTypeInternal _SearchContactItem_default_instance_;
class SearchContactRequest;
class SearchContactRequestDefaultTypeInternal;
extern SearchContactRequestDefaultTypeInternal _SearchContactRequest_default_instance_;
class SearchContactResponse;
class SearchContactResponseDefaultTypeInternal;
extern SearchContactResponseDefaultTypeInternal _SearchContactResponse_default_instance_;
class SearchFriendRequest;
class SearchFriendRequestDefaultTypeInternal;
extern SearchFriendRequestDefaultTypeInternal _SearchFriendRequest_default_instance_;
class SearchFriendResponse;
class SearchFriendResponseDefaultTypeInternal;
extern SearchFriendResponseDefaultTypeInternal _SearchFriendResponse_default_instance_;
class SearchQRCodeReq;
class SearchQRCodeReqDefaultTypeInternal;
extern SearchQRCodeReqDefaultTypeInternal _SearchQRCodeReq_default_instance_;
class SearchQRCodeResp;
class SearchQRCodeRespDefaultTypeInternal;
extern SearchQRCodeRespDefaultTypeInternal _SearchQRCodeResp_default_instance_;
class SetAPPListRequest;
class SetAPPListRequestDefaultTypeInternal;
extern SetAPPListRequestDefaultTypeInternal _SetAPPListRequest_default_instance_;
class SetAPPListResponse;
class SetAPPListResponseDefaultTypeInternal;
extern SetAPPListResponseDefaultTypeInternal _SetAPPListResponse_default_instance_;
class SetChatRoomAnnouncementRequest;
class SetChatRoomAnnouncementRequestDefaultTypeInternal;
extern SetChatRoomAnnouncementRequestDefaultTypeInternal _SetChatRoomAnnouncementRequest_default_instance_;
class SetChatRoomAnnouncementResponse;
class SetChatRoomAnnouncementResponseDefaultTypeInternal;
extern SetChatRoomAnnouncementResponseDefaultTypeInternal _SetChatRoomAnnouncementResponse_default_instance_;
class ShakeSyncRequest;
class ShakeSyncRequestDefaultTypeInternal;
extern ShakeSyncRequestDefaultTypeInternal _ShakeSyncRequest_default_instance_;
class ShakeSyncResponse;
class ShakeSyncResponseDefaultTypeInternal;
extern ShakeSyncResponseDefaultTypeInternal _ShakeSyncResponse_default_instance_;
class ShowStyleKey;
class ShowStyleKeyDefaultTypeInternal;
extern ShowStyleKeyDefaultTypeInternal _ShowStyleKey_default_instance_;
class SnsUserInfo;
class SnsUserInfoDefaultTypeInternal;
extern SnsUserInfoDefaultTypeInternal _SnsUserInfo_default_instance_;
class StyleKeyVal;
class StyleKeyValDefaultTypeInternal;
extern StyleKeyValDefaultTypeInternal _StyleKeyVal_default_instance_;
class TransferChatRoomOwnerRequest;
class TransferChatRoomOwnerRequestDefaultTypeInternal;
extern TransferChatRoomOwnerRequestDefaultTypeInternal _TransferChatRoomOwnerRequest_default_instance_;
class TransferChatRoomOwnerResponse;
class TransferChatRoomOwnerResponseDefaultTypeInternal;
extern TransferChatRoomOwnerResponseDefaultTypeInternal _TransferChatRoomOwnerResponse_default_instance_;
class UpdateContactLabelRequest;
class UpdateContactLabelRequestDefaultTypeInternal;
extern UpdateContactLabelRequestDefaultTypeInternal _UpdateContactLabelRequest_default_instance_;
class UpdateContactLabelResponse;
class UpdateContactLabelResponseDefaultTypeInternal;
extern UpdateContactLabelResponseDefaultTypeInternal _UpdateContactLabelResponse_default_instance_;
class UpgradeChatRoomReq;
class UpgradeChatRoomReqDefaultTypeInternal;
extern UpgradeChatRoomReqDefaultTypeInternal _UpgradeChatRoomReq_default_instance_;
class UpgradeChatRoomResp;
class UpgradeChatRoomRespDefaultTypeInternal;
extern UpgradeChatRoomRespDefaultTypeInternal _UpgradeChatRoomResp_default_instance_;
class UploadCardImgRequest;
class UploadCardImgRequestDefaultTypeInternal;
extern UploadCardImgRequestDefaultTypeInternal _UploadCardImgRequest_default_instance_;
class UploadCardImgResponse;
class UploadCardImgResponseDefaultTypeInternal;
extern UploadCardImgResponseDefaultTypeInternal _UploadCardImgResponse_default_instance_;
class UserInfoExt;
class UserInfoExtDefaultTypeInternal;
extern UserInfoExtDefaultTypeInternal _UserInfoExt_default_instance_;
class UserLabelInfo;
class UserLabelInfoDefaultTypeInternal;
extern UserLabelInfoDefaultTypeInternal _UserLabelInfo_default_instance_;
class VerifyChatRoomReq;
class VerifyChatRoomReqDefaultTypeInternal;
extern VerifyChatRoomReqDefaultTypeInternal _VerifyChatRoomReq_default_instance_;
class VerifyChatRoomResp;
class VerifyChatRoomRespDefaultTypeInternal;
extern VerifyChatRoomRespDefaultTypeInternal _VerifyChatRoomResp_default_instance_;
class VerifyPayTransitionReq;
class VerifyPayTransitionReqDefaultTypeInternal;
extern VerifyPayTransitionReqDefaultTypeInternal _VerifyPayTransitionReq_default_instance_;
class VerifyPayTransitionResp;
class VerifyPayTransitionRespDefaultTypeInternal;
extern VerifyPayTransitionRespDefaultTypeInternal _VerifyPayTransitionResp_default_instance_;
class VerifyPersonalInfoReq;
class VerifyPersonalInfoReqDefaultTypeInternal;
extern VerifyPersonalInfoReqDefaultTypeInternal _VerifyPersonalInfoReq_default_instance_;
class VerifyPersonalInfoResp;
class VerifyPersonalInfoRespDefaultTypeInternal;
extern VerifyPersonalInfoRespDefaultTypeInternal _VerifyPersonalInfoResp_default_instance_;
}  // namespace micromsg

namespace micromsg {

namespace protobuf_mmcontact_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_mmcontact_2eproto

// ===================================================================

class GetBrandListRequestBuffer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetBrandListRequestBuffer) */ {
 public:
  GetBrandListRequestBuffer();
  virtual ~GetBrandListRequestBuffer();

  GetBrandListRequestBuffer(const GetBrandListRequestBuffer& from);

  inline GetBrandListRequestBuffer& operator=(const GetBrandListRequestBuffer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBrandListRequestBuffer& default_instance();

  static inline const GetBrandListRequestBuffer* internal_default_instance() {
    return reinterpret_cast<const GetBrandListRequestBuffer*>(
               &_GetBrandListRequestBuffer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GetBrandListRequestBuffer* other);

  // implements Message ----------------------------------------------

  inline GetBrandListRequestBuffer* New() const PROTOBUF_FINAL { return New(NULL); }

  GetBrandListRequestBuffer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetBrandListRequestBuffer& from);
  void MergeFrom(const GetBrandListRequestBuffer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetBrandListRequestBuffer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Count = 1;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // required uint32 HiddenCount = 2;
  bool has_hiddencount() const;
  void clear_hiddencount();
  static const int kHiddenCountFieldNumber = 2;
  ::google::protobuf::uint32 hiddencount() const;
  void set_hiddencount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetBrandListRequestBuffer)
 private:
  void set_has_count();
  void clear_has_count();
  void set_has_hiddencount();
  void clear_has_hiddencount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 hiddencount_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetBrandListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetBrandListRequest) */ {
 public:
  GetBrandListRequest();
  virtual ~GetBrandListRequest();

  GetBrandListRequest(const GetBrandListRequest& from);

  inline GetBrandListRequest& operator=(const GetBrandListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBrandListRequest& default_instance();

  static inline const GetBrandListRequest* internal_default_instance() {
    return reinterpret_cast<const GetBrandListRequest*>(
               &_GetBrandListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GetBrandListRequest* other);

  // implements Message ----------------------------------------------

  inline GetBrandListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetBrandListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetBrandListRequest& from);
  void MergeFrom(const GetBrandListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetBrandListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // optional .micromsg.SKBuiltinBuffer_t RequestBuffer = 3;
  bool has_requestbuffer() const;
  void clear_requestbuffer();
  static const int kRequestBufferFieldNumber = 3;
  const ::micromsg::SKBuiltinBuffer_t& requestbuffer() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_requestbuffer();
  ::micromsg::SKBuiltinBuffer_t* release_requestbuffer();
  void set_allocated_requestbuffer(::micromsg::SKBuiltinBuffer_t* requestbuffer);

  // @@protoc_insertion_point(class_scope:micromsg.GetBrandListRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_username();
  void clear_has_username();
  void set_has_requestbuffer();
  void clear_has_requestbuffer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::SKBuiltinBuffer_t* requestbuffer_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetBrandListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetBrandListResponse) */ {
 public:
  GetBrandListResponse();
  virtual ~GetBrandListResponse();

  GetBrandListResponse(const GetBrandListResponse& from);

  inline GetBrandListResponse& operator=(const GetBrandListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBrandListResponse& default_instance();

  static inline const GetBrandListResponse* internal_default_instance() {
    return reinterpret_cast<const GetBrandListResponse*>(
               &_GetBrandListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GetBrandListResponse* other);

  // implements Message ----------------------------------------------

  inline GetBrandListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetBrandListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetBrandListResponse& from);
  void MergeFrom(const GetBrandListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetBrandListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string BrandList = 2;
  bool has_brandlist() const;
  void clear_brandlist();
  static const int kBrandListFieldNumber = 2;
  const ::std::string& brandlist() const;
  void set_brandlist(const ::std::string& value);
  #if LANG_CXX11
  void set_brandlist(::std::string&& value);
  #endif
  void set_brandlist(const char* value);
  void set_brandlist(const char* value, size_t size);
  ::std::string* mutable_brandlist();
  ::std::string* release_brandlist();
  void set_allocated_brandlist(::std::string* brandlist);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required .micromsg.SKBuiltinBuffer_t RequestBuffer = 3;
  bool has_requestbuffer() const;
  void clear_requestbuffer();
  static const int kRequestBufferFieldNumber = 3;
  const ::micromsg::SKBuiltinBuffer_t& requestbuffer() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_requestbuffer();
  ::micromsg::SKBuiltinBuffer_t* release_requestbuffer();
  void set_allocated_requestbuffer(::micromsg::SKBuiltinBuffer_t* requestbuffer);

  // @@protoc_insertion_point(class_scope:micromsg.GetBrandListResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_brandlist();
  void clear_has_brandlist();
  void set_has_requestbuffer();
  void clear_has_requestbuffer();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr brandlist_;
  ::micromsg::BaseResponse* baseresponse_;
  ::micromsg::SKBuiltinBuffer_t* requestbuffer_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class APPItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.APPItem) */ {
 public:
  APPItem();
  virtual ~APPItem();

  APPItem(const APPItem& from);

  inline APPItem& operator=(const APPItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const APPItem& default_instance();

  static inline const APPItem* internal_default_instance() {
    return reinterpret_cast<const APPItem*>(
               &_APPItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(APPItem* other);

  // implements Message ----------------------------------------------

  inline APPItem* New() const PROTOBUF_FINAL { return New(NULL); }

  APPItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const APPItem& from);
  void MergeFrom(const APPItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(APPItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:micromsg.APPItem)
 private:
  void set_has_username();
  void clear_has_username();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetAPPListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.SetAPPListRequest) */ {
 public:
  SetAPPListRequest();
  virtual ~SetAPPListRequest();

  SetAPPListRequest(const SetAPPListRequest& from);

  inline SetAPPListRequest& operator=(const SetAPPListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetAPPListRequest& default_instance();

  static inline const SetAPPListRequest* internal_default_instance() {
    return reinterpret_cast<const SetAPPListRequest*>(
               &_SetAPPListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SetAPPListRequest* other);

  // implements Message ----------------------------------------------

  inline SetAPPListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetAPPListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetAPPListRequest& from);
  void MergeFrom(const SetAPPListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetAPPListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.APPItem List = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  const ::micromsg::APPItem& list(int index) const;
  ::micromsg::APPItem* mutable_list(int index);
  ::micromsg::APPItem* add_list();
  ::google::protobuf::RepeatedPtrField< ::micromsg::APPItem >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::APPItem >&
      list() const;

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.SetAPPListRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::APPItem > list_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetAPPListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.SetAPPListResponse) */ {
 public:
  SetAPPListResponse();
  virtual ~SetAPPListResponse();

  SetAPPListResponse(const SetAPPListResponse& from);

  inline SetAPPListResponse& operator=(const SetAPPListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetAPPListResponse& default_instance();

  static inline const SetAPPListResponse* internal_default_instance() {
    return reinterpret_cast<const SetAPPListResponse*>(
               &_SetAPPListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SetAPPListResponse* other);

  // implements Message ----------------------------------------------

  inline SetAPPListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SetAPPListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetAPPListResponse& from);
  void MergeFrom(const SetAPPListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetAPPListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 Hash = 2;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  ::google::protobuf::uint32 hash() const;
  void set_hash(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.SetAPPListResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_hash();
  void clear_has_hash();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 hash_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAPPListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetAPPListRequest) */ {
 public:
  GetAPPListRequest();
  virtual ~GetAPPListRequest();

  GetAPPListRequest(const GetAPPListRequest& from);

  inline GetAPPListRequest& operator=(const GetAPPListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAPPListRequest& default_instance();

  static inline const GetAPPListRequest* internal_default_instance() {
    return reinterpret_cast<const GetAPPListRequest*>(
               &_GetAPPListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(GetAPPListRequest* other);

  // implements Message ----------------------------------------------

  inline GetAPPListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetAPPListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetAPPListRequest& from);
  void MergeFrom(const GetAPPListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetAPPListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 Hash = 2;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  ::google::protobuf::uint32 hash() const;
  void set_hash(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetAPPListRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_hash();
  void clear_has_hash();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 hash_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAPPListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetAPPListResponse) */ {
 public:
  GetAPPListResponse();
  virtual ~GetAPPListResponse();

  GetAPPListResponse(const GetAPPListResponse& from);

  inline GetAPPListResponse& operator=(const GetAPPListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAPPListResponse& default_instance();

  static inline const GetAPPListResponse* internal_default_instance() {
    return reinterpret_cast<const GetAPPListResponse*>(
               &_GetAPPListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(GetAPPListResponse* other);

  // implements Message ----------------------------------------------

  inline GetAPPListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetAPPListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetAPPListResponse& from);
  void MergeFrom(const GetAPPListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetAPPListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.APPItem List = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  const ::micromsg::APPItem& list(int index) const;
  ::micromsg::APPItem* mutable_list(int index);
  ::micromsg::APPItem* add_list();
  ::google::protobuf::RepeatedPtrField< ::micromsg::APPItem >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::APPItem >&
      list() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // required uint32 Hash = 4;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 4;
  ::google::protobuf::uint32 hash() const;
  void set_hash(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetAPPListResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_count();
  void clear_has_count();
  void set_has_hash();
  void clear_has_hash();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::APPItem > list_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 hash_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchQRCodeReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.SearchQRCodeReq) */ {
 public:
  SearchQRCodeReq();
  virtual ~SearchQRCodeReq();

  SearchQRCodeReq(const SearchQRCodeReq& from);

  inline SearchQRCodeReq& operator=(const SearchQRCodeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchQRCodeReq& default_instance();

  static inline const SearchQRCodeReq* internal_default_instance() {
    return reinterpret_cast<const SearchQRCodeReq*>(
               &_SearchQRCodeReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(SearchQRCodeReq* other);

  // implements Message ----------------------------------------------

  inline SearchQRCodeReq* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchQRCodeReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchQRCodeReq& from);
  void MergeFrom(const SearchQRCodeReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchQRCodeReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string QRCode = 2;
  bool has_qrcode() const;
  void clear_qrcode();
  static const int kQRCodeFieldNumber = 2;
  const ::std::string& qrcode() const;
  void set_qrcode(const ::std::string& value);
  #if LANG_CXX11
  void set_qrcode(::std::string&& value);
  #endif
  void set_qrcode(const char* value);
  void set_qrcode(const char* value, size_t size);
  ::std::string* mutable_qrcode();
  ::std::string* release_qrcode();
  void set_allocated_qrcode(::std::string* qrcode);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.SearchQRCodeReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_qrcode();
  void clear_has_qrcode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr qrcode_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchQRCodeResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.SearchQRCodeResp) */ {
 public:
  SearchQRCodeResp();
  virtual ~SearchQRCodeResp();

  SearchQRCodeResp(const SearchQRCodeResp& from);

  inline SearchQRCodeResp& operator=(const SearchQRCodeResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchQRCodeResp& default_instance();

  static inline const SearchQRCodeResp* internal_default_instance() {
    return reinterpret_cast<const SearchQRCodeResp*>(
               &_SearchQRCodeResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(SearchQRCodeResp* other);

  // implements Message ----------------------------------------------

  inline SearchQRCodeResp* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchQRCodeResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchQRCodeResp& from);
  void MergeFrom(const SearchQRCodeResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchQRCodeResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string URL = 3;
  bool has_url() const;
  void clear_url();
  static const int kURLFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 Type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.SearchQRCodeResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_type();
  void clear_has_type();
  void set_has_url();
  void clear_has_url();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 type_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchContactRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.SearchContactRequest) */ {
 public:
  SearchContactRequest();
  virtual ~SearchContactRequest();

  SearchContactRequest(const SearchContactRequest& from);

  inline SearchContactRequest& operator=(const SearchContactRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchContactRequest& default_instance();

  static inline const SearchContactRequest* internal_default_instance() {
    return reinterpret_cast<const SearchContactRequest*>(
               &_SearchContactRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(SearchContactRequest* other);

  // implements Message ----------------------------------------------

  inline SearchContactRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchContactRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchContactRequest& from);
  void MergeFrom(const SearchContactRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchContactRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required .micromsg.SKBuiltinString_t UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::micromsg::SKBuiltinString_t& username() const;
  ::micromsg::SKBuiltinString_t* mutable_username();
  ::micromsg::SKBuiltinString_t* release_username();
  void set_allocated_username(::micromsg::SKBuiltinString_t* username);

  // optional .micromsg.SKBuiltinBuffer_t ReqBuf = 4;
  bool has_reqbuf() const;
  void clear_reqbuf();
  static const int kReqBufFieldNumber = 4;
  const ::micromsg::SKBuiltinBuffer_t& reqbuf() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_reqbuf();
  ::micromsg::SKBuiltinBuffer_t* release_reqbuf();
  void set_allocated_reqbuf(::micromsg::SKBuiltinBuffer_t* reqbuf);

  // optional uint32 OpCode = 3;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpCodeFieldNumber = 3;
  ::google::protobuf::uint32 opcode() const;
  void set_opcode(::google::protobuf::uint32 value);

  // optional uint32 FromScene = 5;
  bool has_fromscene() const;
  void clear_fromscene();
  static const int kFromSceneFieldNumber = 5;
  ::google::protobuf::uint32 fromscene() const;
  void set_fromscene(::google::protobuf::uint32 value);

  // optional uint32 SearchScene = 6;
  bool has_searchscene() const;
  void clear_searchscene();
  static const int kSearchSceneFieldNumber = 6;
  ::google::protobuf::uint32 searchscene() const;
  void set_searchscene(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.SearchContactRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_username();
  void clear_has_username();
  void set_has_opcode();
  void clear_has_opcode();
  void set_has_reqbuf();
  void clear_has_reqbuf();
  void set_has_fromscene();
  void clear_has_fromscene();
  void set_has_searchscene();
  void clear_has_searchscene();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::SKBuiltinString_t* username_;
  ::micromsg::SKBuiltinBuffer_t* reqbuf_;
  ::google::protobuf::uint32 opcode_;
  ::google::protobuf::uint32 fromscene_;
  ::google::protobuf::uint32 searchscene_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchContactItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.SearchContactItem) */ {
 public:
  SearchContactItem();
  virtual ~SearchContactItem();

  SearchContactItem(const SearchContactItem& from);

  inline SearchContactItem& operator=(const SearchContactItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchContactItem& default_instance();

  static inline const SearchContactItem* internal_default_instance() {
    return reinterpret_cast<const SearchContactItem*>(
               &_SearchContactItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(SearchContactItem* other);

  // implements Message ----------------------------------------------

  inline SearchContactItem* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchContactItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchContactItem& from);
  void MergeFrom(const SearchContactItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchContactItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Province = 7;
  bool has_province() const;
  void clear_province();
  static const int kProvinceFieldNumber = 7;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // optional string City = 8;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 8;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional string Signature = 9;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 9;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string VerifyInfo = 12;
  bool has_verifyinfo() const;
  void clear_verifyinfo();
  static const int kVerifyInfoFieldNumber = 12;
  const ::std::string& verifyinfo() const;
  void set_verifyinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_verifyinfo(::std::string&& value);
  #endif
  void set_verifyinfo(const char* value);
  void set_verifyinfo(const char* value, size_t size);
  ::std::string* mutable_verifyinfo();
  ::std::string* release_verifyinfo();
  void set_allocated_verifyinfo(::std::string* verifyinfo);

  // optional string Weibo = 13;
  bool has_weibo() const;
  void clear_weibo();
  static const int kWeiboFieldNumber = 13;
  const ::std::string& weibo() const;
  void set_weibo(const ::std::string& value);
  #if LANG_CXX11
  void set_weibo(::std::string&& value);
  #endif
  void set_weibo(const char* value);
  void set_weibo(const char* value, size_t size);
  ::std::string* mutable_weibo();
  ::std::string* release_weibo();
  void set_allocated_weibo(::std::string* weibo);

  // optional string Alias = 14;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 14;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // optional string WeiboNickname = 15;
  bool has_weibonickname() const;
  void clear_weibonickname();
  static const int kWeiboNicknameFieldNumber = 15;
  const ::std::string& weibonickname() const;
  void set_weibonickname(const ::std::string& value);
  #if LANG_CXX11
  void set_weibonickname(::std::string&& value);
  #endif
  void set_weibonickname(const char* value);
  void set_weibonickname(const char* value, size_t size);
  ::std::string* mutable_weibonickname();
  ::std::string* release_weibonickname();
  void set_allocated_weibonickname(::std::string* weibonickname);

  // optional string AlbumBGImgID = 19;
  bool has_albumbgimgid() const;
  void clear_albumbgimgid();
  static const int kAlbumBGImgIDFieldNumber = 19;
  const ::std::string& albumbgimgid() const;
  void set_albumbgimgid(const ::std::string& value);
  #if LANG_CXX11
  void set_albumbgimgid(::std::string&& value);
  #endif
  void set_albumbgimgid(const char* value);
  void set_albumbgimgid(const char* value, size_t size);
  ::std::string* mutable_albumbgimgid();
  ::std::string* release_albumbgimgid();
  void set_allocated_albumbgimgid(::std::string* albumbgimgid);

  // optional string Country = 21;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 21;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // optional string MyBrandList = 22;
  bool has_mybrandlist() const;
  void clear_mybrandlist();
  static const int kMyBrandListFieldNumber = 22;
  const ::std::string& mybrandlist() const;
  void set_mybrandlist(const ::std::string& value);
  #if LANG_CXX11
  void set_mybrandlist(::std::string&& value);
  #endif
  void set_mybrandlist(const char* value);
  void set_mybrandlist(const char* value, size_t size);
  ::std::string* mutable_mybrandlist();
  ::std::string* release_mybrandlist();
  void set_allocated_mybrandlist(::std::string* mybrandlist);

  // optional string BigHeadImgUrl = 24;
  bool has_bigheadimgurl() const;
  void clear_bigheadimgurl();
  static const int kBigHeadImgUrlFieldNumber = 24;
  const ::std::string& bigheadimgurl() const;
  void set_bigheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_bigheadimgurl(::std::string&& value);
  #endif
  void set_bigheadimgurl(const char* value);
  void set_bigheadimgurl(const char* value, size_t size);
  ::std::string* mutable_bigheadimgurl();
  ::std::string* release_bigheadimgurl();
  void set_allocated_bigheadimgurl(::std::string* bigheadimgurl);

  // optional string SmallHeadImgUrl = 25;
  bool has_smallheadimgurl() const;
  void clear_smallheadimgurl();
  static const int kSmallHeadImgUrlFieldNumber = 25;
  const ::std::string& smallheadimgurl() const;
  void set_smallheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_smallheadimgurl(::std::string&& value);
  #endif
  void set_smallheadimgurl(const char* value);
  void set_smallheadimgurl(const char* value, size_t size);
  ::std::string* mutable_smallheadimgurl();
  ::std::string* release_smallheadimgurl();
  void set_allocated_smallheadimgurl(::std::string* smallheadimgurl);

  // optional string AntispamTicket = 26;
  bool has_antispamticket() const;
  void clear_antispamticket();
  static const int kAntispamTicketFieldNumber = 26;
  const ::std::string& antispamticket() const;
  void set_antispamticket(const ::std::string& value);
  #if LANG_CXX11
  void set_antispamticket(::std::string&& value);
  #endif
  void set_antispamticket(const char* value);
  void set_antispamticket(const char* value, size_t size);
  ::std::string* mutable_antispamticket();
  ::std::string* release_antispamticket();
  void set_allocated_antispamticket(::std::string* antispamticket);

  // required .micromsg.SKBuiltinString_t UserName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::micromsg::SKBuiltinString_t& username() const;
  ::micromsg::SKBuiltinString_t* mutable_username();
  ::micromsg::SKBuiltinString_t* release_username();
  void set_allocated_username(::micromsg::SKBuiltinString_t* username);

  // required .micromsg.SKBuiltinString_t NickName = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  const ::micromsg::SKBuiltinString_t& nickname() const;
  ::micromsg::SKBuiltinString_t* mutable_nickname();
  ::micromsg::SKBuiltinString_t* release_nickname();
  void set_allocated_nickname(::micromsg::SKBuiltinString_t* nickname);

  // required .micromsg.SKBuiltinString_t PYInitial = 3;
  bool has_pyinitial() const;
  void clear_pyinitial();
  static const int kPYInitialFieldNumber = 3;
  const ::micromsg::SKBuiltinString_t& pyinitial() const;
  ::micromsg::SKBuiltinString_t* mutable_pyinitial();
  ::micromsg::SKBuiltinString_t* release_pyinitial();
  void set_allocated_pyinitial(::micromsg::SKBuiltinString_t* pyinitial);

  // required .micromsg.SKBuiltinString_t QuanPin = 4;
  bool has_quanpin() const;
  void clear_quanpin();
  static const int kQuanPinFieldNumber = 4;
  const ::micromsg::SKBuiltinString_t& quanpin() const;
  ::micromsg::SKBuiltinString_t* mutable_quanpin();
  ::micromsg::SKBuiltinString_t* release_quanpin();
  void set_allocated_quanpin(::micromsg::SKBuiltinString_t* quanpin);

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
  bool has_imgbuf() const;
  void clear_imgbuf();
  static const int kImgBufFieldNumber = 6;
  const ::micromsg::SKBuiltinBuffer_t& imgbuf() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* release_imgbuf();
  void set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf);

  // optional .micromsg.SnsUserInfo SnsUserInfo = 20;
  bool has_snsuserinfo() const;
  void clear_snsuserinfo();
  static const int kSnsUserInfoFieldNumber = 20;
  const ::micromsg::SnsUserInfo& snsuserinfo() const;
  ::micromsg::SnsUserInfo* mutable_snsuserinfo();
  ::micromsg::SnsUserInfo* release_snsuserinfo();
  void set_allocated_snsuserinfo(::micromsg::SnsUserInfo* snsuserinfo);

  // optional .micromsg.CustomizedInfo CustomizedInfo = 23;
  bool has_customizedinfo() const;
  void clear_customizedinfo();
  static const int kCustomizedInfoFieldNumber = 23;
  const ::micromsg::CustomizedInfo& customizedinfo() const;
  ::micromsg::CustomizedInfo* mutable_customizedinfo();
  ::micromsg::CustomizedInfo* release_customizedinfo();
  void set_allocated_customizedinfo(::micromsg::CustomizedInfo* customizedinfo);

  // required int32 Sex = 5;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 5;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // optional uint32 PersonalCard = 10;
  bool has_personalcard() const;
  void clear_personalcard();
  static const int kPersonalCardFieldNumber = 10;
  ::google::protobuf::uint32 personalcard() const;
  void set_personalcard(::google::protobuf::uint32 value);

  // optional uint32 VerifyFlag = 11;
  bool has_verifyflag() const;
  void clear_verifyflag();
  static const int kVerifyFlagFieldNumber = 11;
  ::google::protobuf::uint32 verifyflag() const;
  void set_verifyflag(::google::protobuf::uint32 value);

  // optional uint32 WeiboFlag = 16;
  bool has_weiboflag() const;
  void clear_weiboflag();
  static const int kWeiboFlagFieldNumber = 16;
  ::google::protobuf::uint32 weiboflag() const;
  void set_weiboflag(::google::protobuf::uint32 value);

  // optional int32 AlbumStyle = 17;
  bool has_albumstyle() const;
  void clear_albumstyle();
  static const int kAlbumStyleFieldNumber = 17;
  ::google::protobuf::int32 albumstyle() const;
  void set_albumstyle(::google::protobuf::int32 value);

  // optional int32 AlbumFlag = 18;
  bool has_albumflag() const;
  void clear_albumflag();
  static const int kAlbumFlagFieldNumber = 18;
  ::google::protobuf::int32 albumflag() const;
  void set_albumflag(::google::protobuf::int32 value);

  // optional uint32 MatchType = 27;
  bool has_matchtype() const;
  void clear_matchtype();
  static const int kMatchTypeFieldNumber = 27;
  ::google::protobuf::uint32 matchtype() const;
  void set_matchtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.SearchContactItem)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_pyinitial();
  void clear_has_pyinitial();
  void set_has_quanpin();
  void clear_has_quanpin();
  void set_has_sex();
  void clear_has_sex();
  void set_has_imgbuf();
  void clear_has_imgbuf();
  void set_has_province();
  void clear_has_province();
  void set_has_city();
  void clear_has_city();
  void set_has_signature();
  void clear_has_signature();
  void set_has_personalcard();
  void clear_has_personalcard();
  void set_has_verifyflag();
  void clear_has_verifyflag();
  void set_has_verifyinfo();
  void clear_has_verifyinfo();
  void set_has_weibo();
  void clear_has_weibo();
  void set_has_alias();
  void clear_has_alias();
  void set_has_weibonickname();
  void clear_has_weibonickname();
  void set_has_weiboflag();
  void clear_has_weiboflag();
  void set_has_albumstyle();
  void clear_has_albumstyle();
  void set_has_albumflag();
  void clear_has_albumflag();
  void set_has_albumbgimgid();
  void clear_has_albumbgimgid();
  void set_has_snsuserinfo();
  void clear_has_snsuserinfo();
  void set_has_country();
  void clear_has_country();
  void set_has_mybrandlist();
  void clear_has_mybrandlist();
  void set_has_customizedinfo();
  void clear_has_customizedinfo();
  void set_has_bigheadimgurl();
  void clear_has_bigheadimgurl();
  void set_has_smallheadimgurl();
  void clear_has_smallheadimgurl();
  void set_has_antispamticket();
  void clear_has_antispamticket();
  void set_has_matchtype();
  void clear_has_matchtype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr verifyinfo_;
  ::google::protobuf::internal::ArenaStringPtr weibo_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr weibonickname_;
  ::google::protobuf::internal::ArenaStringPtr albumbgimgid_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr mybrandlist_;
  ::google::protobuf::internal::ArenaStringPtr bigheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr smallheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr antispamticket_;
  ::micromsg::SKBuiltinString_t* username_;
  ::micromsg::SKBuiltinString_t* nickname_;
  ::micromsg::SKBuiltinString_t* pyinitial_;
  ::micromsg::SKBuiltinString_t* quanpin_;
  ::micromsg::SKBuiltinBuffer_t* imgbuf_;
  ::micromsg::SnsUserInfo* snsuserinfo_;
  ::micromsg::CustomizedInfo* customizedinfo_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::uint32 personalcard_;
  ::google::protobuf::uint32 verifyflag_;
  ::google::protobuf::uint32 weiboflag_;
  ::google::protobuf::int32 albumstyle_;
  ::google::protobuf::int32 albumflag_;
  ::google::protobuf::uint32 matchtype_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchContactResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.SearchContactResponse) */ {
 public:
  SearchContactResponse();
  virtual ~SearchContactResponse();

  SearchContactResponse(const SearchContactResponse& from);

  inline SearchContactResponse& operator=(const SearchContactResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchContactResponse& default_instance();

  static inline const SearchContactResponse* internal_default_instance() {
    return reinterpret_cast<const SearchContactResponse*>(
               &_SearchContactResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(SearchContactResponse* other);

  // implements Message ----------------------------------------------

  inline SearchContactResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchContactResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchContactResponse& from);
  void MergeFrom(const SearchContactResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchContactResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.SearchContactItem ContactList = 26;
  int contactlist_size() const;
  void clear_contactlist();
  static const int kContactListFieldNumber = 26;
  const ::micromsg::SearchContactItem& contactlist(int index) const;
  ::micromsg::SearchContactItem* mutable_contactlist(int index);
  ::micromsg::SearchContactItem* add_contactlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::SearchContactItem >*
      mutable_contactlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::SearchContactItem >&
      contactlist() const;

  // optional string Province = 8;
  bool has_province() const;
  void clear_province();
  static const int kProvinceFieldNumber = 8;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // optional string City = 9;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 9;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional string Signature = 10;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 10;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string VerifyInfo = 13;
  bool has_verifyinfo() const;
  void clear_verifyinfo();
  static const int kVerifyInfoFieldNumber = 13;
  const ::std::string& verifyinfo() const;
  void set_verifyinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_verifyinfo(::std::string&& value);
  #endif
  void set_verifyinfo(const char* value);
  void set_verifyinfo(const char* value, size_t size);
  ::std::string* mutable_verifyinfo();
  ::std::string* release_verifyinfo();
  void set_allocated_verifyinfo(::std::string* verifyinfo);

  // optional string Weibo = 14;
  bool has_weibo() const;
  void clear_weibo();
  static const int kWeiboFieldNumber = 14;
  const ::std::string& weibo() const;
  void set_weibo(const ::std::string& value);
  #if LANG_CXX11
  void set_weibo(::std::string&& value);
  #endif
  void set_weibo(const char* value);
  void set_weibo(const char* value, size_t size);
  ::std::string* mutable_weibo();
  ::std::string* release_weibo();
  void set_allocated_weibo(::std::string* weibo);

  // optional string Alias = 15;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 15;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // optional string WeiboNickname = 16;
  bool has_weibonickname() const;
  void clear_weibonickname();
  static const int kWeiboNicknameFieldNumber = 16;
  const ::std::string& weibonickname() const;
  void set_weibonickname(const ::std::string& value);
  #if LANG_CXX11
  void set_weibonickname(::std::string&& value);
  #endif
  void set_weibonickname(const char* value);
  void set_weibonickname(const char* value, size_t size);
  ::std::string* mutable_weibonickname();
  ::std::string* release_weibonickname();
  void set_allocated_weibonickname(::std::string* weibonickname);

  // optional string AlbumBGImgID = 20;
  bool has_albumbgimgid() const;
  void clear_albumbgimgid();
  static const int kAlbumBGImgIDFieldNumber = 20;
  const ::std::string& albumbgimgid() const;
  void set_albumbgimgid(const ::std::string& value);
  #if LANG_CXX11
  void set_albumbgimgid(::std::string&& value);
  #endif
  void set_albumbgimgid(const char* value);
  void set_albumbgimgid(const char* value, size_t size);
  ::std::string* mutable_albumbgimgid();
  ::std::string* release_albumbgimgid();
  void set_allocated_albumbgimgid(::std::string* albumbgimgid);

  // optional string Country = 22;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 22;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // optional string MyBrandList = 23;
  bool has_mybrandlist() const;
  void clear_mybrandlist();
  static const int kMyBrandListFieldNumber = 23;
  const ::std::string& mybrandlist() const;
  void set_mybrandlist(const ::std::string& value);
  #if LANG_CXX11
  void set_mybrandlist(::std::string&& value);
  #endif
  void set_mybrandlist(const char* value);
  void set_mybrandlist(const char* value, size_t size);
  ::std::string* mutable_mybrandlist();
  ::std::string* release_mybrandlist();
  void set_allocated_mybrandlist(::std::string* mybrandlist);

  // optional string BigHeadImgUrl = 27;
  bool has_bigheadimgurl() const;
  void clear_bigheadimgurl();
  static const int kBigHeadImgUrlFieldNumber = 27;
  const ::std::string& bigheadimgurl() const;
  void set_bigheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_bigheadimgurl(::std::string&& value);
  #endif
  void set_bigheadimgurl(const char* value);
  void set_bigheadimgurl(const char* value, size_t size);
  ::std::string* mutable_bigheadimgurl();
  ::std::string* release_bigheadimgurl();
  void set_allocated_bigheadimgurl(::std::string* bigheadimgurl);

  // optional string SmallHeadImgUrl = 28;
  bool has_smallheadimgurl() const;
  void clear_smallheadimgurl();
  static const int kSmallHeadImgUrlFieldNumber = 28;
  const ::std::string& smallheadimgurl() const;
  void set_smallheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_smallheadimgurl(::std::string&& value);
  #endif
  void set_smallheadimgurl(const char* value);
  void set_smallheadimgurl(const char* value, size_t size);
  ::std::string* mutable_smallheadimgurl();
  ::std::string* release_smallheadimgurl();
  void set_allocated_smallheadimgurl(::std::string* smallheadimgurl);

  // optional string AntispamTicket = 30;
  bool has_antispamticket() const;
  void clear_antispamticket();
  static const int kAntispamTicketFieldNumber = 30;
  const ::std::string& antispamticket() const;
  void set_antispamticket(const ::std::string& value);
  #if LANG_CXX11
  void set_antispamticket(::std::string&& value);
  #endif
  void set_antispamticket(const char* value);
  void set_antispamticket(const char* value, size_t size);
  ::std::string* mutable_antispamticket();
  ::std::string* release_antispamticket();
  void set_allocated_antispamticket(::std::string* antispamticket);

  // optional string KFWorkerID = 31;
  bool has_kfworkerid() const;
  void clear_kfworkerid();
  static const int kKFWorkerIDFieldNumber = 31;
  const ::std::string& kfworkerid() const;
  void set_kfworkerid(const ::std::string& value);
  #if LANG_CXX11
  void set_kfworkerid(::std::string&& value);
  #endif
  void set_kfworkerid(const char* value);
  void set_kfworkerid(const char* value, size_t size);
  ::std::string* mutable_kfworkerid();
  ::std::string* release_kfworkerid();
  void set_allocated_kfworkerid(::std::string* kfworkerid);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required .micromsg.SKBuiltinString_t UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::micromsg::SKBuiltinString_t& username() const;
  ::micromsg::SKBuiltinString_t* mutable_username();
  ::micromsg::SKBuiltinString_t* release_username();
  void set_allocated_username(::micromsg::SKBuiltinString_t* username);

  // required .micromsg.SKBuiltinString_t NickName = 3;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 3;
  const ::micromsg::SKBuiltinString_t& nickname() const;
  ::micromsg::SKBuiltinString_t* mutable_nickname();
  ::micromsg::SKBuiltinString_t* release_nickname();
  void set_allocated_nickname(::micromsg::SKBuiltinString_t* nickname);

  // required .micromsg.SKBuiltinString_t PYInitial = 4;
  bool has_pyinitial() const;
  void clear_pyinitial();
  static const int kPYInitialFieldNumber = 4;
  const ::micromsg::SKBuiltinString_t& pyinitial() const;
  ::micromsg::SKBuiltinString_t* mutable_pyinitial();
  ::micromsg::SKBuiltinString_t* release_pyinitial();
  void set_allocated_pyinitial(::micromsg::SKBuiltinString_t* pyinitial);

  // required .micromsg.SKBuiltinString_t QuanPin = 5;
  bool has_quanpin() const;
  void clear_quanpin();
  static const int kQuanPinFieldNumber = 5;
  const ::micromsg::SKBuiltinString_t& quanpin() const;
  ::micromsg::SKBuiltinString_t* mutable_quanpin();
  ::micromsg::SKBuiltinString_t* release_quanpin();
  void set_allocated_quanpin(::micromsg::SKBuiltinString_t* quanpin);

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 7;
  bool has_imgbuf() const;
  void clear_imgbuf();
  static const int kImgBufFieldNumber = 7;
  const ::micromsg::SKBuiltinBuffer_t& imgbuf() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* release_imgbuf();
  void set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf);

  // optional .micromsg.SnsUserInfo SnsUserInfo = 21;
  bool has_snsuserinfo() const;
  void clear_snsuserinfo();
  static const int kSnsUserInfoFieldNumber = 21;
  const ::micromsg::SnsUserInfo& snsuserinfo() const;
  ::micromsg::SnsUserInfo* mutable_snsuserinfo();
  ::micromsg::SnsUserInfo* release_snsuserinfo();
  void set_allocated_snsuserinfo(::micromsg::SnsUserInfo* snsuserinfo);

  // optional .micromsg.CustomizedInfo CustomizedInfo = 24;
  bool has_customizedinfo() const;
  void clear_customizedinfo();
  static const int kCustomizedInfoFieldNumber = 24;
  const ::micromsg::CustomizedInfo& customizedinfo() const;
  ::micromsg::CustomizedInfo* mutable_customizedinfo();
  ::micromsg::CustomizedInfo* release_customizedinfo();
  void set_allocated_customizedinfo(::micromsg::CustomizedInfo* customizedinfo);

  // optional .micromsg.SKBuiltinBuffer_t ResBuf = 29;
  bool has_resbuf() const;
  void clear_resbuf();
  static const int kResBufFieldNumber = 29;
  const ::micromsg::SKBuiltinBuffer_t& resbuf() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_resbuf();
  ::micromsg::SKBuiltinBuffer_t* release_resbuf();
  void set_allocated_resbuf(::micromsg::SKBuiltinBuffer_t* resbuf);

  // required int32 Sex = 6;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 6;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // optional uint32 PersonalCard = 11;
  bool has_personalcard() const;
  void clear_personalcard();
  static const int kPersonalCardFieldNumber = 11;
  ::google::protobuf::uint32 personalcard() const;
  void set_personalcard(::google::protobuf::uint32 value);

  // optional uint32 VerifyFlag = 12;
  bool has_verifyflag() const;
  void clear_verifyflag();
  static const int kVerifyFlagFieldNumber = 12;
  ::google::protobuf::uint32 verifyflag() const;
  void set_verifyflag(::google::protobuf::uint32 value);

  // optional uint32 WeiboFlag = 17;
  bool has_weiboflag() const;
  void clear_weiboflag();
  static const int kWeiboFlagFieldNumber = 17;
  ::google::protobuf::uint32 weiboflag() const;
  void set_weiboflag(::google::protobuf::uint32 value);

  // optional int32 AlbumStyle = 18;
  bool has_albumstyle() const;
  void clear_albumstyle();
  static const int kAlbumStyleFieldNumber = 18;
  ::google::protobuf::int32 albumstyle() const;
  void set_albumstyle(::google::protobuf::int32 value);

  // optional int32 AlbumFlag = 19;
  bool has_albumflag() const;
  void clear_albumflag();
  static const int kAlbumFlagFieldNumber = 19;
  ::google::protobuf::int32 albumflag() const;
  void set_albumflag(::google::protobuf::int32 value);

  // optional uint32 ContactCount = 25;
  bool has_contactcount() const;
  void clear_contactcount();
  static const int kContactCountFieldNumber = 25;
  ::google::protobuf::uint32 contactcount() const;
  void set_contactcount(::google::protobuf::uint32 value);

  // optional uint32 MatchType = 32;
  bool has_matchtype() const;
  void clear_matchtype();
  static const int kMatchTypeFieldNumber = 32;
  ::google::protobuf::uint32 matchtype() const;
  void set_matchtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.SearchContactResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_username();
  void clear_has_username();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_pyinitial();
  void clear_has_pyinitial();
  void set_has_quanpin();
  void clear_has_quanpin();
  void set_has_sex();
  void clear_has_sex();
  void set_has_imgbuf();
  void clear_has_imgbuf();
  void set_has_province();
  void clear_has_province();
  void set_has_city();
  void clear_has_city();
  void set_has_signature();
  void clear_has_signature();
  void set_has_personalcard();
  void clear_has_personalcard();
  void set_has_verifyflag();
  void clear_has_verifyflag();
  void set_has_verifyinfo();
  void clear_has_verifyinfo();
  void set_has_weibo();
  void clear_has_weibo();
  void set_has_alias();
  void clear_has_alias();
  void set_has_weibonickname();
  void clear_has_weibonickname();
  void set_has_weiboflag();
  void clear_has_weiboflag();
  void set_has_albumstyle();
  void clear_has_albumstyle();
  void set_has_albumflag();
  void clear_has_albumflag();
  void set_has_albumbgimgid();
  void clear_has_albumbgimgid();
  void set_has_snsuserinfo();
  void clear_has_snsuserinfo();
  void set_has_country();
  void clear_has_country();
  void set_has_mybrandlist();
  void clear_has_mybrandlist();
  void set_has_customizedinfo();
  void clear_has_customizedinfo();
  void set_has_contactcount();
  void clear_has_contactcount();
  void set_has_bigheadimgurl();
  void clear_has_bigheadimgurl();
  void set_has_smallheadimgurl();
  void clear_has_smallheadimgurl();
  void set_has_resbuf();
  void clear_has_resbuf();
  void set_has_antispamticket();
  void clear_has_antispamticket();
  void set_has_kfworkerid();
  void clear_has_kfworkerid();
  void set_has_matchtype();
  void clear_has_matchtype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::SearchContactItem > contactlist_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr verifyinfo_;
  ::google::protobuf::internal::ArenaStringPtr weibo_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr weibonickname_;
  ::google::protobuf::internal::ArenaStringPtr albumbgimgid_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr mybrandlist_;
  ::google::protobuf::internal::ArenaStringPtr bigheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr smallheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr antispamticket_;
  ::google::protobuf::internal::ArenaStringPtr kfworkerid_;
  ::micromsg::BaseResponse* baseresponse_;
  ::micromsg::SKBuiltinString_t* username_;
  ::micromsg::SKBuiltinString_t* nickname_;
  ::micromsg::SKBuiltinString_t* pyinitial_;
  ::micromsg::SKBuiltinString_t* quanpin_;
  ::micromsg::SKBuiltinBuffer_t* imgbuf_;
  ::micromsg::SnsUserInfo* snsuserinfo_;
  ::micromsg::CustomizedInfo* customizedinfo_;
  ::micromsg::SKBuiltinBuffer_t* resbuf_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::uint32 personalcard_;
  ::google::protobuf::uint32 verifyflag_;
  ::google::protobuf::uint32 weiboflag_;
  ::google::protobuf::int32 albumstyle_;
  ::google::protobuf::int32 albumflag_;
  ::google::protobuf::uint32 contactcount_;
  ::google::protobuf::uint32 matchtype_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupCardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GroupCardReq) */ {
 public:
  GroupCardReq();
  virtual ~GroupCardReq();

  GroupCardReq(const GroupCardReq& from);

  inline GroupCardReq& operator=(const GroupCardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupCardReq& default_instance();

  static inline const GroupCardReq* internal_default_instance() {
    return reinterpret_cast<const GroupCardReq*>(
               &_GroupCardReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(GroupCardReq* other);

  // implements Message ----------------------------------------------

  inline GroupCardReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupCardReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GroupCardReq& from);
  void MergeFrom(const GroupCardReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupCardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string GroupCardName = 1;
  bool has_groupcardname() const;
  void clear_groupcardname();
  static const int kGroupCardNameFieldNumber = 1;
  const ::std::string& groupcardname() const;
  void set_groupcardname(const ::std::string& value);
  #if LANG_CXX11
  void set_groupcardname(::std::string&& value);
  #endif
  void set_groupcardname(const char* value);
  void set_groupcardname(const char* value, size_t size);
  ::std::string* mutable_groupcardname();
  ::std::string* release_groupcardname();
  void set_allocated_groupcardname(::std::string* groupcardname);

  // @@protoc_insertion_point(class_scope:micromsg.GroupCardReq)
 private:
  void set_has_groupcardname();
  void clear_has_groupcardname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr groupcardname_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RadarMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.RadarMember) */ {
 public:
  RadarMember();
  virtual ~RadarMember();

  RadarMember(const RadarMember& from);

  inline RadarMember& operator=(const RadarMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarMember& default_instance();

  static inline const RadarMember* internal_default_instance() {
    return reinterpret_cast<const RadarMember*>(
               &_RadarMember_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(RadarMember* other);

  // implements Message ----------------------------------------------

  inline RadarMember* New() const PROTOBUF_FINAL { return New(NULL); }

  RadarMember* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RadarMember& from);
  void MergeFrom(const RadarMember& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RadarMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MemberName = 1;
  bool has_membername() const;
  void clear_membername();
  static const int kMemberNameFieldNumber = 1;
  const ::std::string& membername() const;
  void set_membername(const ::std::string& value);
  #if LANG_CXX11
  void set_membername(::std::string&& value);
  #endif
  void set_membername(const char* value);
  void set_membername(const char* value, size_t size);
  ::std::string* mutable_membername();
  ::std::string* release_membername();
  void set_allocated_membername(::std::string* membername);

  // @@protoc_insertion_point(class_scope:micromsg.RadarMember)
 private:
  void set_has_membername();
  void clear_has_membername();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr membername_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RadarCreateChatRoomParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.RadarCreateChatRoomParameter) */ {
 public:
  RadarCreateChatRoomParameter();
  virtual ~RadarCreateChatRoomParameter();

  RadarCreateChatRoomParameter(const RadarCreateChatRoomParameter& from);

  inline RadarCreateChatRoomParameter& operator=(const RadarCreateChatRoomParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarCreateChatRoomParameter& default_instance();

  static inline const RadarCreateChatRoomParameter* internal_default_instance() {
    return reinterpret_cast<const RadarCreateChatRoomParameter*>(
               &_RadarCreateChatRoomParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(RadarCreateChatRoomParameter* other);

  // implements Message ----------------------------------------------

  inline RadarCreateChatRoomParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  RadarCreateChatRoomParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RadarCreateChatRoomParameter& from);
  void MergeFrom(const RadarCreateChatRoomParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RadarCreateChatRoomParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.RadarMember RadarMemberList = 3;
  int radarmemberlist_size() const;
  void clear_radarmemberlist();
  static const int kRadarMemberListFieldNumber = 3;
  const ::micromsg::RadarMember& radarmemberlist(int index) const;
  ::micromsg::RadarMember* mutable_radarmemberlist(int index);
  ::micromsg::RadarMember* add_radarmemberlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::RadarMember >*
      mutable_radarmemberlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::RadarMember >&
      radarmemberlist() const;

  // optional string Ticket = 1;
  bool has_ticket() const;
  void clear_ticket();
  static const int kTicketFieldNumber = 1;
  const ::std::string& ticket() const;
  void set_ticket(const ::std::string& value);
  #if LANG_CXX11
  void set_ticket(::std::string&& value);
  #endif
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  ::std::string* mutable_ticket();
  ::std::string* release_ticket();
  void set_allocated_ticket(::std::string* ticket);

  // optional uint32 RadarMemberCount = 2;
  bool has_radarmembercount() const;
  void clear_radarmembercount();
  static const int kRadarMemberCountFieldNumber = 2;
  ::google::protobuf::uint32 radarmembercount() const;
  void set_radarmembercount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.RadarCreateChatRoomParameter)
 private:
  void set_has_ticket();
  void clear_has_ticket();
  void set_has_radarmembercount();
  void clear_has_radarmembercount();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::RadarMember > radarmemberlist_;
  ::google::protobuf::internal::ArenaStringPtr ticket_;
  ::google::protobuf::uint32 radarmembercount_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateChatRoomRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.CreateChatRoomRequest) */ {
 public:
  CreateChatRoomRequest();
  virtual ~CreateChatRoomRequest();

  CreateChatRoomRequest(const CreateChatRoomRequest& from);

  inline CreateChatRoomRequest& operator=(const CreateChatRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateChatRoomRequest& default_instance();

  static inline const CreateChatRoomRequest* internal_default_instance() {
    return reinterpret_cast<const CreateChatRoomRequest*>(
               &_CreateChatRoomRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(CreateChatRoomRequest* other);

  // implements Message ----------------------------------------------

  inline CreateChatRoomRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateChatRoomRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateChatRoomRequest& from);
  void MergeFrom(const CreateChatRoomRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateChatRoomRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.MemberReq MemberList = 4;
  int memberlist_size() const;
  void clear_memberlist();
  static const int kMemberListFieldNumber = 4;
  const ::micromsg::MemberReq& memberlist(int index) const;
  ::micromsg::MemberReq* mutable_memberlist(int index);
  ::micromsg::MemberReq* add_memberlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >*
      mutable_memberlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >&
      memberlist() const;

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required .micromsg.SKBuiltinString_t Topic = 2;
  bool has_topic() const;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::micromsg::SKBuiltinString_t& topic() const;
  ::micromsg::SKBuiltinString_t* mutable_topic();
  ::micromsg::SKBuiltinString_t* release_topic();
  void set_allocated_topic(::micromsg::SKBuiltinString_t* topic);

  // optional .micromsg.SKBuiltinBuffer_t ExtBuffer = 6;
  bool has_extbuffer() const;
  void clear_extbuffer();
  static const int kExtBufferFieldNumber = 6;
  const ::micromsg::SKBuiltinBuffer_t& extbuffer() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_extbuffer();
  ::micromsg::SKBuiltinBuffer_t* release_extbuffer();
  void set_allocated_extbuffer(::micromsg::SKBuiltinBuffer_t* extbuffer);

  // required uint32 MemberCount = 3;
  bool has_membercount() const;
  void clear_membercount();
  static const int kMemberCountFieldNumber = 3;
  ::google::protobuf::uint32 membercount() const;
  void set_membercount(::google::protobuf::uint32 value);

  // optional uint32 Scene = 5;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 5;
  ::google::protobuf::uint32 scene() const;
  void set_scene(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.CreateChatRoomRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_topic();
  void clear_has_topic();
  void set_has_membercount();
  void clear_has_membercount();
  void set_has_scene();
  void clear_has_scene();
  void set_has_extbuffer();
  void clear_has_extbuffer();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq > memberlist_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::SKBuiltinString_t* topic_;
  ::micromsg::SKBuiltinBuffer_t* extbuffer_;
  ::google::protobuf::uint32 membercount_;
  ::google::protobuf::uint32 scene_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateChatRoomResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.CreateChatRoomResponse) */ {
 public:
  CreateChatRoomResponse();
  virtual ~CreateChatRoomResponse();

  CreateChatRoomResponse(const CreateChatRoomResponse& from);

  inline CreateChatRoomResponse& operator=(const CreateChatRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateChatRoomResponse& default_instance();

  static inline const CreateChatRoomResponse* internal_default_instance() {
    return reinterpret_cast<const CreateChatRoomResponse*>(
               &_CreateChatRoomResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(CreateChatRoomResponse* other);

  // implements Message ----------------------------------------------

  inline CreateChatRoomResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateChatRoomResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateChatRoomResponse& from);
  void MergeFrom(const CreateChatRoomResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateChatRoomResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.MemberResp MemberList = 6;
  int memberlist_size() const;
  void clear_memberlist();
  static const int kMemberListFieldNumber = 6;
  const ::micromsg::MemberResp& memberlist(int index) const;
  ::micromsg::MemberResp* mutable_memberlist(int index);
  ::micromsg::MemberResp* add_memberlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >*
      mutable_memberlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >&
      memberlist() const;

  // optional string BigHeadImgUrl = 9;
  bool has_bigheadimgurl() const;
  void clear_bigheadimgurl();
  static const int kBigHeadImgUrlFieldNumber = 9;
  const ::std::string& bigheadimgurl() const;
  void set_bigheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_bigheadimgurl(::std::string&& value);
  #endif
  void set_bigheadimgurl(const char* value);
  void set_bigheadimgurl(const char* value, size_t size);
  ::std::string* mutable_bigheadimgurl();
  ::std::string* release_bigheadimgurl();
  void set_allocated_bigheadimgurl(::std::string* bigheadimgurl);

  // optional string SmallHeadImgUrl = 10;
  bool has_smallheadimgurl() const;
  void clear_smallheadimgurl();
  static const int kSmallHeadImgUrlFieldNumber = 10;
  const ::std::string& smallheadimgurl() const;
  void set_smallheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_smallheadimgurl(::std::string&& value);
  #endif
  void set_smallheadimgurl(const char* value);
  void set_smallheadimgurl(const char* value, size_t size);
  ::std::string* mutable_smallheadimgurl();
  ::std::string* release_smallheadimgurl();
  void set_allocated_smallheadimgurl(::std::string* smallheadimgurl);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required .micromsg.SKBuiltinString_t Topic = 2;
  bool has_topic() const;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::micromsg::SKBuiltinString_t& topic() const;
  ::micromsg::SKBuiltinString_t* mutable_topic();
  ::micromsg::SKBuiltinString_t* release_topic();
  void set_allocated_topic(::micromsg::SKBuiltinString_t* topic);

  // required .micromsg.SKBuiltinString_t PYInitial = 3;
  bool has_pyinitial() const;
  void clear_pyinitial();
  static const int kPYInitialFieldNumber = 3;
  const ::micromsg::SKBuiltinString_t& pyinitial() const;
  ::micromsg::SKBuiltinString_t* mutable_pyinitial();
  ::micromsg::SKBuiltinString_t* release_pyinitial();
  void set_allocated_pyinitial(::micromsg::SKBuiltinString_t* pyinitial);

  // required .micromsg.SKBuiltinString_t QuanPin = 4;
  bool has_quanpin() const;
  void clear_quanpin();
  static const int kQuanPinFieldNumber = 4;
  const ::micromsg::SKBuiltinString_t& quanpin() const;
  ::micromsg::SKBuiltinString_t* mutable_quanpin();
  ::micromsg::SKBuiltinString_t* release_quanpin();
  void set_allocated_quanpin(::micromsg::SKBuiltinString_t* quanpin);

  // required .micromsg.SKBuiltinString_t ChatRoomName = 7;
  bool has_chatroomname() const;
  void clear_chatroomname();
  static const int kChatRoomNameFieldNumber = 7;
  const ::micromsg::SKBuiltinString_t& chatroomname() const;
  ::micromsg::SKBuiltinString_t* mutable_chatroomname();
  ::micromsg::SKBuiltinString_t* release_chatroomname();
  void set_allocated_chatroomname(::micromsg::SKBuiltinString_t* chatroomname);

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
  bool has_imgbuf() const;
  void clear_imgbuf();
  static const int kImgBufFieldNumber = 8;
  const ::micromsg::SKBuiltinBuffer_t& imgbuf() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* release_imgbuf();
  void set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf);

  // required uint32 MemberCount = 5;
  bool has_membercount() const;
  void clear_membercount();
  static const int kMemberCountFieldNumber = 5;
  ::google::protobuf::uint32 membercount() const;
  void set_membercount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.CreateChatRoomResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_topic();
  void clear_has_topic();
  void set_has_pyinitial();
  void clear_has_pyinitial();
  void set_has_quanpin();
  void clear_has_quanpin();
  void set_has_membercount();
  void clear_has_membercount();
  void set_has_chatroomname();
  void clear_has_chatroomname();
  void set_has_imgbuf();
  void clear_has_imgbuf();
  void set_has_bigheadimgurl();
  void clear_has_bigheadimgurl();
  void set_has_smallheadimgurl();
  void clear_has_smallheadimgurl();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp > memberlist_;
  ::google::protobuf::internal::ArenaStringPtr bigheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr smallheadimgurl_;
  ::micromsg::BaseResponse* baseresponse_;
  ::micromsg::SKBuiltinString_t* topic_;
  ::micromsg::SKBuiltinString_t* pyinitial_;
  ::micromsg::SKBuiltinString_t* quanpin_;
  ::micromsg::SKBuiltinString_t* chatroomname_;
  ::micromsg::SKBuiltinBuffer_t* imgbuf_;
  ::google::protobuf::uint32 membercount_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddChatRoomMemberRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.AddChatRoomMemberRequest) */ {
 public:
  AddChatRoomMemberRequest();
  virtual ~AddChatRoomMemberRequest();

  AddChatRoomMemberRequest(const AddChatRoomMemberRequest& from);

  inline AddChatRoomMemberRequest& operator=(const AddChatRoomMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddChatRoomMemberRequest& default_instance();

  static inline const AddChatRoomMemberRequest* internal_default_instance() {
    return reinterpret_cast<const AddChatRoomMemberRequest*>(
               &_AddChatRoomMemberRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(AddChatRoomMemberRequest* other);

  // implements Message ----------------------------------------------

  inline AddChatRoomMemberRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AddChatRoomMemberRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddChatRoomMemberRequest& from);
  void MergeFrom(const AddChatRoomMemberRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddChatRoomMemberRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.MemberReq MemberList = 3;
  int memberlist_size() const;
  void clear_memberlist();
  static const int kMemberListFieldNumber = 3;
  const ::micromsg::MemberReq& memberlist(int index) const;
  ::micromsg::MemberReq* mutable_memberlist(int index);
  ::micromsg::MemberReq* add_memberlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >*
      mutable_memberlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >&
      memberlist() const;

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required .micromsg.SKBuiltinString_t ChatRoomName = 4;
  bool has_chatroomname() const;
  void clear_chatroomname();
  static const int kChatRoomNameFieldNumber = 4;
  const ::micromsg::SKBuiltinString_t& chatroomname() const;
  ::micromsg::SKBuiltinString_t* mutable_chatroomname();
  ::micromsg::SKBuiltinString_t* release_chatroomname();
  void set_allocated_chatroomname(::micromsg::SKBuiltinString_t* chatroomname);

  // required uint32 MemberCount = 2;
  bool has_membercount() const;
  void clear_membercount();
  static const int kMemberCountFieldNumber = 2;
  ::google::protobuf::uint32 membercount() const;
  void set_membercount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.AddChatRoomMemberRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_membercount();
  void clear_has_membercount();
  void set_has_chatroomname();
  void clear_has_chatroomname();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq > memberlist_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::SKBuiltinString_t* chatroomname_;
  ::google::protobuf::uint32 membercount_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddChatRoomMemberResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.AddChatRoomMemberResponse) */ {
 public:
  AddChatRoomMemberResponse();
  virtual ~AddChatRoomMemberResponse();

  AddChatRoomMemberResponse(const AddChatRoomMemberResponse& from);

  inline AddChatRoomMemberResponse& operator=(const AddChatRoomMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddChatRoomMemberResponse& default_instance();

  static inline const AddChatRoomMemberResponse* internal_default_instance() {
    return reinterpret_cast<const AddChatRoomMemberResponse*>(
               &_AddChatRoomMemberResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(AddChatRoomMemberResponse* other);

  // implements Message ----------------------------------------------

  inline AddChatRoomMemberResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AddChatRoomMemberResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddChatRoomMemberResponse& from);
  void MergeFrom(const AddChatRoomMemberResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddChatRoomMemberResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.MemberResp MemberList = 3;
  int memberlist_size() const;
  void clear_memberlist();
  static const int kMemberListFieldNumber = 3;
  const ::micromsg::MemberResp& memberlist(int index) const;
  ::micromsg::MemberResp* mutable_memberlist(int index);
  ::micromsg::MemberResp* add_memberlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >*
      mutable_memberlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >&
      memberlist() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 MemberCount = 2;
  bool has_membercount() const;
  void clear_membercount();
  static const int kMemberCountFieldNumber = 2;
  ::google::protobuf::uint32 membercount() const;
  void set_membercount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.AddChatRoomMemberResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_membercount();
  void clear_has_membercount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp > memberlist_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 membercount_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DelChatRoomMemberRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.DelChatRoomMemberRequest) */ {
 public:
  DelChatRoomMemberRequest();
  virtual ~DelChatRoomMemberRequest();

  DelChatRoomMemberRequest(const DelChatRoomMemberRequest& from);

  inline DelChatRoomMemberRequest& operator=(const DelChatRoomMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelChatRoomMemberRequest& default_instance();

  static inline const DelChatRoomMemberRequest* internal_default_instance() {
    return reinterpret_cast<const DelChatRoomMemberRequest*>(
               &_DelChatRoomMemberRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(DelChatRoomMemberRequest* other);

  // implements Message ----------------------------------------------

  inline DelChatRoomMemberRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DelChatRoomMemberRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DelChatRoomMemberRequest& from);
  void MergeFrom(const DelChatRoomMemberRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DelChatRoomMemberRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.DelMemberReq MemberList = 3;
  int memberlist_size() const;
  void clear_memberlist();
  static const int kMemberListFieldNumber = 3;
  const ::micromsg::DelMemberReq& memberlist(int index) const;
  ::micromsg::DelMemberReq* mutable_memberlist(int index);
  ::micromsg::DelMemberReq* add_memberlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberReq >*
      mutable_memberlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberReq >&
      memberlist() const;

  // optional string ChatRoomName = 4;
  bool has_chatroomname() const;
  void clear_chatroomname();
  static const int kChatRoomNameFieldNumber = 4;
  const ::std::string& chatroomname() const;
  void set_chatroomname(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomname(::std::string&& value);
  #endif
  void set_chatroomname(const char* value);
  void set_chatroomname(const char* value, size_t size);
  ::std::string* mutable_chatroomname();
  ::std::string* release_chatroomname();
  void set_allocated_chatroomname(::std::string* chatroomname);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 MemberCount = 2;
  bool has_membercount() const;
  void clear_membercount();
  static const int kMemberCountFieldNumber = 2;
  ::google::protobuf::uint32 membercount() const;
  void set_membercount(::google::protobuf::uint32 value);

  // optional uint32 Scene = 5;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 5;
  ::google::protobuf::uint32 scene() const;
  void set_scene(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.DelChatRoomMemberRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_membercount();
  void clear_has_membercount();
  void set_has_chatroomname();
  void clear_has_chatroomname();
  void set_has_scene();
  void clear_has_scene();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberReq > memberlist_;
  ::google::protobuf::internal::ArenaStringPtr chatroomname_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 membercount_;
  ::google::protobuf::uint32 scene_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DelChatRoomMemberResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.DelChatRoomMemberResponse) */ {
 public:
  DelChatRoomMemberResponse();
  virtual ~DelChatRoomMemberResponse();

  DelChatRoomMemberResponse(const DelChatRoomMemberResponse& from);

  inline DelChatRoomMemberResponse& operator=(const DelChatRoomMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelChatRoomMemberResponse& default_instance();

  static inline const DelChatRoomMemberResponse* internal_default_instance() {
    return reinterpret_cast<const DelChatRoomMemberResponse*>(
               &_DelChatRoomMemberResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(DelChatRoomMemberResponse* other);

  // implements Message ----------------------------------------------

  inline DelChatRoomMemberResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DelChatRoomMemberResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DelChatRoomMemberResponse& from);
  void MergeFrom(const DelChatRoomMemberResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DelChatRoomMemberResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.DelMemberResp MemberList = 3;
  int memberlist_size() const;
  void clear_memberlist();
  static const int kMemberListFieldNumber = 3;
  const ::micromsg::DelMemberResp& memberlist(int index) const;
  ::micromsg::DelMemberResp* mutable_memberlist(int index);
  ::micromsg::DelMemberResp* add_memberlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberResp >*
      mutable_memberlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberResp >&
      memberlist() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 MemberCount = 2;
  bool has_membercount() const;
  void clear_membercount();
  static const int kMemberCountFieldNumber = 2;
  ::google::protobuf::uint32 membercount() const;
  void set_membercount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.DelChatRoomMemberResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_membercount();
  void clear_has_membercount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberResp > memberlist_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 membercount_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CollectChatRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.CollectChatRoomReq) */ {
 public:
  CollectChatRoomReq();
  virtual ~CollectChatRoomReq();

  CollectChatRoomReq(const CollectChatRoomReq& from);

  inline CollectChatRoomReq& operator=(const CollectChatRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CollectChatRoomReq& default_instance();

  static inline const CollectChatRoomReq* internal_default_instance() {
    return reinterpret_cast<const CollectChatRoomReq*>(
               &_CollectChatRoomReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(CollectChatRoomReq* other);

  // implements Message ----------------------------------------------

  inline CollectChatRoomReq* New() const PROTOBUF_FINAL { return New(NULL); }

  CollectChatRoomReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CollectChatRoomReq& from);
  void MergeFrom(const CollectChatRoomReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CollectChatRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.GroupCardReq GroupCardList = 3;
  int groupcardlist_size() const;
  void clear_groupcardlist();
  static const int kGroupCardListFieldNumber = 3;
  const ::micromsg::GroupCardReq& groupcardlist(int index) const;
  ::micromsg::GroupCardReq* mutable_groupcardlist(int index);
  ::micromsg::GroupCardReq* add_groupcardlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::GroupCardReq >*
      mutable_groupcardlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::GroupCardReq >&
      groupcardlist() const;

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 GroupCardCount = 2;
  bool has_groupcardcount() const;
  void clear_groupcardcount();
  static const int kGroupCardCountFieldNumber = 2;
  ::google::protobuf::uint32 groupcardcount() const;
  void set_groupcardcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.CollectChatRoomReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_groupcardcount();
  void clear_has_groupcardcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::GroupCardReq > groupcardlist_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 groupcardcount_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CollectChatRoomResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.CollectChatRoomResp) */ {
 public:
  CollectChatRoomResp();
  virtual ~CollectChatRoomResp();

  CollectChatRoomResp(const CollectChatRoomResp& from);

  inline CollectChatRoomResp& operator=(const CollectChatRoomResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CollectChatRoomResp& default_instance();

  static inline const CollectChatRoomResp* internal_default_instance() {
    return reinterpret_cast<const CollectChatRoomResp*>(
               &_CollectChatRoomResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(CollectChatRoomResp* other);

  // implements Message ----------------------------------------------

  inline CollectChatRoomResp* New() const PROTOBUF_FINAL { return New(NULL); }

  CollectChatRoomResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CollectChatRoomResp& from);
  void MergeFrom(const CollectChatRoomResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CollectChatRoomResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.CollectChatRoomResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatchGetHeadImgRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BatchGetHeadImgRequest) */ {
 public:
  BatchGetHeadImgRequest();
  virtual ~BatchGetHeadImgRequest();

  BatchGetHeadImgRequest(const BatchGetHeadImgRequest& from);

  inline BatchGetHeadImgRequest& operator=(const BatchGetHeadImgRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchGetHeadImgRequest& default_instance();

  static inline const BatchGetHeadImgRequest* internal_default_instance() {
    return reinterpret_cast<const BatchGetHeadImgRequest*>(
               &_BatchGetHeadImgRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(BatchGetHeadImgRequest* other);

  // implements Message ----------------------------------------------

  inline BatchGetHeadImgRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchGetHeadImgRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchGetHeadImgRequest& from);
  void MergeFrom(const BatchGetHeadImgRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchGetHeadImgRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.SKBuiltinString_t UserNameList = 3;
  int usernamelist_size() const;
  void clear_usernamelist();
  static const int kUserNameListFieldNumber = 3;
  const ::micromsg::SKBuiltinString_t& usernamelist(int index) const;
  ::micromsg::SKBuiltinString_t* mutable_usernamelist(int index);
  ::micromsg::SKBuiltinString_t* add_usernamelist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
      mutable_usernamelist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
      usernamelist() const;

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.BatchGetHeadImgRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t > usernamelist_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImgPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.ImgPair) */ {
 public:
  ImgPair();
  virtual ~ImgPair();

  ImgPair(const ImgPair& from);

  inline ImgPair& operator=(const ImgPair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImgPair& default_instance();

  static inline const ImgPair* internal_default_instance() {
    return reinterpret_cast<const ImgPair*>(
               &_ImgPair_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(ImgPair* other);

  // implements Message ----------------------------------------------

  inline ImgPair* New() const PROTOBUF_FINAL { return New(NULL); }

  ImgPair* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImgPair& from);
  void MergeFrom(const ImgPair& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImgPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 1;
  bool has_imgbuf() const;
  void clear_imgbuf();
  static const int kImgBufFieldNumber = 1;
  const ::micromsg::SKBuiltinBuffer_t& imgbuf() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* release_imgbuf();
  void set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf);

  // required .micromsg.SKBuiltinString_t Username = 2;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::micromsg::SKBuiltinString_t& username() const;
  ::micromsg::SKBuiltinString_t* mutable_username();
  ::micromsg::SKBuiltinString_t* release_username();
  void set_allocated_username(::micromsg::SKBuiltinString_t* username);

  // @@protoc_insertion_point(class_scope:micromsg.ImgPair)
 private:
  void set_has_imgbuf();
  void clear_has_imgbuf();
  void set_has_username();
  void clear_has_username();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::SKBuiltinBuffer_t* imgbuf_;
  ::micromsg::SKBuiltinString_t* username_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatchGetHeadImgResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BatchGetHeadImgResponse) */ {
 public:
  BatchGetHeadImgResponse();
  virtual ~BatchGetHeadImgResponse();

  BatchGetHeadImgResponse(const BatchGetHeadImgResponse& from);

  inline BatchGetHeadImgResponse& operator=(const BatchGetHeadImgResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchGetHeadImgResponse& default_instance();

  static inline const BatchGetHeadImgResponse* internal_default_instance() {
    return reinterpret_cast<const BatchGetHeadImgResponse*>(
               &_BatchGetHeadImgResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(BatchGetHeadImgResponse* other);

  // implements Message ----------------------------------------------

  inline BatchGetHeadImgResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchGetHeadImgResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchGetHeadImgResponse& from);
  void MergeFrom(const BatchGetHeadImgResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchGetHeadImgResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.ImgPair ImgPairList = 3;
  int imgpairlist_size() const;
  void clear_imgpairlist();
  static const int kImgPairListFieldNumber = 3;
  const ::micromsg::ImgPair& imgpairlist(int index) const;
  ::micromsg::ImgPair* mutable_imgpairlist(int index);
  ::micromsg::ImgPair* add_imgpairlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::ImgPair >*
      mutable_imgpairlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::ImgPair >&
      imgpairlist() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.BatchGetHeadImgResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::ImgPair > imgpairlist_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchFriendRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.SearchFriendRequest) */ {
 public:
  SearchFriendRequest();
  virtual ~SearchFriendRequest();

  SearchFriendRequest(const SearchFriendRequest& from);

  inline SearchFriendRequest& operator=(const SearchFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchFriendRequest& default_instance();

  static inline const SearchFriendRequest* internal_default_instance() {
    return reinterpret_cast<const SearchFriendRequest*>(
               &_SearchFriendRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(SearchFriendRequest* other);

  // implements Message ----------------------------------------------

  inline SearchFriendRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchFriendRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchFriendRequest& from);
  void MergeFrom(const SearchFriendRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchFriendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.SearchFriendRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_username();
  void clear_has_username();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.FriendInfo) */ {
 public:
  FriendInfo();
  virtual ~FriendInfo();

  FriendInfo(const FriendInfo& from);

  inline FriendInfo& operator=(const FriendInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendInfo& default_instance();

  static inline const FriendInfo* internal_default_instance() {
    return reinterpret_cast<const FriendInfo*>(
               &_FriendInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(FriendInfo* other);

  // implements Message ----------------------------------------------

  inline FriendInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendInfo& from);
  void MergeFrom(const FriendInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string DisplayUserName = 1;
  bool has_displayusername() const;
  void clear_displayusername();
  static const int kDisplayUserNameFieldNumber = 1;
  const ::std::string& displayusername() const;
  void set_displayusername(const ::std::string& value);
  #if LANG_CXX11
  void set_displayusername(::std::string&& value);
  #endif
  void set_displayusername(const char* value);
  void set_displayusername(const char* value, size_t size);
  ::std::string* mutable_displayusername();
  ::std::string* release_displayusername();
  void set_allocated_displayusername(::std::string* displayusername);

  // optional string DisplayNickName = 2;
  bool has_displaynickname() const;
  void clear_displaynickname();
  static const int kDisplayNickNameFieldNumber = 2;
  const ::std::string& displaynickname() const;
  void set_displaynickname(const ::std::string& value);
  #if LANG_CXX11
  void set_displaynickname(::std::string&& value);
  #endif
  void set_displaynickname(const char* value);
  void set_displaynickname(const char* value, size_t size);
  ::std::string* mutable_displaynickname();
  ::std::string* release_displaynickname();
  void set_allocated_displaynickname(::std::string* displaynickname);

  // optional string DisplayRemark = 3;
  bool has_displayremark() const;
  void clear_displayremark();
  static const int kDisplayRemarkFieldNumber = 3;
  const ::std::string& displayremark() const;
  void set_displayremark(const ::std::string& value);
  #if LANG_CXX11
  void set_displayremark(::std::string&& value);
  #endif
  void set_displayremark(const char* value);
  void set_displayremark(const char* value, size_t size);
  ::std::string* mutable_displayremark();
  ::std::string* release_displayremark();
  void set_allocated_displayremark(::std::string* displayremark);

  // optional string WXUserName = 4;
  bool has_wxusername() const;
  void clear_wxusername();
  static const int kWXUserNameFieldNumber = 4;
  const ::std::string& wxusername() const;
  void set_wxusername(const ::std::string& value);
  #if LANG_CXX11
  void set_wxusername(::std::string&& value);
  #endif
  void set_wxusername(const char* value);
  void set_wxusername(const char* value, size_t size);
  ::std::string* mutable_wxusername();
  ::std::string* release_wxusername();
  void set_allocated_wxusername(::std::string* wxusername);

  // optional string WXNickName = 5;
  bool has_wxnickname() const;
  void clear_wxnickname();
  static const int kWXNickNameFieldNumber = 5;
  const ::std::string& wxnickname() const;
  void set_wxnickname(const ::std::string& value);
  #if LANG_CXX11
  void set_wxnickname(::std::string&& value);
  #endif
  void set_wxnickname(const char* value);
  void set_wxnickname(const char* value, size_t size);
  ::std::string* mutable_wxnickname();
  ::std::string* release_wxnickname();
  void set_allocated_wxnickname(::std::string* wxnickname);

  // optional string WXRemark = 6;
  bool has_wxremark() const;
  void clear_wxremark();
  static const int kWXRemarkFieldNumber = 6;
  const ::std::string& wxremark() const;
  void set_wxremark(const ::std::string& value);
  #if LANG_CXX11
  void set_wxremark(::std::string&& value);
  #endif
  void set_wxremark(const char* value);
  void set_wxremark(const char* value, size_t size);
  ::std::string* mutable_wxremark();
  ::std::string* release_wxremark();
  void set_allocated_wxremark(::std::string* wxremark);

  // optional string Source = 9;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 9;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional string Alias = 11;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 11;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // required uint32 Type = 7;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // required uint32 Status = 8;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 8;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // optional uint32 MatchField = 10;
  bool has_matchfield() const;
  void clear_matchfield();
  static const int kMatchFieldFieldNumber = 10;
  ::google::protobuf::uint32 matchfield() const;
  void set_matchfield(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.FriendInfo)
 private:
  void set_has_displayusername();
  void clear_has_displayusername();
  void set_has_displaynickname();
  void clear_has_displaynickname();
  void set_has_displayremark();
  void clear_has_displayremark();
  void set_has_wxusername();
  void clear_has_wxusername();
  void set_has_wxnickname();
  void clear_has_wxnickname();
  void set_has_wxremark();
  void clear_has_wxremark();
  void set_has_type();
  void clear_has_type();
  void set_has_status();
  void clear_has_status();
  void set_has_source();
  void clear_has_source();
  void set_has_matchfield();
  void clear_has_matchfield();
  void set_has_alias();
  void clear_has_alias();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr displayusername_;
  ::google::protobuf::internal::ArenaStringPtr displaynickname_;
  ::google::protobuf::internal::ArenaStringPtr displayremark_;
  ::google::protobuf::internal::ArenaStringPtr wxusername_;
  ::google::protobuf::internal::ArenaStringPtr wxnickname_;
  ::google::protobuf::internal::ArenaStringPtr wxremark_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 matchfield_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchFriendResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.SearchFriendResponse) */ {
 public:
  SearchFriendResponse();
  virtual ~SearchFriendResponse();

  SearchFriendResponse(const SearchFriendResponse& from);

  inline SearchFriendResponse& operator=(const SearchFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchFriendResponse& default_instance();

  static inline const SearchFriendResponse* internal_default_instance() {
    return reinterpret_cast<const SearchFriendResponse*>(
               &_SearchFriendResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(SearchFriendResponse* other);

  // implements Message ----------------------------------------------

  inline SearchFriendResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchFriendResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchFriendResponse& from);
  void MergeFrom(const SearchFriendResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchFriendResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.FriendInfo FriendList = 3;
  int friendlist_size() const;
  void clear_friendlist();
  static const int kFriendListFieldNumber = 3;
  const ::micromsg::FriendInfo& friendlist(int index) const;
  ::micromsg::FriendInfo* mutable_friendlist(int index);
  ::micromsg::FriendInfo* add_friendlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::FriendInfo >*
      mutable_friendlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::FriendInfo >&
      friendlist() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 FriendCount = 2;
  bool has_friendcount() const;
  void clear_friendcount();
  static const int kFriendCountFieldNumber = 2;
  ::google::protobuf::uint32 friendcount() const;
  void set_friendcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.SearchFriendResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_friendcount();
  void clear_has_friendcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::FriendInfo > friendlist_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 friendcount_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetChatRoomUpgradeInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetChatRoomUpgradeInfoReq) */ {
 public:
  GetChatRoomUpgradeInfoReq();
  virtual ~GetChatRoomUpgradeInfoReq();

  GetChatRoomUpgradeInfoReq(const GetChatRoomUpgradeInfoReq& from);

  inline GetChatRoomUpgradeInfoReq& operator=(const GetChatRoomUpgradeInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatRoomUpgradeInfoReq& default_instance();

  static inline const GetChatRoomUpgradeInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetChatRoomUpgradeInfoReq*>(
               &_GetChatRoomUpgradeInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(GetChatRoomUpgradeInfoReq* other);

  // implements Message ----------------------------------------------

  inline GetChatRoomUpgradeInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetChatRoomUpgradeInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetChatRoomUpgradeInfoReq& from);
  void MergeFrom(const GetChatRoomUpgradeInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetChatRoomUpgradeInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ChatRoomName = 2;
  bool has_chatroomname() const;
  void clear_chatroomname();
  static const int kChatRoomNameFieldNumber = 2;
  const ::std::string& chatroomname() const;
  void set_chatroomname(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomname(::std::string&& value);
  #endif
  void set_chatroomname(const char* value);
  void set_chatroomname(const char* value, size_t size);
  ::std::string* mutable_chatroomname();
  ::std::string* release_chatroomname();
  void set_allocated_chatroomname(::std::string* chatroomname);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // optional uint32 Scene = 3;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 3;
  ::google::protobuf::uint32 scene() const;
  void set_scene(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetChatRoomUpgradeInfoReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_chatroomname();
  void clear_has_chatroomname();
  void set_has_scene();
  void clear_has_scene();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr chatroomname_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 scene_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetChatRoomUpgradeInfoResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetChatRoomUpgradeInfoResp) */ {
 public:
  GetChatRoomUpgradeInfoResp();
  virtual ~GetChatRoomUpgradeInfoResp();

  GetChatRoomUpgradeInfoResp(const GetChatRoomUpgradeInfoResp& from);

  inline GetChatRoomUpgradeInfoResp& operator=(const GetChatRoomUpgradeInfoResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatRoomUpgradeInfoResp& default_instance();

  static inline const GetChatRoomUpgradeInfoResp* internal_default_instance() {
    return reinterpret_cast<const GetChatRoomUpgradeInfoResp*>(
               &_GetChatRoomUpgradeInfoResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(GetChatRoomUpgradeInfoResp* other);

  // implements Message ----------------------------------------------

  inline GetChatRoomUpgradeInfoResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetChatRoomUpgradeInfoResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetChatRoomUpgradeInfoResp& from);
  void MergeFrom(const GetChatRoomUpgradeInfoResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetChatRoomUpgradeInfoResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ChatRoomUpgradeInfo = 2;
  bool has_chatroomupgradeinfo() const;
  void clear_chatroomupgradeinfo();
  static const int kChatRoomUpgradeInfoFieldNumber = 2;
  const ::std::string& chatroomupgradeinfo() const;
  void set_chatroomupgradeinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomupgradeinfo(::std::string&& value);
  #endif
  void set_chatroomupgradeinfo(const char* value);
  void set_chatroomupgradeinfo(const char* value, size_t size);
  ::std::string* mutable_chatroomupgradeinfo();
  ::std::string* release_chatroomupgradeinfo();
  void set_allocated_chatroomupgradeinfo(::std::string* chatroomupgradeinfo);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.GetChatRoomUpgradeInfoResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_chatroomupgradeinfo();
  void clear_has_chatroomupgradeinfo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr chatroomupgradeinfo_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KeyValStr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.KeyValStr) */ {
 public:
  KeyValStr();
  virtual ~KeyValStr();

  KeyValStr(const KeyValStr& from);

  inline KeyValStr& operator=(const KeyValStr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValStr& default_instance();

  static inline const KeyValStr* internal_default_instance() {
    return reinterpret_cast<const KeyValStr*>(
               &_KeyValStr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(KeyValStr* other);

  // implements Message ----------------------------------------------

  inline KeyValStr* New() const PROTOBUF_FINAL { return New(NULL); }

  KeyValStr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KeyValStr& from);
  void MergeFrom(const KeyValStr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KeyValStr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Val = 2;
  bool has_val() const;
  void clear_val();
  static const int kValFieldNumber = 2;
  const ::std::string& val() const;
  void set_val(const ::std::string& value);
  #if LANG_CXX11
  void set_val(::std::string&& value);
  #endif
  void set_val(const char* value);
  void set_val(const char* value, size_t size);
  ::std::string* mutable_val();
  ::std::string* release_val();
  void set_allocated_val(::std::string* val);

  // required uint32 Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::uint32 key() const;
  void set_key(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.KeyValStr)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_val();
  void clear_has_val();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr val_;
  ::google::protobuf::uint32 key_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetDonateInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetDonateInfoReq) */ {
 public:
  GetDonateInfoReq();
  virtual ~GetDonateInfoReq();

  GetDonateInfoReq(const GetDonateInfoReq& from);

  inline GetDonateInfoReq& operator=(const GetDonateInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDonateInfoReq& default_instance();

  static inline const GetDonateInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetDonateInfoReq*>(
               &_GetDonateInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(GetDonateInfoReq* other);

  // implements Message ----------------------------------------------

  inline GetDonateInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDonateInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDonateInfoReq& from);
  void MergeFrom(const GetDonateInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDonateInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ExtInfo = 4;
  bool has_extinfo() const;
  void clear_extinfo();
  static const int kExtInfoFieldNumber = 4;
  const ::std::string& extinfo() const;
  void set_extinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_extinfo(::std::string&& value);
  #endif
  void set_extinfo(const char* value);
  void set_extinfo(const char* value, size_t size);
  ::std::string* mutable_extinfo();
  ::std::string* release_extinfo();
  void set_allocated_extinfo(::std::string* extinfo);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 Type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // required uint32 Scene = 3;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 3;
  ::google::protobuf::uint32 scene() const;
  void set_scene(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetDonateInfoReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_type();
  void clear_has_type();
  void set_has_scene();
  void clear_has_scene();
  void set_has_extinfo();
  void clear_has_extinfo();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr extinfo_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 scene_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetDonateInfoResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetDonateInfoResp) */ {
 public:
  GetDonateInfoResp();
  virtual ~GetDonateInfoResp();

  GetDonateInfoResp(const GetDonateInfoResp& from);

  inline GetDonateInfoResp& operator=(const GetDonateInfoResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDonateInfoResp& default_instance();

  static inline const GetDonateInfoResp* internal_default_instance() {
    return reinterpret_cast<const GetDonateInfoResp*>(
               &_GetDonateInfoResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(GetDonateInfoResp* other);

  // implements Message ----------------------------------------------

  inline GetDonateInfoResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDonateInfoResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDonateInfoResp& from);
  void MergeFrom(const GetDonateInfoResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDonateInfoResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string DonateInfo = 3;
  bool has_donateinfo() const;
  void clear_donateinfo();
  static const int kDonateInfoFieldNumber = 3;
  const ::std::string& donateinfo() const;
  void set_donateinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_donateinfo(::std::string&& value);
  #endif
  void set_donateinfo(const char* value);
  void set_donateinfo(const char* value, size_t size);
  ::std::string* mutable_donateinfo();
  ::std::string* release_donateinfo();
  void set_allocated_donateinfo(::std::string* donateinfo);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.GetDonateInfoResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_donateinfo();
  void clear_has_donateinfo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr donateinfo_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPayPurchasePackageReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetPayPurchasePackageReq) */ {
 public:
  GetPayPurchasePackageReq();
  virtual ~GetPayPurchasePackageReq();

  GetPayPurchasePackageReq(const GetPayPurchasePackageReq& from);

  inline GetPayPurchasePackageReq& operator=(const GetPayPurchasePackageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPayPurchasePackageReq& default_instance();

  static inline const GetPayPurchasePackageReq* internal_default_instance() {
    return reinterpret_cast<const GetPayPurchasePackageReq*>(
               &_GetPayPurchasePackageReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(GetPayPurchasePackageReq* other);

  // implements Message ----------------------------------------------

  inline GetPayPurchasePackageReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPayPurchasePackageReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPayPurchasePackageReq& from);
  void MergeFrom(const GetPayPurchasePackageReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPayPurchasePackageReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string PriceType = 4;
  bool has_pricetype() const;
  void clear_pricetype();
  static const int kPriceTypeFieldNumber = 4;
  const ::std::string& pricetype() const;
  void set_pricetype(const ::std::string& value);
  #if LANG_CXX11
  void set_pricetype(::std::string&& value);
  #endif
  void set_pricetype(const char* value);
  void set_pricetype(const char* value, size_t size);
  ::std::string* mutable_pricetype();
  ::std::string* release_pricetype();
  void set_allocated_pricetype(::std::string* pricetype);

  // optional string ExtInfo = 5;
  bool has_extinfo() const;
  void clear_extinfo();
  static const int kExtInfoFieldNumber = 5;
  const ::std::string& extinfo() const;
  void set_extinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_extinfo(::std::string&& value);
  #endif
  void set_extinfo(const char* value);
  void set_extinfo(const char* value, size_t size);
  ::std::string* mutable_extinfo();
  ::std::string* release_extinfo();
  void set_allocated_extinfo(::std::string* extinfo);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 Type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // required uint32 Price = 3;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 3;
  ::google::protobuf::uint32 price() const;
  void set_price(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetPayPurchasePackageReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_type();
  void clear_has_type();
  void set_has_price();
  void clear_has_price();
  void set_has_pricetype();
  void clear_has_pricetype();
  void set_has_extinfo();
  void clear_has_extinfo();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pricetype_;
  ::google::protobuf::internal::ArenaStringPtr extinfo_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 price_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPayPurchasePackageResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetPayPurchasePackageResp) */ {
 public:
  GetPayPurchasePackageResp();
  virtual ~GetPayPurchasePackageResp();

  GetPayPurchasePackageResp(const GetPayPurchasePackageResp& from);

  inline GetPayPurchasePackageResp& operator=(const GetPayPurchasePackageResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPayPurchasePackageResp& default_instance();

  static inline const GetPayPurchasePackageResp* internal_default_instance() {
    return reinterpret_cast<const GetPayPurchasePackageResp*>(
               &_GetPayPurchasePackageResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(GetPayPurchasePackageResp* other);

  // implements Message ----------------------------------------------

  inline GetPayPurchasePackageResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPayPurchasePackageResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPayPurchasePackageResp& from);
  void MergeFrom(const GetPayPurchasePackageResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPayPurchasePackageResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Package = 2;
  bool has_package() const;
  void clear_package();
  static const int kPackageFieldNumber = 2;
  const ::std::string& package() const;
  void set_package(const ::std::string& value);
  #if LANG_CXX11
  void set_package(::std::string&& value);
  #endif
  void set_package(const char* value);
  void set_package(const char* value, size_t size);
  ::std::string* mutable_package();
  ::std::string* release_package();
  void set_allocated_package(::std::string* package);

  // optional string ExtInfo = 3;
  bool has_extinfo() const;
  void clear_extinfo();
  static const int kExtInfoFieldNumber = 3;
  const ::std::string& extinfo() const;
  void set_extinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_extinfo(::std::string&& value);
  #endif
  void set_extinfo(const char* value);
  void set_extinfo(const char* value, size_t size);
  ::std::string* mutable_extinfo();
  ::std::string* release_extinfo();
  void set_allocated_extinfo(::std::string* extinfo);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.GetPayPurchasePackageResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_package();
  void clear_has_package();
  void set_has_extinfo();
  void clear_has_extinfo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr package_;
  ::google::protobuf::internal::ArenaStringPtr extinfo_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyPayTransitionReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VerifyPayTransitionReq) */ {
 public:
  VerifyPayTransitionReq();
  virtual ~VerifyPayTransitionReq();

  VerifyPayTransitionReq(const VerifyPayTransitionReq& from);

  inline VerifyPayTransitionReq& operator=(const VerifyPayTransitionReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyPayTransitionReq& default_instance();

  static inline const VerifyPayTransitionReq* internal_default_instance() {
    return reinterpret_cast<const VerifyPayTransitionReq*>(
               &_VerifyPayTransitionReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(VerifyPayTransitionReq* other);

  // implements Message ----------------------------------------------

  inline VerifyPayTransitionReq* New() const PROTOBUF_FINAL { return New(NULL); }

  VerifyPayTransitionReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VerifyPayTransitionReq& from);
  void MergeFrom(const VerifyPayTransitionReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VerifyPayTransitionReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string OutTradeNo = 3;
  bool has_outtradeno() const;
  void clear_outtradeno();
  static const int kOutTradeNoFieldNumber = 3;
  const ::std::string& outtradeno() const;
  void set_outtradeno(const ::std::string& value);
  #if LANG_CXX11
  void set_outtradeno(::std::string&& value);
  #endif
  void set_outtradeno(const char* value);
  void set_outtradeno(const char* value, size_t size);
  ::std::string* mutable_outtradeno();
  ::std::string* release_outtradeno();
  void set_allocated_outtradeno(::std::string* outtradeno);

  // optional string ExtInfo = 4;
  bool has_extinfo() const;
  void clear_extinfo();
  static const int kExtInfoFieldNumber = 4;
  const ::std::string& extinfo() const;
  void set_extinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_extinfo(::std::string&& value);
  #endif
  void set_extinfo(const char* value);
  void set_extinfo(const char* value, size_t size);
  ::std::string* mutable_extinfo();
  ::std::string* release_extinfo();
  void set_allocated_extinfo(::std::string* extinfo);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 Type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VerifyPayTransitionReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_type();
  void clear_has_type();
  void set_has_outtradeno();
  void clear_has_outtradeno();
  void set_has_extinfo();
  void clear_has_extinfo();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr outtradeno_;
  ::google::protobuf::internal::ArenaStringPtr extinfo_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 type_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyPayTransitionResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VerifyPayTransitionResp) */ {
 public:
  VerifyPayTransitionResp();
  virtual ~VerifyPayTransitionResp();

  VerifyPayTransitionResp(const VerifyPayTransitionResp& from);

  inline VerifyPayTransitionResp& operator=(const VerifyPayTransitionResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyPayTransitionResp& default_instance();

  static inline const VerifyPayTransitionResp* internal_default_instance() {
    return reinterpret_cast<const VerifyPayTransitionResp*>(
               &_VerifyPayTransitionResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(VerifyPayTransitionResp* other);

  // implements Message ----------------------------------------------

  inline VerifyPayTransitionResp* New() const PROTOBUF_FINAL { return New(NULL); }

  VerifyPayTransitionResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VerifyPayTransitionResp& from);
  void MergeFrom(const VerifyPayTransitionResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VerifyPayTransitionResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ResultMsg = 2;
  bool has_resultmsg() const;
  void clear_resultmsg();
  static const int kResultMsgFieldNumber = 2;
  const ::std::string& resultmsg() const;
  void set_resultmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_resultmsg(::std::string&& value);
  #endif
  void set_resultmsg(const char* value);
  void set_resultmsg(const char* value, size_t size);
  ::std::string* mutable_resultmsg();
  ::std::string* release_resultmsg();
  void set_allocated_resultmsg(::std::string* resultmsg);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.VerifyPayTransitionResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_resultmsg();
  void clear_has_resultmsg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr resultmsg_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetChatRoomDonateHistoryReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetChatRoomDonateHistoryReq) */ {
 public:
  GetChatRoomDonateHistoryReq();
  virtual ~GetChatRoomDonateHistoryReq();

  GetChatRoomDonateHistoryReq(const GetChatRoomDonateHistoryReq& from);

  inline GetChatRoomDonateHistoryReq& operator=(const GetChatRoomDonateHistoryReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatRoomDonateHistoryReq& default_instance();

  static inline const GetChatRoomDonateHistoryReq* internal_default_instance() {
    return reinterpret_cast<const GetChatRoomDonateHistoryReq*>(
               &_GetChatRoomDonateHistoryReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(GetChatRoomDonateHistoryReq* other);

  // implements Message ----------------------------------------------

  inline GetChatRoomDonateHistoryReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetChatRoomDonateHistoryReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetChatRoomDonateHistoryReq& from);
  void MergeFrom(const GetChatRoomDonateHistoryReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetChatRoomDonateHistoryReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ChatRoomName = 2;
  bool has_chatroomname() const;
  void clear_chatroomname();
  static const int kChatRoomNameFieldNumber = 2;
  const ::std::string& chatroomname() const;
  void set_chatroomname(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomname(::std::string&& value);
  #endif
  void set_chatroomname(const char* value);
  void set_chatroomname(const char* value, size_t size);
  ::std::string* mutable_chatroomname();
  ::std::string* release_chatroomname();
  void set_allocated_chatroomname(::std::string* chatroomname);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.GetChatRoomDonateHistoryReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_chatroomname();
  void clear_has_chatroomname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr chatroomname_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Donor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.Donor) */ {
 public:
  Donor();
  virtual ~Donor();

  Donor(const Donor& from);

  inline Donor& operator=(const Donor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Donor& default_instance();

  static inline const Donor* internal_default_instance() {
    return reinterpret_cast<const Donor*>(
               &_Donor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(Donor* other);

  // implements Message ----------------------------------------------

  inline Donor* New() const PROTOBUF_FINAL { return New(NULL); }

  Donor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Donor& from);
  void MergeFrom(const Donor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Donor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string NickName = 3;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 3;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string DonateTitle = 4;
  bool has_donatetitle() const;
  void clear_donatetitle();
  static const int kDonateTitleFieldNumber = 4;
  const ::std::string& donatetitle() const;
  void set_donatetitle(const ::std::string& value);
  #if LANG_CXX11
  void set_donatetitle(::std::string&& value);
  #endif
  void set_donatetitle(const char* value);
  void set_donatetitle(const char* value, size_t size);
  ::std::string* mutable_donatetitle();
  ::std::string* release_donatetitle();
  void set_allocated_donatetitle(::std::string* donatetitle);

  // optional string DonateUrl = 5;
  bool has_donateurl() const;
  void clear_donateurl();
  static const int kDonateUrlFieldNumber = 5;
  const ::std::string& donateurl() const;
  void set_donateurl(const ::std::string& value);
  #if LANG_CXX11
  void set_donateurl(::std::string&& value);
  #endif
  void set_donateurl(const char* value);
  void set_donateurl(const char* value, size_t size);
  ::std::string* mutable_donateurl();
  ::std::string* release_donateurl();
  void set_allocated_donateurl(::std::string* donateurl);

  // required uint32 Time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::uint32 time() const;
  void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.Donor)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_username();
  void clear_has_username();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_donatetitle();
  void clear_has_donatetitle();
  void set_has_donateurl();
  void clear_has_donateurl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr donatetitle_;
  ::google::protobuf::internal::ArenaStringPtr donateurl_;
  ::google::protobuf::uint32 time_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetChatRoomDonateHistoryResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetChatRoomDonateHistoryResp) */ {
 public:
  GetChatRoomDonateHistoryResp();
  virtual ~GetChatRoomDonateHistoryResp();

  GetChatRoomDonateHistoryResp(const GetChatRoomDonateHistoryResp& from);

  inline GetChatRoomDonateHistoryResp& operator=(const GetChatRoomDonateHistoryResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatRoomDonateHistoryResp& default_instance();

  static inline const GetChatRoomDonateHistoryResp* internal_default_instance() {
    return reinterpret_cast<const GetChatRoomDonateHistoryResp*>(
               &_GetChatRoomDonateHistoryResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(GetChatRoomDonateHistoryResp* other);

  // implements Message ----------------------------------------------

  inline GetChatRoomDonateHistoryResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetChatRoomDonateHistoryResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetChatRoomDonateHistoryResp& from);
  void MergeFrom(const GetChatRoomDonateHistoryResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetChatRoomDonateHistoryResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.Donor List = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  const ::micromsg::Donor& list(int index) const;
  ::micromsg::Donor* mutable_list(int index);
  ::micromsg::Donor* add_list();
  ::google::protobuf::RepeatedPtrField< ::micromsg::Donor >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::Donor >&
      list() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 TotalCount = 2;
  bool has_totalcount() const;
  void clear_totalcount();
  static const int kTotalCountFieldNumber = 2;
  ::google::protobuf::uint32 totalcount() const;
  void set_totalcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetChatRoomDonateHistoryResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_totalcount();
  void clear_has_totalcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::Donor > list_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 totalcount_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetChatRoomPresentHistoryReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetChatRoomPresentHistoryReq) */ {
 public:
  GetChatRoomPresentHistoryReq();
  virtual ~GetChatRoomPresentHistoryReq();

  GetChatRoomPresentHistoryReq(const GetChatRoomPresentHistoryReq& from);

  inline GetChatRoomPresentHistoryReq& operator=(const GetChatRoomPresentHistoryReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatRoomPresentHistoryReq& default_instance();

  static inline const GetChatRoomPresentHistoryReq* internal_default_instance() {
    return reinterpret_cast<const GetChatRoomPresentHistoryReq*>(
               &_GetChatRoomPresentHistoryReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(GetChatRoomPresentHistoryReq* other);

  // implements Message ----------------------------------------------

  inline GetChatRoomPresentHistoryReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetChatRoomPresentHistoryReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetChatRoomPresentHistoryReq& from);
  void MergeFrom(const GetChatRoomPresentHistoryReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetChatRoomPresentHistoryReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ChatRoomName = 2;
  bool has_chatroomname() const;
  void clear_chatroomname();
  static const int kChatRoomNameFieldNumber = 2;
  const ::std::string& chatroomname() const;
  void set_chatroomname(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomname(::std::string&& value);
  #endif
  void set_chatroomname(const char* value);
  void set_chatroomname(const char* value, size_t size);
  ::std::string* mutable_chatroomname();
  ::std::string* release_chatroomname();
  void set_allocated_chatroomname(::std::string* chatroomname);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.GetChatRoomPresentHistoryReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_chatroomname();
  void clear_has_chatroomname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr chatroomname_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Presentation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.Presentation) */ {
 public:
  Presentation();
  virtual ~Presentation();

  Presentation(const Presentation& from);

  inline Presentation& operator=(const Presentation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Presentation& default_instance();

  static inline const Presentation* internal_default_instance() {
    return reinterpret_cast<const Presentation*>(
               &_Presentation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(Presentation* other);

  // implements Message ----------------------------------------------

  inline Presentation* New() const PROTOBUF_FINAL { return New(NULL); }

  Presentation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Presentation& from);
  void MergeFrom(const Presentation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Presentation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string NickName = 3;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 3;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string Title = 4;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 4;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string WebUrl = 6;
  bool has_weburl() const;
  void clear_weburl();
  static const int kWebUrlFieldNumber = 6;
  const ::std::string& weburl() const;
  void set_weburl(const ::std::string& value);
  #if LANG_CXX11
  void set_weburl(::std::string&& value);
  #endif
  void set_weburl(const char* value);
  void set_weburl(const char* value, size_t size);
  ::std::string* mutable_weburl();
  ::std::string* release_weburl();
  void set_allocated_weburl(::std::string* weburl);

  // required uint32 Time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::uint32 time() const;
  void set_time(::google::protobuf::uint32 value);

  // required uint32 Price = 5;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 5;
  ::google::protobuf::uint32 price() const;
  void set_price(::google::protobuf::uint32 value);

  // required uint32 Num = 7;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 7;
  ::google::protobuf::uint32 num() const;
  void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.Presentation)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_username();
  void clear_has_username();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_title();
  void clear_has_title();
  void set_has_price();
  void clear_has_price();
  void set_has_weburl();
  void clear_has_weburl();
  void set_has_num();
  void clear_has_num();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr weburl_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 price_;
  ::google::protobuf::uint32 num_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetChatRoomPresentHistoryResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetChatRoomPresentHistoryResp) */ {
 public:
  GetChatRoomPresentHistoryResp();
  virtual ~GetChatRoomPresentHistoryResp();

  GetChatRoomPresentHistoryResp(const GetChatRoomPresentHistoryResp& from);

  inline GetChatRoomPresentHistoryResp& operator=(const GetChatRoomPresentHistoryResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatRoomPresentHistoryResp& default_instance();

  static inline const GetChatRoomPresentHistoryResp* internal_default_instance() {
    return reinterpret_cast<const GetChatRoomPresentHistoryResp*>(
               &_GetChatRoomPresentHistoryResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(GetChatRoomPresentHistoryResp* other);

  // implements Message ----------------------------------------------

  inline GetChatRoomPresentHistoryResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetChatRoomPresentHistoryResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetChatRoomPresentHistoryResp& from);
  void MergeFrom(const GetChatRoomPresentHistoryResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetChatRoomPresentHistoryResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.Presentation List = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  const ::micromsg::Presentation& list(int index) const;
  ::micromsg::Presentation* mutable_list(int index);
  ::micromsg::Presentation* add_list();
  ::google::protobuf::RepeatedPtrField< ::micromsg::Presentation >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::Presentation >&
      list() const;

  // optional string Url = 4;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 4;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 TotalCount = 2;
  bool has_totalcount() const;
  void clear_totalcount();
  static const int kTotalCountFieldNumber = 2;
  ::google::protobuf::uint32 totalcount() const;
  void set_totalcount(::google::protobuf::uint32 value);

  // required uint32 DonateStatus = 5;
  bool has_donatestatus() const;
  void clear_donatestatus();
  static const int kDonateStatusFieldNumber = 5;
  ::google::protobuf::uint32 donatestatus() const;
  void set_donatestatus(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetChatRoomPresentHistoryResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_totalcount();
  void clear_has_totalcount();
  void set_has_url();
  void clear_has_url();
  void set_has_donatestatus();
  void clear_has_donatestatus();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::Presentation > list_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 totalcount_;
  ::google::protobuf::uint32 donatestatus_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPersonalDonateHistoryReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetPersonalDonateHistoryReq) */ {
 public:
  GetPersonalDonateHistoryReq();
  virtual ~GetPersonalDonateHistoryReq();

  GetPersonalDonateHistoryReq(const GetPersonalDonateHistoryReq& from);

  inline GetPersonalDonateHistoryReq& operator=(const GetPersonalDonateHistoryReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPersonalDonateHistoryReq& default_instance();

  static inline const GetPersonalDonateHistoryReq* internal_default_instance() {
    return reinterpret_cast<const GetPersonalDonateHistoryReq*>(
               &_GetPersonalDonateHistoryReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(GetPersonalDonateHistoryReq* other);

  // implements Message ----------------------------------------------

  inline GetPersonalDonateHistoryReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPersonalDonateHistoryReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPersonalDonateHistoryReq& from);
  void MergeFrom(const GetPersonalDonateHistoryReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPersonalDonateHistoryReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.GetPersonalDonateHistoryReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DonateHistory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.DonateHistory) */ {
 public:
  DonateHistory();
  virtual ~DonateHistory();

  DonateHistory(const DonateHistory& from);

  inline DonateHistory& operator=(const DonateHistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DonateHistory& default_instance();

  static inline const DonateHistory* internal_default_instance() {
    return reinterpret_cast<const DonateHistory*>(
               &_DonateHistory_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(DonateHistory* other);

  // implements Message ----------------------------------------------

  inline DonateHistory* New() const PROTOBUF_FINAL { return New(NULL); }

  DonateHistory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DonateHistory& from);
  void MergeFrom(const DonateHistory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DonateHistory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string DonateTitle = 2;
  bool has_donatetitle() const;
  void clear_donatetitle();
  static const int kDonateTitleFieldNumber = 2;
  const ::std::string& donatetitle() const;
  void set_donatetitle(const ::std::string& value);
  #if LANG_CXX11
  void set_donatetitle(::std::string&& value);
  #endif
  void set_donatetitle(const char* value);
  void set_donatetitle(const char* value, size_t size);
  ::std::string* mutable_donatetitle();
  ::std::string* release_donatetitle();
  void set_allocated_donatetitle(::std::string* donatetitle);

  // optional string DonateUrl = 3;
  bool has_donateurl() const;
  void clear_donateurl();
  static const int kDonateUrlFieldNumber = 3;
  const ::std::string& donateurl() const;
  void set_donateurl(const ::std::string& value);
  #if LANG_CXX11
  void set_donateurl(::std::string&& value);
  #endif
  void set_donateurl(const char* value);
  void set_donateurl(const char* value, size_t size);
  ::std::string* mutable_donateurl();
  ::std::string* release_donateurl();
  void set_allocated_donateurl(::std::string* donateurl);

  // optional string DonateThumbUrl = 5;
  bool has_donatethumburl() const;
  void clear_donatethumburl();
  static const int kDonateThumbUrlFieldNumber = 5;
  const ::std::string& donatethumburl() const;
  void set_donatethumburl(const ::std::string& value);
  #if LANG_CXX11
  void set_donatethumburl(::std::string&& value);
  #endif
  void set_donatethumburl(const char* value);
  void set_donatethumburl(const char* value, size_t size);
  ::std::string* mutable_donatethumburl();
  ::std::string* release_donatethumburl();
  void set_allocated_donatethumburl(::std::string* donatethumburl);

  // required uint32 Time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::uint32 time() const;
  void set_time(::google::protobuf::uint32 value);

  // required uint32 Price = 4;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 4;
  ::google::protobuf::uint32 price() const;
  void set_price(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.DonateHistory)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_donatetitle();
  void clear_has_donatetitle();
  void set_has_donateurl();
  void clear_has_donateurl();
  void set_has_price();
  void clear_has_price();
  void set_has_donatethumburl();
  void clear_has_donatethumburl();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr donatetitle_;
  ::google::protobuf::internal::ArenaStringPtr donateurl_;
  ::google::protobuf::internal::ArenaStringPtr donatethumburl_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 price_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPersonalDonateHistoryResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetPersonalDonateHistoryResp) */ {
 public:
  GetPersonalDonateHistoryResp();
  virtual ~GetPersonalDonateHistoryResp();

  GetPersonalDonateHistoryResp(const GetPersonalDonateHistoryResp& from);

  inline GetPersonalDonateHistoryResp& operator=(const GetPersonalDonateHistoryResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPersonalDonateHistoryResp& default_instance();

  static inline const GetPersonalDonateHistoryResp* internal_default_instance() {
    return reinterpret_cast<const GetPersonalDonateHistoryResp*>(
               &_GetPersonalDonateHistoryResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(GetPersonalDonateHistoryResp* other);

  // implements Message ----------------------------------------------

  inline GetPersonalDonateHistoryResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPersonalDonateHistoryResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPersonalDonateHistoryResp& from);
  void MergeFrom(const GetPersonalDonateHistoryResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPersonalDonateHistoryResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.DonateHistory List = 4;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 4;
  const ::micromsg::DonateHistory& list(int index) const;
  ::micromsg::DonateHistory* mutable_list(int index);
  ::micromsg::DonateHistory* add_list();
  ::google::protobuf::RepeatedPtrField< ::micromsg::DonateHistory >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::DonateHistory >&
      list() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 TotalAmount = 2;
  bool has_totalamount() const;
  void clear_totalamount();
  static const int kTotalAmountFieldNumber = 2;
  ::google::protobuf::uint32 totalamount() const;
  void set_totalamount(::google::protobuf::uint32 value);

  // required uint32 TotalCount = 3;
  bool has_totalcount() const;
  void clear_totalcount();
  static const int kTotalCountFieldNumber = 3;
  ::google::protobuf::uint32 totalcount() const;
  void set_totalcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetPersonalDonateHistoryResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_totalamount();
  void clear_has_totalamount();
  void set_has_totalcount();
  void clear_has_totalcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::DonateHistory > list_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 totalamount_;
  ::google::protobuf::uint32 totalcount_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyPersonalInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VerifyPersonalInfoReq) */ {
 public:
  VerifyPersonalInfoReq();
  virtual ~VerifyPersonalInfoReq();

  VerifyPersonalInfoReq(const VerifyPersonalInfoReq& from);

  inline VerifyPersonalInfoReq& operator=(const VerifyPersonalInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyPersonalInfoReq& default_instance();

  static inline const VerifyPersonalInfoReq* internal_default_instance() {
    return reinterpret_cast<const VerifyPersonalInfoReq*>(
               &_VerifyPersonalInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(VerifyPersonalInfoReq* other);

  // implements Message ----------------------------------------------

  inline VerifyPersonalInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  VerifyPersonalInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VerifyPersonalInfoReq& from);
  void MergeFrom(const VerifyPersonalInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VerifyPersonalInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserRealName = 2;
  bool has_userrealname() const;
  void clear_userrealname();
  static const int kUserRealNameFieldNumber = 2;
  const ::std::string& userrealname() const;
  void set_userrealname(const ::std::string& value);
  #if LANG_CXX11
  void set_userrealname(::std::string&& value);
  #endif
  void set_userrealname(const char* value);
  void set_userrealname(const char* value, size_t size);
  ::std::string* mutable_userrealname();
  ::std::string* release_userrealname();
  void set_allocated_userrealname(::std::string* userrealname);

  // optional string UserIDCardNum = 4;
  bool has_useridcardnum() const;
  void clear_useridcardnum();
  static const int kUserIDCardNumFieldNumber = 4;
  const ::std::string& useridcardnum() const;
  void set_useridcardnum(const ::std::string& value);
  #if LANG_CXX11
  void set_useridcardnum(::std::string&& value);
  #endif
  void set_useridcardnum(const char* value);
  void set_useridcardnum(const char* value, size_t size);
  ::std::string* mutable_useridcardnum();
  ::std::string* release_useridcardnum();
  void set_allocated_useridcardnum(::std::string* useridcardnum);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 UserIDCardType = 3;
  bool has_useridcardtype() const;
  void clear_useridcardtype();
  static const int kUserIDCardTypeFieldNumber = 3;
  ::google::protobuf::uint32 useridcardtype() const;
  void set_useridcardtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VerifyPersonalInfoReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_userrealname();
  void clear_has_userrealname();
  void set_has_useridcardtype();
  void clear_has_useridcardtype();
  void set_has_useridcardnum();
  void clear_has_useridcardnum();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userrealname_;
  ::google::protobuf::internal::ArenaStringPtr useridcardnum_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 useridcardtype_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyPersonalInfoResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VerifyPersonalInfoResp) */ {
 public:
  VerifyPersonalInfoResp();
  virtual ~VerifyPersonalInfoResp();

  VerifyPersonalInfoResp(const VerifyPersonalInfoResp& from);

  inline VerifyPersonalInfoResp& operator=(const VerifyPersonalInfoResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyPersonalInfoResp& default_instance();

  static inline const VerifyPersonalInfoResp* internal_default_instance() {
    return reinterpret_cast<const VerifyPersonalInfoResp*>(
               &_VerifyPersonalInfoResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(VerifyPersonalInfoResp* other);

  // implements Message ----------------------------------------------

  inline VerifyPersonalInfoResp* New() const PROTOBUF_FINAL { return New(NULL); }

  VerifyPersonalInfoResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VerifyPersonalInfoResp& from);
  void MergeFrom(const VerifyPersonalInfoResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VerifyPersonalInfoResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.VerifyPersonalInfoResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyChatRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VerifyChatRoomReq) */ {
 public:
  VerifyChatRoomReq();
  virtual ~VerifyChatRoomReq();

  VerifyChatRoomReq(const VerifyChatRoomReq& from);

  inline VerifyChatRoomReq& operator=(const VerifyChatRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyChatRoomReq& default_instance();

  static inline const VerifyChatRoomReq* internal_default_instance() {
    return reinterpret_cast<const VerifyChatRoomReq*>(
               &_VerifyChatRoomReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(VerifyChatRoomReq* other);

  // implements Message ----------------------------------------------

  inline VerifyChatRoomReq* New() const PROTOBUF_FINAL { return New(NULL); }

  VerifyChatRoomReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VerifyChatRoomReq& from);
  void MergeFrom(const VerifyChatRoomReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VerifyChatRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ApplyUserName = 3;
  bool has_applyusername() const;
  void clear_applyusername();
  static const int kApplyUserNameFieldNumber = 3;
  const ::std::string& applyusername() const;
  void set_applyusername(const ::std::string& value);
  #if LANG_CXX11
  void set_applyusername(::std::string&& value);
  #endif
  void set_applyusername(const char* value);
  void set_applyusername(const char* value, size_t size);
  ::std::string* mutable_applyusername();
  ::std::string* release_applyusername();
  void set_allocated_applyusername(::std::string* applyusername);

  // optional string ChatRoomName = 4;
  bool has_chatroomname() const;
  void clear_chatroomname();
  static const int kChatRoomNameFieldNumber = 4;
  const ::std::string& chatroomname() const;
  void set_chatroomname(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomname(::std::string&& value);
  #endif
  void set_chatroomname(const char* value);
  void set_chatroomname(const char* value, size_t size);
  ::std::string* mutable_chatroomname();
  ::std::string* release_chatroomname();
  void set_allocated_chatroomname(::std::string* chatroomname);

  // optional string Ticket = 5;
  bool has_ticket() const;
  void clear_ticket();
  static const int kTicketFieldNumber = 5;
  const ::std::string& ticket() const;
  void set_ticket(const ::std::string& value);
  #if LANG_CXX11
  void set_ticket(::std::string&& value);
  #endif
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  ::std::string* mutable_ticket();
  ::std::string* release_ticket();
  void set_allocated_ticket(::std::string* ticket);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 OpCode = 2;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpCodeFieldNumber = 2;
  ::google::protobuf::uint32 opcode() const;
  void set_opcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VerifyChatRoomReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_opcode();
  void clear_has_opcode();
  void set_has_applyusername();
  void clear_has_applyusername();
  void set_has_chatroomname();
  void clear_has_chatroomname();
  void set_has_ticket();
  void clear_has_ticket();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr applyusername_;
  ::google::protobuf::internal::ArenaStringPtr chatroomname_;
  ::google::protobuf::internal::ArenaStringPtr ticket_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 opcode_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyChatRoomResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VerifyChatRoomResp) */ {
 public:
  VerifyChatRoomResp();
  virtual ~VerifyChatRoomResp();

  VerifyChatRoomResp(const VerifyChatRoomResp& from);

  inline VerifyChatRoomResp& operator=(const VerifyChatRoomResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyChatRoomResp& default_instance();

  static inline const VerifyChatRoomResp* internal_default_instance() {
    return reinterpret_cast<const VerifyChatRoomResp*>(
               &_VerifyChatRoomResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(VerifyChatRoomResp* other);

  // implements Message ----------------------------------------------

  inline VerifyChatRoomResp* New() const PROTOBUF_FINAL { return New(NULL); }

  VerifyChatRoomResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VerifyChatRoomResp& from);
  void MergeFrom(const VerifyChatRoomResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VerifyChatRoomResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.VerifyChatRoomResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuitChatRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.QuitChatRoomReq) */ {
 public:
  QuitChatRoomReq();
  virtual ~QuitChatRoomReq();

  QuitChatRoomReq(const QuitChatRoomReq& from);

  inline QuitChatRoomReq& operator=(const QuitChatRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuitChatRoomReq& default_instance();

  static inline const QuitChatRoomReq* internal_default_instance() {
    return reinterpret_cast<const QuitChatRoomReq*>(
               &_QuitChatRoomReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void Swap(QuitChatRoomReq* other);

  // implements Message ----------------------------------------------

  inline QuitChatRoomReq* New() const PROTOBUF_FINAL { return New(NULL); }

  QuitChatRoomReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QuitChatRoomReq& from);
  void MergeFrom(const QuitChatRoomReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QuitChatRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ChatRoomName = 2;
  bool has_chatroomname() const;
  void clear_chatroomname();
  static const int kChatRoomNameFieldNumber = 2;
  const ::std::string& chatroomname() const;
  void set_chatroomname(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomname(::std::string&& value);
  #endif
  void set_chatroomname(const char* value);
  void set_chatroomname(const char* value, size_t size);
  ::std::string* mutable_chatroomname();
  ::std::string* release_chatroomname();
  void set_allocated_chatroomname(::std::string* chatroomname);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.QuitChatRoomReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_chatroomname();
  void clear_has_chatroomname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr chatroomname_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuitChatRoomResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.QuitChatRoomResp) */ {
 public:
  QuitChatRoomResp();
  virtual ~QuitChatRoomResp();

  QuitChatRoomResp(const QuitChatRoomResp& from);

  inline QuitChatRoomResp& operator=(const QuitChatRoomResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuitChatRoomResp& default_instance();

  static inline const QuitChatRoomResp* internal_default_instance() {
    return reinterpret_cast<const QuitChatRoomResp*>(
               &_QuitChatRoomResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(QuitChatRoomResp* other);

  // implements Message ----------------------------------------------

  inline QuitChatRoomResp* New() const PROTOBUF_FINAL { return New(NULL); }

  QuitChatRoomResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QuitChatRoomResp& from);
  void MergeFrom(const QuitChatRoomResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QuitChatRoomResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.QuitChatRoomResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetChatRoomUpgradeStatusReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetChatRoomUpgradeStatusReq) */ {
 public:
  GetChatRoomUpgradeStatusReq();
  virtual ~GetChatRoomUpgradeStatusReq();

  GetChatRoomUpgradeStatusReq(const GetChatRoomUpgradeStatusReq& from);

  inline GetChatRoomUpgradeStatusReq& operator=(const GetChatRoomUpgradeStatusReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatRoomUpgradeStatusReq& default_instance();

  static inline const GetChatRoomUpgradeStatusReq* internal_default_instance() {
    return reinterpret_cast<const GetChatRoomUpgradeStatusReq*>(
               &_GetChatRoomUpgradeStatusReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void Swap(GetChatRoomUpgradeStatusReq* other);

  // implements Message ----------------------------------------------

  inline GetChatRoomUpgradeStatusReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetChatRoomUpgradeStatusReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetChatRoomUpgradeStatusReq& from);
  void MergeFrom(const GetChatRoomUpgradeStatusReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetChatRoomUpgradeStatusReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ChatRoomName = 2;
  bool has_chatroomname() const;
  void clear_chatroomname();
  static const int kChatRoomNameFieldNumber = 2;
  const ::std::string& chatroomname() const;
  void set_chatroomname(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomname(::std::string&& value);
  #endif
  void set_chatroomname(const char* value);
  void set_chatroomname(const char* value, size_t size);
  ::std::string* mutable_chatroomname();
  ::std::string* release_chatroomname();
  void set_allocated_chatroomname(::std::string* chatroomname);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.GetChatRoomUpgradeStatusReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_chatroomname();
  void clear_has_chatroomname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr chatroomname_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetChatRoomUpgradeStatusResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetChatRoomUpgradeStatusResp) */ {
 public:
  GetChatRoomUpgradeStatusResp();
  virtual ~GetChatRoomUpgradeStatusResp();

  GetChatRoomUpgradeStatusResp(const GetChatRoomUpgradeStatusResp& from);

  inline GetChatRoomUpgradeStatusResp& operator=(const GetChatRoomUpgradeStatusResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatRoomUpgradeStatusResp& default_instance();

  static inline const GetChatRoomUpgradeStatusResp* internal_default_instance() {
    return reinterpret_cast<const GetChatRoomUpgradeStatusResp*>(
               &_GetChatRoomUpgradeStatusResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(GetChatRoomUpgradeStatusResp* other);

  // implements Message ----------------------------------------------

  inline GetChatRoomUpgradeStatusResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetChatRoomUpgradeStatusResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetChatRoomUpgradeStatusResp& from);
  void MergeFrom(const GetChatRoomUpgradeStatusResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetChatRoomUpgradeStatusResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ResultMsg = 7;
  bool has_resultmsg() const;
  void clear_resultmsg();
  static const int kResultMsgFieldNumber = 7;
  const ::std::string& resultmsg() const;
  void set_resultmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_resultmsg(::std::string&& value);
  #endif
  void set_resultmsg(const char* value);
  void set_resultmsg(const char* value, size_t size);
  ::std::string* mutable_resultmsg();
  ::std::string* release_resultmsg();
  void set_allocated_resultmsg(::std::string* resultmsg);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 Status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // required uint32 MobileQuota = 3;
  bool has_mobilequota() const;
  void clear_mobilequota();
  static const int kMobileQuotaFieldNumber = 3;
  ::google::protobuf::uint32 mobilequota() const;
  void set_mobilequota(::google::protobuf::uint32 value);

  // required uint32 CardQuota = 4;
  bool has_cardquota() const;
  void clear_cardquota();
  static const int kCardQuotaFieldNumber = 4;
  ::google::protobuf::uint32 cardquota() const;
  void set_cardquota(::google::protobuf::uint32 value);

  // required uint32 DonateQuota = 5;
  bool has_donatequota() const;
  void clear_donatequota();
  static const int kDonateQuotaFieldNumber = 5;
  ::google::protobuf::uint32 donatequota() const;
  void set_donatequota(::google::protobuf::uint32 value);

  // required uint32 MaxCount = 6;
  bool has_maxcount() const;
  void clear_maxcount();
  static const int kMaxCountFieldNumber = 6;
  ::google::protobuf::uint32 maxcount() const;
  void set_maxcount(::google::protobuf::uint32 value);

  // optional uint32 TotalQuota = 8;
  bool has_totalquota() const;
  void clear_totalquota();
  static const int kTotalQuotaFieldNumber = 8;
  ::google::protobuf::uint32 totalquota() const;
  void set_totalquota(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetChatRoomUpgradeStatusResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_status();
  void clear_has_status();
  void set_has_mobilequota();
  void clear_has_mobilequota();
  void set_has_cardquota();
  void clear_has_cardquota();
  void set_has_donatequota();
  void clear_has_donatequota();
  void set_has_maxcount();
  void clear_has_maxcount();
  void set_has_resultmsg();
  void clear_has_resultmsg();
  void set_has_totalquota();
  void clear_has_totalquota();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr resultmsg_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 mobilequota_;
  ::google::protobuf::uint32 cardquota_;
  ::google::protobuf::uint32 donatequota_;
  ::google::protobuf::uint32 maxcount_;
  ::google::protobuf::uint32 totalquota_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpgradeChatRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UpgradeChatRoomReq) */ {
 public:
  UpgradeChatRoomReq();
  virtual ~UpgradeChatRoomReq();

  UpgradeChatRoomReq(const UpgradeChatRoomReq& from);

  inline UpgradeChatRoomReq& operator=(const UpgradeChatRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpgradeChatRoomReq& default_instance();

  static inline const UpgradeChatRoomReq* internal_default_instance() {
    return reinterpret_cast<const UpgradeChatRoomReq*>(
               &_UpgradeChatRoomReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    56;

  void Swap(UpgradeChatRoomReq* other);

  // implements Message ----------------------------------------------

  inline UpgradeChatRoomReq* New() const PROTOBUF_FINAL { return New(NULL); }

  UpgradeChatRoomReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpgradeChatRoomReq& from);
  void MergeFrom(const UpgradeChatRoomReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpgradeChatRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ChatRoomName = 2;
  bool has_chatroomname() const;
  void clear_chatroomname();
  static const int kChatRoomNameFieldNumber = 2;
  const ::std::string& chatroomname() const;
  void set_chatroomname(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomname(::std::string&& value);
  #endif
  void set_chatroomname(const char* value);
  void set_chatroomname(const char* value, size_t size);
  ::std::string* mutable_chatroomname();
  ::std::string* release_chatroomname();
  void set_allocated_chatroomname(::std::string* chatroomname);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.UpgradeChatRoomReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_chatroomname();
  void clear_has_chatroomname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr chatroomname_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpgradeChatRoomResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UpgradeChatRoomResp) */ {
 public:
  UpgradeChatRoomResp();
  virtual ~UpgradeChatRoomResp();

  UpgradeChatRoomResp(const UpgradeChatRoomResp& from);

  inline UpgradeChatRoomResp& operator=(const UpgradeChatRoomResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpgradeChatRoomResp& default_instance();

  static inline const UpgradeChatRoomResp* internal_default_instance() {
    return reinterpret_cast<const UpgradeChatRoomResp*>(
               &_UpgradeChatRoomResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    57;

  void Swap(UpgradeChatRoomResp* other);

  // implements Message ----------------------------------------------

  inline UpgradeChatRoomResp* New() const PROTOBUF_FINAL { return New(NULL); }

  UpgradeChatRoomResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpgradeChatRoomResp& from);
  void MergeFrom(const UpgradeChatRoomResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpgradeChatRoomResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ChatRoomData = 2;
  bool has_chatroomdata() const;
  void clear_chatroomdata();
  static const int kChatRoomDataFieldNumber = 2;
  const ::std::string& chatroomdata() const;
  void set_chatroomdata(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomdata(::std::string&& value);
  #endif
  void set_chatroomdata(const char* value);
  void set_chatroomdata(const char* value, size_t size);
  ::std::string* mutable_chatroomdata();
  ::std::string* release_chatroomdata();
  void set_allocated_chatroomdata(::std::string* chatroomdata);

  // optional string ResultMsg = 3;
  bool has_resultmsg() const;
  void clear_resultmsg();
  static const int kResultMsgFieldNumber = 3;
  const ::std::string& resultmsg() const;
  void set_resultmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_resultmsg(::std::string&& value);
  #endif
  void set_resultmsg(const char* value);
  void set_resultmsg(const char* value, size_t size);
  ::std::string* mutable_resultmsg();
  ::std::string* release_resultmsg();
  void set_allocated_resultmsg(::std::string* resultmsg);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // optional uint32 MaxCount = 4;
  bool has_maxcount() const;
  void clear_maxcount();
  static const int kMaxCountFieldNumber = 4;
  ::google::protobuf::uint32 maxcount() const;
  void set_maxcount(::google::protobuf::uint32 value);

  // required uint32 MobileQuota = 5;
  bool has_mobilequota() const;
  void clear_mobilequota();
  static const int kMobileQuotaFieldNumber = 5;
  ::google::protobuf::uint32 mobilequota() const;
  void set_mobilequota(::google::protobuf::uint32 value);

  // required uint32 CardQuota = 6;
  bool has_cardquota() const;
  void clear_cardquota();
  static const int kCardQuotaFieldNumber = 6;
  ::google::protobuf::uint32 cardquota() const;
  void set_cardquota(::google::protobuf::uint32 value);

  // required uint32 DonateQuota = 7;
  bool has_donatequota() const;
  void clear_donatequota();
  static const int kDonateQuotaFieldNumber = 7;
  ::google::protobuf::uint32 donatequota() const;
  void set_donatequota(::google::protobuf::uint32 value);

  // optional uint32 TotalQuota = 8;
  bool has_totalquota() const;
  void clear_totalquota();
  static const int kTotalQuotaFieldNumber = 8;
  ::google::protobuf::uint32 totalquota() const;
  void set_totalquota(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.UpgradeChatRoomResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_chatroomdata();
  void clear_has_chatroomdata();
  void set_has_resultmsg();
  void clear_has_resultmsg();
  void set_has_maxcount();
  void clear_has_maxcount();
  void set_has_mobilequota();
  void clear_has_mobilequota();
  void set_has_cardquota();
  void clear_has_cardquota();
  void set_has_donatequota();
  void clear_has_donatequota();
  void set_has_totalquota();
  void clear_has_totalquota();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr chatroomdata_;
  ::google::protobuf::internal::ArenaStringPtr resultmsg_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 maxcount_;
  ::google::protobuf::uint32 mobilequota_;
  ::google::protobuf::uint32 cardquota_;
  ::google::protobuf::uint32 donatequota_;
  ::google::protobuf::uint32 totalquota_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddChatRoomDonateRecordReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.AddChatRoomDonateRecordReq) */ {
 public:
  AddChatRoomDonateRecordReq();
  virtual ~AddChatRoomDonateRecordReq();

  AddChatRoomDonateRecordReq(const AddChatRoomDonateRecordReq& from);

  inline AddChatRoomDonateRecordReq& operator=(const AddChatRoomDonateRecordReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddChatRoomDonateRecordReq& default_instance();

  static inline const AddChatRoomDonateRecordReq* internal_default_instance() {
    return reinterpret_cast<const AddChatRoomDonateRecordReq*>(
               &_AddChatRoomDonateRecordReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    58;

  void Swap(AddChatRoomDonateRecordReq* other);

  // implements Message ----------------------------------------------

  inline AddChatRoomDonateRecordReq* New() const PROTOBUF_FINAL { return New(NULL); }

  AddChatRoomDonateRecordReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddChatRoomDonateRecordReq& from);
  void MergeFrom(const AddChatRoomDonateRecordReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddChatRoomDonateRecordReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ChatRoomName = 2;
  bool has_chatroomname() const;
  void clear_chatroomname();
  static const int kChatRoomNameFieldNumber = 2;
  const ::std::string& chatroomname() const;
  void set_chatroomname(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomname(::std::string&& value);
  #endif
  void set_chatroomname(const char* value);
  void set_chatroomname(const char* value, size_t size);
  ::std::string* mutable_chatroomname();
  ::std::string* release_chatroomname();
  void set_allocated_chatroomname(::std::string* chatroomname);

  // optional string TransID = 3;
  bool has_transid() const;
  void clear_transid();
  static const int kTransIDFieldNumber = 3;
  const ::std::string& transid() const;
  void set_transid(const ::std::string& value);
  #if LANG_CXX11
  void set_transid(::std::string&& value);
  #endif
  void set_transid(const char* value);
  void set_transid(const char* value, size_t size);
  ::std::string* mutable_transid();
  ::std::string* release_transid();
  void set_allocated_transid(::std::string* transid);

  // optional string Title = 4;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 4;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string WebUrl = 5;
  bool has_weburl() const;
  void clear_weburl();
  static const int kWebUrlFieldNumber = 5;
  const ::std::string& weburl() const;
  void set_weburl(const ::std::string& value);
  #if LANG_CXX11
  void set_weburl(::std::string&& value);
  #endif
  void set_weburl(const char* value);
  void set_weburl(const char* value, size_t size);
  ::std::string* mutable_weburl();
  ::std::string* release_weburl();
  void set_allocated_weburl(::std::string* weburl);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.AddChatRoomDonateRecordReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_chatroomname();
  void clear_has_chatroomname();
  void set_has_transid();
  void clear_has_transid();
  void set_has_title();
  void clear_has_title();
  void set_has_weburl();
  void clear_has_weburl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr chatroomname_;
  ::google::protobuf::internal::ArenaStringPtr transid_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr weburl_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddChatRoomDonateRecordResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.AddChatRoomDonateRecordResp) */ {
 public:
  AddChatRoomDonateRecordResp();
  virtual ~AddChatRoomDonateRecordResp();

  AddChatRoomDonateRecordResp(const AddChatRoomDonateRecordResp& from);

  inline AddChatRoomDonateRecordResp& operator=(const AddChatRoomDonateRecordResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddChatRoomDonateRecordResp& default_instance();

  static inline const AddChatRoomDonateRecordResp* internal_default_instance() {
    return reinterpret_cast<const AddChatRoomDonateRecordResp*>(
               &_AddChatRoomDonateRecordResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    59;

  void Swap(AddChatRoomDonateRecordResp* other);

  // implements Message ----------------------------------------------

  inline AddChatRoomDonateRecordResp* New() const PROTOBUF_FINAL { return New(NULL); }

  AddChatRoomDonateRecordResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddChatRoomDonateRecordResp& from);
  void MergeFrom(const AddChatRoomDonateRecordResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddChatRoomDonateRecordResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 MaxCount = 2;
  bool has_maxcount() const;
  void clear_maxcount();
  static const int kMaxCountFieldNumber = 2;
  ::google::protobuf::uint32 maxcount() const;
  void set_maxcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.AddChatRoomDonateRecordResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_maxcount();
  void clear_has_maxcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 maxcount_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GoogleContactUploadItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GoogleContactUploadItem) */ {
 public:
  GoogleContactUploadItem();
  virtual ~GoogleContactUploadItem();

  GoogleContactUploadItem(const GoogleContactUploadItem& from);

  inline GoogleContactUploadItem& operator=(const GoogleContactUploadItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoogleContactUploadItem& default_instance();

  static inline const GoogleContactUploadItem* internal_default_instance() {
    return reinterpret_cast<const GoogleContactUploadItem*>(
               &_GoogleContactUploadItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    60;

  void Swap(GoogleContactUploadItem* other);

  // implements Message ----------------------------------------------

  inline GoogleContactUploadItem* New() const PROTOBUF_FINAL { return New(NULL); }

  GoogleContactUploadItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GoogleContactUploadItem& from);
  void MergeFrom(const GoogleContactUploadItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GoogleContactUploadItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string GoogleContactName = 1;
  bool has_googlecontactname() const;
  void clear_googlecontactname();
  static const int kGoogleContactNameFieldNumber = 1;
  const ::std::string& googlecontactname() const;
  void set_googlecontactname(const ::std::string& value);
  #if LANG_CXX11
  void set_googlecontactname(::std::string&& value);
  #endif
  void set_googlecontactname(const char* value);
  void set_googlecontactname(const char* value, size_t size);
  ::std::string* mutable_googlecontactname();
  ::std::string* release_googlecontactname();
  void set_allocated_googlecontactname(::std::string* googlecontactname);

  // @@protoc_insertion_point(class_scope:micromsg.GoogleContactUploadItem)
 private:
  void set_has_googlecontactname();
  void clear_has_googlecontactname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr googlecontactname_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListGoogleContactRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.ListGoogleContactRequest) */ {
 public:
  ListGoogleContactRequest();
  virtual ~ListGoogleContactRequest();

  ListGoogleContactRequest(const ListGoogleContactRequest& from);

  inline ListGoogleContactRequest& operator=(const ListGoogleContactRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListGoogleContactRequest& default_instance();

  static inline const ListGoogleContactRequest* internal_default_instance() {
    return reinterpret_cast<const ListGoogleContactRequest*>(
               &_ListGoogleContactRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    61;

  void Swap(ListGoogleContactRequest* other);

  // implements Message ----------------------------------------------

  inline ListGoogleContactRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListGoogleContactRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListGoogleContactRequest& from);
  void MergeFrom(const ListGoogleContactRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListGoogleContactRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.GoogleContactUploadItem List = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  const ::micromsg::GoogleContactUploadItem& list(int index) const;
  ::micromsg::GoogleContactUploadItem* mutable_list(int index);
  ::micromsg::GoogleContactUploadItem* add_list();
  ::google::protobuf::RepeatedPtrField< ::micromsg::GoogleContactUploadItem >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::GoogleContactUploadItem >&
      list() const;

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // required uint32 ContinueFlag = 4;
  bool has_continueflag() const;
  void clear_continueflag();
  static const int kContinueFlagFieldNumber = 4;
  ::google::protobuf::uint32 continueflag() const;
  void set_continueflag(::google::protobuf::uint32 value);

  // required uint32 ClickSource = 5;
  bool has_clicksource() const;
  void clear_clicksource();
  static const int kClickSourceFieldNumber = 5;
  ::google::protobuf::uint32 clicksource() const;
  void set_clicksource(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.ListGoogleContactRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_count();
  void clear_has_count();
  void set_has_continueflag();
  void clear_has_continueflag();
  void set_has_clicksource();
  void clear_has_clicksource();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::GoogleContactUploadItem > list_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 continueflag_;
  ::google::protobuf::uint32 clicksource_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GoogleContactItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GoogleContactItem) */ {
 public:
  GoogleContactItem();
  virtual ~GoogleContactItem();

  GoogleContactItem(const GoogleContactItem& from);

  inline GoogleContactItem& operator=(const GoogleContactItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoogleContactItem& default_instance();

  static inline const GoogleContactItem* internal_default_instance() {
    return reinterpret_cast<const GoogleContactItem*>(
               &_GoogleContactItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    62;

  void Swap(GoogleContactItem* other);

  // implements Message ----------------------------------------------

  inline GoogleContactItem* New() const PROTOBUF_FINAL { return New(NULL); }

  GoogleContactItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GoogleContactItem& from);
  void MergeFrom(const GoogleContactItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GoogleContactItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string GoogleContactName = 1;
  bool has_googlecontactname() const;
  void clear_googlecontactname();
  static const int kGoogleContactNameFieldNumber = 1;
  const ::std::string& googlecontactname() const;
  void set_googlecontactname(const ::std::string& value);
  #if LANG_CXX11
  void set_googlecontactname(::std::string&& value);
  #endif
  void set_googlecontactname(const char* value);
  void set_googlecontactname(const char* value, size_t size);
  ::std::string* mutable_googlecontactname();
  ::std::string* release_googlecontactname();
  void set_allocated_googlecontactname(::std::string* googlecontactname);

  // optional string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string BigHeadUrl = 3;
  bool has_bigheadurl() const;
  void clear_bigheadurl();
  static const int kBigHeadUrlFieldNumber = 3;
  const ::std::string& bigheadurl() const;
  void set_bigheadurl(const ::std::string& value);
  #if LANG_CXX11
  void set_bigheadurl(::std::string&& value);
  #endif
  void set_bigheadurl(const char* value);
  void set_bigheadurl(const char* value, size_t size);
  ::std::string* mutable_bigheadurl();
  ::std::string* release_bigheadurl();
  void set_allocated_bigheadurl(::std::string* bigheadurl);

  // optional string SmallHeadUrl = 4;
  bool has_smallheadurl() const;
  void clear_smallheadurl();
  static const int kSmallHeadUrlFieldNumber = 4;
  const ::std::string& smallheadurl() const;
  void set_smallheadurl(const ::std::string& value);
  #if LANG_CXX11
  void set_smallheadurl(::std::string&& value);
  #endif
  void set_smallheadurl(const char* value);
  void set_smallheadurl(const char* value, size_t size);
  ::std::string* mutable_smallheadurl();
  ::std::string* release_smallheadurl();
  void set_allocated_smallheadurl(::std::string* smallheadurl);

  // optional string NickName = 6;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 6;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string AntispamTicket = 7;
  bool has_antispamticket() const;
  void clear_antispamticket();
  static const int kAntispamTicketFieldNumber = 7;
  const ::std::string& antispamticket() const;
  void set_antispamticket(const ::std::string& value);
  #if LANG_CXX11
  void set_antispamticket(::std::string&& value);
  #endif
  void set_antispamticket(const char* value);
  void set_antispamticket(const char* value, size_t size);
  ::std::string* mutable_antispamticket();
  ::std::string* release_antispamticket();
  void set_allocated_antispamticket(::std::string* antispamticket);

  // required int32 Ret = 5;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 5;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GoogleContactItem)
 private:
  void set_has_googlecontactname();
  void clear_has_googlecontactname();
  void set_has_username();
  void clear_has_username();
  void set_has_bigheadurl();
  void clear_has_bigheadurl();
  void set_has_smallheadurl();
  void clear_has_smallheadurl();
  void set_has_ret();
  void clear_has_ret();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_antispamticket();
  void clear_has_antispamticket();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr googlecontactname_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr bigheadurl_;
  ::google::protobuf::internal::ArenaStringPtr smallheadurl_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr antispamticket_;
  ::google::protobuf::int32 ret_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListGoogleContactResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.ListGoogleContactResponse) */ {
 public:
  ListGoogleContactResponse();
  virtual ~ListGoogleContactResponse();

  ListGoogleContactResponse(const ListGoogleContactResponse& from);

  inline ListGoogleContactResponse& operator=(const ListGoogleContactResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListGoogleContactResponse& default_instance();

  static inline const ListGoogleContactResponse* internal_default_instance() {
    return reinterpret_cast<const ListGoogleContactResponse*>(
               &_ListGoogleContactResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    63;

  void Swap(ListGoogleContactResponse* other);

  // implements Message ----------------------------------------------

  inline ListGoogleContactResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListGoogleContactResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListGoogleContactResponse& from);
  void MergeFrom(const ListGoogleContactResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListGoogleContactResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.GoogleContactItem List = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  const ::micromsg::GoogleContactItem& list(int index) const;
  ::micromsg::GoogleContactItem* mutable_list(int index);
  ::micromsg::GoogleContactItem* add_list();
  ::google::protobuf::RepeatedPtrField< ::micromsg::GoogleContactItem >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::GoogleContactItem >&
      list() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.ListGoogleContactResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::GoogleContactItem > list_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InviteGoogleContactItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.InviteGoogleContactItem) */ {
 public:
  InviteGoogleContactItem();
  virtual ~InviteGoogleContactItem();

  InviteGoogleContactItem(const InviteGoogleContactItem& from);

  inline InviteGoogleContactItem& operator=(const InviteGoogleContactItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteGoogleContactItem& default_instance();

  static inline const InviteGoogleContactItem* internal_default_instance() {
    return reinterpret_cast<const InviteGoogleContactItem*>(
               &_InviteGoogleContactItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    64;

  void Swap(InviteGoogleContactItem* other);

  // implements Message ----------------------------------------------

  inline InviteGoogleContactItem* New() const PROTOBUF_FINAL { return New(NULL); }

  InviteGoogleContactItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InviteGoogleContactItem& from);
  void MergeFrom(const InviteGoogleContactItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InviteGoogleContactItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string GoogleContactName = 1;
  bool has_googlecontactname() const;
  void clear_googlecontactname();
  static const int kGoogleContactNameFieldNumber = 1;
  const ::std::string& googlecontactname() const;
  void set_googlecontactname(const ::std::string& value);
  #if LANG_CXX11
  void set_googlecontactname(::std::string&& value);
  #endif
  void set_googlecontactname(const char* value);
  void set_googlecontactname(const char* value, size_t size);
  ::std::string* mutable_googlecontactname();
  ::std::string* release_googlecontactname();
  void set_allocated_googlecontactname(::std::string* googlecontactname);

  // @@protoc_insertion_point(class_scope:micromsg.InviteGoogleContactItem)
 private:
  void set_has_googlecontactname();
  void clear_has_googlecontactname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr googlecontactname_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InviteGoogleContactRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.InviteGoogleContactRequest) */ {
 public:
  InviteGoogleContactRequest();
  virtual ~InviteGoogleContactRequest();

  InviteGoogleContactRequest(const InviteGoogleContactRequest& from);

  inline InviteGoogleContactRequest& operator=(const InviteGoogleContactRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteGoogleContactRequest& default_instance();

  static inline const InviteGoogleContactRequest* internal_default_instance() {
    return reinterpret_cast<const InviteGoogleContactRequest*>(
               &_InviteGoogleContactRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    65;

  void Swap(InviteGoogleContactRequest* other);

  // implements Message ----------------------------------------------

  inline InviteGoogleContactRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  InviteGoogleContactRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InviteGoogleContactRequest& from);
  void MergeFrom(const InviteGoogleContactRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InviteGoogleContactRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.InviteGoogleContactItem List = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  const ::micromsg::InviteGoogleContactItem& list(int index) const;
  ::micromsg::InviteGoogleContactItem* mutable_list(int index);
  ::micromsg::InviteGoogleContactItem* add_list();
  ::google::protobuf::RepeatedPtrField< ::micromsg::InviteGoogleContactItem >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::InviteGoogleContactItem >&
      list() const;

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.InviteGoogleContactRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::InviteGoogleContactItem > list_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InviteGoogleContactResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.InviteGoogleContactResponse) */ {
 public:
  InviteGoogleContactResponse();
  virtual ~InviteGoogleContactResponse();

  InviteGoogleContactResponse(const InviteGoogleContactResponse& from);

  inline InviteGoogleContactResponse& operator=(const InviteGoogleContactResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteGoogleContactResponse& default_instance();

  static inline const InviteGoogleContactResponse* internal_default_instance() {
    return reinterpret_cast<const InviteGoogleContactResponse*>(
               &_InviteGoogleContactResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    66;

  void Swap(InviteGoogleContactResponse* other);

  // implements Message ----------------------------------------------

  inline InviteGoogleContactResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  InviteGoogleContactResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InviteGoogleContactResponse& from);
  void MergeFrom(const InviteGoogleContactResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InviteGoogleContactResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 Rets = 3 [packed = true];
  int rets_size() const;
  void clear_rets();
  static const int kRetsFieldNumber = 3;
  ::google::protobuf::int32 rets(int index) const;
  void set_rets(int index, ::google::protobuf::int32 value);
  void add_rets(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rets() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rets();

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.InviteGoogleContactResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rets_;
  mutable int _rets_cached_byte_size_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BBMContactUploadItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BBMContactUploadItem) */ {
 public:
  BBMContactUploadItem();
  virtual ~BBMContactUploadItem();

  BBMContactUploadItem(const BBMContactUploadItem& from);

  inline BBMContactUploadItem& operator=(const BBMContactUploadItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BBMContactUploadItem& default_instance();

  static inline const BBMContactUploadItem* internal_default_instance() {
    return reinterpret_cast<const BBMContactUploadItem*>(
               &_BBMContactUploadItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    67;

  void Swap(BBMContactUploadItem* other);

  // implements Message ----------------------------------------------

  inline BBMContactUploadItem* New() const PROTOBUF_FINAL { return New(NULL); }

  BBMContactUploadItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BBMContactUploadItem& from);
  void MergeFrom(const BBMContactUploadItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BBMContactUploadItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string BBPPID = 1;
  bool has_bbppid() const;
  void clear_bbppid();
  static const int kBBPPIDFieldNumber = 1;
  const ::std::string& bbppid() const;
  void set_bbppid(const ::std::string& value);
  #if LANG_CXX11
  void set_bbppid(::std::string&& value);
  #endif
  void set_bbppid(const char* value);
  void set_bbppid(const char* value, size_t size);
  ::std::string* mutable_bbppid();
  ::std::string* release_bbppid();
  void set_allocated_bbppid(::std::string* bbppid);

  // optional string BBPIN = 2;
  bool has_bbpin() const;
  void clear_bbpin();
  static const int kBBPINFieldNumber = 2;
  const ::std::string& bbpin() const;
  void set_bbpin(const ::std::string& value);
  #if LANG_CXX11
  void set_bbpin(::std::string&& value);
  #endif
  void set_bbpin(const char* value);
  void set_bbpin(const char* value, size_t size);
  ::std::string* mutable_bbpin();
  ::std::string* release_bbpin();
  void set_allocated_bbpin(::std::string* bbpin);

  // optional string BBMNickName = 3;
  bool has_bbmnickname() const;
  void clear_bbmnickname();
  static const int kBBMNickNameFieldNumber = 3;
  const ::std::string& bbmnickname() const;
  void set_bbmnickname(const ::std::string& value);
  #if LANG_CXX11
  void set_bbmnickname(::std::string&& value);
  #endif
  void set_bbmnickname(const char* value);
  void set_bbmnickname(const char* value, size_t size);
  ::std::string* mutable_bbmnickname();
  ::std::string* release_bbmnickname();
  void set_allocated_bbmnickname(::std::string* bbmnickname);

  // @@protoc_insertion_point(class_scope:micromsg.BBMContactUploadItem)
 private:
  void set_has_bbppid();
  void clear_has_bbppid();
  void set_has_bbpin();
  void clear_has_bbpin();
  void set_has_bbmnickname();
  void clear_has_bbmnickname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr bbppid_;
  ::google::protobuf::internal::ArenaStringPtr bbpin_;
  ::google::protobuf::internal::ArenaStringPtr bbmnickname_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListBBMContactRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.ListBBMContactRequest) */ {
 public:
  ListBBMContactRequest();
  virtual ~ListBBMContactRequest();

  ListBBMContactRequest(const ListBBMContactRequest& from);

  inline ListBBMContactRequest& operator=(const ListBBMContactRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListBBMContactRequest& default_instance();

  static inline const ListBBMContactRequest* internal_default_instance() {
    return reinterpret_cast<const ListBBMContactRequest*>(
               &_ListBBMContactRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    68;

  void Swap(ListBBMContactRequest* other);

  // implements Message ----------------------------------------------

  inline ListBBMContactRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListBBMContactRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListBBMContactRequest& from);
  void MergeFrom(const ListBBMContactRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListBBMContactRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.BBMContactUploadItem List = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  const ::micromsg::BBMContactUploadItem& list(int index) const;
  ::micromsg::BBMContactUploadItem* mutable_list(int index);
  ::micromsg::BBMContactUploadItem* add_list();
  ::google::protobuf::RepeatedPtrField< ::micromsg::BBMContactUploadItem >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::BBMContactUploadItem >&
      list() const;

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // required uint32 ContinueFlag = 4;
  bool has_continueflag() const;
  void clear_continueflag();
  static const int kContinueFlagFieldNumber = 4;
  ::google::protobuf::uint32 continueflag() const;
  void set_continueflag(::google::protobuf::uint32 value);

  // required uint32 ClickSource = 5;
  bool has_clicksource() const;
  void clear_clicksource();
  static const int kClickSourceFieldNumber = 5;
  ::google::protobuf::uint32 clicksource() const;
  void set_clicksource(::google::protobuf::uint32 value);

  // required uint32 Opcode = 6;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpcodeFieldNumber = 6;
  ::google::protobuf::uint32 opcode() const;
  void set_opcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.ListBBMContactRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_count();
  void clear_has_count();
  void set_has_continueflag();
  void clear_has_continueflag();
  void set_has_clicksource();
  void clear_has_clicksource();
  void set_has_opcode();
  void clear_has_opcode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::BBMContactUploadItem > list_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 continueflag_;
  ::google::protobuf::uint32 clicksource_;
  ::google::protobuf::uint32 opcode_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BBMContactItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BBMContactItem) */ {
 public:
  BBMContactItem();
  virtual ~BBMContactItem();

  BBMContactItem(const BBMContactItem& from);

  inline BBMContactItem& operator=(const BBMContactItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BBMContactItem& default_instance();

  static inline const BBMContactItem* internal_default_instance() {
    return reinterpret_cast<const BBMContactItem*>(
               &_BBMContactItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    69;

  void Swap(BBMContactItem* other);

  // implements Message ----------------------------------------------

  inline BBMContactItem* New() const PROTOBUF_FINAL { return New(NULL); }

  BBMContactItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BBMContactItem& from);
  void MergeFrom(const BBMContactItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BBMContactItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string BBPPID = 1;
  bool has_bbppid() const;
  void clear_bbppid();
  static const int kBBPPIDFieldNumber = 1;
  const ::std::string& bbppid() const;
  void set_bbppid(const ::std::string& value);
  #if LANG_CXX11
  void set_bbppid(::std::string&& value);
  #endif
  void set_bbppid(const char* value);
  void set_bbppid(const char* value, size_t size);
  ::std::string* mutable_bbppid();
  ::std::string* release_bbppid();
  void set_allocated_bbppid(::std::string* bbppid);

  // optional string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string BigHeadUrl = 3;
  bool has_bigheadurl() const;
  void clear_bigheadurl();
  static const int kBigHeadUrlFieldNumber = 3;
  const ::std::string& bigheadurl() const;
  void set_bigheadurl(const ::std::string& value);
  #if LANG_CXX11
  void set_bigheadurl(::std::string&& value);
  #endif
  void set_bigheadurl(const char* value);
  void set_bigheadurl(const char* value, size_t size);
  ::std::string* mutable_bigheadurl();
  ::std::string* release_bigheadurl();
  void set_allocated_bigheadurl(::std::string* bigheadurl);

  // optional string SmallHeadUrl = 4;
  bool has_smallheadurl() const;
  void clear_smallheadurl();
  static const int kSmallHeadUrlFieldNumber = 4;
  const ::std::string& smallheadurl() const;
  void set_smallheadurl(const ::std::string& value);
  #if LANG_CXX11
  void set_smallheadurl(::std::string&& value);
  #endif
  void set_smallheadurl(const char* value);
  void set_smallheadurl(const char* value, size_t size);
  ::std::string* mutable_smallheadurl();
  ::std::string* release_smallheadurl();
  void set_allocated_smallheadurl(::std::string* smallheadurl);

  // optional string BBPIN = 5;
  bool has_bbpin() const;
  void clear_bbpin();
  static const int kBBPINFieldNumber = 5;
  const ::std::string& bbpin() const;
  void set_bbpin(const ::std::string& value);
  #if LANG_CXX11
  void set_bbpin(::std::string&& value);
  #endif
  void set_bbpin(const char* value);
  void set_bbpin(const char* value, size_t size);
  ::std::string* mutable_bbpin();
  ::std::string* release_bbpin();
  void set_allocated_bbpin(::std::string* bbpin);

  // optional string BBMNickName = 6;
  bool has_bbmnickname() const;
  void clear_bbmnickname();
  static const int kBBMNickNameFieldNumber = 6;
  const ::std::string& bbmnickname() const;
  void set_bbmnickname(const ::std::string& value);
  #if LANG_CXX11
  void set_bbmnickname(::std::string&& value);
  #endif
  void set_bbmnickname(const char* value);
  void set_bbmnickname(const char* value, size_t size);
  ::std::string* mutable_bbmnickname();
  ::std::string* release_bbmnickname();
  void set_allocated_bbmnickname(::std::string* bbmnickname);

  // optional string NickName = 8;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 8;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string AntispamTicket = 9;
  bool has_antispamticket() const;
  void clear_antispamticket();
  static const int kAntispamTicketFieldNumber = 9;
  const ::std::string& antispamticket() const;
  void set_antispamticket(const ::std::string& value);
  #if LANG_CXX11
  void set_antispamticket(::std::string&& value);
  #endif
  void set_antispamticket(const char* value);
  void set_antispamticket(const char* value, size_t size);
  ::std::string* mutable_antispamticket();
  ::std::string* release_antispamticket();
  void set_allocated_antispamticket(::std::string* antispamticket);

  // required int32 Ret = 7;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 7;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.BBMContactItem)
 private:
  void set_has_bbppid();
  void clear_has_bbppid();
  void set_has_username();
  void clear_has_username();
  void set_has_bigheadurl();
  void clear_has_bigheadurl();
  void set_has_smallheadurl();
  void clear_has_smallheadurl();
  void set_has_bbpin();
  void clear_has_bbpin();
  void set_has_bbmnickname();
  void clear_has_bbmnickname();
  void set_has_ret();
  void clear_has_ret();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_antispamticket();
  void clear_has_antispamticket();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr bbppid_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr bigheadurl_;
  ::google::protobuf::internal::ArenaStringPtr smallheadurl_;
  ::google::protobuf::internal::ArenaStringPtr bbpin_;
  ::google::protobuf::internal::ArenaStringPtr bbmnickname_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr antispamticket_;
  ::google::protobuf::int32 ret_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListBBMContactResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.ListBBMContactResponse) */ {
 public:
  ListBBMContactResponse();
  virtual ~ListBBMContactResponse();

  ListBBMContactResponse(const ListBBMContactResponse& from);

  inline ListBBMContactResponse& operator=(const ListBBMContactResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListBBMContactResponse& default_instance();

  static inline const ListBBMContactResponse* internal_default_instance() {
    return reinterpret_cast<const ListBBMContactResponse*>(
               &_ListBBMContactResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    70;

  void Swap(ListBBMContactResponse* other);

  // implements Message ----------------------------------------------

  inline ListBBMContactResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListBBMContactResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListBBMContactResponse& from);
  void MergeFrom(const ListBBMContactResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListBBMContactResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.BBMContactItem List = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  const ::micromsg::BBMContactItem& list(int index) const;
  ::micromsg::BBMContactItem* mutable_list(int index);
  ::micromsg::BBMContactItem* add_list();
  ::google::protobuf::RepeatedPtrField< ::micromsg::BBMContactItem >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::BBMContactItem >&
      list() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.ListBBMContactResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::BBMContactItem > list_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OnlineInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.OnlineInfo) */ {
 public:
  OnlineInfo();
  virtual ~OnlineInfo();

  OnlineInfo(const OnlineInfo& from);

  inline OnlineInfo& operator=(const OnlineInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OnlineInfo& default_instance();

  static inline const OnlineInfo* internal_default_instance() {
    return reinterpret_cast<const OnlineInfo*>(
               &_OnlineInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    71;

  void Swap(OnlineInfo* other);

  // implements Message ----------------------------------------------

  inline OnlineInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  OnlineInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OnlineInfo& from);
  void MergeFrom(const OnlineInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OnlineInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes DeviceID = 2;
  bool has_deviceid() const;
  void clear_deviceid();
  static const int kDeviceIDFieldNumber = 2;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const void* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // optional string WordingXML = 3;
  bool has_wordingxml() const;
  void clear_wordingxml();
  static const int kWordingXMLFieldNumber = 3;
  const ::std::string& wordingxml() const;
  void set_wordingxml(const ::std::string& value);
  #if LANG_CXX11
  void set_wordingxml(::std::string&& value);
  #endif
  void set_wordingxml(const char* value);
  void set_wordingxml(const char* value, size_t size);
  ::std::string* mutable_wordingxml();
  ::std::string* release_wordingxml();
  void set_allocated_wordingxml(::std::string* wordingxml);

  // required .micromsg.SKBuiltinBuffer_t ClientKey = 4;
  bool has_clientkey() const;
  void clear_clientkey();
  static const int kClientKeyFieldNumber = 4;
  const ::micromsg::SKBuiltinBuffer_t& clientkey() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_clientkey();
  ::micromsg::SKBuiltinBuffer_t* release_clientkey();
  void set_allocated_clientkey(::micromsg::SKBuiltinBuffer_t* clientkey);

  // required uint32 DeviceType = 1;
  bool has_devicetype() const;
  void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 1;
  ::google::protobuf::uint32 devicetype() const;
  void set_devicetype(::google::protobuf::uint32 value);

  // required uint32 OnlineStatus = 5;
  bool has_onlinestatus() const;
  void clear_onlinestatus();
  static const int kOnlineStatusFieldNumber = 5;
  ::google::protobuf::uint32 onlinestatus() const;
  void set_onlinestatus(::google::protobuf::uint32 value);

  // required uint32 DeviceHelperType = 6;
  bool has_devicehelpertype() const;
  void clear_devicehelpertype();
  static const int kDeviceHelperTypeFieldNumber = 6;
  ::google::protobuf::uint32 devicehelpertype() const;
  void set_devicehelpertype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.OnlineInfo)
 private:
  void set_has_devicetype();
  void clear_has_devicetype();
  void set_has_deviceid();
  void clear_has_deviceid();
  void set_has_wordingxml();
  void clear_has_wordingxml();
  void set_has_clientkey();
  void clear_has_clientkey();
  void set_has_onlinestatus();
  void clear_has_onlinestatus();
  void set_has_devicehelpertype();
  void clear_has_devicehelpertype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::google::protobuf::internal::ArenaStringPtr wordingxml_;
  ::micromsg::SKBuiltinBuffer_t* clientkey_;
  ::google::protobuf::uint32 devicetype_;
  ::google::protobuf::uint32 onlinestatus_;
  ::google::protobuf::uint32 devicehelpertype_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetOnlineInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetOnlineInfoRequest) */ {
 public:
  GetOnlineInfoRequest();
  virtual ~GetOnlineInfoRequest();

  GetOnlineInfoRequest(const GetOnlineInfoRequest& from);

  inline GetOnlineInfoRequest& operator=(const GetOnlineInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetOnlineInfoRequest& default_instance();

  static inline const GetOnlineInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetOnlineInfoRequest*>(
               &_GetOnlineInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    72;

  void Swap(GetOnlineInfoRequest* other);

  // implements Message ----------------------------------------------

  inline GetOnlineInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetOnlineInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetOnlineInfoRequest& from);
  void MergeFrom(const GetOnlineInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetOnlineInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Language = 2;
  bool has_language() const;
  void clear_language();
  static const int kLanguageFieldNumber = 2;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  #if LANG_CXX11
  void set_language(::std::string&& value);
  #endif
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.GetOnlineInfoRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_language();
  void clear_has_language();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetOnlineInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetOnlineInfoResponse) */ {
 public:
  GetOnlineInfoResponse();
  virtual ~GetOnlineInfoResponse();

  GetOnlineInfoResponse(const GetOnlineInfoResponse& from);

  inline GetOnlineInfoResponse& operator=(const GetOnlineInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetOnlineInfoResponse& default_instance();

  static inline const GetOnlineInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetOnlineInfoResponse*>(
               &_GetOnlineInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    73;

  void Swap(GetOnlineInfoResponse* other);

  // implements Message ----------------------------------------------

  inline GetOnlineInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetOnlineInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetOnlineInfoResponse& from);
  void MergeFrom(const GetOnlineInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetOnlineInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.OnlineInfo OnlineList = 3;
  int onlinelist_size() const;
  void clear_onlinelist();
  static const int kOnlineListFieldNumber = 3;
  const ::micromsg::OnlineInfo& onlinelist(int index) const;
  ::micromsg::OnlineInfo* mutable_onlinelist(int index);
  ::micromsg::OnlineInfo* add_onlinelist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::OnlineInfo >*
      mutable_onlinelist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::OnlineInfo >&
      onlinelist() const;

  // optional string SummaryXML = 4;
  bool has_summaryxml() const;
  void clear_summaryxml();
  static const int kSummaryXMLFieldNumber = 4;
  const ::std::string& summaryxml() const;
  void set_summaryxml(const ::std::string& value);
  #if LANG_CXX11
  void set_summaryxml(::std::string&& value);
  #endif
  void set_summaryxml(const char* value);
  void set_summaryxml(const char* value, size_t size);
  ::std::string* mutable_summaryxml();
  ::std::string* release_summaryxml();
  void set_allocated_summaryxml(::std::string* summaryxml);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 OnlineCount = 2;
  bool has_onlinecount() const;
  void clear_onlinecount();
  static const int kOnlineCountFieldNumber = 2;
  ::google::protobuf::uint32 onlinecount() const;
  void set_onlinecount(::google::protobuf::uint32 value);

  // optional uint32 Flag = 5;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 5;
  ::google::protobuf::uint32 flag() const;
  void set_flag(::google::protobuf::uint32 value);

  // optional uint32 IConType = 6;
  bool has_icontype() const;
  void clear_icontype();
  static const int kIConTypeFieldNumber = 6;
  ::google::protobuf::uint32 icontype() const;
  void set_icontype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetOnlineInfoResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_onlinecount();
  void clear_has_onlinecount();
  void set_has_summaryxml();
  void clear_has_summaryxml();
  void set_has_flag();
  void clear_has_flag();
  void set_has_icontype();
  void clear_has_icontype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::OnlineInfo > onlinelist_;
  ::google::protobuf::internal::ArenaStringPtr summaryxml_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 onlinecount_;
  ::google::protobuf::uint32 flag_;
  ::google::protobuf::uint32 icontype_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetChatroomMemberDetailRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetChatroomMemberDetailRequest) */ {
 public:
  GetChatroomMemberDetailRequest();
  virtual ~GetChatroomMemberDetailRequest();

  GetChatroomMemberDetailRequest(const GetChatroomMemberDetailRequest& from);

  inline GetChatroomMemberDetailRequest& operator=(const GetChatroomMemberDetailRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatroomMemberDetailRequest& default_instance();

  static inline const GetChatroomMemberDetailRequest* internal_default_instance() {
    return reinterpret_cast<const GetChatroomMemberDetailRequest*>(
               &_GetChatroomMemberDetailRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    74;

  void Swap(GetChatroomMemberDetailRequest* other);

  // implements Message ----------------------------------------------

  inline GetChatroomMemberDetailRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetChatroomMemberDetailRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetChatroomMemberDetailRequest& from);
  void MergeFrom(const GetChatroomMemberDetailRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetChatroomMemberDetailRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ChatroomUserName = 2;
  bool has_chatroomusername() const;
  void clear_chatroomusername();
  static const int kChatroomUserNameFieldNumber = 2;
  const ::std::string& chatroomusername() const;
  void set_chatroomusername(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomusername(::std::string&& value);
  #endif
  void set_chatroomusername(const char* value);
  void set_chatroomusername(const char* value, size_t size);
  ::std::string* mutable_chatroomusername();
  ::std::string* release_chatroomusername();
  void set_allocated_chatroomusername(::std::string* chatroomusername);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 ClientVersion = 3;
  bool has_clientversion() const;
  void clear_clientversion();
  static const int kClientVersionFieldNumber = 3;
  ::google::protobuf::uint32 clientversion() const;
  void set_clientversion(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetChatroomMemberDetailRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_chatroomusername();
  void clear_has_chatroomusername();
  void set_has_clientversion();
  void clear_has_clientversion();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr chatroomusername_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 clientversion_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetChatroomMemberDetailResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetChatroomMemberDetailResponse) */ {
 public:
  GetChatroomMemberDetailResponse();
  virtual ~GetChatroomMemberDetailResponse();

  GetChatroomMemberDetailResponse(const GetChatroomMemberDetailResponse& from);

  inline GetChatroomMemberDetailResponse& operator=(const GetChatroomMemberDetailResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatroomMemberDetailResponse& default_instance();

  static inline const GetChatroomMemberDetailResponse* internal_default_instance() {
    return reinterpret_cast<const GetChatroomMemberDetailResponse*>(
               &_GetChatroomMemberDetailResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    75;

  void Swap(GetChatroomMemberDetailResponse* other);

  // implements Message ----------------------------------------------

  inline GetChatroomMemberDetailResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetChatroomMemberDetailResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetChatroomMemberDetailResponse& from);
  void MergeFrom(const GetChatroomMemberDetailResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetChatroomMemberDetailResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ChatroomUserName = 2;
  bool has_chatroomusername() const;
  void clear_chatroomusername();
  static const int kChatroomUserNameFieldNumber = 2;
  const ::std::string& chatroomusername() const;
  void set_chatroomusername(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomusername(::std::string&& value);
  #endif
  void set_chatroomusername(const char* value);
  void set_chatroomusername(const char* value, size_t size);
  ::std::string* mutable_chatroomusername();
  ::std::string* release_chatroomusername();
  void set_allocated_chatroomusername(::std::string* chatroomusername);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required .micromsg.ChatRoomMemberData NewChatroomData = 4;
  bool has_newchatroomdata() const;
  void clear_newchatroomdata();
  static const int kNewChatroomDataFieldNumber = 4;
  const ::micromsg::ChatRoomMemberData& newchatroomdata() const;
  ::micromsg::ChatRoomMemberData* mutable_newchatroomdata();
  ::micromsg::ChatRoomMemberData* release_newchatroomdata();
  void set_allocated_newchatroomdata(::micromsg::ChatRoomMemberData* newchatroomdata);

  // required uint32 ServerVersion = 3;
  bool has_serverversion() const;
  void clear_serverversion();
  static const int kServerVersionFieldNumber = 3;
  ::google::protobuf::uint32 serverversion() const;
  void set_serverversion(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetChatroomMemberDetailResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_chatroomusername();
  void clear_has_chatroomusername();
  void set_has_serverversion();
  void clear_has_serverversion();
  void set_has_newchatroomdata();
  void clear_has_newchatroomdata();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr chatroomusername_;
  ::micromsg::BaseResponse* baseresponse_;
  ::micromsg::ChatRoomMemberData* newchatroomdata_;
  ::google::protobuf::uint32 serverversion_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetContactRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetContactRequest) */ {
 public:
  GetContactRequest();
  virtual ~GetContactRequest();

  GetContactRequest(const GetContactRequest& from);

  inline GetContactRequest& operator=(const GetContactRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetContactRequest& default_instance();

  static inline const GetContactRequest* internal_default_instance() {
    return reinterpret_cast<const GetContactRequest*>(
               &_GetContactRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    76;

  void Swap(GetContactRequest* other);

  // implements Message ----------------------------------------------

  inline GetContactRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetContactRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetContactRequest& from);
  void MergeFrom(const GetContactRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetContactRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.SKBuiltinString_t UserNameList = 3;
  int usernamelist_size() const;
  void clear_usernamelist();
  static const int kUserNameListFieldNumber = 3;
  const ::micromsg::SKBuiltinString_t& usernamelist(int index) const;
  ::micromsg::SKBuiltinString_t* mutable_usernamelist(int index);
  ::micromsg::SKBuiltinString_t* add_usernamelist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
      mutable_usernamelist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
      usernamelist() const;

  // repeated .micromsg.SKBuiltinString_t AntispamTicket = 5;
  int antispamticket_size() const;
  void clear_antispamticket();
  static const int kAntispamTicketFieldNumber = 5;
  const ::micromsg::SKBuiltinString_t& antispamticket(int index) const;
  ::micromsg::SKBuiltinString_t* mutable_antispamticket(int index);
  ::micromsg::SKBuiltinString_t* add_antispamticket();
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
      mutable_antispamticket();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
      antispamticket() const;

  // repeated .micromsg.SKBuiltinString_t FromChatRoom = 7;
  int fromchatroom_size() const;
  void clear_fromchatroom();
  static const int kFromChatRoomFieldNumber = 7;
  const ::micromsg::SKBuiltinString_t& fromchatroom(int index) const;
  ::micromsg::SKBuiltinString_t* mutable_fromchatroom(int index);
  ::micromsg::SKBuiltinString_t* add_fromchatroom();
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
      mutable_fromchatroom();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
      fromchatroom() const;

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 UserCount = 2;
  bool has_usercount() const;
  void clear_usercount();
  static const int kUserCountFieldNumber = 2;
  ::google::protobuf::uint32 usercount() const;
  void set_usercount(::google::protobuf::uint32 value);

  // optional uint32 AntispamTicketCount = 4;
  bool has_antispamticketcount() const;
  void clear_antispamticketcount();
  static const int kAntispamTicketCountFieldNumber = 4;
  ::google::protobuf::uint32 antispamticketcount() const;
  void set_antispamticketcount(::google::protobuf::uint32 value);

  // optional uint32 FromChatRoomCount = 6;
  bool has_fromchatroomcount() const;
  void clear_fromchatroomcount();
  static const int kFromChatRoomCountFieldNumber = 6;
  ::google::protobuf::uint32 fromchatroomcount() const;
  void set_fromchatroomcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetContactRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_usercount();
  void clear_has_usercount();
  void set_has_antispamticketcount();
  void clear_has_antispamticketcount();
  void set_has_fromchatroomcount();
  void clear_has_fromchatroomcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t > usernamelist_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t > antispamticket_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t > fromchatroom_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 usercount_;
  ::google::protobuf::uint32 antispamticketcount_;
  ::google::protobuf::uint32 fromchatroomcount_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetContactResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetContactResponse) */ {
 public:
  GetContactResponse();
  virtual ~GetContactResponse();

  GetContactResponse(const GetContactResponse& from);

  inline GetContactResponse& operator=(const GetContactResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetContactResponse& default_instance();

  static inline const GetContactResponse* internal_default_instance() {
    return reinterpret_cast<const GetContactResponse*>(
               &_GetContactResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    77;

  void Swap(GetContactResponse* other);

  // implements Message ----------------------------------------------

  inline GetContactResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetContactResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetContactResponse& from);
  void MergeFrom(const GetContactResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetContactResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.ModContact ContactList = 3;
  int contactlist_size() const;
  void clear_contactlist();
  static const int kContactListFieldNumber = 3;
  const ::micromsg::ModContact& contactlist(int index) const;
  ::micromsg::ModContact* mutable_contactlist(int index);
  ::micromsg::ModContact* add_contactlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::ModContact >*
      mutable_contactlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::ModContact >&
      contactlist() const;

  // repeated int32 Ret = 4 [packed = true];
  int ret_size() const;
  void clear_ret();
  static const int kRetFieldNumber = 4;
  ::google::protobuf::int32 ret(int index) const;
  void set_ret(int index, ::google::protobuf::int32 value);
  void add_ret(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ret() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ret();

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 ContactCount = 2;
  bool has_contactcount() const;
  void clear_contactcount();
  static const int kContactCountFieldNumber = 2;
  ::google::protobuf::uint32 contactcount() const;
  void set_contactcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetContactResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_contactcount();
  void clear_has_contactcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::ModContact > contactlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ret_;
  mutable int _ret_cached_byte_size_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 contactcount_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UploadCardImgRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UploadCardImgRequest) */ {
 public:
  UploadCardImgRequest();
  virtual ~UploadCardImgRequest();

  UploadCardImgRequest(const UploadCardImgRequest& from);

  inline UploadCardImgRequest& operator=(const UploadCardImgRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadCardImgRequest& default_instance();

  static inline const UploadCardImgRequest* internal_default_instance() {
    return reinterpret_cast<const UploadCardImgRequest*>(
               &_UploadCardImgRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    78;

  void Swap(UploadCardImgRequest* other);

  // implements Message ----------------------------------------------

  inline UploadCardImgRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadCardImgRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadCardImgRequest& from);
  void MergeFrom(const UploadCardImgRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadCardImgRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ClientId = 2;
  bool has_clientid() const;
  void clear_clientid();
  static const int kClientIdFieldNumber = 2;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // optional string ContactUserName = 7;
  bool has_contactusername() const;
  void clear_contactusername();
  static const int kContactUserNameFieldNumber = 7;
  const ::std::string& contactusername() const;
  void set_contactusername(const ::std::string& value);
  #if LANG_CXX11
  void set_contactusername(::std::string&& value);
  #endif
  void set_contactusername(const char* value);
  void set_contactusername(const char* value, size_t size);
  ::std::string* mutable_contactusername();
  ::std::string* release_contactusername();
  void set_allocated_contactusername(::std::string* contactusername);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required .micromsg.SKBuiltinBuffer_t Data = 6;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::micromsg::SKBuiltinBuffer_t& data() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_data();
  ::micromsg::SKBuiltinBuffer_t* release_data();
  void set_allocated_data(::micromsg::SKBuiltinBuffer_t* data);

  // required uint32 TotalLen = 3;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 3;
  ::google::protobuf::uint32 totallen() const;
  void set_totallen(::google::protobuf::uint32 value);

  // required uint32 StartPos = 4;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 4;
  ::google::protobuf::uint32 startpos() const;
  void set_startpos(::google::protobuf::uint32 value);

  // required uint32 DataLen = 5;
  bool has_datalen() const;
  void clear_datalen();
  static const int kDataLenFieldNumber = 5;
  ::google::protobuf::uint32 datalen() const;
  void set_datalen(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.UploadCardImgRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_clientid();
  void clear_has_clientid();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_datalen();
  void clear_has_datalen();
  void set_has_data();
  void clear_has_data();
  void set_has_contactusername();
  void clear_has_contactusername();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr contactusername_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::SKBuiltinBuffer_t* data_;
  ::google::protobuf::uint32 totallen_;
  ::google::protobuf::uint32 startpos_;
  ::google::protobuf::uint32 datalen_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UploadCardImgResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UploadCardImgResponse) */ {
 public:
  UploadCardImgResponse();
  virtual ~UploadCardImgResponse();

  UploadCardImgResponse(const UploadCardImgResponse& from);

  inline UploadCardImgResponse& operator=(const UploadCardImgResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadCardImgResponse& default_instance();

  static inline const UploadCardImgResponse* internal_default_instance() {
    return reinterpret_cast<const UploadCardImgResponse*>(
               &_UploadCardImgResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    79;

  void Swap(UploadCardImgResponse* other);

  // implements Message ----------------------------------------------

  inline UploadCardImgResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadCardImgResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadCardImgResponse& from);
  void MergeFrom(const UploadCardImgResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadCardImgResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ClientId = 4;
  bool has_clientid() const;
  void clear_clientid();
  static const int kClientIdFieldNumber = 4;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // optional string CardImgUrl = 5;
  bool has_cardimgurl() const;
  void clear_cardimgurl();
  static const int kCardImgUrlFieldNumber = 5;
  const ::std::string& cardimgurl() const;
  void set_cardimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_cardimgurl(::std::string&& value);
  #endif
  void set_cardimgurl(const char* value);
  void set_cardimgurl(const char* value, size_t size);
  ::std::string* mutable_cardimgurl();
  ::std::string* release_cardimgurl();
  void set_allocated_cardimgurl(::std::string* cardimgurl);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 StartPos = 2;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 2;
  ::google::protobuf::uint32 startpos() const;
  void set_startpos(::google::protobuf::uint32 value);

  // required uint32 TotalLen = 3;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 3;
  ::google::protobuf::uint32 totallen() const;
  void set_totallen(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.UploadCardImgResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_clientid();
  void clear_has_clientid();
  void set_has_cardimgurl();
  void clear_has_cardimgurl();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr cardimgurl_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 startpos_;
  ::google::protobuf::uint32 totallen_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteCardImgRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.DeleteCardImgRequest) */ {
 public:
  DeleteCardImgRequest();
  virtual ~DeleteCardImgRequest();

  DeleteCardImgRequest(const DeleteCardImgRequest& from);

  inline DeleteCardImgRequest& operator=(const DeleteCardImgRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteCardImgRequest& default_instance();

  static inline const DeleteCardImgRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteCardImgRequest*>(
               &_DeleteCardImgRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    80;

  void Swap(DeleteCardImgRequest* other);

  // implements Message ----------------------------------------------

  inline DeleteCardImgRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteCardImgRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteCardImgRequest& from);
  void MergeFrom(const DeleteCardImgRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteCardImgRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ContactUserName = 2;
  bool has_contactusername() const;
  void clear_contactusername();
  static const int kContactUserNameFieldNumber = 2;
  const ::std::string& contactusername() const;
  void set_contactusername(const ::std::string& value);
  #if LANG_CXX11
  void set_contactusername(::std::string&& value);
  #endif
  void set_contactusername(const char* value);
  void set_contactusername(const char* value, size_t size);
  ::std::string* mutable_contactusername();
  ::std::string* release_contactusername();
  void set_allocated_contactusername(::std::string* contactusername);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.DeleteCardImgRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_contactusername();
  void clear_has_contactusername();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr contactusername_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteCardImgResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.DeleteCardImgResponse) */ {
 public:
  DeleteCardImgResponse();
  virtual ~DeleteCardImgResponse();

  DeleteCardImgResponse(const DeleteCardImgResponse& from);

  inline DeleteCardImgResponse& operator=(const DeleteCardImgResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteCardImgResponse& default_instance();

  static inline const DeleteCardImgResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteCardImgResponse*>(
               &_DeleteCardImgResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    81;

  void Swap(DeleteCardImgResponse* other);

  // implements Message ----------------------------------------------

  inline DeleteCardImgResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteCardImgResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteCardImgResponse& from);
  void MergeFrom(const DeleteCardImgResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteCardImgResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.DeleteCardImgResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InviteChatRoomMemberRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.InviteChatRoomMemberRequest) */ {
 public:
  InviteChatRoomMemberRequest();
  virtual ~InviteChatRoomMemberRequest();

  InviteChatRoomMemberRequest(const InviteChatRoomMemberRequest& from);

  inline InviteChatRoomMemberRequest& operator=(const InviteChatRoomMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteChatRoomMemberRequest& default_instance();

  static inline const InviteChatRoomMemberRequest* internal_default_instance() {
    return reinterpret_cast<const InviteChatRoomMemberRequest*>(
               &_InviteChatRoomMemberRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    82;

  void Swap(InviteChatRoomMemberRequest* other);

  // implements Message ----------------------------------------------

  inline InviteChatRoomMemberRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  InviteChatRoomMemberRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InviteChatRoomMemberRequest& from);
  void MergeFrom(const InviteChatRoomMemberRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InviteChatRoomMemberRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.MemberReq MemberList = 3;
  int memberlist_size() const;
  void clear_memberlist();
  static const int kMemberListFieldNumber = 3;
  const ::micromsg::MemberReq& memberlist(int index) const;
  ::micromsg::MemberReq* mutable_memberlist(int index);
  ::micromsg::MemberReq* add_memberlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >*
      mutable_memberlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >&
      memberlist() const;

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required .micromsg.SKBuiltinString_t ChatRoomName = 4;
  bool has_chatroomname() const;
  void clear_chatroomname();
  static const int kChatRoomNameFieldNumber = 4;
  const ::micromsg::SKBuiltinString_t& chatroomname() const;
  ::micromsg::SKBuiltinString_t* mutable_chatroomname();
  ::micromsg::SKBuiltinString_t* release_chatroomname();
  void set_allocated_chatroomname(::micromsg::SKBuiltinString_t* chatroomname);

  // required uint32 MemberCount = 2;
  bool has_membercount() const;
  void clear_membercount();
  static const int kMemberCountFieldNumber = 2;
  ::google::protobuf::uint32 membercount() const;
  void set_membercount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.InviteChatRoomMemberRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_membercount();
  void clear_has_membercount();
  void set_has_chatroomname();
  void clear_has_chatroomname();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq > memberlist_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::SKBuiltinString_t* chatroomname_;
  ::google::protobuf::uint32 membercount_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InviteChatRoomMemberResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.InviteChatRoomMemberResponse) */ {
 public:
  InviteChatRoomMemberResponse();
  virtual ~InviteChatRoomMemberResponse();

  InviteChatRoomMemberResponse(const InviteChatRoomMemberResponse& from);

  inline InviteChatRoomMemberResponse& operator=(const InviteChatRoomMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteChatRoomMemberResponse& default_instance();

  static inline const InviteChatRoomMemberResponse* internal_default_instance() {
    return reinterpret_cast<const InviteChatRoomMemberResponse*>(
               &_InviteChatRoomMemberResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    83;

  void Swap(InviteChatRoomMemberResponse* other);

  // implements Message ----------------------------------------------

  inline InviteChatRoomMemberResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  InviteChatRoomMemberResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InviteChatRoomMemberResponse& from);
  void MergeFrom(const InviteChatRoomMemberResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InviteChatRoomMemberResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.InviteChatRoomMemberResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LabelPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.LabelPair) */ {
 public:
  LabelPair();
  virtual ~LabelPair();

  LabelPair(const LabelPair& from);

  inline LabelPair& operator=(const LabelPair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelPair& default_instance();

  static inline const LabelPair* internal_default_instance() {
    return reinterpret_cast<const LabelPair*>(
               &_LabelPair_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    84;

  void Swap(LabelPair* other);

  // implements Message ----------------------------------------------

  inline LabelPair* New() const PROTOBUF_FINAL { return New(NULL); }

  LabelPair* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LabelPair& from);
  void MergeFrom(const LabelPair& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LabelPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string LabelName = 1;
  bool has_labelname() const;
  void clear_labelname();
  static const int kLabelNameFieldNumber = 1;
  const ::std::string& labelname() const;
  void set_labelname(const ::std::string& value);
  #if LANG_CXX11
  void set_labelname(::std::string&& value);
  #endif
  void set_labelname(const char* value);
  void set_labelname(const char* value, size_t size);
  ::std::string* mutable_labelname();
  ::std::string* release_labelname();
  void set_allocated_labelname(::std::string* labelname);

  // required uint32 LabelID = 2;
  bool has_labelid() const;
  void clear_labelid();
  static const int kLabelIDFieldNumber = 2;
  ::google::protobuf::uint32 labelid() const;
  void set_labelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.LabelPair)
 private:
  void set_has_labelname();
  void clear_has_labelname();
  void set_has_labelid();
  void clear_has_labelid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr labelname_;
  ::google::protobuf::uint32 labelid_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddContactLabelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.AddContactLabelRequest) */ {
 public:
  AddContactLabelRequest();
  virtual ~AddContactLabelRequest();

  AddContactLabelRequest(const AddContactLabelRequest& from);

  inline AddContactLabelRequest& operator=(const AddContactLabelRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddContactLabelRequest& default_instance();

  static inline const AddContactLabelRequest* internal_default_instance() {
    return reinterpret_cast<const AddContactLabelRequest*>(
               &_AddContactLabelRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    85;

  void Swap(AddContactLabelRequest* other);

  // implements Message ----------------------------------------------

  inline AddContactLabelRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AddContactLabelRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddContactLabelRequest& from);
  void MergeFrom(const AddContactLabelRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddContactLabelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.LabelPair LabelPairList = 3;
  int labelpairlist_size() const;
  void clear_labelpairlist();
  static const int kLabelPairListFieldNumber = 3;
  const ::micromsg::LabelPair& labelpairlist(int index) const;
  ::micromsg::LabelPair* mutable_labelpairlist(int index);
  ::micromsg::LabelPair* add_labelpairlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::LabelPair >*
      mutable_labelpairlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::LabelPair >&
      labelpairlist() const;

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 LabelCount = 2;
  bool has_labelcount() const;
  void clear_labelcount();
  static const int kLabelCountFieldNumber = 2;
  ::google::protobuf::uint32 labelcount() const;
  void set_labelcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.AddContactLabelRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_labelcount();
  void clear_has_labelcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::LabelPair > labelpairlist_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 labelcount_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddContactLabelResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.AddContactLabelResponse) */ {
 public:
  AddContactLabelResponse();
  virtual ~AddContactLabelResponse();

  AddContactLabelResponse(const AddContactLabelResponse& from);

  inline AddContactLabelResponse& operator=(const AddContactLabelResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddContactLabelResponse& default_instance();

  static inline const AddContactLabelResponse* internal_default_instance() {
    return reinterpret_cast<const AddContactLabelResponse*>(
               &_AddContactLabelResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    86;

  void Swap(AddContactLabelResponse* other);

  // implements Message ----------------------------------------------

  inline AddContactLabelResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AddContactLabelResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddContactLabelResponse& from);
  void MergeFrom(const AddContactLabelResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddContactLabelResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.LabelPair LabelPairList = 3;
  int labelpairlist_size() const;
  void clear_labelpairlist();
  static const int kLabelPairListFieldNumber = 3;
  const ::micromsg::LabelPair& labelpairlist(int index) const;
  ::micromsg::LabelPair* mutable_labelpairlist(int index);
  ::micromsg::LabelPair* add_labelpairlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::LabelPair >*
      mutable_labelpairlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::LabelPair >&
      labelpairlist() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 LabelCount = 2;
  bool has_labelcount() const;
  void clear_labelcount();
  static const int kLabelCountFieldNumber = 2;
  ::google::protobuf::uint32 labelcount() const;
  void set_labelcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.AddContactLabelResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_labelcount();
  void clear_has_labelcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::LabelPair > labelpairlist_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 labelcount_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DelContactLabelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.DelContactLabelRequest) */ {
 public:
  DelContactLabelRequest();
  virtual ~DelContactLabelRequest();

  DelContactLabelRequest(const DelContactLabelRequest& from);

  inline DelContactLabelRequest& operator=(const DelContactLabelRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelContactLabelRequest& default_instance();

  static inline const DelContactLabelRequest* internal_default_instance() {
    return reinterpret_cast<const DelContactLabelRequest*>(
               &_DelContactLabelRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    87;

  void Swap(DelContactLabelRequest* other);

  // implements Message ----------------------------------------------

  inline DelContactLabelRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DelContactLabelRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DelContactLabelRequest& from);
  void MergeFrom(const DelContactLabelRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DelContactLabelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string LabelIDList = 2;
  bool has_labelidlist() const;
  void clear_labelidlist();
  static const int kLabelIDListFieldNumber = 2;
  const ::std::string& labelidlist() const;
  void set_labelidlist(const ::std::string& value);
  #if LANG_CXX11
  void set_labelidlist(::std::string&& value);
  #endif
  void set_labelidlist(const char* value);
  void set_labelidlist(const char* value, size_t size);
  ::std::string* mutable_labelidlist();
  ::std::string* release_labelidlist();
  void set_allocated_labelidlist(::std::string* labelidlist);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.DelContactLabelRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_labelidlist();
  void clear_has_labelidlist();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr labelidlist_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DelContactLabelResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.DelContactLabelResponse) */ {
 public:
  DelContactLabelResponse();
  virtual ~DelContactLabelResponse();

  DelContactLabelResponse(const DelContactLabelResponse& from);

  inline DelContactLabelResponse& operator=(const DelContactLabelResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelContactLabelResponse& default_instance();

  static inline const DelContactLabelResponse* internal_default_instance() {
    return reinterpret_cast<const DelContactLabelResponse*>(
               &_DelContactLabelResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    88;

  void Swap(DelContactLabelResponse* other);

  // implements Message ----------------------------------------------

  inline DelContactLabelResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DelContactLabelResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DelContactLabelResponse& from);
  void MergeFrom(const DelContactLabelResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DelContactLabelResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.DelContactLabelResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateContactLabelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UpdateContactLabelRequest) */ {
 public:
  UpdateContactLabelRequest();
  virtual ~UpdateContactLabelRequest();

  UpdateContactLabelRequest(const UpdateContactLabelRequest& from);

  inline UpdateContactLabelRequest& operator=(const UpdateContactLabelRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateContactLabelRequest& default_instance();

  static inline const UpdateContactLabelRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateContactLabelRequest*>(
               &_UpdateContactLabelRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    89;

  void Swap(UpdateContactLabelRequest* other);

  // implements Message ----------------------------------------------

  inline UpdateContactLabelRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateContactLabelRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateContactLabelRequest& from);
  void MergeFrom(const UpdateContactLabelRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateContactLabelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required .micromsg.LabelPair LabelPair = 2;
  bool has_labelpair() const;
  void clear_labelpair();
  static const int kLabelPairFieldNumber = 2;
  const ::micromsg::LabelPair& labelpair() const;
  ::micromsg::LabelPair* mutable_labelpair();
  ::micromsg::LabelPair* release_labelpair();
  void set_allocated_labelpair(::micromsg::LabelPair* labelpair);

  // @@protoc_insertion_point(class_scope:micromsg.UpdateContactLabelRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_labelpair();
  void clear_has_labelpair();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::LabelPair* labelpair_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateContactLabelResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UpdateContactLabelResponse) */ {
 public:
  UpdateContactLabelResponse();
  virtual ~UpdateContactLabelResponse();

  UpdateContactLabelResponse(const UpdateContactLabelResponse& from);

  inline UpdateContactLabelResponse& operator=(const UpdateContactLabelResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateContactLabelResponse& default_instance();

  static inline const UpdateContactLabelResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateContactLabelResponse*>(
               &_UpdateContactLabelResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    90;

  void Swap(UpdateContactLabelResponse* other);

  // implements Message ----------------------------------------------

  inline UpdateContactLabelResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateContactLabelResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateContactLabelResponse& from);
  void MergeFrom(const UpdateContactLabelResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateContactLabelResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.UpdateContactLabelResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetContactLabelListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetContactLabelListRequest) */ {
 public:
  GetContactLabelListRequest();
  virtual ~GetContactLabelListRequest();

  GetContactLabelListRequest(const GetContactLabelListRequest& from);

  inline GetContactLabelListRequest& operator=(const GetContactLabelListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetContactLabelListRequest& default_instance();

  static inline const GetContactLabelListRequest* internal_default_instance() {
    return reinterpret_cast<const GetContactLabelListRequest*>(
               &_GetContactLabelListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    91;

  void Swap(GetContactLabelListRequest* other);

  // implements Message ----------------------------------------------

  inline GetContactLabelListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetContactLabelListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetContactLabelListRequest& from);
  void MergeFrom(const GetContactLabelListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetContactLabelListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.GetContactLabelListRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetContactLabelListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetContactLabelListResponse) */ {
 public:
  GetContactLabelListResponse();
  virtual ~GetContactLabelListResponse();

  GetContactLabelListResponse(const GetContactLabelListResponse& from);

  inline GetContactLabelListResponse& operator=(const GetContactLabelListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetContactLabelListResponse& default_instance();

  static inline const GetContactLabelListResponse* internal_default_instance() {
    return reinterpret_cast<const GetContactLabelListResponse*>(
               &_GetContactLabelListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    92;

  void Swap(GetContactLabelListResponse* other);

  // implements Message ----------------------------------------------

  inline GetContactLabelListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetContactLabelListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetContactLabelListResponse& from);
  void MergeFrom(const GetContactLabelListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetContactLabelListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.LabelPair LabelPairList = 3;
  int labelpairlist_size() const;
  void clear_labelpairlist();
  static const int kLabelPairListFieldNumber = 3;
  const ::micromsg::LabelPair& labelpairlist(int index) const;
  ::micromsg::LabelPair* mutable_labelpairlist(int index);
  ::micromsg::LabelPair* add_labelpairlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::LabelPair >*
      mutable_labelpairlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::LabelPair >&
      labelpairlist() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 LabelCount = 2;
  bool has_labelcount() const;
  void clear_labelcount();
  static const int kLabelCountFieldNumber = 2;
  ::google::protobuf::uint32 labelcount() const;
  void set_labelcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetContactLabelListResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_labelcount();
  void clear_has_labelcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::LabelPair > labelpairlist_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 labelcount_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserLabelInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UserLabelInfo) */ {
 public:
  UserLabelInfo();
  virtual ~UserLabelInfo();

  UserLabelInfo(const UserLabelInfo& from);

  inline UserLabelInfo& operator=(const UserLabelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLabelInfo& default_instance();

  static inline const UserLabelInfo* internal_default_instance() {
    return reinterpret_cast<const UserLabelInfo*>(
               &_UserLabelInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    93;

  void Swap(UserLabelInfo* other);

  // implements Message ----------------------------------------------

  inline UserLabelInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserLabelInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserLabelInfo& from);
  void MergeFrom(const UserLabelInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserLabelInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string LabelIDList = 2;
  bool has_labelidlist() const;
  void clear_labelidlist();
  static const int kLabelIDListFieldNumber = 2;
  const ::std::string& labelidlist() const;
  void set_labelidlist(const ::std::string& value);
  #if LANG_CXX11
  void set_labelidlist(::std::string&& value);
  #endif
  void set_labelidlist(const char* value);
  void set_labelidlist(const char* value, size_t size);
  ::std::string* mutable_labelidlist();
  ::std::string* release_labelidlist();
  void set_allocated_labelidlist(::std::string* labelidlist);

  // @@protoc_insertion_point(class_scope:micromsg.UserLabelInfo)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_labelidlist();
  void clear_has_labelidlist();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr labelidlist_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModifyContactLabelListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.ModifyContactLabelListRequest) */ {
 public:
  ModifyContactLabelListRequest();
  virtual ~ModifyContactLabelListRequest();

  ModifyContactLabelListRequest(const ModifyContactLabelListRequest& from);

  inline ModifyContactLabelListRequest& operator=(const ModifyContactLabelListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyContactLabelListRequest& default_instance();

  static inline const ModifyContactLabelListRequest* internal_default_instance() {
    return reinterpret_cast<const ModifyContactLabelListRequest*>(
               &_ModifyContactLabelListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    94;

  void Swap(ModifyContactLabelListRequest* other);

  // implements Message ----------------------------------------------

  inline ModifyContactLabelListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ModifyContactLabelListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModifyContactLabelListRequest& from);
  void MergeFrom(const ModifyContactLabelListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModifyContactLabelListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.UserLabelInfo UserLabelInfoList = 3;
  int userlabelinfolist_size() const;
  void clear_userlabelinfolist();
  static const int kUserLabelInfoListFieldNumber = 3;
  const ::micromsg::UserLabelInfo& userlabelinfolist(int index) const;
  ::micromsg::UserLabelInfo* mutable_userlabelinfolist(int index);
  ::micromsg::UserLabelInfo* add_userlabelinfolist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::UserLabelInfo >*
      mutable_userlabelinfolist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::UserLabelInfo >&
      userlabelinfolist() const;

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 UserCount = 2;
  bool has_usercount() const;
  void clear_usercount();
  static const int kUserCountFieldNumber = 2;
  ::google::protobuf::uint32 usercount() const;
  void set_usercount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.ModifyContactLabelListRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_usercount();
  void clear_has_usercount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::UserLabelInfo > userlabelinfolist_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 usercount_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModifyContactLabelListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.ModifyContactLabelListResponse) */ {
 public:
  ModifyContactLabelListResponse();
  virtual ~ModifyContactLabelListResponse();

  ModifyContactLabelListResponse(const ModifyContactLabelListResponse& from);

  inline ModifyContactLabelListResponse& operator=(const ModifyContactLabelListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyContactLabelListResponse& default_instance();

  static inline const ModifyContactLabelListResponse* internal_default_instance() {
    return reinterpret_cast<const ModifyContactLabelListResponse*>(
               &_ModifyContactLabelListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    95;

  void Swap(ModifyContactLabelListResponse* other);

  // implements Message ----------------------------------------------

  inline ModifyContactLabelListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ModifyContactLabelListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModifyContactLabelListResponse& from);
  void MergeFrom(const ModifyContactLabelListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModifyContactLabelListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.ModifyContactLabelListResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransferChatRoomOwnerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.TransferChatRoomOwnerRequest) */ {
 public:
  TransferChatRoomOwnerRequest();
  virtual ~TransferChatRoomOwnerRequest();

  TransferChatRoomOwnerRequest(const TransferChatRoomOwnerRequest& from);

  inline TransferChatRoomOwnerRequest& operator=(const TransferChatRoomOwnerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferChatRoomOwnerRequest& default_instance();

  static inline const TransferChatRoomOwnerRequest* internal_default_instance() {
    return reinterpret_cast<const TransferChatRoomOwnerRequest*>(
               &_TransferChatRoomOwnerRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    96;

  void Swap(TransferChatRoomOwnerRequest* other);

  // implements Message ----------------------------------------------

  inline TransferChatRoomOwnerRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TransferChatRoomOwnerRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransferChatRoomOwnerRequest& from);
  void MergeFrom(const TransferChatRoomOwnerRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransferChatRoomOwnerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ChatRoomName = 2;
  bool has_chatroomname() const;
  void clear_chatroomname();
  static const int kChatRoomNameFieldNumber = 2;
  const ::std::string& chatroomname() const;
  void set_chatroomname(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomname(::std::string&& value);
  #endif
  void set_chatroomname(const char* value);
  void set_chatroomname(const char* value, size_t size);
  ::std::string* mutable_chatroomname();
  ::std::string* release_chatroomname();
  void set_allocated_chatroomname(::std::string* chatroomname);

  // optional string NewOwnerUserName = 3;
  bool has_newownerusername() const;
  void clear_newownerusername();
  static const int kNewOwnerUserNameFieldNumber = 3;
  const ::std::string& newownerusername() const;
  void set_newownerusername(const ::std::string& value);
  #if LANG_CXX11
  void set_newownerusername(::std::string&& value);
  #endif
  void set_newownerusername(const char* value);
  void set_newownerusername(const char* value, size_t size);
  ::std::string* mutable_newownerusername();
  ::std::string* release_newownerusername();
  void set_allocated_newownerusername(::std::string* newownerusername);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.TransferChatRoomOwnerRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_chatroomname();
  void clear_has_chatroomname();
  void set_has_newownerusername();
  void clear_has_newownerusername();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr chatroomname_;
  ::google::protobuf::internal::ArenaStringPtr newownerusername_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransferChatRoomOwnerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.TransferChatRoomOwnerResponse) */ {
 public:
  TransferChatRoomOwnerResponse();
  virtual ~TransferChatRoomOwnerResponse();

  TransferChatRoomOwnerResponse(const TransferChatRoomOwnerResponse& from);

  inline TransferChatRoomOwnerResponse& operator=(const TransferChatRoomOwnerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferChatRoomOwnerResponse& default_instance();

  static inline const TransferChatRoomOwnerResponse* internal_default_instance() {
    return reinterpret_cast<const TransferChatRoomOwnerResponse*>(
               &_TransferChatRoomOwnerResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    97;

  void Swap(TransferChatRoomOwnerResponse* other);

  // implements Message ----------------------------------------------

  inline TransferChatRoomOwnerResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  TransferChatRoomOwnerResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransferChatRoomOwnerResponse& from);
  void MergeFrom(const TransferChatRoomOwnerResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransferChatRoomOwnerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.TransferChatRoomOwnerResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetChatRoomAnnouncementRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetChatRoomAnnouncementRequest) */ {
 public:
  GetChatRoomAnnouncementRequest();
  virtual ~GetChatRoomAnnouncementRequest();

  GetChatRoomAnnouncementRequest(const GetChatRoomAnnouncementRequest& from);

  inline GetChatRoomAnnouncementRequest& operator=(const GetChatRoomAnnouncementRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatRoomAnnouncementRequest& default_instance();

  static inline const GetChatRoomAnnouncementRequest* internal_default_instance() {
    return reinterpret_cast<const GetChatRoomAnnouncementRequest*>(
               &_GetChatRoomAnnouncementRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    98;

  void Swap(GetChatRoomAnnouncementRequest* other);

  // implements Message ----------------------------------------------

  inline GetChatRoomAnnouncementRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetChatRoomAnnouncementRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetChatRoomAnnouncementRequest& from);
  void MergeFrom(const GetChatRoomAnnouncementRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetChatRoomAnnouncementRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ChatRoomName = 2;
  bool has_chatroomname() const;
  void clear_chatroomname();
  static const int kChatRoomNameFieldNumber = 2;
  const ::std::string& chatroomname() const;
  void set_chatroomname(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomname(::std::string&& value);
  #endif
  void set_chatroomname(const char* value);
  void set_chatroomname(const char* value, size_t size);
  ::std::string* mutable_chatroomname();
  ::std::string* release_chatroomname();
  void set_allocated_chatroomname(::std::string* chatroomname);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.GetChatRoomAnnouncementRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_chatroomname();
  void clear_has_chatroomname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr chatroomname_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetChatRoomAnnouncementResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetChatRoomAnnouncementResponse) */ {
 public:
  GetChatRoomAnnouncementResponse();
  virtual ~GetChatRoomAnnouncementResponse();

  GetChatRoomAnnouncementResponse(const GetChatRoomAnnouncementResponse& from);

  inline GetChatRoomAnnouncementResponse& operator=(const GetChatRoomAnnouncementResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatRoomAnnouncementResponse& default_instance();

  static inline const GetChatRoomAnnouncementResponse* internal_default_instance() {
    return reinterpret_cast<const GetChatRoomAnnouncementResponse*>(
               &_GetChatRoomAnnouncementResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    99;

  void Swap(GetChatRoomAnnouncementResponse* other);

  // implements Message ----------------------------------------------

  inline GetChatRoomAnnouncementResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetChatRoomAnnouncementResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetChatRoomAnnouncementResponse& from);
  void MergeFrom(const GetChatRoomAnnouncementResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetChatRoomAnnouncementResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Announcement = 2;
  bool has_announcement() const;
  void clear_announcement();
  static const int kAnnouncementFieldNumber = 2;
  const ::std::string& announcement() const;
  void set_announcement(const ::std::string& value);
  #if LANG_CXX11
  void set_announcement(::std::string&& value);
  #endif
  void set_announcement(const char* value);
  void set_announcement(const char* value, size_t size);
  ::std::string* mutable_announcement();
  ::std::string* release_announcement();
  void set_allocated_announcement(::std::string* announcement);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.GetChatRoomAnnouncementResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_announcement();
  void clear_has_announcement();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr announcement_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetChatRoomAnnouncementRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.SetChatRoomAnnouncementRequest) */ {
 public:
  SetChatRoomAnnouncementRequest();
  virtual ~SetChatRoomAnnouncementRequest();

  SetChatRoomAnnouncementRequest(const SetChatRoomAnnouncementRequest& from);

  inline SetChatRoomAnnouncementRequest& operator=(const SetChatRoomAnnouncementRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetChatRoomAnnouncementRequest& default_instance();

  static inline const SetChatRoomAnnouncementRequest* internal_default_instance() {
    return reinterpret_cast<const SetChatRoomAnnouncementRequest*>(
               &_SetChatRoomAnnouncementRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    100;

  void Swap(SetChatRoomAnnouncementRequest* other);

  // implements Message ----------------------------------------------

  inline SetChatRoomAnnouncementRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetChatRoomAnnouncementRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetChatRoomAnnouncementRequest& from);
  void MergeFrom(const SetChatRoomAnnouncementRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetChatRoomAnnouncementRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ChatRoomName = 2;
  bool has_chatroomname() const;
  void clear_chatroomname();
  static const int kChatRoomNameFieldNumber = 2;
  const ::std::string& chatroomname() const;
  void set_chatroomname(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomname(::std::string&& value);
  #endif
  void set_chatroomname(const char* value);
  void set_chatroomname(const char* value, size_t size);
  ::std::string* mutable_chatroomname();
  ::std::string* release_chatroomname();
  void set_allocated_chatroomname(::std::string* chatroomname);

  // optional string Announcement = 3;
  bool has_announcement() const;
  void clear_announcement();
  static const int kAnnouncementFieldNumber = 3;
  const ::std::string& announcement() const;
  void set_announcement(const ::std::string& value);
  #if LANG_CXX11
  void set_announcement(::std::string&& value);
  #endif
  void set_announcement(const char* value);
  void set_announcement(const char* value, size_t size);
  ::std::string* mutable_announcement();
  ::std::string* release_announcement();
  void set_allocated_announcement(::std::string* announcement);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // optional uint32 SetAnnouncementFlag = 4;
  bool has_setannouncementflag() const;
  void clear_setannouncementflag();
  static const int kSetAnnouncementFlagFieldNumber = 4;
  ::google::protobuf::uint32 setannouncementflag() const;
  void set_setannouncementflag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.SetChatRoomAnnouncementRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_chatroomname();
  void clear_has_chatroomname();
  void set_has_announcement();
  void clear_has_announcement();
  void set_has_setannouncementflag();
  void clear_has_setannouncementflag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr chatroomname_;
  ::google::protobuf::internal::ArenaStringPtr announcement_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 setannouncementflag_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetChatRoomAnnouncementResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.SetChatRoomAnnouncementResponse) */ {
 public:
  SetChatRoomAnnouncementResponse();
  virtual ~SetChatRoomAnnouncementResponse();

  SetChatRoomAnnouncementResponse(const SetChatRoomAnnouncementResponse& from);

  inline SetChatRoomAnnouncementResponse& operator=(const SetChatRoomAnnouncementResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetChatRoomAnnouncementResponse& default_instance();

  static inline const SetChatRoomAnnouncementResponse* internal_default_instance() {
    return reinterpret_cast<const SetChatRoomAnnouncementResponse*>(
               &_SetChatRoomAnnouncementResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    101;

  void Swap(SetChatRoomAnnouncementResponse* other);

  // implements Message ----------------------------------------------

  inline SetChatRoomAnnouncementResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SetChatRoomAnnouncementResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetChatRoomAnnouncementResponse& from);
  void MergeFrom(const SetChatRoomAnnouncementResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetChatRoomAnnouncementResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.SetChatRoomAnnouncementResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetChatRoomInfoDetailRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetChatRoomInfoDetailRequest) */ {
 public:
  GetChatRoomInfoDetailRequest();
  virtual ~GetChatRoomInfoDetailRequest();

  GetChatRoomInfoDetailRequest(const GetChatRoomInfoDetailRequest& from);

  inline GetChatRoomInfoDetailRequest& operator=(const GetChatRoomInfoDetailRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatRoomInfoDetailRequest& default_instance();

  static inline const GetChatRoomInfoDetailRequest* internal_default_instance() {
    return reinterpret_cast<const GetChatRoomInfoDetailRequest*>(
               &_GetChatRoomInfoDetailRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    102;

  void Swap(GetChatRoomInfoDetailRequest* other);

  // implements Message ----------------------------------------------

  inline GetChatRoomInfoDetailRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetChatRoomInfoDetailRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetChatRoomInfoDetailRequest& from);
  void MergeFrom(const GetChatRoomInfoDetailRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetChatRoomInfoDetailRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ChatRoomName = 2;
  bool has_chatroomname() const;
  void clear_chatroomname();
  static const int kChatRoomNameFieldNumber = 2;
  const ::std::string& chatroomname() const;
  void set_chatroomname(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomname(::std::string&& value);
  #endif
  void set_chatroomname(const char* value);
  void set_chatroomname(const char* value, size_t size);
  ::std::string* mutable_chatroomname();
  ::std::string* release_chatroomname();
  void set_allocated_chatroomname(::std::string* chatroomname);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.GetChatRoomInfoDetailRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_chatroomname();
  void clear_has_chatroomname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr chatroomname_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetChatRoomInfoDetailResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetChatRoomInfoDetailResponse) */ {
 public:
  GetChatRoomInfoDetailResponse();
  virtual ~GetChatRoomInfoDetailResponse();

  GetChatRoomInfoDetailResponse(const GetChatRoomInfoDetailResponse& from);

  inline GetChatRoomInfoDetailResponse& operator=(const GetChatRoomInfoDetailResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatRoomInfoDetailResponse& default_instance();

  static inline const GetChatRoomInfoDetailResponse* internal_default_instance() {
    return reinterpret_cast<const GetChatRoomInfoDetailResponse*>(
               &_GetChatRoomInfoDetailResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    103;

  void Swap(GetChatRoomInfoDetailResponse* other);

  // implements Message ----------------------------------------------

  inline GetChatRoomInfoDetailResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetChatRoomInfoDetailResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetChatRoomInfoDetailResponse& from);
  void MergeFrom(const GetChatRoomInfoDetailResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetChatRoomInfoDetailResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Announcement = 2;
  bool has_announcement() const;
  void clear_announcement();
  static const int kAnnouncementFieldNumber = 2;
  const ::std::string& announcement() const;
  void set_announcement(const ::std::string& value);
  #if LANG_CXX11
  void set_announcement(::std::string&& value);
  #endif
  void set_announcement(const char* value);
  void set_announcement(const char* value, size_t size);
  ::std::string* mutable_announcement();
  ::std::string* release_announcement();
  void set_allocated_announcement(::std::string* announcement);

  // optional string AnnouncementEditor = 4;
  bool has_announcementeditor() const;
  void clear_announcementeditor();
  static const int kAnnouncementEditorFieldNumber = 4;
  const ::std::string& announcementeditor() const;
  void set_announcementeditor(const ::std::string& value);
  #if LANG_CXX11
  void set_announcementeditor(::std::string&& value);
  #endif
  void set_announcementeditor(const char* value);
  void set_announcementeditor(const char* value, size_t size);
  ::std::string* mutable_announcementeditor();
  ::std::string* release_announcementeditor();
  void set_allocated_announcementeditor(::std::string* announcementeditor);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // optional uint32 ChatRoomInfoVersion = 3;
  bool has_chatroominfoversion() const;
  void clear_chatroominfoversion();
  static const int kChatRoomInfoVersionFieldNumber = 3;
  ::google::protobuf::uint32 chatroominfoversion() const;
  void set_chatroominfoversion(::google::protobuf::uint32 value);

  // optional uint32 AnnouncementPublishTime = 5;
  bool has_announcementpublishtime() const;
  void clear_announcementpublishtime();
  static const int kAnnouncementPublishTimeFieldNumber = 5;
  ::google::protobuf::uint32 announcementpublishtime() const;
  void set_announcementpublishtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetChatRoomInfoDetailResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_announcement();
  void clear_has_announcement();
  void set_has_chatroominfoversion();
  void clear_has_chatroominfoversion();
  void set_has_announcementeditor();
  void clear_has_announcementeditor();
  void set_has_announcementpublishtime();
  void clear_has_announcementpublishtime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr announcement_;
  ::google::protobuf::internal::ArenaStringPtr announcementeditor_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 chatroominfoversion_;
  ::google::protobuf::uint32 announcementpublishtime_;
  friend struct protobuf_mmcontact_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GetBrandListRequestBuffer

// required uint32 Count = 1;
inline bool GetBrandListRequestBuffer::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetBrandListRequestBuffer::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetBrandListRequestBuffer::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetBrandListRequestBuffer::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 GetBrandListRequestBuffer::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GetBrandListRequestBuffer.Count)
  return count_;
}
inline void GetBrandListRequestBuffer::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetBrandListRequestBuffer.Count)
}

// required uint32 HiddenCount = 2;
inline bool GetBrandListRequestBuffer::has_hiddencount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetBrandListRequestBuffer::set_has_hiddencount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetBrandListRequestBuffer::clear_has_hiddencount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetBrandListRequestBuffer::clear_hiddencount() {
  hiddencount_ = 0u;
  clear_has_hiddencount();
}
inline ::google::protobuf::uint32 GetBrandListRequestBuffer::hiddencount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetBrandListRequestBuffer.HiddenCount)
  return hiddencount_;
}
inline void GetBrandListRequestBuffer::set_hiddencount(::google::protobuf::uint32 value) {
  set_has_hiddencount();
  hiddencount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetBrandListRequestBuffer.HiddenCount)
}

// -------------------------------------------------------------------

// GetBrandListRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GetBrandListRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetBrandListRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetBrandListRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetBrandListRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GetBrandListRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetBrandListRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GetBrandListRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetBrandListRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GetBrandListRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetBrandListRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GetBrandListRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetBrandListRequest.BaseRequest)
}

// optional string UserName = 2;
inline bool GetBrandListRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetBrandListRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetBrandListRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetBrandListRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& GetBrandListRequest::username() const {
  // @@protoc_insertion_point(field_get:micromsg.GetBrandListRequest.UserName)
  return username_.GetNoArena();
}
inline void GetBrandListRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetBrandListRequest.UserName)
}
#if LANG_CXX11
inline void GetBrandListRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetBrandListRequest.UserName)
}
#endif
inline void GetBrandListRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetBrandListRequest.UserName)
}
inline void GetBrandListRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetBrandListRequest.UserName)
}
inline ::std::string* GetBrandListRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.GetBrandListRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetBrandListRequest::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.GetBrandListRequest.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBrandListRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetBrandListRequest.UserName)
}

// optional .micromsg.SKBuiltinBuffer_t RequestBuffer = 3;
inline bool GetBrandListRequest::has_requestbuffer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetBrandListRequest::set_has_requestbuffer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetBrandListRequest::clear_has_requestbuffer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetBrandListRequest::clear_requestbuffer() {
  if (requestbuffer_ != NULL) requestbuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_requestbuffer();
}
inline const ::micromsg::SKBuiltinBuffer_t& GetBrandListRequest::requestbuffer() const {
  // @@protoc_insertion_point(field_get:micromsg.GetBrandListRequest.RequestBuffer)
  return requestbuffer_ != NULL ? *requestbuffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* GetBrandListRequest::mutable_requestbuffer() {
  set_has_requestbuffer();
  if (requestbuffer_ == NULL) {
    requestbuffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetBrandListRequest.RequestBuffer)
  return requestbuffer_;
}
inline ::micromsg::SKBuiltinBuffer_t* GetBrandListRequest::release_requestbuffer() {
  // @@protoc_insertion_point(field_release:micromsg.GetBrandListRequest.RequestBuffer)
  clear_has_requestbuffer();
  ::micromsg::SKBuiltinBuffer_t* temp = requestbuffer_;
  requestbuffer_ = NULL;
  return temp;
}
inline void GetBrandListRequest::set_allocated_requestbuffer(::micromsg::SKBuiltinBuffer_t* requestbuffer) {
  delete requestbuffer_;
  requestbuffer_ = requestbuffer;
  if (requestbuffer) {
    set_has_requestbuffer();
  } else {
    clear_has_requestbuffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetBrandListRequest.RequestBuffer)
}

// -------------------------------------------------------------------

// GetBrandListResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GetBrandListResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetBrandListResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetBrandListResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetBrandListResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GetBrandListResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetBrandListResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GetBrandListResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetBrandListResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GetBrandListResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetBrandListResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GetBrandListResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetBrandListResponse.BaseResponse)
}

// optional string BrandList = 2;
inline bool GetBrandListResponse::has_brandlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetBrandListResponse::set_has_brandlist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetBrandListResponse::clear_has_brandlist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetBrandListResponse::clear_brandlist() {
  brandlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brandlist();
}
inline const ::std::string& GetBrandListResponse::brandlist() const {
  // @@protoc_insertion_point(field_get:micromsg.GetBrandListResponse.BrandList)
  return brandlist_.GetNoArena();
}
inline void GetBrandListResponse::set_brandlist(const ::std::string& value) {
  set_has_brandlist();
  brandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetBrandListResponse.BrandList)
}
#if LANG_CXX11
inline void GetBrandListResponse::set_brandlist(::std::string&& value) {
  set_has_brandlist();
  brandlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetBrandListResponse.BrandList)
}
#endif
inline void GetBrandListResponse::set_brandlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_brandlist();
  brandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetBrandListResponse.BrandList)
}
inline void GetBrandListResponse::set_brandlist(const char* value, size_t size) {
  set_has_brandlist();
  brandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetBrandListResponse.BrandList)
}
inline ::std::string* GetBrandListResponse::mutable_brandlist() {
  set_has_brandlist();
  // @@protoc_insertion_point(field_mutable:micromsg.GetBrandListResponse.BrandList)
  return brandlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetBrandListResponse::release_brandlist() {
  // @@protoc_insertion_point(field_release:micromsg.GetBrandListResponse.BrandList)
  clear_has_brandlist();
  return brandlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBrandListResponse::set_allocated_brandlist(::std::string* brandlist) {
  if (brandlist != NULL) {
    set_has_brandlist();
  } else {
    clear_has_brandlist();
  }
  brandlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brandlist);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetBrandListResponse.BrandList)
}

// required .micromsg.SKBuiltinBuffer_t RequestBuffer = 3;
inline bool GetBrandListResponse::has_requestbuffer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetBrandListResponse::set_has_requestbuffer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetBrandListResponse::clear_has_requestbuffer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetBrandListResponse::clear_requestbuffer() {
  if (requestbuffer_ != NULL) requestbuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_requestbuffer();
}
inline const ::micromsg::SKBuiltinBuffer_t& GetBrandListResponse::requestbuffer() const {
  // @@protoc_insertion_point(field_get:micromsg.GetBrandListResponse.RequestBuffer)
  return requestbuffer_ != NULL ? *requestbuffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* GetBrandListResponse::mutable_requestbuffer() {
  set_has_requestbuffer();
  if (requestbuffer_ == NULL) {
    requestbuffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetBrandListResponse.RequestBuffer)
  return requestbuffer_;
}
inline ::micromsg::SKBuiltinBuffer_t* GetBrandListResponse::release_requestbuffer() {
  // @@protoc_insertion_point(field_release:micromsg.GetBrandListResponse.RequestBuffer)
  clear_has_requestbuffer();
  ::micromsg::SKBuiltinBuffer_t* temp = requestbuffer_;
  requestbuffer_ = NULL;
  return temp;
}
inline void GetBrandListResponse::set_allocated_requestbuffer(::micromsg::SKBuiltinBuffer_t* requestbuffer) {
  delete requestbuffer_;
  requestbuffer_ = requestbuffer;
  if (requestbuffer) {
    set_has_requestbuffer();
  } else {
    clear_has_requestbuffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetBrandListResponse.RequestBuffer)
}

// -------------------------------------------------------------------

// APPItem

// optional string UserName = 1;
inline bool APPItem::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void APPItem::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void APPItem::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void APPItem::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& APPItem::username() const {
  // @@protoc_insertion_point(field_get:micromsg.APPItem.UserName)
  return username_.GetNoArena();
}
inline void APPItem::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.APPItem.UserName)
}
#if LANG_CXX11
inline void APPItem::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.APPItem.UserName)
}
#endif
inline void APPItem::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.APPItem.UserName)
}
inline void APPItem::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.APPItem.UserName)
}
inline ::std::string* APPItem::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.APPItem.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* APPItem::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.APPItem.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void APPItem::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.APPItem.UserName)
}

// -------------------------------------------------------------------

// SetAPPListRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool SetAPPListRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetAPPListRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetAPPListRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetAPPListRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& SetAPPListRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SetAPPListRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* SetAPPListRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SetAPPListRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* SetAPPListRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SetAPPListRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void SetAPPListRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetAPPListRequest.BaseRequest)
}

// required uint32 Count = 2;
inline bool SetAPPListRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetAPPListRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetAPPListRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetAPPListRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 SetAPPListRequest::count() const {
  // @@protoc_insertion_point(field_get:micromsg.SetAPPListRequest.Count)
  return count_;
}
inline void SetAPPListRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SetAPPListRequest.Count)
}

// repeated .micromsg.APPItem List = 3;
inline int SetAPPListRequest::list_size() const {
  return list_.size();
}
inline void SetAPPListRequest::clear_list() {
  list_.Clear();
}
inline const ::micromsg::APPItem& SetAPPListRequest::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SetAPPListRequest.List)
  return list_.Get(index);
}
inline ::micromsg::APPItem* SetAPPListRequest::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SetAPPListRequest.List)
  return list_.Mutable(index);
}
inline ::micromsg::APPItem* SetAPPListRequest::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.SetAPPListRequest.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::APPItem >*
SetAPPListRequest::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SetAPPListRequest.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::APPItem >&
SetAPPListRequest::list() const {
  // @@protoc_insertion_point(field_list:micromsg.SetAPPListRequest.List)
  return list_;
}

// -------------------------------------------------------------------

// SetAPPListResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool SetAPPListResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetAPPListResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetAPPListResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetAPPListResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& SetAPPListResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SetAPPListResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* SetAPPListResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SetAPPListResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* SetAPPListResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SetAPPListResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void SetAPPListResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetAPPListResponse.BaseResponse)
}

// required uint32 Hash = 2;
inline bool SetAPPListResponse::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetAPPListResponse::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetAPPListResponse::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetAPPListResponse::clear_hash() {
  hash_ = 0u;
  clear_has_hash();
}
inline ::google::protobuf::uint32 SetAPPListResponse::hash() const {
  // @@protoc_insertion_point(field_get:micromsg.SetAPPListResponse.Hash)
  return hash_;
}
inline void SetAPPListResponse::set_hash(::google::protobuf::uint32 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SetAPPListResponse.Hash)
}

// -------------------------------------------------------------------

// GetAPPListRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GetAPPListRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAPPListRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAPPListRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAPPListRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GetAPPListRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetAPPListRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GetAPPListRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetAPPListRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GetAPPListRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetAPPListRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GetAPPListRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetAPPListRequest.BaseRequest)
}

// required uint32 Hash = 2;
inline bool GetAPPListRequest::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAPPListRequest::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAPPListRequest::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAPPListRequest::clear_hash() {
  hash_ = 0u;
  clear_has_hash();
}
inline ::google::protobuf::uint32 GetAPPListRequest::hash() const {
  // @@protoc_insertion_point(field_get:micromsg.GetAPPListRequest.Hash)
  return hash_;
}
inline void GetAPPListRequest::set_hash(::google::protobuf::uint32 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetAPPListRequest.Hash)
}

// -------------------------------------------------------------------

// GetAPPListResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GetAPPListResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAPPListResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAPPListResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAPPListResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GetAPPListResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetAPPListResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GetAPPListResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetAPPListResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GetAPPListResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetAPPListResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GetAPPListResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetAPPListResponse.BaseResponse)
}

// required uint32 Count = 2;
inline bool GetAPPListResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAPPListResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAPPListResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAPPListResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 GetAPPListResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GetAPPListResponse.Count)
  return count_;
}
inline void GetAPPListResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetAPPListResponse.Count)
}

// repeated .micromsg.APPItem List = 3;
inline int GetAPPListResponse::list_size() const {
  return list_.size();
}
inline void GetAPPListResponse::clear_list() {
  list_.Clear();
}
inline const ::micromsg::APPItem& GetAPPListResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetAPPListResponse.List)
  return list_.Get(index);
}
inline ::micromsg::APPItem* GetAPPListResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetAPPListResponse.List)
  return list_.Mutable(index);
}
inline ::micromsg::APPItem* GetAPPListResponse::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.GetAPPListResponse.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::APPItem >*
GetAPPListResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetAPPListResponse.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::APPItem >&
GetAPPListResponse::list() const {
  // @@protoc_insertion_point(field_list:micromsg.GetAPPListResponse.List)
  return list_;
}

// required uint32 Hash = 4;
inline bool GetAPPListResponse::has_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetAPPListResponse::set_has_hash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetAPPListResponse::clear_has_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetAPPListResponse::clear_hash() {
  hash_ = 0u;
  clear_has_hash();
}
inline ::google::protobuf::uint32 GetAPPListResponse::hash() const {
  // @@protoc_insertion_point(field_get:micromsg.GetAPPListResponse.Hash)
  return hash_;
}
inline void GetAPPListResponse::set_hash(::google::protobuf::uint32 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetAPPListResponse.Hash)
}

// -------------------------------------------------------------------

// SearchQRCodeReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool SearchQRCodeReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchQRCodeReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchQRCodeReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchQRCodeReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& SearchQRCodeReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchQRCodeReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* SearchQRCodeReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchQRCodeReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* SearchQRCodeReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SearchQRCodeReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void SearchQRCodeReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchQRCodeReq.BaseRequest)
}

// optional string QRCode = 2;
inline bool SearchQRCodeReq::has_qrcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchQRCodeReq::set_has_qrcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchQRCodeReq::clear_has_qrcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchQRCodeReq::clear_qrcode() {
  qrcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qrcode();
}
inline const ::std::string& SearchQRCodeReq::qrcode() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchQRCodeReq.QRCode)
  return qrcode_.GetNoArena();
}
inline void SearchQRCodeReq::set_qrcode(const ::std::string& value) {
  set_has_qrcode();
  qrcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchQRCodeReq.QRCode)
}
#if LANG_CXX11
inline void SearchQRCodeReq::set_qrcode(::std::string&& value) {
  set_has_qrcode();
  qrcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchQRCodeReq.QRCode)
}
#endif
inline void SearchQRCodeReq::set_qrcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qrcode();
  qrcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchQRCodeReq.QRCode)
}
inline void SearchQRCodeReq::set_qrcode(const char* value, size_t size) {
  set_has_qrcode();
  qrcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchQRCodeReq.QRCode)
}
inline ::std::string* SearchQRCodeReq::mutable_qrcode() {
  set_has_qrcode();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchQRCodeReq.QRCode)
  return qrcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchQRCodeReq::release_qrcode() {
  // @@protoc_insertion_point(field_release:micromsg.SearchQRCodeReq.QRCode)
  clear_has_qrcode();
  return qrcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchQRCodeReq::set_allocated_qrcode(::std::string* qrcode) {
  if (qrcode != NULL) {
    set_has_qrcode();
  } else {
    clear_has_qrcode();
  }
  qrcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qrcode);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchQRCodeReq.QRCode)
}

// -------------------------------------------------------------------

// SearchQRCodeResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool SearchQRCodeResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchQRCodeResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchQRCodeResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchQRCodeResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& SearchQRCodeResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchQRCodeResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* SearchQRCodeResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchQRCodeResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* SearchQRCodeResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SearchQRCodeResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void SearchQRCodeResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchQRCodeResp.BaseResponse)
}

// required uint32 Type = 2;
inline bool SearchQRCodeResp::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SearchQRCodeResp::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SearchQRCodeResp::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SearchQRCodeResp::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 SearchQRCodeResp::type() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchQRCodeResp.Type)
  return type_;
}
inline void SearchQRCodeResp::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchQRCodeResp.Type)
}

// optional string URL = 3;
inline bool SearchQRCodeResp::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchQRCodeResp::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchQRCodeResp::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchQRCodeResp::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& SearchQRCodeResp::url() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchQRCodeResp.URL)
  return url_.GetNoArena();
}
inline void SearchQRCodeResp::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchQRCodeResp.URL)
}
#if LANG_CXX11
inline void SearchQRCodeResp::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchQRCodeResp.URL)
}
#endif
inline void SearchQRCodeResp::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchQRCodeResp.URL)
}
inline void SearchQRCodeResp::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchQRCodeResp.URL)
}
inline ::std::string* SearchQRCodeResp::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchQRCodeResp.URL)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchQRCodeResp::release_url() {
  // @@protoc_insertion_point(field_release:micromsg.SearchQRCodeResp.URL)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchQRCodeResp::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchQRCodeResp.URL)
}

// -------------------------------------------------------------------

// SearchContactRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool SearchContactRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchContactRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchContactRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchContactRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& SearchContactRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* SearchContactRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* SearchContactRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void SearchContactRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactRequest.BaseRequest)
}

// required .micromsg.SKBuiltinString_t UserName = 2;
inline bool SearchContactRequest::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchContactRequest::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchContactRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchContactRequest::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
inline const ::micromsg::SKBuiltinString_t& SearchContactRequest::username() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactRequest.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* SearchContactRequest::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactRequest.UserName)
  return username_;
}
inline ::micromsg::SKBuiltinString_t* SearchContactRequest::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactRequest.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
inline void SearchContactRequest::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactRequest.UserName)
}

// optional uint32 OpCode = 3;
inline bool SearchContactRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SearchContactRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SearchContactRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SearchContactRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
inline ::google::protobuf::uint32 SearchContactRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactRequest.OpCode)
  return opcode_;
}
inline void SearchContactRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactRequest.OpCode)
}

// optional .micromsg.SKBuiltinBuffer_t ReqBuf = 4;
inline bool SearchContactRequest::has_reqbuf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SearchContactRequest::set_has_reqbuf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SearchContactRequest::clear_has_reqbuf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SearchContactRequest::clear_reqbuf() {
  if (reqbuf_ != NULL) reqbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_reqbuf();
}
inline const ::micromsg::SKBuiltinBuffer_t& SearchContactRequest::reqbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactRequest.ReqBuf)
  return reqbuf_ != NULL ? *reqbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* SearchContactRequest::mutable_reqbuf() {
  set_has_reqbuf();
  if (reqbuf_ == NULL) {
    reqbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactRequest.ReqBuf)
  return reqbuf_;
}
inline ::micromsg::SKBuiltinBuffer_t* SearchContactRequest::release_reqbuf() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactRequest.ReqBuf)
  clear_has_reqbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = reqbuf_;
  reqbuf_ = NULL;
  return temp;
}
inline void SearchContactRequest::set_allocated_reqbuf(::micromsg::SKBuiltinBuffer_t* reqbuf) {
  delete reqbuf_;
  reqbuf_ = reqbuf;
  if (reqbuf) {
    set_has_reqbuf();
  } else {
    clear_has_reqbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactRequest.ReqBuf)
}

// optional uint32 FromScene = 5;
inline bool SearchContactRequest::has_fromscene() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SearchContactRequest::set_has_fromscene() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SearchContactRequest::clear_has_fromscene() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SearchContactRequest::clear_fromscene() {
  fromscene_ = 0u;
  clear_has_fromscene();
}
inline ::google::protobuf::uint32 SearchContactRequest::fromscene() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactRequest.FromScene)
  return fromscene_;
}
inline void SearchContactRequest::set_fromscene(::google::protobuf::uint32 value) {
  set_has_fromscene();
  fromscene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactRequest.FromScene)
}

// optional uint32 SearchScene = 6;
inline bool SearchContactRequest::has_searchscene() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SearchContactRequest::set_has_searchscene() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SearchContactRequest::clear_has_searchscene() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SearchContactRequest::clear_searchscene() {
  searchscene_ = 0u;
  clear_has_searchscene();
}
inline ::google::protobuf::uint32 SearchContactRequest::searchscene() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactRequest.SearchScene)
  return searchscene_;
}
inline void SearchContactRequest::set_searchscene(::google::protobuf::uint32 value) {
  set_has_searchscene();
  searchscene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactRequest.SearchScene)
}

// -------------------------------------------------------------------

// SearchContactItem

// required .micromsg.SKBuiltinString_t UserName = 1;
inline bool SearchContactItem::has_username() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SearchContactItem::set_has_username() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SearchContactItem::clear_has_username() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SearchContactItem::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
inline const ::micromsg::SKBuiltinString_t& SearchContactItem::username() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* SearchContactItem::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.UserName)
  return username_;
}
inline ::micromsg::SKBuiltinString_t* SearchContactItem::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
inline void SearchContactItem::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.UserName)
}

// required .micromsg.SKBuiltinString_t NickName = 2;
inline bool SearchContactItem::has_nickname() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SearchContactItem::set_has_nickname() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SearchContactItem::clear_has_nickname() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SearchContactItem::clear_nickname() {
  if (nickname_ != NULL) nickname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_nickname();
}
inline const ::micromsg::SKBuiltinString_t& SearchContactItem::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.NickName)
  return nickname_ != NULL ? *nickname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* SearchContactItem::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == NULL) {
    nickname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.NickName)
  return nickname_;
}
inline ::micromsg::SKBuiltinString_t* SearchContactItem::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.NickName)
  clear_has_nickname();
  ::micromsg::SKBuiltinString_t* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
inline void SearchContactItem::set_allocated_nickname(::micromsg::SKBuiltinString_t* nickname) {
  delete nickname_;
  nickname_ = nickname;
  if (nickname) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.NickName)
}

// required .micromsg.SKBuiltinString_t PYInitial = 3;
inline bool SearchContactItem::has_pyinitial() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SearchContactItem::set_has_pyinitial() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SearchContactItem::clear_has_pyinitial() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SearchContactItem::clear_pyinitial() {
  if (pyinitial_ != NULL) pyinitial_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_pyinitial();
}
inline const ::micromsg::SKBuiltinString_t& SearchContactItem::pyinitial() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.PYInitial)
  return pyinitial_ != NULL ? *pyinitial_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* SearchContactItem::mutable_pyinitial() {
  set_has_pyinitial();
  if (pyinitial_ == NULL) {
    pyinitial_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.PYInitial)
  return pyinitial_;
}
inline ::micromsg::SKBuiltinString_t* SearchContactItem::release_pyinitial() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.PYInitial)
  clear_has_pyinitial();
  ::micromsg::SKBuiltinString_t* temp = pyinitial_;
  pyinitial_ = NULL;
  return temp;
}
inline void SearchContactItem::set_allocated_pyinitial(::micromsg::SKBuiltinString_t* pyinitial) {
  delete pyinitial_;
  pyinitial_ = pyinitial;
  if (pyinitial) {
    set_has_pyinitial();
  } else {
    clear_has_pyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.PYInitial)
}

// required .micromsg.SKBuiltinString_t QuanPin = 4;
inline bool SearchContactItem::has_quanpin() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SearchContactItem::set_has_quanpin() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SearchContactItem::clear_has_quanpin() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SearchContactItem::clear_quanpin() {
  if (quanpin_ != NULL) quanpin_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_quanpin();
}
inline const ::micromsg::SKBuiltinString_t& SearchContactItem::quanpin() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.QuanPin)
  return quanpin_ != NULL ? *quanpin_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* SearchContactItem::mutable_quanpin() {
  set_has_quanpin();
  if (quanpin_ == NULL) {
    quanpin_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.QuanPin)
  return quanpin_;
}
inline ::micromsg::SKBuiltinString_t* SearchContactItem::release_quanpin() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.QuanPin)
  clear_has_quanpin();
  ::micromsg::SKBuiltinString_t* temp = quanpin_;
  quanpin_ = NULL;
  return temp;
}
inline void SearchContactItem::set_allocated_quanpin(::micromsg::SKBuiltinString_t* quanpin) {
  delete quanpin_;
  quanpin_ = quanpin;
  if (quanpin) {
    set_has_quanpin();
  } else {
    clear_has_quanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.QuanPin)
}

// required int32 Sex = 5;
inline bool SearchContactItem::has_sex() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SearchContactItem::set_has_sex() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SearchContactItem::clear_has_sex() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SearchContactItem::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 SearchContactItem::sex() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.Sex)
  return sex_;
}
inline void SearchContactItem::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.Sex)
}

// required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
inline bool SearchContactItem::has_imgbuf() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SearchContactItem::set_has_imgbuf() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SearchContactItem::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SearchContactItem::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_imgbuf();
}
inline const ::micromsg::SKBuiltinBuffer_t& SearchContactItem::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* SearchContactItem::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.ImgBuf)
  return imgbuf_;
}
inline ::micromsg::SKBuiltinBuffer_t* SearchContactItem::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.ImgBuf)
  clear_has_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
inline void SearchContactItem::set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.ImgBuf)
}

// optional string Province = 7;
inline bool SearchContactItem::has_province() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchContactItem::set_has_province() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchContactItem::clear_has_province() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchContactItem::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
inline const ::std::string& SearchContactItem::province() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.Province)
  return province_.GetNoArena();
}
inline void SearchContactItem::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.Province)
}
#if LANG_CXX11
inline void SearchContactItem::set_province(::std::string&& value) {
  set_has_province();
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.Province)
}
#endif
inline void SearchContactItem::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.Province)
}
inline void SearchContactItem::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.Province)
}
inline ::std::string* SearchContactItem::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.Province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactItem::release_province() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.Province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactItem::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.Province)
}

// optional string City = 8;
inline bool SearchContactItem::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchContactItem::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchContactItem::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchContactItem::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
inline const ::std::string& SearchContactItem::city() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.City)
  return city_.GetNoArena();
}
inline void SearchContactItem::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.City)
}
#if LANG_CXX11
inline void SearchContactItem::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.City)
}
#endif
inline void SearchContactItem::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.City)
}
inline void SearchContactItem::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.City)
}
inline ::std::string* SearchContactItem::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.City)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactItem::release_city() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.City)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactItem::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.City)
}

// optional string Signature = 9;
inline bool SearchContactItem::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SearchContactItem::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SearchContactItem::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SearchContactItem::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& SearchContactItem::signature() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.Signature)
  return signature_.GetNoArena();
}
inline void SearchContactItem::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.Signature)
}
#if LANG_CXX11
inline void SearchContactItem::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.Signature)
}
#endif
inline void SearchContactItem::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.Signature)
}
inline void SearchContactItem::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.Signature)
}
inline ::std::string* SearchContactItem::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactItem::release_signature() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactItem::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.Signature)
}

// optional uint32 PersonalCard = 10;
inline bool SearchContactItem::has_personalcard() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SearchContactItem::set_has_personalcard() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SearchContactItem::clear_has_personalcard() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SearchContactItem::clear_personalcard() {
  personalcard_ = 0u;
  clear_has_personalcard();
}
inline ::google::protobuf::uint32 SearchContactItem::personalcard() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.PersonalCard)
  return personalcard_;
}
inline void SearchContactItem::set_personalcard(::google::protobuf::uint32 value) {
  set_has_personalcard();
  personalcard_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.PersonalCard)
}

// optional uint32 VerifyFlag = 11;
inline bool SearchContactItem::has_verifyflag() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SearchContactItem::set_has_verifyflag() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SearchContactItem::clear_has_verifyflag() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SearchContactItem::clear_verifyflag() {
  verifyflag_ = 0u;
  clear_has_verifyflag();
}
inline ::google::protobuf::uint32 SearchContactItem::verifyflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.VerifyFlag)
  return verifyflag_;
}
inline void SearchContactItem::set_verifyflag(::google::protobuf::uint32 value) {
  set_has_verifyflag();
  verifyflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.VerifyFlag)
}

// optional string VerifyInfo = 12;
inline bool SearchContactItem::has_verifyinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SearchContactItem::set_has_verifyinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SearchContactItem::clear_has_verifyinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SearchContactItem::clear_verifyinfo() {
  verifyinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifyinfo();
}
inline const ::std::string& SearchContactItem::verifyinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.VerifyInfo)
  return verifyinfo_.GetNoArena();
}
inline void SearchContactItem::set_verifyinfo(const ::std::string& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.VerifyInfo)
}
#if LANG_CXX11
inline void SearchContactItem::set_verifyinfo(::std::string&& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.VerifyInfo)
}
#endif
inline void SearchContactItem::set_verifyinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.VerifyInfo)
}
inline void SearchContactItem::set_verifyinfo(const char* value, size_t size) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.VerifyInfo)
}
inline ::std::string* SearchContactItem::mutable_verifyinfo() {
  set_has_verifyinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.VerifyInfo)
  return verifyinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactItem::release_verifyinfo() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.VerifyInfo)
  clear_has_verifyinfo();
  return verifyinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactItem::set_allocated_verifyinfo(::std::string* verifyinfo) {
  if (verifyinfo != NULL) {
    set_has_verifyinfo();
  } else {
    clear_has_verifyinfo();
  }
  verifyinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifyinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.VerifyInfo)
}

// optional string Weibo = 13;
inline bool SearchContactItem::has_weibo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SearchContactItem::set_has_weibo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SearchContactItem::clear_has_weibo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SearchContactItem::clear_weibo() {
  weibo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibo();
}
inline const ::std::string& SearchContactItem::weibo() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.Weibo)
  return weibo_.GetNoArena();
}
inline void SearchContactItem::set_weibo(const ::std::string& value) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.Weibo)
}
#if LANG_CXX11
inline void SearchContactItem::set_weibo(::std::string&& value) {
  set_has_weibo();
  weibo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.Weibo)
}
#endif
inline void SearchContactItem::set_weibo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.Weibo)
}
inline void SearchContactItem::set_weibo(const char* value, size_t size) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.Weibo)
}
inline ::std::string* SearchContactItem::mutable_weibo() {
  set_has_weibo();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.Weibo)
  return weibo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactItem::release_weibo() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.Weibo)
  clear_has_weibo();
  return weibo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactItem::set_allocated_weibo(::std::string* weibo) {
  if (weibo != NULL) {
    set_has_weibo();
  } else {
    clear_has_weibo();
  }
  weibo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.Weibo)
}

// optional string Alias = 14;
inline bool SearchContactItem::has_alias() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SearchContactItem::set_has_alias() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SearchContactItem::clear_has_alias() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SearchContactItem::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& SearchContactItem::alias() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.Alias)
  return alias_.GetNoArena();
}
inline void SearchContactItem::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.Alias)
}
#if LANG_CXX11
inline void SearchContactItem::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.Alias)
}
#endif
inline void SearchContactItem::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.Alias)
}
inline void SearchContactItem::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.Alias)
}
inline ::std::string* SearchContactItem::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactItem::release_alias() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.Alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactItem::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.Alias)
}

// optional string WeiboNickname = 15;
inline bool SearchContactItem::has_weibonickname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SearchContactItem::set_has_weibonickname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SearchContactItem::clear_has_weibonickname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SearchContactItem::clear_weibonickname() {
  weibonickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibonickname();
}
inline const ::std::string& SearchContactItem::weibonickname() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.WeiboNickname)
  return weibonickname_.GetNoArena();
}
inline void SearchContactItem::set_weibonickname(const ::std::string& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.WeiboNickname)
}
#if LANG_CXX11
inline void SearchContactItem::set_weibonickname(::std::string&& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.WeiboNickname)
}
#endif
inline void SearchContactItem::set_weibonickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.WeiboNickname)
}
inline void SearchContactItem::set_weibonickname(const char* value, size_t size) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.WeiboNickname)
}
inline ::std::string* SearchContactItem::mutable_weibonickname() {
  set_has_weibonickname();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.WeiboNickname)
  return weibonickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactItem::release_weibonickname() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.WeiboNickname)
  clear_has_weibonickname();
  return weibonickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactItem::set_allocated_weibonickname(::std::string* weibonickname) {
  if (weibonickname != NULL) {
    set_has_weibonickname();
  } else {
    clear_has_weibonickname();
  }
  weibonickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibonickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.WeiboNickname)
}

// optional uint32 WeiboFlag = 16;
inline bool SearchContactItem::has_weiboflag() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SearchContactItem::set_has_weiboflag() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SearchContactItem::clear_has_weiboflag() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SearchContactItem::clear_weiboflag() {
  weiboflag_ = 0u;
  clear_has_weiboflag();
}
inline ::google::protobuf::uint32 SearchContactItem::weiboflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.WeiboFlag)
  return weiboflag_;
}
inline void SearchContactItem::set_weiboflag(::google::protobuf::uint32 value) {
  set_has_weiboflag();
  weiboflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.WeiboFlag)
}

// optional int32 AlbumStyle = 17;
inline bool SearchContactItem::has_albumstyle() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SearchContactItem::set_has_albumstyle() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SearchContactItem::clear_has_albumstyle() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SearchContactItem::clear_albumstyle() {
  albumstyle_ = 0;
  clear_has_albumstyle();
}
inline ::google::protobuf::int32 SearchContactItem::albumstyle() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.AlbumStyle)
  return albumstyle_;
}
inline void SearchContactItem::set_albumstyle(::google::protobuf::int32 value) {
  set_has_albumstyle();
  albumstyle_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.AlbumStyle)
}

// optional int32 AlbumFlag = 18;
inline bool SearchContactItem::has_albumflag() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SearchContactItem::set_has_albumflag() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SearchContactItem::clear_has_albumflag() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SearchContactItem::clear_albumflag() {
  albumflag_ = 0;
  clear_has_albumflag();
}
inline ::google::protobuf::int32 SearchContactItem::albumflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.AlbumFlag)
  return albumflag_;
}
inline void SearchContactItem::set_albumflag(::google::protobuf::int32 value) {
  set_has_albumflag();
  albumflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.AlbumFlag)
}

// optional string AlbumBGImgID = 19;
inline bool SearchContactItem::has_albumbgimgid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SearchContactItem::set_has_albumbgimgid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SearchContactItem::clear_has_albumbgimgid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SearchContactItem::clear_albumbgimgid() {
  albumbgimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_albumbgimgid();
}
inline const ::std::string& SearchContactItem::albumbgimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.AlbumBGImgID)
  return albumbgimgid_.GetNoArena();
}
inline void SearchContactItem::set_albumbgimgid(const ::std::string& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.AlbumBGImgID)
}
#if LANG_CXX11
inline void SearchContactItem::set_albumbgimgid(::std::string&& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.AlbumBGImgID)
}
#endif
inline void SearchContactItem::set_albumbgimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.AlbumBGImgID)
}
inline void SearchContactItem::set_albumbgimgid(const char* value, size_t size) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.AlbumBGImgID)
}
inline ::std::string* SearchContactItem::mutable_albumbgimgid() {
  set_has_albumbgimgid();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.AlbumBGImgID)
  return albumbgimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactItem::release_albumbgimgid() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.AlbumBGImgID)
  clear_has_albumbgimgid();
  return albumbgimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactItem::set_allocated_albumbgimgid(::std::string* albumbgimgid) {
  if (albumbgimgid != NULL) {
    set_has_albumbgimgid();
  } else {
    clear_has_albumbgimgid();
  }
  albumbgimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albumbgimgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.AlbumBGImgID)
}

// optional .micromsg.SnsUserInfo SnsUserInfo = 20;
inline bool SearchContactItem::has_snsuserinfo() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SearchContactItem::set_has_snsuserinfo() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SearchContactItem::clear_has_snsuserinfo() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SearchContactItem::clear_snsuserinfo() {
  if (snsuserinfo_ != NULL) snsuserinfo_->::micromsg::SnsUserInfo::Clear();
  clear_has_snsuserinfo();
}
inline const ::micromsg::SnsUserInfo& SearchContactItem::snsuserinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.SnsUserInfo)
  return snsuserinfo_ != NULL ? *snsuserinfo_
                         : *::micromsg::SnsUserInfo::internal_default_instance();
}
inline ::micromsg::SnsUserInfo* SearchContactItem::mutable_snsuserinfo() {
  set_has_snsuserinfo();
  if (snsuserinfo_ == NULL) {
    snsuserinfo_ = new ::micromsg::SnsUserInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.SnsUserInfo)
  return snsuserinfo_;
}
inline ::micromsg::SnsUserInfo* SearchContactItem::release_snsuserinfo() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.SnsUserInfo)
  clear_has_snsuserinfo();
  ::micromsg::SnsUserInfo* temp = snsuserinfo_;
  snsuserinfo_ = NULL;
  return temp;
}
inline void SearchContactItem::set_allocated_snsuserinfo(::micromsg::SnsUserInfo* snsuserinfo) {
  delete snsuserinfo_;
  snsuserinfo_ = snsuserinfo;
  if (snsuserinfo) {
    set_has_snsuserinfo();
  } else {
    clear_has_snsuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.SnsUserInfo)
}

// optional string Country = 21;
inline bool SearchContactItem::has_country() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SearchContactItem::set_has_country() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SearchContactItem::clear_has_country() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SearchContactItem::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
inline const ::std::string& SearchContactItem::country() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.Country)
  return country_.GetNoArena();
}
inline void SearchContactItem::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.Country)
}
#if LANG_CXX11
inline void SearchContactItem::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.Country)
}
#endif
inline void SearchContactItem::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.Country)
}
inline void SearchContactItem::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.Country)
}
inline ::std::string* SearchContactItem::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.Country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactItem::release_country() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.Country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactItem::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.Country)
}

// optional string MyBrandList = 22;
inline bool SearchContactItem::has_mybrandlist() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SearchContactItem::set_has_mybrandlist() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SearchContactItem::clear_has_mybrandlist() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SearchContactItem::clear_mybrandlist() {
  mybrandlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mybrandlist();
}
inline const ::std::string& SearchContactItem::mybrandlist() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.MyBrandList)
  return mybrandlist_.GetNoArena();
}
inline void SearchContactItem::set_mybrandlist(const ::std::string& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.MyBrandList)
}
#if LANG_CXX11
inline void SearchContactItem::set_mybrandlist(::std::string&& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.MyBrandList)
}
#endif
inline void SearchContactItem::set_mybrandlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.MyBrandList)
}
inline void SearchContactItem::set_mybrandlist(const char* value, size_t size) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.MyBrandList)
}
inline ::std::string* SearchContactItem::mutable_mybrandlist() {
  set_has_mybrandlist();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.MyBrandList)
  return mybrandlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactItem::release_mybrandlist() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.MyBrandList)
  clear_has_mybrandlist();
  return mybrandlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactItem::set_allocated_mybrandlist(::std::string* mybrandlist) {
  if (mybrandlist != NULL) {
    set_has_mybrandlist();
  } else {
    clear_has_mybrandlist();
  }
  mybrandlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mybrandlist);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.MyBrandList)
}

// optional .micromsg.CustomizedInfo CustomizedInfo = 23;
inline bool SearchContactItem::has_customizedinfo() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SearchContactItem::set_has_customizedinfo() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SearchContactItem::clear_has_customizedinfo() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SearchContactItem::clear_customizedinfo() {
  if (customizedinfo_ != NULL) customizedinfo_->::micromsg::CustomizedInfo::Clear();
  clear_has_customizedinfo();
}
inline const ::micromsg::CustomizedInfo& SearchContactItem::customizedinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.CustomizedInfo)
  return customizedinfo_ != NULL ? *customizedinfo_
                         : *::micromsg::CustomizedInfo::internal_default_instance();
}
inline ::micromsg::CustomizedInfo* SearchContactItem::mutable_customizedinfo() {
  set_has_customizedinfo();
  if (customizedinfo_ == NULL) {
    customizedinfo_ = new ::micromsg::CustomizedInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.CustomizedInfo)
  return customizedinfo_;
}
inline ::micromsg::CustomizedInfo* SearchContactItem::release_customizedinfo() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.CustomizedInfo)
  clear_has_customizedinfo();
  ::micromsg::CustomizedInfo* temp = customizedinfo_;
  customizedinfo_ = NULL;
  return temp;
}
inline void SearchContactItem::set_allocated_customizedinfo(::micromsg::CustomizedInfo* customizedinfo) {
  delete customizedinfo_;
  customizedinfo_ = customizedinfo;
  if (customizedinfo) {
    set_has_customizedinfo();
  } else {
    clear_has_customizedinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.CustomizedInfo)
}

// optional string BigHeadImgUrl = 24;
inline bool SearchContactItem::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SearchContactItem::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SearchContactItem::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SearchContactItem::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
inline const ::std::string& SearchContactItem::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
inline void SearchContactItem::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.BigHeadImgUrl)
}
#if LANG_CXX11
inline void SearchContactItem::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.BigHeadImgUrl)
}
#endif
inline void SearchContactItem::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.BigHeadImgUrl)
}
inline void SearchContactItem::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.BigHeadImgUrl)
}
inline ::std::string* SearchContactItem::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactItem::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactItem::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 25;
inline bool SearchContactItem::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SearchContactItem::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SearchContactItem::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SearchContactItem::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
inline const ::std::string& SearchContactItem::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
inline void SearchContactItem::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.SmallHeadImgUrl)
}
#if LANG_CXX11
inline void SearchContactItem::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.SmallHeadImgUrl)
}
#endif
inline void SearchContactItem::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.SmallHeadImgUrl)
}
inline void SearchContactItem::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.SmallHeadImgUrl)
}
inline ::std::string* SearchContactItem::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactItem::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactItem::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.SmallHeadImgUrl)
}

// optional string AntispamTicket = 26;
inline bool SearchContactItem::has_antispamticket() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SearchContactItem::set_has_antispamticket() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SearchContactItem::clear_has_antispamticket() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SearchContactItem::clear_antispamticket() {
  antispamticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_antispamticket();
}
inline const ::std::string& SearchContactItem::antispamticket() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.AntispamTicket)
  return antispamticket_.GetNoArena();
}
inline void SearchContactItem::set_antispamticket(const ::std::string& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.AntispamTicket)
}
#if LANG_CXX11
inline void SearchContactItem::set_antispamticket(::std::string&& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactItem.AntispamTicket)
}
#endif
inline void SearchContactItem::set_antispamticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactItem.AntispamTicket)
}
inline void SearchContactItem::set_antispamticket(const char* value, size_t size) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactItem.AntispamTicket)
}
inline ::std::string* SearchContactItem::mutable_antispamticket() {
  set_has_antispamticket();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactItem.AntispamTicket)
  return antispamticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactItem::release_antispamticket() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactItem.AntispamTicket)
  clear_has_antispamticket();
  return antispamticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactItem::set_allocated_antispamticket(::std::string* antispamticket) {
  if (antispamticket != NULL) {
    set_has_antispamticket();
  } else {
    clear_has_antispamticket();
  }
  antispamticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), antispamticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactItem.AntispamTicket)
}

// optional uint32 MatchType = 27;
inline bool SearchContactItem::has_matchtype() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SearchContactItem::set_has_matchtype() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SearchContactItem::clear_has_matchtype() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SearchContactItem::clear_matchtype() {
  matchtype_ = 0u;
  clear_has_matchtype();
}
inline ::google::protobuf::uint32 SearchContactItem::matchtype() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactItem.MatchType)
  return matchtype_;
}
inline void SearchContactItem::set_matchtype(::google::protobuf::uint32 value) {
  set_has_matchtype();
  matchtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactItem.MatchType)
}

// -------------------------------------------------------------------

// SearchContactResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool SearchContactResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SearchContactResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SearchContactResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SearchContactResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& SearchContactResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* SearchContactResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* SearchContactResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void SearchContactResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.BaseResponse)
}

// required .micromsg.SKBuiltinString_t UserName = 2;
inline bool SearchContactResponse::has_username() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SearchContactResponse::set_has_username() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SearchContactResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SearchContactResponse::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
inline const ::micromsg::SKBuiltinString_t& SearchContactResponse::username() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* SearchContactResponse::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.UserName)
  return username_;
}
inline ::micromsg::SKBuiltinString_t* SearchContactResponse::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
inline void SearchContactResponse::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.UserName)
}

// required .micromsg.SKBuiltinString_t NickName = 3;
inline bool SearchContactResponse::has_nickname() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SearchContactResponse::set_has_nickname() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SearchContactResponse::clear_has_nickname() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SearchContactResponse::clear_nickname() {
  if (nickname_ != NULL) nickname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_nickname();
}
inline const ::micromsg::SKBuiltinString_t& SearchContactResponse::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.NickName)
  return nickname_ != NULL ? *nickname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* SearchContactResponse::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == NULL) {
    nickname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.NickName)
  return nickname_;
}
inline ::micromsg::SKBuiltinString_t* SearchContactResponse::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.NickName)
  clear_has_nickname();
  ::micromsg::SKBuiltinString_t* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
inline void SearchContactResponse::set_allocated_nickname(::micromsg::SKBuiltinString_t* nickname) {
  delete nickname_;
  nickname_ = nickname;
  if (nickname) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.NickName)
}

// required .micromsg.SKBuiltinString_t PYInitial = 4;
inline bool SearchContactResponse::has_pyinitial() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SearchContactResponse::set_has_pyinitial() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SearchContactResponse::clear_has_pyinitial() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SearchContactResponse::clear_pyinitial() {
  if (pyinitial_ != NULL) pyinitial_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_pyinitial();
}
inline const ::micromsg::SKBuiltinString_t& SearchContactResponse::pyinitial() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.PYInitial)
  return pyinitial_ != NULL ? *pyinitial_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* SearchContactResponse::mutable_pyinitial() {
  set_has_pyinitial();
  if (pyinitial_ == NULL) {
    pyinitial_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.PYInitial)
  return pyinitial_;
}
inline ::micromsg::SKBuiltinString_t* SearchContactResponse::release_pyinitial() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.PYInitial)
  clear_has_pyinitial();
  ::micromsg::SKBuiltinString_t* temp = pyinitial_;
  pyinitial_ = NULL;
  return temp;
}
inline void SearchContactResponse::set_allocated_pyinitial(::micromsg::SKBuiltinString_t* pyinitial) {
  delete pyinitial_;
  pyinitial_ = pyinitial;
  if (pyinitial) {
    set_has_pyinitial();
  } else {
    clear_has_pyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.PYInitial)
}

// required .micromsg.SKBuiltinString_t QuanPin = 5;
inline bool SearchContactResponse::has_quanpin() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SearchContactResponse::set_has_quanpin() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SearchContactResponse::clear_has_quanpin() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SearchContactResponse::clear_quanpin() {
  if (quanpin_ != NULL) quanpin_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_quanpin();
}
inline const ::micromsg::SKBuiltinString_t& SearchContactResponse::quanpin() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.QuanPin)
  return quanpin_ != NULL ? *quanpin_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* SearchContactResponse::mutable_quanpin() {
  set_has_quanpin();
  if (quanpin_ == NULL) {
    quanpin_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.QuanPin)
  return quanpin_;
}
inline ::micromsg::SKBuiltinString_t* SearchContactResponse::release_quanpin() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.QuanPin)
  clear_has_quanpin();
  ::micromsg::SKBuiltinString_t* temp = quanpin_;
  quanpin_ = NULL;
  return temp;
}
inline void SearchContactResponse::set_allocated_quanpin(::micromsg::SKBuiltinString_t* quanpin) {
  delete quanpin_;
  quanpin_ = quanpin;
  if (quanpin) {
    set_has_quanpin();
  } else {
    clear_has_quanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.QuanPin)
}

// required int32 Sex = 6;
inline bool SearchContactResponse::has_sex() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SearchContactResponse::set_has_sex() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SearchContactResponse::clear_has_sex() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SearchContactResponse::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 SearchContactResponse::sex() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.Sex)
  return sex_;
}
inline void SearchContactResponse::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.Sex)
}

// required .micromsg.SKBuiltinBuffer_t ImgBuf = 7;
inline bool SearchContactResponse::has_imgbuf() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SearchContactResponse::set_has_imgbuf() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SearchContactResponse::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SearchContactResponse::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_imgbuf();
}
inline const ::micromsg::SKBuiltinBuffer_t& SearchContactResponse::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* SearchContactResponse::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.ImgBuf)
  return imgbuf_;
}
inline ::micromsg::SKBuiltinBuffer_t* SearchContactResponse::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.ImgBuf)
  clear_has_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
inline void SearchContactResponse::set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.ImgBuf)
}

// optional string Province = 8;
inline bool SearchContactResponse::has_province() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchContactResponse::set_has_province() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchContactResponse::clear_has_province() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchContactResponse::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
inline const ::std::string& SearchContactResponse::province() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.Province)
  return province_.GetNoArena();
}
inline void SearchContactResponse::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.Province)
}
#if LANG_CXX11
inline void SearchContactResponse::set_province(::std::string&& value) {
  set_has_province();
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.Province)
}
#endif
inline void SearchContactResponse::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.Province)
}
inline void SearchContactResponse::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.Province)
}
inline ::std::string* SearchContactResponse::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.Province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactResponse::release_province() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.Province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactResponse::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.Province)
}

// optional string City = 9;
inline bool SearchContactResponse::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchContactResponse::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchContactResponse::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchContactResponse::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
inline const ::std::string& SearchContactResponse::city() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.City)
  return city_.GetNoArena();
}
inline void SearchContactResponse::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.City)
}
#if LANG_CXX11
inline void SearchContactResponse::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.City)
}
#endif
inline void SearchContactResponse::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.City)
}
inline void SearchContactResponse::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.City)
}
inline ::std::string* SearchContactResponse::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.City)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactResponse::release_city() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.City)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactResponse::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.City)
}

// optional string Signature = 10;
inline bool SearchContactResponse::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SearchContactResponse::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SearchContactResponse::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SearchContactResponse::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& SearchContactResponse::signature() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.Signature)
  return signature_.GetNoArena();
}
inline void SearchContactResponse::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.Signature)
}
#if LANG_CXX11
inline void SearchContactResponse::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.Signature)
}
#endif
inline void SearchContactResponse::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.Signature)
}
inline void SearchContactResponse::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.Signature)
}
inline ::std::string* SearchContactResponse::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactResponse::release_signature() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactResponse::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.Signature)
}

// optional uint32 PersonalCard = 11;
inline bool SearchContactResponse::has_personalcard() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SearchContactResponse::set_has_personalcard() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SearchContactResponse::clear_has_personalcard() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SearchContactResponse::clear_personalcard() {
  personalcard_ = 0u;
  clear_has_personalcard();
}
inline ::google::protobuf::uint32 SearchContactResponse::personalcard() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.PersonalCard)
  return personalcard_;
}
inline void SearchContactResponse::set_personalcard(::google::protobuf::uint32 value) {
  set_has_personalcard();
  personalcard_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.PersonalCard)
}

// optional uint32 VerifyFlag = 12;
inline bool SearchContactResponse::has_verifyflag() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SearchContactResponse::set_has_verifyflag() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SearchContactResponse::clear_has_verifyflag() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SearchContactResponse::clear_verifyflag() {
  verifyflag_ = 0u;
  clear_has_verifyflag();
}
inline ::google::protobuf::uint32 SearchContactResponse::verifyflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.VerifyFlag)
  return verifyflag_;
}
inline void SearchContactResponse::set_verifyflag(::google::protobuf::uint32 value) {
  set_has_verifyflag();
  verifyflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.VerifyFlag)
}

// optional string VerifyInfo = 13;
inline bool SearchContactResponse::has_verifyinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SearchContactResponse::set_has_verifyinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SearchContactResponse::clear_has_verifyinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SearchContactResponse::clear_verifyinfo() {
  verifyinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifyinfo();
}
inline const ::std::string& SearchContactResponse::verifyinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.VerifyInfo)
  return verifyinfo_.GetNoArena();
}
inline void SearchContactResponse::set_verifyinfo(const ::std::string& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.VerifyInfo)
}
#if LANG_CXX11
inline void SearchContactResponse::set_verifyinfo(::std::string&& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.VerifyInfo)
}
#endif
inline void SearchContactResponse::set_verifyinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.VerifyInfo)
}
inline void SearchContactResponse::set_verifyinfo(const char* value, size_t size) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.VerifyInfo)
}
inline ::std::string* SearchContactResponse::mutable_verifyinfo() {
  set_has_verifyinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.VerifyInfo)
  return verifyinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactResponse::release_verifyinfo() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.VerifyInfo)
  clear_has_verifyinfo();
  return verifyinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactResponse::set_allocated_verifyinfo(::std::string* verifyinfo) {
  if (verifyinfo != NULL) {
    set_has_verifyinfo();
  } else {
    clear_has_verifyinfo();
  }
  verifyinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifyinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.VerifyInfo)
}

// optional string Weibo = 14;
inline bool SearchContactResponse::has_weibo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SearchContactResponse::set_has_weibo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SearchContactResponse::clear_has_weibo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SearchContactResponse::clear_weibo() {
  weibo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibo();
}
inline const ::std::string& SearchContactResponse::weibo() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.Weibo)
  return weibo_.GetNoArena();
}
inline void SearchContactResponse::set_weibo(const ::std::string& value) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.Weibo)
}
#if LANG_CXX11
inline void SearchContactResponse::set_weibo(::std::string&& value) {
  set_has_weibo();
  weibo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.Weibo)
}
#endif
inline void SearchContactResponse::set_weibo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.Weibo)
}
inline void SearchContactResponse::set_weibo(const char* value, size_t size) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.Weibo)
}
inline ::std::string* SearchContactResponse::mutable_weibo() {
  set_has_weibo();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.Weibo)
  return weibo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactResponse::release_weibo() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.Weibo)
  clear_has_weibo();
  return weibo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactResponse::set_allocated_weibo(::std::string* weibo) {
  if (weibo != NULL) {
    set_has_weibo();
  } else {
    clear_has_weibo();
  }
  weibo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.Weibo)
}

// optional string Alias = 15;
inline bool SearchContactResponse::has_alias() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SearchContactResponse::set_has_alias() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SearchContactResponse::clear_has_alias() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SearchContactResponse::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& SearchContactResponse::alias() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.Alias)
  return alias_.GetNoArena();
}
inline void SearchContactResponse::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.Alias)
}
#if LANG_CXX11
inline void SearchContactResponse::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.Alias)
}
#endif
inline void SearchContactResponse::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.Alias)
}
inline void SearchContactResponse::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.Alias)
}
inline ::std::string* SearchContactResponse::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactResponse::release_alias() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.Alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactResponse::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.Alias)
}

// optional string WeiboNickname = 16;
inline bool SearchContactResponse::has_weibonickname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SearchContactResponse::set_has_weibonickname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SearchContactResponse::clear_has_weibonickname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SearchContactResponse::clear_weibonickname() {
  weibonickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibonickname();
}
inline const ::std::string& SearchContactResponse::weibonickname() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.WeiboNickname)
  return weibonickname_.GetNoArena();
}
inline void SearchContactResponse::set_weibonickname(const ::std::string& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.WeiboNickname)
}
#if LANG_CXX11
inline void SearchContactResponse::set_weibonickname(::std::string&& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.WeiboNickname)
}
#endif
inline void SearchContactResponse::set_weibonickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.WeiboNickname)
}
inline void SearchContactResponse::set_weibonickname(const char* value, size_t size) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.WeiboNickname)
}
inline ::std::string* SearchContactResponse::mutable_weibonickname() {
  set_has_weibonickname();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.WeiboNickname)
  return weibonickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactResponse::release_weibonickname() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.WeiboNickname)
  clear_has_weibonickname();
  return weibonickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactResponse::set_allocated_weibonickname(::std::string* weibonickname) {
  if (weibonickname != NULL) {
    set_has_weibonickname();
  } else {
    clear_has_weibonickname();
  }
  weibonickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibonickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.WeiboNickname)
}

// optional uint32 WeiboFlag = 17;
inline bool SearchContactResponse::has_weiboflag() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SearchContactResponse::set_has_weiboflag() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SearchContactResponse::clear_has_weiboflag() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SearchContactResponse::clear_weiboflag() {
  weiboflag_ = 0u;
  clear_has_weiboflag();
}
inline ::google::protobuf::uint32 SearchContactResponse::weiboflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.WeiboFlag)
  return weiboflag_;
}
inline void SearchContactResponse::set_weiboflag(::google::protobuf::uint32 value) {
  set_has_weiboflag();
  weiboflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.WeiboFlag)
}

// optional int32 AlbumStyle = 18;
inline bool SearchContactResponse::has_albumstyle() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SearchContactResponse::set_has_albumstyle() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SearchContactResponse::clear_has_albumstyle() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SearchContactResponse::clear_albumstyle() {
  albumstyle_ = 0;
  clear_has_albumstyle();
}
inline ::google::protobuf::int32 SearchContactResponse::albumstyle() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.AlbumStyle)
  return albumstyle_;
}
inline void SearchContactResponse::set_albumstyle(::google::protobuf::int32 value) {
  set_has_albumstyle();
  albumstyle_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.AlbumStyle)
}

// optional int32 AlbumFlag = 19;
inline bool SearchContactResponse::has_albumflag() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SearchContactResponse::set_has_albumflag() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SearchContactResponse::clear_has_albumflag() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SearchContactResponse::clear_albumflag() {
  albumflag_ = 0;
  clear_has_albumflag();
}
inline ::google::protobuf::int32 SearchContactResponse::albumflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.AlbumFlag)
  return albumflag_;
}
inline void SearchContactResponse::set_albumflag(::google::protobuf::int32 value) {
  set_has_albumflag();
  albumflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.AlbumFlag)
}

// optional string AlbumBGImgID = 20;
inline bool SearchContactResponse::has_albumbgimgid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SearchContactResponse::set_has_albumbgimgid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SearchContactResponse::clear_has_albumbgimgid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SearchContactResponse::clear_albumbgimgid() {
  albumbgimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_albumbgimgid();
}
inline const ::std::string& SearchContactResponse::albumbgimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.AlbumBGImgID)
  return albumbgimgid_.GetNoArena();
}
inline void SearchContactResponse::set_albumbgimgid(const ::std::string& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.AlbumBGImgID)
}
#if LANG_CXX11
inline void SearchContactResponse::set_albumbgimgid(::std::string&& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.AlbumBGImgID)
}
#endif
inline void SearchContactResponse::set_albumbgimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.AlbumBGImgID)
}
inline void SearchContactResponse::set_albumbgimgid(const char* value, size_t size) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.AlbumBGImgID)
}
inline ::std::string* SearchContactResponse::mutable_albumbgimgid() {
  set_has_albumbgimgid();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.AlbumBGImgID)
  return albumbgimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactResponse::release_albumbgimgid() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.AlbumBGImgID)
  clear_has_albumbgimgid();
  return albumbgimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactResponse::set_allocated_albumbgimgid(::std::string* albumbgimgid) {
  if (albumbgimgid != NULL) {
    set_has_albumbgimgid();
  } else {
    clear_has_albumbgimgid();
  }
  albumbgimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albumbgimgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.AlbumBGImgID)
}

// optional .micromsg.SnsUserInfo SnsUserInfo = 21;
inline bool SearchContactResponse::has_snsuserinfo() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SearchContactResponse::set_has_snsuserinfo() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SearchContactResponse::clear_has_snsuserinfo() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SearchContactResponse::clear_snsuserinfo() {
  if (snsuserinfo_ != NULL) snsuserinfo_->::micromsg::SnsUserInfo::Clear();
  clear_has_snsuserinfo();
}
inline const ::micromsg::SnsUserInfo& SearchContactResponse::snsuserinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.SnsUserInfo)
  return snsuserinfo_ != NULL ? *snsuserinfo_
                         : *::micromsg::SnsUserInfo::internal_default_instance();
}
inline ::micromsg::SnsUserInfo* SearchContactResponse::mutable_snsuserinfo() {
  set_has_snsuserinfo();
  if (snsuserinfo_ == NULL) {
    snsuserinfo_ = new ::micromsg::SnsUserInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.SnsUserInfo)
  return snsuserinfo_;
}
inline ::micromsg::SnsUserInfo* SearchContactResponse::release_snsuserinfo() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.SnsUserInfo)
  clear_has_snsuserinfo();
  ::micromsg::SnsUserInfo* temp = snsuserinfo_;
  snsuserinfo_ = NULL;
  return temp;
}
inline void SearchContactResponse::set_allocated_snsuserinfo(::micromsg::SnsUserInfo* snsuserinfo) {
  delete snsuserinfo_;
  snsuserinfo_ = snsuserinfo;
  if (snsuserinfo) {
    set_has_snsuserinfo();
  } else {
    clear_has_snsuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.SnsUserInfo)
}

// optional string Country = 22;
inline bool SearchContactResponse::has_country() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SearchContactResponse::set_has_country() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SearchContactResponse::clear_has_country() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SearchContactResponse::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
inline const ::std::string& SearchContactResponse::country() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.Country)
  return country_.GetNoArena();
}
inline void SearchContactResponse::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.Country)
}
#if LANG_CXX11
inline void SearchContactResponse::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.Country)
}
#endif
inline void SearchContactResponse::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.Country)
}
inline void SearchContactResponse::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.Country)
}
inline ::std::string* SearchContactResponse::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.Country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactResponse::release_country() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.Country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactResponse::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.Country)
}

// optional string MyBrandList = 23;
inline bool SearchContactResponse::has_mybrandlist() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SearchContactResponse::set_has_mybrandlist() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SearchContactResponse::clear_has_mybrandlist() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SearchContactResponse::clear_mybrandlist() {
  mybrandlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mybrandlist();
}
inline const ::std::string& SearchContactResponse::mybrandlist() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.MyBrandList)
  return mybrandlist_.GetNoArena();
}
inline void SearchContactResponse::set_mybrandlist(const ::std::string& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.MyBrandList)
}
#if LANG_CXX11
inline void SearchContactResponse::set_mybrandlist(::std::string&& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.MyBrandList)
}
#endif
inline void SearchContactResponse::set_mybrandlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.MyBrandList)
}
inline void SearchContactResponse::set_mybrandlist(const char* value, size_t size) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.MyBrandList)
}
inline ::std::string* SearchContactResponse::mutable_mybrandlist() {
  set_has_mybrandlist();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.MyBrandList)
  return mybrandlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactResponse::release_mybrandlist() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.MyBrandList)
  clear_has_mybrandlist();
  return mybrandlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactResponse::set_allocated_mybrandlist(::std::string* mybrandlist) {
  if (mybrandlist != NULL) {
    set_has_mybrandlist();
  } else {
    clear_has_mybrandlist();
  }
  mybrandlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mybrandlist);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.MyBrandList)
}

// optional .micromsg.CustomizedInfo CustomizedInfo = 24;
inline bool SearchContactResponse::has_customizedinfo() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SearchContactResponse::set_has_customizedinfo() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SearchContactResponse::clear_has_customizedinfo() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SearchContactResponse::clear_customizedinfo() {
  if (customizedinfo_ != NULL) customizedinfo_->::micromsg::CustomizedInfo::Clear();
  clear_has_customizedinfo();
}
inline const ::micromsg::CustomizedInfo& SearchContactResponse::customizedinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.CustomizedInfo)
  return customizedinfo_ != NULL ? *customizedinfo_
                         : *::micromsg::CustomizedInfo::internal_default_instance();
}
inline ::micromsg::CustomizedInfo* SearchContactResponse::mutable_customizedinfo() {
  set_has_customizedinfo();
  if (customizedinfo_ == NULL) {
    customizedinfo_ = new ::micromsg::CustomizedInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.CustomizedInfo)
  return customizedinfo_;
}
inline ::micromsg::CustomizedInfo* SearchContactResponse::release_customizedinfo() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.CustomizedInfo)
  clear_has_customizedinfo();
  ::micromsg::CustomizedInfo* temp = customizedinfo_;
  customizedinfo_ = NULL;
  return temp;
}
inline void SearchContactResponse::set_allocated_customizedinfo(::micromsg::CustomizedInfo* customizedinfo) {
  delete customizedinfo_;
  customizedinfo_ = customizedinfo;
  if (customizedinfo) {
    set_has_customizedinfo();
  } else {
    clear_has_customizedinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.CustomizedInfo)
}

// optional uint32 ContactCount = 25;
inline bool SearchContactResponse::has_contactcount() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SearchContactResponse::set_has_contactcount() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SearchContactResponse::clear_has_contactcount() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SearchContactResponse::clear_contactcount() {
  contactcount_ = 0u;
  clear_has_contactcount();
}
inline ::google::protobuf::uint32 SearchContactResponse::contactcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.ContactCount)
  return contactcount_;
}
inline void SearchContactResponse::set_contactcount(::google::protobuf::uint32 value) {
  set_has_contactcount();
  contactcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.ContactCount)
}

// repeated .micromsg.SearchContactItem ContactList = 26;
inline int SearchContactResponse::contactlist_size() const {
  return contactlist_.size();
}
inline void SearchContactResponse::clear_contactlist() {
  contactlist_.Clear();
}
inline const ::micromsg::SearchContactItem& SearchContactResponse::contactlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.ContactList)
  return contactlist_.Get(index);
}
inline ::micromsg::SearchContactItem* SearchContactResponse::mutable_contactlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.ContactList)
  return contactlist_.Mutable(index);
}
inline ::micromsg::SearchContactItem* SearchContactResponse::add_contactlist() {
  // @@protoc_insertion_point(field_add:micromsg.SearchContactResponse.ContactList)
  return contactlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::SearchContactItem >*
SearchContactResponse::mutable_contactlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SearchContactResponse.ContactList)
  return &contactlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::SearchContactItem >&
SearchContactResponse::contactlist() const {
  // @@protoc_insertion_point(field_list:micromsg.SearchContactResponse.ContactList)
  return contactlist_;
}

// optional string BigHeadImgUrl = 27;
inline bool SearchContactResponse::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SearchContactResponse::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SearchContactResponse::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SearchContactResponse::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
inline const ::std::string& SearchContactResponse::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
inline void SearchContactResponse::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.BigHeadImgUrl)
}
#if LANG_CXX11
inline void SearchContactResponse::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.BigHeadImgUrl)
}
#endif
inline void SearchContactResponse::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.BigHeadImgUrl)
}
inline void SearchContactResponse::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.BigHeadImgUrl)
}
inline ::std::string* SearchContactResponse::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactResponse::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactResponse::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 28;
inline bool SearchContactResponse::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SearchContactResponse::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SearchContactResponse::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SearchContactResponse::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
inline const ::std::string& SearchContactResponse::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
inline void SearchContactResponse::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.SmallHeadImgUrl)
}
#if LANG_CXX11
inline void SearchContactResponse::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.SmallHeadImgUrl)
}
#endif
inline void SearchContactResponse::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.SmallHeadImgUrl)
}
inline void SearchContactResponse::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.SmallHeadImgUrl)
}
inline ::std::string* SearchContactResponse::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactResponse::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactResponse::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.SmallHeadImgUrl)
}

// optional .micromsg.SKBuiltinBuffer_t ResBuf = 29;
inline bool SearchContactResponse::has_resbuf() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SearchContactResponse::set_has_resbuf() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SearchContactResponse::clear_has_resbuf() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SearchContactResponse::clear_resbuf() {
  if (resbuf_ != NULL) resbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_resbuf();
}
inline const ::micromsg::SKBuiltinBuffer_t& SearchContactResponse::resbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.ResBuf)
  return resbuf_ != NULL ? *resbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* SearchContactResponse::mutable_resbuf() {
  set_has_resbuf();
  if (resbuf_ == NULL) {
    resbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.ResBuf)
  return resbuf_;
}
inline ::micromsg::SKBuiltinBuffer_t* SearchContactResponse::release_resbuf() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.ResBuf)
  clear_has_resbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = resbuf_;
  resbuf_ = NULL;
  return temp;
}
inline void SearchContactResponse::set_allocated_resbuf(::micromsg::SKBuiltinBuffer_t* resbuf) {
  delete resbuf_;
  resbuf_ = resbuf;
  if (resbuf) {
    set_has_resbuf();
  } else {
    clear_has_resbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.ResBuf)
}

// optional string AntispamTicket = 30;
inline bool SearchContactResponse::has_antispamticket() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SearchContactResponse::set_has_antispamticket() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SearchContactResponse::clear_has_antispamticket() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SearchContactResponse::clear_antispamticket() {
  antispamticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_antispamticket();
}
inline const ::std::string& SearchContactResponse::antispamticket() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.AntispamTicket)
  return antispamticket_.GetNoArena();
}
inline void SearchContactResponse::set_antispamticket(const ::std::string& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.AntispamTicket)
}
#if LANG_CXX11
inline void SearchContactResponse::set_antispamticket(::std::string&& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.AntispamTicket)
}
#endif
inline void SearchContactResponse::set_antispamticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.AntispamTicket)
}
inline void SearchContactResponse::set_antispamticket(const char* value, size_t size) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.AntispamTicket)
}
inline ::std::string* SearchContactResponse::mutable_antispamticket() {
  set_has_antispamticket();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.AntispamTicket)
  return antispamticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactResponse::release_antispamticket() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.AntispamTicket)
  clear_has_antispamticket();
  return antispamticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactResponse::set_allocated_antispamticket(::std::string* antispamticket) {
  if (antispamticket != NULL) {
    set_has_antispamticket();
  } else {
    clear_has_antispamticket();
  }
  antispamticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), antispamticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.AntispamTicket)
}

// optional string KFWorkerID = 31;
inline bool SearchContactResponse::has_kfworkerid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SearchContactResponse::set_has_kfworkerid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SearchContactResponse::clear_has_kfworkerid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SearchContactResponse::clear_kfworkerid() {
  kfworkerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_kfworkerid();
}
inline const ::std::string& SearchContactResponse::kfworkerid() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.KFWorkerID)
  return kfworkerid_.GetNoArena();
}
inline void SearchContactResponse::set_kfworkerid(const ::std::string& value) {
  set_has_kfworkerid();
  kfworkerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.KFWorkerID)
}
#if LANG_CXX11
inline void SearchContactResponse::set_kfworkerid(::std::string&& value) {
  set_has_kfworkerid();
  kfworkerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchContactResponse.KFWorkerID)
}
#endif
inline void SearchContactResponse::set_kfworkerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_kfworkerid();
  kfworkerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchContactResponse.KFWorkerID)
}
inline void SearchContactResponse::set_kfworkerid(const char* value, size_t size) {
  set_has_kfworkerid();
  kfworkerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchContactResponse.KFWorkerID)
}
inline ::std::string* SearchContactResponse::mutable_kfworkerid() {
  set_has_kfworkerid();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchContactResponse.KFWorkerID)
  return kfworkerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchContactResponse::release_kfworkerid() {
  // @@protoc_insertion_point(field_release:micromsg.SearchContactResponse.KFWorkerID)
  clear_has_kfworkerid();
  return kfworkerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchContactResponse::set_allocated_kfworkerid(::std::string* kfworkerid) {
  if (kfworkerid != NULL) {
    set_has_kfworkerid();
  } else {
    clear_has_kfworkerid();
  }
  kfworkerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kfworkerid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchContactResponse.KFWorkerID)
}

// optional uint32 MatchType = 32;
inline bool SearchContactResponse::has_matchtype() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SearchContactResponse::set_has_matchtype() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SearchContactResponse::clear_has_matchtype() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SearchContactResponse::clear_matchtype() {
  matchtype_ = 0u;
  clear_has_matchtype();
}
inline ::google::protobuf::uint32 SearchContactResponse::matchtype() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchContactResponse.MatchType)
  return matchtype_;
}
inline void SearchContactResponse::set_matchtype(::google::protobuf::uint32 value) {
  set_has_matchtype();
  matchtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchContactResponse.MatchType)
}

// -------------------------------------------------------------------

// GroupCardReq

// optional string GroupCardName = 1;
inline bool GroupCardReq::has_groupcardname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupCardReq::set_has_groupcardname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupCardReq::clear_has_groupcardname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupCardReq::clear_groupcardname() {
  groupcardname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupcardname();
}
inline const ::std::string& GroupCardReq::groupcardname() const {
  // @@protoc_insertion_point(field_get:micromsg.GroupCardReq.GroupCardName)
  return groupcardname_.GetNoArena();
}
inline void GroupCardReq::set_groupcardname(const ::std::string& value) {
  set_has_groupcardname();
  groupcardname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GroupCardReq.GroupCardName)
}
#if LANG_CXX11
inline void GroupCardReq::set_groupcardname(::std::string&& value) {
  set_has_groupcardname();
  groupcardname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GroupCardReq.GroupCardName)
}
#endif
inline void GroupCardReq::set_groupcardname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupcardname();
  groupcardname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GroupCardReq.GroupCardName)
}
inline void GroupCardReq::set_groupcardname(const char* value, size_t size) {
  set_has_groupcardname();
  groupcardname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GroupCardReq.GroupCardName)
}
inline ::std::string* GroupCardReq::mutable_groupcardname() {
  set_has_groupcardname();
  // @@protoc_insertion_point(field_mutable:micromsg.GroupCardReq.GroupCardName)
  return groupcardname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupCardReq::release_groupcardname() {
  // @@protoc_insertion_point(field_release:micromsg.GroupCardReq.GroupCardName)
  clear_has_groupcardname();
  return groupcardname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupCardReq::set_allocated_groupcardname(::std::string* groupcardname) {
  if (groupcardname != NULL) {
    set_has_groupcardname();
  } else {
    clear_has_groupcardname();
  }
  groupcardname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupcardname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GroupCardReq.GroupCardName)
}

// -------------------------------------------------------------------

// RadarMember

// optional string MemberName = 1;
inline bool RadarMember::has_membername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarMember::set_has_membername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarMember::clear_has_membername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarMember::clear_membername() {
  membername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_membername();
}
inline const ::std::string& RadarMember::membername() const {
  // @@protoc_insertion_point(field_get:micromsg.RadarMember.MemberName)
  return membername_.GetNoArena();
}
inline void RadarMember::set_membername(const ::std::string& value) {
  set_has_membername();
  membername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RadarMember.MemberName)
}
#if LANG_CXX11
inline void RadarMember::set_membername(::std::string&& value) {
  set_has_membername();
  membername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RadarMember.MemberName)
}
#endif
inline void RadarMember::set_membername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_membername();
  membername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RadarMember.MemberName)
}
inline void RadarMember::set_membername(const char* value, size_t size) {
  set_has_membername();
  membername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RadarMember.MemberName)
}
inline ::std::string* RadarMember::mutable_membername() {
  set_has_membername();
  // @@protoc_insertion_point(field_mutable:micromsg.RadarMember.MemberName)
  return membername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadarMember::release_membername() {
  // @@protoc_insertion_point(field_release:micromsg.RadarMember.MemberName)
  clear_has_membername();
  return membername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarMember::set_allocated_membername(::std::string* membername) {
  if (membername != NULL) {
    set_has_membername();
  } else {
    clear_has_membername();
  }
  membername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), membername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RadarMember.MemberName)
}

// -------------------------------------------------------------------

// RadarCreateChatRoomParameter

// optional string Ticket = 1;
inline bool RadarCreateChatRoomParameter::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarCreateChatRoomParameter::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarCreateChatRoomParameter::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarCreateChatRoomParameter::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
inline const ::std::string& RadarCreateChatRoomParameter::ticket() const {
  // @@protoc_insertion_point(field_get:micromsg.RadarCreateChatRoomParameter.Ticket)
  return ticket_.GetNoArena();
}
inline void RadarCreateChatRoomParameter::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RadarCreateChatRoomParameter.Ticket)
}
#if LANG_CXX11
inline void RadarCreateChatRoomParameter::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RadarCreateChatRoomParameter.Ticket)
}
#endif
inline void RadarCreateChatRoomParameter::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RadarCreateChatRoomParameter.Ticket)
}
inline void RadarCreateChatRoomParameter::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RadarCreateChatRoomParameter.Ticket)
}
inline ::std::string* RadarCreateChatRoomParameter::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:micromsg.RadarCreateChatRoomParameter.Ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadarCreateChatRoomParameter::release_ticket() {
  // @@protoc_insertion_point(field_release:micromsg.RadarCreateChatRoomParameter.Ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarCreateChatRoomParameter::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RadarCreateChatRoomParameter.Ticket)
}

// optional uint32 RadarMemberCount = 2;
inline bool RadarCreateChatRoomParameter::has_radarmembercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarCreateChatRoomParameter::set_has_radarmembercount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarCreateChatRoomParameter::clear_has_radarmembercount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarCreateChatRoomParameter::clear_radarmembercount() {
  radarmembercount_ = 0u;
  clear_has_radarmembercount();
}
inline ::google::protobuf::uint32 RadarCreateChatRoomParameter::radarmembercount() const {
  // @@protoc_insertion_point(field_get:micromsg.RadarCreateChatRoomParameter.RadarMemberCount)
  return radarmembercount_;
}
inline void RadarCreateChatRoomParameter::set_radarmembercount(::google::protobuf::uint32 value) {
  set_has_radarmembercount();
  radarmembercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RadarCreateChatRoomParameter.RadarMemberCount)
}

// repeated .micromsg.RadarMember RadarMemberList = 3;
inline int RadarCreateChatRoomParameter::radarmemberlist_size() const {
  return radarmemberlist_.size();
}
inline void RadarCreateChatRoomParameter::clear_radarmemberlist() {
  radarmemberlist_.Clear();
}
inline const ::micromsg::RadarMember& RadarCreateChatRoomParameter::radarmemberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.RadarCreateChatRoomParameter.RadarMemberList)
  return radarmemberlist_.Get(index);
}
inline ::micromsg::RadarMember* RadarCreateChatRoomParameter::mutable_radarmemberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.RadarCreateChatRoomParameter.RadarMemberList)
  return radarmemberlist_.Mutable(index);
}
inline ::micromsg::RadarMember* RadarCreateChatRoomParameter::add_radarmemberlist() {
  // @@protoc_insertion_point(field_add:micromsg.RadarCreateChatRoomParameter.RadarMemberList)
  return radarmemberlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::RadarMember >*
RadarCreateChatRoomParameter::mutable_radarmemberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.RadarCreateChatRoomParameter.RadarMemberList)
  return &radarmemberlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::RadarMember >&
RadarCreateChatRoomParameter::radarmemberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.RadarCreateChatRoomParameter.RadarMemberList)
  return radarmemberlist_;
}

// -------------------------------------------------------------------

// CreateChatRoomRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool CreateChatRoomRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateChatRoomRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateChatRoomRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateChatRoomRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& CreateChatRoomRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* CreateChatRoomRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* CreateChatRoomRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void CreateChatRoomRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomRequest.BaseRequest)
}

// required .micromsg.SKBuiltinString_t Topic = 2;
inline bool CreateChatRoomRequest::has_topic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateChatRoomRequest::set_has_topic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateChatRoomRequest::clear_has_topic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateChatRoomRequest::clear_topic() {
  if (topic_ != NULL) topic_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_topic();
}
inline const ::micromsg::SKBuiltinString_t& CreateChatRoomRequest::topic() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomRequest.Topic)
  return topic_ != NULL ? *topic_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* CreateChatRoomRequest::mutable_topic() {
  set_has_topic();
  if (topic_ == NULL) {
    topic_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomRequest.Topic)
  return topic_;
}
inline ::micromsg::SKBuiltinString_t* CreateChatRoomRequest::release_topic() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomRequest.Topic)
  clear_has_topic();
  ::micromsg::SKBuiltinString_t* temp = topic_;
  topic_ = NULL;
  return temp;
}
inline void CreateChatRoomRequest::set_allocated_topic(::micromsg::SKBuiltinString_t* topic) {
  delete topic_;
  topic_ = topic;
  if (topic) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomRequest.Topic)
}

// required uint32 MemberCount = 3;
inline bool CreateChatRoomRequest::has_membercount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateChatRoomRequest::set_has_membercount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateChatRoomRequest::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateChatRoomRequest::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
inline ::google::protobuf::uint32 CreateChatRoomRequest::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomRequest.MemberCount)
  return membercount_;
}
inline void CreateChatRoomRequest::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CreateChatRoomRequest.MemberCount)
}

// repeated .micromsg.MemberReq MemberList = 4;
inline int CreateChatRoomRequest::memberlist_size() const {
  return memberlist_.size();
}
inline void CreateChatRoomRequest::clear_memberlist() {
  memberlist_.Clear();
}
inline const ::micromsg::MemberReq& CreateChatRoomRequest::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomRequest.MemberList)
  return memberlist_.Get(index);
}
inline ::micromsg::MemberReq* CreateChatRoomRequest::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomRequest.MemberList)
  return memberlist_.Mutable(index);
}
inline ::micromsg::MemberReq* CreateChatRoomRequest::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.CreateChatRoomRequest.MemberList)
  return memberlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >*
CreateChatRoomRequest::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.CreateChatRoomRequest.MemberList)
  return &memberlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >&
CreateChatRoomRequest::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.CreateChatRoomRequest.MemberList)
  return memberlist_;
}

// optional uint32 Scene = 5;
inline bool CreateChatRoomRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateChatRoomRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateChatRoomRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateChatRoomRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
inline ::google::protobuf::uint32 CreateChatRoomRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomRequest.Scene)
  return scene_;
}
inline void CreateChatRoomRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CreateChatRoomRequest.Scene)
}

// optional .micromsg.SKBuiltinBuffer_t ExtBuffer = 6;
inline bool CreateChatRoomRequest::has_extbuffer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateChatRoomRequest::set_has_extbuffer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateChatRoomRequest::clear_has_extbuffer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateChatRoomRequest::clear_extbuffer() {
  if (extbuffer_ != NULL) extbuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_extbuffer();
}
inline const ::micromsg::SKBuiltinBuffer_t& CreateChatRoomRequest::extbuffer() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomRequest.ExtBuffer)
  return extbuffer_ != NULL ? *extbuffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* CreateChatRoomRequest::mutable_extbuffer() {
  set_has_extbuffer();
  if (extbuffer_ == NULL) {
    extbuffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomRequest.ExtBuffer)
  return extbuffer_;
}
inline ::micromsg::SKBuiltinBuffer_t* CreateChatRoomRequest::release_extbuffer() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomRequest.ExtBuffer)
  clear_has_extbuffer();
  ::micromsg::SKBuiltinBuffer_t* temp = extbuffer_;
  extbuffer_ = NULL;
  return temp;
}
inline void CreateChatRoomRequest::set_allocated_extbuffer(::micromsg::SKBuiltinBuffer_t* extbuffer) {
  delete extbuffer_;
  extbuffer_ = extbuffer;
  if (extbuffer) {
    set_has_extbuffer();
  } else {
    clear_has_extbuffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomRequest.ExtBuffer)
}

// -------------------------------------------------------------------

// CreateChatRoomResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool CreateChatRoomResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateChatRoomResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateChatRoomResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateChatRoomResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& CreateChatRoomResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* CreateChatRoomResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* CreateChatRoomResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void CreateChatRoomResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomResponse.BaseResponse)
}

// required .micromsg.SKBuiltinString_t Topic = 2;
inline bool CreateChatRoomResponse::has_topic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateChatRoomResponse::set_has_topic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateChatRoomResponse::clear_has_topic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateChatRoomResponse::clear_topic() {
  if (topic_ != NULL) topic_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_topic();
}
inline const ::micromsg::SKBuiltinString_t& CreateChatRoomResponse::topic() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomResponse.Topic)
  return topic_ != NULL ? *topic_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* CreateChatRoomResponse::mutable_topic() {
  set_has_topic();
  if (topic_ == NULL) {
    topic_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomResponse.Topic)
  return topic_;
}
inline ::micromsg::SKBuiltinString_t* CreateChatRoomResponse::release_topic() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomResponse.Topic)
  clear_has_topic();
  ::micromsg::SKBuiltinString_t* temp = topic_;
  topic_ = NULL;
  return temp;
}
inline void CreateChatRoomResponse::set_allocated_topic(::micromsg::SKBuiltinString_t* topic) {
  delete topic_;
  topic_ = topic;
  if (topic) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomResponse.Topic)
}

// required .micromsg.SKBuiltinString_t PYInitial = 3;
inline bool CreateChatRoomResponse::has_pyinitial() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateChatRoomResponse::set_has_pyinitial() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateChatRoomResponse::clear_has_pyinitial() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateChatRoomResponse::clear_pyinitial() {
  if (pyinitial_ != NULL) pyinitial_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_pyinitial();
}
inline const ::micromsg::SKBuiltinString_t& CreateChatRoomResponse::pyinitial() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomResponse.PYInitial)
  return pyinitial_ != NULL ? *pyinitial_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* CreateChatRoomResponse::mutable_pyinitial() {
  set_has_pyinitial();
  if (pyinitial_ == NULL) {
    pyinitial_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomResponse.PYInitial)
  return pyinitial_;
}
inline ::micromsg::SKBuiltinString_t* CreateChatRoomResponse::release_pyinitial() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomResponse.PYInitial)
  clear_has_pyinitial();
  ::micromsg::SKBuiltinString_t* temp = pyinitial_;
  pyinitial_ = NULL;
  return temp;
}
inline void CreateChatRoomResponse::set_allocated_pyinitial(::micromsg::SKBuiltinString_t* pyinitial) {
  delete pyinitial_;
  pyinitial_ = pyinitial;
  if (pyinitial) {
    set_has_pyinitial();
  } else {
    clear_has_pyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomResponse.PYInitial)
}

// required .micromsg.SKBuiltinString_t QuanPin = 4;
inline bool CreateChatRoomResponse::has_quanpin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateChatRoomResponse::set_has_quanpin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateChatRoomResponse::clear_has_quanpin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateChatRoomResponse::clear_quanpin() {
  if (quanpin_ != NULL) quanpin_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_quanpin();
}
inline const ::micromsg::SKBuiltinString_t& CreateChatRoomResponse::quanpin() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomResponse.QuanPin)
  return quanpin_ != NULL ? *quanpin_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* CreateChatRoomResponse::mutable_quanpin() {
  set_has_quanpin();
  if (quanpin_ == NULL) {
    quanpin_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomResponse.QuanPin)
  return quanpin_;
}
inline ::micromsg::SKBuiltinString_t* CreateChatRoomResponse::release_quanpin() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomResponse.QuanPin)
  clear_has_quanpin();
  ::micromsg::SKBuiltinString_t* temp = quanpin_;
  quanpin_ = NULL;
  return temp;
}
inline void CreateChatRoomResponse::set_allocated_quanpin(::micromsg::SKBuiltinString_t* quanpin) {
  delete quanpin_;
  quanpin_ = quanpin;
  if (quanpin) {
    set_has_quanpin();
  } else {
    clear_has_quanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomResponse.QuanPin)
}

// required uint32 MemberCount = 5;
inline bool CreateChatRoomResponse::has_membercount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CreateChatRoomResponse::set_has_membercount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CreateChatRoomResponse::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CreateChatRoomResponse::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
inline ::google::protobuf::uint32 CreateChatRoomResponse::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomResponse.MemberCount)
  return membercount_;
}
inline void CreateChatRoomResponse::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CreateChatRoomResponse.MemberCount)
}

// repeated .micromsg.MemberResp MemberList = 6;
inline int CreateChatRoomResponse::memberlist_size() const {
  return memberlist_.size();
}
inline void CreateChatRoomResponse::clear_memberlist() {
  memberlist_.Clear();
}
inline const ::micromsg::MemberResp& CreateChatRoomResponse::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomResponse.MemberList)
  return memberlist_.Get(index);
}
inline ::micromsg::MemberResp* CreateChatRoomResponse::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomResponse.MemberList)
  return memberlist_.Mutable(index);
}
inline ::micromsg::MemberResp* CreateChatRoomResponse::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.CreateChatRoomResponse.MemberList)
  return memberlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >*
CreateChatRoomResponse::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.CreateChatRoomResponse.MemberList)
  return &memberlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >&
CreateChatRoomResponse::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.CreateChatRoomResponse.MemberList)
  return memberlist_;
}

// required .micromsg.SKBuiltinString_t ChatRoomName = 7;
inline bool CreateChatRoomResponse::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreateChatRoomResponse::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreateChatRoomResponse::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreateChatRoomResponse::clear_chatroomname() {
  if (chatroomname_ != NULL) chatroomname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_chatroomname();
}
inline const ::micromsg::SKBuiltinString_t& CreateChatRoomResponse::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomResponse.ChatRoomName)
  return chatroomname_ != NULL ? *chatroomname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* CreateChatRoomResponse::mutable_chatroomname() {
  set_has_chatroomname();
  if (chatroomname_ == NULL) {
    chatroomname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomResponse.ChatRoomName)
  return chatroomname_;
}
inline ::micromsg::SKBuiltinString_t* CreateChatRoomResponse::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomResponse.ChatRoomName)
  clear_has_chatroomname();
  ::micromsg::SKBuiltinString_t* temp = chatroomname_;
  chatroomname_ = NULL;
  return temp;
}
inline void CreateChatRoomResponse::set_allocated_chatroomname(::micromsg::SKBuiltinString_t* chatroomname) {
  delete chatroomname_;
  chatroomname_ = chatroomname;
  if (chatroomname) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomResponse.ChatRoomName)
}

// required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
inline bool CreateChatRoomResponse::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CreateChatRoomResponse::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CreateChatRoomResponse::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CreateChatRoomResponse::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_imgbuf();
}
inline const ::micromsg::SKBuiltinBuffer_t& CreateChatRoomResponse::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomResponse.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* CreateChatRoomResponse::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomResponse.ImgBuf)
  return imgbuf_;
}
inline ::micromsg::SKBuiltinBuffer_t* CreateChatRoomResponse::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomResponse.ImgBuf)
  clear_has_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
inline void CreateChatRoomResponse::set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomResponse.ImgBuf)
}

// optional string BigHeadImgUrl = 9;
inline bool CreateChatRoomResponse::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateChatRoomResponse::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateChatRoomResponse::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateChatRoomResponse::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
inline const ::std::string& CreateChatRoomResponse::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomResponse.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
inline void CreateChatRoomResponse::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CreateChatRoomResponse.BigHeadImgUrl)
}
#if LANG_CXX11
inline void CreateChatRoomResponse::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CreateChatRoomResponse.BigHeadImgUrl)
}
#endif
inline void CreateChatRoomResponse::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CreateChatRoomResponse.BigHeadImgUrl)
}
inline void CreateChatRoomResponse::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CreateChatRoomResponse.BigHeadImgUrl)
}
inline ::std::string* CreateChatRoomResponse::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomResponse.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateChatRoomResponse::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomResponse.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateChatRoomResponse::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomResponse.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 10;
inline bool CreateChatRoomResponse::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateChatRoomResponse::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateChatRoomResponse::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateChatRoomResponse::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
inline const ::std::string& CreateChatRoomResponse::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateChatRoomResponse.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
inline void CreateChatRoomResponse::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CreateChatRoomResponse.SmallHeadImgUrl)
}
#if LANG_CXX11
inline void CreateChatRoomResponse::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CreateChatRoomResponse.SmallHeadImgUrl)
}
#endif
inline void CreateChatRoomResponse::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CreateChatRoomResponse.SmallHeadImgUrl)
}
inline void CreateChatRoomResponse::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CreateChatRoomResponse.SmallHeadImgUrl)
}
inline ::std::string* CreateChatRoomResponse::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.CreateChatRoomResponse.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateChatRoomResponse::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.CreateChatRoomResponse.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateChatRoomResponse::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateChatRoomResponse.SmallHeadImgUrl)
}

// -------------------------------------------------------------------

// AddChatRoomMemberRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool AddChatRoomMemberRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddChatRoomMemberRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddChatRoomMemberRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddChatRoomMemberRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& AddChatRoomMemberRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomMemberRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* AddChatRoomMemberRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomMemberRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* AddChatRoomMemberRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.AddChatRoomMemberRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void AddChatRoomMemberRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddChatRoomMemberRequest.BaseRequest)
}

// required uint32 MemberCount = 2;
inline bool AddChatRoomMemberRequest::has_membercount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddChatRoomMemberRequest::set_has_membercount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddChatRoomMemberRequest::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddChatRoomMemberRequest::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
inline ::google::protobuf::uint32 AddChatRoomMemberRequest::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomMemberRequest.MemberCount)
  return membercount_;
}
inline void AddChatRoomMemberRequest::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddChatRoomMemberRequest.MemberCount)
}

// repeated .micromsg.MemberReq MemberList = 3;
inline int AddChatRoomMemberRequest::memberlist_size() const {
  return memberlist_.size();
}
inline void AddChatRoomMemberRequest::clear_memberlist() {
  memberlist_.Clear();
}
inline const ::micromsg::MemberReq& AddChatRoomMemberRequest::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomMemberRequest.MemberList)
  return memberlist_.Get(index);
}
inline ::micromsg::MemberReq* AddChatRoomMemberRequest::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomMemberRequest.MemberList)
  return memberlist_.Mutable(index);
}
inline ::micromsg::MemberReq* AddChatRoomMemberRequest::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.AddChatRoomMemberRequest.MemberList)
  return memberlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >*
AddChatRoomMemberRequest::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.AddChatRoomMemberRequest.MemberList)
  return &memberlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >&
AddChatRoomMemberRequest::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.AddChatRoomMemberRequest.MemberList)
  return memberlist_;
}

// required .micromsg.SKBuiltinString_t ChatRoomName = 4;
inline bool AddChatRoomMemberRequest::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddChatRoomMemberRequest::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddChatRoomMemberRequest::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddChatRoomMemberRequest::clear_chatroomname() {
  if (chatroomname_ != NULL) chatroomname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_chatroomname();
}
inline const ::micromsg::SKBuiltinString_t& AddChatRoomMemberRequest::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomMemberRequest.ChatRoomName)
  return chatroomname_ != NULL ? *chatroomname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* AddChatRoomMemberRequest::mutable_chatroomname() {
  set_has_chatroomname();
  if (chatroomname_ == NULL) {
    chatroomname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomMemberRequest.ChatRoomName)
  return chatroomname_;
}
inline ::micromsg::SKBuiltinString_t* AddChatRoomMemberRequest::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.AddChatRoomMemberRequest.ChatRoomName)
  clear_has_chatroomname();
  ::micromsg::SKBuiltinString_t* temp = chatroomname_;
  chatroomname_ = NULL;
  return temp;
}
inline void AddChatRoomMemberRequest::set_allocated_chatroomname(::micromsg::SKBuiltinString_t* chatroomname) {
  delete chatroomname_;
  chatroomname_ = chatroomname;
  if (chatroomname) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddChatRoomMemberRequest.ChatRoomName)
}

// -------------------------------------------------------------------

// AddChatRoomMemberResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool AddChatRoomMemberResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddChatRoomMemberResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddChatRoomMemberResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddChatRoomMemberResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& AddChatRoomMemberResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomMemberResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* AddChatRoomMemberResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomMemberResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* AddChatRoomMemberResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.AddChatRoomMemberResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void AddChatRoomMemberResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddChatRoomMemberResponse.BaseResponse)
}

// required uint32 MemberCount = 2;
inline bool AddChatRoomMemberResponse::has_membercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddChatRoomMemberResponse::set_has_membercount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddChatRoomMemberResponse::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddChatRoomMemberResponse::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
inline ::google::protobuf::uint32 AddChatRoomMemberResponse::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomMemberResponse.MemberCount)
  return membercount_;
}
inline void AddChatRoomMemberResponse::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddChatRoomMemberResponse.MemberCount)
}

// repeated .micromsg.MemberResp MemberList = 3;
inline int AddChatRoomMemberResponse::memberlist_size() const {
  return memberlist_.size();
}
inline void AddChatRoomMemberResponse::clear_memberlist() {
  memberlist_.Clear();
}
inline const ::micromsg::MemberResp& AddChatRoomMemberResponse::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomMemberResponse.MemberList)
  return memberlist_.Get(index);
}
inline ::micromsg::MemberResp* AddChatRoomMemberResponse::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomMemberResponse.MemberList)
  return memberlist_.Mutable(index);
}
inline ::micromsg::MemberResp* AddChatRoomMemberResponse::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.AddChatRoomMemberResponse.MemberList)
  return memberlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >*
AddChatRoomMemberResponse::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.AddChatRoomMemberResponse.MemberList)
  return &memberlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >&
AddChatRoomMemberResponse::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.AddChatRoomMemberResponse.MemberList)
  return memberlist_;
}

// -------------------------------------------------------------------

// DelChatRoomMemberRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool DelChatRoomMemberRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelChatRoomMemberRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelChatRoomMemberRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelChatRoomMemberRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& DelChatRoomMemberRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.DelChatRoomMemberRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* DelChatRoomMemberRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelChatRoomMemberRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* DelChatRoomMemberRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.DelChatRoomMemberRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void DelChatRoomMemberRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelChatRoomMemberRequest.BaseRequest)
}

// required uint32 MemberCount = 2;
inline bool DelChatRoomMemberRequest::has_membercount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DelChatRoomMemberRequest::set_has_membercount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DelChatRoomMemberRequest::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DelChatRoomMemberRequest::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
inline ::google::protobuf::uint32 DelChatRoomMemberRequest::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.DelChatRoomMemberRequest.MemberCount)
  return membercount_;
}
inline void DelChatRoomMemberRequest::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelChatRoomMemberRequest.MemberCount)
}

// repeated .micromsg.DelMemberReq MemberList = 3;
inline int DelChatRoomMemberRequest::memberlist_size() const {
  return memberlist_.size();
}
inline void DelChatRoomMemberRequest::clear_memberlist() {
  memberlist_.Clear();
}
inline const ::micromsg::DelMemberReq& DelChatRoomMemberRequest::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.DelChatRoomMemberRequest.MemberList)
  return memberlist_.Get(index);
}
inline ::micromsg::DelMemberReq* DelChatRoomMemberRequest::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.DelChatRoomMemberRequest.MemberList)
  return memberlist_.Mutable(index);
}
inline ::micromsg::DelMemberReq* DelChatRoomMemberRequest::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.DelChatRoomMemberRequest.MemberList)
  return memberlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberReq >*
DelChatRoomMemberRequest::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.DelChatRoomMemberRequest.MemberList)
  return &memberlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberReq >&
DelChatRoomMemberRequest::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.DelChatRoomMemberRequest.MemberList)
  return memberlist_;
}

// optional string ChatRoomName = 4;
inline bool DelChatRoomMemberRequest::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelChatRoomMemberRequest::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelChatRoomMemberRequest::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelChatRoomMemberRequest::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
inline const ::std::string& DelChatRoomMemberRequest::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.DelChatRoomMemberRequest.ChatRoomName)
  return chatroomname_.GetNoArena();
}
inline void DelChatRoomMemberRequest::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DelChatRoomMemberRequest.ChatRoomName)
}
#if LANG_CXX11
inline void DelChatRoomMemberRequest::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DelChatRoomMemberRequest.ChatRoomName)
}
#endif
inline void DelChatRoomMemberRequest::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DelChatRoomMemberRequest.ChatRoomName)
}
inline void DelChatRoomMemberRequest::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DelChatRoomMemberRequest.ChatRoomName)
}
inline ::std::string* DelChatRoomMemberRequest::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.DelChatRoomMemberRequest.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DelChatRoomMemberRequest::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.DelChatRoomMemberRequest.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelChatRoomMemberRequest::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelChatRoomMemberRequest.ChatRoomName)
}

// optional uint32 Scene = 5;
inline bool DelChatRoomMemberRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DelChatRoomMemberRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DelChatRoomMemberRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DelChatRoomMemberRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
inline ::google::protobuf::uint32 DelChatRoomMemberRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.DelChatRoomMemberRequest.Scene)
  return scene_;
}
inline void DelChatRoomMemberRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelChatRoomMemberRequest.Scene)
}

// -------------------------------------------------------------------

// DelChatRoomMemberResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool DelChatRoomMemberResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelChatRoomMemberResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelChatRoomMemberResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelChatRoomMemberResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& DelChatRoomMemberResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.DelChatRoomMemberResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* DelChatRoomMemberResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelChatRoomMemberResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* DelChatRoomMemberResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.DelChatRoomMemberResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void DelChatRoomMemberResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelChatRoomMemberResponse.BaseResponse)
}

// required uint32 MemberCount = 2;
inline bool DelChatRoomMemberResponse::has_membercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelChatRoomMemberResponse::set_has_membercount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelChatRoomMemberResponse::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelChatRoomMemberResponse::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
inline ::google::protobuf::uint32 DelChatRoomMemberResponse::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.DelChatRoomMemberResponse.MemberCount)
  return membercount_;
}
inline void DelChatRoomMemberResponse::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelChatRoomMemberResponse.MemberCount)
}

// repeated .micromsg.DelMemberResp MemberList = 3;
inline int DelChatRoomMemberResponse::memberlist_size() const {
  return memberlist_.size();
}
inline void DelChatRoomMemberResponse::clear_memberlist() {
  memberlist_.Clear();
}
inline const ::micromsg::DelMemberResp& DelChatRoomMemberResponse::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.DelChatRoomMemberResponse.MemberList)
  return memberlist_.Get(index);
}
inline ::micromsg::DelMemberResp* DelChatRoomMemberResponse::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.DelChatRoomMemberResponse.MemberList)
  return memberlist_.Mutable(index);
}
inline ::micromsg::DelMemberResp* DelChatRoomMemberResponse::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.DelChatRoomMemberResponse.MemberList)
  return memberlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberResp >*
DelChatRoomMemberResponse::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.DelChatRoomMemberResponse.MemberList)
  return &memberlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberResp >&
DelChatRoomMemberResponse::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.DelChatRoomMemberResponse.MemberList)
  return memberlist_;
}

// -------------------------------------------------------------------

// CollectChatRoomReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool CollectChatRoomReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CollectChatRoomReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CollectChatRoomReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CollectChatRoomReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& CollectChatRoomReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.CollectChatRoomReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* CollectChatRoomReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CollectChatRoomReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* CollectChatRoomReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.CollectChatRoomReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void CollectChatRoomReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CollectChatRoomReq.BaseRequest)
}

// required uint32 GroupCardCount = 2;
inline bool CollectChatRoomReq::has_groupcardcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CollectChatRoomReq::set_has_groupcardcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CollectChatRoomReq::clear_has_groupcardcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CollectChatRoomReq::clear_groupcardcount() {
  groupcardcount_ = 0u;
  clear_has_groupcardcount();
}
inline ::google::protobuf::uint32 CollectChatRoomReq::groupcardcount() const {
  // @@protoc_insertion_point(field_get:micromsg.CollectChatRoomReq.GroupCardCount)
  return groupcardcount_;
}
inline void CollectChatRoomReq::set_groupcardcount(::google::protobuf::uint32 value) {
  set_has_groupcardcount();
  groupcardcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CollectChatRoomReq.GroupCardCount)
}

// repeated .micromsg.GroupCardReq GroupCardList = 3;
inline int CollectChatRoomReq::groupcardlist_size() const {
  return groupcardlist_.size();
}
inline void CollectChatRoomReq::clear_groupcardlist() {
  groupcardlist_.Clear();
}
inline const ::micromsg::GroupCardReq& CollectChatRoomReq::groupcardlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.CollectChatRoomReq.GroupCardList)
  return groupcardlist_.Get(index);
}
inline ::micromsg::GroupCardReq* CollectChatRoomReq::mutable_groupcardlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.CollectChatRoomReq.GroupCardList)
  return groupcardlist_.Mutable(index);
}
inline ::micromsg::GroupCardReq* CollectChatRoomReq::add_groupcardlist() {
  // @@protoc_insertion_point(field_add:micromsg.CollectChatRoomReq.GroupCardList)
  return groupcardlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::GroupCardReq >*
CollectChatRoomReq::mutable_groupcardlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.CollectChatRoomReq.GroupCardList)
  return &groupcardlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::GroupCardReq >&
CollectChatRoomReq::groupcardlist() const {
  // @@protoc_insertion_point(field_list:micromsg.CollectChatRoomReq.GroupCardList)
  return groupcardlist_;
}

// -------------------------------------------------------------------

// CollectChatRoomResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool CollectChatRoomResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CollectChatRoomResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CollectChatRoomResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CollectChatRoomResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& CollectChatRoomResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.CollectChatRoomResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* CollectChatRoomResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CollectChatRoomResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* CollectChatRoomResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.CollectChatRoomResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void CollectChatRoomResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CollectChatRoomResp.BaseResponse)
}

// -------------------------------------------------------------------

// BatchGetHeadImgRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool BatchGetHeadImgRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchGetHeadImgRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchGetHeadImgRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchGetHeadImgRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& BatchGetHeadImgRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetHeadImgRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* BatchGetHeadImgRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetHeadImgRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* BatchGetHeadImgRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BatchGetHeadImgRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void BatchGetHeadImgRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchGetHeadImgRequest.BaseRequest)
}

// required uint32 Count = 2;
inline bool BatchGetHeadImgRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchGetHeadImgRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchGetHeadImgRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchGetHeadImgRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 BatchGetHeadImgRequest::count() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetHeadImgRequest.Count)
  return count_;
}
inline void BatchGetHeadImgRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchGetHeadImgRequest.Count)
}

// repeated .micromsg.SKBuiltinString_t UserNameList = 3;
inline int BatchGetHeadImgRequest::usernamelist_size() const {
  return usernamelist_.size();
}
inline void BatchGetHeadImgRequest::clear_usernamelist() {
  usernamelist_.Clear();
}
inline const ::micromsg::SKBuiltinString_t& BatchGetHeadImgRequest::usernamelist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetHeadImgRequest.UserNameList)
  return usernamelist_.Get(index);
}
inline ::micromsg::SKBuiltinString_t* BatchGetHeadImgRequest::mutable_usernamelist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetHeadImgRequest.UserNameList)
  return usernamelist_.Mutable(index);
}
inline ::micromsg::SKBuiltinString_t* BatchGetHeadImgRequest::add_usernamelist() {
  // @@protoc_insertion_point(field_add:micromsg.BatchGetHeadImgRequest.UserNameList)
  return usernamelist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
BatchGetHeadImgRequest::mutable_usernamelist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchGetHeadImgRequest.UserNameList)
  return &usernamelist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
BatchGetHeadImgRequest::usernamelist() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchGetHeadImgRequest.UserNameList)
  return usernamelist_;
}

// -------------------------------------------------------------------

// ImgPair

// required .micromsg.SKBuiltinBuffer_t ImgBuf = 1;
inline bool ImgPair::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImgPair::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImgPair::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImgPair::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_imgbuf();
}
inline const ::micromsg::SKBuiltinBuffer_t& ImgPair::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.ImgPair.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* ImgPair::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ImgPair.ImgBuf)
  return imgbuf_;
}
inline ::micromsg::SKBuiltinBuffer_t* ImgPair::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.ImgPair.ImgBuf)
  clear_has_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
inline void ImgPair::set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ImgPair.ImgBuf)
}

// required .micromsg.SKBuiltinString_t Username = 2;
inline bool ImgPair::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImgPair::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImgPair::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImgPair::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
inline const ::micromsg::SKBuiltinString_t& ImgPair::username() const {
  // @@protoc_insertion_point(field_get:micromsg.ImgPair.Username)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* ImgPair::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ImgPair.Username)
  return username_;
}
inline ::micromsg::SKBuiltinString_t* ImgPair::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.ImgPair.Username)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
inline void ImgPair::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ImgPair.Username)
}

// -------------------------------------------------------------------

// BatchGetHeadImgResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool BatchGetHeadImgResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchGetHeadImgResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchGetHeadImgResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchGetHeadImgResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& BatchGetHeadImgResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetHeadImgResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* BatchGetHeadImgResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetHeadImgResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* BatchGetHeadImgResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BatchGetHeadImgResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void BatchGetHeadImgResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchGetHeadImgResponse.BaseResponse)
}

// required uint32 Count = 2;
inline bool BatchGetHeadImgResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchGetHeadImgResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchGetHeadImgResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchGetHeadImgResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 BatchGetHeadImgResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetHeadImgResponse.Count)
  return count_;
}
inline void BatchGetHeadImgResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchGetHeadImgResponse.Count)
}

// repeated .micromsg.ImgPair ImgPairList = 3;
inline int BatchGetHeadImgResponse::imgpairlist_size() const {
  return imgpairlist_.size();
}
inline void BatchGetHeadImgResponse::clear_imgpairlist() {
  imgpairlist_.Clear();
}
inline const ::micromsg::ImgPair& BatchGetHeadImgResponse::imgpairlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetHeadImgResponse.ImgPairList)
  return imgpairlist_.Get(index);
}
inline ::micromsg::ImgPair* BatchGetHeadImgResponse::mutable_imgpairlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetHeadImgResponse.ImgPairList)
  return imgpairlist_.Mutable(index);
}
inline ::micromsg::ImgPair* BatchGetHeadImgResponse::add_imgpairlist() {
  // @@protoc_insertion_point(field_add:micromsg.BatchGetHeadImgResponse.ImgPairList)
  return imgpairlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::ImgPair >*
BatchGetHeadImgResponse::mutable_imgpairlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchGetHeadImgResponse.ImgPairList)
  return &imgpairlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::ImgPair >&
BatchGetHeadImgResponse::imgpairlist() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchGetHeadImgResponse.ImgPairList)
  return imgpairlist_;
}

// -------------------------------------------------------------------

// SearchFriendRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool SearchFriendRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchFriendRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchFriendRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchFriendRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& SearchFriendRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchFriendRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* SearchFriendRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchFriendRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* SearchFriendRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SearchFriendRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void SearchFriendRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchFriendRequest.BaseRequest)
}

// optional string UserName = 2;
inline bool SearchFriendRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchFriendRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchFriendRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchFriendRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& SearchFriendRequest::username() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchFriendRequest.UserName)
  return username_.GetNoArena();
}
inline void SearchFriendRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SearchFriendRequest.UserName)
}
#if LANG_CXX11
inline void SearchFriendRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SearchFriendRequest.UserName)
}
#endif
inline void SearchFriendRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SearchFriendRequest.UserName)
}
inline void SearchFriendRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SearchFriendRequest.UserName)
}
inline ::std::string* SearchFriendRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.SearchFriendRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchFriendRequest::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.SearchFriendRequest.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchFriendRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchFriendRequest.UserName)
}

// -------------------------------------------------------------------

// FriendInfo

// optional string DisplayUserName = 1;
inline bool FriendInfo::has_displayusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendInfo::set_has_displayusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendInfo::clear_has_displayusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendInfo::clear_displayusername() {
  displayusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_displayusername();
}
inline const ::std::string& FriendInfo::displayusername() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.DisplayUserName)
  return displayusername_.GetNoArena();
}
inline void FriendInfo::set_displayusername(const ::std::string& value) {
  set_has_displayusername();
  displayusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.DisplayUserName)
}
#if LANG_CXX11
inline void FriendInfo::set_displayusername(::std::string&& value) {
  set_has_displayusername();
  displayusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FriendInfo.DisplayUserName)
}
#endif
inline void FriendInfo::set_displayusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_displayusername();
  displayusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FriendInfo.DisplayUserName)
}
inline void FriendInfo::set_displayusername(const char* value, size_t size) {
  set_has_displayusername();
  displayusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FriendInfo.DisplayUserName)
}
inline ::std::string* FriendInfo::mutable_displayusername() {
  set_has_displayusername();
  // @@protoc_insertion_point(field_mutable:micromsg.FriendInfo.DisplayUserName)
  return displayusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfo::release_displayusername() {
  // @@protoc_insertion_point(field_release:micromsg.FriendInfo.DisplayUserName)
  clear_has_displayusername();
  return displayusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_displayusername(::std::string* displayusername) {
  if (displayusername != NULL) {
    set_has_displayusername();
  } else {
    clear_has_displayusername();
  }
  displayusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), displayusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FriendInfo.DisplayUserName)
}

// optional string DisplayNickName = 2;
inline bool FriendInfo::has_displaynickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendInfo::set_has_displaynickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendInfo::clear_has_displaynickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendInfo::clear_displaynickname() {
  displaynickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_displaynickname();
}
inline const ::std::string& FriendInfo::displaynickname() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.DisplayNickName)
  return displaynickname_.GetNoArena();
}
inline void FriendInfo::set_displaynickname(const ::std::string& value) {
  set_has_displaynickname();
  displaynickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.DisplayNickName)
}
#if LANG_CXX11
inline void FriendInfo::set_displaynickname(::std::string&& value) {
  set_has_displaynickname();
  displaynickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FriendInfo.DisplayNickName)
}
#endif
inline void FriendInfo::set_displaynickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_displaynickname();
  displaynickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FriendInfo.DisplayNickName)
}
inline void FriendInfo::set_displaynickname(const char* value, size_t size) {
  set_has_displaynickname();
  displaynickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FriendInfo.DisplayNickName)
}
inline ::std::string* FriendInfo::mutable_displaynickname() {
  set_has_displaynickname();
  // @@protoc_insertion_point(field_mutable:micromsg.FriendInfo.DisplayNickName)
  return displaynickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfo::release_displaynickname() {
  // @@protoc_insertion_point(field_release:micromsg.FriendInfo.DisplayNickName)
  clear_has_displaynickname();
  return displaynickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_displaynickname(::std::string* displaynickname) {
  if (displaynickname != NULL) {
    set_has_displaynickname();
  } else {
    clear_has_displaynickname();
  }
  displaynickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), displaynickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FriendInfo.DisplayNickName)
}

// optional string DisplayRemark = 3;
inline bool FriendInfo::has_displayremark() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendInfo::set_has_displayremark() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendInfo::clear_has_displayremark() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendInfo::clear_displayremark() {
  displayremark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_displayremark();
}
inline const ::std::string& FriendInfo::displayremark() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.DisplayRemark)
  return displayremark_.GetNoArena();
}
inline void FriendInfo::set_displayremark(const ::std::string& value) {
  set_has_displayremark();
  displayremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.DisplayRemark)
}
#if LANG_CXX11
inline void FriendInfo::set_displayremark(::std::string&& value) {
  set_has_displayremark();
  displayremark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FriendInfo.DisplayRemark)
}
#endif
inline void FriendInfo::set_displayremark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_displayremark();
  displayremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FriendInfo.DisplayRemark)
}
inline void FriendInfo::set_displayremark(const char* value, size_t size) {
  set_has_displayremark();
  displayremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FriendInfo.DisplayRemark)
}
inline ::std::string* FriendInfo::mutable_displayremark() {
  set_has_displayremark();
  // @@protoc_insertion_point(field_mutable:micromsg.FriendInfo.DisplayRemark)
  return displayremark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfo::release_displayremark() {
  // @@protoc_insertion_point(field_release:micromsg.FriendInfo.DisplayRemark)
  clear_has_displayremark();
  return displayremark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_displayremark(::std::string* displayremark) {
  if (displayremark != NULL) {
    set_has_displayremark();
  } else {
    clear_has_displayremark();
  }
  displayremark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), displayremark);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FriendInfo.DisplayRemark)
}

// optional string WXUserName = 4;
inline bool FriendInfo::has_wxusername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendInfo::set_has_wxusername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendInfo::clear_has_wxusername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendInfo::clear_wxusername() {
  wxusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wxusername();
}
inline const ::std::string& FriendInfo::wxusername() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.WXUserName)
  return wxusername_.GetNoArena();
}
inline void FriendInfo::set_wxusername(const ::std::string& value) {
  set_has_wxusername();
  wxusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.WXUserName)
}
#if LANG_CXX11
inline void FriendInfo::set_wxusername(::std::string&& value) {
  set_has_wxusername();
  wxusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FriendInfo.WXUserName)
}
#endif
inline void FriendInfo::set_wxusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wxusername();
  wxusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FriendInfo.WXUserName)
}
inline void FriendInfo::set_wxusername(const char* value, size_t size) {
  set_has_wxusername();
  wxusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FriendInfo.WXUserName)
}
inline ::std::string* FriendInfo::mutable_wxusername() {
  set_has_wxusername();
  // @@protoc_insertion_point(field_mutable:micromsg.FriendInfo.WXUserName)
  return wxusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfo::release_wxusername() {
  // @@protoc_insertion_point(field_release:micromsg.FriendInfo.WXUserName)
  clear_has_wxusername();
  return wxusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_wxusername(::std::string* wxusername) {
  if (wxusername != NULL) {
    set_has_wxusername();
  } else {
    clear_has_wxusername();
  }
  wxusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wxusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FriendInfo.WXUserName)
}

// optional string WXNickName = 5;
inline bool FriendInfo::has_wxnickname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendInfo::set_has_wxnickname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendInfo::clear_has_wxnickname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendInfo::clear_wxnickname() {
  wxnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wxnickname();
}
inline const ::std::string& FriendInfo::wxnickname() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.WXNickName)
  return wxnickname_.GetNoArena();
}
inline void FriendInfo::set_wxnickname(const ::std::string& value) {
  set_has_wxnickname();
  wxnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.WXNickName)
}
#if LANG_CXX11
inline void FriendInfo::set_wxnickname(::std::string&& value) {
  set_has_wxnickname();
  wxnickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FriendInfo.WXNickName)
}
#endif
inline void FriendInfo::set_wxnickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wxnickname();
  wxnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FriendInfo.WXNickName)
}
inline void FriendInfo::set_wxnickname(const char* value, size_t size) {
  set_has_wxnickname();
  wxnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FriendInfo.WXNickName)
}
inline ::std::string* FriendInfo::mutable_wxnickname() {
  set_has_wxnickname();
  // @@protoc_insertion_point(field_mutable:micromsg.FriendInfo.WXNickName)
  return wxnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfo::release_wxnickname() {
  // @@protoc_insertion_point(field_release:micromsg.FriendInfo.WXNickName)
  clear_has_wxnickname();
  return wxnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_wxnickname(::std::string* wxnickname) {
  if (wxnickname != NULL) {
    set_has_wxnickname();
  } else {
    clear_has_wxnickname();
  }
  wxnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wxnickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FriendInfo.WXNickName)
}

// optional string WXRemark = 6;
inline bool FriendInfo::has_wxremark() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FriendInfo::set_has_wxremark() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FriendInfo::clear_has_wxremark() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FriendInfo::clear_wxremark() {
  wxremark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wxremark();
}
inline const ::std::string& FriendInfo::wxremark() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.WXRemark)
  return wxremark_.GetNoArena();
}
inline void FriendInfo::set_wxremark(const ::std::string& value) {
  set_has_wxremark();
  wxremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.WXRemark)
}
#if LANG_CXX11
inline void FriendInfo::set_wxremark(::std::string&& value) {
  set_has_wxremark();
  wxremark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FriendInfo.WXRemark)
}
#endif
inline void FriendInfo::set_wxremark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wxremark();
  wxremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FriendInfo.WXRemark)
}
inline void FriendInfo::set_wxremark(const char* value, size_t size) {
  set_has_wxremark();
  wxremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FriendInfo.WXRemark)
}
inline ::std::string* FriendInfo::mutable_wxremark() {
  set_has_wxremark();
  // @@protoc_insertion_point(field_mutable:micromsg.FriendInfo.WXRemark)
  return wxremark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfo::release_wxremark() {
  // @@protoc_insertion_point(field_release:micromsg.FriendInfo.WXRemark)
  clear_has_wxremark();
  return wxremark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_wxremark(::std::string* wxremark) {
  if (wxremark != NULL) {
    set_has_wxremark();
  } else {
    clear_has_wxremark();
  }
  wxremark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wxremark);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FriendInfo.WXRemark)
}

// required uint32 Type = 7;
inline bool FriendInfo::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FriendInfo::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FriendInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FriendInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 FriendInfo::type() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.Type)
  return type_;
}
inline void FriendInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.Type)
}

// required uint32 Status = 8;
inline bool FriendInfo::has_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FriendInfo::set_has_status() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FriendInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FriendInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 FriendInfo::status() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.Status)
  return status_;
}
inline void FriendInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.Status)
}

// optional string Source = 9;
inline bool FriendInfo::has_source() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FriendInfo::set_has_source() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FriendInfo::clear_has_source() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FriendInfo::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& FriendInfo::source() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.Source)
  return source_.GetNoArena();
}
inline void FriendInfo::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.Source)
}
#if LANG_CXX11
inline void FriendInfo::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FriendInfo.Source)
}
#endif
inline void FriendInfo::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FriendInfo.Source)
}
inline void FriendInfo::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FriendInfo.Source)
}
inline ::std::string* FriendInfo::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:micromsg.FriendInfo.Source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfo::release_source() {
  // @@protoc_insertion_point(field_release:micromsg.FriendInfo.Source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FriendInfo.Source)
}

// optional uint32 MatchField = 10;
inline bool FriendInfo::has_matchfield() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FriendInfo::set_has_matchfield() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FriendInfo::clear_has_matchfield() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FriendInfo::clear_matchfield() {
  matchfield_ = 0u;
  clear_has_matchfield();
}
inline ::google::protobuf::uint32 FriendInfo::matchfield() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.MatchField)
  return matchfield_;
}
inline void FriendInfo::set_matchfield(::google::protobuf::uint32 value) {
  set_has_matchfield();
  matchfield_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.MatchField)
}

// optional string Alias = 11;
inline bool FriendInfo::has_alias() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FriendInfo::set_has_alias() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FriendInfo::clear_has_alias() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FriendInfo::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& FriendInfo::alias() const {
  // @@protoc_insertion_point(field_get:micromsg.FriendInfo.Alias)
  return alias_.GetNoArena();
}
inline void FriendInfo::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FriendInfo.Alias)
}
#if LANG_CXX11
inline void FriendInfo::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FriendInfo.Alias)
}
#endif
inline void FriendInfo::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FriendInfo.Alias)
}
inline void FriendInfo::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FriendInfo.Alias)
}
inline ::std::string* FriendInfo::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:micromsg.FriendInfo.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfo::release_alias() {
  // @@protoc_insertion_point(field_release:micromsg.FriendInfo.Alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FriendInfo.Alias)
}

// -------------------------------------------------------------------

// SearchFriendResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool SearchFriendResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchFriendResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchFriendResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchFriendResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& SearchFriendResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchFriendResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* SearchFriendResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SearchFriendResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* SearchFriendResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SearchFriendResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void SearchFriendResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SearchFriendResponse.BaseResponse)
}

// required uint32 FriendCount = 2;
inline bool SearchFriendResponse::has_friendcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchFriendResponse::set_has_friendcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchFriendResponse::clear_has_friendcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchFriendResponse::clear_friendcount() {
  friendcount_ = 0u;
  clear_has_friendcount();
}
inline ::google::protobuf::uint32 SearchFriendResponse::friendcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SearchFriendResponse.FriendCount)
  return friendcount_;
}
inline void SearchFriendResponse::set_friendcount(::google::protobuf::uint32 value) {
  set_has_friendcount();
  friendcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SearchFriendResponse.FriendCount)
}

// repeated .micromsg.FriendInfo FriendList = 3;
inline int SearchFriendResponse::friendlist_size() const {
  return friendlist_.size();
}
inline void SearchFriendResponse::clear_friendlist() {
  friendlist_.Clear();
}
inline const ::micromsg::FriendInfo& SearchFriendResponse::friendlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SearchFriendResponse.FriendList)
  return friendlist_.Get(index);
}
inline ::micromsg::FriendInfo* SearchFriendResponse::mutable_friendlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SearchFriendResponse.FriendList)
  return friendlist_.Mutable(index);
}
inline ::micromsg::FriendInfo* SearchFriendResponse::add_friendlist() {
  // @@protoc_insertion_point(field_add:micromsg.SearchFriendResponse.FriendList)
  return friendlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::FriendInfo >*
SearchFriendResponse::mutable_friendlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SearchFriendResponse.FriendList)
  return &friendlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::FriendInfo >&
SearchFriendResponse::friendlist() const {
  // @@protoc_insertion_point(field_list:micromsg.SearchFriendResponse.FriendList)
  return friendlist_;
}

// -------------------------------------------------------------------

// GetChatRoomUpgradeInfoReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GetChatRoomUpgradeInfoReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetChatRoomUpgradeInfoReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetChatRoomUpgradeInfoReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetChatRoomUpgradeInfoReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GetChatRoomUpgradeInfoReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeInfoReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GetChatRoomUpgradeInfoReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomUpgradeInfoReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GetChatRoomUpgradeInfoReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomUpgradeInfoReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GetChatRoomUpgradeInfoReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomUpgradeInfoReq.BaseRequest)
}

// optional string ChatRoomName = 2;
inline bool GetChatRoomUpgradeInfoReq::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetChatRoomUpgradeInfoReq::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetChatRoomUpgradeInfoReq::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetChatRoomUpgradeInfoReq::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
inline const ::std::string& GetChatRoomUpgradeInfoReq::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeInfoReq.ChatRoomName)
  return chatroomname_.GetNoArena();
}
inline void GetChatRoomUpgradeInfoReq::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeInfoReq.ChatRoomName)
}
#if LANG_CXX11
inline void GetChatRoomUpgradeInfoReq::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomUpgradeInfoReq.ChatRoomName)
}
#endif
inline void GetChatRoomUpgradeInfoReq::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomUpgradeInfoReq.ChatRoomName)
}
inline void GetChatRoomUpgradeInfoReq::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomUpgradeInfoReq.ChatRoomName)
}
inline ::std::string* GetChatRoomUpgradeInfoReq::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomUpgradeInfoReq.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatRoomUpgradeInfoReq::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomUpgradeInfoReq.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatRoomUpgradeInfoReq::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomUpgradeInfoReq.ChatRoomName)
}

// optional uint32 Scene = 3;
inline bool GetChatRoomUpgradeInfoReq::has_scene() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetChatRoomUpgradeInfoReq::set_has_scene() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetChatRoomUpgradeInfoReq::clear_has_scene() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetChatRoomUpgradeInfoReq::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
inline ::google::protobuf::uint32 GetChatRoomUpgradeInfoReq::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeInfoReq.Scene)
  return scene_;
}
inline void GetChatRoomUpgradeInfoReq::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeInfoReq.Scene)
}

// -------------------------------------------------------------------

// GetChatRoomUpgradeInfoResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GetChatRoomUpgradeInfoResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetChatRoomUpgradeInfoResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetChatRoomUpgradeInfoResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetChatRoomUpgradeInfoResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GetChatRoomUpgradeInfoResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeInfoResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GetChatRoomUpgradeInfoResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomUpgradeInfoResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GetChatRoomUpgradeInfoResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomUpgradeInfoResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GetChatRoomUpgradeInfoResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomUpgradeInfoResp.BaseResponse)
}

// optional string ChatRoomUpgradeInfo = 2;
inline bool GetChatRoomUpgradeInfoResp::has_chatroomupgradeinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetChatRoomUpgradeInfoResp::set_has_chatroomupgradeinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetChatRoomUpgradeInfoResp::clear_has_chatroomupgradeinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetChatRoomUpgradeInfoResp::clear_chatroomupgradeinfo() {
  chatroomupgradeinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomupgradeinfo();
}
inline const ::std::string& GetChatRoomUpgradeInfoResp::chatroomupgradeinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeInfoResp.ChatRoomUpgradeInfo)
  return chatroomupgradeinfo_.GetNoArena();
}
inline void GetChatRoomUpgradeInfoResp::set_chatroomupgradeinfo(const ::std::string& value) {
  set_has_chatroomupgradeinfo();
  chatroomupgradeinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeInfoResp.ChatRoomUpgradeInfo)
}
#if LANG_CXX11
inline void GetChatRoomUpgradeInfoResp::set_chatroomupgradeinfo(::std::string&& value) {
  set_has_chatroomupgradeinfo();
  chatroomupgradeinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomUpgradeInfoResp.ChatRoomUpgradeInfo)
}
#endif
inline void GetChatRoomUpgradeInfoResp::set_chatroomupgradeinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomupgradeinfo();
  chatroomupgradeinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomUpgradeInfoResp.ChatRoomUpgradeInfo)
}
inline void GetChatRoomUpgradeInfoResp::set_chatroomupgradeinfo(const char* value, size_t size) {
  set_has_chatroomupgradeinfo();
  chatroomupgradeinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomUpgradeInfoResp.ChatRoomUpgradeInfo)
}
inline ::std::string* GetChatRoomUpgradeInfoResp::mutable_chatroomupgradeinfo() {
  set_has_chatroomupgradeinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomUpgradeInfoResp.ChatRoomUpgradeInfo)
  return chatroomupgradeinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatRoomUpgradeInfoResp::release_chatroomupgradeinfo() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomUpgradeInfoResp.ChatRoomUpgradeInfo)
  clear_has_chatroomupgradeinfo();
  return chatroomupgradeinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatRoomUpgradeInfoResp::set_allocated_chatroomupgradeinfo(::std::string* chatroomupgradeinfo) {
  if (chatroomupgradeinfo != NULL) {
    set_has_chatroomupgradeinfo();
  } else {
    clear_has_chatroomupgradeinfo();
  }
  chatroomupgradeinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomupgradeinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomUpgradeInfoResp.ChatRoomUpgradeInfo)
}

// -------------------------------------------------------------------

// KeyValStr

// required uint32 Key = 1;
inline bool KeyValStr::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyValStr::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeyValStr::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeyValStr::clear_key() {
  key_ = 0u;
  clear_has_key();
}
inline ::google::protobuf::uint32 KeyValStr::key() const {
  // @@protoc_insertion_point(field_get:micromsg.KeyValStr.Key)
  return key_;
}
inline void KeyValStr::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:micromsg.KeyValStr.Key)
}

// optional string Val = 2;
inline bool KeyValStr::has_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyValStr::set_has_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyValStr::clear_has_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyValStr::clear_val() {
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_val();
}
inline const ::std::string& KeyValStr::val() const {
  // @@protoc_insertion_point(field_get:micromsg.KeyValStr.Val)
  return val_.GetNoArena();
}
inline void KeyValStr::set_val(const ::std::string& value) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.KeyValStr.Val)
}
#if LANG_CXX11
inline void KeyValStr::set_val(::std::string&& value) {
  set_has_val();
  val_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.KeyValStr.Val)
}
#endif
inline void KeyValStr::set_val(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.KeyValStr.Val)
}
inline void KeyValStr::set_val(const char* value, size_t size) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.KeyValStr.Val)
}
inline ::std::string* KeyValStr::mutable_val() {
  set_has_val();
  // @@protoc_insertion_point(field_mutable:micromsg.KeyValStr.Val)
  return val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyValStr::release_val() {
  // @@protoc_insertion_point(field_release:micromsg.KeyValStr.Val)
  clear_has_val();
  return val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValStr::set_allocated_val(::std::string* val) {
  if (val != NULL) {
    set_has_val();
  } else {
    clear_has_val();
  }
  val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:micromsg.KeyValStr.Val)
}

// -------------------------------------------------------------------

// GetDonateInfoReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GetDonateInfoReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetDonateInfoReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetDonateInfoReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetDonateInfoReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GetDonateInfoReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetDonateInfoReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GetDonateInfoReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetDonateInfoReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GetDonateInfoReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetDonateInfoReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GetDonateInfoReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetDonateInfoReq.BaseRequest)
}

// required uint32 Type = 2;
inline bool GetDonateInfoReq::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetDonateInfoReq::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetDonateInfoReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetDonateInfoReq::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 GetDonateInfoReq::type() const {
  // @@protoc_insertion_point(field_get:micromsg.GetDonateInfoReq.Type)
  return type_;
}
inline void GetDonateInfoReq::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetDonateInfoReq.Type)
}

// required uint32 Scene = 3;
inline bool GetDonateInfoReq::has_scene() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetDonateInfoReq::set_has_scene() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetDonateInfoReq::clear_has_scene() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetDonateInfoReq::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
inline ::google::protobuf::uint32 GetDonateInfoReq::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.GetDonateInfoReq.Scene)
  return scene_;
}
inline void GetDonateInfoReq::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetDonateInfoReq.Scene)
}

// optional string ExtInfo = 4;
inline bool GetDonateInfoReq::has_extinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetDonateInfoReq::set_has_extinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetDonateInfoReq::clear_has_extinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetDonateInfoReq::clear_extinfo() {
  extinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extinfo();
}
inline const ::std::string& GetDonateInfoReq::extinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.GetDonateInfoReq.ExtInfo)
  return extinfo_.GetNoArena();
}
inline void GetDonateInfoReq::set_extinfo(const ::std::string& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetDonateInfoReq.ExtInfo)
}
#if LANG_CXX11
inline void GetDonateInfoReq::set_extinfo(::std::string&& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetDonateInfoReq.ExtInfo)
}
#endif
inline void GetDonateInfoReq::set_extinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetDonateInfoReq.ExtInfo)
}
inline void GetDonateInfoReq::set_extinfo(const char* value, size_t size) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetDonateInfoReq.ExtInfo)
}
inline ::std::string* GetDonateInfoReq::mutable_extinfo() {
  set_has_extinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.GetDonateInfoReq.ExtInfo)
  return extinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDonateInfoReq::release_extinfo() {
  // @@protoc_insertion_point(field_release:micromsg.GetDonateInfoReq.ExtInfo)
  clear_has_extinfo();
  return extinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDonateInfoReq::set_allocated_extinfo(::std::string* extinfo) {
  if (extinfo != NULL) {
    set_has_extinfo();
  } else {
    clear_has_extinfo();
  }
  extinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetDonateInfoReq.ExtInfo)
}

// -------------------------------------------------------------------

// GetDonateInfoResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GetDonateInfoResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetDonateInfoResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetDonateInfoResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetDonateInfoResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GetDonateInfoResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetDonateInfoResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GetDonateInfoResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetDonateInfoResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GetDonateInfoResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetDonateInfoResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GetDonateInfoResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetDonateInfoResp.BaseResponse)
}

// optional string DonateInfo = 3;
inline bool GetDonateInfoResp::has_donateinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetDonateInfoResp::set_has_donateinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetDonateInfoResp::clear_has_donateinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetDonateInfoResp::clear_donateinfo() {
  donateinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_donateinfo();
}
inline const ::std::string& GetDonateInfoResp::donateinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.GetDonateInfoResp.DonateInfo)
  return donateinfo_.GetNoArena();
}
inline void GetDonateInfoResp::set_donateinfo(const ::std::string& value) {
  set_has_donateinfo();
  donateinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetDonateInfoResp.DonateInfo)
}
#if LANG_CXX11
inline void GetDonateInfoResp::set_donateinfo(::std::string&& value) {
  set_has_donateinfo();
  donateinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetDonateInfoResp.DonateInfo)
}
#endif
inline void GetDonateInfoResp::set_donateinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_donateinfo();
  donateinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetDonateInfoResp.DonateInfo)
}
inline void GetDonateInfoResp::set_donateinfo(const char* value, size_t size) {
  set_has_donateinfo();
  donateinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetDonateInfoResp.DonateInfo)
}
inline ::std::string* GetDonateInfoResp::mutable_donateinfo() {
  set_has_donateinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.GetDonateInfoResp.DonateInfo)
  return donateinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDonateInfoResp::release_donateinfo() {
  // @@protoc_insertion_point(field_release:micromsg.GetDonateInfoResp.DonateInfo)
  clear_has_donateinfo();
  return donateinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDonateInfoResp::set_allocated_donateinfo(::std::string* donateinfo) {
  if (donateinfo != NULL) {
    set_has_donateinfo();
  } else {
    clear_has_donateinfo();
  }
  donateinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), donateinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetDonateInfoResp.DonateInfo)
}

// -------------------------------------------------------------------

// GetPayPurchasePackageReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GetPayPurchasePackageReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetPayPurchasePackageReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetPayPurchasePackageReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetPayPurchasePackageReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GetPayPurchasePackageReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPayPurchasePackageReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GetPayPurchasePackageReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetPayPurchasePackageReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GetPayPurchasePackageReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetPayPurchasePackageReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GetPayPurchasePackageReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPayPurchasePackageReq.BaseRequest)
}

// required uint32 Type = 2;
inline bool GetPayPurchasePackageReq::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetPayPurchasePackageReq::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetPayPurchasePackageReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetPayPurchasePackageReq::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 GetPayPurchasePackageReq::type() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPayPurchasePackageReq.Type)
  return type_;
}
inline void GetPayPurchasePackageReq::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetPayPurchasePackageReq.Type)
}

// required uint32 Price = 3;
inline bool GetPayPurchasePackageReq::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetPayPurchasePackageReq::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetPayPurchasePackageReq::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetPayPurchasePackageReq::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 GetPayPurchasePackageReq::price() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPayPurchasePackageReq.Price)
  return price_;
}
inline void GetPayPurchasePackageReq::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetPayPurchasePackageReq.Price)
}

// optional string PriceType = 4;
inline bool GetPayPurchasePackageReq::has_pricetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPayPurchasePackageReq::set_has_pricetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPayPurchasePackageReq::clear_has_pricetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPayPurchasePackageReq::clear_pricetype() {
  pricetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pricetype();
}
inline const ::std::string& GetPayPurchasePackageReq::pricetype() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPayPurchasePackageReq.PriceType)
  return pricetype_.GetNoArena();
}
inline void GetPayPurchasePackageReq::set_pricetype(const ::std::string& value) {
  set_has_pricetype();
  pricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetPayPurchasePackageReq.PriceType)
}
#if LANG_CXX11
inline void GetPayPurchasePackageReq::set_pricetype(::std::string&& value) {
  set_has_pricetype();
  pricetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetPayPurchasePackageReq.PriceType)
}
#endif
inline void GetPayPurchasePackageReq::set_pricetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pricetype();
  pricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetPayPurchasePackageReq.PriceType)
}
inline void GetPayPurchasePackageReq::set_pricetype(const char* value, size_t size) {
  set_has_pricetype();
  pricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetPayPurchasePackageReq.PriceType)
}
inline ::std::string* GetPayPurchasePackageReq::mutable_pricetype() {
  set_has_pricetype();
  // @@protoc_insertion_point(field_mutable:micromsg.GetPayPurchasePackageReq.PriceType)
  return pricetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPayPurchasePackageReq::release_pricetype() {
  // @@protoc_insertion_point(field_release:micromsg.GetPayPurchasePackageReq.PriceType)
  clear_has_pricetype();
  return pricetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPayPurchasePackageReq::set_allocated_pricetype(::std::string* pricetype) {
  if (pricetype != NULL) {
    set_has_pricetype();
  } else {
    clear_has_pricetype();
  }
  pricetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pricetype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPayPurchasePackageReq.PriceType)
}

// optional string ExtInfo = 5;
inline bool GetPayPurchasePackageReq::has_extinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPayPurchasePackageReq::set_has_extinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPayPurchasePackageReq::clear_has_extinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPayPurchasePackageReq::clear_extinfo() {
  extinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extinfo();
}
inline const ::std::string& GetPayPurchasePackageReq::extinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPayPurchasePackageReq.ExtInfo)
  return extinfo_.GetNoArena();
}
inline void GetPayPurchasePackageReq::set_extinfo(const ::std::string& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetPayPurchasePackageReq.ExtInfo)
}
#if LANG_CXX11
inline void GetPayPurchasePackageReq::set_extinfo(::std::string&& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetPayPurchasePackageReq.ExtInfo)
}
#endif
inline void GetPayPurchasePackageReq::set_extinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetPayPurchasePackageReq.ExtInfo)
}
inline void GetPayPurchasePackageReq::set_extinfo(const char* value, size_t size) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetPayPurchasePackageReq.ExtInfo)
}
inline ::std::string* GetPayPurchasePackageReq::mutable_extinfo() {
  set_has_extinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.GetPayPurchasePackageReq.ExtInfo)
  return extinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPayPurchasePackageReq::release_extinfo() {
  // @@protoc_insertion_point(field_release:micromsg.GetPayPurchasePackageReq.ExtInfo)
  clear_has_extinfo();
  return extinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPayPurchasePackageReq::set_allocated_extinfo(::std::string* extinfo) {
  if (extinfo != NULL) {
    set_has_extinfo();
  } else {
    clear_has_extinfo();
  }
  extinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPayPurchasePackageReq.ExtInfo)
}

// -------------------------------------------------------------------

// GetPayPurchasePackageResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GetPayPurchasePackageResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetPayPurchasePackageResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetPayPurchasePackageResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetPayPurchasePackageResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GetPayPurchasePackageResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPayPurchasePackageResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GetPayPurchasePackageResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetPayPurchasePackageResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GetPayPurchasePackageResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetPayPurchasePackageResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GetPayPurchasePackageResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPayPurchasePackageResp.BaseResponse)
}

// optional string Package = 2;
inline bool GetPayPurchasePackageResp::has_package() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPayPurchasePackageResp::set_has_package() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPayPurchasePackageResp::clear_has_package() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPayPurchasePackageResp::clear_package() {
  package_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_package();
}
inline const ::std::string& GetPayPurchasePackageResp::package() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPayPurchasePackageResp.Package)
  return package_.GetNoArena();
}
inline void GetPayPurchasePackageResp::set_package(const ::std::string& value) {
  set_has_package();
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetPayPurchasePackageResp.Package)
}
#if LANG_CXX11
inline void GetPayPurchasePackageResp::set_package(::std::string&& value) {
  set_has_package();
  package_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetPayPurchasePackageResp.Package)
}
#endif
inline void GetPayPurchasePackageResp::set_package(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_package();
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetPayPurchasePackageResp.Package)
}
inline void GetPayPurchasePackageResp::set_package(const char* value, size_t size) {
  set_has_package();
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetPayPurchasePackageResp.Package)
}
inline ::std::string* GetPayPurchasePackageResp::mutable_package() {
  set_has_package();
  // @@protoc_insertion_point(field_mutable:micromsg.GetPayPurchasePackageResp.Package)
  return package_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPayPurchasePackageResp::release_package() {
  // @@protoc_insertion_point(field_release:micromsg.GetPayPurchasePackageResp.Package)
  clear_has_package();
  return package_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPayPurchasePackageResp::set_allocated_package(::std::string* package) {
  if (package != NULL) {
    set_has_package();
  } else {
    clear_has_package();
  }
  package_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPayPurchasePackageResp.Package)
}

// optional string ExtInfo = 3;
inline bool GetPayPurchasePackageResp::has_extinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPayPurchasePackageResp::set_has_extinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPayPurchasePackageResp::clear_has_extinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPayPurchasePackageResp::clear_extinfo() {
  extinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extinfo();
}
inline const ::std::string& GetPayPurchasePackageResp::extinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPayPurchasePackageResp.ExtInfo)
  return extinfo_.GetNoArena();
}
inline void GetPayPurchasePackageResp::set_extinfo(const ::std::string& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetPayPurchasePackageResp.ExtInfo)
}
#if LANG_CXX11
inline void GetPayPurchasePackageResp::set_extinfo(::std::string&& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetPayPurchasePackageResp.ExtInfo)
}
#endif
inline void GetPayPurchasePackageResp::set_extinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetPayPurchasePackageResp.ExtInfo)
}
inline void GetPayPurchasePackageResp::set_extinfo(const char* value, size_t size) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetPayPurchasePackageResp.ExtInfo)
}
inline ::std::string* GetPayPurchasePackageResp::mutable_extinfo() {
  set_has_extinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.GetPayPurchasePackageResp.ExtInfo)
  return extinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPayPurchasePackageResp::release_extinfo() {
  // @@protoc_insertion_point(field_release:micromsg.GetPayPurchasePackageResp.ExtInfo)
  clear_has_extinfo();
  return extinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPayPurchasePackageResp::set_allocated_extinfo(::std::string* extinfo) {
  if (extinfo != NULL) {
    set_has_extinfo();
  } else {
    clear_has_extinfo();
  }
  extinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPayPurchasePackageResp.ExtInfo)
}

// -------------------------------------------------------------------

// VerifyPayTransitionReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool VerifyPayTransitionReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VerifyPayTransitionReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VerifyPayTransitionReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VerifyPayTransitionReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& VerifyPayTransitionReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPayTransitionReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* VerifyPayTransitionReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPayTransitionReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* VerifyPayTransitionReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPayTransitionReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void VerifyPayTransitionReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPayTransitionReq.BaseRequest)
}

// required uint32 Type = 2;
inline bool VerifyPayTransitionReq::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VerifyPayTransitionReq::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VerifyPayTransitionReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VerifyPayTransitionReq::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 VerifyPayTransitionReq::type() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPayTransitionReq.Type)
  return type_;
}
inline void VerifyPayTransitionReq::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VerifyPayTransitionReq.Type)
}

// optional string OutTradeNo = 3;
inline bool VerifyPayTransitionReq::has_outtradeno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyPayTransitionReq::set_has_outtradeno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyPayTransitionReq::clear_has_outtradeno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyPayTransitionReq::clear_outtradeno() {
  outtradeno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_outtradeno();
}
inline const ::std::string& VerifyPayTransitionReq::outtradeno() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPayTransitionReq.OutTradeNo)
  return outtradeno_.GetNoArena();
}
inline void VerifyPayTransitionReq::set_outtradeno(const ::std::string& value) {
  set_has_outtradeno();
  outtradeno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyPayTransitionReq.OutTradeNo)
}
#if LANG_CXX11
inline void VerifyPayTransitionReq::set_outtradeno(::std::string&& value) {
  set_has_outtradeno();
  outtradeno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyPayTransitionReq.OutTradeNo)
}
#endif
inline void VerifyPayTransitionReq::set_outtradeno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_outtradeno();
  outtradeno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyPayTransitionReq.OutTradeNo)
}
inline void VerifyPayTransitionReq::set_outtradeno(const char* value, size_t size) {
  set_has_outtradeno();
  outtradeno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyPayTransitionReq.OutTradeNo)
}
inline ::std::string* VerifyPayTransitionReq::mutable_outtradeno() {
  set_has_outtradeno();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPayTransitionReq.OutTradeNo)
  return outtradeno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyPayTransitionReq::release_outtradeno() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPayTransitionReq.OutTradeNo)
  clear_has_outtradeno();
  return outtradeno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyPayTransitionReq::set_allocated_outtradeno(::std::string* outtradeno) {
  if (outtradeno != NULL) {
    set_has_outtradeno();
  } else {
    clear_has_outtradeno();
  }
  outtradeno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), outtradeno);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPayTransitionReq.OutTradeNo)
}

// optional string ExtInfo = 4;
inline bool VerifyPayTransitionReq::has_extinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyPayTransitionReq::set_has_extinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyPayTransitionReq::clear_has_extinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyPayTransitionReq::clear_extinfo() {
  extinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extinfo();
}
inline const ::std::string& VerifyPayTransitionReq::extinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPayTransitionReq.ExtInfo)
  return extinfo_.GetNoArena();
}
inline void VerifyPayTransitionReq::set_extinfo(const ::std::string& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyPayTransitionReq.ExtInfo)
}
#if LANG_CXX11
inline void VerifyPayTransitionReq::set_extinfo(::std::string&& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyPayTransitionReq.ExtInfo)
}
#endif
inline void VerifyPayTransitionReq::set_extinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyPayTransitionReq.ExtInfo)
}
inline void VerifyPayTransitionReq::set_extinfo(const char* value, size_t size) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyPayTransitionReq.ExtInfo)
}
inline ::std::string* VerifyPayTransitionReq::mutable_extinfo() {
  set_has_extinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPayTransitionReq.ExtInfo)
  return extinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyPayTransitionReq::release_extinfo() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPayTransitionReq.ExtInfo)
  clear_has_extinfo();
  return extinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyPayTransitionReq::set_allocated_extinfo(::std::string* extinfo) {
  if (extinfo != NULL) {
    set_has_extinfo();
  } else {
    clear_has_extinfo();
  }
  extinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPayTransitionReq.ExtInfo)
}

// -------------------------------------------------------------------

// VerifyPayTransitionResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool VerifyPayTransitionResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyPayTransitionResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyPayTransitionResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyPayTransitionResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& VerifyPayTransitionResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPayTransitionResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* VerifyPayTransitionResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPayTransitionResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* VerifyPayTransitionResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPayTransitionResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void VerifyPayTransitionResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPayTransitionResp.BaseResponse)
}

// optional string ResultMsg = 2;
inline bool VerifyPayTransitionResp::has_resultmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyPayTransitionResp::set_has_resultmsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyPayTransitionResp::clear_has_resultmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyPayTransitionResp::clear_resultmsg() {
  resultmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resultmsg();
}
inline const ::std::string& VerifyPayTransitionResp::resultmsg() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPayTransitionResp.ResultMsg)
  return resultmsg_.GetNoArena();
}
inline void VerifyPayTransitionResp::set_resultmsg(const ::std::string& value) {
  set_has_resultmsg();
  resultmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyPayTransitionResp.ResultMsg)
}
#if LANG_CXX11
inline void VerifyPayTransitionResp::set_resultmsg(::std::string&& value) {
  set_has_resultmsg();
  resultmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyPayTransitionResp.ResultMsg)
}
#endif
inline void VerifyPayTransitionResp::set_resultmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_resultmsg();
  resultmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyPayTransitionResp.ResultMsg)
}
inline void VerifyPayTransitionResp::set_resultmsg(const char* value, size_t size) {
  set_has_resultmsg();
  resultmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyPayTransitionResp.ResultMsg)
}
inline ::std::string* VerifyPayTransitionResp::mutable_resultmsg() {
  set_has_resultmsg();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPayTransitionResp.ResultMsg)
  return resultmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyPayTransitionResp::release_resultmsg() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPayTransitionResp.ResultMsg)
  clear_has_resultmsg();
  return resultmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyPayTransitionResp::set_allocated_resultmsg(::std::string* resultmsg) {
  if (resultmsg != NULL) {
    set_has_resultmsg();
  } else {
    clear_has_resultmsg();
  }
  resultmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resultmsg);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPayTransitionResp.ResultMsg)
}

// -------------------------------------------------------------------

// GetChatRoomDonateHistoryReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GetChatRoomDonateHistoryReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetChatRoomDonateHistoryReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetChatRoomDonateHistoryReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetChatRoomDonateHistoryReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GetChatRoomDonateHistoryReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomDonateHistoryReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GetChatRoomDonateHistoryReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomDonateHistoryReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GetChatRoomDonateHistoryReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomDonateHistoryReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GetChatRoomDonateHistoryReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomDonateHistoryReq.BaseRequest)
}

// optional string ChatRoomName = 2;
inline bool GetChatRoomDonateHistoryReq::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetChatRoomDonateHistoryReq::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetChatRoomDonateHistoryReq::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetChatRoomDonateHistoryReq::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
inline const ::std::string& GetChatRoomDonateHistoryReq::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomDonateHistoryReq.ChatRoomName)
  return chatroomname_.GetNoArena();
}
inline void GetChatRoomDonateHistoryReq::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomDonateHistoryReq.ChatRoomName)
}
#if LANG_CXX11
inline void GetChatRoomDonateHistoryReq::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomDonateHistoryReq.ChatRoomName)
}
#endif
inline void GetChatRoomDonateHistoryReq::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomDonateHistoryReq.ChatRoomName)
}
inline void GetChatRoomDonateHistoryReq::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomDonateHistoryReq.ChatRoomName)
}
inline ::std::string* GetChatRoomDonateHistoryReq::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomDonateHistoryReq.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatRoomDonateHistoryReq::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomDonateHistoryReq.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatRoomDonateHistoryReq::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomDonateHistoryReq.ChatRoomName)
}

// -------------------------------------------------------------------

// Donor

// required uint32 Time = 1;
inline bool Donor::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Donor::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Donor::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Donor::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 Donor::time() const {
  // @@protoc_insertion_point(field_get:micromsg.Donor.Time)
  return time_;
}
inline void Donor::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:micromsg.Donor.Time)
}

// optional string UserName = 2;
inline bool Donor::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Donor::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Donor::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Donor::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& Donor::username() const {
  // @@protoc_insertion_point(field_get:micromsg.Donor.UserName)
  return username_.GetNoArena();
}
inline void Donor::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.Donor.UserName)
}
#if LANG_CXX11
inline void Donor::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.Donor.UserName)
}
#endif
inline void Donor::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.Donor.UserName)
}
inline void Donor::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.Donor.UserName)
}
inline ::std::string* Donor::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.Donor.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Donor::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.Donor.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Donor::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.Donor.UserName)
}

// optional string NickName = 3;
inline bool Donor::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Donor::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Donor::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Donor::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& Donor::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.Donor.NickName)
  return nickname_.GetNoArena();
}
inline void Donor::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.Donor.NickName)
}
#if LANG_CXX11
inline void Donor::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.Donor.NickName)
}
#endif
inline void Donor::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.Donor.NickName)
}
inline void Donor::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.Donor.NickName)
}
inline ::std::string* Donor::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.Donor.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Donor::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.Donor.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Donor::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.Donor.NickName)
}

// optional string DonateTitle = 4;
inline bool Donor::has_donatetitle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Donor::set_has_donatetitle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Donor::clear_has_donatetitle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Donor::clear_donatetitle() {
  donatetitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_donatetitle();
}
inline const ::std::string& Donor::donatetitle() const {
  // @@protoc_insertion_point(field_get:micromsg.Donor.DonateTitle)
  return donatetitle_.GetNoArena();
}
inline void Donor::set_donatetitle(const ::std::string& value) {
  set_has_donatetitle();
  donatetitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.Donor.DonateTitle)
}
#if LANG_CXX11
inline void Donor::set_donatetitle(::std::string&& value) {
  set_has_donatetitle();
  donatetitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.Donor.DonateTitle)
}
#endif
inline void Donor::set_donatetitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_donatetitle();
  donatetitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.Donor.DonateTitle)
}
inline void Donor::set_donatetitle(const char* value, size_t size) {
  set_has_donatetitle();
  donatetitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.Donor.DonateTitle)
}
inline ::std::string* Donor::mutable_donatetitle() {
  set_has_donatetitle();
  // @@protoc_insertion_point(field_mutable:micromsg.Donor.DonateTitle)
  return donatetitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Donor::release_donatetitle() {
  // @@protoc_insertion_point(field_release:micromsg.Donor.DonateTitle)
  clear_has_donatetitle();
  return donatetitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Donor::set_allocated_donatetitle(::std::string* donatetitle) {
  if (donatetitle != NULL) {
    set_has_donatetitle();
  } else {
    clear_has_donatetitle();
  }
  donatetitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), donatetitle);
  // @@protoc_insertion_point(field_set_allocated:micromsg.Donor.DonateTitle)
}

// optional string DonateUrl = 5;
inline bool Donor::has_donateurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Donor::set_has_donateurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Donor::clear_has_donateurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Donor::clear_donateurl() {
  donateurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_donateurl();
}
inline const ::std::string& Donor::donateurl() const {
  // @@protoc_insertion_point(field_get:micromsg.Donor.DonateUrl)
  return donateurl_.GetNoArena();
}
inline void Donor::set_donateurl(const ::std::string& value) {
  set_has_donateurl();
  donateurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.Donor.DonateUrl)
}
#if LANG_CXX11
inline void Donor::set_donateurl(::std::string&& value) {
  set_has_donateurl();
  donateurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.Donor.DonateUrl)
}
#endif
inline void Donor::set_donateurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_donateurl();
  donateurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.Donor.DonateUrl)
}
inline void Donor::set_donateurl(const char* value, size_t size) {
  set_has_donateurl();
  donateurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.Donor.DonateUrl)
}
inline ::std::string* Donor::mutable_donateurl() {
  set_has_donateurl();
  // @@protoc_insertion_point(field_mutable:micromsg.Donor.DonateUrl)
  return donateurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Donor::release_donateurl() {
  // @@protoc_insertion_point(field_release:micromsg.Donor.DonateUrl)
  clear_has_donateurl();
  return donateurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Donor::set_allocated_donateurl(::std::string* donateurl) {
  if (donateurl != NULL) {
    set_has_donateurl();
  } else {
    clear_has_donateurl();
  }
  donateurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), donateurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.Donor.DonateUrl)
}

// -------------------------------------------------------------------

// GetChatRoomDonateHistoryResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GetChatRoomDonateHistoryResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetChatRoomDonateHistoryResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetChatRoomDonateHistoryResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetChatRoomDonateHistoryResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GetChatRoomDonateHistoryResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomDonateHistoryResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GetChatRoomDonateHistoryResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomDonateHistoryResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GetChatRoomDonateHistoryResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomDonateHistoryResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GetChatRoomDonateHistoryResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomDonateHistoryResp.BaseResponse)
}

// required uint32 TotalCount = 2;
inline bool GetChatRoomDonateHistoryResp::has_totalcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetChatRoomDonateHistoryResp::set_has_totalcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetChatRoomDonateHistoryResp::clear_has_totalcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetChatRoomDonateHistoryResp::clear_totalcount() {
  totalcount_ = 0u;
  clear_has_totalcount();
}
inline ::google::protobuf::uint32 GetChatRoomDonateHistoryResp::totalcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomDonateHistoryResp.TotalCount)
  return totalcount_;
}
inline void GetChatRoomDonateHistoryResp::set_totalcount(::google::protobuf::uint32 value) {
  set_has_totalcount();
  totalcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomDonateHistoryResp.TotalCount)
}

// repeated .micromsg.Donor List = 3;
inline int GetChatRoomDonateHistoryResp::list_size() const {
  return list_.size();
}
inline void GetChatRoomDonateHistoryResp::clear_list() {
  list_.Clear();
}
inline const ::micromsg::Donor& GetChatRoomDonateHistoryResp::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomDonateHistoryResp.List)
  return list_.Get(index);
}
inline ::micromsg::Donor* GetChatRoomDonateHistoryResp::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomDonateHistoryResp.List)
  return list_.Mutable(index);
}
inline ::micromsg::Donor* GetChatRoomDonateHistoryResp::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.GetChatRoomDonateHistoryResp.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::Donor >*
GetChatRoomDonateHistoryResp::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetChatRoomDonateHistoryResp.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::Donor >&
GetChatRoomDonateHistoryResp::list() const {
  // @@protoc_insertion_point(field_list:micromsg.GetChatRoomDonateHistoryResp.List)
  return list_;
}

// -------------------------------------------------------------------

// GetChatRoomPresentHistoryReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GetChatRoomPresentHistoryReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetChatRoomPresentHistoryReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetChatRoomPresentHistoryReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetChatRoomPresentHistoryReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GetChatRoomPresentHistoryReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomPresentHistoryReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GetChatRoomPresentHistoryReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomPresentHistoryReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GetChatRoomPresentHistoryReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomPresentHistoryReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GetChatRoomPresentHistoryReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomPresentHistoryReq.BaseRequest)
}

// optional string ChatRoomName = 2;
inline bool GetChatRoomPresentHistoryReq::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetChatRoomPresentHistoryReq::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetChatRoomPresentHistoryReq::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetChatRoomPresentHistoryReq::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
inline const ::std::string& GetChatRoomPresentHistoryReq::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomPresentHistoryReq.ChatRoomName)
  return chatroomname_.GetNoArena();
}
inline void GetChatRoomPresentHistoryReq::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomPresentHistoryReq.ChatRoomName)
}
#if LANG_CXX11
inline void GetChatRoomPresentHistoryReq::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomPresentHistoryReq.ChatRoomName)
}
#endif
inline void GetChatRoomPresentHistoryReq::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomPresentHistoryReq.ChatRoomName)
}
inline void GetChatRoomPresentHistoryReq::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomPresentHistoryReq.ChatRoomName)
}
inline ::std::string* GetChatRoomPresentHistoryReq::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomPresentHistoryReq.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatRoomPresentHistoryReq::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomPresentHistoryReq.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatRoomPresentHistoryReq::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomPresentHistoryReq.ChatRoomName)
}

// -------------------------------------------------------------------

// Presentation

// required uint32 Time = 1;
inline bool Presentation::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Presentation::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Presentation::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Presentation::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 Presentation::time() const {
  // @@protoc_insertion_point(field_get:micromsg.Presentation.Time)
  return time_;
}
inline void Presentation::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:micromsg.Presentation.Time)
}

// optional string UserName = 2;
inline bool Presentation::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Presentation::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Presentation::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Presentation::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& Presentation::username() const {
  // @@protoc_insertion_point(field_get:micromsg.Presentation.UserName)
  return username_.GetNoArena();
}
inline void Presentation::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.Presentation.UserName)
}
#if LANG_CXX11
inline void Presentation::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.Presentation.UserName)
}
#endif
inline void Presentation::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.Presentation.UserName)
}
inline void Presentation::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.Presentation.UserName)
}
inline ::std::string* Presentation::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.Presentation.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Presentation::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.Presentation.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Presentation::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.Presentation.UserName)
}

// optional string NickName = 3;
inline bool Presentation::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Presentation::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Presentation::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Presentation::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& Presentation::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.Presentation.NickName)
  return nickname_.GetNoArena();
}
inline void Presentation::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.Presentation.NickName)
}
#if LANG_CXX11
inline void Presentation::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.Presentation.NickName)
}
#endif
inline void Presentation::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.Presentation.NickName)
}
inline void Presentation::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.Presentation.NickName)
}
inline ::std::string* Presentation::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.Presentation.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Presentation::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.Presentation.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Presentation::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.Presentation.NickName)
}

// optional string Title = 4;
inline bool Presentation::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Presentation::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Presentation::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Presentation::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& Presentation::title() const {
  // @@protoc_insertion_point(field_get:micromsg.Presentation.Title)
  return title_.GetNoArena();
}
inline void Presentation::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.Presentation.Title)
}
#if LANG_CXX11
inline void Presentation::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.Presentation.Title)
}
#endif
inline void Presentation::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.Presentation.Title)
}
inline void Presentation::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.Presentation.Title)
}
inline ::std::string* Presentation::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:micromsg.Presentation.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Presentation::release_title() {
  // @@protoc_insertion_point(field_release:micromsg.Presentation.Title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Presentation::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:micromsg.Presentation.Title)
}

// required uint32 Price = 5;
inline bool Presentation::has_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Presentation::set_has_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Presentation::clear_has_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Presentation::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 Presentation::price() const {
  // @@protoc_insertion_point(field_get:micromsg.Presentation.Price)
  return price_;
}
inline void Presentation::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:micromsg.Presentation.Price)
}

// optional string WebUrl = 6;
inline bool Presentation::has_weburl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Presentation::set_has_weburl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Presentation::clear_has_weburl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Presentation::clear_weburl() {
  weburl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weburl();
}
inline const ::std::string& Presentation::weburl() const {
  // @@protoc_insertion_point(field_get:micromsg.Presentation.WebUrl)
  return weburl_.GetNoArena();
}
inline void Presentation::set_weburl(const ::std::string& value) {
  set_has_weburl();
  weburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.Presentation.WebUrl)
}
#if LANG_CXX11
inline void Presentation::set_weburl(::std::string&& value) {
  set_has_weburl();
  weburl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.Presentation.WebUrl)
}
#endif
inline void Presentation::set_weburl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weburl();
  weburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.Presentation.WebUrl)
}
inline void Presentation::set_weburl(const char* value, size_t size) {
  set_has_weburl();
  weburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.Presentation.WebUrl)
}
inline ::std::string* Presentation::mutable_weburl() {
  set_has_weburl();
  // @@protoc_insertion_point(field_mutable:micromsg.Presentation.WebUrl)
  return weburl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Presentation::release_weburl() {
  // @@protoc_insertion_point(field_release:micromsg.Presentation.WebUrl)
  clear_has_weburl();
  return weburl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Presentation::set_allocated_weburl(::std::string* weburl) {
  if (weburl != NULL) {
    set_has_weburl();
  } else {
    clear_has_weburl();
  }
  weburl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weburl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.Presentation.WebUrl)
}

// required uint32 Num = 7;
inline bool Presentation::has_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Presentation::set_has_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Presentation::clear_has_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Presentation::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 Presentation::num() const {
  // @@protoc_insertion_point(field_get:micromsg.Presentation.Num)
  return num_;
}
inline void Presentation::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:micromsg.Presentation.Num)
}

// -------------------------------------------------------------------

// GetChatRoomPresentHistoryResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GetChatRoomPresentHistoryResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetChatRoomPresentHistoryResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetChatRoomPresentHistoryResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetChatRoomPresentHistoryResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GetChatRoomPresentHistoryResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomPresentHistoryResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GetChatRoomPresentHistoryResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomPresentHistoryResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GetChatRoomPresentHistoryResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomPresentHistoryResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GetChatRoomPresentHistoryResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomPresentHistoryResp.BaseResponse)
}

// required uint32 TotalCount = 2;
inline bool GetChatRoomPresentHistoryResp::has_totalcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetChatRoomPresentHistoryResp::set_has_totalcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetChatRoomPresentHistoryResp::clear_has_totalcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetChatRoomPresentHistoryResp::clear_totalcount() {
  totalcount_ = 0u;
  clear_has_totalcount();
}
inline ::google::protobuf::uint32 GetChatRoomPresentHistoryResp::totalcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomPresentHistoryResp.TotalCount)
  return totalcount_;
}
inline void GetChatRoomPresentHistoryResp::set_totalcount(::google::protobuf::uint32 value) {
  set_has_totalcount();
  totalcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomPresentHistoryResp.TotalCount)
}

// repeated .micromsg.Presentation List = 3;
inline int GetChatRoomPresentHistoryResp::list_size() const {
  return list_.size();
}
inline void GetChatRoomPresentHistoryResp::clear_list() {
  list_.Clear();
}
inline const ::micromsg::Presentation& GetChatRoomPresentHistoryResp::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomPresentHistoryResp.List)
  return list_.Get(index);
}
inline ::micromsg::Presentation* GetChatRoomPresentHistoryResp::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomPresentHistoryResp.List)
  return list_.Mutable(index);
}
inline ::micromsg::Presentation* GetChatRoomPresentHistoryResp::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.GetChatRoomPresentHistoryResp.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::Presentation >*
GetChatRoomPresentHistoryResp::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetChatRoomPresentHistoryResp.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::Presentation >&
GetChatRoomPresentHistoryResp::list() const {
  // @@protoc_insertion_point(field_list:micromsg.GetChatRoomPresentHistoryResp.List)
  return list_;
}

// optional string Url = 4;
inline bool GetChatRoomPresentHistoryResp::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetChatRoomPresentHistoryResp::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetChatRoomPresentHistoryResp::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetChatRoomPresentHistoryResp::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& GetChatRoomPresentHistoryResp::url() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomPresentHistoryResp.Url)
  return url_.GetNoArena();
}
inline void GetChatRoomPresentHistoryResp::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomPresentHistoryResp.Url)
}
#if LANG_CXX11
inline void GetChatRoomPresentHistoryResp::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomPresentHistoryResp.Url)
}
#endif
inline void GetChatRoomPresentHistoryResp::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomPresentHistoryResp.Url)
}
inline void GetChatRoomPresentHistoryResp::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomPresentHistoryResp.Url)
}
inline ::std::string* GetChatRoomPresentHistoryResp::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomPresentHistoryResp.Url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatRoomPresentHistoryResp::release_url() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomPresentHistoryResp.Url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatRoomPresentHistoryResp::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomPresentHistoryResp.Url)
}

// required uint32 DonateStatus = 5;
inline bool GetChatRoomPresentHistoryResp::has_donatestatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetChatRoomPresentHistoryResp::set_has_donatestatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetChatRoomPresentHistoryResp::clear_has_donatestatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetChatRoomPresentHistoryResp::clear_donatestatus() {
  donatestatus_ = 0u;
  clear_has_donatestatus();
}
inline ::google::protobuf::uint32 GetChatRoomPresentHistoryResp::donatestatus() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomPresentHistoryResp.DonateStatus)
  return donatestatus_;
}
inline void GetChatRoomPresentHistoryResp::set_donatestatus(::google::protobuf::uint32 value) {
  set_has_donatestatus();
  donatestatus_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomPresentHistoryResp.DonateStatus)
}

// -------------------------------------------------------------------

// GetPersonalDonateHistoryReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GetPersonalDonateHistoryReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPersonalDonateHistoryReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPersonalDonateHistoryReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPersonalDonateHistoryReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GetPersonalDonateHistoryReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPersonalDonateHistoryReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GetPersonalDonateHistoryReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetPersonalDonateHistoryReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GetPersonalDonateHistoryReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetPersonalDonateHistoryReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GetPersonalDonateHistoryReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPersonalDonateHistoryReq.BaseRequest)
}

// -------------------------------------------------------------------

// DonateHistory

// required uint32 Time = 1;
inline bool DonateHistory::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DonateHistory::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DonateHistory::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DonateHistory::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 DonateHistory::time() const {
  // @@protoc_insertion_point(field_get:micromsg.DonateHistory.Time)
  return time_;
}
inline void DonateHistory::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DonateHistory.Time)
}

// optional string DonateTitle = 2;
inline bool DonateHistory::has_donatetitle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DonateHistory::set_has_donatetitle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DonateHistory::clear_has_donatetitle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DonateHistory::clear_donatetitle() {
  donatetitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_donatetitle();
}
inline const ::std::string& DonateHistory::donatetitle() const {
  // @@protoc_insertion_point(field_get:micromsg.DonateHistory.DonateTitle)
  return donatetitle_.GetNoArena();
}
inline void DonateHistory::set_donatetitle(const ::std::string& value) {
  set_has_donatetitle();
  donatetitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DonateHistory.DonateTitle)
}
#if LANG_CXX11
inline void DonateHistory::set_donatetitle(::std::string&& value) {
  set_has_donatetitle();
  donatetitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DonateHistory.DonateTitle)
}
#endif
inline void DonateHistory::set_donatetitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_donatetitle();
  donatetitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DonateHistory.DonateTitle)
}
inline void DonateHistory::set_donatetitle(const char* value, size_t size) {
  set_has_donatetitle();
  donatetitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DonateHistory.DonateTitle)
}
inline ::std::string* DonateHistory::mutable_donatetitle() {
  set_has_donatetitle();
  // @@protoc_insertion_point(field_mutable:micromsg.DonateHistory.DonateTitle)
  return donatetitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DonateHistory::release_donatetitle() {
  // @@protoc_insertion_point(field_release:micromsg.DonateHistory.DonateTitle)
  clear_has_donatetitle();
  return donatetitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DonateHistory::set_allocated_donatetitle(::std::string* donatetitle) {
  if (donatetitle != NULL) {
    set_has_donatetitle();
  } else {
    clear_has_donatetitle();
  }
  donatetitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), donatetitle);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DonateHistory.DonateTitle)
}

// optional string DonateUrl = 3;
inline bool DonateHistory::has_donateurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DonateHistory::set_has_donateurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DonateHistory::clear_has_donateurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DonateHistory::clear_donateurl() {
  donateurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_donateurl();
}
inline const ::std::string& DonateHistory::donateurl() const {
  // @@protoc_insertion_point(field_get:micromsg.DonateHistory.DonateUrl)
  return donateurl_.GetNoArena();
}
inline void DonateHistory::set_donateurl(const ::std::string& value) {
  set_has_donateurl();
  donateurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DonateHistory.DonateUrl)
}
#if LANG_CXX11
inline void DonateHistory::set_donateurl(::std::string&& value) {
  set_has_donateurl();
  donateurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DonateHistory.DonateUrl)
}
#endif
inline void DonateHistory::set_donateurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_donateurl();
  donateurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DonateHistory.DonateUrl)
}
inline void DonateHistory::set_donateurl(const char* value, size_t size) {
  set_has_donateurl();
  donateurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DonateHistory.DonateUrl)
}
inline ::std::string* DonateHistory::mutable_donateurl() {
  set_has_donateurl();
  // @@protoc_insertion_point(field_mutable:micromsg.DonateHistory.DonateUrl)
  return donateurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DonateHistory::release_donateurl() {
  // @@protoc_insertion_point(field_release:micromsg.DonateHistory.DonateUrl)
  clear_has_donateurl();
  return donateurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DonateHistory::set_allocated_donateurl(::std::string* donateurl) {
  if (donateurl != NULL) {
    set_has_donateurl();
  } else {
    clear_has_donateurl();
  }
  donateurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), donateurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DonateHistory.DonateUrl)
}

// required uint32 Price = 4;
inline bool DonateHistory::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DonateHistory::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DonateHistory::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DonateHistory::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 DonateHistory::price() const {
  // @@protoc_insertion_point(field_get:micromsg.DonateHistory.Price)
  return price_;
}
inline void DonateHistory::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DonateHistory.Price)
}

// optional string DonateThumbUrl = 5;
inline bool DonateHistory::has_donatethumburl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DonateHistory::set_has_donatethumburl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DonateHistory::clear_has_donatethumburl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DonateHistory::clear_donatethumburl() {
  donatethumburl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_donatethumburl();
}
inline const ::std::string& DonateHistory::donatethumburl() const {
  // @@protoc_insertion_point(field_get:micromsg.DonateHistory.DonateThumbUrl)
  return donatethumburl_.GetNoArena();
}
inline void DonateHistory::set_donatethumburl(const ::std::string& value) {
  set_has_donatethumburl();
  donatethumburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DonateHistory.DonateThumbUrl)
}
#if LANG_CXX11
inline void DonateHistory::set_donatethumburl(::std::string&& value) {
  set_has_donatethumburl();
  donatethumburl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DonateHistory.DonateThumbUrl)
}
#endif
inline void DonateHistory::set_donatethumburl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_donatethumburl();
  donatethumburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DonateHistory.DonateThumbUrl)
}
inline void DonateHistory::set_donatethumburl(const char* value, size_t size) {
  set_has_donatethumburl();
  donatethumburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DonateHistory.DonateThumbUrl)
}
inline ::std::string* DonateHistory::mutable_donatethumburl() {
  set_has_donatethumburl();
  // @@protoc_insertion_point(field_mutable:micromsg.DonateHistory.DonateThumbUrl)
  return donatethumburl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DonateHistory::release_donatethumburl() {
  // @@protoc_insertion_point(field_release:micromsg.DonateHistory.DonateThumbUrl)
  clear_has_donatethumburl();
  return donatethumburl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DonateHistory::set_allocated_donatethumburl(::std::string* donatethumburl) {
  if (donatethumburl != NULL) {
    set_has_donatethumburl();
  } else {
    clear_has_donatethumburl();
  }
  donatethumburl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), donatethumburl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DonateHistory.DonateThumbUrl)
}

// -------------------------------------------------------------------

// GetPersonalDonateHistoryResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GetPersonalDonateHistoryResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPersonalDonateHistoryResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPersonalDonateHistoryResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPersonalDonateHistoryResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GetPersonalDonateHistoryResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPersonalDonateHistoryResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GetPersonalDonateHistoryResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetPersonalDonateHistoryResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GetPersonalDonateHistoryResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetPersonalDonateHistoryResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GetPersonalDonateHistoryResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPersonalDonateHistoryResp.BaseResponse)
}

// required uint32 TotalAmount = 2;
inline bool GetPersonalDonateHistoryResp::has_totalamount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPersonalDonateHistoryResp::set_has_totalamount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPersonalDonateHistoryResp::clear_has_totalamount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPersonalDonateHistoryResp::clear_totalamount() {
  totalamount_ = 0u;
  clear_has_totalamount();
}
inline ::google::protobuf::uint32 GetPersonalDonateHistoryResp::totalamount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPersonalDonateHistoryResp.TotalAmount)
  return totalamount_;
}
inline void GetPersonalDonateHistoryResp::set_totalamount(::google::protobuf::uint32 value) {
  set_has_totalamount();
  totalamount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetPersonalDonateHistoryResp.TotalAmount)
}

// required uint32 TotalCount = 3;
inline bool GetPersonalDonateHistoryResp::has_totalcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetPersonalDonateHistoryResp::set_has_totalcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetPersonalDonateHistoryResp::clear_has_totalcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetPersonalDonateHistoryResp::clear_totalcount() {
  totalcount_ = 0u;
  clear_has_totalcount();
}
inline ::google::protobuf::uint32 GetPersonalDonateHistoryResp::totalcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPersonalDonateHistoryResp.TotalCount)
  return totalcount_;
}
inline void GetPersonalDonateHistoryResp::set_totalcount(::google::protobuf::uint32 value) {
  set_has_totalcount();
  totalcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetPersonalDonateHistoryResp.TotalCount)
}

// repeated .micromsg.DonateHistory List = 4;
inline int GetPersonalDonateHistoryResp::list_size() const {
  return list_.size();
}
inline void GetPersonalDonateHistoryResp::clear_list() {
  list_.Clear();
}
inline const ::micromsg::DonateHistory& GetPersonalDonateHistoryResp::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetPersonalDonateHistoryResp.List)
  return list_.Get(index);
}
inline ::micromsg::DonateHistory* GetPersonalDonateHistoryResp::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetPersonalDonateHistoryResp.List)
  return list_.Mutable(index);
}
inline ::micromsg::DonateHistory* GetPersonalDonateHistoryResp::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.GetPersonalDonateHistoryResp.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::DonateHistory >*
GetPersonalDonateHistoryResp::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetPersonalDonateHistoryResp.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::DonateHistory >&
GetPersonalDonateHistoryResp::list() const {
  // @@protoc_insertion_point(field_list:micromsg.GetPersonalDonateHistoryResp.List)
  return list_;
}

// -------------------------------------------------------------------

// VerifyPersonalInfoReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool VerifyPersonalInfoReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VerifyPersonalInfoReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VerifyPersonalInfoReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VerifyPersonalInfoReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& VerifyPersonalInfoReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPersonalInfoReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* VerifyPersonalInfoReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPersonalInfoReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* VerifyPersonalInfoReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPersonalInfoReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void VerifyPersonalInfoReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPersonalInfoReq.BaseRequest)
}

// optional string UserRealName = 2;
inline bool VerifyPersonalInfoReq::has_userrealname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyPersonalInfoReq::set_has_userrealname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyPersonalInfoReq::clear_has_userrealname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyPersonalInfoReq::clear_userrealname() {
  userrealname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userrealname();
}
inline const ::std::string& VerifyPersonalInfoReq::userrealname() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPersonalInfoReq.UserRealName)
  return userrealname_.GetNoArena();
}
inline void VerifyPersonalInfoReq::set_userrealname(const ::std::string& value) {
  set_has_userrealname();
  userrealname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyPersonalInfoReq.UserRealName)
}
#if LANG_CXX11
inline void VerifyPersonalInfoReq::set_userrealname(::std::string&& value) {
  set_has_userrealname();
  userrealname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyPersonalInfoReq.UserRealName)
}
#endif
inline void VerifyPersonalInfoReq::set_userrealname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userrealname();
  userrealname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyPersonalInfoReq.UserRealName)
}
inline void VerifyPersonalInfoReq::set_userrealname(const char* value, size_t size) {
  set_has_userrealname();
  userrealname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyPersonalInfoReq.UserRealName)
}
inline ::std::string* VerifyPersonalInfoReq::mutable_userrealname() {
  set_has_userrealname();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPersonalInfoReq.UserRealName)
  return userrealname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyPersonalInfoReq::release_userrealname() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPersonalInfoReq.UserRealName)
  clear_has_userrealname();
  return userrealname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyPersonalInfoReq::set_allocated_userrealname(::std::string* userrealname) {
  if (userrealname != NULL) {
    set_has_userrealname();
  } else {
    clear_has_userrealname();
  }
  userrealname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userrealname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPersonalInfoReq.UserRealName)
}

// required uint32 UserIDCardType = 3;
inline bool VerifyPersonalInfoReq::has_useridcardtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VerifyPersonalInfoReq::set_has_useridcardtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VerifyPersonalInfoReq::clear_has_useridcardtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VerifyPersonalInfoReq::clear_useridcardtype() {
  useridcardtype_ = 0u;
  clear_has_useridcardtype();
}
inline ::google::protobuf::uint32 VerifyPersonalInfoReq::useridcardtype() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPersonalInfoReq.UserIDCardType)
  return useridcardtype_;
}
inline void VerifyPersonalInfoReq::set_useridcardtype(::google::protobuf::uint32 value) {
  set_has_useridcardtype();
  useridcardtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VerifyPersonalInfoReq.UserIDCardType)
}

// optional string UserIDCardNum = 4;
inline bool VerifyPersonalInfoReq::has_useridcardnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyPersonalInfoReq::set_has_useridcardnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyPersonalInfoReq::clear_has_useridcardnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyPersonalInfoReq::clear_useridcardnum() {
  useridcardnum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_useridcardnum();
}
inline const ::std::string& VerifyPersonalInfoReq::useridcardnum() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPersonalInfoReq.UserIDCardNum)
  return useridcardnum_.GetNoArena();
}
inline void VerifyPersonalInfoReq::set_useridcardnum(const ::std::string& value) {
  set_has_useridcardnum();
  useridcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyPersonalInfoReq.UserIDCardNum)
}
#if LANG_CXX11
inline void VerifyPersonalInfoReq::set_useridcardnum(::std::string&& value) {
  set_has_useridcardnum();
  useridcardnum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyPersonalInfoReq.UserIDCardNum)
}
#endif
inline void VerifyPersonalInfoReq::set_useridcardnum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_useridcardnum();
  useridcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyPersonalInfoReq.UserIDCardNum)
}
inline void VerifyPersonalInfoReq::set_useridcardnum(const char* value, size_t size) {
  set_has_useridcardnum();
  useridcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyPersonalInfoReq.UserIDCardNum)
}
inline ::std::string* VerifyPersonalInfoReq::mutable_useridcardnum() {
  set_has_useridcardnum();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPersonalInfoReq.UserIDCardNum)
  return useridcardnum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyPersonalInfoReq::release_useridcardnum() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPersonalInfoReq.UserIDCardNum)
  clear_has_useridcardnum();
  return useridcardnum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyPersonalInfoReq::set_allocated_useridcardnum(::std::string* useridcardnum) {
  if (useridcardnum != NULL) {
    set_has_useridcardnum();
  } else {
    clear_has_useridcardnum();
  }
  useridcardnum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), useridcardnum);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPersonalInfoReq.UserIDCardNum)
}

// -------------------------------------------------------------------

// VerifyPersonalInfoResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool VerifyPersonalInfoResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyPersonalInfoResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyPersonalInfoResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyPersonalInfoResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& VerifyPersonalInfoResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPersonalInfoResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* VerifyPersonalInfoResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPersonalInfoResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* VerifyPersonalInfoResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPersonalInfoResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void VerifyPersonalInfoResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPersonalInfoResp.BaseResponse)
}

// -------------------------------------------------------------------

// VerifyChatRoomReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool VerifyChatRoomReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VerifyChatRoomReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VerifyChatRoomReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VerifyChatRoomReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& VerifyChatRoomReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyChatRoomReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* VerifyChatRoomReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyChatRoomReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* VerifyChatRoomReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyChatRoomReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void VerifyChatRoomReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyChatRoomReq.BaseRequest)
}

// required uint32 OpCode = 2;
inline bool VerifyChatRoomReq::has_opcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VerifyChatRoomReq::set_has_opcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VerifyChatRoomReq::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VerifyChatRoomReq::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
inline ::google::protobuf::uint32 VerifyChatRoomReq::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyChatRoomReq.OpCode)
  return opcode_;
}
inline void VerifyChatRoomReq::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VerifyChatRoomReq.OpCode)
}

// optional string ApplyUserName = 3;
inline bool VerifyChatRoomReq::has_applyusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyChatRoomReq::set_has_applyusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyChatRoomReq::clear_has_applyusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyChatRoomReq::clear_applyusername() {
  applyusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_applyusername();
}
inline const ::std::string& VerifyChatRoomReq::applyusername() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyChatRoomReq.ApplyUserName)
  return applyusername_.GetNoArena();
}
inline void VerifyChatRoomReq::set_applyusername(const ::std::string& value) {
  set_has_applyusername();
  applyusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyChatRoomReq.ApplyUserName)
}
#if LANG_CXX11
inline void VerifyChatRoomReq::set_applyusername(::std::string&& value) {
  set_has_applyusername();
  applyusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyChatRoomReq.ApplyUserName)
}
#endif
inline void VerifyChatRoomReq::set_applyusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_applyusername();
  applyusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyChatRoomReq.ApplyUserName)
}
inline void VerifyChatRoomReq::set_applyusername(const char* value, size_t size) {
  set_has_applyusername();
  applyusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyChatRoomReq.ApplyUserName)
}
inline ::std::string* VerifyChatRoomReq::mutable_applyusername() {
  set_has_applyusername();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyChatRoomReq.ApplyUserName)
  return applyusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyChatRoomReq::release_applyusername() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyChatRoomReq.ApplyUserName)
  clear_has_applyusername();
  return applyusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyChatRoomReq::set_allocated_applyusername(::std::string* applyusername) {
  if (applyusername != NULL) {
    set_has_applyusername();
  } else {
    clear_has_applyusername();
  }
  applyusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), applyusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyChatRoomReq.ApplyUserName)
}

// optional string ChatRoomName = 4;
inline bool VerifyChatRoomReq::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyChatRoomReq::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyChatRoomReq::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyChatRoomReq::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
inline const ::std::string& VerifyChatRoomReq::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyChatRoomReq.ChatRoomName)
  return chatroomname_.GetNoArena();
}
inline void VerifyChatRoomReq::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyChatRoomReq.ChatRoomName)
}
#if LANG_CXX11
inline void VerifyChatRoomReq::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyChatRoomReq.ChatRoomName)
}
#endif
inline void VerifyChatRoomReq::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyChatRoomReq.ChatRoomName)
}
inline void VerifyChatRoomReq::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyChatRoomReq.ChatRoomName)
}
inline ::std::string* VerifyChatRoomReq::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyChatRoomReq.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyChatRoomReq::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyChatRoomReq.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyChatRoomReq::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyChatRoomReq.ChatRoomName)
}

// optional string Ticket = 5;
inline bool VerifyChatRoomReq::has_ticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VerifyChatRoomReq::set_has_ticket() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VerifyChatRoomReq::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VerifyChatRoomReq::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
inline const ::std::string& VerifyChatRoomReq::ticket() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyChatRoomReq.Ticket)
  return ticket_.GetNoArena();
}
inline void VerifyChatRoomReq::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyChatRoomReq.Ticket)
}
#if LANG_CXX11
inline void VerifyChatRoomReq::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyChatRoomReq.Ticket)
}
#endif
inline void VerifyChatRoomReq::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyChatRoomReq.Ticket)
}
inline void VerifyChatRoomReq::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyChatRoomReq.Ticket)
}
inline ::std::string* VerifyChatRoomReq::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyChatRoomReq.Ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyChatRoomReq::release_ticket() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyChatRoomReq.Ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyChatRoomReq::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyChatRoomReq.Ticket)
}

// -------------------------------------------------------------------

// VerifyChatRoomResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool VerifyChatRoomResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyChatRoomResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyChatRoomResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyChatRoomResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& VerifyChatRoomResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyChatRoomResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* VerifyChatRoomResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyChatRoomResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* VerifyChatRoomResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyChatRoomResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void VerifyChatRoomResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyChatRoomResp.BaseResponse)
}

// -------------------------------------------------------------------

// QuitChatRoomReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool QuitChatRoomReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuitChatRoomReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuitChatRoomReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuitChatRoomReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& QuitChatRoomReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.QuitChatRoomReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* QuitChatRoomReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.QuitChatRoomReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* QuitChatRoomReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.QuitChatRoomReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void QuitChatRoomReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.QuitChatRoomReq.BaseRequest)
}

// optional string ChatRoomName = 2;
inline bool QuitChatRoomReq::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuitChatRoomReq::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuitChatRoomReq::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuitChatRoomReq::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
inline const ::std::string& QuitChatRoomReq::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.QuitChatRoomReq.ChatRoomName)
  return chatroomname_.GetNoArena();
}
inline void QuitChatRoomReq::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.QuitChatRoomReq.ChatRoomName)
}
#if LANG_CXX11
inline void QuitChatRoomReq::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.QuitChatRoomReq.ChatRoomName)
}
#endif
inline void QuitChatRoomReq::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.QuitChatRoomReq.ChatRoomName)
}
inline void QuitChatRoomReq::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.QuitChatRoomReq.ChatRoomName)
}
inline ::std::string* QuitChatRoomReq::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.QuitChatRoomReq.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuitChatRoomReq::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.QuitChatRoomReq.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuitChatRoomReq::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.QuitChatRoomReq.ChatRoomName)
}

// -------------------------------------------------------------------

// QuitChatRoomResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool QuitChatRoomResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuitChatRoomResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuitChatRoomResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuitChatRoomResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& QuitChatRoomResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.QuitChatRoomResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* QuitChatRoomResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.QuitChatRoomResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* QuitChatRoomResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.QuitChatRoomResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void QuitChatRoomResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.QuitChatRoomResp.BaseResponse)
}

// -------------------------------------------------------------------

// GetChatRoomUpgradeStatusReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GetChatRoomUpgradeStatusReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetChatRoomUpgradeStatusReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetChatRoomUpgradeStatusReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetChatRoomUpgradeStatusReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GetChatRoomUpgradeStatusReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeStatusReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GetChatRoomUpgradeStatusReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomUpgradeStatusReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GetChatRoomUpgradeStatusReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomUpgradeStatusReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GetChatRoomUpgradeStatusReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomUpgradeStatusReq.BaseRequest)
}

// optional string ChatRoomName = 2;
inline bool GetChatRoomUpgradeStatusReq::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetChatRoomUpgradeStatusReq::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetChatRoomUpgradeStatusReq::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetChatRoomUpgradeStatusReq::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
inline const ::std::string& GetChatRoomUpgradeStatusReq::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeStatusReq.ChatRoomName)
  return chatroomname_.GetNoArena();
}
inline void GetChatRoomUpgradeStatusReq::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeStatusReq.ChatRoomName)
}
#if LANG_CXX11
inline void GetChatRoomUpgradeStatusReq::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomUpgradeStatusReq.ChatRoomName)
}
#endif
inline void GetChatRoomUpgradeStatusReq::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomUpgradeStatusReq.ChatRoomName)
}
inline void GetChatRoomUpgradeStatusReq::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomUpgradeStatusReq.ChatRoomName)
}
inline ::std::string* GetChatRoomUpgradeStatusReq::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomUpgradeStatusReq.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatRoomUpgradeStatusReq::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomUpgradeStatusReq.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatRoomUpgradeStatusReq::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomUpgradeStatusReq.ChatRoomName)
}

// -------------------------------------------------------------------

// GetChatRoomUpgradeStatusResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GetChatRoomUpgradeStatusResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetChatRoomUpgradeStatusResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetChatRoomUpgradeStatusResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetChatRoomUpgradeStatusResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GetChatRoomUpgradeStatusResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeStatusResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GetChatRoomUpgradeStatusResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomUpgradeStatusResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GetChatRoomUpgradeStatusResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomUpgradeStatusResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GetChatRoomUpgradeStatusResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomUpgradeStatusResp.BaseResponse)
}

// required uint32 Status = 2;
inline bool GetChatRoomUpgradeStatusResp::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetChatRoomUpgradeStatusResp::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetChatRoomUpgradeStatusResp::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetChatRoomUpgradeStatusResp::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 GetChatRoomUpgradeStatusResp::status() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeStatusResp.Status)
  return status_;
}
inline void GetChatRoomUpgradeStatusResp::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeStatusResp.Status)
}

// required uint32 MobileQuota = 3;
inline bool GetChatRoomUpgradeStatusResp::has_mobilequota() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetChatRoomUpgradeStatusResp::set_has_mobilequota() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetChatRoomUpgradeStatusResp::clear_has_mobilequota() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetChatRoomUpgradeStatusResp::clear_mobilequota() {
  mobilequota_ = 0u;
  clear_has_mobilequota();
}
inline ::google::protobuf::uint32 GetChatRoomUpgradeStatusResp::mobilequota() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeStatusResp.MobileQuota)
  return mobilequota_;
}
inline void GetChatRoomUpgradeStatusResp::set_mobilequota(::google::protobuf::uint32 value) {
  set_has_mobilequota();
  mobilequota_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeStatusResp.MobileQuota)
}

// required uint32 CardQuota = 4;
inline bool GetChatRoomUpgradeStatusResp::has_cardquota() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetChatRoomUpgradeStatusResp::set_has_cardquota() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetChatRoomUpgradeStatusResp::clear_has_cardquota() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetChatRoomUpgradeStatusResp::clear_cardquota() {
  cardquota_ = 0u;
  clear_has_cardquota();
}
inline ::google::protobuf::uint32 GetChatRoomUpgradeStatusResp::cardquota() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeStatusResp.CardQuota)
  return cardquota_;
}
inline void GetChatRoomUpgradeStatusResp::set_cardquota(::google::protobuf::uint32 value) {
  set_has_cardquota();
  cardquota_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeStatusResp.CardQuota)
}

// required uint32 DonateQuota = 5;
inline bool GetChatRoomUpgradeStatusResp::has_donatequota() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetChatRoomUpgradeStatusResp::set_has_donatequota() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetChatRoomUpgradeStatusResp::clear_has_donatequota() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetChatRoomUpgradeStatusResp::clear_donatequota() {
  donatequota_ = 0u;
  clear_has_donatequota();
}
inline ::google::protobuf::uint32 GetChatRoomUpgradeStatusResp::donatequota() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeStatusResp.DonateQuota)
  return donatequota_;
}
inline void GetChatRoomUpgradeStatusResp::set_donatequota(::google::protobuf::uint32 value) {
  set_has_donatequota();
  donatequota_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeStatusResp.DonateQuota)
}

// required uint32 MaxCount = 6;
inline bool GetChatRoomUpgradeStatusResp::has_maxcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetChatRoomUpgradeStatusResp::set_has_maxcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetChatRoomUpgradeStatusResp::clear_has_maxcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetChatRoomUpgradeStatusResp::clear_maxcount() {
  maxcount_ = 0u;
  clear_has_maxcount();
}
inline ::google::protobuf::uint32 GetChatRoomUpgradeStatusResp::maxcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeStatusResp.MaxCount)
  return maxcount_;
}
inline void GetChatRoomUpgradeStatusResp::set_maxcount(::google::protobuf::uint32 value) {
  set_has_maxcount();
  maxcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeStatusResp.MaxCount)
}

// optional string ResultMsg = 7;
inline bool GetChatRoomUpgradeStatusResp::has_resultmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetChatRoomUpgradeStatusResp::set_has_resultmsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetChatRoomUpgradeStatusResp::clear_has_resultmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetChatRoomUpgradeStatusResp::clear_resultmsg() {
  resultmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resultmsg();
}
inline const ::std::string& GetChatRoomUpgradeStatusResp::resultmsg() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeStatusResp.ResultMsg)
  return resultmsg_.GetNoArena();
}
inline void GetChatRoomUpgradeStatusResp::set_resultmsg(const ::std::string& value) {
  set_has_resultmsg();
  resultmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeStatusResp.ResultMsg)
}
#if LANG_CXX11
inline void GetChatRoomUpgradeStatusResp::set_resultmsg(::std::string&& value) {
  set_has_resultmsg();
  resultmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomUpgradeStatusResp.ResultMsg)
}
#endif
inline void GetChatRoomUpgradeStatusResp::set_resultmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_resultmsg();
  resultmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomUpgradeStatusResp.ResultMsg)
}
inline void GetChatRoomUpgradeStatusResp::set_resultmsg(const char* value, size_t size) {
  set_has_resultmsg();
  resultmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomUpgradeStatusResp.ResultMsg)
}
inline ::std::string* GetChatRoomUpgradeStatusResp::mutable_resultmsg() {
  set_has_resultmsg();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomUpgradeStatusResp.ResultMsg)
  return resultmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatRoomUpgradeStatusResp::release_resultmsg() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomUpgradeStatusResp.ResultMsg)
  clear_has_resultmsg();
  return resultmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatRoomUpgradeStatusResp::set_allocated_resultmsg(::std::string* resultmsg) {
  if (resultmsg != NULL) {
    set_has_resultmsg();
  } else {
    clear_has_resultmsg();
  }
  resultmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resultmsg);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomUpgradeStatusResp.ResultMsg)
}

// optional uint32 TotalQuota = 8;
inline bool GetChatRoomUpgradeStatusResp::has_totalquota() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GetChatRoomUpgradeStatusResp::set_has_totalquota() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GetChatRoomUpgradeStatusResp::clear_has_totalquota() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GetChatRoomUpgradeStatusResp::clear_totalquota() {
  totalquota_ = 0u;
  clear_has_totalquota();
}
inline ::google::protobuf::uint32 GetChatRoomUpgradeStatusResp::totalquota() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomUpgradeStatusResp.TotalQuota)
  return totalquota_;
}
inline void GetChatRoomUpgradeStatusResp::set_totalquota(::google::protobuf::uint32 value) {
  set_has_totalquota();
  totalquota_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomUpgradeStatusResp.TotalQuota)
}

// -------------------------------------------------------------------

// UpgradeChatRoomReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool UpgradeChatRoomReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpgradeChatRoomReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpgradeChatRoomReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpgradeChatRoomReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& UpgradeChatRoomReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.UpgradeChatRoomReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* UpgradeChatRoomReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UpgradeChatRoomReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* UpgradeChatRoomReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.UpgradeChatRoomReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void UpgradeChatRoomReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UpgradeChatRoomReq.BaseRequest)
}

// optional string ChatRoomName = 2;
inline bool UpgradeChatRoomReq::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpgradeChatRoomReq::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpgradeChatRoomReq::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpgradeChatRoomReq::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
inline const ::std::string& UpgradeChatRoomReq::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.UpgradeChatRoomReq.ChatRoomName)
  return chatroomname_.GetNoArena();
}
inline void UpgradeChatRoomReq::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UpgradeChatRoomReq.ChatRoomName)
}
#if LANG_CXX11
inline void UpgradeChatRoomReq::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UpgradeChatRoomReq.ChatRoomName)
}
#endif
inline void UpgradeChatRoomReq::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UpgradeChatRoomReq.ChatRoomName)
}
inline void UpgradeChatRoomReq::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UpgradeChatRoomReq.ChatRoomName)
}
inline ::std::string* UpgradeChatRoomReq::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.UpgradeChatRoomReq.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpgradeChatRoomReq::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.UpgradeChatRoomReq.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpgradeChatRoomReq::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UpgradeChatRoomReq.ChatRoomName)
}

// -------------------------------------------------------------------

// UpgradeChatRoomResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool UpgradeChatRoomResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpgradeChatRoomResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpgradeChatRoomResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpgradeChatRoomResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& UpgradeChatRoomResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UpgradeChatRoomResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* UpgradeChatRoomResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UpgradeChatRoomResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* UpgradeChatRoomResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UpgradeChatRoomResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void UpgradeChatRoomResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UpgradeChatRoomResp.BaseResponse)
}

// optional string ChatRoomData = 2;
inline bool UpgradeChatRoomResp::has_chatroomdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpgradeChatRoomResp::set_has_chatroomdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpgradeChatRoomResp::clear_has_chatroomdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpgradeChatRoomResp::clear_chatroomdata() {
  chatroomdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomdata();
}
inline const ::std::string& UpgradeChatRoomResp::chatroomdata() const {
  // @@protoc_insertion_point(field_get:micromsg.UpgradeChatRoomResp.ChatRoomData)
  return chatroomdata_.GetNoArena();
}
inline void UpgradeChatRoomResp::set_chatroomdata(const ::std::string& value) {
  set_has_chatroomdata();
  chatroomdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UpgradeChatRoomResp.ChatRoomData)
}
#if LANG_CXX11
inline void UpgradeChatRoomResp::set_chatroomdata(::std::string&& value) {
  set_has_chatroomdata();
  chatroomdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UpgradeChatRoomResp.ChatRoomData)
}
#endif
inline void UpgradeChatRoomResp::set_chatroomdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomdata();
  chatroomdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UpgradeChatRoomResp.ChatRoomData)
}
inline void UpgradeChatRoomResp::set_chatroomdata(const char* value, size_t size) {
  set_has_chatroomdata();
  chatroomdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UpgradeChatRoomResp.ChatRoomData)
}
inline ::std::string* UpgradeChatRoomResp::mutable_chatroomdata() {
  set_has_chatroomdata();
  // @@protoc_insertion_point(field_mutable:micromsg.UpgradeChatRoomResp.ChatRoomData)
  return chatroomdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpgradeChatRoomResp::release_chatroomdata() {
  // @@protoc_insertion_point(field_release:micromsg.UpgradeChatRoomResp.ChatRoomData)
  clear_has_chatroomdata();
  return chatroomdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpgradeChatRoomResp::set_allocated_chatroomdata(::std::string* chatroomdata) {
  if (chatroomdata != NULL) {
    set_has_chatroomdata();
  } else {
    clear_has_chatroomdata();
  }
  chatroomdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomdata);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UpgradeChatRoomResp.ChatRoomData)
}

// optional string ResultMsg = 3;
inline bool UpgradeChatRoomResp::has_resultmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpgradeChatRoomResp::set_has_resultmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpgradeChatRoomResp::clear_has_resultmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpgradeChatRoomResp::clear_resultmsg() {
  resultmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resultmsg();
}
inline const ::std::string& UpgradeChatRoomResp::resultmsg() const {
  // @@protoc_insertion_point(field_get:micromsg.UpgradeChatRoomResp.ResultMsg)
  return resultmsg_.GetNoArena();
}
inline void UpgradeChatRoomResp::set_resultmsg(const ::std::string& value) {
  set_has_resultmsg();
  resultmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UpgradeChatRoomResp.ResultMsg)
}
#if LANG_CXX11
inline void UpgradeChatRoomResp::set_resultmsg(::std::string&& value) {
  set_has_resultmsg();
  resultmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UpgradeChatRoomResp.ResultMsg)
}
#endif
inline void UpgradeChatRoomResp::set_resultmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_resultmsg();
  resultmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UpgradeChatRoomResp.ResultMsg)
}
inline void UpgradeChatRoomResp::set_resultmsg(const char* value, size_t size) {
  set_has_resultmsg();
  resultmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UpgradeChatRoomResp.ResultMsg)
}
inline ::std::string* UpgradeChatRoomResp::mutable_resultmsg() {
  set_has_resultmsg();
  // @@protoc_insertion_point(field_mutable:micromsg.UpgradeChatRoomResp.ResultMsg)
  return resultmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpgradeChatRoomResp::release_resultmsg() {
  // @@protoc_insertion_point(field_release:micromsg.UpgradeChatRoomResp.ResultMsg)
  clear_has_resultmsg();
  return resultmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpgradeChatRoomResp::set_allocated_resultmsg(::std::string* resultmsg) {
  if (resultmsg != NULL) {
    set_has_resultmsg();
  } else {
    clear_has_resultmsg();
  }
  resultmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resultmsg);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UpgradeChatRoomResp.ResultMsg)
}

// optional uint32 MaxCount = 4;
inline bool UpgradeChatRoomResp::has_maxcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpgradeChatRoomResp::set_has_maxcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpgradeChatRoomResp::clear_has_maxcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpgradeChatRoomResp::clear_maxcount() {
  maxcount_ = 0u;
  clear_has_maxcount();
}
inline ::google::protobuf::uint32 UpgradeChatRoomResp::maxcount() const {
  // @@protoc_insertion_point(field_get:micromsg.UpgradeChatRoomResp.MaxCount)
  return maxcount_;
}
inline void UpgradeChatRoomResp::set_maxcount(::google::protobuf::uint32 value) {
  set_has_maxcount();
  maxcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UpgradeChatRoomResp.MaxCount)
}

// required uint32 MobileQuota = 5;
inline bool UpgradeChatRoomResp::has_mobilequota() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpgradeChatRoomResp::set_has_mobilequota() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpgradeChatRoomResp::clear_has_mobilequota() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpgradeChatRoomResp::clear_mobilequota() {
  mobilequota_ = 0u;
  clear_has_mobilequota();
}
inline ::google::protobuf::uint32 UpgradeChatRoomResp::mobilequota() const {
  // @@protoc_insertion_point(field_get:micromsg.UpgradeChatRoomResp.MobileQuota)
  return mobilequota_;
}
inline void UpgradeChatRoomResp::set_mobilequota(::google::protobuf::uint32 value) {
  set_has_mobilequota();
  mobilequota_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UpgradeChatRoomResp.MobileQuota)
}

// required uint32 CardQuota = 6;
inline bool UpgradeChatRoomResp::has_cardquota() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpgradeChatRoomResp::set_has_cardquota() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpgradeChatRoomResp::clear_has_cardquota() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpgradeChatRoomResp::clear_cardquota() {
  cardquota_ = 0u;
  clear_has_cardquota();
}
inline ::google::protobuf::uint32 UpgradeChatRoomResp::cardquota() const {
  // @@protoc_insertion_point(field_get:micromsg.UpgradeChatRoomResp.CardQuota)
  return cardquota_;
}
inline void UpgradeChatRoomResp::set_cardquota(::google::protobuf::uint32 value) {
  set_has_cardquota();
  cardquota_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UpgradeChatRoomResp.CardQuota)
}

// required uint32 DonateQuota = 7;
inline bool UpgradeChatRoomResp::has_donatequota() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UpgradeChatRoomResp::set_has_donatequota() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UpgradeChatRoomResp::clear_has_donatequota() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UpgradeChatRoomResp::clear_donatequota() {
  donatequota_ = 0u;
  clear_has_donatequota();
}
inline ::google::protobuf::uint32 UpgradeChatRoomResp::donatequota() const {
  // @@protoc_insertion_point(field_get:micromsg.UpgradeChatRoomResp.DonateQuota)
  return donatequota_;
}
inline void UpgradeChatRoomResp::set_donatequota(::google::protobuf::uint32 value) {
  set_has_donatequota();
  donatequota_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UpgradeChatRoomResp.DonateQuota)
}

// optional uint32 TotalQuota = 8;
inline bool UpgradeChatRoomResp::has_totalquota() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UpgradeChatRoomResp::set_has_totalquota() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UpgradeChatRoomResp::clear_has_totalquota() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UpgradeChatRoomResp::clear_totalquota() {
  totalquota_ = 0u;
  clear_has_totalquota();
}
inline ::google::protobuf::uint32 UpgradeChatRoomResp::totalquota() const {
  // @@protoc_insertion_point(field_get:micromsg.UpgradeChatRoomResp.TotalQuota)
  return totalquota_;
}
inline void UpgradeChatRoomResp::set_totalquota(::google::protobuf::uint32 value) {
  set_has_totalquota();
  totalquota_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UpgradeChatRoomResp.TotalQuota)
}

// -------------------------------------------------------------------

// AddChatRoomDonateRecordReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool AddChatRoomDonateRecordReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AddChatRoomDonateRecordReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AddChatRoomDonateRecordReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AddChatRoomDonateRecordReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& AddChatRoomDonateRecordReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomDonateRecordReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* AddChatRoomDonateRecordReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomDonateRecordReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* AddChatRoomDonateRecordReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.AddChatRoomDonateRecordReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void AddChatRoomDonateRecordReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddChatRoomDonateRecordReq.BaseRequest)
}

// optional string ChatRoomName = 2;
inline bool AddChatRoomDonateRecordReq::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddChatRoomDonateRecordReq::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddChatRoomDonateRecordReq::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddChatRoomDonateRecordReq::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
inline const ::std::string& AddChatRoomDonateRecordReq::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomDonateRecordReq.ChatRoomName)
  return chatroomname_.GetNoArena();
}
inline void AddChatRoomDonateRecordReq::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AddChatRoomDonateRecordReq.ChatRoomName)
}
#if LANG_CXX11
inline void AddChatRoomDonateRecordReq::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AddChatRoomDonateRecordReq.ChatRoomName)
}
#endif
inline void AddChatRoomDonateRecordReq::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AddChatRoomDonateRecordReq.ChatRoomName)
}
inline void AddChatRoomDonateRecordReq::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AddChatRoomDonateRecordReq.ChatRoomName)
}
inline ::std::string* AddChatRoomDonateRecordReq::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomDonateRecordReq.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddChatRoomDonateRecordReq::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.AddChatRoomDonateRecordReq.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddChatRoomDonateRecordReq::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddChatRoomDonateRecordReq.ChatRoomName)
}

// optional string TransID = 3;
inline bool AddChatRoomDonateRecordReq::has_transid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddChatRoomDonateRecordReq::set_has_transid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddChatRoomDonateRecordReq::clear_has_transid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddChatRoomDonateRecordReq::clear_transid() {
  transid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transid();
}
inline const ::std::string& AddChatRoomDonateRecordReq::transid() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomDonateRecordReq.TransID)
  return transid_.GetNoArena();
}
inline void AddChatRoomDonateRecordReq::set_transid(const ::std::string& value) {
  set_has_transid();
  transid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AddChatRoomDonateRecordReq.TransID)
}
#if LANG_CXX11
inline void AddChatRoomDonateRecordReq::set_transid(::std::string&& value) {
  set_has_transid();
  transid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AddChatRoomDonateRecordReq.TransID)
}
#endif
inline void AddChatRoomDonateRecordReq::set_transid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_transid();
  transid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AddChatRoomDonateRecordReq.TransID)
}
inline void AddChatRoomDonateRecordReq::set_transid(const char* value, size_t size) {
  set_has_transid();
  transid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AddChatRoomDonateRecordReq.TransID)
}
inline ::std::string* AddChatRoomDonateRecordReq::mutable_transid() {
  set_has_transid();
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomDonateRecordReq.TransID)
  return transid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddChatRoomDonateRecordReq::release_transid() {
  // @@protoc_insertion_point(field_release:micromsg.AddChatRoomDonateRecordReq.TransID)
  clear_has_transid();
  return transid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddChatRoomDonateRecordReq::set_allocated_transid(::std::string* transid) {
  if (transid != NULL) {
    set_has_transid();
  } else {
    clear_has_transid();
  }
  transid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddChatRoomDonateRecordReq.TransID)
}

// optional string Title = 4;
inline bool AddChatRoomDonateRecordReq::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddChatRoomDonateRecordReq::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddChatRoomDonateRecordReq::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddChatRoomDonateRecordReq::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& AddChatRoomDonateRecordReq::title() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomDonateRecordReq.Title)
  return title_.GetNoArena();
}
inline void AddChatRoomDonateRecordReq::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AddChatRoomDonateRecordReq.Title)
}
#if LANG_CXX11
inline void AddChatRoomDonateRecordReq::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AddChatRoomDonateRecordReq.Title)
}
#endif
inline void AddChatRoomDonateRecordReq::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AddChatRoomDonateRecordReq.Title)
}
inline void AddChatRoomDonateRecordReq::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AddChatRoomDonateRecordReq.Title)
}
inline ::std::string* AddChatRoomDonateRecordReq::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomDonateRecordReq.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddChatRoomDonateRecordReq::release_title() {
  // @@protoc_insertion_point(field_release:micromsg.AddChatRoomDonateRecordReq.Title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddChatRoomDonateRecordReq::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddChatRoomDonateRecordReq.Title)
}

// optional string WebUrl = 5;
inline bool AddChatRoomDonateRecordReq::has_weburl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddChatRoomDonateRecordReq::set_has_weburl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddChatRoomDonateRecordReq::clear_has_weburl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddChatRoomDonateRecordReq::clear_weburl() {
  weburl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weburl();
}
inline const ::std::string& AddChatRoomDonateRecordReq::weburl() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomDonateRecordReq.WebUrl)
  return weburl_.GetNoArena();
}
inline void AddChatRoomDonateRecordReq::set_weburl(const ::std::string& value) {
  set_has_weburl();
  weburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AddChatRoomDonateRecordReq.WebUrl)
}
#if LANG_CXX11
inline void AddChatRoomDonateRecordReq::set_weburl(::std::string&& value) {
  set_has_weburl();
  weburl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AddChatRoomDonateRecordReq.WebUrl)
}
#endif
inline void AddChatRoomDonateRecordReq::set_weburl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weburl();
  weburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AddChatRoomDonateRecordReq.WebUrl)
}
inline void AddChatRoomDonateRecordReq::set_weburl(const char* value, size_t size) {
  set_has_weburl();
  weburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AddChatRoomDonateRecordReq.WebUrl)
}
inline ::std::string* AddChatRoomDonateRecordReq::mutable_weburl() {
  set_has_weburl();
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomDonateRecordReq.WebUrl)
  return weburl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddChatRoomDonateRecordReq::release_weburl() {
  // @@protoc_insertion_point(field_release:micromsg.AddChatRoomDonateRecordReq.WebUrl)
  clear_has_weburl();
  return weburl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddChatRoomDonateRecordReq::set_allocated_weburl(::std::string* weburl) {
  if (weburl != NULL) {
    set_has_weburl();
  } else {
    clear_has_weburl();
  }
  weburl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weburl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddChatRoomDonateRecordReq.WebUrl)
}

// -------------------------------------------------------------------

// AddChatRoomDonateRecordResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool AddChatRoomDonateRecordResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddChatRoomDonateRecordResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddChatRoomDonateRecordResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddChatRoomDonateRecordResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& AddChatRoomDonateRecordResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomDonateRecordResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* AddChatRoomDonateRecordResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddChatRoomDonateRecordResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* AddChatRoomDonateRecordResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.AddChatRoomDonateRecordResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void AddChatRoomDonateRecordResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddChatRoomDonateRecordResp.BaseResponse)
}

// required uint32 MaxCount = 2;
inline bool AddChatRoomDonateRecordResp::has_maxcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddChatRoomDonateRecordResp::set_has_maxcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddChatRoomDonateRecordResp::clear_has_maxcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddChatRoomDonateRecordResp::clear_maxcount() {
  maxcount_ = 0u;
  clear_has_maxcount();
}
inline ::google::protobuf::uint32 AddChatRoomDonateRecordResp::maxcount() const {
  // @@protoc_insertion_point(field_get:micromsg.AddChatRoomDonateRecordResp.MaxCount)
  return maxcount_;
}
inline void AddChatRoomDonateRecordResp::set_maxcount(::google::protobuf::uint32 value) {
  set_has_maxcount();
  maxcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddChatRoomDonateRecordResp.MaxCount)
}

// -------------------------------------------------------------------

// GoogleContactUploadItem

// optional string GoogleContactName = 1;
inline bool GoogleContactUploadItem::has_googlecontactname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoogleContactUploadItem::set_has_googlecontactname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoogleContactUploadItem::clear_has_googlecontactname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoogleContactUploadItem::clear_googlecontactname() {
  googlecontactname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_googlecontactname();
}
inline const ::std::string& GoogleContactUploadItem::googlecontactname() const {
  // @@protoc_insertion_point(field_get:micromsg.GoogleContactUploadItem.GoogleContactName)
  return googlecontactname_.GetNoArena();
}
inline void GoogleContactUploadItem::set_googlecontactname(const ::std::string& value) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GoogleContactUploadItem.GoogleContactName)
}
#if LANG_CXX11
inline void GoogleContactUploadItem::set_googlecontactname(::std::string&& value) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GoogleContactUploadItem.GoogleContactName)
}
#endif
inline void GoogleContactUploadItem::set_googlecontactname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GoogleContactUploadItem.GoogleContactName)
}
inline void GoogleContactUploadItem::set_googlecontactname(const char* value, size_t size) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GoogleContactUploadItem.GoogleContactName)
}
inline ::std::string* GoogleContactUploadItem::mutable_googlecontactname() {
  set_has_googlecontactname();
  // @@protoc_insertion_point(field_mutable:micromsg.GoogleContactUploadItem.GoogleContactName)
  return googlecontactname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GoogleContactUploadItem::release_googlecontactname() {
  // @@protoc_insertion_point(field_release:micromsg.GoogleContactUploadItem.GoogleContactName)
  clear_has_googlecontactname();
  return googlecontactname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GoogleContactUploadItem::set_allocated_googlecontactname(::std::string* googlecontactname) {
  if (googlecontactname != NULL) {
    set_has_googlecontactname();
  } else {
    clear_has_googlecontactname();
  }
  googlecontactname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), googlecontactname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GoogleContactUploadItem.GoogleContactName)
}

// -------------------------------------------------------------------

// ListGoogleContactRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool ListGoogleContactRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListGoogleContactRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListGoogleContactRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListGoogleContactRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& ListGoogleContactRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ListGoogleContactRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* ListGoogleContactRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ListGoogleContactRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* ListGoogleContactRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ListGoogleContactRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void ListGoogleContactRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ListGoogleContactRequest.BaseRequest)
}

// required uint32 Count = 2;
inline bool ListGoogleContactRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListGoogleContactRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListGoogleContactRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListGoogleContactRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 ListGoogleContactRequest::count() const {
  // @@protoc_insertion_point(field_get:micromsg.ListGoogleContactRequest.Count)
  return count_;
}
inline void ListGoogleContactRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ListGoogleContactRequest.Count)
}

// repeated .micromsg.GoogleContactUploadItem List = 3;
inline int ListGoogleContactRequest::list_size() const {
  return list_.size();
}
inline void ListGoogleContactRequest::clear_list() {
  list_.Clear();
}
inline const ::micromsg::GoogleContactUploadItem& ListGoogleContactRequest::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ListGoogleContactRequest.List)
  return list_.Get(index);
}
inline ::micromsg::GoogleContactUploadItem* ListGoogleContactRequest::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.ListGoogleContactRequest.List)
  return list_.Mutable(index);
}
inline ::micromsg::GoogleContactUploadItem* ListGoogleContactRequest::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.ListGoogleContactRequest.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::GoogleContactUploadItem >*
ListGoogleContactRequest::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ListGoogleContactRequest.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::GoogleContactUploadItem >&
ListGoogleContactRequest::list() const {
  // @@protoc_insertion_point(field_list:micromsg.ListGoogleContactRequest.List)
  return list_;
}

// required uint32 ContinueFlag = 4;
inline bool ListGoogleContactRequest::has_continueflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ListGoogleContactRequest::set_has_continueflag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ListGoogleContactRequest::clear_has_continueflag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ListGoogleContactRequest::clear_continueflag() {
  continueflag_ = 0u;
  clear_has_continueflag();
}
inline ::google::protobuf::uint32 ListGoogleContactRequest::continueflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ListGoogleContactRequest.ContinueFlag)
  return continueflag_;
}
inline void ListGoogleContactRequest::set_continueflag(::google::protobuf::uint32 value) {
  set_has_continueflag();
  continueflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ListGoogleContactRequest.ContinueFlag)
}

// required uint32 ClickSource = 5;
inline bool ListGoogleContactRequest::has_clicksource() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ListGoogleContactRequest::set_has_clicksource() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ListGoogleContactRequest::clear_has_clicksource() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ListGoogleContactRequest::clear_clicksource() {
  clicksource_ = 0u;
  clear_has_clicksource();
}
inline ::google::protobuf::uint32 ListGoogleContactRequest::clicksource() const {
  // @@protoc_insertion_point(field_get:micromsg.ListGoogleContactRequest.ClickSource)
  return clicksource_;
}
inline void ListGoogleContactRequest::set_clicksource(::google::protobuf::uint32 value) {
  set_has_clicksource();
  clicksource_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ListGoogleContactRequest.ClickSource)
}

// -------------------------------------------------------------------

// GoogleContactItem

// optional string GoogleContactName = 1;
inline bool GoogleContactItem::has_googlecontactname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoogleContactItem::set_has_googlecontactname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoogleContactItem::clear_has_googlecontactname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoogleContactItem::clear_googlecontactname() {
  googlecontactname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_googlecontactname();
}
inline const ::std::string& GoogleContactItem::googlecontactname() const {
  // @@protoc_insertion_point(field_get:micromsg.GoogleContactItem.GoogleContactName)
  return googlecontactname_.GetNoArena();
}
inline void GoogleContactItem::set_googlecontactname(const ::std::string& value) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GoogleContactItem.GoogleContactName)
}
#if LANG_CXX11
inline void GoogleContactItem::set_googlecontactname(::std::string&& value) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GoogleContactItem.GoogleContactName)
}
#endif
inline void GoogleContactItem::set_googlecontactname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GoogleContactItem.GoogleContactName)
}
inline void GoogleContactItem::set_googlecontactname(const char* value, size_t size) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GoogleContactItem.GoogleContactName)
}
inline ::std::string* GoogleContactItem::mutable_googlecontactname() {
  set_has_googlecontactname();
  // @@protoc_insertion_point(field_mutable:micromsg.GoogleContactItem.GoogleContactName)
  return googlecontactname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GoogleContactItem::release_googlecontactname() {
  // @@protoc_insertion_point(field_release:micromsg.GoogleContactItem.GoogleContactName)
  clear_has_googlecontactname();
  return googlecontactname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GoogleContactItem::set_allocated_googlecontactname(::std::string* googlecontactname) {
  if (googlecontactname != NULL) {
    set_has_googlecontactname();
  } else {
    clear_has_googlecontactname();
  }
  googlecontactname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), googlecontactname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GoogleContactItem.GoogleContactName)
}

// optional string UserName = 2;
inline bool GoogleContactItem::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GoogleContactItem::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GoogleContactItem::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GoogleContactItem::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& GoogleContactItem::username() const {
  // @@protoc_insertion_point(field_get:micromsg.GoogleContactItem.UserName)
  return username_.GetNoArena();
}
inline void GoogleContactItem::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GoogleContactItem.UserName)
}
#if LANG_CXX11
inline void GoogleContactItem::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GoogleContactItem.UserName)
}
#endif
inline void GoogleContactItem::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GoogleContactItem.UserName)
}
inline void GoogleContactItem::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GoogleContactItem.UserName)
}
inline ::std::string* GoogleContactItem::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.GoogleContactItem.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GoogleContactItem::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.GoogleContactItem.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GoogleContactItem::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GoogleContactItem.UserName)
}

// optional string BigHeadUrl = 3;
inline bool GoogleContactItem::has_bigheadurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GoogleContactItem::set_has_bigheadurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GoogleContactItem::clear_has_bigheadurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GoogleContactItem::clear_bigheadurl() {
  bigheadurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadurl();
}
inline const ::std::string& GoogleContactItem::bigheadurl() const {
  // @@protoc_insertion_point(field_get:micromsg.GoogleContactItem.BigHeadUrl)
  return bigheadurl_.GetNoArena();
}
inline void GoogleContactItem::set_bigheadurl(const ::std::string& value) {
  set_has_bigheadurl();
  bigheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GoogleContactItem.BigHeadUrl)
}
#if LANG_CXX11
inline void GoogleContactItem::set_bigheadurl(::std::string&& value) {
  set_has_bigheadurl();
  bigheadurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GoogleContactItem.BigHeadUrl)
}
#endif
inline void GoogleContactItem::set_bigheadurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadurl();
  bigheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GoogleContactItem.BigHeadUrl)
}
inline void GoogleContactItem::set_bigheadurl(const char* value, size_t size) {
  set_has_bigheadurl();
  bigheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GoogleContactItem.BigHeadUrl)
}
inline ::std::string* GoogleContactItem::mutable_bigheadurl() {
  set_has_bigheadurl();
  // @@protoc_insertion_point(field_mutable:micromsg.GoogleContactItem.BigHeadUrl)
  return bigheadurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GoogleContactItem::release_bigheadurl() {
  // @@protoc_insertion_point(field_release:micromsg.GoogleContactItem.BigHeadUrl)
  clear_has_bigheadurl();
  return bigheadurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GoogleContactItem::set_allocated_bigheadurl(::std::string* bigheadurl) {
  if (bigheadurl != NULL) {
    set_has_bigheadurl();
  } else {
    clear_has_bigheadurl();
  }
  bigheadurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GoogleContactItem.BigHeadUrl)
}

// optional string SmallHeadUrl = 4;
inline bool GoogleContactItem::has_smallheadurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GoogleContactItem::set_has_smallheadurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GoogleContactItem::clear_has_smallheadurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GoogleContactItem::clear_smallheadurl() {
  smallheadurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadurl();
}
inline const ::std::string& GoogleContactItem::smallheadurl() const {
  // @@protoc_insertion_point(field_get:micromsg.GoogleContactItem.SmallHeadUrl)
  return smallheadurl_.GetNoArena();
}
inline void GoogleContactItem::set_smallheadurl(const ::std::string& value) {
  set_has_smallheadurl();
  smallheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GoogleContactItem.SmallHeadUrl)
}
#if LANG_CXX11
inline void GoogleContactItem::set_smallheadurl(::std::string&& value) {
  set_has_smallheadurl();
  smallheadurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GoogleContactItem.SmallHeadUrl)
}
#endif
inline void GoogleContactItem::set_smallheadurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadurl();
  smallheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GoogleContactItem.SmallHeadUrl)
}
inline void GoogleContactItem::set_smallheadurl(const char* value, size_t size) {
  set_has_smallheadurl();
  smallheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GoogleContactItem.SmallHeadUrl)
}
inline ::std::string* GoogleContactItem::mutable_smallheadurl() {
  set_has_smallheadurl();
  // @@protoc_insertion_point(field_mutable:micromsg.GoogleContactItem.SmallHeadUrl)
  return smallheadurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GoogleContactItem::release_smallheadurl() {
  // @@protoc_insertion_point(field_release:micromsg.GoogleContactItem.SmallHeadUrl)
  clear_has_smallheadurl();
  return smallheadurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GoogleContactItem::set_allocated_smallheadurl(::std::string* smallheadurl) {
  if (smallheadurl != NULL) {
    set_has_smallheadurl();
  } else {
    clear_has_smallheadurl();
  }
  smallheadurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GoogleContactItem.SmallHeadUrl)
}

// required int32 Ret = 5;
inline bool GoogleContactItem::has_ret() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GoogleContactItem::set_has_ret() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GoogleContactItem::clear_has_ret() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GoogleContactItem::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 GoogleContactItem::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.GoogleContactItem.Ret)
  return ret_;
}
inline void GoogleContactItem::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GoogleContactItem.Ret)
}

// optional string NickName = 6;
inline bool GoogleContactItem::has_nickname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GoogleContactItem::set_has_nickname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GoogleContactItem::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GoogleContactItem::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& GoogleContactItem::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.GoogleContactItem.NickName)
  return nickname_.GetNoArena();
}
inline void GoogleContactItem::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GoogleContactItem.NickName)
}
#if LANG_CXX11
inline void GoogleContactItem::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GoogleContactItem.NickName)
}
#endif
inline void GoogleContactItem::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GoogleContactItem.NickName)
}
inline void GoogleContactItem::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GoogleContactItem.NickName)
}
inline ::std::string* GoogleContactItem::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.GoogleContactItem.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GoogleContactItem::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.GoogleContactItem.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GoogleContactItem::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GoogleContactItem.NickName)
}

// optional string AntispamTicket = 7;
inline bool GoogleContactItem::has_antispamticket() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GoogleContactItem::set_has_antispamticket() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GoogleContactItem::clear_has_antispamticket() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GoogleContactItem::clear_antispamticket() {
  antispamticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_antispamticket();
}
inline const ::std::string& GoogleContactItem::antispamticket() const {
  // @@protoc_insertion_point(field_get:micromsg.GoogleContactItem.AntispamTicket)
  return antispamticket_.GetNoArena();
}
inline void GoogleContactItem::set_antispamticket(const ::std::string& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GoogleContactItem.AntispamTicket)
}
#if LANG_CXX11
inline void GoogleContactItem::set_antispamticket(::std::string&& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GoogleContactItem.AntispamTicket)
}
#endif
inline void GoogleContactItem::set_antispamticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GoogleContactItem.AntispamTicket)
}
inline void GoogleContactItem::set_antispamticket(const char* value, size_t size) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GoogleContactItem.AntispamTicket)
}
inline ::std::string* GoogleContactItem::mutable_antispamticket() {
  set_has_antispamticket();
  // @@protoc_insertion_point(field_mutable:micromsg.GoogleContactItem.AntispamTicket)
  return antispamticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GoogleContactItem::release_antispamticket() {
  // @@protoc_insertion_point(field_release:micromsg.GoogleContactItem.AntispamTicket)
  clear_has_antispamticket();
  return antispamticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GoogleContactItem::set_allocated_antispamticket(::std::string* antispamticket) {
  if (antispamticket != NULL) {
    set_has_antispamticket();
  } else {
    clear_has_antispamticket();
  }
  antispamticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), antispamticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GoogleContactItem.AntispamTicket)
}

// -------------------------------------------------------------------

// ListGoogleContactResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool ListGoogleContactResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListGoogleContactResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListGoogleContactResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListGoogleContactResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& ListGoogleContactResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ListGoogleContactResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* ListGoogleContactResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ListGoogleContactResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* ListGoogleContactResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ListGoogleContactResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void ListGoogleContactResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ListGoogleContactResponse.BaseResponse)
}

// required uint32 Count = 2;
inline bool ListGoogleContactResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListGoogleContactResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListGoogleContactResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListGoogleContactResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 ListGoogleContactResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.ListGoogleContactResponse.Count)
  return count_;
}
inline void ListGoogleContactResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ListGoogleContactResponse.Count)
}

// repeated .micromsg.GoogleContactItem List = 3;
inline int ListGoogleContactResponse::list_size() const {
  return list_.size();
}
inline void ListGoogleContactResponse::clear_list() {
  list_.Clear();
}
inline const ::micromsg::GoogleContactItem& ListGoogleContactResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ListGoogleContactResponse.List)
  return list_.Get(index);
}
inline ::micromsg::GoogleContactItem* ListGoogleContactResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.ListGoogleContactResponse.List)
  return list_.Mutable(index);
}
inline ::micromsg::GoogleContactItem* ListGoogleContactResponse::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.ListGoogleContactResponse.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::GoogleContactItem >*
ListGoogleContactResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ListGoogleContactResponse.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::GoogleContactItem >&
ListGoogleContactResponse::list() const {
  // @@protoc_insertion_point(field_list:micromsg.ListGoogleContactResponse.List)
  return list_;
}

// -------------------------------------------------------------------

// InviteGoogleContactItem

// optional string GoogleContactName = 1;
inline bool InviteGoogleContactItem::has_googlecontactname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteGoogleContactItem::set_has_googlecontactname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteGoogleContactItem::clear_has_googlecontactname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteGoogleContactItem::clear_googlecontactname() {
  googlecontactname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_googlecontactname();
}
inline const ::std::string& InviteGoogleContactItem::googlecontactname() const {
  // @@protoc_insertion_point(field_get:micromsg.InviteGoogleContactItem.GoogleContactName)
  return googlecontactname_.GetNoArena();
}
inline void InviteGoogleContactItem::set_googlecontactname(const ::std::string& value) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.InviteGoogleContactItem.GoogleContactName)
}
#if LANG_CXX11
inline void InviteGoogleContactItem::set_googlecontactname(::std::string&& value) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.InviteGoogleContactItem.GoogleContactName)
}
#endif
inline void InviteGoogleContactItem::set_googlecontactname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.InviteGoogleContactItem.GoogleContactName)
}
inline void InviteGoogleContactItem::set_googlecontactname(const char* value, size_t size) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.InviteGoogleContactItem.GoogleContactName)
}
inline ::std::string* InviteGoogleContactItem::mutable_googlecontactname() {
  set_has_googlecontactname();
  // @@protoc_insertion_point(field_mutable:micromsg.InviteGoogleContactItem.GoogleContactName)
  return googlecontactname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteGoogleContactItem::release_googlecontactname() {
  // @@protoc_insertion_point(field_release:micromsg.InviteGoogleContactItem.GoogleContactName)
  clear_has_googlecontactname();
  return googlecontactname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteGoogleContactItem::set_allocated_googlecontactname(::std::string* googlecontactname) {
  if (googlecontactname != NULL) {
    set_has_googlecontactname();
  } else {
    clear_has_googlecontactname();
  }
  googlecontactname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), googlecontactname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.InviteGoogleContactItem.GoogleContactName)
}

// -------------------------------------------------------------------

// InviteGoogleContactRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool InviteGoogleContactRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteGoogleContactRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteGoogleContactRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteGoogleContactRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& InviteGoogleContactRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.InviteGoogleContactRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* InviteGoogleContactRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.InviteGoogleContactRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* InviteGoogleContactRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.InviteGoogleContactRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void InviteGoogleContactRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.InviteGoogleContactRequest.BaseRequest)
}

// required uint32 Count = 2;
inline bool InviteGoogleContactRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InviteGoogleContactRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InviteGoogleContactRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InviteGoogleContactRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 InviteGoogleContactRequest::count() const {
  // @@protoc_insertion_point(field_get:micromsg.InviteGoogleContactRequest.Count)
  return count_;
}
inline void InviteGoogleContactRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.InviteGoogleContactRequest.Count)
}

// repeated .micromsg.InviteGoogleContactItem List = 3;
inline int InviteGoogleContactRequest::list_size() const {
  return list_.size();
}
inline void InviteGoogleContactRequest::clear_list() {
  list_.Clear();
}
inline const ::micromsg::InviteGoogleContactItem& InviteGoogleContactRequest::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.InviteGoogleContactRequest.List)
  return list_.Get(index);
}
inline ::micromsg::InviteGoogleContactItem* InviteGoogleContactRequest::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.InviteGoogleContactRequest.List)
  return list_.Mutable(index);
}
inline ::micromsg::InviteGoogleContactItem* InviteGoogleContactRequest::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.InviteGoogleContactRequest.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::InviteGoogleContactItem >*
InviteGoogleContactRequest::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.InviteGoogleContactRequest.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::InviteGoogleContactItem >&
InviteGoogleContactRequest::list() const {
  // @@protoc_insertion_point(field_list:micromsg.InviteGoogleContactRequest.List)
  return list_;
}

// -------------------------------------------------------------------

// InviteGoogleContactResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool InviteGoogleContactResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteGoogleContactResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteGoogleContactResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteGoogleContactResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& InviteGoogleContactResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.InviteGoogleContactResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* InviteGoogleContactResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.InviteGoogleContactResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* InviteGoogleContactResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.InviteGoogleContactResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void InviteGoogleContactResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.InviteGoogleContactResponse.BaseResponse)
}

// required uint32 Count = 2;
inline bool InviteGoogleContactResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InviteGoogleContactResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InviteGoogleContactResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InviteGoogleContactResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 InviteGoogleContactResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.InviteGoogleContactResponse.Count)
  return count_;
}
inline void InviteGoogleContactResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.InviteGoogleContactResponse.Count)
}

// repeated int32 Rets = 3 [packed = true];
inline int InviteGoogleContactResponse::rets_size() const {
  return rets_.size();
}
inline void InviteGoogleContactResponse::clear_rets() {
  rets_.Clear();
}
inline ::google::protobuf::int32 InviteGoogleContactResponse::rets(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.InviteGoogleContactResponse.Rets)
  return rets_.Get(index);
}
inline void InviteGoogleContactResponse::set_rets(int index, ::google::protobuf::int32 value) {
  rets_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.InviteGoogleContactResponse.Rets)
}
inline void InviteGoogleContactResponse::add_rets(::google::protobuf::int32 value) {
  rets_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.InviteGoogleContactResponse.Rets)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InviteGoogleContactResponse::rets() const {
  // @@protoc_insertion_point(field_list:micromsg.InviteGoogleContactResponse.Rets)
  return rets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InviteGoogleContactResponse::mutable_rets() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.InviteGoogleContactResponse.Rets)
  return &rets_;
}

// -------------------------------------------------------------------

// BBMContactUploadItem

// optional string BBPPID = 1;
inline bool BBMContactUploadItem::has_bbppid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BBMContactUploadItem::set_has_bbppid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BBMContactUploadItem::clear_has_bbppid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BBMContactUploadItem::clear_bbppid() {
  bbppid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbppid();
}
inline const ::std::string& BBMContactUploadItem::bbppid() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactUploadItem.BBPPID)
  return bbppid_.GetNoArena();
}
inline void BBMContactUploadItem::set_bbppid(const ::std::string& value) {
  set_has_bbppid();
  bbppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactUploadItem.BBPPID)
}
#if LANG_CXX11
inline void BBMContactUploadItem::set_bbppid(::std::string&& value) {
  set_has_bbppid();
  bbppid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactUploadItem.BBPPID)
}
#endif
inline void BBMContactUploadItem::set_bbppid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bbppid();
  bbppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactUploadItem.BBPPID)
}
inline void BBMContactUploadItem::set_bbppid(const char* value, size_t size) {
  set_has_bbppid();
  bbppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactUploadItem.BBPPID)
}
inline ::std::string* BBMContactUploadItem::mutable_bbppid() {
  set_has_bbppid();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactUploadItem.BBPPID)
  return bbppid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BBMContactUploadItem::release_bbppid() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactUploadItem.BBPPID)
  clear_has_bbppid();
  return bbppid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BBMContactUploadItem::set_allocated_bbppid(::std::string* bbppid) {
  if (bbppid != NULL) {
    set_has_bbppid();
  } else {
    clear_has_bbppid();
  }
  bbppid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbppid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactUploadItem.BBPPID)
}

// optional string BBPIN = 2;
inline bool BBMContactUploadItem::has_bbpin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BBMContactUploadItem::set_has_bbpin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BBMContactUploadItem::clear_has_bbpin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BBMContactUploadItem::clear_bbpin() {
  bbpin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbpin();
}
inline const ::std::string& BBMContactUploadItem::bbpin() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactUploadItem.BBPIN)
  return bbpin_.GetNoArena();
}
inline void BBMContactUploadItem::set_bbpin(const ::std::string& value) {
  set_has_bbpin();
  bbpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactUploadItem.BBPIN)
}
#if LANG_CXX11
inline void BBMContactUploadItem::set_bbpin(::std::string&& value) {
  set_has_bbpin();
  bbpin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactUploadItem.BBPIN)
}
#endif
inline void BBMContactUploadItem::set_bbpin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bbpin();
  bbpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactUploadItem.BBPIN)
}
inline void BBMContactUploadItem::set_bbpin(const char* value, size_t size) {
  set_has_bbpin();
  bbpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactUploadItem.BBPIN)
}
inline ::std::string* BBMContactUploadItem::mutable_bbpin() {
  set_has_bbpin();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactUploadItem.BBPIN)
  return bbpin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BBMContactUploadItem::release_bbpin() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactUploadItem.BBPIN)
  clear_has_bbpin();
  return bbpin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BBMContactUploadItem::set_allocated_bbpin(::std::string* bbpin) {
  if (bbpin != NULL) {
    set_has_bbpin();
  } else {
    clear_has_bbpin();
  }
  bbpin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbpin);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactUploadItem.BBPIN)
}

// optional string BBMNickName = 3;
inline bool BBMContactUploadItem::has_bbmnickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BBMContactUploadItem::set_has_bbmnickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BBMContactUploadItem::clear_has_bbmnickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BBMContactUploadItem::clear_bbmnickname() {
  bbmnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbmnickname();
}
inline const ::std::string& BBMContactUploadItem::bbmnickname() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactUploadItem.BBMNickName)
  return bbmnickname_.GetNoArena();
}
inline void BBMContactUploadItem::set_bbmnickname(const ::std::string& value) {
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactUploadItem.BBMNickName)
}
#if LANG_CXX11
inline void BBMContactUploadItem::set_bbmnickname(::std::string&& value) {
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactUploadItem.BBMNickName)
}
#endif
inline void BBMContactUploadItem::set_bbmnickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactUploadItem.BBMNickName)
}
inline void BBMContactUploadItem::set_bbmnickname(const char* value, size_t size) {
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactUploadItem.BBMNickName)
}
inline ::std::string* BBMContactUploadItem::mutable_bbmnickname() {
  set_has_bbmnickname();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactUploadItem.BBMNickName)
  return bbmnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BBMContactUploadItem::release_bbmnickname() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactUploadItem.BBMNickName)
  clear_has_bbmnickname();
  return bbmnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BBMContactUploadItem::set_allocated_bbmnickname(::std::string* bbmnickname) {
  if (bbmnickname != NULL) {
    set_has_bbmnickname();
  } else {
    clear_has_bbmnickname();
  }
  bbmnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbmnickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactUploadItem.BBMNickName)
}

// -------------------------------------------------------------------

// ListBBMContactRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool ListBBMContactRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListBBMContactRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListBBMContactRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListBBMContactRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& ListBBMContactRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ListBBMContactRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* ListBBMContactRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ListBBMContactRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* ListBBMContactRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ListBBMContactRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void ListBBMContactRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ListBBMContactRequest.BaseRequest)
}

// required uint32 Count = 2;
inline bool ListBBMContactRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListBBMContactRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListBBMContactRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListBBMContactRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 ListBBMContactRequest::count() const {
  // @@protoc_insertion_point(field_get:micromsg.ListBBMContactRequest.Count)
  return count_;
}
inline void ListBBMContactRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ListBBMContactRequest.Count)
}

// repeated .micromsg.BBMContactUploadItem List = 3;
inline int ListBBMContactRequest::list_size() const {
  return list_.size();
}
inline void ListBBMContactRequest::clear_list() {
  list_.Clear();
}
inline const ::micromsg::BBMContactUploadItem& ListBBMContactRequest::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ListBBMContactRequest.List)
  return list_.Get(index);
}
inline ::micromsg::BBMContactUploadItem* ListBBMContactRequest::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.ListBBMContactRequest.List)
  return list_.Mutable(index);
}
inline ::micromsg::BBMContactUploadItem* ListBBMContactRequest::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.ListBBMContactRequest.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::BBMContactUploadItem >*
ListBBMContactRequest::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ListBBMContactRequest.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::BBMContactUploadItem >&
ListBBMContactRequest::list() const {
  // @@protoc_insertion_point(field_list:micromsg.ListBBMContactRequest.List)
  return list_;
}

// required uint32 ContinueFlag = 4;
inline bool ListBBMContactRequest::has_continueflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ListBBMContactRequest::set_has_continueflag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ListBBMContactRequest::clear_has_continueflag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ListBBMContactRequest::clear_continueflag() {
  continueflag_ = 0u;
  clear_has_continueflag();
}
inline ::google::protobuf::uint32 ListBBMContactRequest::continueflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ListBBMContactRequest.ContinueFlag)
  return continueflag_;
}
inline void ListBBMContactRequest::set_continueflag(::google::protobuf::uint32 value) {
  set_has_continueflag();
  continueflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ListBBMContactRequest.ContinueFlag)
}

// required uint32 ClickSource = 5;
inline bool ListBBMContactRequest::has_clicksource() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ListBBMContactRequest::set_has_clicksource() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ListBBMContactRequest::clear_has_clicksource() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ListBBMContactRequest::clear_clicksource() {
  clicksource_ = 0u;
  clear_has_clicksource();
}
inline ::google::protobuf::uint32 ListBBMContactRequest::clicksource() const {
  // @@protoc_insertion_point(field_get:micromsg.ListBBMContactRequest.ClickSource)
  return clicksource_;
}
inline void ListBBMContactRequest::set_clicksource(::google::protobuf::uint32 value) {
  set_has_clicksource();
  clicksource_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ListBBMContactRequest.ClickSource)
}

// required uint32 Opcode = 6;
inline bool ListBBMContactRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ListBBMContactRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ListBBMContactRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ListBBMContactRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
inline ::google::protobuf::uint32 ListBBMContactRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.ListBBMContactRequest.Opcode)
  return opcode_;
}
inline void ListBBMContactRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ListBBMContactRequest.Opcode)
}

// -------------------------------------------------------------------

// BBMContactItem

// optional string BBPPID = 1;
inline bool BBMContactItem::has_bbppid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BBMContactItem::set_has_bbppid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BBMContactItem::clear_has_bbppid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BBMContactItem::clear_bbppid() {
  bbppid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbppid();
}
inline const ::std::string& BBMContactItem::bbppid() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactItem.BBPPID)
  return bbppid_.GetNoArena();
}
inline void BBMContactItem::set_bbppid(const ::std::string& value) {
  set_has_bbppid();
  bbppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactItem.BBPPID)
}
#if LANG_CXX11
inline void BBMContactItem::set_bbppid(::std::string&& value) {
  set_has_bbppid();
  bbppid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactItem.BBPPID)
}
#endif
inline void BBMContactItem::set_bbppid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bbppid();
  bbppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactItem.BBPPID)
}
inline void BBMContactItem::set_bbppid(const char* value, size_t size) {
  set_has_bbppid();
  bbppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactItem.BBPPID)
}
inline ::std::string* BBMContactItem::mutable_bbppid() {
  set_has_bbppid();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactItem.BBPPID)
  return bbppid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BBMContactItem::release_bbppid() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactItem.BBPPID)
  clear_has_bbppid();
  return bbppid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BBMContactItem::set_allocated_bbppid(::std::string* bbppid) {
  if (bbppid != NULL) {
    set_has_bbppid();
  } else {
    clear_has_bbppid();
  }
  bbppid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbppid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactItem.BBPPID)
}

// optional string UserName = 2;
inline bool BBMContactItem::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BBMContactItem::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BBMContactItem::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BBMContactItem::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& BBMContactItem::username() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactItem.UserName)
  return username_.GetNoArena();
}
inline void BBMContactItem::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactItem.UserName)
}
#if LANG_CXX11
inline void BBMContactItem::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactItem.UserName)
}
#endif
inline void BBMContactItem::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactItem.UserName)
}
inline void BBMContactItem::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactItem.UserName)
}
inline ::std::string* BBMContactItem::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactItem.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BBMContactItem::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactItem.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BBMContactItem::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactItem.UserName)
}

// optional string BigHeadUrl = 3;
inline bool BBMContactItem::has_bigheadurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BBMContactItem::set_has_bigheadurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BBMContactItem::clear_has_bigheadurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BBMContactItem::clear_bigheadurl() {
  bigheadurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadurl();
}
inline const ::std::string& BBMContactItem::bigheadurl() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactItem.BigHeadUrl)
  return bigheadurl_.GetNoArena();
}
inline void BBMContactItem::set_bigheadurl(const ::std::string& value) {
  set_has_bigheadurl();
  bigheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactItem.BigHeadUrl)
}
#if LANG_CXX11
inline void BBMContactItem::set_bigheadurl(::std::string&& value) {
  set_has_bigheadurl();
  bigheadurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactItem.BigHeadUrl)
}
#endif
inline void BBMContactItem::set_bigheadurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadurl();
  bigheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactItem.BigHeadUrl)
}
inline void BBMContactItem::set_bigheadurl(const char* value, size_t size) {
  set_has_bigheadurl();
  bigheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactItem.BigHeadUrl)
}
inline ::std::string* BBMContactItem::mutable_bigheadurl() {
  set_has_bigheadurl();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactItem.BigHeadUrl)
  return bigheadurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BBMContactItem::release_bigheadurl() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactItem.BigHeadUrl)
  clear_has_bigheadurl();
  return bigheadurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BBMContactItem::set_allocated_bigheadurl(::std::string* bigheadurl) {
  if (bigheadurl != NULL) {
    set_has_bigheadurl();
  } else {
    clear_has_bigheadurl();
  }
  bigheadurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactItem.BigHeadUrl)
}

// optional string SmallHeadUrl = 4;
inline bool BBMContactItem::has_smallheadurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BBMContactItem::set_has_smallheadurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BBMContactItem::clear_has_smallheadurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BBMContactItem::clear_smallheadurl() {
  smallheadurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadurl();
}
inline const ::std::string& BBMContactItem::smallheadurl() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactItem.SmallHeadUrl)
  return smallheadurl_.GetNoArena();
}
inline void BBMContactItem::set_smallheadurl(const ::std::string& value) {
  set_has_smallheadurl();
  smallheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactItem.SmallHeadUrl)
}
#if LANG_CXX11
inline void BBMContactItem::set_smallheadurl(::std::string&& value) {
  set_has_smallheadurl();
  smallheadurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactItem.SmallHeadUrl)
}
#endif
inline void BBMContactItem::set_smallheadurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadurl();
  smallheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactItem.SmallHeadUrl)
}
inline void BBMContactItem::set_smallheadurl(const char* value, size_t size) {
  set_has_smallheadurl();
  smallheadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactItem.SmallHeadUrl)
}
inline ::std::string* BBMContactItem::mutable_smallheadurl() {
  set_has_smallheadurl();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactItem.SmallHeadUrl)
  return smallheadurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BBMContactItem::release_smallheadurl() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactItem.SmallHeadUrl)
  clear_has_smallheadurl();
  return smallheadurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BBMContactItem::set_allocated_smallheadurl(::std::string* smallheadurl) {
  if (smallheadurl != NULL) {
    set_has_smallheadurl();
  } else {
    clear_has_smallheadurl();
  }
  smallheadurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactItem.SmallHeadUrl)
}

// optional string BBPIN = 5;
inline bool BBMContactItem::has_bbpin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BBMContactItem::set_has_bbpin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BBMContactItem::clear_has_bbpin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BBMContactItem::clear_bbpin() {
  bbpin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbpin();
}
inline const ::std::string& BBMContactItem::bbpin() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactItem.BBPIN)
  return bbpin_.GetNoArena();
}
inline void BBMContactItem::set_bbpin(const ::std::string& value) {
  set_has_bbpin();
  bbpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactItem.BBPIN)
}
#if LANG_CXX11
inline void BBMContactItem::set_bbpin(::std::string&& value) {
  set_has_bbpin();
  bbpin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactItem.BBPIN)
}
#endif
inline void BBMContactItem::set_bbpin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bbpin();
  bbpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactItem.BBPIN)
}
inline void BBMContactItem::set_bbpin(const char* value, size_t size) {
  set_has_bbpin();
  bbpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactItem.BBPIN)
}
inline ::std::string* BBMContactItem::mutable_bbpin() {
  set_has_bbpin();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactItem.BBPIN)
  return bbpin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BBMContactItem::release_bbpin() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactItem.BBPIN)
  clear_has_bbpin();
  return bbpin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BBMContactItem::set_allocated_bbpin(::std::string* bbpin) {
  if (bbpin != NULL) {
    set_has_bbpin();
  } else {
    clear_has_bbpin();
  }
  bbpin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbpin);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactItem.BBPIN)
}

// optional string BBMNickName = 6;
inline bool BBMContactItem::has_bbmnickname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BBMContactItem::set_has_bbmnickname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BBMContactItem::clear_has_bbmnickname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BBMContactItem::clear_bbmnickname() {
  bbmnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbmnickname();
}
inline const ::std::string& BBMContactItem::bbmnickname() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactItem.BBMNickName)
  return bbmnickname_.GetNoArena();
}
inline void BBMContactItem::set_bbmnickname(const ::std::string& value) {
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactItem.BBMNickName)
}
#if LANG_CXX11
inline void BBMContactItem::set_bbmnickname(::std::string&& value) {
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactItem.BBMNickName)
}
#endif
inline void BBMContactItem::set_bbmnickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactItem.BBMNickName)
}
inline void BBMContactItem::set_bbmnickname(const char* value, size_t size) {
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactItem.BBMNickName)
}
inline ::std::string* BBMContactItem::mutable_bbmnickname() {
  set_has_bbmnickname();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactItem.BBMNickName)
  return bbmnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BBMContactItem::release_bbmnickname() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactItem.BBMNickName)
  clear_has_bbmnickname();
  return bbmnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BBMContactItem::set_allocated_bbmnickname(::std::string* bbmnickname) {
  if (bbmnickname != NULL) {
    set_has_bbmnickname();
  } else {
    clear_has_bbmnickname();
  }
  bbmnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbmnickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactItem.BBMNickName)
}

// required int32 Ret = 7;
inline bool BBMContactItem::has_ret() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BBMContactItem::set_has_ret() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BBMContactItem::clear_has_ret() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BBMContactItem::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 BBMContactItem::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactItem.Ret)
  return ret_;
}
inline void BBMContactItem::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BBMContactItem.Ret)
}

// optional string NickName = 8;
inline bool BBMContactItem::has_nickname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BBMContactItem::set_has_nickname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BBMContactItem::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BBMContactItem::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& BBMContactItem::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactItem.NickName)
  return nickname_.GetNoArena();
}
inline void BBMContactItem::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactItem.NickName)
}
#if LANG_CXX11
inline void BBMContactItem::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactItem.NickName)
}
#endif
inline void BBMContactItem::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactItem.NickName)
}
inline void BBMContactItem::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactItem.NickName)
}
inline ::std::string* BBMContactItem::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactItem.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BBMContactItem::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactItem.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BBMContactItem::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactItem.NickName)
}

// optional string AntispamTicket = 9;
inline bool BBMContactItem::has_antispamticket() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BBMContactItem::set_has_antispamticket() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BBMContactItem::clear_has_antispamticket() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BBMContactItem::clear_antispamticket() {
  antispamticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_antispamticket();
}
inline const ::std::string& BBMContactItem::antispamticket() const {
  // @@protoc_insertion_point(field_get:micromsg.BBMContactItem.AntispamTicket)
  return antispamticket_.GetNoArena();
}
inline void BBMContactItem::set_antispamticket(const ::std::string& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BBMContactItem.AntispamTicket)
}
#if LANG_CXX11
inline void BBMContactItem::set_antispamticket(::std::string&& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BBMContactItem.AntispamTicket)
}
#endif
inline void BBMContactItem::set_antispamticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BBMContactItem.AntispamTicket)
}
inline void BBMContactItem::set_antispamticket(const char* value, size_t size) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BBMContactItem.AntispamTicket)
}
inline ::std::string* BBMContactItem::mutable_antispamticket() {
  set_has_antispamticket();
  // @@protoc_insertion_point(field_mutable:micromsg.BBMContactItem.AntispamTicket)
  return antispamticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BBMContactItem::release_antispamticket() {
  // @@protoc_insertion_point(field_release:micromsg.BBMContactItem.AntispamTicket)
  clear_has_antispamticket();
  return antispamticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BBMContactItem::set_allocated_antispamticket(::std::string* antispamticket) {
  if (antispamticket != NULL) {
    set_has_antispamticket();
  } else {
    clear_has_antispamticket();
  }
  antispamticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), antispamticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BBMContactItem.AntispamTicket)
}

// -------------------------------------------------------------------

// ListBBMContactResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool ListBBMContactResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListBBMContactResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListBBMContactResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListBBMContactResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& ListBBMContactResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ListBBMContactResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* ListBBMContactResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ListBBMContactResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* ListBBMContactResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ListBBMContactResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void ListBBMContactResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ListBBMContactResponse.BaseResponse)
}

// required uint32 Count = 2;
inline bool ListBBMContactResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListBBMContactResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListBBMContactResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListBBMContactResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 ListBBMContactResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.ListBBMContactResponse.Count)
  return count_;
}
inline void ListBBMContactResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ListBBMContactResponse.Count)
}

// repeated .micromsg.BBMContactItem List = 3;
inline int ListBBMContactResponse::list_size() const {
  return list_.size();
}
inline void ListBBMContactResponse::clear_list() {
  list_.Clear();
}
inline const ::micromsg::BBMContactItem& ListBBMContactResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ListBBMContactResponse.List)
  return list_.Get(index);
}
inline ::micromsg::BBMContactItem* ListBBMContactResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.ListBBMContactResponse.List)
  return list_.Mutable(index);
}
inline ::micromsg::BBMContactItem* ListBBMContactResponse::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.ListBBMContactResponse.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::BBMContactItem >*
ListBBMContactResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ListBBMContactResponse.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::BBMContactItem >&
ListBBMContactResponse::list() const {
  // @@protoc_insertion_point(field_list:micromsg.ListBBMContactResponse.List)
  return list_;
}

// -------------------------------------------------------------------

// OnlineInfo

// required uint32 DeviceType = 1;
inline bool OnlineInfo::has_devicetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OnlineInfo::set_has_devicetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OnlineInfo::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OnlineInfo::clear_devicetype() {
  devicetype_ = 0u;
  clear_has_devicetype();
}
inline ::google::protobuf::uint32 OnlineInfo::devicetype() const {
  // @@protoc_insertion_point(field_get:micromsg.OnlineInfo.DeviceType)
  return devicetype_;
}
inline void OnlineInfo::set_devicetype(::google::protobuf::uint32 value) {
  set_has_devicetype();
  devicetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.OnlineInfo.DeviceType)
}

// optional bytes DeviceID = 2;
inline bool OnlineInfo::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OnlineInfo::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OnlineInfo::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OnlineInfo::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deviceid();
}
inline const ::std::string& OnlineInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:micromsg.OnlineInfo.DeviceID)
  return deviceid_.GetNoArena();
}
inline void OnlineInfo::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.OnlineInfo.DeviceID)
}
#if LANG_CXX11
inline void OnlineInfo::set_deviceid(::std::string&& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.OnlineInfo.DeviceID)
}
#endif
inline void OnlineInfo::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.OnlineInfo.DeviceID)
}
inline void OnlineInfo::set_deviceid(const void* value, size_t size) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.OnlineInfo.DeviceID)
}
inline ::std::string* OnlineInfo::mutable_deviceid() {
  set_has_deviceid();
  // @@protoc_insertion_point(field_mutable:micromsg.OnlineInfo.DeviceID)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnlineInfo::release_deviceid() {
  // @@protoc_insertion_point(field_release:micromsg.OnlineInfo.DeviceID)
  clear_has_deviceid();
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnlineInfo::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    set_has_deviceid();
  } else {
    clear_has_deviceid();
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.OnlineInfo.DeviceID)
}

// optional string WordingXML = 3;
inline bool OnlineInfo::has_wordingxml() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OnlineInfo::set_has_wordingxml() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OnlineInfo::clear_has_wordingxml() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OnlineInfo::clear_wordingxml() {
  wordingxml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wordingxml();
}
inline const ::std::string& OnlineInfo::wordingxml() const {
  // @@protoc_insertion_point(field_get:micromsg.OnlineInfo.WordingXML)
  return wordingxml_.GetNoArena();
}
inline void OnlineInfo::set_wordingxml(const ::std::string& value) {
  set_has_wordingxml();
  wordingxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.OnlineInfo.WordingXML)
}
#if LANG_CXX11
inline void OnlineInfo::set_wordingxml(::std::string&& value) {
  set_has_wordingxml();
  wordingxml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.OnlineInfo.WordingXML)
}
#endif
inline void OnlineInfo::set_wordingxml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wordingxml();
  wordingxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.OnlineInfo.WordingXML)
}
inline void OnlineInfo::set_wordingxml(const char* value, size_t size) {
  set_has_wordingxml();
  wordingxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.OnlineInfo.WordingXML)
}
inline ::std::string* OnlineInfo::mutable_wordingxml() {
  set_has_wordingxml();
  // @@protoc_insertion_point(field_mutable:micromsg.OnlineInfo.WordingXML)
  return wordingxml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnlineInfo::release_wordingxml() {
  // @@protoc_insertion_point(field_release:micromsg.OnlineInfo.WordingXML)
  clear_has_wordingxml();
  return wordingxml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnlineInfo::set_allocated_wordingxml(::std::string* wordingxml) {
  if (wordingxml != NULL) {
    set_has_wordingxml();
  } else {
    clear_has_wordingxml();
  }
  wordingxml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wordingxml);
  // @@protoc_insertion_point(field_set_allocated:micromsg.OnlineInfo.WordingXML)
}

// required .micromsg.SKBuiltinBuffer_t ClientKey = 4;
inline bool OnlineInfo::has_clientkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OnlineInfo::set_has_clientkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OnlineInfo::clear_has_clientkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OnlineInfo::clear_clientkey() {
  if (clientkey_ != NULL) clientkey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_clientkey();
}
inline const ::micromsg::SKBuiltinBuffer_t& OnlineInfo::clientkey() const {
  // @@protoc_insertion_point(field_get:micromsg.OnlineInfo.ClientKey)
  return clientkey_ != NULL ? *clientkey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* OnlineInfo::mutable_clientkey() {
  set_has_clientkey();
  if (clientkey_ == NULL) {
    clientkey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.OnlineInfo.ClientKey)
  return clientkey_;
}
inline ::micromsg::SKBuiltinBuffer_t* OnlineInfo::release_clientkey() {
  // @@protoc_insertion_point(field_release:micromsg.OnlineInfo.ClientKey)
  clear_has_clientkey();
  ::micromsg::SKBuiltinBuffer_t* temp = clientkey_;
  clientkey_ = NULL;
  return temp;
}
inline void OnlineInfo::set_allocated_clientkey(::micromsg::SKBuiltinBuffer_t* clientkey) {
  delete clientkey_;
  clientkey_ = clientkey;
  if (clientkey) {
    set_has_clientkey();
  } else {
    clear_has_clientkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.OnlineInfo.ClientKey)
}

// required uint32 OnlineStatus = 5;
inline bool OnlineInfo::has_onlinestatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OnlineInfo::set_has_onlinestatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OnlineInfo::clear_has_onlinestatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OnlineInfo::clear_onlinestatus() {
  onlinestatus_ = 0u;
  clear_has_onlinestatus();
}
inline ::google::protobuf::uint32 OnlineInfo::onlinestatus() const {
  // @@protoc_insertion_point(field_get:micromsg.OnlineInfo.OnlineStatus)
  return onlinestatus_;
}
inline void OnlineInfo::set_onlinestatus(::google::protobuf::uint32 value) {
  set_has_onlinestatus();
  onlinestatus_ = value;
  // @@protoc_insertion_point(field_set:micromsg.OnlineInfo.OnlineStatus)
}

// required uint32 DeviceHelperType = 6;
inline bool OnlineInfo::has_devicehelpertype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OnlineInfo::set_has_devicehelpertype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OnlineInfo::clear_has_devicehelpertype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OnlineInfo::clear_devicehelpertype() {
  devicehelpertype_ = 0u;
  clear_has_devicehelpertype();
}
inline ::google::protobuf::uint32 OnlineInfo::devicehelpertype() const {
  // @@protoc_insertion_point(field_get:micromsg.OnlineInfo.DeviceHelperType)
  return devicehelpertype_;
}
inline void OnlineInfo::set_devicehelpertype(::google::protobuf::uint32 value) {
  set_has_devicehelpertype();
  devicehelpertype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.OnlineInfo.DeviceHelperType)
}

// -------------------------------------------------------------------

// GetOnlineInfoRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GetOnlineInfoRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetOnlineInfoRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetOnlineInfoRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetOnlineInfoRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GetOnlineInfoRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetOnlineInfoRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GetOnlineInfoRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetOnlineInfoRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GetOnlineInfoRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetOnlineInfoRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GetOnlineInfoRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetOnlineInfoRequest.BaseRequest)
}

// optional string Language = 2;
inline bool GetOnlineInfoRequest::has_language() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetOnlineInfoRequest::set_has_language() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetOnlineInfoRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetOnlineInfoRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
inline const ::std::string& GetOnlineInfoRequest::language() const {
  // @@protoc_insertion_point(field_get:micromsg.GetOnlineInfoRequest.Language)
  return language_.GetNoArena();
}
inline void GetOnlineInfoRequest::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetOnlineInfoRequest.Language)
}
#if LANG_CXX11
inline void GetOnlineInfoRequest::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetOnlineInfoRequest.Language)
}
#endif
inline void GetOnlineInfoRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetOnlineInfoRequest.Language)
}
inline void GetOnlineInfoRequest::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetOnlineInfoRequest.Language)
}
inline ::std::string* GetOnlineInfoRequest::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:micromsg.GetOnlineInfoRequest.Language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOnlineInfoRequest::release_language() {
  // @@protoc_insertion_point(field_release:micromsg.GetOnlineInfoRequest.Language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOnlineInfoRequest::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetOnlineInfoRequest.Language)
}

// -------------------------------------------------------------------

// GetOnlineInfoResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GetOnlineInfoResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetOnlineInfoResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetOnlineInfoResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetOnlineInfoResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GetOnlineInfoResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetOnlineInfoResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GetOnlineInfoResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetOnlineInfoResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GetOnlineInfoResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetOnlineInfoResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GetOnlineInfoResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetOnlineInfoResponse.BaseResponse)
}

// required uint32 OnlineCount = 2;
inline bool GetOnlineInfoResponse::has_onlinecount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetOnlineInfoResponse::set_has_onlinecount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetOnlineInfoResponse::clear_has_onlinecount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetOnlineInfoResponse::clear_onlinecount() {
  onlinecount_ = 0u;
  clear_has_onlinecount();
}
inline ::google::protobuf::uint32 GetOnlineInfoResponse::onlinecount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetOnlineInfoResponse.OnlineCount)
  return onlinecount_;
}
inline void GetOnlineInfoResponse::set_onlinecount(::google::protobuf::uint32 value) {
  set_has_onlinecount();
  onlinecount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetOnlineInfoResponse.OnlineCount)
}

// repeated .micromsg.OnlineInfo OnlineList = 3;
inline int GetOnlineInfoResponse::onlinelist_size() const {
  return onlinelist_.size();
}
inline void GetOnlineInfoResponse::clear_onlinelist() {
  onlinelist_.Clear();
}
inline const ::micromsg::OnlineInfo& GetOnlineInfoResponse::onlinelist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetOnlineInfoResponse.OnlineList)
  return onlinelist_.Get(index);
}
inline ::micromsg::OnlineInfo* GetOnlineInfoResponse::mutable_onlinelist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetOnlineInfoResponse.OnlineList)
  return onlinelist_.Mutable(index);
}
inline ::micromsg::OnlineInfo* GetOnlineInfoResponse::add_onlinelist() {
  // @@protoc_insertion_point(field_add:micromsg.GetOnlineInfoResponse.OnlineList)
  return onlinelist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::OnlineInfo >*
GetOnlineInfoResponse::mutable_onlinelist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetOnlineInfoResponse.OnlineList)
  return &onlinelist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::OnlineInfo >&
GetOnlineInfoResponse::onlinelist() const {
  // @@protoc_insertion_point(field_list:micromsg.GetOnlineInfoResponse.OnlineList)
  return onlinelist_;
}

// optional string SummaryXML = 4;
inline bool GetOnlineInfoResponse::has_summaryxml() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetOnlineInfoResponse::set_has_summaryxml() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetOnlineInfoResponse::clear_has_summaryxml() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetOnlineInfoResponse::clear_summaryxml() {
  summaryxml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_summaryxml();
}
inline const ::std::string& GetOnlineInfoResponse::summaryxml() const {
  // @@protoc_insertion_point(field_get:micromsg.GetOnlineInfoResponse.SummaryXML)
  return summaryxml_.GetNoArena();
}
inline void GetOnlineInfoResponse::set_summaryxml(const ::std::string& value) {
  set_has_summaryxml();
  summaryxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetOnlineInfoResponse.SummaryXML)
}
#if LANG_CXX11
inline void GetOnlineInfoResponse::set_summaryxml(::std::string&& value) {
  set_has_summaryxml();
  summaryxml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetOnlineInfoResponse.SummaryXML)
}
#endif
inline void GetOnlineInfoResponse::set_summaryxml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_summaryxml();
  summaryxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetOnlineInfoResponse.SummaryXML)
}
inline void GetOnlineInfoResponse::set_summaryxml(const char* value, size_t size) {
  set_has_summaryxml();
  summaryxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetOnlineInfoResponse.SummaryXML)
}
inline ::std::string* GetOnlineInfoResponse::mutable_summaryxml() {
  set_has_summaryxml();
  // @@protoc_insertion_point(field_mutable:micromsg.GetOnlineInfoResponse.SummaryXML)
  return summaryxml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOnlineInfoResponse::release_summaryxml() {
  // @@protoc_insertion_point(field_release:micromsg.GetOnlineInfoResponse.SummaryXML)
  clear_has_summaryxml();
  return summaryxml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOnlineInfoResponse::set_allocated_summaryxml(::std::string* summaryxml) {
  if (summaryxml != NULL) {
    set_has_summaryxml();
  } else {
    clear_has_summaryxml();
  }
  summaryxml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), summaryxml);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetOnlineInfoResponse.SummaryXML)
}

// optional uint32 Flag = 5;
inline bool GetOnlineInfoResponse::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetOnlineInfoResponse::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetOnlineInfoResponse::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetOnlineInfoResponse::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 GetOnlineInfoResponse::flag() const {
  // @@protoc_insertion_point(field_get:micromsg.GetOnlineInfoResponse.Flag)
  return flag_;
}
inline void GetOnlineInfoResponse::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetOnlineInfoResponse.Flag)
}

// optional uint32 IConType = 6;
inline bool GetOnlineInfoResponse::has_icontype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetOnlineInfoResponse::set_has_icontype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetOnlineInfoResponse::clear_has_icontype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetOnlineInfoResponse::clear_icontype() {
  icontype_ = 0u;
  clear_has_icontype();
}
inline ::google::protobuf::uint32 GetOnlineInfoResponse::icontype() const {
  // @@protoc_insertion_point(field_get:micromsg.GetOnlineInfoResponse.IConType)
  return icontype_;
}
inline void GetOnlineInfoResponse::set_icontype(::google::protobuf::uint32 value) {
  set_has_icontype();
  icontype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetOnlineInfoResponse.IConType)
}

// -------------------------------------------------------------------

// GetChatroomMemberDetailRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GetChatroomMemberDetailRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetChatroomMemberDetailRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetChatroomMemberDetailRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetChatroomMemberDetailRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GetChatroomMemberDetailRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatroomMemberDetailRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GetChatroomMemberDetailRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatroomMemberDetailRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GetChatroomMemberDetailRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatroomMemberDetailRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GetChatroomMemberDetailRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatroomMemberDetailRequest.BaseRequest)
}

// optional string ChatroomUserName = 2;
inline bool GetChatroomMemberDetailRequest::has_chatroomusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetChatroomMemberDetailRequest::set_has_chatroomusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetChatroomMemberDetailRequest::clear_has_chatroomusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetChatroomMemberDetailRequest::clear_chatroomusername() {
  chatroomusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomusername();
}
inline const ::std::string& GetChatroomMemberDetailRequest::chatroomusername() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatroomMemberDetailRequest.ChatroomUserName)
  return chatroomusername_.GetNoArena();
}
inline void GetChatroomMemberDetailRequest::set_chatroomusername(const ::std::string& value) {
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatroomMemberDetailRequest.ChatroomUserName)
}
#if LANG_CXX11
inline void GetChatroomMemberDetailRequest::set_chatroomusername(::std::string&& value) {
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatroomMemberDetailRequest.ChatroomUserName)
}
#endif
inline void GetChatroomMemberDetailRequest::set_chatroomusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatroomMemberDetailRequest.ChatroomUserName)
}
inline void GetChatroomMemberDetailRequest::set_chatroomusername(const char* value, size_t size) {
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatroomMemberDetailRequest.ChatroomUserName)
}
inline ::std::string* GetChatroomMemberDetailRequest::mutable_chatroomusername() {
  set_has_chatroomusername();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatroomMemberDetailRequest.ChatroomUserName)
  return chatroomusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatroomMemberDetailRequest::release_chatroomusername() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatroomMemberDetailRequest.ChatroomUserName)
  clear_has_chatroomusername();
  return chatroomusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatroomMemberDetailRequest::set_allocated_chatroomusername(::std::string* chatroomusername) {
  if (chatroomusername != NULL) {
    set_has_chatroomusername();
  } else {
    clear_has_chatroomusername();
  }
  chatroomusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatroomMemberDetailRequest.ChatroomUserName)
}

// required uint32 ClientVersion = 3;
inline bool GetChatroomMemberDetailRequest::has_clientversion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetChatroomMemberDetailRequest::set_has_clientversion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetChatroomMemberDetailRequest::clear_has_clientversion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetChatroomMemberDetailRequest::clear_clientversion() {
  clientversion_ = 0u;
  clear_has_clientversion();
}
inline ::google::protobuf::uint32 GetChatroomMemberDetailRequest::clientversion() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatroomMemberDetailRequest.ClientVersion)
  return clientversion_;
}
inline void GetChatroomMemberDetailRequest::set_clientversion(::google::protobuf::uint32 value) {
  set_has_clientversion();
  clientversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatroomMemberDetailRequest.ClientVersion)
}

// -------------------------------------------------------------------

// GetChatroomMemberDetailResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GetChatroomMemberDetailResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetChatroomMemberDetailResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetChatroomMemberDetailResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetChatroomMemberDetailResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GetChatroomMemberDetailResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatroomMemberDetailResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GetChatroomMemberDetailResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatroomMemberDetailResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GetChatroomMemberDetailResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatroomMemberDetailResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GetChatroomMemberDetailResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatroomMemberDetailResponse.BaseResponse)
}

// optional string ChatroomUserName = 2;
inline bool GetChatroomMemberDetailResponse::has_chatroomusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetChatroomMemberDetailResponse::set_has_chatroomusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetChatroomMemberDetailResponse::clear_has_chatroomusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetChatroomMemberDetailResponse::clear_chatroomusername() {
  chatroomusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomusername();
}
inline const ::std::string& GetChatroomMemberDetailResponse::chatroomusername() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatroomMemberDetailResponse.ChatroomUserName)
  return chatroomusername_.GetNoArena();
}
inline void GetChatroomMemberDetailResponse::set_chatroomusername(const ::std::string& value) {
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatroomMemberDetailResponse.ChatroomUserName)
}
#if LANG_CXX11
inline void GetChatroomMemberDetailResponse::set_chatroomusername(::std::string&& value) {
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatroomMemberDetailResponse.ChatroomUserName)
}
#endif
inline void GetChatroomMemberDetailResponse::set_chatroomusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatroomMemberDetailResponse.ChatroomUserName)
}
inline void GetChatroomMemberDetailResponse::set_chatroomusername(const char* value, size_t size) {
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatroomMemberDetailResponse.ChatroomUserName)
}
inline ::std::string* GetChatroomMemberDetailResponse::mutable_chatroomusername() {
  set_has_chatroomusername();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatroomMemberDetailResponse.ChatroomUserName)
  return chatroomusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatroomMemberDetailResponse::release_chatroomusername() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatroomMemberDetailResponse.ChatroomUserName)
  clear_has_chatroomusername();
  return chatroomusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatroomMemberDetailResponse::set_allocated_chatroomusername(::std::string* chatroomusername) {
  if (chatroomusername != NULL) {
    set_has_chatroomusername();
  } else {
    clear_has_chatroomusername();
  }
  chatroomusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatroomMemberDetailResponse.ChatroomUserName)
}

// required uint32 ServerVersion = 3;
inline bool GetChatroomMemberDetailResponse::has_serverversion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetChatroomMemberDetailResponse::set_has_serverversion() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetChatroomMemberDetailResponse::clear_has_serverversion() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetChatroomMemberDetailResponse::clear_serverversion() {
  serverversion_ = 0u;
  clear_has_serverversion();
}
inline ::google::protobuf::uint32 GetChatroomMemberDetailResponse::serverversion() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatroomMemberDetailResponse.ServerVersion)
  return serverversion_;
}
inline void GetChatroomMemberDetailResponse::set_serverversion(::google::protobuf::uint32 value) {
  set_has_serverversion();
  serverversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatroomMemberDetailResponse.ServerVersion)
}

// required .micromsg.ChatRoomMemberData NewChatroomData = 4;
inline bool GetChatroomMemberDetailResponse::has_newchatroomdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetChatroomMemberDetailResponse::set_has_newchatroomdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetChatroomMemberDetailResponse::clear_has_newchatroomdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetChatroomMemberDetailResponse::clear_newchatroomdata() {
  if (newchatroomdata_ != NULL) newchatroomdata_->::micromsg::ChatRoomMemberData::Clear();
  clear_has_newchatroomdata();
}
inline const ::micromsg::ChatRoomMemberData& GetChatroomMemberDetailResponse::newchatroomdata() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatroomMemberDetailResponse.NewChatroomData)
  return newchatroomdata_ != NULL ? *newchatroomdata_
                         : *::micromsg::ChatRoomMemberData::internal_default_instance();
}
inline ::micromsg::ChatRoomMemberData* GetChatroomMemberDetailResponse::mutable_newchatroomdata() {
  set_has_newchatroomdata();
  if (newchatroomdata_ == NULL) {
    newchatroomdata_ = new ::micromsg::ChatRoomMemberData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatroomMemberDetailResponse.NewChatroomData)
  return newchatroomdata_;
}
inline ::micromsg::ChatRoomMemberData* GetChatroomMemberDetailResponse::release_newchatroomdata() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatroomMemberDetailResponse.NewChatroomData)
  clear_has_newchatroomdata();
  ::micromsg::ChatRoomMemberData* temp = newchatroomdata_;
  newchatroomdata_ = NULL;
  return temp;
}
inline void GetChatroomMemberDetailResponse::set_allocated_newchatroomdata(::micromsg::ChatRoomMemberData* newchatroomdata) {
  delete newchatroomdata_;
  newchatroomdata_ = newchatroomdata;
  if (newchatroomdata) {
    set_has_newchatroomdata();
  } else {
    clear_has_newchatroomdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatroomMemberDetailResponse.NewChatroomData)
}

// -------------------------------------------------------------------

// GetContactRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GetContactRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetContactRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetContactRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetContactRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GetContactRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GetContactRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetContactRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GetContactRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetContactRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GetContactRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetContactRequest.BaseRequest)
}

// required uint32 UserCount = 2;
inline bool GetContactRequest::has_usercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetContactRequest::set_has_usercount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetContactRequest::clear_has_usercount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetContactRequest::clear_usercount() {
  usercount_ = 0u;
  clear_has_usercount();
}
inline ::google::protobuf::uint32 GetContactRequest::usercount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactRequest.UserCount)
  return usercount_;
}
inline void GetContactRequest::set_usercount(::google::protobuf::uint32 value) {
  set_has_usercount();
  usercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetContactRequest.UserCount)
}

// repeated .micromsg.SKBuiltinString_t UserNameList = 3;
inline int GetContactRequest::usernamelist_size() const {
  return usernamelist_.size();
}
inline void GetContactRequest::clear_usernamelist() {
  usernamelist_.Clear();
}
inline const ::micromsg::SKBuiltinString_t& GetContactRequest::usernamelist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactRequest.UserNameList)
  return usernamelist_.Get(index);
}
inline ::micromsg::SKBuiltinString_t* GetContactRequest::mutable_usernamelist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetContactRequest.UserNameList)
  return usernamelist_.Mutable(index);
}
inline ::micromsg::SKBuiltinString_t* GetContactRequest::add_usernamelist() {
  // @@protoc_insertion_point(field_add:micromsg.GetContactRequest.UserNameList)
  return usernamelist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
GetContactRequest::mutable_usernamelist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetContactRequest.UserNameList)
  return &usernamelist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
GetContactRequest::usernamelist() const {
  // @@protoc_insertion_point(field_list:micromsg.GetContactRequest.UserNameList)
  return usernamelist_;
}

// optional uint32 AntispamTicketCount = 4;
inline bool GetContactRequest::has_antispamticketcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetContactRequest::set_has_antispamticketcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetContactRequest::clear_has_antispamticketcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetContactRequest::clear_antispamticketcount() {
  antispamticketcount_ = 0u;
  clear_has_antispamticketcount();
}
inline ::google::protobuf::uint32 GetContactRequest::antispamticketcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactRequest.AntispamTicketCount)
  return antispamticketcount_;
}
inline void GetContactRequest::set_antispamticketcount(::google::protobuf::uint32 value) {
  set_has_antispamticketcount();
  antispamticketcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetContactRequest.AntispamTicketCount)
}

// repeated .micromsg.SKBuiltinString_t AntispamTicket = 5;
inline int GetContactRequest::antispamticket_size() const {
  return antispamticket_.size();
}
inline void GetContactRequest::clear_antispamticket() {
  antispamticket_.Clear();
}
inline const ::micromsg::SKBuiltinString_t& GetContactRequest::antispamticket(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactRequest.AntispamTicket)
  return antispamticket_.Get(index);
}
inline ::micromsg::SKBuiltinString_t* GetContactRequest::mutable_antispamticket(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetContactRequest.AntispamTicket)
  return antispamticket_.Mutable(index);
}
inline ::micromsg::SKBuiltinString_t* GetContactRequest::add_antispamticket() {
  // @@protoc_insertion_point(field_add:micromsg.GetContactRequest.AntispamTicket)
  return antispamticket_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
GetContactRequest::mutable_antispamticket() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetContactRequest.AntispamTicket)
  return &antispamticket_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
GetContactRequest::antispamticket() const {
  // @@protoc_insertion_point(field_list:micromsg.GetContactRequest.AntispamTicket)
  return antispamticket_;
}

// optional uint32 FromChatRoomCount = 6;
inline bool GetContactRequest::has_fromchatroomcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetContactRequest::set_has_fromchatroomcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetContactRequest::clear_has_fromchatroomcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetContactRequest::clear_fromchatroomcount() {
  fromchatroomcount_ = 0u;
  clear_has_fromchatroomcount();
}
inline ::google::protobuf::uint32 GetContactRequest::fromchatroomcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactRequest.FromChatRoomCount)
  return fromchatroomcount_;
}
inline void GetContactRequest::set_fromchatroomcount(::google::protobuf::uint32 value) {
  set_has_fromchatroomcount();
  fromchatroomcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetContactRequest.FromChatRoomCount)
}

// repeated .micromsg.SKBuiltinString_t FromChatRoom = 7;
inline int GetContactRequest::fromchatroom_size() const {
  return fromchatroom_.size();
}
inline void GetContactRequest::clear_fromchatroom() {
  fromchatroom_.Clear();
}
inline const ::micromsg::SKBuiltinString_t& GetContactRequest::fromchatroom(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactRequest.FromChatRoom)
  return fromchatroom_.Get(index);
}
inline ::micromsg::SKBuiltinString_t* GetContactRequest::mutable_fromchatroom(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetContactRequest.FromChatRoom)
  return fromchatroom_.Mutable(index);
}
inline ::micromsg::SKBuiltinString_t* GetContactRequest::add_fromchatroom() {
  // @@protoc_insertion_point(field_add:micromsg.GetContactRequest.FromChatRoom)
  return fromchatroom_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
GetContactRequest::mutable_fromchatroom() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetContactRequest.FromChatRoom)
  return &fromchatroom_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
GetContactRequest::fromchatroom() const {
  // @@protoc_insertion_point(field_list:micromsg.GetContactRequest.FromChatRoom)
  return fromchatroom_;
}

// -------------------------------------------------------------------

// GetContactResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GetContactResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetContactResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetContactResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetContactResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GetContactResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GetContactResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetContactResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GetContactResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetContactResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GetContactResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetContactResponse.BaseResponse)
}

// required uint32 ContactCount = 2;
inline bool GetContactResponse::has_contactcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetContactResponse::set_has_contactcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetContactResponse::clear_has_contactcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetContactResponse::clear_contactcount() {
  contactcount_ = 0u;
  clear_has_contactcount();
}
inline ::google::protobuf::uint32 GetContactResponse::contactcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactResponse.ContactCount)
  return contactcount_;
}
inline void GetContactResponse::set_contactcount(::google::protobuf::uint32 value) {
  set_has_contactcount();
  contactcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetContactResponse.ContactCount)
}

// repeated .micromsg.ModContact ContactList = 3;
inline int GetContactResponse::contactlist_size() const {
  return contactlist_.size();
}
inline void GetContactResponse::clear_contactlist() {
  contactlist_.Clear();
}
inline const ::micromsg::ModContact& GetContactResponse::contactlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactResponse.ContactList)
  return contactlist_.Get(index);
}
inline ::micromsg::ModContact* GetContactResponse::mutable_contactlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetContactResponse.ContactList)
  return contactlist_.Mutable(index);
}
inline ::micromsg::ModContact* GetContactResponse::add_contactlist() {
  // @@protoc_insertion_point(field_add:micromsg.GetContactResponse.ContactList)
  return contactlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::ModContact >*
GetContactResponse::mutable_contactlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetContactResponse.ContactList)
  return &contactlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::ModContact >&
GetContactResponse::contactlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GetContactResponse.ContactList)
  return contactlist_;
}

// repeated int32 Ret = 4 [packed = true];
inline int GetContactResponse::ret_size() const {
  return ret_.size();
}
inline void GetContactResponse::clear_ret() {
  ret_.Clear();
}
inline ::google::protobuf::int32 GetContactResponse::ret(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactResponse.Ret)
  return ret_.Get(index);
}
inline void GetContactResponse::set_ret(int index, ::google::protobuf::int32 value) {
  ret_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.GetContactResponse.Ret)
}
inline void GetContactResponse::add_ret(::google::protobuf::int32 value) {
  ret_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.GetContactResponse.Ret)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GetContactResponse::ret() const {
  // @@protoc_insertion_point(field_list:micromsg.GetContactResponse.Ret)
  return ret_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GetContactResponse::mutable_ret() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetContactResponse.Ret)
  return &ret_;
}

// -------------------------------------------------------------------

// UploadCardImgRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool UploadCardImgRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadCardImgRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadCardImgRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadCardImgRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& UploadCardImgRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* UploadCardImgRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadCardImgRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* UploadCardImgRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.UploadCardImgRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void UploadCardImgRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadCardImgRequest.BaseRequest)
}

// optional string ClientId = 2;
inline bool UploadCardImgRequest::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadCardImgRequest::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadCardImgRequest::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadCardImgRequest::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
inline const ::std::string& UploadCardImgRequest::clientid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgRequest.ClientId)
  return clientid_.GetNoArena();
}
inline void UploadCardImgRequest::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadCardImgRequest.ClientId)
}
#if LANG_CXX11
inline void UploadCardImgRequest::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadCardImgRequest.ClientId)
}
#endif
inline void UploadCardImgRequest::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadCardImgRequest.ClientId)
}
inline void UploadCardImgRequest::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadCardImgRequest.ClientId)
}
inline ::std::string* UploadCardImgRequest::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadCardImgRequest.ClientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadCardImgRequest::release_clientid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadCardImgRequest.ClientId)
  clear_has_clientid();
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadCardImgRequest::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadCardImgRequest.ClientId)
}

// required uint32 TotalLen = 3;
inline bool UploadCardImgRequest::has_totallen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UploadCardImgRequest::set_has_totallen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UploadCardImgRequest::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UploadCardImgRequest::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
inline ::google::protobuf::uint32 UploadCardImgRequest::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgRequest.TotalLen)
  return totallen_;
}
inline void UploadCardImgRequest::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadCardImgRequest.TotalLen)
}

// required uint32 StartPos = 4;
inline bool UploadCardImgRequest::has_startpos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UploadCardImgRequest::set_has_startpos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UploadCardImgRequest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UploadCardImgRequest::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
inline ::google::protobuf::uint32 UploadCardImgRequest::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgRequest.StartPos)
  return startpos_;
}
inline void UploadCardImgRequest::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadCardImgRequest.StartPos)
}

// required uint32 DataLen = 5;
inline bool UploadCardImgRequest::has_datalen() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UploadCardImgRequest::set_has_datalen() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UploadCardImgRequest::clear_has_datalen() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UploadCardImgRequest::clear_datalen() {
  datalen_ = 0u;
  clear_has_datalen();
}
inline ::google::protobuf::uint32 UploadCardImgRequest::datalen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgRequest.DataLen)
  return datalen_;
}
inline void UploadCardImgRequest::set_datalen(::google::protobuf::uint32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadCardImgRequest.DataLen)
}

// required .micromsg.SKBuiltinBuffer_t Data = 6;
inline bool UploadCardImgRequest::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadCardImgRequest::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadCardImgRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadCardImgRequest::clear_data() {
  if (data_ != NULL) data_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_data();
}
inline const ::micromsg::SKBuiltinBuffer_t& UploadCardImgRequest::data() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgRequest.Data)
  return data_ != NULL ? *data_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* UploadCardImgRequest::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadCardImgRequest.Data)
  return data_;
}
inline ::micromsg::SKBuiltinBuffer_t* UploadCardImgRequest::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.UploadCardImgRequest.Data)
  clear_has_data();
  ::micromsg::SKBuiltinBuffer_t* temp = data_;
  data_ = NULL;
  return temp;
}
inline void UploadCardImgRequest::set_allocated_data(::micromsg::SKBuiltinBuffer_t* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadCardImgRequest.Data)
}

// optional string ContactUserName = 7;
inline bool UploadCardImgRequest::has_contactusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadCardImgRequest::set_has_contactusername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadCardImgRequest::clear_has_contactusername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadCardImgRequest::clear_contactusername() {
  contactusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contactusername();
}
inline const ::std::string& UploadCardImgRequest::contactusername() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgRequest.ContactUserName)
  return contactusername_.GetNoArena();
}
inline void UploadCardImgRequest::set_contactusername(const ::std::string& value) {
  set_has_contactusername();
  contactusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadCardImgRequest.ContactUserName)
}
#if LANG_CXX11
inline void UploadCardImgRequest::set_contactusername(::std::string&& value) {
  set_has_contactusername();
  contactusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadCardImgRequest.ContactUserName)
}
#endif
inline void UploadCardImgRequest::set_contactusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contactusername();
  contactusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadCardImgRequest.ContactUserName)
}
inline void UploadCardImgRequest::set_contactusername(const char* value, size_t size) {
  set_has_contactusername();
  contactusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadCardImgRequest.ContactUserName)
}
inline ::std::string* UploadCardImgRequest::mutable_contactusername() {
  set_has_contactusername();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadCardImgRequest.ContactUserName)
  return contactusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadCardImgRequest::release_contactusername() {
  // @@protoc_insertion_point(field_release:micromsg.UploadCardImgRequest.ContactUserName)
  clear_has_contactusername();
  return contactusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadCardImgRequest::set_allocated_contactusername(::std::string* contactusername) {
  if (contactusername != NULL) {
    set_has_contactusername();
  } else {
    clear_has_contactusername();
  }
  contactusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contactusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadCardImgRequest.ContactUserName)
}

// -------------------------------------------------------------------

// UploadCardImgResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool UploadCardImgResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadCardImgResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadCardImgResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadCardImgResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& UploadCardImgResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* UploadCardImgResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadCardImgResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* UploadCardImgResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UploadCardImgResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void UploadCardImgResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadCardImgResponse.BaseResponse)
}

// required uint32 StartPos = 2;
inline bool UploadCardImgResponse::has_startpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadCardImgResponse::set_has_startpos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadCardImgResponse::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadCardImgResponse::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
inline ::google::protobuf::uint32 UploadCardImgResponse::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgResponse.StartPos)
  return startpos_;
}
inline void UploadCardImgResponse::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadCardImgResponse.StartPos)
}

// required uint32 TotalLen = 3;
inline bool UploadCardImgResponse::has_totallen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UploadCardImgResponse::set_has_totallen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UploadCardImgResponse::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UploadCardImgResponse::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
inline ::google::protobuf::uint32 UploadCardImgResponse::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgResponse.TotalLen)
  return totallen_;
}
inline void UploadCardImgResponse::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadCardImgResponse.TotalLen)
}

// optional string ClientId = 4;
inline bool UploadCardImgResponse::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadCardImgResponse::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadCardImgResponse::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadCardImgResponse::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
inline const ::std::string& UploadCardImgResponse::clientid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgResponse.ClientId)
  return clientid_.GetNoArena();
}
inline void UploadCardImgResponse::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadCardImgResponse.ClientId)
}
#if LANG_CXX11
inline void UploadCardImgResponse::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadCardImgResponse.ClientId)
}
#endif
inline void UploadCardImgResponse::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadCardImgResponse.ClientId)
}
inline void UploadCardImgResponse::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadCardImgResponse.ClientId)
}
inline ::std::string* UploadCardImgResponse::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadCardImgResponse.ClientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadCardImgResponse::release_clientid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadCardImgResponse.ClientId)
  clear_has_clientid();
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadCardImgResponse::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadCardImgResponse.ClientId)
}

// optional string CardImgUrl = 5;
inline bool UploadCardImgResponse::has_cardimgurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadCardImgResponse::set_has_cardimgurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadCardImgResponse::clear_has_cardimgurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadCardImgResponse::clear_cardimgurl() {
  cardimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cardimgurl();
}
inline const ::std::string& UploadCardImgResponse::cardimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadCardImgResponse.CardImgUrl)
  return cardimgurl_.GetNoArena();
}
inline void UploadCardImgResponse::set_cardimgurl(const ::std::string& value) {
  set_has_cardimgurl();
  cardimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadCardImgResponse.CardImgUrl)
}
#if LANG_CXX11
inline void UploadCardImgResponse::set_cardimgurl(::std::string&& value) {
  set_has_cardimgurl();
  cardimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadCardImgResponse.CardImgUrl)
}
#endif
inline void UploadCardImgResponse::set_cardimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cardimgurl();
  cardimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadCardImgResponse.CardImgUrl)
}
inline void UploadCardImgResponse::set_cardimgurl(const char* value, size_t size) {
  set_has_cardimgurl();
  cardimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadCardImgResponse.CardImgUrl)
}
inline ::std::string* UploadCardImgResponse::mutable_cardimgurl() {
  set_has_cardimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadCardImgResponse.CardImgUrl)
  return cardimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadCardImgResponse::release_cardimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.UploadCardImgResponse.CardImgUrl)
  clear_has_cardimgurl();
  return cardimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadCardImgResponse::set_allocated_cardimgurl(::std::string* cardimgurl) {
  if (cardimgurl != NULL) {
    set_has_cardimgurl();
  } else {
    clear_has_cardimgurl();
  }
  cardimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cardimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadCardImgResponse.CardImgUrl)
}

// -------------------------------------------------------------------

// DeleteCardImgRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool DeleteCardImgRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteCardImgRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteCardImgRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteCardImgRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& DeleteCardImgRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.DeleteCardImgRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* DeleteCardImgRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DeleteCardImgRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* DeleteCardImgRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.DeleteCardImgRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void DeleteCardImgRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DeleteCardImgRequest.BaseRequest)
}

// optional string ContactUserName = 2;
inline bool DeleteCardImgRequest::has_contactusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteCardImgRequest::set_has_contactusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteCardImgRequest::clear_has_contactusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteCardImgRequest::clear_contactusername() {
  contactusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contactusername();
}
inline const ::std::string& DeleteCardImgRequest::contactusername() const {
  // @@protoc_insertion_point(field_get:micromsg.DeleteCardImgRequest.ContactUserName)
  return contactusername_.GetNoArena();
}
inline void DeleteCardImgRequest::set_contactusername(const ::std::string& value) {
  set_has_contactusername();
  contactusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DeleteCardImgRequest.ContactUserName)
}
#if LANG_CXX11
inline void DeleteCardImgRequest::set_contactusername(::std::string&& value) {
  set_has_contactusername();
  contactusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DeleteCardImgRequest.ContactUserName)
}
#endif
inline void DeleteCardImgRequest::set_contactusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contactusername();
  contactusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DeleteCardImgRequest.ContactUserName)
}
inline void DeleteCardImgRequest::set_contactusername(const char* value, size_t size) {
  set_has_contactusername();
  contactusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DeleteCardImgRequest.ContactUserName)
}
inline ::std::string* DeleteCardImgRequest::mutable_contactusername() {
  set_has_contactusername();
  // @@protoc_insertion_point(field_mutable:micromsg.DeleteCardImgRequest.ContactUserName)
  return contactusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteCardImgRequest::release_contactusername() {
  // @@protoc_insertion_point(field_release:micromsg.DeleteCardImgRequest.ContactUserName)
  clear_has_contactusername();
  return contactusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteCardImgRequest::set_allocated_contactusername(::std::string* contactusername) {
  if (contactusername != NULL) {
    set_has_contactusername();
  } else {
    clear_has_contactusername();
  }
  contactusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contactusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DeleteCardImgRequest.ContactUserName)
}

// -------------------------------------------------------------------

// DeleteCardImgResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool DeleteCardImgResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteCardImgResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteCardImgResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteCardImgResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& DeleteCardImgResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.DeleteCardImgResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* DeleteCardImgResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DeleteCardImgResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* DeleteCardImgResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.DeleteCardImgResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void DeleteCardImgResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DeleteCardImgResponse.BaseResponse)
}

// -------------------------------------------------------------------

// InviteChatRoomMemberRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool InviteChatRoomMemberRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteChatRoomMemberRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteChatRoomMemberRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteChatRoomMemberRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& InviteChatRoomMemberRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.InviteChatRoomMemberRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* InviteChatRoomMemberRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.InviteChatRoomMemberRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* InviteChatRoomMemberRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.InviteChatRoomMemberRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void InviteChatRoomMemberRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.InviteChatRoomMemberRequest.BaseRequest)
}

// required uint32 MemberCount = 2;
inline bool InviteChatRoomMemberRequest::has_membercount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InviteChatRoomMemberRequest::set_has_membercount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InviteChatRoomMemberRequest::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InviteChatRoomMemberRequest::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
inline ::google::protobuf::uint32 InviteChatRoomMemberRequest::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.InviteChatRoomMemberRequest.MemberCount)
  return membercount_;
}
inline void InviteChatRoomMemberRequest::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.InviteChatRoomMemberRequest.MemberCount)
}

// repeated .micromsg.MemberReq MemberList = 3;
inline int InviteChatRoomMemberRequest::memberlist_size() const {
  return memberlist_.size();
}
inline void InviteChatRoomMemberRequest::clear_memberlist() {
  memberlist_.Clear();
}
inline const ::micromsg::MemberReq& InviteChatRoomMemberRequest::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.InviteChatRoomMemberRequest.MemberList)
  return memberlist_.Get(index);
}
inline ::micromsg::MemberReq* InviteChatRoomMemberRequest::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.InviteChatRoomMemberRequest.MemberList)
  return memberlist_.Mutable(index);
}
inline ::micromsg::MemberReq* InviteChatRoomMemberRequest::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.InviteChatRoomMemberRequest.MemberList)
  return memberlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >*
InviteChatRoomMemberRequest::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.InviteChatRoomMemberRequest.MemberList)
  return &memberlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >&
InviteChatRoomMemberRequest::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.InviteChatRoomMemberRequest.MemberList)
  return memberlist_;
}

// required .micromsg.SKBuiltinString_t ChatRoomName = 4;
inline bool InviteChatRoomMemberRequest::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InviteChatRoomMemberRequest::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InviteChatRoomMemberRequest::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InviteChatRoomMemberRequest::clear_chatroomname() {
  if (chatroomname_ != NULL) chatroomname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_chatroomname();
}
inline const ::micromsg::SKBuiltinString_t& InviteChatRoomMemberRequest::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.InviteChatRoomMemberRequest.ChatRoomName)
  return chatroomname_ != NULL ? *chatroomname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* InviteChatRoomMemberRequest::mutable_chatroomname() {
  set_has_chatroomname();
  if (chatroomname_ == NULL) {
    chatroomname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.InviteChatRoomMemberRequest.ChatRoomName)
  return chatroomname_;
}
inline ::micromsg::SKBuiltinString_t* InviteChatRoomMemberRequest::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.InviteChatRoomMemberRequest.ChatRoomName)
  clear_has_chatroomname();
  ::micromsg::SKBuiltinString_t* temp = chatroomname_;
  chatroomname_ = NULL;
  return temp;
}
inline void InviteChatRoomMemberRequest::set_allocated_chatroomname(::micromsg::SKBuiltinString_t* chatroomname) {
  delete chatroomname_;
  chatroomname_ = chatroomname;
  if (chatroomname) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.InviteChatRoomMemberRequest.ChatRoomName)
}

// -------------------------------------------------------------------

// InviteChatRoomMemberResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool InviteChatRoomMemberResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteChatRoomMemberResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteChatRoomMemberResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteChatRoomMemberResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& InviteChatRoomMemberResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.InviteChatRoomMemberResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* InviteChatRoomMemberResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.InviteChatRoomMemberResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* InviteChatRoomMemberResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.InviteChatRoomMemberResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void InviteChatRoomMemberResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.InviteChatRoomMemberResponse.BaseResponse)
}

// -------------------------------------------------------------------

// LabelPair

// optional string LabelName = 1;
inline bool LabelPair::has_labelname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabelPair::set_has_labelname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabelPair::clear_has_labelname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabelPair::clear_labelname() {
  labelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_labelname();
}
inline const ::std::string& LabelPair::labelname() const {
  // @@protoc_insertion_point(field_get:micromsg.LabelPair.LabelName)
  return labelname_.GetNoArena();
}
inline void LabelPair::set_labelname(const ::std::string& value) {
  set_has_labelname();
  labelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.LabelPair.LabelName)
}
#if LANG_CXX11
inline void LabelPair::set_labelname(::std::string&& value) {
  set_has_labelname();
  labelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.LabelPair.LabelName)
}
#endif
inline void LabelPair::set_labelname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_labelname();
  labelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.LabelPair.LabelName)
}
inline void LabelPair::set_labelname(const char* value, size_t size) {
  set_has_labelname();
  labelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.LabelPair.LabelName)
}
inline ::std::string* LabelPair::mutable_labelname() {
  set_has_labelname();
  // @@protoc_insertion_point(field_mutable:micromsg.LabelPair.LabelName)
  return labelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LabelPair::release_labelname() {
  // @@protoc_insertion_point(field_release:micromsg.LabelPair.LabelName)
  clear_has_labelname();
  return labelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabelPair::set_allocated_labelname(::std::string* labelname) {
  if (labelname != NULL) {
    set_has_labelname();
  } else {
    clear_has_labelname();
  }
  labelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), labelname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.LabelPair.LabelName)
}

// required uint32 LabelID = 2;
inline bool LabelPair::has_labelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LabelPair::set_has_labelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LabelPair::clear_has_labelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LabelPair::clear_labelid() {
  labelid_ = 0u;
  clear_has_labelid();
}
inline ::google::protobuf::uint32 LabelPair::labelid() const {
  // @@protoc_insertion_point(field_get:micromsg.LabelPair.LabelID)
  return labelid_;
}
inline void LabelPair::set_labelid(::google::protobuf::uint32 value) {
  set_has_labelid();
  labelid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.LabelPair.LabelID)
}

// -------------------------------------------------------------------

// AddContactLabelRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool AddContactLabelRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddContactLabelRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddContactLabelRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddContactLabelRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& AddContactLabelRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.AddContactLabelRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* AddContactLabelRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddContactLabelRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* AddContactLabelRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.AddContactLabelRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void AddContactLabelRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddContactLabelRequest.BaseRequest)
}

// required uint32 LabelCount = 2;
inline bool AddContactLabelRequest::has_labelcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddContactLabelRequest::set_has_labelcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddContactLabelRequest::clear_has_labelcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddContactLabelRequest::clear_labelcount() {
  labelcount_ = 0u;
  clear_has_labelcount();
}
inline ::google::protobuf::uint32 AddContactLabelRequest::labelcount() const {
  // @@protoc_insertion_point(field_get:micromsg.AddContactLabelRequest.LabelCount)
  return labelcount_;
}
inline void AddContactLabelRequest::set_labelcount(::google::protobuf::uint32 value) {
  set_has_labelcount();
  labelcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddContactLabelRequest.LabelCount)
}

// repeated .micromsg.LabelPair LabelPairList = 3;
inline int AddContactLabelRequest::labelpairlist_size() const {
  return labelpairlist_.size();
}
inline void AddContactLabelRequest::clear_labelpairlist() {
  labelpairlist_.Clear();
}
inline const ::micromsg::LabelPair& AddContactLabelRequest::labelpairlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.AddContactLabelRequest.LabelPairList)
  return labelpairlist_.Get(index);
}
inline ::micromsg::LabelPair* AddContactLabelRequest::mutable_labelpairlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.AddContactLabelRequest.LabelPairList)
  return labelpairlist_.Mutable(index);
}
inline ::micromsg::LabelPair* AddContactLabelRequest::add_labelpairlist() {
  // @@protoc_insertion_point(field_add:micromsg.AddContactLabelRequest.LabelPairList)
  return labelpairlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::LabelPair >*
AddContactLabelRequest::mutable_labelpairlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.AddContactLabelRequest.LabelPairList)
  return &labelpairlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::LabelPair >&
AddContactLabelRequest::labelpairlist() const {
  // @@protoc_insertion_point(field_list:micromsg.AddContactLabelRequest.LabelPairList)
  return labelpairlist_;
}

// -------------------------------------------------------------------

// AddContactLabelResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool AddContactLabelResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddContactLabelResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddContactLabelResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddContactLabelResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& AddContactLabelResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.AddContactLabelResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* AddContactLabelResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddContactLabelResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* AddContactLabelResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.AddContactLabelResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void AddContactLabelResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddContactLabelResponse.BaseResponse)
}

// required uint32 LabelCount = 2;
inline bool AddContactLabelResponse::has_labelcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddContactLabelResponse::set_has_labelcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddContactLabelResponse::clear_has_labelcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddContactLabelResponse::clear_labelcount() {
  labelcount_ = 0u;
  clear_has_labelcount();
}
inline ::google::protobuf::uint32 AddContactLabelResponse::labelcount() const {
  // @@protoc_insertion_point(field_get:micromsg.AddContactLabelResponse.LabelCount)
  return labelcount_;
}
inline void AddContactLabelResponse::set_labelcount(::google::protobuf::uint32 value) {
  set_has_labelcount();
  labelcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddContactLabelResponse.LabelCount)
}

// repeated .micromsg.LabelPair LabelPairList = 3;
inline int AddContactLabelResponse::labelpairlist_size() const {
  return labelpairlist_.size();
}
inline void AddContactLabelResponse::clear_labelpairlist() {
  labelpairlist_.Clear();
}
inline const ::micromsg::LabelPair& AddContactLabelResponse::labelpairlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.AddContactLabelResponse.LabelPairList)
  return labelpairlist_.Get(index);
}
inline ::micromsg::LabelPair* AddContactLabelResponse::mutable_labelpairlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.AddContactLabelResponse.LabelPairList)
  return labelpairlist_.Mutable(index);
}
inline ::micromsg::LabelPair* AddContactLabelResponse::add_labelpairlist() {
  // @@protoc_insertion_point(field_add:micromsg.AddContactLabelResponse.LabelPairList)
  return labelpairlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::LabelPair >*
AddContactLabelResponse::mutable_labelpairlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.AddContactLabelResponse.LabelPairList)
  return &labelpairlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::LabelPair >&
AddContactLabelResponse::labelpairlist() const {
  // @@protoc_insertion_point(field_list:micromsg.AddContactLabelResponse.LabelPairList)
  return labelpairlist_;
}

// -------------------------------------------------------------------

// DelContactLabelRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool DelContactLabelRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelContactLabelRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelContactLabelRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelContactLabelRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& DelContactLabelRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.DelContactLabelRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* DelContactLabelRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelContactLabelRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* DelContactLabelRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.DelContactLabelRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void DelContactLabelRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelContactLabelRequest.BaseRequest)
}

// optional string LabelIDList = 2;
inline bool DelContactLabelRequest::has_labelidlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelContactLabelRequest::set_has_labelidlist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelContactLabelRequest::clear_has_labelidlist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelContactLabelRequest::clear_labelidlist() {
  labelidlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_labelidlist();
}
inline const ::std::string& DelContactLabelRequest::labelidlist() const {
  // @@protoc_insertion_point(field_get:micromsg.DelContactLabelRequest.LabelIDList)
  return labelidlist_.GetNoArena();
}
inline void DelContactLabelRequest::set_labelidlist(const ::std::string& value) {
  set_has_labelidlist();
  labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DelContactLabelRequest.LabelIDList)
}
#if LANG_CXX11
inline void DelContactLabelRequest::set_labelidlist(::std::string&& value) {
  set_has_labelidlist();
  labelidlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DelContactLabelRequest.LabelIDList)
}
#endif
inline void DelContactLabelRequest::set_labelidlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_labelidlist();
  labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DelContactLabelRequest.LabelIDList)
}
inline void DelContactLabelRequest::set_labelidlist(const char* value, size_t size) {
  set_has_labelidlist();
  labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DelContactLabelRequest.LabelIDList)
}
inline ::std::string* DelContactLabelRequest::mutable_labelidlist() {
  set_has_labelidlist();
  // @@protoc_insertion_point(field_mutable:micromsg.DelContactLabelRequest.LabelIDList)
  return labelidlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DelContactLabelRequest::release_labelidlist() {
  // @@protoc_insertion_point(field_release:micromsg.DelContactLabelRequest.LabelIDList)
  clear_has_labelidlist();
  return labelidlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelContactLabelRequest::set_allocated_labelidlist(::std::string* labelidlist) {
  if (labelidlist != NULL) {
    set_has_labelidlist();
  } else {
    clear_has_labelidlist();
  }
  labelidlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), labelidlist);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelContactLabelRequest.LabelIDList)
}

// -------------------------------------------------------------------

// DelContactLabelResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool DelContactLabelResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelContactLabelResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelContactLabelResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelContactLabelResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& DelContactLabelResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.DelContactLabelResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* DelContactLabelResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelContactLabelResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* DelContactLabelResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.DelContactLabelResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void DelContactLabelResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelContactLabelResponse.BaseResponse)
}

// -------------------------------------------------------------------

// UpdateContactLabelRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool UpdateContactLabelRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateContactLabelRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateContactLabelRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateContactLabelRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& UpdateContactLabelRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.UpdateContactLabelRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* UpdateContactLabelRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UpdateContactLabelRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* UpdateContactLabelRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.UpdateContactLabelRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void UpdateContactLabelRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UpdateContactLabelRequest.BaseRequest)
}

// required .micromsg.LabelPair LabelPair = 2;
inline bool UpdateContactLabelRequest::has_labelpair() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateContactLabelRequest::set_has_labelpair() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateContactLabelRequest::clear_has_labelpair() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateContactLabelRequest::clear_labelpair() {
  if (labelpair_ != NULL) labelpair_->::micromsg::LabelPair::Clear();
  clear_has_labelpair();
}
inline const ::micromsg::LabelPair& UpdateContactLabelRequest::labelpair() const {
  // @@protoc_insertion_point(field_get:micromsg.UpdateContactLabelRequest.LabelPair)
  return labelpair_ != NULL ? *labelpair_
                         : *::micromsg::LabelPair::internal_default_instance();
}
inline ::micromsg::LabelPair* UpdateContactLabelRequest::mutable_labelpair() {
  set_has_labelpair();
  if (labelpair_ == NULL) {
    labelpair_ = new ::micromsg::LabelPair;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UpdateContactLabelRequest.LabelPair)
  return labelpair_;
}
inline ::micromsg::LabelPair* UpdateContactLabelRequest::release_labelpair() {
  // @@protoc_insertion_point(field_release:micromsg.UpdateContactLabelRequest.LabelPair)
  clear_has_labelpair();
  ::micromsg::LabelPair* temp = labelpair_;
  labelpair_ = NULL;
  return temp;
}
inline void UpdateContactLabelRequest::set_allocated_labelpair(::micromsg::LabelPair* labelpair) {
  delete labelpair_;
  labelpair_ = labelpair;
  if (labelpair) {
    set_has_labelpair();
  } else {
    clear_has_labelpair();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UpdateContactLabelRequest.LabelPair)
}

// -------------------------------------------------------------------

// UpdateContactLabelResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool UpdateContactLabelResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateContactLabelResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateContactLabelResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateContactLabelResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& UpdateContactLabelResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UpdateContactLabelResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* UpdateContactLabelResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UpdateContactLabelResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* UpdateContactLabelResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UpdateContactLabelResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void UpdateContactLabelResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UpdateContactLabelResponse.BaseResponse)
}

// -------------------------------------------------------------------

// GetContactLabelListRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GetContactLabelListRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetContactLabelListRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetContactLabelListRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetContactLabelListRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GetContactLabelListRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactLabelListRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GetContactLabelListRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetContactLabelListRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GetContactLabelListRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetContactLabelListRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GetContactLabelListRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetContactLabelListRequest.BaseRequest)
}

// -------------------------------------------------------------------

// GetContactLabelListResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GetContactLabelListResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetContactLabelListResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetContactLabelListResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetContactLabelListResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GetContactLabelListResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactLabelListResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GetContactLabelListResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetContactLabelListResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GetContactLabelListResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetContactLabelListResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GetContactLabelListResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetContactLabelListResponse.BaseResponse)
}

// required uint32 LabelCount = 2;
inline bool GetContactLabelListResponse::has_labelcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetContactLabelListResponse::set_has_labelcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetContactLabelListResponse::clear_has_labelcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetContactLabelListResponse::clear_labelcount() {
  labelcount_ = 0u;
  clear_has_labelcount();
}
inline ::google::protobuf::uint32 GetContactLabelListResponse::labelcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactLabelListResponse.LabelCount)
  return labelcount_;
}
inline void GetContactLabelListResponse::set_labelcount(::google::protobuf::uint32 value) {
  set_has_labelcount();
  labelcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetContactLabelListResponse.LabelCount)
}

// repeated .micromsg.LabelPair LabelPairList = 3;
inline int GetContactLabelListResponse::labelpairlist_size() const {
  return labelpairlist_.size();
}
inline void GetContactLabelListResponse::clear_labelpairlist() {
  labelpairlist_.Clear();
}
inline const ::micromsg::LabelPair& GetContactLabelListResponse::labelpairlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetContactLabelListResponse.LabelPairList)
  return labelpairlist_.Get(index);
}
inline ::micromsg::LabelPair* GetContactLabelListResponse::mutable_labelpairlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetContactLabelListResponse.LabelPairList)
  return labelpairlist_.Mutable(index);
}
inline ::micromsg::LabelPair* GetContactLabelListResponse::add_labelpairlist() {
  // @@protoc_insertion_point(field_add:micromsg.GetContactLabelListResponse.LabelPairList)
  return labelpairlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::LabelPair >*
GetContactLabelListResponse::mutable_labelpairlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetContactLabelListResponse.LabelPairList)
  return &labelpairlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::LabelPair >&
GetContactLabelListResponse::labelpairlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GetContactLabelListResponse.LabelPairList)
  return labelpairlist_;
}

// -------------------------------------------------------------------

// UserLabelInfo

// optional string UserName = 1;
inline bool UserLabelInfo::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLabelInfo::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLabelInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLabelInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& UserLabelInfo::username() const {
  // @@protoc_insertion_point(field_get:micromsg.UserLabelInfo.UserName)
  return username_.GetNoArena();
}
inline void UserLabelInfo::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserLabelInfo.UserName)
}
#if LANG_CXX11
inline void UserLabelInfo::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserLabelInfo.UserName)
}
#endif
inline void UserLabelInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserLabelInfo.UserName)
}
inline void UserLabelInfo::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserLabelInfo.UserName)
}
inline ::std::string* UserLabelInfo::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.UserLabelInfo.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLabelInfo::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.UserLabelInfo.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLabelInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserLabelInfo.UserName)
}

// optional string LabelIDList = 2;
inline bool UserLabelInfo::has_labelidlist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLabelInfo::set_has_labelidlist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLabelInfo::clear_has_labelidlist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLabelInfo::clear_labelidlist() {
  labelidlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_labelidlist();
}
inline const ::std::string& UserLabelInfo::labelidlist() const {
  // @@protoc_insertion_point(field_get:micromsg.UserLabelInfo.LabelIDList)
  return labelidlist_.GetNoArena();
}
inline void UserLabelInfo::set_labelidlist(const ::std::string& value) {
  set_has_labelidlist();
  labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserLabelInfo.LabelIDList)
}
#if LANG_CXX11
inline void UserLabelInfo::set_labelidlist(::std::string&& value) {
  set_has_labelidlist();
  labelidlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserLabelInfo.LabelIDList)
}
#endif
inline void UserLabelInfo::set_labelidlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_labelidlist();
  labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserLabelInfo.LabelIDList)
}
inline void UserLabelInfo::set_labelidlist(const char* value, size_t size) {
  set_has_labelidlist();
  labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserLabelInfo.LabelIDList)
}
inline ::std::string* UserLabelInfo::mutable_labelidlist() {
  set_has_labelidlist();
  // @@protoc_insertion_point(field_mutable:micromsg.UserLabelInfo.LabelIDList)
  return labelidlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLabelInfo::release_labelidlist() {
  // @@protoc_insertion_point(field_release:micromsg.UserLabelInfo.LabelIDList)
  clear_has_labelidlist();
  return labelidlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLabelInfo::set_allocated_labelidlist(::std::string* labelidlist) {
  if (labelidlist != NULL) {
    set_has_labelidlist();
  } else {
    clear_has_labelidlist();
  }
  labelidlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), labelidlist);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserLabelInfo.LabelIDList)
}

// -------------------------------------------------------------------

// ModifyContactLabelListRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool ModifyContactLabelListRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModifyContactLabelListRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModifyContactLabelListRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModifyContactLabelListRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& ModifyContactLabelListRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ModifyContactLabelListRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* ModifyContactLabelListRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModifyContactLabelListRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* ModifyContactLabelListRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ModifyContactLabelListRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void ModifyContactLabelListRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModifyContactLabelListRequest.BaseRequest)
}

// required uint32 UserCount = 2;
inline bool ModifyContactLabelListRequest::has_usercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModifyContactLabelListRequest::set_has_usercount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModifyContactLabelListRequest::clear_has_usercount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModifyContactLabelListRequest::clear_usercount() {
  usercount_ = 0u;
  clear_has_usercount();
}
inline ::google::protobuf::uint32 ModifyContactLabelListRequest::usercount() const {
  // @@protoc_insertion_point(field_get:micromsg.ModifyContactLabelListRequest.UserCount)
  return usercount_;
}
inline void ModifyContactLabelListRequest::set_usercount(::google::protobuf::uint32 value) {
  set_has_usercount();
  usercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModifyContactLabelListRequest.UserCount)
}

// repeated .micromsg.UserLabelInfo UserLabelInfoList = 3;
inline int ModifyContactLabelListRequest::userlabelinfolist_size() const {
  return userlabelinfolist_.size();
}
inline void ModifyContactLabelListRequest::clear_userlabelinfolist() {
  userlabelinfolist_.Clear();
}
inline const ::micromsg::UserLabelInfo& ModifyContactLabelListRequest::userlabelinfolist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ModifyContactLabelListRequest.UserLabelInfoList)
  return userlabelinfolist_.Get(index);
}
inline ::micromsg::UserLabelInfo* ModifyContactLabelListRequest::mutable_userlabelinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.ModifyContactLabelListRequest.UserLabelInfoList)
  return userlabelinfolist_.Mutable(index);
}
inline ::micromsg::UserLabelInfo* ModifyContactLabelListRequest::add_userlabelinfolist() {
  // @@protoc_insertion_point(field_add:micromsg.ModifyContactLabelListRequest.UserLabelInfoList)
  return userlabelinfolist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::UserLabelInfo >*
ModifyContactLabelListRequest::mutable_userlabelinfolist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ModifyContactLabelListRequest.UserLabelInfoList)
  return &userlabelinfolist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::UserLabelInfo >&
ModifyContactLabelListRequest::userlabelinfolist() const {
  // @@protoc_insertion_point(field_list:micromsg.ModifyContactLabelListRequest.UserLabelInfoList)
  return userlabelinfolist_;
}

// -------------------------------------------------------------------

// ModifyContactLabelListResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool ModifyContactLabelListResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModifyContactLabelListResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModifyContactLabelListResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModifyContactLabelListResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& ModifyContactLabelListResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ModifyContactLabelListResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* ModifyContactLabelListResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModifyContactLabelListResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* ModifyContactLabelListResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ModifyContactLabelListResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void ModifyContactLabelListResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModifyContactLabelListResponse.BaseResponse)
}

// -------------------------------------------------------------------

// TransferChatRoomOwnerRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool TransferChatRoomOwnerRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransferChatRoomOwnerRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransferChatRoomOwnerRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransferChatRoomOwnerRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& TransferChatRoomOwnerRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.TransferChatRoomOwnerRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* TransferChatRoomOwnerRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TransferChatRoomOwnerRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* TransferChatRoomOwnerRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.TransferChatRoomOwnerRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void TransferChatRoomOwnerRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TransferChatRoomOwnerRequest.BaseRequest)
}

// optional string ChatRoomName = 2;
inline bool TransferChatRoomOwnerRequest::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransferChatRoomOwnerRequest::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransferChatRoomOwnerRequest::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransferChatRoomOwnerRequest::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
inline const ::std::string& TransferChatRoomOwnerRequest::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.TransferChatRoomOwnerRequest.ChatRoomName)
  return chatroomname_.GetNoArena();
}
inline void TransferChatRoomOwnerRequest::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.TransferChatRoomOwnerRequest.ChatRoomName)
}
#if LANG_CXX11
inline void TransferChatRoomOwnerRequest::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.TransferChatRoomOwnerRequest.ChatRoomName)
}
#endif
inline void TransferChatRoomOwnerRequest::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.TransferChatRoomOwnerRequest.ChatRoomName)
}
inline void TransferChatRoomOwnerRequest::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.TransferChatRoomOwnerRequest.ChatRoomName)
}
inline ::std::string* TransferChatRoomOwnerRequest::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.TransferChatRoomOwnerRequest.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferChatRoomOwnerRequest::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.TransferChatRoomOwnerRequest.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferChatRoomOwnerRequest::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.TransferChatRoomOwnerRequest.ChatRoomName)
}

// optional string NewOwnerUserName = 3;
inline bool TransferChatRoomOwnerRequest::has_newownerusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransferChatRoomOwnerRequest::set_has_newownerusername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransferChatRoomOwnerRequest::clear_has_newownerusername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransferChatRoomOwnerRequest::clear_newownerusername() {
  newownerusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_newownerusername();
}
inline const ::std::string& TransferChatRoomOwnerRequest::newownerusername() const {
  // @@protoc_insertion_point(field_get:micromsg.TransferChatRoomOwnerRequest.NewOwnerUserName)
  return newownerusername_.GetNoArena();
}
inline void TransferChatRoomOwnerRequest::set_newownerusername(const ::std::string& value) {
  set_has_newownerusername();
  newownerusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.TransferChatRoomOwnerRequest.NewOwnerUserName)
}
#if LANG_CXX11
inline void TransferChatRoomOwnerRequest::set_newownerusername(::std::string&& value) {
  set_has_newownerusername();
  newownerusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.TransferChatRoomOwnerRequest.NewOwnerUserName)
}
#endif
inline void TransferChatRoomOwnerRequest::set_newownerusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_newownerusername();
  newownerusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.TransferChatRoomOwnerRequest.NewOwnerUserName)
}
inline void TransferChatRoomOwnerRequest::set_newownerusername(const char* value, size_t size) {
  set_has_newownerusername();
  newownerusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.TransferChatRoomOwnerRequest.NewOwnerUserName)
}
inline ::std::string* TransferChatRoomOwnerRequest::mutable_newownerusername() {
  set_has_newownerusername();
  // @@protoc_insertion_point(field_mutable:micromsg.TransferChatRoomOwnerRequest.NewOwnerUserName)
  return newownerusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferChatRoomOwnerRequest::release_newownerusername() {
  // @@protoc_insertion_point(field_release:micromsg.TransferChatRoomOwnerRequest.NewOwnerUserName)
  clear_has_newownerusername();
  return newownerusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferChatRoomOwnerRequest::set_allocated_newownerusername(::std::string* newownerusername) {
  if (newownerusername != NULL) {
    set_has_newownerusername();
  } else {
    clear_has_newownerusername();
  }
  newownerusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), newownerusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.TransferChatRoomOwnerRequest.NewOwnerUserName)
}

// -------------------------------------------------------------------

// TransferChatRoomOwnerResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool TransferChatRoomOwnerResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransferChatRoomOwnerResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransferChatRoomOwnerResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransferChatRoomOwnerResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& TransferChatRoomOwnerResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.TransferChatRoomOwnerResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* TransferChatRoomOwnerResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TransferChatRoomOwnerResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* TransferChatRoomOwnerResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.TransferChatRoomOwnerResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void TransferChatRoomOwnerResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TransferChatRoomOwnerResponse.BaseResponse)
}

// -------------------------------------------------------------------

// GetChatRoomAnnouncementRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GetChatRoomAnnouncementRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetChatRoomAnnouncementRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetChatRoomAnnouncementRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetChatRoomAnnouncementRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GetChatRoomAnnouncementRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomAnnouncementRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GetChatRoomAnnouncementRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomAnnouncementRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GetChatRoomAnnouncementRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomAnnouncementRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GetChatRoomAnnouncementRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomAnnouncementRequest.BaseRequest)
}

// optional string ChatRoomName = 2;
inline bool GetChatRoomAnnouncementRequest::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetChatRoomAnnouncementRequest::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetChatRoomAnnouncementRequest::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetChatRoomAnnouncementRequest::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
inline const ::std::string& GetChatRoomAnnouncementRequest::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomAnnouncementRequest.ChatRoomName)
  return chatroomname_.GetNoArena();
}
inline void GetChatRoomAnnouncementRequest::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomAnnouncementRequest.ChatRoomName)
}
#if LANG_CXX11
inline void GetChatRoomAnnouncementRequest::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomAnnouncementRequest.ChatRoomName)
}
#endif
inline void GetChatRoomAnnouncementRequest::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomAnnouncementRequest.ChatRoomName)
}
inline void GetChatRoomAnnouncementRequest::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomAnnouncementRequest.ChatRoomName)
}
inline ::std::string* GetChatRoomAnnouncementRequest::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomAnnouncementRequest.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatRoomAnnouncementRequest::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomAnnouncementRequest.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatRoomAnnouncementRequest::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomAnnouncementRequest.ChatRoomName)
}

// -------------------------------------------------------------------

// GetChatRoomAnnouncementResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GetChatRoomAnnouncementResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetChatRoomAnnouncementResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetChatRoomAnnouncementResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetChatRoomAnnouncementResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GetChatRoomAnnouncementResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomAnnouncementResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GetChatRoomAnnouncementResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomAnnouncementResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GetChatRoomAnnouncementResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomAnnouncementResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GetChatRoomAnnouncementResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomAnnouncementResponse.BaseResponse)
}

// optional string Announcement = 2;
inline bool GetChatRoomAnnouncementResponse::has_announcement() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetChatRoomAnnouncementResponse::set_has_announcement() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetChatRoomAnnouncementResponse::clear_has_announcement() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetChatRoomAnnouncementResponse::clear_announcement() {
  announcement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_announcement();
}
inline const ::std::string& GetChatRoomAnnouncementResponse::announcement() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomAnnouncementResponse.Announcement)
  return announcement_.GetNoArena();
}
inline void GetChatRoomAnnouncementResponse::set_announcement(const ::std::string& value) {
  set_has_announcement();
  announcement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomAnnouncementResponse.Announcement)
}
#if LANG_CXX11
inline void GetChatRoomAnnouncementResponse::set_announcement(::std::string&& value) {
  set_has_announcement();
  announcement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomAnnouncementResponse.Announcement)
}
#endif
inline void GetChatRoomAnnouncementResponse::set_announcement(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_announcement();
  announcement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomAnnouncementResponse.Announcement)
}
inline void GetChatRoomAnnouncementResponse::set_announcement(const char* value, size_t size) {
  set_has_announcement();
  announcement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomAnnouncementResponse.Announcement)
}
inline ::std::string* GetChatRoomAnnouncementResponse::mutable_announcement() {
  set_has_announcement();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomAnnouncementResponse.Announcement)
  return announcement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatRoomAnnouncementResponse::release_announcement() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomAnnouncementResponse.Announcement)
  clear_has_announcement();
  return announcement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatRoomAnnouncementResponse::set_allocated_announcement(::std::string* announcement) {
  if (announcement != NULL) {
    set_has_announcement();
  } else {
    clear_has_announcement();
  }
  announcement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), announcement);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomAnnouncementResponse.Announcement)
}

// -------------------------------------------------------------------

// SetChatRoomAnnouncementRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool SetChatRoomAnnouncementRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetChatRoomAnnouncementRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetChatRoomAnnouncementRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetChatRoomAnnouncementRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& SetChatRoomAnnouncementRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SetChatRoomAnnouncementRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* SetChatRoomAnnouncementRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SetChatRoomAnnouncementRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* SetChatRoomAnnouncementRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SetChatRoomAnnouncementRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void SetChatRoomAnnouncementRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetChatRoomAnnouncementRequest.BaseRequest)
}

// optional string ChatRoomName = 2;
inline bool SetChatRoomAnnouncementRequest::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetChatRoomAnnouncementRequest::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetChatRoomAnnouncementRequest::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetChatRoomAnnouncementRequest::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
inline const ::std::string& SetChatRoomAnnouncementRequest::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.SetChatRoomAnnouncementRequest.ChatRoomName)
  return chatroomname_.GetNoArena();
}
inline void SetChatRoomAnnouncementRequest::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SetChatRoomAnnouncementRequest.ChatRoomName)
}
#if LANG_CXX11
inline void SetChatRoomAnnouncementRequest::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SetChatRoomAnnouncementRequest.ChatRoomName)
}
#endif
inline void SetChatRoomAnnouncementRequest::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SetChatRoomAnnouncementRequest.ChatRoomName)
}
inline void SetChatRoomAnnouncementRequest::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SetChatRoomAnnouncementRequest.ChatRoomName)
}
inline ::std::string* SetChatRoomAnnouncementRequest::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.SetChatRoomAnnouncementRequest.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetChatRoomAnnouncementRequest::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.SetChatRoomAnnouncementRequest.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetChatRoomAnnouncementRequest::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetChatRoomAnnouncementRequest.ChatRoomName)
}

// optional string Announcement = 3;
inline bool SetChatRoomAnnouncementRequest::has_announcement() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetChatRoomAnnouncementRequest::set_has_announcement() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetChatRoomAnnouncementRequest::clear_has_announcement() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetChatRoomAnnouncementRequest::clear_announcement() {
  announcement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_announcement();
}
inline const ::std::string& SetChatRoomAnnouncementRequest::announcement() const {
  // @@protoc_insertion_point(field_get:micromsg.SetChatRoomAnnouncementRequest.Announcement)
  return announcement_.GetNoArena();
}
inline void SetChatRoomAnnouncementRequest::set_announcement(const ::std::string& value) {
  set_has_announcement();
  announcement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SetChatRoomAnnouncementRequest.Announcement)
}
#if LANG_CXX11
inline void SetChatRoomAnnouncementRequest::set_announcement(::std::string&& value) {
  set_has_announcement();
  announcement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SetChatRoomAnnouncementRequest.Announcement)
}
#endif
inline void SetChatRoomAnnouncementRequest::set_announcement(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_announcement();
  announcement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SetChatRoomAnnouncementRequest.Announcement)
}
inline void SetChatRoomAnnouncementRequest::set_announcement(const char* value, size_t size) {
  set_has_announcement();
  announcement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SetChatRoomAnnouncementRequest.Announcement)
}
inline ::std::string* SetChatRoomAnnouncementRequest::mutable_announcement() {
  set_has_announcement();
  // @@protoc_insertion_point(field_mutable:micromsg.SetChatRoomAnnouncementRequest.Announcement)
  return announcement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetChatRoomAnnouncementRequest::release_announcement() {
  // @@protoc_insertion_point(field_release:micromsg.SetChatRoomAnnouncementRequest.Announcement)
  clear_has_announcement();
  return announcement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetChatRoomAnnouncementRequest::set_allocated_announcement(::std::string* announcement) {
  if (announcement != NULL) {
    set_has_announcement();
  } else {
    clear_has_announcement();
  }
  announcement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), announcement);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetChatRoomAnnouncementRequest.Announcement)
}

// optional uint32 SetAnnouncementFlag = 4;
inline bool SetChatRoomAnnouncementRequest::has_setannouncementflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SetChatRoomAnnouncementRequest::set_has_setannouncementflag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SetChatRoomAnnouncementRequest::clear_has_setannouncementflag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SetChatRoomAnnouncementRequest::clear_setannouncementflag() {
  setannouncementflag_ = 0u;
  clear_has_setannouncementflag();
}
inline ::google::protobuf::uint32 SetChatRoomAnnouncementRequest::setannouncementflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SetChatRoomAnnouncementRequest.SetAnnouncementFlag)
  return setannouncementflag_;
}
inline void SetChatRoomAnnouncementRequest::set_setannouncementflag(::google::protobuf::uint32 value) {
  set_has_setannouncementflag();
  setannouncementflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SetChatRoomAnnouncementRequest.SetAnnouncementFlag)
}

// -------------------------------------------------------------------

// SetChatRoomAnnouncementResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool SetChatRoomAnnouncementResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetChatRoomAnnouncementResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetChatRoomAnnouncementResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetChatRoomAnnouncementResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& SetChatRoomAnnouncementResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SetChatRoomAnnouncementResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* SetChatRoomAnnouncementResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SetChatRoomAnnouncementResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* SetChatRoomAnnouncementResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SetChatRoomAnnouncementResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void SetChatRoomAnnouncementResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetChatRoomAnnouncementResponse.BaseResponse)
}

// -------------------------------------------------------------------

// GetChatRoomInfoDetailRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GetChatRoomInfoDetailRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetChatRoomInfoDetailRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetChatRoomInfoDetailRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetChatRoomInfoDetailRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GetChatRoomInfoDetailRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomInfoDetailRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GetChatRoomInfoDetailRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomInfoDetailRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GetChatRoomInfoDetailRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomInfoDetailRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GetChatRoomInfoDetailRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomInfoDetailRequest.BaseRequest)
}

// optional string ChatRoomName = 2;
inline bool GetChatRoomInfoDetailRequest::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetChatRoomInfoDetailRequest::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetChatRoomInfoDetailRequest::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetChatRoomInfoDetailRequest::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
inline const ::std::string& GetChatRoomInfoDetailRequest::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomInfoDetailRequest.ChatRoomName)
  return chatroomname_.GetNoArena();
}
inline void GetChatRoomInfoDetailRequest::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomInfoDetailRequest.ChatRoomName)
}
#if LANG_CXX11
inline void GetChatRoomInfoDetailRequest::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomInfoDetailRequest.ChatRoomName)
}
#endif
inline void GetChatRoomInfoDetailRequest::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomInfoDetailRequest.ChatRoomName)
}
inline void GetChatRoomInfoDetailRequest::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomInfoDetailRequest.ChatRoomName)
}
inline ::std::string* GetChatRoomInfoDetailRequest::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomInfoDetailRequest.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatRoomInfoDetailRequest::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomInfoDetailRequest.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatRoomInfoDetailRequest::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomInfoDetailRequest.ChatRoomName)
}

// -------------------------------------------------------------------

// GetChatRoomInfoDetailResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GetChatRoomInfoDetailResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetChatRoomInfoDetailResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetChatRoomInfoDetailResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetChatRoomInfoDetailResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GetChatRoomInfoDetailResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomInfoDetailResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GetChatRoomInfoDetailResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomInfoDetailResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GetChatRoomInfoDetailResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomInfoDetailResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GetChatRoomInfoDetailResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomInfoDetailResponse.BaseResponse)
}

// optional string Announcement = 2;
inline bool GetChatRoomInfoDetailResponse::has_announcement() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetChatRoomInfoDetailResponse::set_has_announcement() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetChatRoomInfoDetailResponse::clear_has_announcement() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetChatRoomInfoDetailResponse::clear_announcement() {
  announcement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_announcement();
}
inline const ::std::string& GetChatRoomInfoDetailResponse::announcement() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomInfoDetailResponse.Announcement)
  return announcement_.GetNoArena();
}
inline void GetChatRoomInfoDetailResponse::set_announcement(const ::std::string& value) {
  set_has_announcement();
  announcement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomInfoDetailResponse.Announcement)
}
#if LANG_CXX11
inline void GetChatRoomInfoDetailResponse::set_announcement(::std::string&& value) {
  set_has_announcement();
  announcement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomInfoDetailResponse.Announcement)
}
#endif
inline void GetChatRoomInfoDetailResponse::set_announcement(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_announcement();
  announcement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomInfoDetailResponse.Announcement)
}
inline void GetChatRoomInfoDetailResponse::set_announcement(const char* value, size_t size) {
  set_has_announcement();
  announcement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomInfoDetailResponse.Announcement)
}
inline ::std::string* GetChatRoomInfoDetailResponse::mutable_announcement() {
  set_has_announcement();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomInfoDetailResponse.Announcement)
  return announcement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatRoomInfoDetailResponse::release_announcement() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomInfoDetailResponse.Announcement)
  clear_has_announcement();
  return announcement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatRoomInfoDetailResponse::set_allocated_announcement(::std::string* announcement) {
  if (announcement != NULL) {
    set_has_announcement();
  } else {
    clear_has_announcement();
  }
  announcement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), announcement);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomInfoDetailResponse.Announcement)
}

// optional uint32 ChatRoomInfoVersion = 3;
inline bool GetChatRoomInfoDetailResponse::has_chatroominfoversion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetChatRoomInfoDetailResponse::set_has_chatroominfoversion() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetChatRoomInfoDetailResponse::clear_has_chatroominfoversion() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetChatRoomInfoDetailResponse::clear_chatroominfoversion() {
  chatroominfoversion_ = 0u;
  clear_has_chatroominfoversion();
}
inline ::google::protobuf::uint32 GetChatRoomInfoDetailResponse::chatroominfoversion() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomInfoDetailResponse.ChatRoomInfoVersion)
  return chatroominfoversion_;
}
inline void GetChatRoomInfoDetailResponse::set_chatroominfoversion(::google::protobuf::uint32 value) {
  set_has_chatroominfoversion();
  chatroominfoversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomInfoDetailResponse.ChatRoomInfoVersion)
}

// optional string AnnouncementEditor = 4;
inline bool GetChatRoomInfoDetailResponse::has_announcementeditor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetChatRoomInfoDetailResponse::set_has_announcementeditor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetChatRoomInfoDetailResponse::clear_has_announcementeditor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetChatRoomInfoDetailResponse::clear_announcementeditor() {
  announcementeditor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_announcementeditor();
}
inline const ::std::string& GetChatRoomInfoDetailResponse::announcementeditor() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomInfoDetailResponse.AnnouncementEditor)
  return announcementeditor_.GetNoArena();
}
inline void GetChatRoomInfoDetailResponse::set_announcementeditor(const ::std::string& value) {
  set_has_announcementeditor();
  announcementeditor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomInfoDetailResponse.AnnouncementEditor)
}
#if LANG_CXX11
inline void GetChatRoomInfoDetailResponse::set_announcementeditor(::std::string&& value) {
  set_has_announcementeditor();
  announcementeditor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetChatRoomInfoDetailResponse.AnnouncementEditor)
}
#endif
inline void GetChatRoomInfoDetailResponse::set_announcementeditor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_announcementeditor();
  announcementeditor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetChatRoomInfoDetailResponse.AnnouncementEditor)
}
inline void GetChatRoomInfoDetailResponse::set_announcementeditor(const char* value, size_t size) {
  set_has_announcementeditor();
  announcementeditor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetChatRoomInfoDetailResponse.AnnouncementEditor)
}
inline ::std::string* GetChatRoomInfoDetailResponse::mutable_announcementeditor() {
  set_has_announcementeditor();
  // @@protoc_insertion_point(field_mutable:micromsg.GetChatRoomInfoDetailResponse.AnnouncementEditor)
  return announcementeditor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatRoomInfoDetailResponse::release_announcementeditor() {
  // @@protoc_insertion_point(field_release:micromsg.GetChatRoomInfoDetailResponse.AnnouncementEditor)
  clear_has_announcementeditor();
  return announcementeditor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatRoomInfoDetailResponse::set_allocated_announcementeditor(::std::string* announcementeditor) {
  if (announcementeditor != NULL) {
    set_has_announcementeditor();
  } else {
    clear_has_announcementeditor();
  }
  announcementeditor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), announcementeditor);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetChatRoomInfoDetailResponse.AnnouncementEditor)
}

// optional uint32 AnnouncementPublishTime = 5;
inline bool GetChatRoomInfoDetailResponse::has_announcementpublishtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetChatRoomInfoDetailResponse::set_has_announcementpublishtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetChatRoomInfoDetailResponse::clear_has_announcementpublishtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetChatRoomInfoDetailResponse::clear_announcementpublishtime() {
  announcementpublishtime_ = 0u;
  clear_has_announcementpublishtime();
}
inline ::google::protobuf::uint32 GetChatRoomInfoDetailResponse::announcementpublishtime() const {
  // @@protoc_insertion_point(field_get:micromsg.GetChatRoomInfoDetailResponse.AnnouncementPublishTime)
  return announcementpublishtime_;
}
inline void GetChatRoomInfoDetailResponse::set_announcementpublishtime(::google::protobuf::uint32 value) {
  set_has_announcementpublishtime();
  announcementpublishtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetChatRoomInfoDetailResponse.AnnouncementPublishTime)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace micromsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mmcontact_2eproto__INCLUDED
