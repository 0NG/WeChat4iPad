// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmemotion.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mmemotion.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micromsg {
class EmotionCDNUrlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmotionCDNUrl> {
} _EmotionCDNUrl_default_instance_;
class EmotionSummaryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmotionSummary> {
} _EmotionSummary_default_instance_;
class PackThumbExtDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PackThumbExt> {
} _PackThumbExt_default_instance_;
class EmotionDetailDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmotionDetail> {
} _EmotionDetail_default_instance_;
class EmotionBannerImgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmotionBannerImg> {
} _EmotionBannerImg_default_instance_;
class EmotionBannerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmotionBanner> {
} _EmotionBanner_default_instance_;
class EmotionCellDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmotionCell> {
} _EmotionCell_default_instance_;
class GetEmotionListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetEmotionListRequest> {
} _GetEmotionListRequest_default_instance_;
class GetEmotionListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetEmotionListResponse> {
} _GetEmotionListResponse_default_instance_;
class GetEmotionDetailRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetEmotionDetailRequest> {
} _GetEmotionDetailRequest_default_instance_;
class GetEmotionDetailResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetEmotionDetailResponse> {
} _GetEmotionDetailResponse_default_instance_;
class VerifyPurchaseRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VerifyPurchaseRequest> {
} _VerifyPurchaseRequest_default_instance_;
class VerifyPurchaseResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VerifyPurchaseResponse> {
} _VerifyPurchaseResponse_default_instance_;
class ModEmotionPackRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModEmotionPackRequest> {
} _ModEmotionPackRequest_default_instance_;
class ModEmotionPackResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModEmotionPackResponse> {
} _ModEmotionPackResponse_default_instance_;
class PreparePurchaseRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PreparePurchaseRequest> {
} _PreparePurchaseRequest_default_instance_;
class PreparePurchaseResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PreparePurchaseResponse> {
} _PreparePurchaseResponse_default_instance_;
class ExchangeEmotionPackRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExchangeEmotionPackRequest> {
} _ExchangeEmotionPackRequest_default_instance_;
class ExchangeEmotionPackResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExchangeEmotionPackResponse> {
} _ExchangeEmotionPackResponse_default_instance_;
class CancelPurchaseRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CancelPurchaseRequest> {
} _CancelPurchaseRequest_default_instance_;
class CancelPurchaseResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CancelPurchaseResponse> {
} _CancelPurchaseResponse_default_instance_;
class EmotionMemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmotionMember> {
} _EmotionMember_default_instance_;
class MemberStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemberStatus> {
} _MemberStatus_default_instance_;
class VerifyEmotionPresentationRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VerifyEmotionPresentationRequest> {
} _VerifyEmotionPresentationRequest_default_instance_;
class VerifyEmotionPresentationResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VerifyEmotionPresentationResponse> {
} _VerifyEmotionPresentationResponse_default_instance_;
class LangDescDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LangDesc> {
} _LangDesc_default_instance_;
class EmotionDescDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmotionDesc> {
} _EmotionDesc_default_instance_;
class GetEmotionDescRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetEmotionDescRequest> {
} _GetEmotionDescRequest_default_instance_;
class GetEmotionDescResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetEmotionDescResponse> {
} _GetEmotionDescResponse_default_instance_;

namespace protobuf_mmemotion_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[29];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionCDNUrl, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionCDNUrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionCDNUrl, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionCDNUrl, aeskey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionCDNUrl, filesize_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionSummary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionSummary, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionSummary, iconurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionSummary, packname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionSummary, packdesc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionSummary, packauthinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionSummary, packprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionSummary, packtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionSummary, packflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionSummary, coverurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionSummary, packexpire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionSummary, packcopyright_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionSummary, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionSummary, panelurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionSummary, pricenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionSummary, pricetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionSummary, sendinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionSummary, timelimitstr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionSummary, introduce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionSummary, taguri_),
  0,
  1,
  2,
  3,
  4,
  5,
  15,
  16,
  6,
  17,
  7,
  18,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackThumbExt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackThumbExt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackThumbExt, previewurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackThumbExt, desc_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, iconurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, packname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, packdesc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, packauthinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, packprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, packtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, packflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, packthumbcnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, packthumblist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, coverurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, packexpire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, packcopyright_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, pricenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, pricetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, panelurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, consumeproductid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, thumbextcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, thumbextlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, timelimitstr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, sharedesc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDetail, oldredirecturl_),
  0,
  1,
  2,
  3,
  4,
  5,
  15,
  16,
  17,
  ~0u,
  6,
  18,
  7,
  8,
  9,
  10,
  11,
  19,
  ~0u,
  20,
  12,
  13,
  14,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionBannerImg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionBannerImg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionBannerImg, imgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionBannerImg, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionBannerImg, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionBannerImg, stripurl_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionBanner, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionBanner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionBanner, bannersummary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionBanner, bannerimg_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionCell, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionCell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionCell, celltitle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionCell, reqtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionCell, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionCell, iconurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionCell, tagurl_),
  0,
  3,
  4,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionListRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionListRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionListRequest, reqbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionListRequest, reqtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionListRequest, scene_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionListResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionListResponse, reqbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionListResponse, emotioncount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionListResponse, emotionlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionListResponse, banner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionListResponse, newbannercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionListResponse, newbannerlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionListResponse, cellcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionListResponse, celllist_),
  0,
  1,
  3,
  ~0u,
  2,
  4,
  ~0u,
  5,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDetailRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDetailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDetailRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDetailRequest, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDetailRequest, scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDetailRequest, version_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDetailResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDetailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDetailResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDetailResponse, emotiondetail_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPurchaseRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPurchaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPurchaseRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPurchaseRequest, receipt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPurchaseRequest, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPurchaseRequest, verifytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPurchaseRequest, paytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPurchaseRequest, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPurchaseRequest, currencytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPurchaseRequest, billno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPurchaseRequest, paytime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPurchaseRequest, receiptsig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPurchaseRequest, quantity_),
  5,
  6,
  0,
  7,
  8,
  1,
  2,
  3,
  9,
  4,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPurchaseResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPurchaseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPurchaseResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPurchaseResponse, seriesid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPurchaseResponse, biztype_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModEmotionPackRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModEmotionPackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModEmotionPackRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModEmotionPackRequest, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModEmotionPackRequest, opcode_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModEmotionPackResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModEmotionPackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModEmotionPackResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreparePurchaseRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreparePurchaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreparePurchaseRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreparePurchaseRequest, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreparePurchaseRequest, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreparePurchaseRequest, currencytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreparePurchaseRequest, paytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreparePurchaseRequest, extinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreparePurchaseRequest, quantity_),
  4,
  0,
  1,
  2,
  5,
  3,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreparePurchaseResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreparePurchaseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreparePurchaseResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreparePurchaseResponse, billno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreparePurchaseResponse, tradetoken4tenpay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreparePurchaseResponse, partner4tenpay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreparePurchaseResponse, sign4tenpay_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeEmotionPackRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeEmotionPackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeEmotionPackRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeEmotionPackRequest, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeEmotionPackRequest, seriesid_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeEmotionPackResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeEmotionPackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeEmotionPackResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeEmotionPackResponse, downloadinfo_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelPurchaseRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelPurchaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelPurchaseRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelPurchaseRequest, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelPurchaseRequest, verifytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelPurchaseRequest, paytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelPurchaseRequest, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelPurchaseRequest, currencytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelPurchaseRequest, billno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelPurchaseRequest, paytime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelPurchaseRequest, errorcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelPurchaseRequest, errordescription_),
  5,
  0,
  6,
  7,
  1,
  2,
  3,
  8,
  9,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelPurchaseResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelPurchaseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelPurchaseResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionMember, username_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberStatus, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberStatus, status_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyEmotionPresentationRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyEmotionPresentationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyEmotionPresentationRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyEmotionPresentationRequest, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyEmotionPresentationRequest, membercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyEmotionPresentationRequest, memberlist_),
  1,
  0,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyEmotionPresentationResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyEmotionPresentationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyEmotionPresentationResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyEmotionPresentationResponse, membercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyEmotionPresentationResponse, statuslist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LangDesc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LangDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LangDesc, lang_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LangDesc, desc_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDesc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDesc, md5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDesc, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDesc, list_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDescRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDescRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDescRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDescRequest, productid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDescResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDescResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDescResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDescResponse, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDescResponse, list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDescResponse, clickflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDescResponse, buttondesc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDescResponse, downloadflag_),
  1,
  2,
  ~0u,
  3,
  0,
  4,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(EmotionCDNUrl)},
  { 11, 35, sizeof(EmotionSummary)},
  { 54, 61, sizeof(PackThumbExt)},
  { 63, 91, sizeof(EmotionDetail)},
  { 114, 123, sizeof(EmotionBannerImg)},
  { 127, 134, sizeof(EmotionBanner)},
  { 136, 146, sizeof(EmotionCell)},
  { 151, 160, sizeof(GetEmotionListRequest)},
  { 164, 178, sizeof(GetEmotionListResponse)},
  { 187, 196, sizeof(GetEmotionDetailRequest)},
  { 200, 207, sizeof(GetEmotionDetailResponse)},
  { 209, 225, sizeof(VerifyPurchaseRequest)},
  { 236, 244, sizeof(VerifyPurchaseResponse)},
  { 247, 255, sizeof(ModEmotionPackRequest)},
  { 258, 264, sizeof(ModEmotionPackResponse)},
  { 265, 277, sizeof(PreparePurchaseRequest)},
  { 284, 294, sizeof(PreparePurchaseResponse)},
  { 299, 307, sizeof(ExchangeEmotionPackRequest)},
  { 310, 317, sizeof(ExchangeEmotionPackResponse)},
  { 319, 334, sizeof(CancelPurchaseRequest)},
  { 344, 350, sizeof(CancelPurchaseResponse)},
  { 351, 357, sizeof(EmotionMember)},
  { 358, 365, sizeof(MemberStatus)},
  { 367, 376, sizeof(VerifyEmotionPresentationRequest)},
  { 380, 388, sizeof(VerifyEmotionPresentationResponse)},
  { 391, 398, sizeof(LangDesc)},
  { 400, 408, sizeof(EmotionDesc)},
  { 411, 418, sizeof(GetEmotionDescRequest)},
  { 420, 431, sizeof(GetEmotionDescResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmotionCDNUrl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmotionSummary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PackThumbExt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmotionDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmotionBannerImg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmotionBanner_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmotionCell_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetEmotionListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetEmotionListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetEmotionDetailRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetEmotionDetailResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VerifyPurchaseRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VerifyPurchaseResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModEmotionPackRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModEmotionPackResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PreparePurchaseRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PreparePurchaseResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExchangeEmotionPackRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExchangeEmotionPackResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CancelPurchaseRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CancelPurchaseResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmotionMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemberStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VerifyEmotionPresentationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VerifyEmotionPresentationResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LangDesc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmotionDesc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetEmotionDescRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetEmotionDescResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mmemotion.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 29);
}

}  // namespace

void TableStruct::Shutdown() {
  _EmotionCDNUrl_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _EmotionSummary_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _PackThumbExt_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _EmotionDetail_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _EmotionBannerImg_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _EmotionBanner_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _EmotionCell_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _GetEmotionListRequest_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _GetEmotionListResponse_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _GetEmotionDetailRequest_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _GetEmotionDetailResponse_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _VerifyPurchaseRequest_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _VerifyPurchaseResponse_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _ModEmotionPackRequest_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _ModEmotionPackResponse_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _PreparePurchaseRequest_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _PreparePurchaseResponse_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _ExchangeEmotionPackRequest_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _ExchangeEmotionPackResponse_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CancelPurchaseRequest_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CancelPurchaseResponse_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _EmotionMember_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _MemberStatus_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _VerifyEmotionPresentationRequest_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _VerifyEmotionPresentationResponse_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _LangDesc_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _EmotionDesc_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _GetEmotionDescRequest_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _GetEmotionDescResponse_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::micromsg::protobuf_mmbuiltintype_2eproto::InitDefaults();
  ::micromsg::protobuf_mmbase_2eproto::InitDefaults();
  _EmotionCDNUrl_default_instance_.DefaultConstruct();
  _EmotionSummary_default_instance_.DefaultConstruct();
  _PackThumbExt_default_instance_.DefaultConstruct();
  _EmotionDetail_default_instance_.DefaultConstruct();
  _EmotionBannerImg_default_instance_.DefaultConstruct();
  _EmotionBanner_default_instance_.DefaultConstruct();
  _EmotionCell_default_instance_.DefaultConstruct();
  _GetEmotionListRequest_default_instance_.DefaultConstruct();
  _GetEmotionListResponse_default_instance_.DefaultConstruct();
  _GetEmotionDetailRequest_default_instance_.DefaultConstruct();
  _GetEmotionDetailResponse_default_instance_.DefaultConstruct();
  _VerifyPurchaseRequest_default_instance_.DefaultConstruct();
  _VerifyPurchaseResponse_default_instance_.DefaultConstruct();
  _ModEmotionPackRequest_default_instance_.DefaultConstruct();
  _ModEmotionPackResponse_default_instance_.DefaultConstruct();
  _PreparePurchaseRequest_default_instance_.DefaultConstruct();
  _PreparePurchaseResponse_default_instance_.DefaultConstruct();
  _ExchangeEmotionPackRequest_default_instance_.DefaultConstruct();
  _ExchangeEmotionPackResponse_default_instance_.DefaultConstruct();
  _CancelPurchaseRequest_default_instance_.DefaultConstruct();
  _CancelPurchaseResponse_default_instance_.DefaultConstruct();
  _EmotionMember_default_instance_.DefaultConstruct();
  _MemberStatus_default_instance_.DefaultConstruct();
  _VerifyEmotionPresentationRequest_default_instance_.DefaultConstruct();
  _VerifyEmotionPresentationResponse_default_instance_.DefaultConstruct();
  _LangDesc_default_instance_.DefaultConstruct();
  _EmotionDesc_default_instance_.DefaultConstruct();
  _GetEmotionDescRequest_default_instance_.DefaultConstruct();
  _GetEmotionDescResponse_default_instance_.DefaultConstruct();
  _EmotionBanner_default_instance_.get_mutable()->bannersummary_ = const_cast< ::micromsg::EmotionSummary*>(
      ::micromsg::EmotionSummary::internal_default_instance());
  _EmotionBanner_default_instance_.get_mutable()->bannerimg_ = const_cast< ::micromsg::EmotionBannerImg*>(
      ::micromsg::EmotionBannerImg::internal_default_instance());
  _GetEmotionListRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetEmotionListRequest_default_instance_.get_mutable()->reqbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetEmotionListResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetEmotionListResponse_default_instance_.get_mutable()->reqbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetEmotionListResponse_default_instance_.get_mutable()->banner_ = const_cast< ::micromsg::EmotionBanner*>(
      ::micromsg::EmotionBanner::internal_default_instance());
  _GetEmotionDetailRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetEmotionDetailResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetEmotionDetailResponse_default_instance_.get_mutable()->emotiondetail_ = const_cast< ::micromsg::EmotionDetail*>(
      ::micromsg::EmotionDetail::internal_default_instance());
  _VerifyPurchaseRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _VerifyPurchaseRequest_default_instance_.get_mutable()->receipt_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _VerifyPurchaseResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _ModEmotionPackRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _ModEmotionPackResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _PreparePurchaseRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _PreparePurchaseResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _ExchangeEmotionPackRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _ExchangeEmotionPackResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _ExchangeEmotionPackResponse_default_instance_.get_mutable()->downloadinfo_ = const_cast< ::micromsg::EmotionCDNUrl*>(
      ::micromsg::EmotionCDNUrl::internal_default_instance());
  _CancelPurchaseRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _CancelPurchaseResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _VerifyEmotionPresentationRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _VerifyEmotionPresentationResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetEmotionDescRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetEmotionDescResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017mmemotion.proto\022\010micromsg\032\023mmbuiltinty"
      "pe.proto\032\014mmbase.proto\">\n\rEmotionCDNUrl\022"
      "\013\n\003Url\030\001 \001(\t\022\016\n\006AesKey\030\002 \001(\t\022\020\n\010FileSize"
      "\030\003 \002(\r\"\367\002\n\016EmotionSummary\022\021\n\tProductID\030\001"
      " \001(\t\022\017\n\007IconUrl\030\002 \001(\t\022\020\n\010PackName\030\003 \001(\t\022"
      "\020\n\010PackDesc\030\004 \001(\t\022\024\n\014PackAuthInfo\030\005 \001(\t\022"
      "\021\n\tPackPrice\030\006 \001(\t\022\020\n\010PackType\030\007 \002(\r\022\020\n\010"
      "PackFlag\030\010 \002(\r\022\020\n\010CoverUrl\030\t \001(\t\022\022\n\nPack"
      "Expire\030\n \002(\r\022\025\n\rPackCopyright\030\013 \001(\t\022\021\n\tT"
      "imestamp\030\014 \001(\r\022\020\n\010PanelUrl\030\r \001(\t\022\020\n\010Pric"
      "eNum\030\016 \001(\t\022\021\n\tPriceType\030\017 \001(\t\022\020\n\010SendInf"
      "o\030\020 \001(\t\022\024\n\014TimeLimitStr\030\021 \001(\t\022\021\n\tIntrodu"
      "ce\030\022 \001(\t\022\016\n\006TagUri\030\023 \001(\t\"0\n\014PackThumbExt"
      "\022\022\n\nPreviewUrl\030\001 \001(\t\022\014\n\004Desc\030\002 \001(\t\"\223\004\n\rE"
      "motionDetail\022\021\n\tProductID\030\001 \001(\t\022\017\n\007IconU"
      "rl\030\002 \001(\t\022\020\n\010PackName\030\003 \001(\t\022\020\n\010PackDesc\030\004"
      " \001(\t\022\024\n\014PackAuthInfo\030\005 \001(\t\022\021\n\tPackPrice\030"
      "\006 \001(\t\022\020\n\010PackType\030\007 \002(\r\022\020\n\010PackFlag\030\010 \002("
      "\r\022\024\n\014PackThumbCnt\030\t \002(\r\0222\n\rPackThumbList"
      "\030\n \003(\0132\033.micromsg.SKBuiltinString_t\022\020\n\010C"
      "overUrl\030\013 \001(\t\022\022\n\nPackExpire\030\014 \002(\r\022\025\n\rPac"
      "kCopyright\030\r \001(\t\022\020\n\010PriceNum\030\016 \001(\t\022\021\n\tPr"
      "iceType\030\017 \001(\t\022\020\n\010PanelUrl\030\020 \001(\t\022\030\n\020Consu"
      "meProductID\030\021 \001(\t\022\025\n\rThumbExtCount\030\022 \001(\r"
      "\022,\n\014ThumbExtList\030\023 \003(\0132\026.micromsg.PackTh"
      "umbExt\022\017\n\007Version\030\024 \001(\005\022\024\n\014TimeLimitStr\030"
      "\025 \001(\t\022\021\n\tShareDesc\030\026 \001(\t\022\026\n\016OldRedirectU"
      "rl\030\027 \001(\t\"S\n\020EmotionBannerImg\022\016\n\006ImgUrl\030\001"
      " \001(\t\022\r\n\005Width\030\002 \002(\r\022\016\n\006Height\030\003 \002(\r\022\020\n\010S"
      "tripUrl\030\004 \001(\t\"o\n\rEmotionBanner\022/\n\rBanner"
      "Summary\030\001 \002(\0132\030.micromsg.EmotionSummary\022"
      "-\n\tBannerImg\030\002 \002(\0132\032.micromsg.EmotionBan"
      "nerImg\"d\n\013EmotionCell\022\021\n\tCellTitle\030\001 \001(\t"
      "\022\017\n\007ReqType\030\002 \002(\r\022\020\n\010Position\030\003 \002(\r\022\017\n\007I"
      "conUrl\030\004 \001(\t\022\016\n\006TagUrl\030\005 \001(\t\"\220\001\n\025GetEmot"
      "ionListRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.mi"
      "cromsg.BaseRequest\022+\n\006ReqBuf\030\002 \002(\0132\033.mic"
      "romsg.SKBuiltinBuffer_t\022\017\n\007ReqType\030\003 \002(\r"
      "\022\r\n\005Scene\030\004 \001(\r\"\345\002\n\026GetEmotionListRespon"
      "se\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.Base"
      "Response\022+\n\006ReqBuf\030\002 \002(\0132\033.micromsg.SKBu"
      "iltinBuffer_t\022\024\n\014EmotionCount\030\003 \002(\r\022-\n\013E"
      "motionList\030\004 \003(\0132\030.micromsg.EmotionSumma"
      "ry\022\'\n\006Banner\030\005 \001(\0132\027.micromsg.EmotionBan"
      "ner\022\026\n\016NewBannerCount\030\006 \001(\r\022.\n\rNewBanner"
      "List\030\007 \003(\0132\027.micromsg.EmotionBanner\022\021\n\tC"
      "ellCount\030\010 \001(\r\022\'\n\010CellList\030\t \003(\0132\025.micro"
      "msg.EmotionCell\"x\n\027GetEmotionDetailReque"
      "st\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseR"
      "equest\022\021\n\tProductID\030\002 \001(\t\022\r\n\005Scene\030\003 \001(\r"
      "\022\017\n\007Version\030\004 \001(\005\"x\n\030GetEmotionDetailRes"
      "ponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.B"
      "aseResponse\022.\n\rEmotionDetail\030\002 \002(\0132\027.mic"
      "romsg.EmotionDetail\"\225\002\n\025VerifyPurchaseRe"
      "quest\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.Ba"
      "seRequest\022,\n\007Receipt\030\002 \002(\0132\033.micromsg.SK"
      "BuiltinBuffer_t\022\021\n\tProductID\030\003 \001(\t\022\022\n\nVe"
      "rifyType\030\004 \002(\r\022\017\n\007PayType\030\005 \002(\r\022\r\n\005Price"
      "\030\006 \001(\t\022\024\n\014CurrencyType\030\007 \001(\t\022\016\n\006BillNo\030\010"
      " \001(\t\022\017\n\007PayTime\030\t \002(\r\022\022\n\nReceiptSig\030\n \001("
      "\t\022\020\n\010Quantity\030\013 \001(\r\"i\n\026VerifyPurchaseRes"
      "ponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.B"
      "aseResponse\022\020\n\010SeriesID\030\002 \001(\t\022\017\n\007BizType"
      "\030\003 \002(\r\"f\n\025ModEmotionPackRequest\022*\n\013BaseR"
      "equest\030\001 \002(\0132\025.micromsg.BaseRequest\022\021\n\tP"
      "roductID\030\002 \001(\t\022\016\n\006OpCode\030\003 \002(\r\"F\n\026ModEmo"
      "tionPackResponse\022,\n\014BaseResponse\030\001 \002(\0132\026"
      ".micromsg.BaseResponse\"\260\001\n\026PreparePurcha"
      "seRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.microms"
      "g.BaseRequest\022\021\n\tProductID\030\002 \001(\t\022\r\n\005Pric"
      "e\030\003 \001(\t\022\024\n\014CurrencyType\030\004 \001(\t\022\017\n\007PayType"
      "\030\005 \002(\r\022\017\n\007ExtInfo\030\007 \001(\t\022\020\n\010Quantity\030\010 \001("
      "\r\"\237\001\n\027PreparePurchaseResponse\022,\n\014BaseRes"
      "ponse\030\001 \002(\0132\026.micromsg.BaseResponse\022\016\n\006B"
      "illNo\030\002 \001(\t\022\031\n\021TradeToken4TenPay\030\003 \001(\t\022\026"
      "\n\016Partner4TenPay\030\004 \001(\t\022\023\n\013Sign4TenPay\030\005 "
      "\001(\t\"m\n\032ExchangeEmotionPackRequest\022*\n\013Bas"
      "eRequest\030\001 \002(\0132\025.micromsg.BaseRequest\022\021\n"
      "\tProductID\030\002 \001(\t\022\020\n\010SeriesID\030\003 \001(\t\"z\n\033Ex"
      "changeEmotionPackResponse\022,\n\014BaseRespons"
      "e\030\001 \002(\0132\026.micromsg.BaseResponse\022-\n\014Downl"
      "oadInfo\030\002 \002(\0132\027.micromsg.EmotionCDNUrl\"\356"
      "\001\n\025CancelPurchaseRequest\022*\n\013BaseRequest\030"
      "\001 \002(\0132\025.micromsg.BaseRequest\022\021\n\tProductI"
      "D\030\002 \001(\t\022\022\n\nVerifyType\030\003 \002(\r\022\017\n\007PayType\030\004"
      " \002(\r\022\r\n\005Price\030\005 \001(\t\022\024\n\014CurrencyType\030\006 \001("
      "\t\022\016\n\006BillNo\030\007 \001(\t\022\017\n\007PayTime\030\010 \002(\r\022\021\n\tEr"
      "rorCode\030\t \002(\005\022\030\n\020ErrorDescription\030\n \001(\t\""
      "F\n\026CancelPurchaseResponse\022,\n\014BaseRespons"
      "e\030\001 \002(\0132\026.micromsg.BaseResponse\"!\n\rEmoti"
      "onMember\022\020\n\010UserName\030\001 \001(\t\"0\n\014MemberStat"
      "us\022\020\n\010UserName\030\001 \001(\t\022\016\n\006Status\030\002 \002(\005\"\243\001\n"
      " VerifyEmotionPresentationRequest\022*\n\013Bas"
      "eRequest\030\001 \002(\0132\025.micromsg.BaseRequest\022\021\n"
      "\tProductID\030\002 \001(\t\022\023\n\013MemberCount\030\003 \002(\r\022+\n"
      "\nMemberList\030\004 \003(\0132\027.micromsg.EmotionMemb"
      "er\"\222\001\n!VerifyEmotionPresentationResponse"
      "\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseRe"
      "sponse\022\023\n\013MemberCount\030\002 \002(\r\022*\n\nStatusLis"
      "t\030\003 \003(\0132\026.micromsg.MemberStatus\"&\n\010LangD"
      "esc\022\014\n\004Lang\030\001 \001(\t\022\014\n\004Desc\030\002 \001(\t\"K\n\013Emoti"
      "onDesc\022\013\n\003Md5\030\001 \001(\t\022\r\n\005Count\030\002 \002(\r\022 \n\004Li"
      "st\030\003 \003(\0132\022.micromsg.LangDesc\"V\n\025GetEmoti"
      "onDescRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.mic"
      "romsg.BaseRequest\022\021\n\tProductID\030\002 \001(\t\"\267\001\n"
      "\026GetEmotionDescResponse\022,\n\014BaseResponse\030"
      "\001 \002(\0132\026.micromsg.BaseResponse\022\r\n\005Count\030\002"
      " \002(\r\022#\n\004List\030\003 \003(\0132\025.micromsg.EmotionDes"
      "c\022\021\n\tClickFlag\030\004 \002(\r\022\022\n\nButtonDesc\030\005 \001(\t"
      "\022\024\n\014DownLoadFlag\030\006 \001(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4382);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mmemotion.proto", &protobuf_RegisterTypes);
  ::micromsg::protobuf_mmbuiltintype_2eproto::AddDescriptors();
  ::micromsg::protobuf_mmbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mmemotion_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmotionCDNUrl::kUrlFieldNumber;
const int EmotionCDNUrl::kAesKeyFieldNumber;
const int EmotionCDNUrl::kFileSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmotionCDNUrl::EmotionCDNUrl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EmotionCDNUrl)
}
EmotionCDNUrl::EmotionCDNUrl(const EmotionCDNUrl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_aeskey()) {
    aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
  }
  filesize_ = from.filesize_;
  // @@protoc_insertion_point(copy_constructor:micromsg.EmotionCDNUrl)
}

void EmotionCDNUrl::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filesize_ = 0u;
}

EmotionCDNUrl::~EmotionCDNUrl() {
  // @@protoc_insertion_point(destructor:micromsg.EmotionCDNUrl)
  SharedDtor();
}

void EmotionCDNUrl::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EmotionCDNUrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmotionCDNUrl::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmotionCDNUrl& EmotionCDNUrl::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmotionCDNUrl* EmotionCDNUrl::New(::google::protobuf::Arena* arena) const {
  EmotionCDNUrl* n = new EmotionCDNUrl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmotionCDNUrl::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EmotionCDNUrl)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_aeskey()) {
      GOOGLE_DCHECK(!aeskey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*aeskey_.UnsafeRawStringPointer())->clear();
    }
  }
  filesize_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmotionCDNUrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EmotionCDNUrl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionCDNUrl.Url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AesKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aeskey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aeskey().data(), this->aeskey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionCDNUrl.AesKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 FileSize = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_filesize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EmotionCDNUrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EmotionCDNUrl)
  return false;
#undef DO_
}

void EmotionCDNUrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EmotionCDNUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionCDNUrl.Url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string AesKey = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionCDNUrl.AesKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->aeskey(), output);
  }

  // required uint32 FileSize = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->filesize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EmotionCDNUrl)
}

::google::protobuf::uint8* EmotionCDNUrl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EmotionCDNUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionCDNUrl.Url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional string AesKey = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionCDNUrl.AesKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->aeskey(), target);
  }

  // required uint32 FileSize = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->filesize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EmotionCDNUrl)
  return target;
}

size_t EmotionCDNUrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EmotionCDNUrl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 FileSize = 3;
  if (has_filesize()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->filesize());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string Url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string AesKey = 2;
    if (has_aeskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aeskey());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmotionCDNUrl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EmotionCDNUrl)
  GOOGLE_DCHECK_NE(&from, this);
  const EmotionCDNUrl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmotionCDNUrl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EmotionCDNUrl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EmotionCDNUrl)
    MergeFrom(*source);
  }
}

void EmotionCDNUrl::MergeFrom(const EmotionCDNUrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EmotionCDNUrl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_aeskey();
      aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
    }
    if (cached_has_bits & 0x00000004u) {
      filesize_ = from.filesize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EmotionCDNUrl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EmotionCDNUrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmotionCDNUrl::CopyFrom(const EmotionCDNUrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EmotionCDNUrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmotionCDNUrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void EmotionCDNUrl::Swap(EmotionCDNUrl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmotionCDNUrl::InternalSwap(EmotionCDNUrl* other) {
  url_.Swap(&other->url_);
  aeskey_.Swap(&other->aeskey_);
  std::swap(filesize_, other->filesize_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmotionCDNUrl::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmotionCDNUrl

// optional string Url = 1;
bool EmotionCDNUrl::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmotionCDNUrl::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void EmotionCDNUrl::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmotionCDNUrl::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& EmotionCDNUrl::url() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionCDNUrl.Url)
  return url_.GetNoArena();
}
void EmotionCDNUrl::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionCDNUrl.Url)
}
#if LANG_CXX11
void EmotionCDNUrl::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionCDNUrl.Url)
}
#endif
void EmotionCDNUrl::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionCDNUrl.Url)
}
void EmotionCDNUrl::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionCDNUrl.Url)
}
::std::string* EmotionCDNUrl::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionCDNUrl.Url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionCDNUrl::release_url() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionCDNUrl.Url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionCDNUrl::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionCDNUrl.Url)
}

// optional string AesKey = 2;
bool EmotionCDNUrl::has_aeskey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmotionCDNUrl::set_has_aeskey() {
  _has_bits_[0] |= 0x00000002u;
}
void EmotionCDNUrl::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmotionCDNUrl::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
const ::std::string& EmotionCDNUrl::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionCDNUrl.AesKey)
  return aeskey_.GetNoArena();
}
void EmotionCDNUrl::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionCDNUrl.AesKey)
}
#if LANG_CXX11
void EmotionCDNUrl::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionCDNUrl.AesKey)
}
#endif
void EmotionCDNUrl::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionCDNUrl.AesKey)
}
void EmotionCDNUrl::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionCDNUrl.AesKey)
}
::std::string* EmotionCDNUrl::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionCDNUrl.AesKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionCDNUrl::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionCDNUrl.AesKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionCDNUrl::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionCDNUrl.AesKey)
}

// required uint32 FileSize = 3;
bool EmotionCDNUrl::has_filesize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EmotionCDNUrl::set_has_filesize() {
  _has_bits_[0] |= 0x00000004u;
}
void EmotionCDNUrl::clear_has_filesize() {
  _has_bits_[0] &= ~0x00000004u;
}
void EmotionCDNUrl::clear_filesize() {
  filesize_ = 0u;
  clear_has_filesize();
}
::google::protobuf::uint32 EmotionCDNUrl::filesize() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionCDNUrl.FileSize)
  return filesize_;
}
void EmotionCDNUrl::set_filesize(::google::protobuf::uint32 value) {
  set_has_filesize();
  filesize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmotionCDNUrl.FileSize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmotionSummary::kProductIDFieldNumber;
const int EmotionSummary::kIconUrlFieldNumber;
const int EmotionSummary::kPackNameFieldNumber;
const int EmotionSummary::kPackDescFieldNumber;
const int EmotionSummary::kPackAuthInfoFieldNumber;
const int EmotionSummary::kPackPriceFieldNumber;
const int EmotionSummary::kPackTypeFieldNumber;
const int EmotionSummary::kPackFlagFieldNumber;
const int EmotionSummary::kCoverUrlFieldNumber;
const int EmotionSummary::kPackExpireFieldNumber;
const int EmotionSummary::kPackCopyrightFieldNumber;
const int EmotionSummary::kTimestampFieldNumber;
const int EmotionSummary::kPanelUrlFieldNumber;
const int EmotionSummary::kPriceNumFieldNumber;
const int EmotionSummary::kPriceTypeFieldNumber;
const int EmotionSummary::kSendInfoFieldNumber;
const int EmotionSummary::kTimeLimitStrFieldNumber;
const int EmotionSummary::kIntroduceFieldNumber;
const int EmotionSummary::kTagUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmotionSummary::EmotionSummary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EmotionSummary)
}
EmotionSummary::EmotionSummary(const EmotionSummary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  iconurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_iconurl()) {
    iconurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iconurl_);
  }
  packname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packname()) {
    packname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packname_);
  }
  packdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packdesc()) {
    packdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packdesc_);
  }
  packauthinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packauthinfo()) {
    packauthinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packauthinfo_);
  }
  packprice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packprice()) {
    packprice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packprice_);
  }
  coverurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_coverurl()) {
    coverurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coverurl_);
  }
  packcopyright_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packcopyright()) {
    packcopyright_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packcopyright_);
  }
  panelurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_panelurl()) {
    panelurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.panelurl_);
  }
  pricenum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pricenum()) {
    pricenum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pricenum_);
  }
  pricetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pricetype()) {
    pricetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pricetype_);
  }
  sendinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sendinfo()) {
    sendinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sendinfo_);
  }
  timelimitstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timelimitstr()) {
    timelimitstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timelimitstr_);
  }
  introduce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_introduce()) {
    introduce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.introduce_);
  }
  taguri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_taguri()) {
    taguri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taguri_);
  }
  ::memcpy(&packtype_, &from.packtype_,
    reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&packtype_) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:micromsg.EmotionSummary)
}

void EmotionSummary::SharedCtor() {
  _cached_size_ = 0;
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iconurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packauthinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packprice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coverurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packcopyright_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  panelurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pricenum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pricetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sendinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timelimitstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  introduce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  taguri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&packtype_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&packtype_) + sizeof(timestamp_));
}

EmotionSummary::~EmotionSummary() {
  // @@protoc_insertion_point(destructor:micromsg.EmotionSummary)
  SharedDtor();
}

void EmotionSummary::SharedDtor() {
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iconurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packdesc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packauthinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packprice_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coverurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packcopyright_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  panelurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pricenum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pricetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sendinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timelimitstr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  introduce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  taguri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EmotionSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmotionSummary::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmotionSummary& EmotionSummary::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmotionSummary* EmotionSummary::New(::google::protobuf::Arena* arena) const {
  EmotionSummary* n = new EmotionSummary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmotionSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EmotionSummary)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_productid()) {
      GOOGLE_DCHECK(!productid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*productid_.UnsafeRawStringPointer())->clear();
    }
    if (has_iconurl()) {
      GOOGLE_DCHECK(!iconurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*iconurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_packname()) {
      GOOGLE_DCHECK(!packname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*packname_.UnsafeRawStringPointer())->clear();
    }
    if (has_packdesc()) {
      GOOGLE_DCHECK(!packdesc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*packdesc_.UnsafeRawStringPointer())->clear();
    }
    if (has_packauthinfo()) {
      GOOGLE_DCHECK(!packauthinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*packauthinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_packprice()) {
      GOOGLE_DCHECK(!packprice_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*packprice_.UnsafeRawStringPointer())->clear();
    }
    if (has_coverurl()) {
      GOOGLE_DCHECK(!coverurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*coverurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_packcopyright()) {
      GOOGLE_DCHECK(!packcopyright_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*packcopyright_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512u) {
    if (has_panelurl()) {
      GOOGLE_DCHECK(!panelurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*panelurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_pricenum()) {
      GOOGLE_DCHECK(!pricenum_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pricenum_.UnsafeRawStringPointer())->clear();
    }
    if (has_pricetype()) {
      GOOGLE_DCHECK(!pricetype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pricetype_.UnsafeRawStringPointer())->clear();
    }
    if (has_sendinfo()) {
      GOOGLE_DCHECK(!sendinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sendinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_timelimitstr()) {
      GOOGLE_DCHECK(!timelimitstr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*timelimitstr_.UnsafeRawStringPointer())->clear();
    }
    if (has_introduce()) {
      GOOGLE_DCHECK(!introduce_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*introduce_.UnsafeRawStringPointer())->clear();
    }
    if (has_taguri()) {
      GOOGLE_DCHECK(!taguri_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*taguri_.UnsafeRawStringPointer())->clear();
    }
  }
  packtype_ = 0u;
  if (_has_bits_[16 / 32] & 458752u) {
    ::memset(&packflag_, 0, reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&packflag_) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmotionSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EmotionSummary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ProductID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionSummary.ProductID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string IconUrl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iconurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iconurl().data(), this->iconurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionSummary.IconUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PackName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->packname().data(), this->packname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionSummary.PackName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PackDesc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->packdesc().data(), this->packdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionSummary.PackDesc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PackAuthInfo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packauthinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->packauthinfo().data(), this->packauthinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionSummary.PackAuthInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PackPrice = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packprice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->packprice().data(), this->packprice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionSummary.PackPrice");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 PackType = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_packtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 PackFlag = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_packflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CoverUrl = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coverurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->coverurl().data(), this->coverurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionSummary.CoverUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 PackExpire = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_packexpire();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packexpire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PackCopyright = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packcopyright()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->packcopyright().data(), this->packcopyright().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionSummary.PackCopyright");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Timestamp = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PanelUrl = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_panelurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->panelurl().data(), this->panelurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionSummary.PanelUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PriceNum = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pricenum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pricenum().data(), this->pricenum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionSummary.PriceNum");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PriceType = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pricetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pricetype().data(), this->pricetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionSummary.PriceType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SendInfo = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sendinfo().data(), this->sendinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionSummary.SendInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TimeLimitStr = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timelimitstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timelimitstr().data(), this->timelimitstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionSummary.TimeLimitStr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Introduce = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_introduce()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->introduce().data(), this->introduce().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionSummary.Introduce");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TagUri = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taguri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->taguri().data(), this->taguri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionSummary.TagUri");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EmotionSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EmotionSummary)
  return false;
#undef DO_
}

void EmotionSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EmotionSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ProductID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.ProductID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->productid(), output);
  }

  // optional string IconUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iconurl().data(), this->iconurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.IconUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->iconurl(), output);
  }

  // optional string PackName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packname().data(), this->packname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.PackName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->packname(), output);
  }

  // optional string PackDesc = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packdesc().data(), this->packdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.PackDesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->packdesc(), output);
  }

  // optional string PackAuthInfo = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packauthinfo().data(), this->packauthinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.PackAuthInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->packauthinfo(), output);
  }

  // optional string PackPrice = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packprice().data(), this->packprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.PackPrice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->packprice(), output);
  }

  // required uint32 PackType = 7;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->packtype(), output);
  }

  // required uint32 PackFlag = 8;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->packflag(), output);
  }

  // optional string CoverUrl = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coverurl().data(), this->coverurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.CoverUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->coverurl(), output);
  }

  // required uint32 PackExpire = 10;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->packexpire(), output);
  }

  // optional string PackCopyright = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packcopyright().data(), this->packcopyright().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.PackCopyright");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->packcopyright(), output);
  }

  // optional uint32 Timestamp = 12;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->timestamp(), output);
  }

  // optional string PanelUrl = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->panelurl().data(), this->panelurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.PanelUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->panelurl(), output);
  }

  // optional string PriceNum = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricenum().data(), this->pricenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.PriceNum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->pricenum(), output);
  }

  // optional string PriceType = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricetype().data(), this->pricetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.PriceType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->pricetype(), output);
  }

  // optional string SendInfo = 16;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendinfo().data(), this->sendinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.SendInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->sendinfo(), output);
  }

  // optional string TimeLimitStr = 17;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timelimitstr().data(), this->timelimitstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.TimeLimitStr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->timelimitstr(), output);
  }

  // optional string Introduce = 18;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->introduce().data(), this->introduce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.Introduce");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->introduce(), output);
  }

  // optional string TagUri = 19;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->taguri().data(), this->taguri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.TagUri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->taguri(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EmotionSummary)
}

::google::protobuf::uint8* EmotionSummary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EmotionSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ProductID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.ProductID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->productid(), target);
  }

  // optional string IconUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iconurl().data(), this->iconurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.IconUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->iconurl(), target);
  }

  // optional string PackName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packname().data(), this->packname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.PackName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->packname(), target);
  }

  // optional string PackDesc = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packdesc().data(), this->packdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.PackDesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->packdesc(), target);
  }

  // optional string PackAuthInfo = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packauthinfo().data(), this->packauthinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.PackAuthInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->packauthinfo(), target);
  }

  // optional string PackPrice = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packprice().data(), this->packprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.PackPrice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->packprice(), target);
  }

  // required uint32 PackType = 7;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->packtype(), target);
  }

  // required uint32 PackFlag = 8;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->packflag(), target);
  }

  // optional string CoverUrl = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coverurl().data(), this->coverurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.CoverUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->coverurl(), target);
  }

  // required uint32 PackExpire = 10;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->packexpire(), target);
  }

  // optional string PackCopyright = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packcopyright().data(), this->packcopyright().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.PackCopyright");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->packcopyright(), target);
  }

  // optional uint32 Timestamp = 12;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->timestamp(), target);
  }

  // optional string PanelUrl = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->panelurl().data(), this->panelurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.PanelUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->panelurl(), target);
  }

  // optional string PriceNum = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricenum().data(), this->pricenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.PriceNum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->pricenum(), target);
  }

  // optional string PriceType = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricetype().data(), this->pricetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.PriceType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->pricetype(), target);
  }

  // optional string SendInfo = 16;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendinfo().data(), this->sendinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.SendInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->sendinfo(), target);
  }

  // optional string TimeLimitStr = 17;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timelimitstr().data(), this->timelimitstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.TimeLimitStr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->timelimitstr(), target);
  }

  // optional string Introduce = 18;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->introduce().data(), this->introduce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.Introduce");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->introduce(), target);
  }

  // optional string TagUri = 19;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->taguri().data(), this->taguri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionSummary.TagUri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->taguri(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EmotionSummary)
  return target;
}

size_t EmotionSummary::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.EmotionSummary)
  size_t total_size = 0;

  if (has_packtype()) {
    // required uint32 PackType = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packtype());
  }

  if (has_packflag()) {
    // required uint32 PackFlag = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packflag());
  }

  if (has_packexpire()) {
    // required uint32 PackExpire = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packexpire());
  }

  return total_size;
}
size_t EmotionSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EmotionSummary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00038000) ^ 0x00038000) == 0) {  // All required fields are present.
    // required uint32 PackType = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packtype());

    // required uint32 PackFlag = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packflag());

    // required uint32 PackExpire = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packexpire());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string ProductID = 1;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // optional string IconUrl = 2;
    if (has_iconurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iconurl());
    }

    // optional string PackName = 3;
    if (has_packname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packname());
    }

    // optional string PackDesc = 4;
    if (has_packdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packdesc());
    }

    // optional string PackAuthInfo = 5;
    if (has_packauthinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packauthinfo());
    }

    // optional string PackPrice = 6;
    if (has_packprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packprice());
    }

    // optional string CoverUrl = 9;
    if (has_coverurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->coverurl());
    }

    // optional string PackCopyright = 11;
    if (has_packcopyright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packcopyright());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional string PanelUrl = 13;
    if (has_panelurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->panelurl());
    }

    // optional string PriceNum = 14;
    if (has_pricenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pricenum());
    }

    // optional string PriceType = 15;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pricetype());
    }

    // optional string SendInfo = 16;
    if (has_sendinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendinfo());
    }

    // optional string TimeLimitStr = 17;
    if (has_timelimitstr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timelimitstr());
    }

    // optional string Introduce = 18;
    if (has_introduce()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->introduce());
    }

    // optional string TagUri = 19;
    if (has_taguri()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taguri());
    }

  }
  // optional uint32 Timestamp = 12;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmotionSummary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EmotionSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const EmotionSummary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmotionSummary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EmotionSummary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EmotionSummary)
    MergeFrom(*source);
  }
}

void EmotionSummary::MergeFrom(const EmotionSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EmotionSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_iconurl();
      iconurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iconurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_packname();
      packname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packname_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_packdesc();
      packdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packdesc_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_packauthinfo();
      packauthinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packauthinfo_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_packprice();
      packprice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packprice_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_coverurl();
      coverurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coverurl_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_packcopyright();
      packcopyright_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packcopyright_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_panelurl();
      panelurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.panelurl_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_pricenum();
      pricenum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pricenum_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_pricetype();
      pricetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pricetype_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_sendinfo();
      sendinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sendinfo_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_timelimitstr();
      timelimitstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timelimitstr_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_introduce();
      introduce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.introduce_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_taguri();
      taguri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taguri_);
    }
    if (cached_has_bits & 0x00008000u) {
      packtype_ = from.packtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      packflag_ = from.packflag_;
    }
    if (cached_has_bits & 0x00020000u) {
      packexpire_ = from.packexpire_;
    }
    if (cached_has_bits & 0x00040000u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EmotionSummary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EmotionSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmotionSummary::CopyFrom(const EmotionSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EmotionSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmotionSummary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00038000) != 0x00038000) return false;
  return true;
}

void EmotionSummary::Swap(EmotionSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmotionSummary::InternalSwap(EmotionSummary* other) {
  productid_.Swap(&other->productid_);
  iconurl_.Swap(&other->iconurl_);
  packname_.Swap(&other->packname_);
  packdesc_.Swap(&other->packdesc_);
  packauthinfo_.Swap(&other->packauthinfo_);
  packprice_.Swap(&other->packprice_);
  coverurl_.Swap(&other->coverurl_);
  packcopyright_.Swap(&other->packcopyright_);
  panelurl_.Swap(&other->panelurl_);
  pricenum_.Swap(&other->pricenum_);
  pricetype_.Swap(&other->pricetype_);
  sendinfo_.Swap(&other->sendinfo_);
  timelimitstr_.Swap(&other->timelimitstr_);
  introduce_.Swap(&other->introduce_);
  taguri_.Swap(&other->taguri_);
  std::swap(packtype_, other->packtype_);
  std::swap(packflag_, other->packflag_);
  std::swap(packexpire_, other->packexpire_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmotionSummary::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmotionSummary

// optional string ProductID = 1;
bool EmotionSummary::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmotionSummary::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
void EmotionSummary::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmotionSummary::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
const ::std::string& EmotionSummary::productid() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionSummary.ProductID)
  return productid_.GetNoArena();
}
void EmotionSummary::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionSummary.ProductID)
}
#if LANG_CXX11
void EmotionSummary::set_productid(::std::string&& value) {
  set_has_productid();
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionSummary.ProductID)
}
#endif
void EmotionSummary::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionSummary.ProductID)
}
void EmotionSummary::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionSummary.ProductID)
}
::std::string* EmotionSummary::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionSummary.ProductID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionSummary::release_productid() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionSummary.ProductID)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionSummary::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionSummary.ProductID)
}

// optional string IconUrl = 2;
bool EmotionSummary::has_iconurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmotionSummary::set_has_iconurl() {
  _has_bits_[0] |= 0x00000002u;
}
void EmotionSummary::clear_has_iconurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmotionSummary::clear_iconurl() {
  iconurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iconurl();
}
const ::std::string& EmotionSummary::iconurl() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionSummary.IconUrl)
  return iconurl_.GetNoArena();
}
void EmotionSummary::set_iconurl(const ::std::string& value) {
  set_has_iconurl();
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionSummary.IconUrl)
}
#if LANG_CXX11
void EmotionSummary::set_iconurl(::std::string&& value) {
  set_has_iconurl();
  iconurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionSummary.IconUrl)
}
#endif
void EmotionSummary::set_iconurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_iconurl();
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionSummary.IconUrl)
}
void EmotionSummary::set_iconurl(const char* value, size_t size) {
  set_has_iconurl();
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionSummary.IconUrl)
}
::std::string* EmotionSummary::mutable_iconurl() {
  set_has_iconurl();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionSummary.IconUrl)
  return iconurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionSummary::release_iconurl() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionSummary.IconUrl)
  clear_has_iconurl();
  return iconurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionSummary::set_allocated_iconurl(::std::string* iconurl) {
  if (iconurl != NULL) {
    set_has_iconurl();
  } else {
    clear_has_iconurl();
  }
  iconurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iconurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionSummary.IconUrl)
}

// optional string PackName = 3;
bool EmotionSummary::has_packname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EmotionSummary::set_has_packname() {
  _has_bits_[0] |= 0x00000004u;
}
void EmotionSummary::clear_has_packname() {
  _has_bits_[0] &= ~0x00000004u;
}
void EmotionSummary::clear_packname() {
  packname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packname();
}
const ::std::string& EmotionSummary::packname() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionSummary.PackName)
  return packname_.GetNoArena();
}
void EmotionSummary::set_packname(const ::std::string& value) {
  set_has_packname();
  packname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionSummary.PackName)
}
#if LANG_CXX11
void EmotionSummary::set_packname(::std::string&& value) {
  set_has_packname();
  packname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionSummary.PackName)
}
#endif
void EmotionSummary::set_packname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_packname();
  packname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionSummary.PackName)
}
void EmotionSummary::set_packname(const char* value, size_t size) {
  set_has_packname();
  packname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionSummary.PackName)
}
::std::string* EmotionSummary::mutable_packname() {
  set_has_packname();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionSummary.PackName)
  return packname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionSummary::release_packname() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionSummary.PackName)
  clear_has_packname();
  return packname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionSummary::set_allocated_packname(::std::string* packname) {
  if (packname != NULL) {
    set_has_packname();
  } else {
    clear_has_packname();
  }
  packname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionSummary.PackName)
}

// optional string PackDesc = 4;
bool EmotionSummary::has_packdesc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EmotionSummary::set_has_packdesc() {
  _has_bits_[0] |= 0x00000008u;
}
void EmotionSummary::clear_has_packdesc() {
  _has_bits_[0] &= ~0x00000008u;
}
void EmotionSummary::clear_packdesc() {
  packdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packdesc();
}
const ::std::string& EmotionSummary::packdesc() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionSummary.PackDesc)
  return packdesc_.GetNoArena();
}
void EmotionSummary::set_packdesc(const ::std::string& value) {
  set_has_packdesc();
  packdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionSummary.PackDesc)
}
#if LANG_CXX11
void EmotionSummary::set_packdesc(::std::string&& value) {
  set_has_packdesc();
  packdesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionSummary.PackDesc)
}
#endif
void EmotionSummary::set_packdesc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_packdesc();
  packdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionSummary.PackDesc)
}
void EmotionSummary::set_packdesc(const char* value, size_t size) {
  set_has_packdesc();
  packdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionSummary.PackDesc)
}
::std::string* EmotionSummary::mutable_packdesc() {
  set_has_packdesc();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionSummary.PackDesc)
  return packdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionSummary::release_packdesc() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionSummary.PackDesc)
  clear_has_packdesc();
  return packdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionSummary::set_allocated_packdesc(::std::string* packdesc) {
  if (packdesc != NULL) {
    set_has_packdesc();
  } else {
    clear_has_packdesc();
  }
  packdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packdesc);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionSummary.PackDesc)
}

// optional string PackAuthInfo = 5;
bool EmotionSummary::has_packauthinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EmotionSummary::set_has_packauthinfo() {
  _has_bits_[0] |= 0x00000010u;
}
void EmotionSummary::clear_has_packauthinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
void EmotionSummary::clear_packauthinfo() {
  packauthinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packauthinfo();
}
const ::std::string& EmotionSummary::packauthinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionSummary.PackAuthInfo)
  return packauthinfo_.GetNoArena();
}
void EmotionSummary::set_packauthinfo(const ::std::string& value) {
  set_has_packauthinfo();
  packauthinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionSummary.PackAuthInfo)
}
#if LANG_CXX11
void EmotionSummary::set_packauthinfo(::std::string&& value) {
  set_has_packauthinfo();
  packauthinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionSummary.PackAuthInfo)
}
#endif
void EmotionSummary::set_packauthinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_packauthinfo();
  packauthinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionSummary.PackAuthInfo)
}
void EmotionSummary::set_packauthinfo(const char* value, size_t size) {
  set_has_packauthinfo();
  packauthinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionSummary.PackAuthInfo)
}
::std::string* EmotionSummary::mutable_packauthinfo() {
  set_has_packauthinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionSummary.PackAuthInfo)
  return packauthinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionSummary::release_packauthinfo() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionSummary.PackAuthInfo)
  clear_has_packauthinfo();
  return packauthinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionSummary::set_allocated_packauthinfo(::std::string* packauthinfo) {
  if (packauthinfo != NULL) {
    set_has_packauthinfo();
  } else {
    clear_has_packauthinfo();
  }
  packauthinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packauthinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionSummary.PackAuthInfo)
}

// optional string PackPrice = 6;
bool EmotionSummary::has_packprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EmotionSummary::set_has_packprice() {
  _has_bits_[0] |= 0x00000020u;
}
void EmotionSummary::clear_has_packprice() {
  _has_bits_[0] &= ~0x00000020u;
}
void EmotionSummary::clear_packprice() {
  packprice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packprice();
}
const ::std::string& EmotionSummary::packprice() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionSummary.PackPrice)
  return packprice_.GetNoArena();
}
void EmotionSummary::set_packprice(const ::std::string& value) {
  set_has_packprice();
  packprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionSummary.PackPrice)
}
#if LANG_CXX11
void EmotionSummary::set_packprice(::std::string&& value) {
  set_has_packprice();
  packprice_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionSummary.PackPrice)
}
#endif
void EmotionSummary::set_packprice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_packprice();
  packprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionSummary.PackPrice)
}
void EmotionSummary::set_packprice(const char* value, size_t size) {
  set_has_packprice();
  packprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionSummary.PackPrice)
}
::std::string* EmotionSummary::mutable_packprice() {
  set_has_packprice();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionSummary.PackPrice)
  return packprice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionSummary::release_packprice() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionSummary.PackPrice)
  clear_has_packprice();
  return packprice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionSummary::set_allocated_packprice(::std::string* packprice) {
  if (packprice != NULL) {
    set_has_packprice();
  } else {
    clear_has_packprice();
  }
  packprice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packprice);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionSummary.PackPrice)
}

// required uint32 PackType = 7;
bool EmotionSummary::has_packtype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void EmotionSummary::set_has_packtype() {
  _has_bits_[0] |= 0x00008000u;
}
void EmotionSummary::clear_has_packtype() {
  _has_bits_[0] &= ~0x00008000u;
}
void EmotionSummary::clear_packtype() {
  packtype_ = 0u;
  clear_has_packtype();
}
::google::protobuf::uint32 EmotionSummary::packtype() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionSummary.PackType)
  return packtype_;
}
void EmotionSummary::set_packtype(::google::protobuf::uint32 value) {
  set_has_packtype();
  packtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmotionSummary.PackType)
}

// required uint32 PackFlag = 8;
bool EmotionSummary::has_packflag() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void EmotionSummary::set_has_packflag() {
  _has_bits_[0] |= 0x00010000u;
}
void EmotionSummary::clear_has_packflag() {
  _has_bits_[0] &= ~0x00010000u;
}
void EmotionSummary::clear_packflag() {
  packflag_ = 0u;
  clear_has_packflag();
}
::google::protobuf::uint32 EmotionSummary::packflag() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionSummary.PackFlag)
  return packflag_;
}
void EmotionSummary::set_packflag(::google::protobuf::uint32 value) {
  set_has_packflag();
  packflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmotionSummary.PackFlag)
}

// optional string CoverUrl = 9;
bool EmotionSummary::has_coverurl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EmotionSummary::set_has_coverurl() {
  _has_bits_[0] |= 0x00000040u;
}
void EmotionSummary::clear_has_coverurl() {
  _has_bits_[0] &= ~0x00000040u;
}
void EmotionSummary::clear_coverurl() {
  coverurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_coverurl();
}
const ::std::string& EmotionSummary::coverurl() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionSummary.CoverUrl)
  return coverurl_.GetNoArena();
}
void EmotionSummary::set_coverurl(const ::std::string& value) {
  set_has_coverurl();
  coverurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionSummary.CoverUrl)
}
#if LANG_CXX11
void EmotionSummary::set_coverurl(::std::string&& value) {
  set_has_coverurl();
  coverurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionSummary.CoverUrl)
}
#endif
void EmotionSummary::set_coverurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_coverurl();
  coverurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionSummary.CoverUrl)
}
void EmotionSummary::set_coverurl(const char* value, size_t size) {
  set_has_coverurl();
  coverurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionSummary.CoverUrl)
}
::std::string* EmotionSummary::mutable_coverurl() {
  set_has_coverurl();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionSummary.CoverUrl)
  return coverurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionSummary::release_coverurl() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionSummary.CoverUrl)
  clear_has_coverurl();
  return coverurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionSummary::set_allocated_coverurl(::std::string* coverurl) {
  if (coverurl != NULL) {
    set_has_coverurl();
  } else {
    clear_has_coverurl();
  }
  coverurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coverurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionSummary.CoverUrl)
}

// required uint32 PackExpire = 10;
bool EmotionSummary::has_packexpire() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void EmotionSummary::set_has_packexpire() {
  _has_bits_[0] |= 0x00020000u;
}
void EmotionSummary::clear_has_packexpire() {
  _has_bits_[0] &= ~0x00020000u;
}
void EmotionSummary::clear_packexpire() {
  packexpire_ = 0u;
  clear_has_packexpire();
}
::google::protobuf::uint32 EmotionSummary::packexpire() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionSummary.PackExpire)
  return packexpire_;
}
void EmotionSummary::set_packexpire(::google::protobuf::uint32 value) {
  set_has_packexpire();
  packexpire_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmotionSummary.PackExpire)
}

// optional string PackCopyright = 11;
bool EmotionSummary::has_packcopyright() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void EmotionSummary::set_has_packcopyright() {
  _has_bits_[0] |= 0x00000080u;
}
void EmotionSummary::clear_has_packcopyright() {
  _has_bits_[0] &= ~0x00000080u;
}
void EmotionSummary::clear_packcopyright() {
  packcopyright_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packcopyright();
}
const ::std::string& EmotionSummary::packcopyright() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionSummary.PackCopyright)
  return packcopyright_.GetNoArena();
}
void EmotionSummary::set_packcopyright(const ::std::string& value) {
  set_has_packcopyright();
  packcopyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionSummary.PackCopyright)
}
#if LANG_CXX11
void EmotionSummary::set_packcopyright(::std::string&& value) {
  set_has_packcopyright();
  packcopyright_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionSummary.PackCopyright)
}
#endif
void EmotionSummary::set_packcopyright(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_packcopyright();
  packcopyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionSummary.PackCopyright)
}
void EmotionSummary::set_packcopyright(const char* value, size_t size) {
  set_has_packcopyright();
  packcopyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionSummary.PackCopyright)
}
::std::string* EmotionSummary::mutable_packcopyright() {
  set_has_packcopyright();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionSummary.PackCopyright)
  return packcopyright_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionSummary::release_packcopyright() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionSummary.PackCopyright)
  clear_has_packcopyright();
  return packcopyright_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionSummary::set_allocated_packcopyright(::std::string* packcopyright) {
  if (packcopyright != NULL) {
    set_has_packcopyright();
  } else {
    clear_has_packcopyright();
  }
  packcopyright_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packcopyright);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionSummary.PackCopyright)
}

// optional uint32 Timestamp = 12;
bool EmotionSummary::has_timestamp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void EmotionSummary::set_has_timestamp() {
  _has_bits_[0] |= 0x00040000u;
}
void EmotionSummary::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00040000u;
}
void EmotionSummary::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 EmotionSummary::timestamp() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionSummary.Timestamp)
  return timestamp_;
}
void EmotionSummary::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmotionSummary.Timestamp)
}

// optional string PanelUrl = 13;
bool EmotionSummary::has_panelurl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void EmotionSummary::set_has_panelurl() {
  _has_bits_[0] |= 0x00000100u;
}
void EmotionSummary::clear_has_panelurl() {
  _has_bits_[0] &= ~0x00000100u;
}
void EmotionSummary::clear_panelurl() {
  panelurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_panelurl();
}
const ::std::string& EmotionSummary::panelurl() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionSummary.PanelUrl)
  return panelurl_.GetNoArena();
}
void EmotionSummary::set_panelurl(const ::std::string& value) {
  set_has_panelurl();
  panelurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionSummary.PanelUrl)
}
#if LANG_CXX11
void EmotionSummary::set_panelurl(::std::string&& value) {
  set_has_panelurl();
  panelurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionSummary.PanelUrl)
}
#endif
void EmotionSummary::set_panelurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_panelurl();
  panelurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionSummary.PanelUrl)
}
void EmotionSummary::set_panelurl(const char* value, size_t size) {
  set_has_panelurl();
  panelurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionSummary.PanelUrl)
}
::std::string* EmotionSummary::mutable_panelurl() {
  set_has_panelurl();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionSummary.PanelUrl)
  return panelurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionSummary::release_panelurl() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionSummary.PanelUrl)
  clear_has_panelurl();
  return panelurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionSummary::set_allocated_panelurl(::std::string* panelurl) {
  if (panelurl != NULL) {
    set_has_panelurl();
  } else {
    clear_has_panelurl();
  }
  panelurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), panelurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionSummary.PanelUrl)
}

// optional string PriceNum = 14;
bool EmotionSummary::has_pricenum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void EmotionSummary::set_has_pricenum() {
  _has_bits_[0] |= 0x00000200u;
}
void EmotionSummary::clear_has_pricenum() {
  _has_bits_[0] &= ~0x00000200u;
}
void EmotionSummary::clear_pricenum() {
  pricenum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pricenum();
}
const ::std::string& EmotionSummary::pricenum() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionSummary.PriceNum)
  return pricenum_.GetNoArena();
}
void EmotionSummary::set_pricenum(const ::std::string& value) {
  set_has_pricenum();
  pricenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionSummary.PriceNum)
}
#if LANG_CXX11
void EmotionSummary::set_pricenum(::std::string&& value) {
  set_has_pricenum();
  pricenum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionSummary.PriceNum)
}
#endif
void EmotionSummary::set_pricenum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pricenum();
  pricenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionSummary.PriceNum)
}
void EmotionSummary::set_pricenum(const char* value, size_t size) {
  set_has_pricenum();
  pricenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionSummary.PriceNum)
}
::std::string* EmotionSummary::mutable_pricenum() {
  set_has_pricenum();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionSummary.PriceNum)
  return pricenum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionSummary::release_pricenum() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionSummary.PriceNum)
  clear_has_pricenum();
  return pricenum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionSummary::set_allocated_pricenum(::std::string* pricenum) {
  if (pricenum != NULL) {
    set_has_pricenum();
  } else {
    clear_has_pricenum();
  }
  pricenum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pricenum);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionSummary.PriceNum)
}

// optional string PriceType = 15;
bool EmotionSummary::has_pricetype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void EmotionSummary::set_has_pricetype() {
  _has_bits_[0] |= 0x00000400u;
}
void EmotionSummary::clear_has_pricetype() {
  _has_bits_[0] &= ~0x00000400u;
}
void EmotionSummary::clear_pricetype() {
  pricetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pricetype();
}
const ::std::string& EmotionSummary::pricetype() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionSummary.PriceType)
  return pricetype_.GetNoArena();
}
void EmotionSummary::set_pricetype(const ::std::string& value) {
  set_has_pricetype();
  pricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionSummary.PriceType)
}
#if LANG_CXX11
void EmotionSummary::set_pricetype(::std::string&& value) {
  set_has_pricetype();
  pricetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionSummary.PriceType)
}
#endif
void EmotionSummary::set_pricetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pricetype();
  pricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionSummary.PriceType)
}
void EmotionSummary::set_pricetype(const char* value, size_t size) {
  set_has_pricetype();
  pricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionSummary.PriceType)
}
::std::string* EmotionSummary::mutable_pricetype() {
  set_has_pricetype();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionSummary.PriceType)
  return pricetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionSummary::release_pricetype() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionSummary.PriceType)
  clear_has_pricetype();
  return pricetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionSummary::set_allocated_pricetype(::std::string* pricetype) {
  if (pricetype != NULL) {
    set_has_pricetype();
  } else {
    clear_has_pricetype();
  }
  pricetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pricetype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionSummary.PriceType)
}

// optional string SendInfo = 16;
bool EmotionSummary::has_sendinfo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void EmotionSummary::set_has_sendinfo() {
  _has_bits_[0] |= 0x00000800u;
}
void EmotionSummary::clear_has_sendinfo() {
  _has_bits_[0] &= ~0x00000800u;
}
void EmotionSummary::clear_sendinfo() {
  sendinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sendinfo();
}
const ::std::string& EmotionSummary::sendinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionSummary.SendInfo)
  return sendinfo_.GetNoArena();
}
void EmotionSummary::set_sendinfo(const ::std::string& value) {
  set_has_sendinfo();
  sendinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionSummary.SendInfo)
}
#if LANG_CXX11
void EmotionSummary::set_sendinfo(::std::string&& value) {
  set_has_sendinfo();
  sendinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionSummary.SendInfo)
}
#endif
void EmotionSummary::set_sendinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sendinfo();
  sendinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionSummary.SendInfo)
}
void EmotionSummary::set_sendinfo(const char* value, size_t size) {
  set_has_sendinfo();
  sendinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionSummary.SendInfo)
}
::std::string* EmotionSummary::mutable_sendinfo() {
  set_has_sendinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionSummary.SendInfo)
  return sendinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionSummary::release_sendinfo() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionSummary.SendInfo)
  clear_has_sendinfo();
  return sendinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionSummary::set_allocated_sendinfo(::std::string* sendinfo) {
  if (sendinfo != NULL) {
    set_has_sendinfo();
  } else {
    clear_has_sendinfo();
  }
  sendinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sendinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionSummary.SendInfo)
}

// optional string TimeLimitStr = 17;
bool EmotionSummary::has_timelimitstr() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void EmotionSummary::set_has_timelimitstr() {
  _has_bits_[0] |= 0x00001000u;
}
void EmotionSummary::clear_has_timelimitstr() {
  _has_bits_[0] &= ~0x00001000u;
}
void EmotionSummary::clear_timelimitstr() {
  timelimitstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timelimitstr();
}
const ::std::string& EmotionSummary::timelimitstr() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionSummary.TimeLimitStr)
  return timelimitstr_.GetNoArena();
}
void EmotionSummary::set_timelimitstr(const ::std::string& value) {
  set_has_timelimitstr();
  timelimitstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionSummary.TimeLimitStr)
}
#if LANG_CXX11
void EmotionSummary::set_timelimitstr(::std::string&& value) {
  set_has_timelimitstr();
  timelimitstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionSummary.TimeLimitStr)
}
#endif
void EmotionSummary::set_timelimitstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timelimitstr();
  timelimitstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionSummary.TimeLimitStr)
}
void EmotionSummary::set_timelimitstr(const char* value, size_t size) {
  set_has_timelimitstr();
  timelimitstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionSummary.TimeLimitStr)
}
::std::string* EmotionSummary::mutable_timelimitstr() {
  set_has_timelimitstr();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionSummary.TimeLimitStr)
  return timelimitstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionSummary::release_timelimitstr() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionSummary.TimeLimitStr)
  clear_has_timelimitstr();
  return timelimitstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionSummary::set_allocated_timelimitstr(::std::string* timelimitstr) {
  if (timelimitstr != NULL) {
    set_has_timelimitstr();
  } else {
    clear_has_timelimitstr();
  }
  timelimitstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timelimitstr);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionSummary.TimeLimitStr)
}

// optional string Introduce = 18;
bool EmotionSummary::has_introduce() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void EmotionSummary::set_has_introduce() {
  _has_bits_[0] |= 0x00002000u;
}
void EmotionSummary::clear_has_introduce() {
  _has_bits_[0] &= ~0x00002000u;
}
void EmotionSummary::clear_introduce() {
  introduce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_introduce();
}
const ::std::string& EmotionSummary::introduce() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionSummary.Introduce)
  return introduce_.GetNoArena();
}
void EmotionSummary::set_introduce(const ::std::string& value) {
  set_has_introduce();
  introduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionSummary.Introduce)
}
#if LANG_CXX11
void EmotionSummary::set_introduce(::std::string&& value) {
  set_has_introduce();
  introduce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionSummary.Introduce)
}
#endif
void EmotionSummary::set_introduce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_introduce();
  introduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionSummary.Introduce)
}
void EmotionSummary::set_introduce(const char* value, size_t size) {
  set_has_introduce();
  introduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionSummary.Introduce)
}
::std::string* EmotionSummary::mutable_introduce() {
  set_has_introduce();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionSummary.Introduce)
  return introduce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionSummary::release_introduce() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionSummary.Introduce)
  clear_has_introduce();
  return introduce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionSummary::set_allocated_introduce(::std::string* introduce) {
  if (introduce != NULL) {
    set_has_introduce();
  } else {
    clear_has_introduce();
  }
  introduce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), introduce);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionSummary.Introduce)
}

// optional string TagUri = 19;
bool EmotionSummary::has_taguri() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void EmotionSummary::set_has_taguri() {
  _has_bits_[0] |= 0x00004000u;
}
void EmotionSummary::clear_has_taguri() {
  _has_bits_[0] &= ~0x00004000u;
}
void EmotionSummary::clear_taguri() {
  taguri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_taguri();
}
const ::std::string& EmotionSummary::taguri() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionSummary.TagUri)
  return taguri_.GetNoArena();
}
void EmotionSummary::set_taguri(const ::std::string& value) {
  set_has_taguri();
  taguri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionSummary.TagUri)
}
#if LANG_CXX11
void EmotionSummary::set_taguri(::std::string&& value) {
  set_has_taguri();
  taguri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionSummary.TagUri)
}
#endif
void EmotionSummary::set_taguri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_taguri();
  taguri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionSummary.TagUri)
}
void EmotionSummary::set_taguri(const char* value, size_t size) {
  set_has_taguri();
  taguri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionSummary.TagUri)
}
::std::string* EmotionSummary::mutable_taguri() {
  set_has_taguri();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionSummary.TagUri)
  return taguri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionSummary::release_taguri() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionSummary.TagUri)
  clear_has_taguri();
  return taguri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionSummary::set_allocated_taguri(::std::string* taguri) {
  if (taguri != NULL) {
    set_has_taguri();
  } else {
    clear_has_taguri();
  }
  taguri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taguri);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionSummary.TagUri)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PackThumbExt::kPreviewUrlFieldNumber;
const int PackThumbExt::kDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PackThumbExt::PackThumbExt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.PackThumbExt)
}
PackThumbExt::PackThumbExt(const PackThumbExt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  previewurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_previewurl()) {
    previewurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previewurl_);
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.PackThumbExt)
}

void PackThumbExt::SharedCtor() {
  _cached_size_ = 0;
  previewurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PackThumbExt::~PackThumbExt() {
  // @@protoc_insertion_point(destructor:micromsg.PackThumbExt)
  SharedDtor();
}

void PackThumbExt::SharedDtor() {
  previewurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PackThumbExt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackThumbExt::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PackThumbExt& PackThumbExt::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

PackThumbExt* PackThumbExt::New(::google::protobuf::Arena* arena) const {
  PackThumbExt* n = new PackThumbExt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PackThumbExt::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.PackThumbExt)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_previewurl()) {
      GOOGLE_DCHECK(!previewurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*previewurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_desc()) {
      GOOGLE_DCHECK(!desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*desc_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PackThumbExt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.PackThumbExt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string PreviewUrl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_previewurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->previewurl().data(), this->previewurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PackThumbExt.PreviewUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PackThumbExt.Desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.PackThumbExt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.PackThumbExt)
  return false;
#undef DO_
}

void PackThumbExt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.PackThumbExt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string PreviewUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->previewurl().data(), this->previewurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PackThumbExt.PreviewUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->previewurl(), output);
  }

  // optional string Desc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PackThumbExt.Desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.PackThumbExt)
}

::google::protobuf::uint8* PackThumbExt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.PackThumbExt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string PreviewUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->previewurl().data(), this->previewurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PackThumbExt.PreviewUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->previewurl(), target);
  }

  // optional string Desc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PackThumbExt.Desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.PackThumbExt)
  return target;
}

size_t PackThumbExt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.PackThumbExt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string PreviewUrl = 1;
    if (has_previewurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->previewurl());
    }

    // optional string Desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackThumbExt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.PackThumbExt)
  GOOGLE_DCHECK_NE(&from, this);
  const PackThumbExt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PackThumbExt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.PackThumbExt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.PackThumbExt)
    MergeFrom(*source);
  }
}

void PackThumbExt::MergeFrom(const PackThumbExt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.PackThumbExt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_previewurl();
      previewurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previewurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
  }
}

void PackThumbExt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.PackThumbExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackThumbExt::CopyFrom(const PackThumbExt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.PackThumbExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackThumbExt::IsInitialized() const {
  return true;
}

void PackThumbExt::Swap(PackThumbExt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PackThumbExt::InternalSwap(PackThumbExt* other) {
  previewurl_.Swap(&other->previewurl_);
  desc_.Swap(&other->desc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PackThumbExt::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PackThumbExt

// optional string PreviewUrl = 1;
bool PackThumbExt::has_previewurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PackThumbExt::set_has_previewurl() {
  _has_bits_[0] |= 0x00000001u;
}
void PackThumbExt::clear_has_previewurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void PackThumbExt::clear_previewurl() {
  previewurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_previewurl();
}
const ::std::string& PackThumbExt::previewurl() const {
  // @@protoc_insertion_point(field_get:micromsg.PackThumbExt.PreviewUrl)
  return previewurl_.GetNoArena();
}
void PackThumbExt::set_previewurl(const ::std::string& value) {
  set_has_previewurl();
  previewurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PackThumbExt.PreviewUrl)
}
#if LANG_CXX11
void PackThumbExt::set_previewurl(::std::string&& value) {
  set_has_previewurl();
  previewurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PackThumbExt.PreviewUrl)
}
#endif
void PackThumbExt::set_previewurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_previewurl();
  previewurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PackThumbExt.PreviewUrl)
}
void PackThumbExt::set_previewurl(const char* value, size_t size) {
  set_has_previewurl();
  previewurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PackThumbExt.PreviewUrl)
}
::std::string* PackThumbExt::mutable_previewurl() {
  set_has_previewurl();
  // @@protoc_insertion_point(field_mutable:micromsg.PackThumbExt.PreviewUrl)
  return previewurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PackThumbExt::release_previewurl() {
  // @@protoc_insertion_point(field_release:micromsg.PackThumbExt.PreviewUrl)
  clear_has_previewurl();
  return previewurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PackThumbExt::set_allocated_previewurl(::std::string* previewurl) {
  if (previewurl != NULL) {
    set_has_previewurl();
  } else {
    clear_has_previewurl();
  }
  previewurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), previewurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PackThumbExt.PreviewUrl)
}

// optional string Desc = 2;
bool PackThumbExt::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PackThumbExt::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
void PackThumbExt::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
void PackThumbExt::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
const ::std::string& PackThumbExt::desc() const {
  // @@protoc_insertion_point(field_get:micromsg.PackThumbExt.Desc)
  return desc_.GetNoArena();
}
void PackThumbExt::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PackThumbExt.Desc)
}
#if LANG_CXX11
void PackThumbExt::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PackThumbExt.Desc)
}
#endif
void PackThumbExt::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PackThumbExt.Desc)
}
void PackThumbExt::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PackThumbExt.Desc)
}
::std::string* PackThumbExt::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:micromsg.PackThumbExt.Desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PackThumbExt::release_desc() {
  // @@protoc_insertion_point(field_release:micromsg.PackThumbExt.Desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PackThumbExt::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PackThumbExt.Desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmotionDetail::kProductIDFieldNumber;
const int EmotionDetail::kIconUrlFieldNumber;
const int EmotionDetail::kPackNameFieldNumber;
const int EmotionDetail::kPackDescFieldNumber;
const int EmotionDetail::kPackAuthInfoFieldNumber;
const int EmotionDetail::kPackPriceFieldNumber;
const int EmotionDetail::kPackTypeFieldNumber;
const int EmotionDetail::kPackFlagFieldNumber;
const int EmotionDetail::kPackThumbCntFieldNumber;
const int EmotionDetail::kPackThumbListFieldNumber;
const int EmotionDetail::kCoverUrlFieldNumber;
const int EmotionDetail::kPackExpireFieldNumber;
const int EmotionDetail::kPackCopyrightFieldNumber;
const int EmotionDetail::kPriceNumFieldNumber;
const int EmotionDetail::kPriceTypeFieldNumber;
const int EmotionDetail::kPanelUrlFieldNumber;
const int EmotionDetail::kConsumeProductIDFieldNumber;
const int EmotionDetail::kThumbExtCountFieldNumber;
const int EmotionDetail::kThumbExtListFieldNumber;
const int EmotionDetail::kVersionFieldNumber;
const int EmotionDetail::kTimeLimitStrFieldNumber;
const int EmotionDetail::kShareDescFieldNumber;
const int EmotionDetail::kOldRedirectUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmotionDetail::EmotionDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EmotionDetail)
}
EmotionDetail::EmotionDetail(const EmotionDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      packthumblist_(from.packthumblist_),
      thumbextlist_(from.thumbextlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  iconurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_iconurl()) {
    iconurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iconurl_);
  }
  packname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packname()) {
    packname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packname_);
  }
  packdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packdesc()) {
    packdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packdesc_);
  }
  packauthinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packauthinfo()) {
    packauthinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packauthinfo_);
  }
  packprice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packprice()) {
    packprice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packprice_);
  }
  coverurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_coverurl()) {
    coverurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coverurl_);
  }
  packcopyright_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packcopyright()) {
    packcopyright_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packcopyright_);
  }
  pricenum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pricenum()) {
    pricenum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pricenum_);
  }
  pricetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pricetype()) {
    pricetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pricetype_);
  }
  panelurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_panelurl()) {
    panelurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.panelurl_);
  }
  consumeproductid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_consumeproductid()) {
    consumeproductid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consumeproductid_);
  }
  timelimitstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timelimitstr()) {
    timelimitstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timelimitstr_);
  }
  sharedesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sharedesc()) {
    sharedesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sharedesc_);
  }
  oldredirecturl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_oldredirecturl()) {
    oldredirecturl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oldredirecturl_);
  }
  ::memcpy(&packtype_, &from.packtype_,
    reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&packtype_) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:micromsg.EmotionDetail)
}

void EmotionDetail::SharedCtor() {
  _cached_size_ = 0;
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iconurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packauthinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packprice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coverurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packcopyright_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pricenum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pricetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  panelurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumeproductid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timelimitstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sharedesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oldredirecturl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&packtype_, 0, reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&packtype_) + sizeof(version_));
}

EmotionDetail::~EmotionDetail() {
  // @@protoc_insertion_point(destructor:micromsg.EmotionDetail)
  SharedDtor();
}

void EmotionDetail::SharedDtor() {
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iconurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packdesc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packauthinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packprice_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coverurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packcopyright_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pricenum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pricetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  panelurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumeproductid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timelimitstr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sharedesc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oldredirecturl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EmotionDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmotionDetail::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmotionDetail& EmotionDetail::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmotionDetail* EmotionDetail::New(::google::protobuf::Arena* arena) const {
  EmotionDetail* n = new EmotionDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmotionDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EmotionDetail)
  packthumblist_.Clear();
  thumbextlist_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_productid()) {
      GOOGLE_DCHECK(!productid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*productid_.UnsafeRawStringPointer())->clear();
    }
    if (has_iconurl()) {
      GOOGLE_DCHECK(!iconurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*iconurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_packname()) {
      GOOGLE_DCHECK(!packname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*packname_.UnsafeRawStringPointer())->clear();
    }
    if (has_packdesc()) {
      GOOGLE_DCHECK(!packdesc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*packdesc_.UnsafeRawStringPointer())->clear();
    }
    if (has_packauthinfo()) {
      GOOGLE_DCHECK(!packauthinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*packauthinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_packprice()) {
      GOOGLE_DCHECK(!packprice_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*packprice_.UnsafeRawStringPointer())->clear();
    }
    if (has_coverurl()) {
      GOOGLE_DCHECK(!coverurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*coverurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_packcopyright()) {
      GOOGLE_DCHECK(!packcopyright_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*packcopyright_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512u) {
    if (has_pricenum()) {
      GOOGLE_DCHECK(!pricenum_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pricenum_.UnsafeRawStringPointer())->clear();
    }
    if (has_pricetype()) {
      GOOGLE_DCHECK(!pricetype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pricetype_.UnsafeRawStringPointer())->clear();
    }
    if (has_panelurl()) {
      GOOGLE_DCHECK(!panelurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*panelurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_consumeproductid()) {
      GOOGLE_DCHECK(!consumeproductid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*consumeproductid_.UnsafeRawStringPointer())->clear();
    }
    if (has_timelimitstr()) {
      GOOGLE_DCHECK(!timelimitstr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*timelimitstr_.UnsafeRawStringPointer())->clear();
    }
    if (has_sharedesc()) {
      GOOGLE_DCHECK(!sharedesc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sharedesc_.UnsafeRawStringPointer())->clear();
    }
    if (has_oldredirecturl()) {
      GOOGLE_DCHECK(!oldredirecturl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*oldredirecturl_.UnsafeRawStringPointer())->clear();
    }
  }
  packtype_ = 0u;
  if (_has_bits_[16 / 32] & 2031616u) {
    ::memset(&packflag_, 0, reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&packflag_) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmotionDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EmotionDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ProductID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionDetail.ProductID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string IconUrl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iconurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iconurl().data(), this->iconurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionDetail.IconUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PackName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->packname().data(), this->packname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionDetail.PackName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PackDesc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->packdesc().data(), this->packdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionDetail.PackDesc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PackAuthInfo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packauthinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->packauthinfo().data(), this->packauthinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionDetail.PackAuthInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PackPrice = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packprice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->packprice().data(), this->packprice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionDetail.PackPrice");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 PackType = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_packtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 PackFlag = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_packflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 PackThumbCnt = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_packthumbcnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packthumbcnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t PackThumbList = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_packthumblist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CoverUrl = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coverurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->coverurl().data(), this->coverurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionDetail.CoverUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 PackExpire = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_packexpire();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packexpire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PackCopyright = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packcopyright()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->packcopyright().data(), this->packcopyright().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionDetail.PackCopyright");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PriceNum = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pricenum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pricenum().data(), this->pricenum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionDetail.PriceNum");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PriceType = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pricetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pricetype().data(), this->pricetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionDetail.PriceType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PanelUrl = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_panelurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->panelurl().data(), this->panelurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionDetail.PanelUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ConsumeProductID = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_consumeproductid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->consumeproductid().data(), this->consumeproductid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionDetail.ConsumeProductID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ThumbExtCount = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_thumbextcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumbextcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.PackThumbExt ThumbExtList = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_thumbextlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Version = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TimeLimitStr = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timelimitstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timelimitstr().data(), this->timelimitstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionDetail.TimeLimitStr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ShareDesc = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sharedesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sharedesc().data(), this->sharedesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionDetail.ShareDesc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string OldRedirectUrl = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldredirecturl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oldredirecturl().data(), this->oldredirecturl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionDetail.OldRedirectUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EmotionDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EmotionDetail)
  return false;
#undef DO_
}

void EmotionDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EmotionDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ProductID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.ProductID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->productid(), output);
  }

  // optional string IconUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iconurl().data(), this->iconurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.IconUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->iconurl(), output);
  }

  // optional string PackName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packname().data(), this->packname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.PackName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->packname(), output);
  }

  // optional string PackDesc = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packdesc().data(), this->packdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.PackDesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->packdesc(), output);
  }

  // optional string PackAuthInfo = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packauthinfo().data(), this->packauthinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.PackAuthInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->packauthinfo(), output);
  }

  // optional string PackPrice = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packprice().data(), this->packprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.PackPrice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->packprice(), output);
  }

  // required uint32 PackType = 7;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->packtype(), output);
  }

  // required uint32 PackFlag = 8;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->packflag(), output);
  }

  // required uint32 PackThumbCnt = 9;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->packthumbcnt(), output);
  }

  // repeated .micromsg.SKBuiltinString_t PackThumbList = 10;
  for (unsigned int i = 0, n = this->packthumblist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->packthumblist(i), output);
  }

  // optional string CoverUrl = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coverurl().data(), this->coverurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.CoverUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->coverurl(), output);
  }

  // required uint32 PackExpire = 12;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->packexpire(), output);
  }

  // optional string PackCopyright = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packcopyright().data(), this->packcopyright().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.PackCopyright");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->packcopyright(), output);
  }

  // optional string PriceNum = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricenum().data(), this->pricenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.PriceNum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->pricenum(), output);
  }

  // optional string PriceType = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricetype().data(), this->pricetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.PriceType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->pricetype(), output);
  }

  // optional string PanelUrl = 16;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->panelurl().data(), this->panelurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.PanelUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->panelurl(), output);
  }

  // optional string ConsumeProductID = 17;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->consumeproductid().data(), this->consumeproductid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.ConsumeProductID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->consumeproductid(), output);
  }

  // optional uint32 ThumbExtCount = 18;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->thumbextcount(), output);
  }

  // repeated .micromsg.PackThumbExt ThumbExtList = 19;
  for (unsigned int i = 0, n = this->thumbextlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->thumbextlist(i), output);
  }

  // optional int32 Version = 20;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->version(), output);
  }

  // optional string TimeLimitStr = 21;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timelimitstr().data(), this->timelimitstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.TimeLimitStr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->timelimitstr(), output);
  }

  // optional string ShareDesc = 22;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sharedesc().data(), this->sharedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.ShareDesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->sharedesc(), output);
  }

  // optional string OldRedirectUrl = 23;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldredirecturl().data(), this->oldredirecturl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.OldRedirectUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->oldredirecturl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EmotionDetail)
}

::google::protobuf::uint8* EmotionDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EmotionDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ProductID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.ProductID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->productid(), target);
  }

  // optional string IconUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iconurl().data(), this->iconurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.IconUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->iconurl(), target);
  }

  // optional string PackName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packname().data(), this->packname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.PackName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->packname(), target);
  }

  // optional string PackDesc = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packdesc().data(), this->packdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.PackDesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->packdesc(), target);
  }

  // optional string PackAuthInfo = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packauthinfo().data(), this->packauthinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.PackAuthInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->packauthinfo(), target);
  }

  // optional string PackPrice = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packprice().data(), this->packprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.PackPrice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->packprice(), target);
  }

  // required uint32 PackType = 7;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->packtype(), target);
  }

  // required uint32 PackFlag = 8;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->packflag(), target);
  }

  // required uint32 PackThumbCnt = 9;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->packthumbcnt(), target);
  }

  // repeated .micromsg.SKBuiltinString_t PackThumbList = 10;
  for (unsigned int i = 0, n = this->packthumblist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->packthumblist(i), deterministic, target);
  }

  // optional string CoverUrl = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coverurl().data(), this->coverurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.CoverUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->coverurl(), target);
  }

  // required uint32 PackExpire = 12;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->packexpire(), target);
  }

  // optional string PackCopyright = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packcopyright().data(), this->packcopyright().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.PackCopyright");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->packcopyright(), target);
  }

  // optional string PriceNum = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricenum().data(), this->pricenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.PriceNum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->pricenum(), target);
  }

  // optional string PriceType = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricetype().data(), this->pricetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.PriceType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->pricetype(), target);
  }

  // optional string PanelUrl = 16;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->panelurl().data(), this->panelurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.PanelUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->panelurl(), target);
  }

  // optional string ConsumeProductID = 17;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->consumeproductid().data(), this->consumeproductid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.ConsumeProductID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->consumeproductid(), target);
  }

  // optional uint32 ThumbExtCount = 18;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->thumbextcount(), target);
  }

  // repeated .micromsg.PackThumbExt ThumbExtList = 19;
  for (unsigned int i = 0, n = this->thumbextlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, this->thumbextlist(i), deterministic, target);
  }

  // optional int32 Version = 20;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->version(), target);
  }

  // optional string TimeLimitStr = 21;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timelimitstr().data(), this->timelimitstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.TimeLimitStr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->timelimitstr(), target);
  }

  // optional string ShareDesc = 22;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sharedesc().data(), this->sharedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.ShareDesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->sharedesc(), target);
  }

  // optional string OldRedirectUrl = 23;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldredirecturl().data(), this->oldredirecturl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDetail.OldRedirectUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->oldredirecturl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EmotionDetail)
  return target;
}

size_t EmotionDetail::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.EmotionDetail)
  size_t total_size = 0;

  if (has_packtype()) {
    // required uint32 PackType = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packtype());
  }

  if (has_packflag()) {
    // required uint32 PackFlag = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packflag());
  }

  if (has_packthumbcnt()) {
    // required uint32 PackThumbCnt = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packthumbcnt());
  }

  if (has_packexpire()) {
    // required uint32 PackExpire = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packexpire());
  }

  return total_size;
}
size_t EmotionDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EmotionDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00078000) ^ 0x00078000) == 0) {  // All required fields are present.
    // required uint32 PackType = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packtype());

    // required uint32 PackFlag = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packflag());

    // required uint32 PackThumbCnt = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packthumbcnt());

    // required uint32 PackExpire = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packexpire());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SKBuiltinString_t PackThumbList = 10;
  {
    unsigned int count = this->packthumblist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->packthumblist(i));
    }
  }

  // repeated .micromsg.PackThumbExt ThumbExtList = 19;
  {
    unsigned int count = this->thumbextlist_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thumbextlist(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string ProductID = 1;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // optional string IconUrl = 2;
    if (has_iconurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iconurl());
    }

    // optional string PackName = 3;
    if (has_packname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packname());
    }

    // optional string PackDesc = 4;
    if (has_packdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packdesc());
    }

    // optional string PackAuthInfo = 5;
    if (has_packauthinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packauthinfo());
    }

    // optional string PackPrice = 6;
    if (has_packprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packprice());
    }

    // optional string CoverUrl = 11;
    if (has_coverurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->coverurl());
    }

    // optional string PackCopyright = 13;
    if (has_packcopyright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packcopyright());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional string PriceNum = 14;
    if (has_pricenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pricenum());
    }

    // optional string PriceType = 15;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pricetype());
    }

    // optional string PanelUrl = 16;
    if (has_panelurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->panelurl());
    }

    // optional string ConsumeProductID = 17;
    if (has_consumeproductid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->consumeproductid());
    }

    // optional string TimeLimitStr = 21;
    if (has_timelimitstr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timelimitstr());
    }

    // optional string ShareDesc = 22;
    if (has_sharedesc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sharedesc());
    }

    // optional string OldRedirectUrl = 23;
    if (has_oldredirecturl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldredirecturl());
    }

  }
  if (_has_bits_[16 / 32] & 1572864u) {
    // optional uint32 ThumbExtCount = 18;
    if (has_thumbextcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thumbextcount());
    }

    // optional int32 Version = 20;
    if (has_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmotionDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EmotionDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const EmotionDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmotionDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EmotionDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EmotionDetail)
    MergeFrom(*source);
  }
}

void EmotionDetail::MergeFrom(const EmotionDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EmotionDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packthumblist_.MergeFrom(from.packthumblist_);
  thumbextlist_.MergeFrom(from.thumbextlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_iconurl();
      iconurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iconurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_packname();
      packname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packname_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_packdesc();
      packdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packdesc_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_packauthinfo();
      packauthinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packauthinfo_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_packprice();
      packprice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packprice_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_coverurl();
      coverurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coverurl_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_packcopyright();
      packcopyright_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packcopyright_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_pricenum();
      pricenum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pricenum_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_pricetype();
      pricetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pricetype_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_panelurl();
      panelurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.panelurl_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_consumeproductid();
      consumeproductid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consumeproductid_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_timelimitstr();
      timelimitstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timelimitstr_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_sharedesc();
      sharedesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sharedesc_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_oldredirecturl();
      oldredirecturl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oldredirecturl_);
    }
    if (cached_has_bits & 0x00008000u) {
      packtype_ = from.packtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      packflag_ = from.packflag_;
    }
    if (cached_has_bits & 0x00020000u) {
      packthumbcnt_ = from.packthumbcnt_;
    }
    if (cached_has_bits & 0x00040000u) {
      packexpire_ = from.packexpire_;
    }
    if (cached_has_bits & 0x00080000u) {
      thumbextcount_ = from.thumbextcount_;
    }
    if (cached_has_bits & 0x00100000u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EmotionDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EmotionDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmotionDetail::CopyFrom(const EmotionDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EmotionDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmotionDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00078000) != 0x00078000) return false;
  return true;
}

void EmotionDetail::Swap(EmotionDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmotionDetail::InternalSwap(EmotionDetail* other) {
  packthumblist_.InternalSwap(&other->packthumblist_);
  thumbextlist_.InternalSwap(&other->thumbextlist_);
  productid_.Swap(&other->productid_);
  iconurl_.Swap(&other->iconurl_);
  packname_.Swap(&other->packname_);
  packdesc_.Swap(&other->packdesc_);
  packauthinfo_.Swap(&other->packauthinfo_);
  packprice_.Swap(&other->packprice_);
  coverurl_.Swap(&other->coverurl_);
  packcopyright_.Swap(&other->packcopyright_);
  pricenum_.Swap(&other->pricenum_);
  pricetype_.Swap(&other->pricetype_);
  panelurl_.Swap(&other->panelurl_);
  consumeproductid_.Swap(&other->consumeproductid_);
  timelimitstr_.Swap(&other->timelimitstr_);
  sharedesc_.Swap(&other->sharedesc_);
  oldredirecturl_.Swap(&other->oldredirecturl_);
  std::swap(packtype_, other->packtype_);
  std::swap(packflag_, other->packflag_);
  std::swap(packthumbcnt_, other->packthumbcnt_);
  std::swap(packexpire_, other->packexpire_);
  std::swap(thumbextcount_, other->thumbextcount_);
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmotionDetail::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmotionDetail

// optional string ProductID = 1;
bool EmotionDetail::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmotionDetail::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
void EmotionDetail::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmotionDetail::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
const ::std::string& EmotionDetail::productid() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.ProductID)
  return productid_.GetNoArena();
}
void EmotionDetail::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionDetail.ProductID)
}
#if LANG_CXX11
void EmotionDetail::set_productid(::std::string&& value) {
  set_has_productid();
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionDetail.ProductID)
}
#endif
void EmotionDetail::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionDetail.ProductID)
}
void EmotionDetail::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionDetail.ProductID)
}
::std::string* EmotionDetail::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionDetail.ProductID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionDetail::release_productid() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionDetail.ProductID)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionDetail::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionDetail.ProductID)
}

// optional string IconUrl = 2;
bool EmotionDetail::has_iconurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmotionDetail::set_has_iconurl() {
  _has_bits_[0] |= 0x00000002u;
}
void EmotionDetail::clear_has_iconurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmotionDetail::clear_iconurl() {
  iconurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iconurl();
}
const ::std::string& EmotionDetail::iconurl() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.IconUrl)
  return iconurl_.GetNoArena();
}
void EmotionDetail::set_iconurl(const ::std::string& value) {
  set_has_iconurl();
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionDetail.IconUrl)
}
#if LANG_CXX11
void EmotionDetail::set_iconurl(::std::string&& value) {
  set_has_iconurl();
  iconurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionDetail.IconUrl)
}
#endif
void EmotionDetail::set_iconurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_iconurl();
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionDetail.IconUrl)
}
void EmotionDetail::set_iconurl(const char* value, size_t size) {
  set_has_iconurl();
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionDetail.IconUrl)
}
::std::string* EmotionDetail::mutable_iconurl() {
  set_has_iconurl();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionDetail.IconUrl)
  return iconurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionDetail::release_iconurl() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionDetail.IconUrl)
  clear_has_iconurl();
  return iconurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionDetail::set_allocated_iconurl(::std::string* iconurl) {
  if (iconurl != NULL) {
    set_has_iconurl();
  } else {
    clear_has_iconurl();
  }
  iconurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iconurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionDetail.IconUrl)
}

// optional string PackName = 3;
bool EmotionDetail::has_packname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EmotionDetail::set_has_packname() {
  _has_bits_[0] |= 0x00000004u;
}
void EmotionDetail::clear_has_packname() {
  _has_bits_[0] &= ~0x00000004u;
}
void EmotionDetail::clear_packname() {
  packname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packname();
}
const ::std::string& EmotionDetail::packname() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.PackName)
  return packname_.GetNoArena();
}
void EmotionDetail::set_packname(const ::std::string& value) {
  set_has_packname();
  packname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionDetail.PackName)
}
#if LANG_CXX11
void EmotionDetail::set_packname(::std::string&& value) {
  set_has_packname();
  packname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionDetail.PackName)
}
#endif
void EmotionDetail::set_packname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_packname();
  packname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionDetail.PackName)
}
void EmotionDetail::set_packname(const char* value, size_t size) {
  set_has_packname();
  packname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionDetail.PackName)
}
::std::string* EmotionDetail::mutable_packname() {
  set_has_packname();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionDetail.PackName)
  return packname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionDetail::release_packname() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionDetail.PackName)
  clear_has_packname();
  return packname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionDetail::set_allocated_packname(::std::string* packname) {
  if (packname != NULL) {
    set_has_packname();
  } else {
    clear_has_packname();
  }
  packname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionDetail.PackName)
}

// optional string PackDesc = 4;
bool EmotionDetail::has_packdesc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EmotionDetail::set_has_packdesc() {
  _has_bits_[0] |= 0x00000008u;
}
void EmotionDetail::clear_has_packdesc() {
  _has_bits_[0] &= ~0x00000008u;
}
void EmotionDetail::clear_packdesc() {
  packdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packdesc();
}
const ::std::string& EmotionDetail::packdesc() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.PackDesc)
  return packdesc_.GetNoArena();
}
void EmotionDetail::set_packdesc(const ::std::string& value) {
  set_has_packdesc();
  packdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionDetail.PackDesc)
}
#if LANG_CXX11
void EmotionDetail::set_packdesc(::std::string&& value) {
  set_has_packdesc();
  packdesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionDetail.PackDesc)
}
#endif
void EmotionDetail::set_packdesc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_packdesc();
  packdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionDetail.PackDesc)
}
void EmotionDetail::set_packdesc(const char* value, size_t size) {
  set_has_packdesc();
  packdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionDetail.PackDesc)
}
::std::string* EmotionDetail::mutable_packdesc() {
  set_has_packdesc();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionDetail.PackDesc)
  return packdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionDetail::release_packdesc() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionDetail.PackDesc)
  clear_has_packdesc();
  return packdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionDetail::set_allocated_packdesc(::std::string* packdesc) {
  if (packdesc != NULL) {
    set_has_packdesc();
  } else {
    clear_has_packdesc();
  }
  packdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packdesc);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionDetail.PackDesc)
}

// optional string PackAuthInfo = 5;
bool EmotionDetail::has_packauthinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EmotionDetail::set_has_packauthinfo() {
  _has_bits_[0] |= 0x00000010u;
}
void EmotionDetail::clear_has_packauthinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
void EmotionDetail::clear_packauthinfo() {
  packauthinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packauthinfo();
}
const ::std::string& EmotionDetail::packauthinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.PackAuthInfo)
  return packauthinfo_.GetNoArena();
}
void EmotionDetail::set_packauthinfo(const ::std::string& value) {
  set_has_packauthinfo();
  packauthinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionDetail.PackAuthInfo)
}
#if LANG_CXX11
void EmotionDetail::set_packauthinfo(::std::string&& value) {
  set_has_packauthinfo();
  packauthinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionDetail.PackAuthInfo)
}
#endif
void EmotionDetail::set_packauthinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_packauthinfo();
  packauthinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionDetail.PackAuthInfo)
}
void EmotionDetail::set_packauthinfo(const char* value, size_t size) {
  set_has_packauthinfo();
  packauthinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionDetail.PackAuthInfo)
}
::std::string* EmotionDetail::mutable_packauthinfo() {
  set_has_packauthinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionDetail.PackAuthInfo)
  return packauthinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionDetail::release_packauthinfo() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionDetail.PackAuthInfo)
  clear_has_packauthinfo();
  return packauthinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionDetail::set_allocated_packauthinfo(::std::string* packauthinfo) {
  if (packauthinfo != NULL) {
    set_has_packauthinfo();
  } else {
    clear_has_packauthinfo();
  }
  packauthinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packauthinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionDetail.PackAuthInfo)
}

// optional string PackPrice = 6;
bool EmotionDetail::has_packprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EmotionDetail::set_has_packprice() {
  _has_bits_[0] |= 0x00000020u;
}
void EmotionDetail::clear_has_packprice() {
  _has_bits_[0] &= ~0x00000020u;
}
void EmotionDetail::clear_packprice() {
  packprice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packprice();
}
const ::std::string& EmotionDetail::packprice() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.PackPrice)
  return packprice_.GetNoArena();
}
void EmotionDetail::set_packprice(const ::std::string& value) {
  set_has_packprice();
  packprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionDetail.PackPrice)
}
#if LANG_CXX11
void EmotionDetail::set_packprice(::std::string&& value) {
  set_has_packprice();
  packprice_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionDetail.PackPrice)
}
#endif
void EmotionDetail::set_packprice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_packprice();
  packprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionDetail.PackPrice)
}
void EmotionDetail::set_packprice(const char* value, size_t size) {
  set_has_packprice();
  packprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionDetail.PackPrice)
}
::std::string* EmotionDetail::mutable_packprice() {
  set_has_packprice();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionDetail.PackPrice)
  return packprice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionDetail::release_packprice() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionDetail.PackPrice)
  clear_has_packprice();
  return packprice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionDetail::set_allocated_packprice(::std::string* packprice) {
  if (packprice != NULL) {
    set_has_packprice();
  } else {
    clear_has_packprice();
  }
  packprice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packprice);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionDetail.PackPrice)
}

// required uint32 PackType = 7;
bool EmotionDetail::has_packtype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void EmotionDetail::set_has_packtype() {
  _has_bits_[0] |= 0x00008000u;
}
void EmotionDetail::clear_has_packtype() {
  _has_bits_[0] &= ~0x00008000u;
}
void EmotionDetail::clear_packtype() {
  packtype_ = 0u;
  clear_has_packtype();
}
::google::protobuf::uint32 EmotionDetail::packtype() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.PackType)
  return packtype_;
}
void EmotionDetail::set_packtype(::google::protobuf::uint32 value) {
  set_has_packtype();
  packtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmotionDetail.PackType)
}

// required uint32 PackFlag = 8;
bool EmotionDetail::has_packflag() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void EmotionDetail::set_has_packflag() {
  _has_bits_[0] |= 0x00010000u;
}
void EmotionDetail::clear_has_packflag() {
  _has_bits_[0] &= ~0x00010000u;
}
void EmotionDetail::clear_packflag() {
  packflag_ = 0u;
  clear_has_packflag();
}
::google::protobuf::uint32 EmotionDetail::packflag() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.PackFlag)
  return packflag_;
}
void EmotionDetail::set_packflag(::google::protobuf::uint32 value) {
  set_has_packflag();
  packflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmotionDetail.PackFlag)
}

// required uint32 PackThumbCnt = 9;
bool EmotionDetail::has_packthumbcnt() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void EmotionDetail::set_has_packthumbcnt() {
  _has_bits_[0] |= 0x00020000u;
}
void EmotionDetail::clear_has_packthumbcnt() {
  _has_bits_[0] &= ~0x00020000u;
}
void EmotionDetail::clear_packthumbcnt() {
  packthumbcnt_ = 0u;
  clear_has_packthumbcnt();
}
::google::protobuf::uint32 EmotionDetail::packthumbcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.PackThumbCnt)
  return packthumbcnt_;
}
void EmotionDetail::set_packthumbcnt(::google::protobuf::uint32 value) {
  set_has_packthumbcnt();
  packthumbcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmotionDetail.PackThumbCnt)
}

// repeated .micromsg.SKBuiltinString_t PackThumbList = 10;
int EmotionDetail::packthumblist_size() const {
  return packthumblist_.size();
}
void EmotionDetail::clear_packthumblist() {
  packthumblist_.Clear();
}
const ::micromsg::SKBuiltinString_t& EmotionDetail::packthumblist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.PackThumbList)
  return packthumblist_.Get(index);
}
::micromsg::SKBuiltinString_t* EmotionDetail::mutable_packthumblist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionDetail.PackThumbList)
  return packthumblist_.Mutable(index);
}
::micromsg::SKBuiltinString_t* EmotionDetail::add_packthumblist() {
  // @@protoc_insertion_point(field_add:micromsg.EmotionDetail.PackThumbList)
  return packthumblist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
EmotionDetail::mutable_packthumblist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.EmotionDetail.PackThumbList)
  return &packthumblist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
EmotionDetail::packthumblist() const {
  // @@protoc_insertion_point(field_list:micromsg.EmotionDetail.PackThumbList)
  return packthumblist_;
}

// optional string CoverUrl = 11;
bool EmotionDetail::has_coverurl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EmotionDetail::set_has_coverurl() {
  _has_bits_[0] |= 0x00000040u;
}
void EmotionDetail::clear_has_coverurl() {
  _has_bits_[0] &= ~0x00000040u;
}
void EmotionDetail::clear_coverurl() {
  coverurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_coverurl();
}
const ::std::string& EmotionDetail::coverurl() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.CoverUrl)
  return coverurl_.GetNoArena();
}
void EmotionDetail::set_coverurl(const ::std::string& value) {
  set_has_coverurl();
  coverurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionDetail.CoverUrl)
}
#if LANG_CXX11
void EmotionDetail::set_coverurl(::std::string&& value) {
  set_has_coverurl();
  coverurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionDetail.CoverUrl)
}
#endif
void EmotionDetail::set_coverurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_coverurl();
  coverurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionDetail.CoverUrl)
}
void EmotionDetail::set_coverurl(const char* value, size_t size) {
  set_has_coverurl();
  coverurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionDetail.CoverUrl)
}
::std::string* EmotionDetail::mutable_coverurl() {
  set_has_coverurl();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionDetail.CoverUrl)
  return coverurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionDetail::release_coverurl() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionDetail.CoverUrl)
  clear_has_coverurl();
  return coverurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionDetail::set_allocated_coverurl(::std::string* coverurl) {
  if (coverurl != NULL) {
    set_has_coverurl();
  } else {
    clear_has_coverurl();
  }
  coverurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coverurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionDetail.CoverUrl)
}

// required uint32 PackExpire = 12;
bool EmotionDetail::has_packexpire() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void EmotionDetail::set_has_packexpire() {
  _has_bits_[0] |= 0x00040000u;
}
void EmotionDetail::clear_has_packexpire() {
  _has_bits_[0] &= ~0x00040000u;
}
void EmotionDetail::clear_packexpire() {
  packexpire_ = 0u;
  clear_has_packexpire();
}
::google::protobuf::uint32 EmotionDetail::packexpire() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.PackExpire)
  return packexpire_;
}
void EmotionDetail::set_packexpire(::google::protobuf::uint32 value) {
  set_has_packexpire();
  packexpire_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmotionDetail.PackExpire)
}

// optional string PackCopyright = 13;
bool EmotionDetail::has_packcopyright() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void EmotionDetail::set_has_packcopyright() {
  _has_bits_[0] |= 0x00000080u;
}
void EmotionDetail::clear_has_packcopyright() {
  _has_bits_[0] &= ~0x00000080u;
}
void EmotionDetail::clear_packcopyright() {
  packcopyright_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packcopyright();
}
const ::std::string& EmotionDetail::packcopyright() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.PackCopyright)
  return packcopyright_.GetNoArena();
}
void EmotionDetail::set_packcopyright(const ::std::string& value) {
  set_has_packcopyright();
  packcopyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionDetail.PackCopyright)
}
#if LANG_CXX11
void EmotionDetail::set_packcopyright(::std::string&& value) {
  set_has_packcopyright();
  packcopyright_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionDetail.PackCopyright)
}
#endif
void EmotionDetail::set_packcopyright(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_packcopyright();
  packcopyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionDetail.PackCopyright)
}
void EmotionDetail::set_packcopyright(const char* value, size_t size) {
  set_has_packcopyright();
  packcopyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionDetail.PackCopyright)
}
::std::string* EmotionDetail::mutable_packcopyright() {
  set_has_packcopyright();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionDetail.PackCopyright)
  return packcopyright_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionDetail::release_packcopyright() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionDetail.PackCopyright)
  clear_has_packcopyright();
  return packcopyright_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionDetail::set_allocated_packcopyright(::std::string* packcopyright) {
  if (packcopyright != NULL) {
    set_has_packcopyright();
  } else {
    clear_has_packcopyright();
  }
  packcopyright_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packcopyright);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionDetail.PackCopyright)
}

// optional string PriceNum = 14;
bool EmotionDetail::has_pricenum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void EmotionDetail::set_has_pricenum() {
  _has_bits_[0] |= 0x00000100u;
}
void EmotionDetail::clear_has_pricenum() {
  _has_bits_[0] &= ~0x00000100u;
}
void EmotionDetail::clear_pricenum() {
  pricenum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pricenum();
}
const ::std::string& EmotionDetail::pricenum() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.PriceNum)
  return pricenum_.GetNoArena();
}
void EmotionDetail::set_pricenum(const ::std::string& value) {
  set_has_pricenum();
  pricenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionDetail.PriceNum)
}
#if LANG_CXX11
void EmotionDetail::set_pricenum(::std::string&& value) {
  set_has_pricenum();
  pricenum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionDetail.PriceNum)
}
#endif
void EmotionDetail::set_pricenum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pricenum();
  pricenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionDetail.PriceNum)
}
void EmotionDetail::set_pricenum(const char* value, size_t size) {
  set_has_pricenum();
  pricenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionDetail.PriceNum)
}
::std::string* EmotionDetail::mutable_pricenum() {
  set_has_pricenum();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionDetail.PriceNum)
  return pricenum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionDetail::release_pricenum() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionDetail.PriceNum)
  clear_has_pricenum();
  return pricenum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionDetail::set_allocated_pricenum(::std::string* pricenum) {
  if (pricenum != NULL) {
    set_has_pricenum();
  } else {
    clear_has_pricenum();
  }
  pricenum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pricenum);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionDetail.PriceNum)
}

// optional string PriceType = 15;
bool EmotionDetail::has_pricetype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void EmotionDetail::set_has_pricetype() {
  _has_bits_[0] |= 0x00000200u;
}
void EmotionDetail::clear_has_pricetype() {
  _has_bits_[0] &= ~0x00000200u;
}
void EmotionDetail::clear_pricetype() {
  pricetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pricetype();
}
const ::std::string& EmotionDetail::pricetype() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.PriceType)
  return pricetype_.GetNoArena();
}
void EmotionDetail::set_pricetype(const ::std::string& value) {
  set_has_pricetype();
  pricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionDetail.PriceType)
}
#if LANG_CXX11
void EmotionDetail::set_pricetype(::std::string&& value) {
  set_has_pricetype();
  pricetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionDetail.PriceType)
}
#endif
void EmotionDetail::set_pricetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pricetype();
  pricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionDetail.PriceType)
}
void EmotionDetail::set_pricetype(const char* value, size_t size) {
  set_has_pricetype();
  pricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionDetail.PriceType)
}
::std::string* EmotionDetail::mutable_pricetype() {
  set_has_pricetype();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionDetail.PriceType)
  return pricetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionDetail::release_pricetype() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionDetail.PriceType)
  clear_has_pricetype();
  return pricetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionDetail::set_allocated_pricetype(::std::string* pricetype) {
  if (pricetype != NULL) {
    set_has_pricetype();
  } else {
    clear_has_pricetype();
  }
  pricetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pricetype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionDetail.PriceType)
}

// optional string PanelUrl = 16;
bool EmotionDetail::has_panelurl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void EmotionDetail::set_has_panelurl() {
  _has_bits_[0] |= 0x00000400u;
}
void EmotionDetail::clear_has_panelurl() {
  _has_bits_[0] &= ~0x00000400u;
}
void EmotionDetail::clear_panelurl() {
  panelurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_panelurl();
}
const ::std::string& EmotionDetail::panelurl() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.PanelUrl)
  return panelurl_.GetNoArena();
}
void EmotionDetail::set_panelurl(const ::std::string& value) {
  set_has_panelurl();
  panelurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionDetail.PanelUrl)
}
#if LANG_CXX11
void EmotionDetail::set_panelurl(::std::string&& value) {
  set_has_panelurl();
  panelurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionDetail.PanelUrl)
}
#endif
void EmotionDetail::set_panelurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_panelurl();
  panelurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionDetail.PanelUrl)
}
void EmotionDetail::set_panelurl(const char* value, size_t size) {
  set_has_panelurl();
  panelurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionDetail.PanelUrl)
}
::std::string* EmotionDetail::mutable_panelurl() {
  set_has_panelurl();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionDetail.PanelUrl)
  return panelurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionDetail::release_panelurl() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionDetail.PanelUrl)
  clear_has_panelurl();
  return panelurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionDetail::set_allocated_panelurl(::std::string* panelurl) {
  if (panelurl != NULL) {
    set_has_panelurl();
  } else {
    clear_has_panelurl();
  }
  panelurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), panelurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionDetail.PanelUrl)
}

// optional string ConsumeProductID = 17;
bool EmotionDetail::has_consumeproductid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void EmotionDetail::set_has_consumeproductid() {
  _has_bits_[0] |= 0x00000800u;
}
void EmotionDetail::clear_has_consumeproductid() {
  _has_bits_[0] &= ~0x00000800u;
}
void EmotionDetail::clear_consumeproductid() {
  consumeproductid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_consumeproductid();
}
const ::std::string& EmotionDetail::consumeproductid() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.ConsumeProductID)
  return consumeproductid_.GetNoArena();
}
void EmotionDetail::set_consumeproductid(const ::std::string& value) {
  set_has_consumeproductid();
  consumeproductid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionDetail.ConsumeProductID)
}
#if LANG_CXX11
void EmotionDetail::set_consumeproductid(::std::string&& value) {
  set_has_consumeproductid();
  consumeproductid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionDetail.ConsumeProductID)
}
#endif
void EmotionDetail::set_consumeproductid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_consumeproductid();
  consumeproductid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionDetail.ConsumeProductID)
}
void EmotionDetail::set_consumeproductid(const char* value, size_t size) {
  set_has_consumeproductid();
  consumeproductid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionDetail.ConsumeProductID)
}
::std::string* EmotionDetail::mutable_consumeproductid() {
  set_has_consumeproductid();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionDetail.ConsumeProductID)
  return consumeproductid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionDetail::release_consumeproductid() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionDetail.ConsumeProductID)
  clear_has_consumeproductid();
  return consumeproductid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionDetail::set_allocated_consumeproductid(::std::string* consumeproductid) {
  if (consumeproductid != NULL) {
    set_has_consumeproductid();
  } else {
    clear_has_consumeproductid();
  }
  consumeproductid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consumeproductid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionDetail.ConsumeProductID)
}

// optional uint32 ThumbExtCount = 18;
bool EmotionDetail::has_thumbextcount() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void EmotionDetail::set_has_thumbextcount() {
  _has_bits_[0] |= 0x00080000u;
}
void EmotionDetail::clear_has_thumbextcount() {
  _has_bits_[0] &= ~0x00080000u;
}
void EmotionDetail::clear_thumbextcount() {
  thumbextcount_ = 0u;
  clear_has_thumbextcount();
}
::google::protobuf::uint32 EmotionDetail::thumbextcount() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.ThumbExtCount)
  return thumbextcount_;
}
void EmotionDetail::set_thumbextcount(::google::protobuf::uint32 value) {
  set_has_thumbextcount();
  thumbextcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmotionDetail.ThumbExtCount)
}

// repeated .micromsg.PackThumbExt ThumbExtList = 19;
int EmotionDetail::thumbextlist_size() const {
  return thumbextlist_.size();
}
void EmotionDetail::clear_thumbextlist() {
  thumbextlist_.Clear();
}
const ::micromsg::PackThumbExt& EmotionDetail::thumbextlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.ThumbExtList)
  return thumbextlist_.Get(index);
}
::micromsg::PackThumbExt* EmotionDetail::mutable_thumbextlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionDetail.ThumbExtList)
  return thumbextlist_.Mutable(index);
}
::micromsg::PackThumbExt* EmotionDetail::add_thumbextlist() {
  // @@protoc_insertion_point(field_add:micromsg.EmotionDetail.ThumbExtList)
  return thumbextlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::PackThumbExt >*
EmotionDetail::mutable_thumbextlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.EmotionDetail.ThumbExtList)
  return &thumbextlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::PackThumbExt >&
EmotionDetail::thumbextlist() const {
  // @@protoc_insertion_point(field_list:micromsg.EmotionDetail.ThumbExtList)
  return thumbextlist_;
}

// optional int32 Version = 20;
bool EmotionDetail::has_version() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void EmotionDetail::set_has_version() {
  _has_bits_[0] |= 0x00100000u;
}
void EmotionDetail::clear_has_version() {
  _has_bits_[0] &= ~0x00100000u;
}
void EmotionDetail::clear_version() {
  version_ = 0;
  clear_has_version();
}
::google::protobuf::int32 EmotionDetail::version() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.Version)
  return version_;
}
void EmotionDetail::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmotionDetail.Version)
}

// optional string TimeLimitStr = 21;
bool EmotionDetail::has_timelimitstr() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void EmotionDetail::set_has_timelimitstr() {
  _has_bits_[0] |= 0x00001000u;
}
void EmotionDetail::clear_has_timelimitstr() {
  _has_bits_[0] &= ~0x00001000u;
}
void EmotionDetail::clear_timelimitstr() {
  timelimitstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timelimitstr();
}
const ::std::string& EmotionDetail::timelimitstr() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.TimeLimitStr)
  return timelimitstr_.GetNoArena();
}
void EmotionDetail::set_timelimitstr(const ::std::string& value) {
  set_has_timelimitstr();
  timelimitstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionDetail.TimeLimitStr)
}
#if LANG_CXX11
void EmotionDetail::set_timelimitstr(::std::string&& value) {
  set_has_timelimitstr();
  timelimitstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionDetail.TimeLimitStr)
}
#endif
void EmotionDetail::set_timelimitstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timelimitstr();
  timelimitstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionDetail.TimeLimitStr)
}
void EmotionDetail::set_timelimitstr(const char* value, size_t size) {
  set_has_timelimitstr();
  timelimitstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionDetail.TimeLimitStr)
}
::std::string* EmotionDetail::mutable_timelimitstr() {
  set_has_timelimitstr();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionDetail.TimeLimitStr)
  return timelimitstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionDetail::release_timelimitstr() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionDetail.TimeLimitStr)
  clear_has_timelimitstr();
  return timelimitstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionDetail::set_allocated_timelimitstr(::std::string* timelimitstr) {
  if (timelimitstr != NULL) {
    set_has_timelimitstr();
  } else {
    clear_has_timelimitstr();
  }
  timelimitstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timelimitstr);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionDetail.TimeLimitStr)
}

// optional string ShareDesc = 22;
bool EmotionDetail::has_sharedesc() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void EmotionDetail::set_has_sharedesc() {
  _has_bits_[0] |= 0x00002000u;
}
void EmotionDetail::clear_has_sharedesc() {
  _has_bits_[0] &= ~0x00002000u;
}
void EmotionDetail::clear_sharedesc() {
  sharedesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sharedesc();
}
const ::std::string& EmotionDetail::sharedesc() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.ShareDesc)
  return sharedesc_.GetNoArena();
}
void EmotionDetail::set_sharedesc(const ::std::string& value) {
  set_has_sharedesc();
  sharedesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionDetail.ShareDesc)
}
#if LANG_CXX11
void EmotionDetail::set_sharedesc(::std::string&& value) {
  set_has_sharedesc();
  sharedesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionDetail.ShareDesc)
}
#endif
void EmotionDetail::set_sharedesc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sharedesc();
  sharedesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionDetail.ShareDesc)
}
void EmotionDetail::set_sharedesc(const char* value, size_t size) {
  set_has_sharedesc();
  sharedesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionDetail.ShareDesc)
}
::std::string* EmotionDetail::mutable_sharedesc() {
  set_has_sharedesc();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionDetail.ShareDesc)
  return sharedesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionDetail::release_sharedesc() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionDetail.ShareDesc)
  clear_has_sharedesc();
  return sharedesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionDetail::set_allocated_sharedesc(::std::string* sharedesc) {
  if (sharedesc != NULL) {
    set_has_sharedesc();
  } else {
    clear_has_sharedesc();
  }
  sharedesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sharedesc);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionDetail.ShareDesc)
}

// optional string OldRedirectUrl = 23;
bool EmotionDetail::has_oldredirecturl() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void EmotionDetail::set_has_oldredirecturl() {
  _has_bits_[0] |= 0x00004000u;
}
void EmotionDetail::clear_has_oldredirecturl() {
  _has_bits_[0] &= ~0x00004000u;
}
void EmotionDetail::clear_oldredirecturl() {
  oldredirecturl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_oldredirecturl();
}
const ::std::string& EmotionDetail::oldredirecturl() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDetail.OldRedirectUrl)
  return oldredirecturl_.GetNoArena();
}
void EmotionDetail::set_oldredirecturl(const ::std::string& value) {
  set_has_oldredirecturl();
  oldredirecturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionDetail.OldRedirectUrl)
}
#if LANG_CXX11
void EmotionDetail::set_oldredirecturl(::std::string&& value) {
  set_has_oldredirecturl();
  oldredirecturl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionDetail.OldRedirectUrl)
}
#endif
void EmotionDetail::set_oldredirecturl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_oldredirecturl();
  oldredirecturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionDetail.OldRedirectUrl)
}
void EmotionDetail::set_oldredirecturl(const char* value, size_t size) {
  set_has_oldredirecturl();
  oldredirecturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionDetail.OldRedirectUrl)
}
::std::string* EmotionDetail::mutable_oldredirecturl() {
  set_has_oldredirecturl();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionDetail.OldRedirectUrl)
  return oldredirecturl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionDetail::release_oldredirecturl() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionDetail.OldRedirectUrl)
  clear_has_oldredirecturl();
  return oldredirecturl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionDetail::set_allocated_oldredirecturl(::std::string* oldredirecturl) {
  if (oldredirecturl != NULL) {
    set_has_oldredirecturl();
  } else {
    clear_has_oldredirecturl();
  }
  oldredirecturl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oldredirecturl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionDetail.OldRedirectUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmotionBannerImg::kImgUrlFieldNumber;
const int EmotionBannerImg::kWidthFieldNumber;
const int EmotionBannerImg::kHeightFieldNumber;
const int EmotionBannerImg::kStripUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmotionBannerImg::EmotionBannerImg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EmotionBannerImg)
}
EmotionBannerImg::EmotionBannerImg(const EmotionBannerImg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imgurl()) {
    imgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgurl_);
  }
  stripurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stripurl()) {
    stripurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stripurl_);
  }
  ::memcpy(&width_, &from.width_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:micromsg.EmotionBannerImg)
}

void EmotionBannerImg::SharedCtor() {
  _cached_size_ = 0;
  imgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stripurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_) + sizeof(height_));
}

EmotionBannerImg::~EmotionBannerImg() {
  // @@protoc_insertion_point(destructor:micromsg.EmotionBannerImg)
  SharedDtor();
}

void EmotionBannerImg::SharedDtor() {
  imgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stripurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EmotionBannerImg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmotionBannerImg::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmotionBannerImg& EmotionBannerImg::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmotionBannerImg* EmotionBannerImg::New(::google::protobuf::Arena* arena) const {
  EmotionBannerImg* n = new EmotionBannerImg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmotionBannerImg::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EmotionBannerImg)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_imgurl()) {
      GOOGLE_DCHECK(!imgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_stripurl()) {
      GOOGLE_DCHECK(!stripurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*stripurl_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&width_, 0, reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmotionBannerImg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EmotionBannerImg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ImgUrl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imgurl().data(), this->imgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionBannerImg.ImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string StripUrl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stripurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stripurl().data(), this->stripurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionBannerImg.StripUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EmotionBannerImg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EmotionBannerImg)
  return false;
#undef DO_
}

void EmotionBannerImg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EmotionBannerImg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ImgUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgurl().data(), this->imgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionBannerImg.ImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->imgurl(), output);
  }

  // required uint32 Width = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // required uint32 Height = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // optional string StripUrl = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stripurl().data(), this->stripurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionBannerImg.StripUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stripurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EmotionBannerImg)
}

::google::protobuf::uint8* EmotionBannerImg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EmotionBannerImg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ImgUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgurl().data(), this->imgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionBannerImg.ImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->imgurl(), target);
  }

  // required uint32 Width = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // required uint32 Height = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // optional string StripUrl = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stripurl().data(), this->stripurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionBannerImg.StripUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stripurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EmotionBannerImg)
  return target;
}

size_t EmotionBannerImg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.EmotionBannerImg)
  size_t total_size = 0;

  if (has_width()) {
    // required uint32 Width = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  if (has_height()) {
    // required uint32 Height = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  return total_size;
}
size_t EmotionBannerImg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EmotionBannerImg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint32 Width = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

    // required uint32 Height = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ImgUrl = 1;
    if (has_imgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imgurl());
    }

    // optional string StripUrl = 4;
    if (has_stripurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stripurl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmotionBannerImg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EmotionBannerImg)
  GOOGLE_DCHECK_NE(&from, this);
  const EmotionBannerImg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmotionBannerImg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EmotionBannerImg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EmotionBannerImg)
    MergeFrom(*source);
  }
}

void EmotionBannerImg::MergeFrom(const EmotionBannerImg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EmotionBannerImg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_imgurl();
      imgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_stripurl();
      stripurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stripurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EmotionBannerImg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EmotionBannerImg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmotionBannerImg::CopyFrom(const EmotionBannerImg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EmotionBannerImg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmotionBannerImg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  return true;
}

void EmotionBannerImg::Swap(EmotionBannerImg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmotionBannerImg::InternalSwap(EmotionBannerImg* other) {
  imgurl_.Swap(&other->imgurl_);
  stripurl_.Swap(&other->stripurl_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmotionBannerImg::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmotionBannerImg

// optional string ImgUrl = 1;
bool EmotionBannerImg::has_imgurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmotionBannerImg::set_has_imgurl() {
  _has_bits_[0] |= 0x00000001u;
}
void EmotionBannerImg::clear_has_imgurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmotionBannerImg::clear_imgurl() {
  imgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgurl();
}
const ::std::string& EmotionBannerImg::imgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionBannerImg.ImgUrl)
  return imgurl_.GetNoArena();
}
void EmotionBannerImg::set_imgurl(const ::std::string& value) {
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionBannerImg.ImgUrl)
}
#if LANG_CXX11
void EmotionBannerImg::set_imgurl(::std::string&& value) {
  set_has_imgurl();
  imgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionBannerImg.ImgUrl)
}
#endif
void EmotionBannerImg::set_imgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionBannerImg.ImgUrl)
}
void EmotionBannerImg::set_imgurl(const char* value, size_t size) {
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionBannerImg.ImgUrl)
}
::std::string* EmotionBannerImg::mutable_imgurl() {
  set_has_imgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionBannerImg.ImgUrl)
  return imgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionBannerImg::release_imgurl() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionBannerImg.ImgUrl)
  clear_has_imgurl();
  return imgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionBannerImg::set_allocated_imgurl(::std::string* imgurl) {
  if (imgurl != NULL) {
    set_has_imgurl();
  } else {
    clear_has_imgurl();
  }
  imgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionBannerImg.ImgUrl)
}

// required uint32 Width = 2;
bool EmotionBannerImg::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EmotionBannerImg::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
void EmotionBannerImg::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void EmotionBannerImg::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 EmotionBannerImg::width() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionBannerImg.Width)
  return width_;
}
void EmotionBannerImg::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmotionBannerImg.Width)
}

// required uint32 Height = 3;
bool EmotionBannerImg::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EmotionBannerImg::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
void EmotionBannerImg::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void EmotionBannerImg::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 EmotionBannerImg::height() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionBannerImg.Height)
  return height_;
}
void EmotionBannerImg::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmotionBannerImg.Height)
}

// optional string StripUrl = 4;
bool EmotionBannerImg::has_stripurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmotionBannerImg::set_has_stripurl() {
  _has_bits_[0] |= 0x00000002u;
}
void EmotionBannerImg::clear_has_stripurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmotionBannerImg::clear_stripurl() {
  stripurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stripurl();
}
const ::std::string& EmotionBannerImg::stripurl() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionBannerImg.StripUrl)
  return stripurl_.GetNoArena();
}
void EmotionBannerImg::set_stripurl(const ::std::string& value) {
  set_has_stripurl();
  stripurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionBannerImg.StripUrl)
}
#if LANG_CXX11
void EmotionBannerImg::set_stripurl(::std::string&& value) {
  set_has_stripurl();
  stripurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionBannerImg.StripUrl)
}
#endif
void EmotionBannerImg::set_stripurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stripurl();
  stripurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionBannerImg.StripUrl)
}
void EmotionBannerImg::set_stripurl(const char* value, size_t size) {
  set_has_stripurl();
  stripurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionBannerImg.StripUrl)
}
::std::string* EmotionBannerImg::mutable_stripurl() {
  set_has_stripurl();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionBannerImg.StripUrl)
  return stripurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionBannerImg::release_stripurl() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionBannerImg.StripUrl)
  clear_has_stripurl();
  return stripurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionBannerImg::set_allocated_stripurl(::std::string* stripurl) {
  if (stripurl != NULL) {
    set_has_stripurl();
  } else {
    clear_has_stripurl();
  }
  stripurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stripurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionBannerImg.StripUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmotionBanner::kBannerSummaryFieldNumber;
const int EmotionBanner::kBannerImgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmotionBanner::EmotionBanner()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EmotionBanner)
}
EmotionBanner::EmotionBanner(const EmotionBanner& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bannersummary()) {
    bannersummary_ = new ::micromsg::EmotionSummary(*from.bannersummary_);
  } else {
    bannersummary_ = NULL;
  }
  if (from.has_bannerimg()) {
    bannerimg_ = new ::micromsg::EmotionBannerImg(*from.bannerimg_);
  } else {
    bannerimg_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.EmotionBanner)
}

void EmotionBanner::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bannersummary_, 0, reinterpret_cast<char*>(&bannerimg_) -
    reinterpret_cast<char*>(&bannersummary_) + sizeof(bannerimg_));
}

EmotionBanner::~EmotionBanner() {
  // @@protoc_insertion_point(destructor:micromsg.EmotionBanner)
  SharedDtor();
}

void EmotionBanner::SharedDtor() {
  if (this != internal_default_instance()) {
    delete bannersummary_;
  }
  if (this != internal_default_instance()) {
    delete bannerimg_;
  }
}

void EmotionBanner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmotionBanner::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmotionBanner& EmotionBanner::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmotionBanner* EmotionBanner::New(::google::protobuf::Arena* arena) const {
  EmotionBanner* n = new EmotionBanner;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmotionBanner::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EmotionBanner)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_bannersummary()) {
      GOOGLE_DCHECK(bannersummary_ != NULL);
      bannersummary_->::micromsg::EmotionSummary::Clear();
    }
    if (has_bannerimg()) {
      GOOGLE_DCHECK(bannerimg_ != NULL);
      bannerimg_->::micromsg::EmotionBannerImg::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmotionBanner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EmotionBanner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.EmotionSummary BannerSummary = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bannersummary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.EmotionBannerImg BannerImg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bannerimg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EmotionBanner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EmotionBanner)
  return false;
#undef DO_
}

void EmotionBanner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EmotionBanner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.EmotionSummary BannerSummary = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->bannersummary_, output);
  }

  // required .micromsg.EmotionBannerImg BannerImg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->bannerimg_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EmotionBanner)
}

::google::protobuf::uint8* EmotionBanner::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EmotionBanner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.EmotionSummary BannerSummary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->bannersummary_, deterministic, target);
  }

  // required .micromsg.EmotionBannerImg BannerImg = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->bannerimg_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EmotionBanner)
  return target;
}

size_t EmotionBanner::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.EmotionBanner)
  size_t total_size = 0;

  if (has_bannersummary()) {
    // required .micromsg.EmotionSummary BannerSummary = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bannersummary_);
  }

  if (has_bannerimg()) {
    // required .micromsg.EmotionBannerImg BannerImg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bannerimg_);
  }

  return total_size;
}
size_t EmotionBanner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EmotionBanner)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.EmotionSummary BannerSummary = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bannersummary_);

    // required .micromsg.EmotionBannerImg BannerImg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bannerimg_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmotionBanner::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EmotionBanner)
  GOOGLE_DCHECK_NE(&from, this);
  const EmotionBanner* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmotionBanner>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EmotionBanner)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EmotionBanner)
    MergeFrom(*source);
  }
}

void EmotionBanner::MergeFrom(const EmotionBanner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EmotionBanner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_bannersummary()->::micromsg::EmotionSummary::MergeFrom(from.bannersummary());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bannerimg()->::micromsg::EmotionBannerImg::MergeFrom(from.bannerimg());
    }
  }
}

void EmotionBanner::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EmotionBanner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmotionBanner::CopyFrom(const EmotionBanner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EmotionBanner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmotionBanner::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_bannersummary()) {
    if (!this->bannersummary_->IsInitialized()) return false;
  }
  if (has_bannerimg()) {
    if (!this->bannerimg_->IsInitialized()) return false;
  }
  return true;
}

void EmotionBanner::Swap(EmotionBanner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmotionBanner::InternalSwap(EmotionBanner* other) {
  std::swap(bannersummary_, other->bannersummary_);
  std::swap(bannerimg_, other->bannerimg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmotionBanner::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmotionBanner

// required .micromsg.EmotionSummary BannerSummary = 1;
bool EmotionBanner::has_bannersummary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmotionBanner::set_has_bannersummary() {
  _has_bits_[0] |= 0x00000001u;
}
void EmotionBanner::clear_has_bannersummary() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmotionBanner::clear_bannersummary() {
  if (bannersummary_ != NULL) bannersummary_->::micromsg::EmotionSummary::Clear();
  clear_has_bannersummary();
}
const ::micromsg::EmotionSummary& EmotionBanner::bannersummary() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionBanner.BannerSummary)
  return bannersummary_ != NULL ? *bannersummary_
                         : *::micromsg::EmotionSummary::internal_default_instance();
}
::micromsg::EmotionSummary* EmotionBanner::mutable_bannersummary() {
  set_has_bannersummary();
  if (bannersummary_ == NULL) {
    bannersummary_ = new ::micromsg::EmotionSummary;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionBanner.BannerSummary)
  return bannersummary_;
}
::micromsg::EmotionSummary* EmotionBanner::release_bannersummary() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionBanner.BannerSummary)
  clear_has_bannersummary();
  ::micromsg::EmotionSummary* temp = bannersummary_;
  bannersummary_ = NULL;
  return temp;
}
void EmotionBanner::set_allocated_bannersummary(::micromsg::EmotionSummary* bannersummary) {
  delete bannersummary_;
  bannersummary_ = bannersummary;
  if (bannersummary) {
    set_has_bannersummary();
  } else {
    clear_has_bannersummary();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionBanner.BannerSummary)
}

// required .micromsg.EmotionBannerImg BannerImg = 2;
bool EmotionBanner::has_bannerimg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmotionBanner::set_has_bannerimg() {
  _has_bits_[0] |= 0x00000002u;
}
void EmotionBanner::clear_has_bannerimg() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmotionBanner::clear_bannerimg() {
  if (bannerimg_ != NULL) bannerimg_->::micromsg::EmotionBannerImg::Clear();
  clear_has_bannerimg();
}
const ::micromsg::EmotionBannerImg& EmotionBanner::bannerimg() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionBanner.BannerImg)
  return bannerimg_ != NULL ? *bannerimg_
                         : *::micromsg::EmotionBannerImg::internal_default_instance();
}
::micromsg::EmotionBannerImg* EmotionBanner::mutable_bannerimg() {
  set_has_bannerimg();
  if (bannerimg_ == NULL) {
    bannerimg_ = new ::micromsg::EmotionBannerImg;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionBanner.BannerImg)
  return bannerimg_;
}
::micromsg::EmotionBannerImg* EmotionBanner::release_bannerimg() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionBanner.BannerImg)
  clear_has_bannerimg();
  ::micromsg::EmotionBannerImg* temp = bannerimg_;
  bannerimg_ = NULL;
  return temp;
}
void EmotionBanner::set_allocated_bannerimg(::micromsg::EmotionBannerImg* bannerimg) {
  delete bannerimg_;
  bannerimg_ = bannerimg;
  if (bannerimg) {
    set_has_bannerimg();
  } else {
    clear_has_bannerimg();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionBanner.BannerImg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmotionCell::kCellTitleFieldNumber;
const int EmotionCell::kReqTypeFieldNumber;
const int EmotionCell::kPositionFieldNumber;
const int EmotionCell::kIconUrlFieldNumber;
const int EmotionCell::kTagUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmotionCell::EmotionCell()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EmotionCell)
}
EmotionCell::EmotionCell(const EmotionCell& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  celltitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_celltitle()) {
    celltitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.celltitle_);
  }
  iconurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_iconurl()) {
    iconurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iconurl_);
  }
  tagurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tagurl()) {
    tagurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tagurl_);
  }
  ::memcpy(&reqtype_, &from.reqtype_,
    reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&reqtype_) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:micromsg.EmotionCell)
}

void EmotionCell::SharedCtor() {
  _cached_size_ = 0;
  celltitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iconurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tagurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reqtype_, 0, reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&reqtype_) + sizeof(position_));
}

EmotionCell::~EmotionCell() {
  // @@protoc_insertion_point(destructor:micromsg.EmotionCell)
  SharedDtor();
}

void EmotionCell::SharedDtor() {
  celltitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iconurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tagurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EmotionCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmotionCell::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmotionCell& EmotionCell::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmotionCell* EmotionCell::New(::google::protobuf::Arena* arena) const {
  EmotionCell* n = new EmotionCell;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmotionCell::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EmotionCell)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_celltitle()) {
      GOOGLE_DCHECK(!celltitle_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*celltitle_.UnsafeRawStringPointer())->clear();
    }
    if (has_iconurl()) {
      GOOGLE_DCHECK(!iconurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*iconurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_tagurl()) {
      GOOGLE_DCHECK(!tagurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tagurl_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&reqtype_, 0, reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&reqtype_) + sizeof(position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmotionCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EmotionCell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string CellTitle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_celltitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->celltitle().data(), this->celltitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionCell.CellTitle");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ReqType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_reqtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string IconUrl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iconurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iconurl().data(), this->iconurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionCell.IconUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TagUrl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tagurl().data(), this->tagurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionCell.TagUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EmotionCell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EmotionCell)
  return false;
#undef DO_
}

void EmotionCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EmotionCell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string CellTitle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->celltitle().data(), this->celltitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionCell.CellTitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->celltitle(), output);
  }

  // required uint32 ReqType = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reqtype(), output);
  }

  // required uint32 Position = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->position(), output);
  }

  // optional string IconUrl = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iconurl().data(), this->iconurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionCell.IconUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->iconurl(), output);
  }

  // optional string TagUrl = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagurl().data(), this->tagurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionCell.TagUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tagurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EmotionCell)
}

::google::protobuf::uint8* EmotionCell::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EmotionCell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string CellTitle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->celltitle().data(), this->celltitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionCell.CellTitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->celltitle(), target);
  }

  // required uint32 ReqType = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reqtype(), target);
  }

  // required uint32 Position = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->position(), target);
  }

  // optional string IconUrl = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iconurl().data(), this->iconurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionCell.IconUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->iconurl(), target);
  }

  // optional string TagUrl = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagurl().data(), this->tagurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionCell.TagUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tagurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EmotionCell)
  return target;
}

size_t EmotionCell::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.EmotionCell)
  size_t total_size = 0;

  if (has_reqtype()) {
    // required uint32 ReqType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reqtype());
  }

  if (has_position()) {
    // required uint32 Position = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  return total_size;
}
size_t EmotionCell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EmotionCell)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000018) ^ 0x00000018) == 0) {  // All required fields are present.
    // required uint32 ReqType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reqtype());

    // required uint32 Position = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string CellTitle = 1;
    if (has_celltitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->celltitle());
    }

    // optional string IconUrl = 4;
    if (has_iconurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iconurl());
    }

    // optional string TagUrl = 5;
    if (has_tagurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tagurl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmotionCell::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EmotionCell)
  GOOGLE_DCHECK_NE(&from, this);
  const EmotionCell* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmotionCell>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EmotionCell)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EmotionCell)
    MergeFrom(*source);
  }
}

void EmotionCell::MergeFrom(const EmotionCell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EmotionCell)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_celltitle();
      celltitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.celltitle_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_iconurl();
      iconurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iconurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_tagurl();
      tagurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tagurl_);
    }
    if (cached_has_bits & 0x00000008u) {
      reqtype_ = from.reqtype_;
    }
    if (cached_has_bits & 0x00000010u) {
      position_ = from.position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EmotionCell::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EmotionCell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmotionCell::CopyFrom(const EmotionCell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EmotionCell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmotionCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;
  return true;
}

void EmotionCell::Swap(EmotionCell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmotionCell::InternalSwap(EmotionCell* other) {
  celltitle_.Swap(&other->celltitle_);
  iconurl_.Swap(&other->iconurl_);
  tagurl_.Swap(&other->tagurl_);
  std::swap(reqtype_, other->reqtype_);
  std::swap(position_, other->position_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmotionCell::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmotionCell

// optional string CellTitle = 1;
bool EmotionCell::has_celltitle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmotionCell::set_has_celltitle() {
  _has_bits_[0] |= 0x00000001u;
}
void EmotionCell::clear_has_celltitle() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmotionCell::clear_celltitle() {
  celltitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_celltitle();
}
const ::std::string& EmotionCell::celltitle() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionCell.CellTitle)
  return celltitle_.GetNoArena();
}
void EmotionCell::set_celltitle(const ::std::string& value) {
  set_has_celltitle();
  celltitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionCell.CellTitle)
}
#if LANG_CXX11
void EmotionCell::set_celltitle(::std::string&& value) {
  set_has_celltitle();
  celltitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionCell.CellTitle)
}
#endif
void EmotionCell::set_celltitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_celltitle();
  celltitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionCell.CellTitle)
}
void EmotionCell::set_celltitle(const char* value, size_t size) {
  set_has_celltitle();
  celltitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionCell.CellTitle)
}
::std::string* EmotionCell::mutable_celltitle() {
  set_has_celltitle();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionCell.CellTitle)
  return celltitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionCell::release_celltitle() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionCell.CellTitle)
  clear_has_celltitle();
  return celltitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionCell::set_allocated_celltitle(::std::string* celltitle) {
  if (celltitle != NULL) {
    set_has_celltitle();
  } else {
    clear_has_celltitle();
  }
  celltitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), celltitle);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionCell.CellTitle)
}

// required uint32 ReqType = 2;
bool EmotionCell::has_reqtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EmotionCell::set_has_reqtype() {
  _has_bits_[0] |= 0x00000008u;
}
void EmotionCell::clear_has_reqtype() {
  _has_bits_[0] &= ~0x00000008u;
}
void EmotionCell::clear_reqtype() {
  reqtype_ = 0u;
  clear_has_reqtype();
}
::google::protobuf::uint32 EmotionCell::reqtype() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionCell.ReqType)
  return reqtype_;
}
void EmotionCell::set_reqtype(::google::protobuf::uint32 value) {
  set_has_reqtype();
  reqtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmotionCell.ReqType)
}

// required uint32 Position = 3;
bool EmotionCell::has_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EmotionCell::set_has_position() {
  _has_bits_[0] |= 0x00000010u;
}
void EmotionCell::clear_has_position() {
  _has_bits_[0] &= ~0x00000010u;
}
void EmotionCell::clear_position() {
  position_ = 0u;
  clear_has_position();
}
::google::protobuf::uint32 EmotionCell::position() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionCell.Position)
  return position_;
}
void EmotionCell::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmotionCell.Position)
}

// optional string IconUrl = 4;
bool EmotionCell::has_iconurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmotionCell::set_has_iconurl() {
  _has_bits_[0] |= 0x00000002u;
}
void EmotionCell::clear_has_iconurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmotionCell::clear_iconurl() {
  iconurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iconurl();
}
const ::std::string& EmotionCell::iconurl() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionCell.IconUrl)
  return iconurl_.GetNoArena();
}
void EmotionCell::set_iconurl(const ::std::string& value) {
  set_has_iconurl();
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionCell.IconUrl)
}
#if LANG_CXX11
void EmotionCell::set_iconurl(::std::string&& value) {
  set_has_iconurl();
  iconurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionCell.IconUrl)
}
#endif
void EmotionCell::set_iconurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_iconurl();
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionCell.IconUrl)
}
void EmotionCell::set_iconurl(const char* value, size_t size) {
  set_has_iconurl();
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionCell.IconUrl)
}
::std::string* EmotionCell::mutable_iconurl() {
  set_has_iconurl();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionCell.IconUrl)
  return iconurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionCell::release_iconurl() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionCell.IconUrl)
  clear_has_iconurl();
  return iconurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionCell::set_allocated_iconurl(::std::string* iconurl) {
  if (iconurl != NULL) {
    set_has_iconurl();
  } else {
    clear_has_iconurl();
  }
  iconurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iconurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionCell.IconUrl)
}

// optional string TagUrl = 5;
bool EmotionCell::has_tagurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EmotionCell::set_has_tagurl() {
  _has_bits_[0] |= 0x00000004u;
}
void EmotionCell::clear_has_tagurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void EmotionCell::clear_tagurl() {
  tagurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tagurl();
}
const ::std::string& EmotionCell::tagurl() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionCell.TagUrl)
  return tagurl_.GetNoArena();
}
void EmotionCell::set_tagurl(const ::std::string& value) {
  set_has_tagurl();
  tagurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionCell.TagUrl)
}
#if LANG_CXX11
void EmotionCell::set_tagurl(::std::string&& value) {
  set_has_tagurl();
  tagurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionCell.TagUrl)
}
#endif
void EmotionCell::set_tagurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tagurl();
  tagurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionCell.TagUrl)
}
void EmotionCell::set_tagurl(const char* value, size_t size) {
  set_has_tagurl();
  tagurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionCell.TagUrl)
}
::std::string* EmotionCell::mutable_tagurl() {
  set_has_tagurl();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionCell.TagUrl)
  return tagurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionCell::release_tagurl() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionCell.TagUrl)
  clear_has_tagurl();
  return tagurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionCell::set_allocated_tagurl(::std::string* tagurl) {
  if (tagurl != NULL) {
    set_has_tagurl();
  } else {
    clear_has_tagurl();
  }
  tagurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tagurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionCell.TagUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetEmotionListRequest::kBaseRequestFieldNumber;
const int GetEmotionListRequest::kReqBufFieldNumber;
const int GetEmotionListRequest::kReqTypeFieldNumber;
const int GetEmotionListRequest::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEmotionListRequest::GetEmotionListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetEmotionListRequest)
}
GetEmotionListRequest::GetEmotionListRequest(const GetEmotionListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_reqbuf()) {
    reqbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.reqbuf_);
  } else {
    reqbuf_ = NULL;
  }
  ::memcpy(&reqtype_, &from.reqtype_,
    reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&reqtype_) + sizeof(scene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetEmotionListRequest)
}

void GetEmotionListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

GetEmotionListRequest::~GetEmotionListRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetEmotionListRequest)
  SharedDtor();
}

void GetEmotionListRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete reqbuf_;
  }
}

void GetEmotionListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEmotionListRequest::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetEmotionListRequest& GetEmotionListRequest::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetEmotionListRequest* GetEmotionListRequest::New(::google::protobuf::Arena* arena) const {
  GetEmotionListRequest* n = new GetEmotionListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetEmotionListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetEmotionListRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_reqbuf()) {
      GOOGLE_DCHECK(reqbuf_ != NULL);
      reqbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&reqtype_, 0, reinterpret_cast<char*>(&scene_) -
      reinterpret_cast<char*>(&reqtype_) + sizeof(scene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetEmotionListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetEmotionListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ReqType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_reqtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetEmotionListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetEmotionListRequest)
  return false;
#undef DO_
}

void GetEmotionListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetEmotionListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->reqbuf_, output);
  }

  // required uint32 ReqType = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reqtype(), output);
  }

  // optional uint32 Scene = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetEmotionListRequest)
}

::google::protobuf::uint8* GetEmotionListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetEmotionListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->reqbuf_, deterministic, target);
  }

  // required uint32 ReqType = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reqtype(), target);
  }

  // optional uint32 Scene = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetEmotionListRequest)
  return target;
}

size_t GetEmotionListRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetEmotionListRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_reqbuf()) {
    // required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reqbuf_);
  }

  if (has_reqtype()) {
    // required uint32 ReqType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reqtype());
  }

  return total_size;
}
size_t GetEmotionListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetEmotionListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reqbuf_);

    // required uint32 ReqType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reqtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 Scene = 4;
  if (has_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEmotionListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetEmotionListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEmotionListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetEmotionListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetEmotionListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetEmotionListRequest)
    MergeFrom(*source);
  }
}

void GetEmotionListRequest::MergeFrom(const GetEmotionListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetEmotionListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reqbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.reqbuf());
    }
    if (cached_has_bits & 0x00000004u) {
      reqtype_ = from.reqtype_;
    }
    if (cached_has_bits & 0x00000008u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetEmotionListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetEmotionListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEmotionListRequest::CopyFrom(const GetEmotionListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetEmotionListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEmotionListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_reqbuf()) {
    if (!this->reqbuf_->IsInitialized()) return false;
  }
  return true;
}

void GetEmotionListRequest::Swap(GetEmotionListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEmotionListRequest::InternalSwap(GetEmotionListRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(reqbuf_, other->reqbuf_);
  std::swap(reqtype_, other->reqtype_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetEmotionListRequest::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetEmotionListRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetEmotionListRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetEmotionListRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void GetEmotionListRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetEmotionListRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetEmotionListRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionListRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetEmotionListRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionListRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetEmotionListRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetEmotionListRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetEmotionListRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetEmotionListRequest.BaseRequest)
}

// required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
bool GetEmotionListRequest::has_reqbuf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetEmotionListRequest::set_has_reqbuf() {
  _has_bits_[0] |= 0x00000002u;
}
void GetEmotionListRequest::clear_has_reqbuf() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetEmotionListRequest::clear_reqbuf() {
  if (reqbuf_ != NULL) reqbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_reqbuf();
}
const ::micromsg::SKBuiltinBuffer_t& GetEmotionListRequest::reqbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionListRequest.ReqBuf)
  return reqbuf_ != NULL ? *reqbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetEmotionListRequest::mutable_reqbuf() {
  set_has_reqbuf();
  if (reqbuf_ == NULL) {
    reqbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionListRequest.ReqBuf)
  return reqbuf_;
}
::micromsg::SKBuiltinBuffer_t* GetEmotionListRequest::release_reqbuf() {
  // @@protoc_insertion_point(field_release:micromsg.GetEmotionListRequest.ReqBuf)
  clear_has_reqbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = reqbuf_;
  reqbuf_ = NULL;
  return temp;
}
void GetEmotionListRequest::set_allocated_reqbuf(::micromsg::SKBuiltinBuffer_t* reqbuf) {
  delete reqbuf_;
  reqbuf_ = reqbuf;
  if (reqbuf) {
    set_has_reqbuf();
  } else {
    clear_has_reqbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetEmotionListRequest.ReqBuf)
}

// required uint32 ReqType = 3;
bool GetEmotionListRequest::has_reqtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetEmotionListRequest::set_has_reqtype() {
  _has_bits_[0] |= 0x00000004u;
}
void GetEmotionListRequest::clear_has_reqtype() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetEmotionListRequest::clear_reqtype() {
  reqtype_ = 0u;
  clear_has_reqtype();
}
::google::protobuf::uint32 GetEmotionListRequest::reqtype() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionListRequest.ReqType)
  return reqtype_;
}
void GetEmotionListRequest::set_reqtype(::google::protobuf::uint32 value) {
  set_has_reqtype();
  reqtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetEmotionListRequest.ReqType)
}

// optional uint32 Scene = 4;
bool GetEmotionListRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetEmotionListRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000008u;
}
void GetEmotionListRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetEmotionListRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 GetEmotionListRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionListRequest.Scene)
  return scene_;
}
void GetEmotionListRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetEmotionListRequest.Scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetEmotionListResponse::kBaseResponseFieldNumber;
const int GetEmotionListResponse::kReqBufFieldNumber;
const int GetEmotionListResponse::kEmotionCountFieldNumber;
const int GetEmotionListResponse::kEmotionListFieldNumber;
const int GetEmotionListResponse::kBannerFieldNumber;
const int GetEmotionListResponse::kNewBannerCountFieldNumber;
const int GetEmotionListResponse::kNewBannerListFieldNumber;
const int GetEmotionListResponse::kCellCountFieldNumber;
const int GetEmotionListResponse::kCellListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEmotionListResponse::GetEmotionListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetEmotionListResponse)
}
GetEmotionListResponse::GetEmotionListResponse(const GetEmotionListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      emotionlist_(from.emotionlist_),
      newbannerlist_(from.newbannerlist_),
      celllist_(from.celllist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_reqbuf()) {
    reqbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.reqbuf_);
  } else {
    reqbuf_ = NULL;
  }
  if (from.has_banner()) {
    banner_ = new ::micromsg::EmotionBanner(*from.banner_);
  } else {
    banner_ = NULL;
  }
  ::memcpy(&emotioncount_, &from.emotioncount_,
    reinterpret_cast<char*>(&cellcount_) -
    reinterpret_cast<char*>(&emotioncount_) + sizeof(cellcount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetEmotionListResponse)
}

void GetEmotionListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&cellcount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(cellcount_));
}

GetEmotionListResponse::~GetEmotionListResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetEmotionListResponse)
  SharedDtor();
}

void GetEmotionListResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete reqbuf_;
  }
  if (this != internal_default_instance()) {
    delete banner_;
  }
}

void GetEmotionListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEmotionListResponse::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetEmotionListResponse& GetEmotionListResponse::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetEmotionListResponse* GetEmotionListResponse::New(::google::protobuf::Arena* arena) const {
  GetEmotionListResponse* n = new GetEmotionListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetEmotionListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetEmotionListResponse)
  emotionlist_.Clear();
  newbannerlist_.Clear();
  celllist_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_reqbuf()) {
      GOOGLE_DCHECK(reqbuf_ != NULL);
      reqbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_banner()) {
      GOOGLE_DCHECK(banner_ != NULL);
      banner_->::micromsg::EmotionBanner::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&emotioncount_, 0, reinterpret_cast<char*>(&cellcount_) -
      reinterpret_cast<char*>(&emotioncount_) + sizeof(cellcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetEmotionListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetEmotionListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 EmotionCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_emotioncount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &emotioncount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.EmotionSummary EmotionList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_emotionlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.EmotionBanner Banner = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NewBannerCount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_newbannercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newbannercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.EmotionBanner NewBannerList = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_newbannerlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CellCount = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_cellcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.EmotionCell CellList = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_celllist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetEmotionListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetEmotionListResponse)
  return false;
#undef DO_
}

void GetEmotionListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetEmotionListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->reqbuf_, output);
  }

  // required uint32 EmotionCount = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->emotioncount(), output);
  }

  // repeated .micromsg.EmotionSummary EmotionList = 4;
  for (unsigned int i = 0, n = this->emotionlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->emotionlist(i), output);
  }

  // optional .micromsg.EmotionBanner Banner = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->banner_, output);
  }

  // optional uint32 NewBannerCount = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->newbannercount(), output);
  }

  // repeated .micromsg.EmotionBanner NewBannerList = 7;
  for (unsigned int i = 0, n = this->newbannerlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->newbannerlist(i), output);
  }

  // optional uint32 CellCount = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cellcount(), output);
  }

  // repeated .micromsg.EmotionCell CellList = 9;
  for (unsigned int i = 0, n = this->celllist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->celllist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetEmotionListResponse)
}

::google::protobuf::uint8* GetEmotionListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetEmotionListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->reqbuf_, deterministic, target);
  }

  // required uint32 EmotionCount = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->emotioncount(), target);
  }

  // repeated .micromsg.EmotionSummary EmotionList = 4;
  for (unsigned int i = 0, n = this->emotionlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->emotionlist(i), deterministic, target);
  }

  // optional .micromsg.EmotionBanner Banner = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->banner_, deterministic, target);
  }

  // optional uint32 NewBannerCount = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->newbannercount(), target);
  }

  // repeated .micromsg.EmotionBanner NewBannerList = 7;
  for (unsigned int i = 0, n = this->newbannerlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->newbannerlist(i), deterministic, target);
  }

  // optional uint32 CellCount = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cellcount(), target);
  }

  // repeated .micromsg.EmotionCell CellList = 9;
  for (unsigned int i = 0, n = this->celllist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->celllist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetEmotionListResponse)
  return target;
}

size_t GetEmotionListResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetEmotionListResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_reqbuf()) {
    // required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reqbuf_);
  }

  if (has_emotioncount()) {
    // required uint32 EmotionCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->emotioncount());
  }

  return total_size;
}
size_t GetEmotionListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetEmotionListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reqbuf_);

    // required uint32 EmotionCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->emotioncount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.EmotionSummary EmotionList = 4;
  {
    unsigned int count = this->emotionlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emotionlist(i));
    }
  }

  // repeated .micromsg.EmotionBanner NewBannerList = 7;
  {
    unsigned int count = this->newbannerlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newbannerlist(i));
    }
  }

  // repeated .micromsg.EmotionCell CellList = 9;
  {
    unsigned int count = this->celllist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->celllist(i));
    }
  }

  // optional .micromsg.EmotionBanner Banner = 5;
  if (has_banner()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->banner_);
  }

  if (_has_bits_[0 / 32] & 48u) {
    // optional uint32 NewBannerCount = 6;
    if (has_newbannercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newbannercount());
    }

    // optional uint32 CellCount = 8;
    if (has_cellcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellcount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEmotionListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetEmotionListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEmotionListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetEmotionListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetEmotionListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetEmotionListResponse)
    MergeFrom(*source);
  }
}

void GetEmotionListResponse::MergeFrom(const GetEmotionListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetEmotionListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emotionlist_.MergeFrom(from.emotionlist_);
  newbannerlist_.MergeFrom(from.newbannerlist_);
  celllist_.MergeFrom(from.celllist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reqbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.reqbuf());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_banner()->::micromsg::EmotionBanner::MergeFrom(from.banner());
    }
    if (cached_has_bits & 0x00000008u) {
      emotioncount_ = from.emotioncount_;
    }
    if (cached_has_bits & 0x00000010u) {
      newbannercount_ = from.newbannercount_;
    }
    if (cached_has_bits & 0x00000020u) {
      cellcount_ = from.cellcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetEmotionListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetEmotionListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEmotionListResponse::CopyFrom(const GetEmotionListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetEmotionListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEmotionListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->emotionlist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->newbannerlist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->celllist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_reqbuf()) {
    if (!this->reqbuf_->IsInitialized()) return false;
  }
  if (has_banner()) {
    if (!this->banner_->IsInitialized()) return false;
  }
  return true;
}

void GetEmotionListResponse::Swap(GetEmotionListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEmotionListResponse::InternalSwap(GetEmotionListResponse* other) {
  emotionlist_.InternalSwap(&other->emotionlist_);
  newbannerlist_.InternalSwap(&other->newbannerlist_);
  celllist_.InternalSwap(&other->celllist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(reqbuf_, other->reqbuf_);
  std::swap(banner_, other->banner_);
  std::swap(emotioncount_, other->emotioncount_);
  std::swap(newbannercount_, other->newbannercount_);
  std::swap(cellcount_, other->cellcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetEmotionListResponse::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetEmotionListResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetEmotionListResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetEmotionListResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetEmotionListResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetEmotionListResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetEmotionListResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionListResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetEmotionListResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionListResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetEmotionListResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetEmotionListResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetEmotionListResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetEmotionListResponse.BaseResponse)
}

// required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
bool GetEmotionListResponse::has_reqbuf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetEmotionListResponse::set_has_reqbuf() {
  _has_bits_[0] |= 0x00000002u;
}
void GetEmotionListResponse::clear_has_reqbuf() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetEmotionListResponse::clear_reqbuf() {
  if (reqbuf_ != NULL) reqbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_reqbuf();
}
const ::micromsg::SKBuiltinBuffer_t& GetEmotionListResponse::reqbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionListResponse.ReqBuf)
  return reqbuf_ != NULL ? *reqbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetEmotionListResponse::mutable_reqbuf() {
  set_has_reqbuf();
  if (reqbuf_ == NULL) {
    reqbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionListResponse.ReqBuf)
  return reqbuf_;
}
::micromsg::SKBuiltinBuffer_t* GetEmotionListResponse::release_reqbuf() {
  // @@protoc_insertion_point(field_release:micromsg.GetEmotionListResponse.ReqBuf)
  clear_has_reqbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = reqbuf_;
  reqbuf_ = NULL;
  return temp;
}
void GetEmotionListResponse::set_allocated_reqbuf(::micromsg::SKBuiltinBuffer_t* reqbuf) {
  delete reqbuf_;
  reqbuf_ = reqbuf;
  if (reqbuf) {
    set_has_reqbuf();
  } else {
    clear_has_reqbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetEmotionListResponse.ReqBuf)
}

// required uint32 EmotionCount = 3;
bool GetEmotionListResponse::has_emotioncount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetEmotionListResponse::set_has_emotioncount() {
  _has_bits_[0] |= 0x00000008u;
}
void GetEmotionListResponse::clear_has_emotioncount() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetEmotionListResponse::clear_emotioncount() {
  emotioncount_ = 0u;
  clear_has_emotioncount();
}
::google::protobuf::uint32 GetEmotionListResponse::emotioncount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionListResponse.EmotionCount)
  return emotioncount_;
}
void GetEmotionListResponse::set_emotioncount(::google::protobuf::uint32 value) {
  set_has_emotioncount();
  emotioncount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetEmotionListResponse.EmotionCount)
}

// repeated .micromsg.EmotionSummary EmotionList = 4;
int GetEmotionListResponse::emotionlist_size() const {
  return emotionlist_.size();
}
void GetEmotionListResponse::clear_emotionlist() {
  emotionlist_.Clear();
}
const ::micromsg::EmotionSummary& GetEmotionListResponse::emotionlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionListResponse.EmotionList)
  return emotionlist_.Get(index);
}
::micromsg::EmotionSummary* GetEmotionListResponse::mutable_emotionlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionListResponse.EmotionList)
  return emotionlist_.Mutable(index);
}
::micromsg::EmotionSummary* GetEmotionListResponse::add_emotionlist() {
  // @@protoc_insertion_point(field_add:micromsg.GetEmotionListResponse.EmotionList)
  return emotionlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::EmotionSummary >*
GetEmotionListResponse::mutable_emotionlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetEmotionListResponse.EmotionList)
  return &emotionlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::EmotionSummary >&
GetEmotionListResponse::emotionlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GetEmotionListResponse.EmotionList)
  return emotionlist_;
}

// optional .micromsg.EmotionBanner Banner = 5;
bool GetEmotionListResponse::has_banner() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetEmotionListResponse::set_has_banner() {
  _has_bits_[0] |= 0x00000004u;
}
void GetEmotionListResponse::clear_has_banner() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetEmotionListResponse::clear_banner() {
  if (banner_ != NULL) banner_->::micromsg::EmotionBanner::Clear();
  clear_has_banner();
}
const ::micromsg::EmotionBanner& GetEmotionListResponse::banner() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionListResponse.Banner)
  return banner_ != NULL ? *banner_
                         : *::micromsg::EmotionBanner::internal_default_instance();
}
::micromsg::EmotionBanner* GetEmotionListResponse::mutable_banner() {
  set_has_banner();
  if (banner_ == NULL) {
    banner_ = new ::micromsg::EmotionBanner;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionListResponse.Banner)
  return banner_;
}
::micromsg::EmotionBanner* GetEmotionListResponse::release_banner() {
  // @@protoc_insertion_point(field_release:micromsg.GetEmotionListResponse.Banner)
  clear_has_banner();
  ::micromsg::EmotionBanner* temp = banner_;
  banner_ = NULL;
  return temp;
}
void GetEmotionListResponse::set_allocated_banner(::micromsg::EmotionBanner* banner) {
  delete banner_;
  banner_ = banner;
  if (banner) {
    set_has_banner();
  } else {
    clear_has_banner();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetEmotionListResponse.Banner)
}

// optional uint32 NewBannerCount = 6;
bool GetEmotionListResponse::has_newbannercount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetEmotionListResponse::set_has_newbannercount() {
  _has_bits_[0] |= 0x00000010u;
}
void GetEmotionListResponse::clear_has_newbannercount() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetEmotionListResponse::clear_newbannercount() {
  newbannercount_ = 0u;
  clear_has_newbannercount();
}
::google::protobuf::uint32 GetEmotionListResponse::newbannercount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionListResponse.NewBannerCount)
  return newbannercount_;
}
void GetEmotionListResponse::set_newbannercount(::google::protobuf::uint32 value) {
  set_has_newbannercount();
  newbannercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetEmotionListResponse.NewBannerCount)
}

// repeated .micromsg.EmotionBanner NewBannerList = 7;
int GetEmotionListResponse::newbannerlist_size() const {
  return newbannerlist_.size();
}
void GetEmotionListResponse::clear_newbannerlist() {
  newbannerlist_.Clear();
}
const ::micromsg::EmotionBanner& GetEmotionListResponse::newbannerlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionListResponse.NewBannerList)
  return newbannerlist_.Get(index);
}
::micromsg::EmotionBanner* GetEmotionListResponse::mutable_newbannerlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionListResponse.NewBannerList)
  return newbannerlist_.Mutable(index);
}
::micromsg::EmotionBanner* GetEmotionListResponse::add_newbannerlist() {
  // @@protoc_insertion_point(field_add:micromsg.GetEmotionListResponse.NewBannerList)
  return newbannerlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::EmotionBanner >*
GetEmotionListResponse::mutable_newbannerlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetEmotionListResponse.NewBannerList)
  return &newbannerlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::EmotionBanner >&
GetEmotionListResponse::newbannerlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GetEmotionListResponse.NewBannerList)
  return newbannerlist_;
}

// optional uint32 CellCount = 8;
bool GetEmotionListResponse::has_cellcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetEmotionListResponse::set_has_cellcount() {
  _has_bits_[0] |= 0x00000020u;
}
void GetEmotionListResponse::clear_has_cellcount() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetEmotionListResponse::clear_cellcount() {
  cellcount_ = 0u;
  clear_has_cellcount();
}
::google::protobuf::uint32 GetEmotionListResponse::cellcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionListResponse.CellCount)
  return cellcount_;
}
void GetEmotionListResponse::set_cellcount(::google::protobuf::uint32 value) {
  set_has_cellcount();
  cellcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetEmotionListResponse.CellCount)
}

// repeated .micromsg.EmotionCell CellList = 9;
int GetEmotionListResponse::celllist_size() const {
  return celllist_.size();
}
void GetEmotionListResponse::clear_celllist() {
  celllist_.Clear();
}
const ::micromsg::EmotionCell& GetEmotionListResponse::celllist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionListResponse.CellList)
  return celllist_.Get(index);
}
::micromsg::EmotionCell* GetEmotionListResponse::mutable_celllist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionListResponse.CellList)
  return celllist_.Mutable(index);
}
::micromsg::EmotionCell* GetEmotionListResponse::add_celllist() {
  // @@protoc_insertion_point(field_add:micromsg.GetEmotionListResponse.CellList)
  return celllist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::EmotionCell >*
GetEmotionListResponse::mutable_celllist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetEmotionListResponse.CellList)
  return &celllist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::EmotionCell >&
GetEmotionListResponse::celllist() const {
  // @@protoc_insertion_point(field_list:micromsg.GetEmotionListResponse.CellList)
  return celllist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetEmotionDetailRequest::kBaseRequestFieldNumber;
const int GetEmotionDetailRequest::kProductIDFieldNumber;
const int GetEmotionDetailRequest::kSceneFieldNumber;
const int GetEmotionDetailRequest::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEmotionDetailRequest::GetEmotionDetailRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetEmotionDetailRequest)
}
GetEmotionDetailRequest::GetEmotionDetailRequest(const GetEmotionDetailRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&scene_, &from.scene_,
    reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&scene_) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetEmotionDetailRequest)
}

void GetEmotionDetailRequest::SharedCtor() {
  _cached_size_ = 0;
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(version_));
}

GetEmotionDetailRequest::~GetEmotionDetailRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetEmotionDetailRequest)
  SharedDtor();
}

void GetEmotionDetailRequest::SharedDtor() {
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetEmotionDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEmotionDetailRequest::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetEmotionDetailRequest& GetEmotionDetailRequest::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetEmotionDetailRequest* GetEmotionDetailRequest::New(::google::protobuf::Arena* arena) const {
  GetEmotionDetailRequest* n = new GetEmotionDetailRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetEmotionDetailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetEmotionDetailRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_productid()) {
      GOOGLE_DCHECK(!productid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*productid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&scene_, 0, reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&scene_) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetEmotionDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetEmotionDetailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ProductID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetEmotionDetailRequest.ProductID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetEmotionDetailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetEmotionDetailRequest)
  return false;
#undef DO_
}

void GetEmotionDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetEmotionDetailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ProductID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetEmotionDetailRequest.ProductID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->productid(), output);
  }

  // optional uint32 Scene = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene(), output);
  }

  // optional int32 Version = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetEmotionDetailRequest)
}

::google::protobuf::uint8* GetEmotionDetailRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetEmotionDetailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ProductID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetEmotionDetailRequest.ProductID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->productid(), target);
  }

  // optional uint32 Scene = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene(), target);
  }

  // optional int32 Version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetEmotionDetailRequest)
  return target;
}

size_t GetEmotionDetailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetEmotionDetailRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string ProductID = 2;
  if (has_productid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 Scene = 3;
    if (has_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene());
    }

    // optional int32 Version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEmotionDetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetEmotionDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEmotionDetailRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetEmotionDetailRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetEmotionDetailRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetEmotionDetailRequest)
    MergeFrom(*source);
  }
}

void GetEmotionDetailRequest::MergeFrom(const GetEmotionDetailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetEmotionDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      scene_ = from.scene_;
    }
    if (cached_has_bits & 0x00000008u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetEmotionDetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetEmotionDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEmotionDetailRequest::CopyFrom(const GetEmotionDetailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetEmotionDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEmotionDetailRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetEmotionDetailRequest::Swap(GetEmotionDetailRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEmotionDetailRequest::InternalSwap(GetEmotionDetailRequest* other) {
  productid_.Swap(&other->productid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(scene_, other->scene_);
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetEmotionDetailRequest::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetEmotionDetailRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetEmotionDetailRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetEmotionDetailRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GetEmotionDetailRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetEmotionDetailRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetEmotionDetailRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionDetailRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetEmotionDetailRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionDetailRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetEmotionDetailRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetEmotionDetailRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetEmotionDetailRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetEmotionDetailRequest.BaseRequest)
}

// optional string ProductID = 2;
bool GetEmotionDetailRequest::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetEmotionDetailRequest::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
void GetEmotionDetailRequest::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetEmotionDetailRequest::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
const ::std::string& GetEmotionDetailRequest::productid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionDetailRequest.ProductID)
  return productid_.GetNoArena();
}
void GetEmotionDetailRequest::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetEmotionDetailRequest.ProductID)
}
#if LANG_CXX11
void GetEmotionDetailRequest::set_productid(::std::string&& value) {
  set_has_productid();
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetEmotionDetailRequest.ProductID)
}
#endif
void GetEmotionDetailRequest::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetEmotionDetailRequest.ProductID)
}
void GetEmotionDetailRequest::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetEmotionDetailRequest.ProductID)
}
::std::string* GetEmotionDetailRequest::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionDetailRequest.ProductID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetEmotionDetailRequest::release_productid() {
  // @@protoc_insertion_point(field_release:micromsg.GetEmotionDetailRequest.ProductID)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetEmotionDetailRequest::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetEmotionDetailRequest.ProductID)
}

// optional uint32 Scene = 3;
bool GetEmotionDetailRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetEmotionDetailRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000004u;
}
void GetEmotionDetailRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetEmotionDetailRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 GetEmotionDetailRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionDetailRequest.Scene)
  return scene_;
}
void GetEmotionDetailRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetEmotionDetailRequest.Scene)
}

// optional int32 Version = 4;
bool GetEmotionDetailRequest::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetEmotionDetailRequest::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
void GetEmotionDetailRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetEmotionDetailRequest::clear_version() {
  version_ = 0;
  clear_has_version();
}
::google::protobuf::int32 GetEmotionDetailRequest::version() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionDetailRequest.Version)
  return version_;
}
void GetEmotionDetailRequest::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetEmotionDetailRequest.Version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetEmotionDetailResponse::kBaseResponseFieldNumber;
const int GetEmotionDetailResponse::kEmotionDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEmotionDetailResponse::GetEmotionDetailResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetEmotionDetailResponse)
}
GetEmotionDetailResponse::GetEmotionDetailResponse(const GetEmotionDetailResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_emotiondetail()) {
    emotiondetail_ = new ::micromsg::EmotionDetail(*from.emotiondetail_);
  } else {
    emotiondetail_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetEmotionDetailResponse)
}

void GetEmotionDetailResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&emotiondetail_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(emotiondetail_));
}

GetEmotionDetailResponse::~GetEmotionDetailResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetEmotionDetailResponse)
  SharedDtor();
}

void GetEmotionDetailResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete emotiondetail_;
  }
}

void GetEmotionDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEmotionDetailResponse::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetEmotionDetailResponse& GetEmotionDetailResponse::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetEmotionDetailResponse* GetEmotionDetailResponse::New(::google::protobuf::Arena* arena) const {
  GetEmotionDetailResponse* n = new GetEmotionDetailResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetEmotionDetailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetEmotionDetailResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_emotiondetail()) {
      GOOGLE_DCHECK(emotiondetail_ != NULL);
      emotiondetail_->::micromsg::EmotionDetail::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetEmotionDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetEmotionDetailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.EmotionDetail EmotionDetail = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emotiondetail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetEmotionDetailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetEmotionDetailResponse)
  return false;
#undef DO_
}

void GetEmotionDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetEmotionDetailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.EmotionDetail EmotionDetail = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->emotiondetail_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetEmotionDetailResponse)
}

::google::protobuf::uint8* GetEmotionDetailResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetEmotionDetailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.EmotionDetail EmotionDetail = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->emotiondetail_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetEmotionDetailResponse)
  return target;
}

size_t GetEmotionDetailResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetEmotionDetailResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_emotiondetail()) {
    // required .micromsg.EmotionDetail EmotionDetail = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->emotiondetail_);
  }

  return total_size;
}
size_t GetEmotionDetailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetEmotionDetailResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.EmotionDetail EmotionDetail = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->emotiondetail_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEmotionDetailResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetEmotionDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEmotionDetailResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetEmotionDetailResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetEmotionDetailResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetEmotionDetailResponse)
    MergeFrom(*source);
  }
}

void GetEmotionDetailResponse::MergeFrom(const GetEmotionDetailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetEmotionDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_emotiondetail()->::micromsg::EmotionDetail::MergeFrom(from.emotiondetail());
    }
  }
}

void GetEmotionDetailResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetEmotionDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEmotionDetailResponse::CopyFrom(const GetEmotionDetailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetEmotionDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEmotionDetailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_emotiondetail()) {
    if (!this->emotiondetail_->IsInitialized()) return false;
  }
  return true;
}

void GetEmotionDetailResponse::Swap(GetEmotionDetailResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEmotionDetailResponse::InternalSwap(GetEmotionDetailResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(emotiondetail_, other->emotiondetail_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetEmotionDetailResponse::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetEmotionDetailResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetEmotionDetailResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetEmotionDetailResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetEmotionDetailResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetEmotionDetailResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetEmotionDetailResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionDetailResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetEmotionDetailResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionDetailResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetEmotionDetailResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetEmotionDetailResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetEmotionDetailResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetEmotionDetailResponse.BaseResponse)
}

// required .micromsg.EmotionDetail EmotionDetail = 2;
bool GetEmotionDetailResponse::has_emotiondetail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetEmotionDetailResponse::set_has_emotiondetail() {
  _has_bits_[0] |= 0x00000002u;
}
void GetEmotionDetailResponse::clear_has_emotiondetail() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetEmotionDetailResponse::clear_emotiondetail() {
  if (emotiondetail_ != NULL) emotiondetail_->::micromsg::EmotionDetail::Clear();
  clear_has_emotiondetail();
}
const ::micromsg::EmotionDetail& GetEmotionDetailResponse::emotiondetail() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionDetailResponse.EmotionDetail)
  return emotiondetail_ != NULL ? *emotiondetail_
                         : *::micromsg::EmotionDetail::internal_default_instance();
}
::micromsg::EmotionDetail* GetEmotionDetailResponse::mutable_emotiondetail() {
  set_has_emotiondetail();
  if (emotiondetail_ == NULL) {
    emotiondetail_ = new ::micromsg::EmotionDetail;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionDetailResponse.EmotionDetail)
  return emotiondetail_;
}
::micromsg::EmotionDetail* GetEmotionDetailResponse::release_emotiondetail() {
  // @@protoc_insertion_point(field_release:micromsg.GetEmotionDetailResponse.EmotionDetail)
  clear_has_emotiondetail();
  ::micromsg::EmotionDetail* temp = emotiondetail_;
  emotiondetail_ = NULL;
  return temp;
}
void GetEmotionDetailResponse::set_allocated_emotiondetail(::micromsg::EmotionDetail* emotiondetail) {
  delete emotiondetail_;
  emotiondetail_ = emotiondetail;
  if (emotiondetail) {
    set_has_emotiondetail();
  } else {
    clear_has_emotiondetail();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetEmotionDetailResponse.EmotionDetail)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyPurchaseRequest::kBaseRequestFieldNumber;
const int VerifyPurchaseRequest::kReceiptFieldNumber;
const int VerifyPurchaseRequest::kProductIDFieldNumber;
const int VerifyPurchaseRequest::kVerifyTypeFieldNumber;
const int VerifyPurchaseRequest::kPayTypeFieldNumber;
const int VerifyPurchaseRequest::kPriceFieldNumber;
const int VerifyPurchaseRequest::kCurrencyTypeFieldNumber;
const int VerifyPurchaseRequest::kBillNoFieldNumber;
const int VerifyPurchaseRequest::kPayTimeFieldNumber;
const int VerifyPurchaseRequest::kReceiptSigFieldNumber;
const int VerifyPurchaseRequest::kQuantityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyPurchaseRequest::VerifyPurchaseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VerifyPurchaseRequest)
}
VerifyPurchaseRequest::VerifyPurchaseRequest(const VerifyPurchaseRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_price()) {
    price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_);
  }
  currencytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currencytype()) {
    currencytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currencytype_);
  }
  billno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_billno()) {
    billno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.billno_);
  }
  receiptsig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_receiptsig()) {
    receiptsig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiptsig_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_receipt()) {
    receipt_ = new ::micromsg::SKBuiltinBuffer_t(*from.receipt_);
  } else {
    receipt_ = NULL;
  }
  ::memcpy(&verifytype_, &from.verifytype_,
    reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&verifytype_) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VerifyPurchaseRequest)
}

void VerifyPurchaseRequest::SharedCtor() {
  _cached_size_ = 0;
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currencytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  billno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiptsig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(quantity_));
}

VerifyPurchaseRequest::~VerifyPurchaseRequest() {
  // @@protoc_insertion_point(destructor:micromsg.VerifyPurchaseRequest)
  SharedDtor();
}

void VerifyPurchaseRequest::SharedDtor() {
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currencytype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  billno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiptsig_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete receipt_;
  }
}

void VerifyPurchaseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyPurchaseRequest::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VerifyPurchaseRequest& VerifyPurchaseRequest::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

VerifyPurchaseRequest* VerifyPurchaseRequest::New(::google::protobuf::Arena* arena) const {
  VerifyPurchaseRequest* n = new VerifyPurchaseRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyPurchaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VerifyPurchaseRequest)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_productid()) {
      GOOGLE_DCHECK(!productid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*productid_.UnsafeRawStringPointer())->clear();
    }
    if (has_price()) {
      GOOGLE_DCHECK(!price_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*price_.UnsafeRawStringPointer())->clear();
    }
    if (has_currencytype()) {
      GOOGLE_DCHECK(!currencytype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*currencytype_.UnsafeRawStringPointer())->clear();
    }
    if (has_billno()) {
      GOOGLE_DCHECK(!billno_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*billno_.UnsafeRawStringPointer())->clear();
    }
    if (has_receiptsig()) {
      GOOGLE_DCHECK(!receiptsig_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*receiptsig_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_receipt()) {
      GOOGLE_DCHECK(receipt_ != NULL);
      receipt_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  verifytype_ = 0u;
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&paytype_, 0, reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&paytype_) + sizeof(quantity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VerifyPurchaseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VerifyPurchaseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Receipt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receipt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ProductID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VerifyPurchaseRequest.ProductID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 VerifyType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_verifytype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verifytype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 PayType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_paytype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paytype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Price = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->price().data(), this->price().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VerifyPurchaseRequest.Price");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CurrencyType = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currencytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currencytype().data(), this->currencytype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VerifyPurchaseRequest.CurrencyType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BillNo = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->billno().data(), this->billno().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VerifyPurchaseRequest.BillNo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 PayTime = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_paytime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paytime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ReceiptSig = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiptsig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->receiptsig().data(), this->receiptsig().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VerifyPurchaseRequest.ReceiptSig");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Quantity = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VerifyPurchaseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VerifyPurchaseRequest)
  return false;
#undef DO_
}

void VerifyPurchaseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VerifyPurchaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t Receipt = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->receipt_, output);
  }

  // optional string ProductID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPurchaseRequest.ProductID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->productid(), output);
  }

  // required uint32 VerifyType = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->verifytype(), output);
  }

  // required uint32 PayType = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->paytype(), output);
  }

  // optional string Price = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPurchaseRequest.Price");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->price(), output);
  }

  // optional string CurrencyType = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currencytype().data(), this->currencytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPurchaseRequest.CurrencyType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->currencytype(), output);
  }

  // optional string BillNo = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->billno().data(), this->billno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPurchaseRequest.BillNo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->billno(), output);
  }

  // required uint32 PayTime = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->paytime(), output);
  }

  // optional string ReceiptSig = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receiptsig().data(), this->receiptsig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPurchaseRequest.ReceiptSig");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->receiptsig(), output);
  }

  // optional uint32 Quantity = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->quantity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VerifyPurchaseRequest)
}

::google::protobuf::uint8* VerifyPurchaseRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VerifyPurchaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t Receipt = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->receipt_, deterministic, target);
  }

  // optional string ProductID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPurchaseRequest.ProductID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->productid(), target);
  }

  // required uint32 VerifyType = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->verifytype(), target);
  }

  // required uint32 PayType = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->paytype(), target);
  }

  // optional string Price = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPurchaseRequest.Price");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->price(), target);
  }

  // optional string CurrencyType = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currencytype().data(), this->currencytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPurchaseRequest.CurrencyType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->currencytype(), target);
  }

  // optional string BillNo = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->billno().data(), this->billno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPurchaseRequest.BillNo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->billno(), target);
  }

  // required uint32 PayTime = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->paytime(), target);
  }

  // optional string ReceiptSig = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receiptsig().data(), this->receiptsig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPurchaseRequest.ReceiptSig");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->receiptsig(), target);
  }

  // optional uint32 Quantity = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->quantity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VerifyPurchaseRequest)
  return target;
}

size_t VerifyPurchaseRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VerifyPurchaseRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_receipt()) {
    // required .micromsg.SKBuiltinBuffer_t Receipt = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->receipt_);
  }

  if (has_verifytype()) {
    // required uint32 VerifyType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->verifytype());
  }

  if (has_paytype()) {
    // required uint32 PayType = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->paytype());
  }

  if (has_paytime()) {
    // required uint32 PayTime = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->paytime());
  }

  return total_size;
}
size_t VerifyPurchaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VerifyPurchaseRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003e0) ^ 0x000003e0) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t Receipt = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->receipt_);

    // required uint32 VerifyType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->verifytype());

    // required uint32 PayType = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->paytype());

    // required uint32 PayTime = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->paytime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string ProductID = 3;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // optional string Price = 6;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->price());
    }

    // optional string CurrencyType = 7;
    if (has_currencytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currencytype());
    }

    // optional string BillNo = 8;
    if (has_billno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billno());
    }

    // optional string ReceiptSig = 10;
    if (has_receiptsig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiptsig());
    }

  }
  // optional uint32 Quantity = 11;
  if (has_quantity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->quantity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyPurchaseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VerifyPurchaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyPurchaseRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyPurchaseRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VerifyPurchaseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VerifyPurchaseRequest)
    MergeFrom(*source);
  }
}

void VerifyPurchaseRequest::MergeFrom(const VerifyPurchaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VerifyPurchaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_price();
      price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_currencytype();
      currencytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currencytype_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_billno();
      billno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.billno_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_receiptsig();
      receiptsig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiptsig_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_receipt()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.receipt());
    }
    if (cached_has_bits & 0x00000080u) {
      verifytype_ = from.verifytype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      paytype_ = from.paytype_;
    }
    if (cached_has_bits & 0x00000200u) {
      paytime_ = from.paytime_;
    }
    if (cached_has_bits & 0x00000400u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VerifyPurchaseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VerifyPurchaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyPurchaseRequest::CopyFrom(const VerifyPurchaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VerifyPurchaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyPurchaseRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003e0) != 0x000003e0) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_receipt()) {
    if (!this->receipt_->IsInitialized()) return false;
  }
  return true;
}

void VerifyPurchaseRequest::Swap(VerifyPurchaseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyPurchaseRequest::InternalSwap(VerifyPurchaseRequest* other) {
  productid_.Swap(&other->productid_);
  price_.Swap(&other->price_);
  currencytype_.Swap(&other->currencytype_);
  billno_.Swap(&other->billno_);
  receiptsig_.Swap(&other->receiptsig_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(receipt_, other->receipt_);
  std::swap(verifytype_, other->verifytype_);
  std::swap(paytype_, other->paytype_);
  std::swap(paytime_, other->paytime_);
  std::swap(quantity_, other->quantity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerifyPurchaseRequest::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyPurchaseRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool VerifyPurchaseRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VerifyPurchaseRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000020u;
}
void VerifyPurchaseRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000020u;
}
void VerifyPurchaseRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VerifyPurchaseRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPurchaseRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VerifyPurchaseRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPurchaseRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VerifyPurchaseRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPurchaseRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VerifyPurchaseRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPurchaseRequest.BaseRequest)
}

// required .micromsg.SKBuiltinBuffer_t Receipt = 2;
bool VerifyPurchaseRequest::has_receipt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VerifyPurchaseRequest::set_has_receipt() {
  _has_bits_[0] |= 0x00000040u;
}
void VerifyPurchaseRequest::clear_has_receipt() {
  _has_bits_[0] &= ~0x00000040u;
}
void VerifyPurchaseRequest::clear_receipt() {
  if (receipt_ != NULL) receipt_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_receipt();
}
const ::micromsg::SKBuiltinBuffer_t& VerifyPurchaseRequest::receipt() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPurchaseRequest.Receipt)
  return receipt_ != NULL ? *receipt_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* VerifyPurchaseRequest::mutable_receipt() {
  set_has_receipt();
  if (receipt_ == NULL) {
    receipt_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPurchaseRequest.Receipt)
  return receipt_;
}
::micromsg::SKBuiltinBuffer_t* VerifyPurchaseRequest::release_receipt() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPurchaseRequest.Receipt)
  clear_has_receipt();
  ::micromsg::SKBuiltinBuffer_t* temp = receipt_;
  receipt_ = NULL;
  return temp;
}
void VerifyPurchaseRequest::set_allocated_receipt(::micromsg::SKBuiltinBuffer_t* receipt) {
  delete receipt_;
  receipt_ = receipt;
  if (receipt) {
    set_has_receipt();
  } else {
    clear_has_receipt();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPurchaseRequest.Receipt)
}

// optional string ProductID = 3;
bool VerifyPurchaseRequest::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VerifyPurchaseRequest::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
void VerifyPurchaseRequest::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
void VerifyPurchaseRequest::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
const ::std::string& VerifyPurchaseRequest::productid() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPurchaseRequest.ProductID)
  return productid_.GetNoArena();
}
void VerifyPurchaseRequest::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyPurchaseRequest.ProductID)
}
#if LANG_CXX11
void VerifyPurchaseRequest::set_productid(::std::string&& value) {
  set_has_productid();
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyPurchaseRequest.ProductID)
}
#endif
void VerifyPurchaseRequest::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyPurchaseRequest.ProductID)
}
void VerifyPurchaseRequest::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyPurchaseRequest.ProductID)
}
::std::string* VerifyPurchaseRequest::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPurchaseRequest.ProductID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyPurchaseRequest::release_productid() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPurchaseRequest.ProductID)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyPurchaseRequest::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPurchaseRequest.ProductID)
}

// required uint32 VerifyType = 4;
bool VerifyPurchaseRequest::has_verifytype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VerifyPurchaseRequest::set_has_verifytype() {
  _has_bits_[0] |= 0x00000080u;
}
void VerifyPurchaseRequest::clear_has_verifytype() {
  _has_bits_[0] &= ~0x00000080u;
}
void VerifyPurchaseRequest::clear_verifytype() {
  verifytype_ = 0u;
  clear_has_verifytype();
}
::google::protobuf::uint32 VerifyPurchaseRequest::verifytype() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPurchaseRequest.VerifyType)
  return verifytype_;
}
void VerifyPurchaseRequest::set_verifytype(::google::protobuf::uint32 value) {
  set_has_verifytype();
  verifytype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VerifyPurchaseRequest.VerifyType)
}

// required uint32 PayType = 5;
bool VerifyPurchaseRequest::has_paytype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VerifyPurchaseRequest::set_has_paytype() {
  _has_bits_[0] |= 0x00000100u;
}
void VerifyPurchaseRequest::clear_has_paytype() {
  _has_bits_[0] &= ~0x00000100u;
}
void VerifyPurchaseRequest::clear_paytype() {
  paytype_ = 0u;
  clear_has_paytype();
}
::google::protobuf::uint32 VerifyPurchaseRequest::paytype() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPurchaseRequest.PayType)
  return paytype_;
}
void VerifyPurchaseRequest::set_paytype(::google::protobuf::uint32 value) {
  set_has_paytype();
  paytype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VerifyPurchaseRequest.PayType)
}

// optional string Price = 6;
bool VerifyPurchaseRequest::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VerifyPurchaseRequest::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
void VerifyPurchaseRequest::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
void VerifyPurchaseRequest::clear_price() {
  price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_price();
}
const ::std::string& VerifyPurchaseRequest::price() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPurchaseRequest.Price)
  return price_.GetNoArena();
}
void VerifyPurchaseRequest::set_price(const ::std::string& value) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyPurchaseRequest.Price)
}
#if LANG_CXX11
void VerifyPurchaseRequest::set_price(::std::string&& value) {
  set_has_price();
  price_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyPurchaseRequest.Price)
}
#endif
void VerifyPurchaseRequest::set_price(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyPurchaseRequest.Price)
}
void VerifyPurchaseRequest::set_price(const char* value, size_t size) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyPurchaseRequest.Price)
}
::std::string* VerifyPurchaseRequest::mutable_price() {
  set_has_price();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPurchaseRequest.Price)
  return price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyPurchaseRequest::release_price() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPurchaseRequest.Price)
  clear_has_price();
  return price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyPurchaseRequest::set_allocated_price(::std::string* price) {
  if (price != NULL) {
    set_has_price();
  } else {
    clear_has_price();
  }
  price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPurchaseRequest.Price)
}

// optional string CurrencyType = 7;
bool VerifyPurchaseRequest::has_currencytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VerifyPurchaseRequest::set_has_currencytype() {
  _has_bits_[0] |= 0x00000004u;
}
void VerifyPurchaseRequest::clear_has_currencytype() {
  _has_bits_[0] &= ~0x00000004u;
}
void VerifyPurchaseRequest::clear_currencytype() {
  currencytype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_currencytype();
}
const ::std::string& VerifyPurchaseRequest::currencytype() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPurchaseRequest.CurrencyType)
  return currencytype_.GetNoArena();
}
void VerifyPurchaseRequest::set_currencytype(const ::std::string& value) {
  set_has_currencytype();
  currencytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyPurchaseRequest.CurrencyType)
}
#if LANG_CXX11
void VerifyPurchaseRequest::set_currencytype(::std::string&& value) {
  set_has_currencytype();
  currencytype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyPurchaseRequest.CurrencyType)
}
#endif
void VerifyPurchaseRequest::set_currencytype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_currencytype();
  currencytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyPurchaseRequest.CurrencyType)
}
void VerifyPurchaseRequest::set_currencytype(const char* value, size_t size) {
  set_has_currencytype();
  currencytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyPurchaseRequest.CurrencyType)
}
::std::string* VerifyPurchaseRequest::mutable_currencytype() {
  set_has_currencytype();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPurchaseRequest.CurrencyType)
  return currencytype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyPurchaseRequest::release_currencytype() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPurchaseRequest.CurrencyType)
  clear_has_currencytype();
  return currencytype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyPurchaseRequest::set_allocated_currencytype(::std::string* currencytype) {
  if (currencytype != NULL) {
    set_has_currencytype();
  } else {
    clear_has_currencytype();
  }
  currencytype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currencytype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPurchaseRequest.CurrencyType)
}

// optional string BillNo = 8;
bool VerifyPurchaseRequest::has_billno() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VerifyPurchaseRequest::set_has_billno() {
  _has_bits_[0] |= 0x00000008u;
}
void VerifyPurchaseRequest::clear_has_billno() {
  _has_bits_[0] &= ~0x00000008u;
}
void VerifyPurchaseRequest::clear_billno() {
  billno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_billno();
}
const ::std::string& VerifyPurchaseRequest::billno() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPurchaseRequest.BillNo)
  return billno_.GetNoArena();
}
void VerifyPurchaseRequest::set_billno(const ::std::string& value) {
  set_has_billno();
  billno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyPurchaseRequest.BillNo)
}
#if LANG_CXX11
void VerifyPurchaseRequest::set_billno(::std::string&& value) {
  set_has_billno();
  billno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyPurchaseRequest.BillNo)
}
#endif
void VerifyPurchaseRequest::set_billno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_billno();
  billno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyPurchaseRequest.BillNo)
}
void VerifyPurchaseRequest::set_billno(const char* value, size_t size) {
  set_has_billno();
  billno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyPurchaseRequest.BillNo)
}
::std::string* VerifyPurchaseRequest::mutable_billno() {
  set_has_billno();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPurchaseRequest.BillNo)
  return billno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyPurchaseRequest::release_billno() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPurchaseRequest.BillNo)
  clear_has_billno();
  return billno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyPurchaseRequest::set_allocated_billno(::std::string* billno) {
  if (billno != NULL) {
    set_has_billno();
  } else {
    clear_has_billno();
  }
  billno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), billno);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPurchaseRequest.BillNo)
}

// required uint32 PayTime = 9;
bool VerifyPurchaseRequest::has_paytime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VerifyPurchaseRequest::set_has_paytime() {
  _has_bits_[0] |= 0x00000200u;
}
void VerifyPurchaseRequest::clear_has_paytime() {
  _has_bits_[0] &= ~0x00000200u;
}
void VerifyPurchaseRequest::clear_paytime() {
  paytime_ = 0u;
  clear_has_paytime();
}
::google::protobuf::uint32 VerifyPurchaseRequest::paytime() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPurchaseRequest.PayTime)
  return paytime_;
}
void VerifyPurchaseRequest::set_paytime(::google::protobuf::uint32 value) {
  set_has_paytime();
  paytime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VerifyPurchaseRequest.PayTime)
}

// optional string ReceiptSig = 10;
bool VerifyPurchaseRequest::has_receiptsig() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VerifyPurchaseRequest::set_has_receiptsig() {
  _has_bits_[0] |= 0x00000010u;
}
void VerifyPurchaseRequest::clear_has_receiptsig() {
  _has_bits_[0] &= ~0x00000010u;
}
void VerifyPurchaseRequest::clear_receiptsig() {
  receiptsig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_receiptsig();
}
const ::std::string& VerifyPurchaseRequest::receiptsig() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPurchaseRequest.ReceiptSig)
  return receiptsig_.GetNoArena();
}
void VerifyPurchaseRequest::set_receiptsig(const ::std::string& value) {
  set_has_receiptsig();
  receiptsig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyPurchaseRequest.ReceiptSig)
}
#if LANG_CXX11
void VerifyPurchaseRequest::set_receiptsig(::std::string&& value) {
  set_has_receiptsig();
  receiptsig_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyPurchaseRequest.ReceiptSig)
}
#endif
void VerifyPurchaseRequest::set_receiptsig(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_receiptsig();
  receiptsig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyPurchaseRequest.ReceiptSig)
}
void VerifyPurchaseRequest::set_receiptsig(const char* value, size_t size) {
  set_has_receiptsig();
  receiptsig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyPurchaseRequest.ReceiptSig)
}
::std::string* VerifyPurchaseRequest::mutable_receiptsig() {
  set_has_receiptsig();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPurchaseRequest.ReceiptSig)
  return receiptsig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyPurchaseRequest::release_receiptsig() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPurchaseRequest.ReceiptSig)
  clear_has_receiptsig();
  return receiptsig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyPurchaseRequest::set_allocated_receiptsig(::std::string* receiptsig) {
  if (receiptsig != NULL) {
    set_has_receiptsig();
  } else {
    clear_has_receiptsig();
  }
  receiptsig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiptsig);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPurchaseRequest.ReceiptSig)
}

// optional uint32 Quantity = 11;
bool VerifyPurchaseRequest::has_quantity() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VerifyPurchaseRequest::set_has_quantity() {
  _has_bits_[0] |= 0x00000400u;
}
void VerifyPurchaseRequest::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000400u;
}
void VerifyPurchaseRequest::clear_quantity() {
  quantity_ = 0u;
  clear_has_quantity();
}
::google::protobuf::uint32 VerifyPurchaseRequest::quantity() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPurchaseRequest.Quantity)
  return quantity_;
}
void VerifyPurchaseRequest::set_quantity(::google::protobuf::uint32 value) {
  set_has_quantity();
  quantity_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VerifyPurchaseRequest.Quantity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyPurchaseResponse::kBaseResponseFieldNumber;
const int VerifyPurchaseResponse::kSeriesIDFieldNumber;
const int VerifyPurchaseResponse::kBizTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyPurchaseResponse::VerifyPurchaseResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VerifyPurchaseResponse)
}
VerifyPurchaseResponse::VerifyPurchaseResponse(const VerifyPurchaseResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seriesid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_seriesid()) {
    seriesid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seriesid_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  biztype_ = from.biztype_;
  // @@protoc_insertion_point(copy_constructor:micromsg.VerifyPurchaseResponse)
}

void VerifyPurchaseResponse::SharedCtor() {
  _cached_size_ = 0;
  seriesid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&biztype_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(biztype_));
}

VerifyPurchaseResponse::~VerifyPurchaseResponse() {
  // @@protoc_insertion_point(destructor:micromsg.VerifyPurchaseResponse)
  SharedDtor();
}

void VerifyPurchaseResponse::SharedDtor() {
  seriesid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void VerifyPurchaseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyPurchaseResponse::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VerifyPurchaseResponse& VerifyPurchaseResponse::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

VerifyPurchaseResponse* VerifyPurchaseResponse::New(::google::protobuf::Arena* arena) const {
  VerifyPurchaseResponse* n = new VerifyPurchaseResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyPurchaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VerifyPurchaseResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_seriesid()) {
      GOOGLE_DCHECK(!seriesid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*seriesid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  biztype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VerifyPurchaseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VerifyPurchaseResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SeriesID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->seriesid().data(), this->seriesid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VerifyPurchaseResponse.SeriesID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 BizType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_biztype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &biztype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VerifyPurchaseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VerifyPurchaseResponse)
  return false;
#undef DO_
}

void VerifyPurchaseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VerifyPurchaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string SeriesID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seriesid().data(), this->seriesid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPurchaseResponse.SeriesID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->seriesid(), output);
  }

  // required uint32 BizType = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->biztype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VerifyPurchaseResponse)
}

::google::protobuf::uint8* VerifyPurchaseResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VerifyPurchaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string SeriesID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seriesid().data(), this->seriesid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPurchaseResponse.SeriesID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->seriesid(), target);
  }

  // required uint32 BizType = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->biztype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VerifyPurchaseResponse)
  return target;
}

size_t VerifyPurchaseResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VerifyPurchaseResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_biztype()) {
    // required uint32 BizType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->biztype());
  }

  return total_size;
}
size_t VerifyPurchaseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VerifyPurchaseResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 BizType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->biztype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string SeriesID = 2;
  if (has_seriesid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->seriesid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyPurchaseResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VerifyPurchaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyPurchaseResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyPurchaseResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VerifyPurchaseResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VerifyPurchaseResponse)
    MergeFrom(*source);
  }
}

void VerifyPurchaseResponse::MergeFrom(const VerifyPurchaseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VerifyPurchaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_seriesid();
      seriesid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seriesid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      biztype_ = from.biztype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VerifyPurchaseResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VerifyPurchaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyPurchaseResponse::CopyFrom(const VerifyPurchaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VerifyPurchaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyPurchaseResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void VerifyPurchaseResponse::Swap(VerifyPurchaseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyPurchaseResponse::InternalSwap(VerifyPurchaseResponse* other) {
  seriesid_.Swap(&other->seriesid_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(biztype_, other->biztype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerifyPurchaseResponse::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyPurchaseResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool VerifyPurchaseResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VerifyPurchaseResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void VerifyPurchaseResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void VerifyPurchaseResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VerifyPurchaseResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPurchaseResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VerifyPurchaseResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPurchaseResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VerifyPurchaseResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPurchaseResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VerifyPurchaseResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPurchaseResponse.BaseResponse)
}

// optional string SeriesID = 2;
bool VerifyPurchaseResponse::has_seriesid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VerifyPurchaseResponse::set_has_seriesid() {
  _has_bits_[0] |= 0x00000001u;
}
void VerifyPurchaseResponse::clear_has_seriesid() {
  _has_bits_[0] &= ~0x00000001u;
}
void VerifyPurchaseResponse::clear_seriesid() {
  seriesid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_seriesid();
}
const ::std::string& VerifyPurchaseResponse::seriesid() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPurchaseResponse.SeriesID)
  return seriesid_.GetNoArena();
}
void VerifyPurchaseResponse::set_seriesid(const ::std::string& value) {
  set_has_seriesid();
  seriesid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyPurchaseResponse.SeriesID)
}
#if LANG_CXX11
void VerifyPurchaseResponse::set_seriesid(::std::string&& value) {
  set_has_seriesid();
  seriesid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyPurchaseResponse.SeriesID)
}
#endif
void VerifyPurchaseResponse::set_seriesid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_seriesid();
  seriesid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyPurchaseResponse.SeriesID)
}
void VerifyPurchaseResponse::set_seriesid(const char* value, size_t size) {
  set_has_seriesid();
  seriesid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyPurchaseResponse.SeriesID)
}
::std::string* VerifyPurchaseResponse::mutable_seriesid() {
  set_has_seriesid();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPurchaseResponse.SeriesID)
  return seriesid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyPurchaseResponse::release_seriesid() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPurchaseResponse.SeriesID)
  clear_has_seriesid();
  return seriesid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyPurchaseResponse::set_allocated_seriesid(::std::string* seriesid) {
  if (seriesid != NULL) {
    set_has_seriesid();
  } else {
    clear_has_seriesid();
  }
  seriesid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seriesid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPurchaseResponse.SeriesID)
}

// required uint32 BizType = 3;
bool VerifyPurchaseResponse::has_biztype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VerifyPurchaseResponse::set_has_biztype() {
  _has_bits_[0] |= 0x00000004u;
}
void VerifyPurchaseResponse::clear_has_biztype() {
  _has_bits_[0] &= ~0x00000004u;
}
void VerifyPurchaseResponse::clear_biztype() {
  biztype_ = 0u;
  clear_has_biztype();
}
::google::protobuf::uint32 VerifyPurchaseResponse::biztype() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPurchaseResponse.BizType)
  return biztype_;
}
void VerifyPurchaseResponse::set_biztype(::google::protobuf::uint32 value) {
  set_has_biztype();
  biztype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VerifyPurchaseResponse.BizType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModEmotionPackRequest::kBaseRequestFieldNumber;
const int ModEmotionPackRequest::kProductIDFieldNumber;
const int ModEmotionPackRequest::kOpCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModEmotionPackRequest::ModEmotionPackRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModEmotionPackRequest)
}
ModEmotionPackRequest::ModEmotionPackRequest(const ModEmotionPackRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  opcode_ = from.opcode_;
  // @@protoc_insertion_point(copy_constructor:micromsg.ModEmotionPackRequest)
}

void ModEmotionPackRequest::SharedCtor() {
  _cached_size_ = 0;
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(opcode_));
}

ModEmotionPackRequest::~ModEmotionPackRequest() {
  // @@protoc_insertion_point(destructor:micromsg.ModEmotionPackRequest)
  SharedDtor();
}

void ModEmotionPackRequest::SharedDtor() {
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void ModEmotionPackRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModEmotionPackRequest::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModEmotionPackRequest& ModEmotionPackRequest::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModEmotionPackRequest* ModEmotionPackRequest::New(::google::protobuf::Arena* arena) const {
  ModEmotionPackRequest* n = new ModEmotionPackRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModEmotionPackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModEmotionPackRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_productid()) {
      GOOGLE_DCHECK(!productid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*productid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  opcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModEmotionPackRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModEmotionPackRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ProductID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModEmotionPackRequest.ProductID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 OpCode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModEmotionPackRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModEmotionPackRequest)
  return false;
#undef DO_
}

void ModEmotionPackRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModEmotionPackRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ProductID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModEmotionPackRequest.ProductID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->productid(), output);
  }

  // required uint32 OpCode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->opcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModEmotionPackRequest)
}

::google::protobuf::uint8* ModEmotionPackRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModEmotionPackRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ProductID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModEmotionPackRequest.ProductID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->productid(), target);
  }

  // required uint32 OpCode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->opcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModEmotionPackRequest)
  return target;
}

size_t ModEmotionPackRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ModEmotionPackRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_opcode()) {
    // required uint32 OpCode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  return total_size;
}
size_t ModEmotionPackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModEmotionPackRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 OpCode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string ProductID = 2;
  if (has_productid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModEmotionPackRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModEmotionPackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ModEmotionPackRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModEmotionPackRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModEmotionPackRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModEmotionPackRequest)
    MergeFrom(*source);
  }
}

void ModEmotionPackRequest::MergeFrom(const ModEmotionPackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModEmotionPackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModEmotionPackRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModEmotionPackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModEmotionPackRequest::CopyFrom(const ModEmotionPackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModEmotionPackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModEmotionPackRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void ModEmotionPackRequest::Swap(ModEmotionPackRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModEmotionPackRequest::InternalSwap(ModEmotionPackRequest* other) {
  productid_.Swap(&other->productid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModEmotionPackRequest::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModEmotionPackRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool ModEmotionPackRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModEmotionPackRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void ModEmotionPackRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModEmotionPackRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& ModEmotionPackRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ModEmotionPackRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* ModEmotionPackRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModEmotionPackRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* ModEmotionPackRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ModEmotionPackRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void ModEmotionPackRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModEmotionPackRequest.BaseRequest)
}

// optional string ProductID = 2;
bool ModEmotionPackRequest::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModEmotionPackRequest::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
void ModEmotionPackRequest::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModEmotionPackRequest::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
const ::std::string& ModEmotionPackRequest::productid() const {
  // @@protoc_insertion_point(field_get:micromsg.ModEmotionPackRequest.ProductID)
  return productid_.GetNoArena();
}
void ModEmotionPackRequest::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModEmotionPackRequest.ProductID)
}
#if LANG_CXX11
void ModEmotionPackRequest::set_productid(::std::string&& value) {
  set_has_productid();
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModEmotionPackRequest.ProductID)
}
#endif
void ModEmotionPackRequest::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModEmotionPackRequest.ProductID)
}
void ModEmotionPackRequest::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModEmotionPackRequest.ProductID)
}
::std::string* ModEmotionPackRequest::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:micromsg.ModEmotionPackRequest.ProductID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModEmotionPackRequest::release_productid() {
  // @@protoc_insertion_point(field_release:micromsg.ModEmotionPackRequest.ProductID)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModEmotionPackRequest::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModEmotionPackRequest.ProductID)
}

// required uint32 OpCode = 3;
bool ModEmotionPackRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModEmotionPackRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000004u;
}
void ModEmotionPackRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModEmotionPackRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 ModEmotionPackRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.ModEmotionPackRequest.OpCode)
  return opcode_;
}
void ModEmotionPackRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModEmotionPackRequest.OpCode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModEmotionPackResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModEmotionPackResponse::ModEmotionPackResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModEmotionPackResponse)
}
ModEmotionPackResponse::ModEmotionPackResponse(const ModEmotionPackResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.ModEmotionPackResponse)
}

void ModEmotionPackResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

ModEmotionPackResponse::~ModEmotionPackResponse() {
  // @@protoc_insertion_point(destructor:micromsg.ModEmotionPackResponse)
  SharedDtor();
}

void ModEmotionPackResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void ModEmotionPackResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModEmotionPackResponse::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModEmotionPackResponse& ModEmotionPackResponse::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModEmotionPackResponse* ModEmotionPackResponse::New(::google::protobuf::Arena* arena) const {
  ModEmotionPackResponse* n = new ModEmotionPackResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModEmotionPackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModEmotionPackResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModEmotionPackResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModEmotionPackResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModEmotionPackResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModEmotionPackResponse)
  return false;
#undef DO_
}

void ModEmotionPackResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModEmotionPackResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModEmotionPackResponse)
}

::google::protobuf::uint8* ModEmotionPackResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModEmotionPackResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModEmotionPackResponse)
  return target;
}

size_t ModEmotionPackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModEmotionPackResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModEmotionPackResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModEmotionPackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ModEmotionPackResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModEmotionPackResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModEmotionPackResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModEmotionPackResponse)
    MergeFrom(*source);
  }
}

void ModEmotionPackResponse::MergeFrom(const ModEmotionPackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModEmotionPackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void ModEmotionPackResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModEmotionPackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModEmotionPackResponse::CopyFrom(const ModEmotionPackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModEmotionPackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModEmotionPackResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void ModEmotionPackResponse::Swap(ModEmotionPackResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModEmotionPackResponse::InternalSwap(ModEmotionPackResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModEmotionPackResponse::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModEmotionPackResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool ModEmotionPackResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModEmotionPackResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void ModEmotionPackResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModEmotionPackResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& ModEmotionPackResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ModEmotionPackResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* ModEmotionPackResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModEmotionPackResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* ModEmotionPackResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ModEmotionPackResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void ModEmotionPackResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModEmotionPackResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreparePurchaseRequest::kBaseRequestFieldNumber;
const int PreparePurchaseRequest::kProductIDFieldNumber;
const int PreparePurchaseRequest::kPriceFieldNumber;
const int PreparePurchaseRequest::kCurrencyTypeFieldNumber;
const int PreparePurchaseRequest::kPayTypeFieldNumber;
const int PreparePurchaseRequest::kExtInfoFieldNumber;
const int PreparePurchaseRequest::kQuantityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreparePurchaseRequest::PreparePurchaseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.PreparePurchaseRequest)
}
PreparePurchaseRequest::PreparePurchaseRequest(const PreparePurchaseRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_price()) {
    price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_);
  }
  currencytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currencytype()) {
    currencytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currencytype_);
  }
  extinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extinfo()) {
    extinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extinfo_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&paytype_, &from.paytype_,
    reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&paytype_) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:micromsg.PreparePurchaseRequest)
}

void PreparePurchaseRequest::SharedCtor() {
  _cached_size_ = 0;
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currencytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(quantity_));
}

PreparePurchaseRequest::~PreparePurchaseRequest() {
  // @@protoc_insertion_point(destructor:micromsg.PreparePurchaseRequest)
  SharedDtor();
}

void PreparePurchaseRequest::SharedDtor() {
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currencytype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void PreparePurchaseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreparePurchaseRequest::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PreparePurchaseRequest& PreparePurchaseRequest::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

PreparePurchaseRequest* PreparePurchaseRequest::New(::google::protobuf::Arena* arena) const {
  PreparePurchaseRequest* n = new PreparePurchaseRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PreparePurchaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.PreparePurchaseRequest)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_productid()) {
      GOOGLE_DCHECK(!productid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*productid_.UnsafeRawStringPointer())->clear();
    }
    if (has_price()) {
      GOOGLE_DCHECK(!price_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*price_.UnsafeRawStringPointer())->clear();
    }
    if (has_currencytype()) {
      GOOGLE_DCHECK(!currencytype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*currencytype_.UnsafeRawStringPointer())->clear();
    }
    if (has_extinfo()) {
      GOOGLE_DCHECK(!extinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 96u) {
    ::memset(&paytype_, 0, reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&paytype_) + sizeof(quantity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PreparePurchaseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.PreparePurchaseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ProductID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PreparePurchaseRequest.ProductID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->price().data(), this->price().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PreparePurchaseRequest.Price");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CurrencyType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currencytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currencytype().data(), this->currencytype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PreparePurchaseRequest.CurrencyType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 PayType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_paytype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paytype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ExtInfo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extinfo().data(), this->extinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PreparePurchaseRequest.ExtInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Quantity = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.PreparePurchaseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.PreparePurchaseRequest)
  return false;
#undef DO_
}

void PreparePurchaseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.PreparePurchaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ProductID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PreparePurchaseRequest.ProductID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->productid(), output);
  }

  // optional string Price = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PreparePurchaseRequest.Price");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->price(), output);
  }

  // optional string CurrencyType = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currencytype().data(), this->currencytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PreparePurchaseRequest.CurrencyType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->currencytype(), output);
  }

  // required uint32 PayType = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->paytype(), output);
  }

  // optional string ExtInfo = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extinfo().data(), this->extinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PreparePurchaseRequest.ExtInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->extinfo(), output);
  }

  // optional uint32 Quantity = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->quantity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.PreparePurchaseRequest)
}

::google::protobuf::uint8* PreparePurchaseRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.PreparePurchaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ProductID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PreparePurchaseRequest.ProductID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->productid(), target);
  }

  // optional string Price = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PreparePurchaseRequest.Price");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->price(), target);
  }

  // optional string CurrencyType = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currencytype().data(), this->currencytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PreparePurchaseRequest.CurrencyType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->currencytype(), target);
  }

  // required uint32 PayType = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->paytype(), target);
  }

  // optional string ExtInfo = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extinfo().data(), this->extinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PreparePurchaseRequest.ExtInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->extinfo(), target);
  }

  // optional uint32 Quantity = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->quantity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.PreparePurchaseRequest)
  return target;
}

size_t PreparePurchaseRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.PreparePurchaseRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_paytype()) {
    // required uint32 PayType = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->paytype());
  }

  return total_size;
}
size_t PreparePurchaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.PreparePurchaseRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000030) ^ 0x00000030) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 PayType = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->paytype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string ProductID = 2;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // optional string Price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->price());
    }

    // optional string CurrencyType = 4;
    if (has_currencytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currencytype());
    }

    // optional string ExtInfo = 7;
    if (has_extinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extinfo());
    }

  }
  // optional uint32 Quantity = 8;
  if (has_quantity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->quantity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreparePurchaseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.PreparePurchaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PreparePurchaseRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PreparePurchaseRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.PreparePurchaseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.PreparePurchaseRequest)
    MergeFrom(*source);
  }
}

void PreparePurchaseRequest::MergeFrom(const PreparePurchaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.PreparePurchaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_price();
      price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_currencytype();
      currencytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currencytype_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_extinfo();
      extinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extinfo_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000020u) {
      paytype_ = from.paytype_;
    }
    if (cached_has_bits & 0x00000040u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PreparePurchaseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.PreparePurchaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreparePurchaseRequest::CopyFrom(const PreparePurchaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.PreparePurchaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreparePurchaseRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000030) != 0x00000030) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void PreparePurchaseRequest::Swap(PreparePurchaseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PreparePurchaseRequest::InternalSwap(PreparePurchaseRequest* other) {
  productid_.Swap(&other->productid_);
  price_.Swap(&other->price_);
  currencytype_.Swap(&other->currencytype_);
  extinfo_.Swap(&other->extinfo_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(paytype_, other->paytype_);
  std::swap(quantity_, other->quantity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PreparePurchaseRequest::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PreparePurchaseRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool PreparePurchaseRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PreparePurchaseRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000010u;
}
void PreparePurchaseRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000010u;
}
void PreparePurchaseRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& PreparePurchaseRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.PreparePurchaseRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* PreparePurchaseRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.PreparePurchaseRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* PreparePurchaseRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.PreparePurchaseRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void PreparePurchaseRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.PreparePurchaseRequest.BaseRequest)
}

// optional string ProductID = 2;
bool PreparePurchaseRequest::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PreparePurchaseRequest::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
void PreparePurchaseRequest::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PreparePurchaseRequest::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
const ::std::string& PreparePurchaseRequest::productid() const {
  // @@protoc_insertion_point(field_get:micromsg.PreparePurchaseRequest.ProductID)
  return productid_.GetNoArena();
}
void PreparePurchaseRequest::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PreparePurchaseRequest.ProductID)
}
#if LANG_CXX11
void PreparePurchaseRequest::set_productid(::std::string&& value) {
  set_has_productid();
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PreparePurchaseRequest.ProductID)
}
#endif
void PreparePurchaseRequest::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PreparePurchaseRequest.ProductID)
}
void PreparePurchaseRequest::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PreparePurchaseRequest.ProductID)
}
::std::string* PreparePurchaseRequest::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:micromsg.PreparePurchaseRequest.ProductID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PreparePurchaseRequest::release_productid() {
  // @@protoc_insertion_point(field_release:micromsg.PreparePurchaseRequest.ProductID)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PreparePurchaseRequest::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PreparePurchaseRequest.ProductID)
}

// optional string Price = 3;
bool PreparePurchaseRequest::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PreparePurchaseRequest::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
void PreparePurchaseRequest::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
void PreparePurchaseRequest::clear_price() {
  price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_price();
}
const ::std::string& PreparePurchaseRequest::price() const {
  // @@protoc_insertion_point(field_get:micromsg.PreparePurchaseRequest.Price)
  return price_.GetNoArena();
}
void PreparePurchaseRequest::set_price(const ::std::string& value) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PreparePurchaseRequest.Price)
}
#if LANG_CXX11
void PreparePurchaseRequest::set_price(::std::string&& value) {
  set_has_price();
  price_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PreparePurchaseRequest.Price)
}
#endif
void PreparePurchaseRequest::set_price(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PreparePurchaseRequest.Price)
}
void PreparePurchaseRequest::set_price(const char* value, size_t size) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PreparePurchaseRequest.Price)
}
::std::string* PreparePurchaseRequest::mutable_price() {
  set_has_price();
  // @@protoc_insertion_point(field_mutable:micromsg.PreparePurchaseRequest.Price)
  return price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PreparePurchaseRequest::release_price() {
  // @@protoc_insertion_point(field_release:micromsg.PreparePurchaseRequest.Price)
  clear_has_price();
  return price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PreparePurchaseRequest::set_allocated_price(::std::string* price) {
  if (price != NULL) {
    set_has_price();
  } else {
    clear_has_price();
  }
  price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PreparePurchaseRequest.Price)
}

// optional string CurrencyType = 4;
bool PreparePurchaseRequest::has_currencytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PreparePurchaseRequest::set_has_currencytype() {
  _has_bits_[0] |= 0x00000004u;
}
void PreparePurchaseRequest::clear_has_currencytype() {
  _has_bits_[0] &= ~0x00000004u;
}
void PreparePurchaseRequest::clear_currencytype() {
  currencytype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_currencytype();
}
const ::std::string& PreparePurchaseRequest::currencytype() const {
  // @@protoc_insertion_point(field_get:micromsg.PreparePurchaseRequest.CurrencyType)
  return currencytype_.GetNoArena();
}
void PreparePurchaseRequest::set_currencytype(const ::std::string& value) {
  set_has_currencytype();
  currencytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PreparePurchaseRequest.CurrencyType)
}
#if LANG_CXX11
void PreparePurchaseRequest::set_currencytype(::std::string&& value) {
  set_has_currencytype();
  currencytype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PreparePurchaseRequest.CurrencyType)
}
#endif
void PreparePurchaseRequest::set_currencytype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_currencytype();
  currencytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PreparePurchaseRequest.CurrencyType)
}
void PreparePurchaseRequest::set_currencytype(const char* value, size_t size) {
  set_has_currencytype();
  currencytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PreparePurchaseRequest.CurrencyType)
}
::std::string* PreparePurchaseRequest::mutable_currencytype() {
  set_has_currencytype();
  // @@protoc_insertion_point(field_mutable:micromsg.PreparePurchaseRequest.CurrencyType)
  return currencytype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PreparePurchaseRequest::release_currencytype() {
  // @@protoc_insertion_point(field_release:micromsg.PreparePurchaseRequest.CurrencyType)
  clear_has_currencytype();
  return currencytype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PreparePurchaseRequest::set_allocated_currencytype(::std::string* currencytype) {
  if (currencytype != NULL) {
    set_has_currencytype();
  } else {
    clear_has_currencytype();
  }
  currencytype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currencytype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PreparePurchaseRequest.CurrencyType)
}

// required uint32 PayType = 5;
bool PreparePurchaseRequest::has_paytype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PreparePurchaseRequest::set_has_paytype() {
  _has_bits_[0] |= 0x00000020u;
}
void PreparePurchaseRequest::clear_has_paytype() {
  _has_bits_[0] &= ~0x00000020u;
}
void PreparePurchaseRequest::clear_paytype() {
  paytype_ = 0u;
  clear_has_paytype();
}
::google::protobuf::uint32 PreparePurchaseRequest::paytype() const {
  // @@protoc_insertion_point(field_get:micromsg.PreparePurchaseRequest.PayType)
  return paytype_;
}
void PreparePurchaseRequest::set_paytype(::google::protobuf::uint32 value) {
  set_has_paytype();
  paytype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PreparePurchaseRequest.PayType)
}

// optional string ExtInfo = 7;
bool PreparePurchaseRequest::has_extinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PreparePurchaseRequest::set_has_extinfo() {
  _has_bits_[0] |= 0x00000008u;
}
void PreparePurchaseRequest::clear_has_extinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
void PreparePurchaseRequest::clear_extinfo() {
  extinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extinfo();
}
const ::std::string& PreparePurchaseRequest::extinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.PreparePurchaseRequest.ExtInfo)
  return extinfo_.GetNoArena();
}
void PreparePurchaseRequest::set_extinfo(const ::std::string& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PreparePurchaseRequest.ExtInfo)
}
#if LANG_CXX11
void PreparePurchaseRequest::set_extinfo(::std::string&& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PreparePurchaseRequest.ExtInfo)
}
#endif
void PreparePurchaseRequest::set_extinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PreparePurchaseRequest.ExtInfo)
}
void PreparePurchaseRequest::set_extinfo(const char* value, size_t size) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PreparePurchaseRequest.ExtInfo)
}
::std::string* PreparePurchaseRequest::mutable_extinfo() {
  set_has_extinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.PreparePurchaseRequest.ExtInfo)
  return extinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PreparePurchaseRequest::release_extinfo() {
  // @@protoc_insertion_point(field_release:micromsg.PreparePurchaseRequest.ExtInfo)
  clear_has_extinfo();
  return extinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PreparePurchaseRequest::set_allocated_extinfo(::std::string* extinfo) {
  if (extinfo != NULL) {
    set_has_extinfo();
  } else {
    clear_has_extinfo();
  }
  extinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PreparePurchaseRequest.ExtInfo)
}

// optional uint32 Quantity = 8;
bool PreparePurchaseRequest::has_quantity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PreparePurchaseRequest::set_has_quantity() {
  _has_bits_[0] |= 0x00000040u;
}
void PreparePurchaseRequest::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000040u;
}
void PreparePurchaseRequest::clear_quantity() {
  quantity_ = 0u;
  clear_has_quantity();
}
::google::protobuf::uint32 PreparePurchaseRequest::quantity() const {
  // @@protoc_insertion_point(field_get:micromsg.PreparePurchaseRequest.Quantity)
  return quantity_;
}
void PreparePurchaseRequest::set_quantity(::google::protobuf::uint32 value) {
  set_has_quantity();
  quantity_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PreparePurchaseRequest.Quantity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreparePurchaseResponse::kBaseResponseFieldNumber;
const int PreparePurchaseResponse::kBillNoFieldNumber;
const int PreparePurchaseResponse::kTradeToken4TenPayFieldNumber;
const int PreparePurchaseResponse::kPartner4TenPayFieldNumber;
const int PreparePurchaseResponse::kSign4TenPayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreparePurchaseResponse::PreparePurchaseResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.PreparePurchaseResponse)
}
PreparePurchaseResponse::PreparePurchaseResponse(const PreparePurchaseResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  billno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_billno()) {
    billno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.billno_);
  }
  tradetoken4tenpay_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tradetoken4tenpay()) {
    tradetoken4tenpay_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradetoken4tenpay_);
  }
  partner4tenpay_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_partner4tenpay()) {
    partner4tenpay_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partner4tenpay_);
  }
  sign4tenpay_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sign4tenpay()) {
    sign4tenpay_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign4tenpay_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.PreparePurchaseResponse)
}

void PreparePurchaseResponse::SharedCtor() {
  _cached_size_ = 0;
  billno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetoken4tenpay_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partner4tenpay_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign4tenpay_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

PreparePurchaseResponse::~PreparePurchaseResponse() {
  // @@protoc_insertion_point(destructor:micromsg.PreparePurchaseResponse)
  SharedDtor();
}

void PreparePurchaseResponse::SharedDtor() {
  billno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetoken4tenpay_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partner4tenpay_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign4tenpay_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void PreparePurchaseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreparePurchaseResponse::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PreparePurchaseResponse& PreparePurchaseResponse::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

PreparePurchaseResponse* PreparePurchaseResponse::New(::google::protobuf::Arena* arena) const {
  PreparePurchaseResponse* n = new PreparePurchaseResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PreparePurchaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.PreparePurchaseResponse)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_billno()) {
      GOOGLE_DCHECK(!billno_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*billno_.UnsafeRawStringPointer())->clear();
    }
    if (has_tradetoken4tenpay()) {
      GOOGLE_DCHECK(!tradetoken4tenpay_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tradetoken4tenpay_.UnsafeRawStringPointer())->clear();
    }
    if (has_partner4tenpay()) {
      GOOGLE_DCHECK(!partner4tenpay_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*partner4tenpay_.UnsafeRawStringPointer())->clear();
    }
    if (has_sign4tenpay()) {
      GOOGLE_DCHECK(!sign4tenpay_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sign4tenpay_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PreparePurchaseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.PreparePurchaseResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BillNo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->billno().data(), this->billno().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PreparePurchaseResponse.BillNo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TradeToken4TenPay = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradetoken4tenpay()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradetoken4tenpay().data(), this->tradetoken4tenpay().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PreparePurchaseResponse.TradeToken4TenPay");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Partner4TenPay = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partner4tenpay()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->partner4tenpay().data(), this->partner4tenpay().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PreparePurchaseResponse.Partner4TenPay");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Sign4TenPay = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign4tenpay()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign4tenpay().data(), this->sign4tenpay().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PreparePurchaseResponse.Sign4TenPay");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.PreparePurchaseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.PreparePurchaseResponse)
  return false;
#undef DO_
}

void PreparePurchaseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.PreparePurchaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string BillNo = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->billno().data(), this->billno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PreparePurchaseResponse.BillNo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->billno(), output);
  }

  // optional string TradeToken4TenPay = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradetoken4tenpay().data(), this->tradetoken4tenpay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PreparePurchaseResponse.TradeToken4TenPay");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tradetoken4tenpay(), output);
  }

  // optional string Partner4TenPay = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partner4tenpay().data(), this->partner4tenpay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PreparePurchaseResponse.Partner4TenPay");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->partner4tenpay(), output);
  }

  // optional string Sign4TenPay = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign4tenpay().data(), this->sign4tenpay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PreparePurchaseResponse.Sign4TenPay");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sign4tenpay(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.PreparePurchaseResponse)
}

::google::protobuf::uint8* PreparePurchaseResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.PreparePurchaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string BillNo = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->billno().data(), this->billno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PreparePurchaseResponse.BillNo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->billno(), target);
  }

  // optional string TradeToken4TenPay = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradetoken4tenpay().data(), this->tradetoken4tenpay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PreparePurchaseResponse.TradeToken4TenPay");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tradetoken4tenpay(), target);
  }

  // optional string Partner4TenPay = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partner4tenpay().data(), this->partner4tenpay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PreparePurchaseResponse.Partner4TenPay");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->partner4tenpay(), target);
  }

  // optional string Sign4TenPay = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign4tenpay().data(), this->sign4tenpay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PreparePurchaseResponse.Sign4TenPay");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sign4tenpay(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.PreparePurchaseResponse)
  return target;
}

size_t PreparePurchaseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.PreparePurchaseResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string BillNo = 2;
    if (has_billno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billno());
    }

    // optional string TradeToken4TenPay = 3;
    if (has_tradetoken4tenpay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradetoken4tenpay());
    }

    // optional string Partner4TenPay = 4;
    if (has_partner4tenpay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partner4tenpay());
    }

    // optional string Sign4TenPay = 5;
    if (has_sign4tenpay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign4tenpay());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreparePurchaseResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.PreparePurchaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PreparePurchaseResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PreparePurchaseResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.PreparePurchaseResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.PreparePurchaseResponse)
    MergeFrom(*source);
  }
}

void PreparePurchaseResponse::MergeFrom(const PreparePurchaseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.PreparePurchaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_billno();
      billno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.billno_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tradetoken4tenpay();
      tradetoken4tenpay_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradetoken4tenpay_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_partner4tenpay();
      partner4tenpay_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partner4tenpay_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_sign4tenpay();
      sign4tenpay_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign4tenpay_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void PreparePurchaseResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.PreparePurchaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreparePurchaseResponse::CopyFrom(const PreparePurchaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.PreparePurchaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreparePurchaseResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void PreparePurchaseResponse::Swap(PreparePurchaseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PreparePurchaseResponse::InternalSwap(PreparePurchaseResponse* other) {
  billno_.Swap(&other->billno_);
  tradetoken4tenpay_.Swap(&other->tradetoken4tenpay_);
  partner4tenpay_.Swap(&other->partner4tenpay_);
  sign4tenpay_.Swap(&other->sign4tenpay_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PreparePurchaseResponse::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PreparePurchaseResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool PreparePurchaseResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PreparePurchaseResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000010u;
}
void PreparePurchaseResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000010u;
}
void PreparePurchaseResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& PreparePurchaseResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.PreparePurchaseResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* PreparePurchaseResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.PreparePurchaseResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* PreparePurchaseResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.PreparePurchaseResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void PreparePurchaseResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.PreparePurchaseResponse.BaseResponse)
}

// optional string BillNo = 2;
bool PreparePurchaseResponse::has_billno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PreparePurchaseResponse::set_has_billno() {
  _has_bits_[0] |= 0x00000001u;
}
void PreparePurchaseResponse::clear_has_billno() {
  _has_bits_[0] &= ~0x00000001u;
}
void PreparePurchaseResponse::clear_billno() {
  billno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_billno();
}
const ::std::string& PreparePurchaseResponse::billno() const {
  // @@protoc_insertion_point(field_get:micromsg.PreparePurchaseResponse.BillNo)
  return billno_.GetNoArena();
}
void PreparePurchaseResponse::set_billno(const ::std::string& value) {
  set_has_billno();
  billno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PreparePurchaseResponse.BillNo)
}
#if LANG_CXX11
void PreparePurchaseResponse::set_billno(::std::string&& value) {
  set_has_billno();
  billno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PreparePurchaseResponse.BillNo)
}
#endif
void PreparePurchaseResponse::set_billno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_billno();
  billno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PreparePurchaseResponse.BillNo)
}
void PreparePurchaseResponse::set_billno(const char* value, size_t size) {
  set_has_billno();
  billno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PreparePurchaseResponse.BillNo)
}
::std::string* PreparePurchaseResponse::mutable_billno() {
  set_has_billno();
  // @@protoc_insertion_point(field_mutable:micromsg.PreparePurchaseResponse.BillNo)
  return billno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PreparePurchaseResponse::release_billno() {
  // @@protoc_insertion_point(field_release:micromsg.PreparePurchaseResponse.BillNo)
  clear_has_billno();
  return billno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PreparePurchaseResponse::set_allocated_billno(::std::string* billno) {
  if (billno != NULL) {
    set_has_billno();
  } else {
    clear_has_billno();
  }
  billno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), billno);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PreparePurchaseResponse.BillNo)
}

// optional string TradeToken4TenPay = 3;
bool PreparePurchaseResponse::has_tradetoken4tenpay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PreparePurchaseResponse::set_has_tradetoken4tenpay() {
  _has_bits_[0] |= 0x00000002u;
}
void PreparePurchaseResponse::clear_has_tradetoken4tenpay() {
  _has_bits_[0] &= ~0x00000002u;
}
void PreparePurchaseResponse::clear_tradetoken4tenpay() {
  tradetoken4tenpay_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tradetoken4tenpay();
}
const ::std::string& PreparePurchaseResponse::tradetoken4tenpay() const {
  // @@protoc_insertion_point(field_get:micromsg.PreparePurchaseResponse.TradeToken4TenPay)
  return tradetoken4tenpay_.GetNoArena();
}
void PreparePurchaseResponse::set_tradetoken4tenpay(const ::std::string& value) {
  set_has_tradetoken4tenpay();
  tradetoken4tenpay_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PreparePurchaseResponse.TradeToken4TenPay)
}
#if LANG_CXX11
void PreparePurchaseResponse::set_tradetoken4tenpay(::std::string&& value) {
  set_has_tradetoken4tenpay();
  tradetoken4tenpay_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PreparePurchaseResponse.TradeToken4TenPay)
}
#endif
void PreparePurchaseResponse::set_tradetoken4tenpay(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tradetoken4tenpay();
  tradetoken4tenpay_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PreparePurchaseResponse.TradeToken4TenPay)
}
void PreparePurchaseResponse::set_tradetoken4tenpay(const char* value, size_t size) {
  set_has_tradetoken4tenpay();
  tradetoken4tenpay_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PreparePurchaseResponse.TradeToken4TenPay)
}
::std::string* PreparePurchaseResponse::mutable_tradetoken4tenpay() {
  set_has_tradetoken4tenpay();
  // @@protoc_insertion_point(field_mutable:micromsg.PreparePurchaseResponse.TradeToken4TenPay)
  return tradetoken4tenpay_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PreparePurchaseResponse::release_tradetoken4tenpay() {
  // @@protoc_insertion_point(field_release:micromsg.PreparePurchaseResponse.TradeToken4TenPay)
  clear_has_tradetoken4tenpay();
  return tradetoken4tenpay_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PreparePurchaseResponse::set_allocated_tradetoken4tenpay(::std::string* tradetoken4tenpay) {
  if (tradetoken4tenpay != NULL) {
    set_has_tradetoken4tenpay();
  } else {
    clear_has_tradetoken4tenpay();
  }
  tradetoken4tenpay_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradetoken4tenpay);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PreparePurchaseResponse.TradeToken4TenPay)
}

// optional string Partner4TenPay = 4;
bool PreparePurchaseResponse::has_partner4tenpay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PreparePurchaseResponse::set_has_partner4tenpay() {
  _has_bits_[0] |= 0x00000004u;
}
void PreparePurchaseResponse::clear_has_partner4tenpay() {
  _has_bits_[0] &= ~0x00000004u;
}
void PreparePurchaseResponse::clear_partner4tenpay() {
  partner4tenpay_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_partner4tenpay();
}
const ::std::string& PreparePurchaseResponse::partner4tenpay() const {
  // @@protoc_insertion_point(field_get:micromsg.PreparePurchaseResponse.Partner4TenPay)
  return partner4tenpay_.GetNoArena();
}
void PreparePurchaseResponse::set_partner4tenpay(const ::std::string& value) {
  set_has_partner4tenpay();
  partner4tenpay_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PreparePurchaseResponse.Partner4TenPay)
}
#if LANG_CXX11
void PreparePurchaseResponse::set_partner4tenpay(::std::string&& value) {
  set_has_partner4tenpay();
  partner4tenpay_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PreparePurchaseResponse.Partner4TenPay)
}
#endif
void PreparePurchaseResponse::set_partner4tenpay(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_partner4tenpay();
  partner4tenpay_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PreparePurchaseResponse.Partner4TenPay)
}
void PreparePurchaseResponse::set_partner4tenpay(const char* value, size_t size) {
  set_has_partner4tenpay();
  partner4tenpay_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PreparePurchaseResponse.Partner4TenPay)
}
::std::string* PreparePurchaseResponse::mutable_partner4tenpay() {
  set_has_partner4tenpay();
  // @@protoc_insertion_point(field_mutable:micromsg.PreparePurchaseResponse.Partner4TenPay)
  return partner4tenpay_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PreparePurchaseResponse::release_partner4tenpay() {
  // @@protoc_insertion_point(field_release:micromsg.PreparePurchaseResponse.Partner4TenPay)
  clear_has_partner4tenpay();
  return partner4tenpay_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PreparePurchaseResponse::set_allocated_partner4tenpay(::std::string* partner4tenpay) {
  if (partner4tenpay != NULL) {
    set_has_partner4tenpay();
  } else {
    clear_has_partner4tenpay();
  }
  partner4tenpay_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partner4tenpay);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PreparePurchaseResponse.Partner4TenPay)
}

// optional string Sign4TenPay = 5;
bool PreparePurchaseResponse::has_sign4tenpay() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PreparePurchaseResponse::set_has_sign4tenpay() {
  _has_bits_[0] |= 0x00000008u;
}
void PreparePurchaseResponse::clear_has_sign4tenpay() {
  _has_bits_[0] &= ~0x00000008u;
}
void PreparePurchaseResponse::clear_sign4tenpay() {
  sign4tenpay_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign4tenpay();
}
const ::std::string& PreparePurchaseResponse::sign4tenpay() const {
  // @@protoc_insertion_point(field_get:micromsg.PreparePurchaseResponse.Sign4TenPay)
  return sign4tenpay_.GetNoArena();
}
void PreparePurchaseResponse::set_sign4tenpay(const ::std::string& value) {
  set_has_sign4tenpay();
  sign4tenpay_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PreparePurchaseResponse.Sign4TenPay)
}
#if LANG_CXX11
void PreparePurchaseResponse::set_sign4tenpay(::std::string&& value) {
  set_has_sign4tenpay();
  sign4tenpay_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PreparePurchaseResponse.Sign4TenPay)
}
#endif
void PreparePurchaseResponse::set_sign4tenpay(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sign4tenpay();
  sign4tenpay_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PreparePurchaseResponse.Sign4TenPay)
}
void PreparePurchaseResponse::set_sign4tenpay(const char* value, size_t size) {
  set_has_sign4tenpay();
  sign4tenpay_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PreparePurchaseResponse.Sign4TenPay)
}
::std::string* PreparePurchaseResponse::mutable_sign4tenpay() {
  set_has_sign4tenpay();
  // @@protoc_insertion_point(field_mutable:micromsg.PreparePurchaseResponse.Sign4TenPay)
  return sign4tenpay_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PreparePurchaseResponse::release_sign4tenpay() {
  // @@protoc_insertion_point(field_release:micromsg.PreparePurchaseResponse.Sign4TenPay)
  clear_has_sign4tenpay();
  return sign4tenpay_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PreparePurchaseResponse::set_allocated_sign4tenpay(::std::string* sign4tenpay) {
  if (sign4tenpay != NULL) {
    set_has_sign4tenpay();
  } else {
    clear_has_sign4tenpay();
  }
  sign4tenpay_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign4tenpay);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PreparePurchaseResponse.Sign4TenPay)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExchangeEmotionPackRequest::kBaseRequestFieldNumber;
const int ExchangeEmotionPackRequest::kProductIDFieldNumber;
const int ExchangeEmotionPackRequest::kSeriesIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExchangeEmotionPackRequest::ExchangeEmotionPackRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ExchangeEmotionPackRequest)
}
ExchangeEmotionPackRequest::ExchangeEmotionPackRequest(const ExchangeEmotionPackRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  seriesid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_seriesid()) {
    seriesid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seriesid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.ExchangeEmotionPackRequest)
}

void ExchangeEmotionPackRequest::SharedCtor() {
  _cached_size_ = 0;
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seriesid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

ExchangeEmotionPackRequest::~ExchangeEmotionPackRequest() {
  // @@protoc_insertion_point(destructor:micromsg.ExchangeEmotionPackRequest)
  SharedDtor();
}

void ExchangeEmotionPackRequest::SharedDtor() {
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seriesid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void ExchangeEmotionPackRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeEmotionPackRequest::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExchangeEmotionPackRequest& ExchangeEmotionPackRequest::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExchangeEmotionPackRequest* ExchangeEmotionPackRequest::New(::google::protobuf::Arena* arena) const {
  ExchangeEmotionPackRequest* n = new ExchangeEmotionPackRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExchangeEmotionPackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ExchangeEmotionPackRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_productid()) {
      GOOGLE_DCHECK(!productid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*productid_.UnsafeRawStringPointer())->clear();
    }
    if (has_seriesid()) {
      GOOGLE_DCHECK(!seriesid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*seriesid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExchangeEmotionPackRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ExchangeEmotionPackRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ProductID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ExchangeEmotionPackRequest.ProductID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SeriesID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->seriesid().data(), this->seriesid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ExchangeEmotionPackRequest.SeriesID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ExchangeEmotionPackRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ExchangeEmotionPackRequest)
  return false;
#undef DO_
}

void ExchangeEmotionPackRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ExchangeEmotionPackRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ProductID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ExchangeEmotionPackRequest.ProductID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->productid(), output);
  }

  // optional string SeriesID = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seriesid().data(), this->seriesid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ExchangeEmotionPackRequest.SeriesID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->seriesid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ExchangeEmotionPackRequest)
}

::google::protobuf::uint8* ExchangeEmotionPackRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ExchangeEmotionPackRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ProductID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ExchangeEmotionPackRequest.ProductID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->productid(), target);
  }

  // optional string SeriesID = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seriesid().data(), this->seriesid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ExchangeEmotionPackRequest.SeriesID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->seriesid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ExchangeEmotionPackRequest)
  return target;
}

size_t ExchangeEmotionPackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ExchangeEmotionPackRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ProductID = 2;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // optional string SeriesID = 3;
    if (has_seriesid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeEmotionPackRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ExchangeEmotionPackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeEmotionPackRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExchangeEmotionPackRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ExchangeEmotionPackRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ExchangeEmotionPackRequest)
    MergeFrom(*source);
  }
}

void ExchangeEmotionPackRequest::MergeFrom(const ExchangeEmotionPackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ExchangeEmotionPackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_seriesid();
      seriesid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seriesid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void ExchangeEmotionPackRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ExchangeEmotionPackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeEmotionPackRequest::CopyFrom(const ExchangeEmotionPackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ExchangeEmotionPackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeEmotionPackRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void ExchangeEmotionPackRequest::Swap(ExchangeEmotionPackRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExchangeEmotionPackRequest::InternalSwap(ExchangeEmotionPackRequest* other) {
  productid_.Swap(&other->productid_);
  seriesid_.Swap(&other->seriesid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExchangeEmotionPackRequest::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExchangeEmotionPackRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool ExchangeEmotionPackRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ExchangeEmotionPackRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void ExchangeEmotionPackRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void ExchangeEmotionPackRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& ExchangeEmotionPackRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ExchangeEmotionPackRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* ExchangeEmotionPackRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ExchangeEmotionPackRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* ExchangeEmotionPackRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ExchangeEmotionPackRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void ExchangeEmotionPackRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ExchangeEmotionPackRequest.BaseRequest)
}

// optional string ProductID = 2;
bool ExchangeEmotionPackRequest::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExchangeEmotionPackRequest::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
void ExchangeEmotionPackRequest::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExchangeEmotionPackRequest::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
const ::std::string& ExchangeEmotionPackRequest::productid() const {
  // @@protoc_insertion_point(field_get:micromsg.ExchangeEmotionPackRequest.ProductID)
  return productid_.GetNoArena();
}
void ExchangeEmotionPackRequest::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ExchangeEmotionPackRequest.ProductID)
}
#if LANG_CXX11
void ExchangeEmotionPackRequest::set_productid(::std::string&& value) {
  set_has_productid();
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ExchangeEmotionPackRequest.ProductID)
}
#endif
void ExchangeEmotionPackRequest::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ExchangeEmotionPackRequest.ProductID)
}
void ExchangeEmotionPackRequest::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ExchangeEmotionPackRequest.ProductID)
}
::std::string* ExchangeEmotionPackRequest::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:micromsg.ExchangeEmotionPackRequest.ProductID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExchangeEmotionPackRequest::release_productid() {
  // @@protoc_insertion_point(field_release:micromsg.ExchangeEmotionPackRequest.ProductID)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExchangeEmotionPackRequest::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ExchangeEmotionPackRequest.ProductID)
}

// optional string SeriesID = 3;
bool ExchangeEmotionPackRequest::has_seriesid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExchangeEmotionPackRequest::set_has_seriesid() {
  _has_bits_[0] |= 0x00000002u;
}
void ExchangeEmotionPackRequest::clear_has_seriesid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExchangeEmotionPackRequest::clear_seriesid() {
  seriesid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_seriesid();
}
const ::std::string& ExchangeEmotionPackRequest::seriesid() const {
  // @@protoc_insertion_point(field_get:micromsg.ExchangeEmotionPackRequest.SeriesID)
  return seriesid_.GetNoArena();
}
void ExchangeEmotionPackRequest::set_seriesid(const ::std::string& value) {
  set_has_seriesid();
  seriesid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ExchangeEmotionPackRequest.SeriesID)
}
#if LANG_CXX11
void ExchangeEmotionPackRequest::set_seriesid(::std::string&& value) {
  set_has_seriesid();
  seriesid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ExchangeEmotionPackRequest.SeriesID)
}
#endif
void ExchangeEmotionPackRequest::set_seriesid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_seriesid();
  seriesid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ExchangeEmotionPackRequest.SeriesID)
}
void ExchangeEmotionPackRequest::set_seriesid(const char* value, size_t size) {
  set_has_seriesid();
  seriesid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ExchangeEmotionPackRequest.SeriesID)
}
::std::string* ExchangeEmotionPackRequest::mutable_seriesid() {
  set_has_seriesid();
  // @@protoc_insertion_point(field_mutable:micromsg.ExchangeEmotionPackRequest.SeriesID)
  return seriesid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExchangeEmotionPackRequest::release_seriesid() {
  // @@protoc_insertion_point(field_release:micromsg.ExchangeEmotionPackRequest.SeriesID)
  clear_has_seriesid();
  return seriesid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExchangeEmotionPackRequest::set_allocated_seriesid(::std::string* seriesid) {
  if (seriesid != NULL) {
    set_has_seriesid();
  } else {
    clear_has_seriesid();
  }
  seriesid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seriesid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ExchangeEmotionPackRequest.SeriesID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExchangeEmotionPackResponse::kBaseResponseFieldNumber;
const int ExchangeEmotionPackResponse::kDownloadInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExchangeEmotionPackResponse::ExchangeEmotionPackResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ExchangeEmotionPackResponse)
}
ExchangeEmotionPackResponse::ExchangeEmotionPackResponse(const ExchangeEmotionPackResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_downloadinfo()) {
    downloadinfo_ = new ::micromsg::EmotionCDNUrl(*from.downloadinfo_);
  } else {
    downloadinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.ExchangeEmotionPackResponse)
}

void ExchangeEmotionPackResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&downloadinfo_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(downloadinfo_));
}

ExchangeEmotionPackResponse::~ExchangeEmotionPackResponse() {
  // @@protoc_insertion_point(destructor:micromsg.ExchangeEmotionPackResponse)
  SharedDtor();
}

void ExchangeEmotionPackResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete downloadinfo_;
  }
}

void ExchangeEmotionPackResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeEmotionPackResponse::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExchangeEmotionPackResponse& ExchangeEmotionPackResponse::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExchangeEmotionPackResponse* ExchangeEmotionPackResponse::New(::google::protobuf::Arena* arena) const {
  ExchangeEmotionPackResponse* n = new ExchangeEmotionPackResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExchangeEmotionPackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ExchangeEmotionPackResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_downloadinfo()) {
      GOOGLE_DCHECK(downloadinfo_ != NULL);
      downloadinfo_->::micromsg::EmotionCDNUrl::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExchangeEmotionPackResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ExchangeEmotionPackResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.EmotionCDNUrl DownloadInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_downloadinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ExchangeEmotionPackResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ExchangeEmotionPackResponse)
  return false;
#undef DO_
}

void ExchangeEmotionPackResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ExchangeEmotionPackResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.EmotionCDNUrl DownloadInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->downloadinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ExchangeEmotionPackResponse)
}

::google::protobuf::uint8* ExchangeEmotionPackResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ExchangeEmotionPackResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.EmotionCDNUrl DownloadInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->downloadinfo_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ExchangeEmotionPackResponse)
  return target;
}

size_t ExchangeEmotionPackResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ExchangeEmotionPackResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_downloadinfo()) {
    // required .micromsg.EmotionCDNUrl DownloadInfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->downloadinfo_);
  }

  return total_size;
}
size_t ExchangeEmotionPackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ExchangeEmotionPackResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.EmotionCDNUrl DownloadInfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->downloadinfo_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeEmotionPackResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ExchangeEmotionPackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeEmotionPackResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExchangeEmotionPackResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ExchangeEmotionPackResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ExchangeEmotionPackResponse)
    MergeFrom(*source);
  }
}

void ExchangeEmotionPackResponse::MergeFrom(const ExchangeEmotionPackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ExchangeEmotionPackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_downloadinfo()->::micromsg::EmotionCDNUrl::MergeFrom(from.downloadinfo());
    }
  }
}

void ExchangeEmotionPackResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ExchangeEmotionPackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeEmotionPackResponse::CopyFrom(const ExchangeEmotionPackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ExchangeEmotionPackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeEmotionPackResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_downloadinfo()) {
    if (!this->downloadinfo_->IsInitialized()) return false;
  }
  return true;
}

void ExchangeEmotionPackResponse::Swap(ExchangeEmotionPackResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExchangeEmotionPackResponse::InternalSwap(ExchangeEmotionPackResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(downloadinfo_, other->downloadinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExchangeEmotionPackResponse::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExchangeEmotionPackResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool ExchangeEmotionPackResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExchangeEmotionPackResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void ExchangeEmotionPackResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExchangeEmotionPackResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& ExchangeEmotionPackResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ExchangeEmotionPackResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* ExchangeEmotionPackResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ExchangeEmotionPackResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* ExchangeEmotionPackResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ExchangeEmotionPackResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void ExchangeEmotionPackResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ExchangeEmotionPackResponse.BaseResponse)
}

// required .micromsg.EmotionCDNUrl DownloadInfo = 2;
bool ExchangeEmotionPackResponse::has_downloadinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExchangeEmotionPackResponse::set_has_downloadinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void ExchangeEmotionPackResponse::clear_has_downloadinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExchangeEmotionPackResponse::clear_downloadinfo() {
  if (downloadinfo_ != NULL) downloadinfo_->::micromsg::EmotionCDNUrl::Clear();
  clear_has_downloadinfo();
}
const ::micromsg::EmotionCDNUrl& ExchangeEmotionPackResponse::downloadinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.ExchangeEmotionPackResponse.DownloadInfo)
  return downloadinfo_ != NULL ? *downloadinfo_
                         : *::micromsg::EmotionCDNUrl::internal_default_instance();
}
::micromsg::EmotionCDNUrl* ExchangeEmotionPackResponse::mutable_downloadinfo() {
  set_has_downloadinfo();
  if (downloadinfo_ == NULL) {
    downloadinfo_ = new ::micromsg::EmotionCDNUrl;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ExchangeEmotionPackResponse.DownloadInfo)
  return downloadinfo_;
}
::micromsg::EmotionCDNUrl* ExchangeEmotionPackResponse::release_downloadinfo() {
  // @@protoc_insertion_point(field_release:micromsg.ExchangeEmotionPackResponse.DownloadInfo)
  clear_has_downloadinfo();
  ::micromsg::EmotionCDNUrl* temp = downloadinfo_;
  downloadinfo_ = NULL;
  return temp;
}
void ExchangeEmotionPackResponse::set_allocated_downloadinfo(::micromsg::EmotionCDNUrl* downloadinfo) {
  delete downloadinfo_;
  downloadinfo_ = downloadinfo;
  if (downloadinfo) {
    set_has_downloadinfo();
  } else {
    clear_has_downloadinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ExchangeEmotionPackResponse.DownloadInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CancelPurchaseRequest::kBaseRequestFieldNumber;
const int CancelPurchaseRequest::kProductIDFieldNumber;
const int CancelPurchaseRequest::kVerifyTypeFieldNumber;
const int CancelPurchaseRequest::kPayTypeFieldNumber;
const int CancelPurchaseRequest::kPriceFieldNumber;
const int CancelPurchaseRequest::kCurrencyTypeFieldNumber;
const int CancelPurchaseRequest::kBillNoFieldNumber;
const int CancelPurchaseRequest::kPayTimeFieldNumber;
const int CancelPurchaseRequest::kErrorCodeFieldNumber;
const int CancelPurchaseRequest::kErrorDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CancelPurchaseRequest::CancelPurchaseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CancelPurchaseRequest)
}
CancelPurchaseRequest::CancelPurchaseRequest(const CancelPurchaseRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_price()) {
    price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_);
  }
  currencytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currencytype()) {
    currencytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currencytype_);
  }
  billno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_billno()) {
    billno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.billno_);
  }
  errordescription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_errordescription()) {
    errordescription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errordescription_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&verifytype_, &from.verifytype_,
    reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&verifytype_) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:micromsg.CancelPurchaseRequest)
}

void CancelPurchaseRequest::SharedCtor() {
  _cached_size_ = 0;
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currencytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  billno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errordescription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(errorcode_));
}

CancelPurchaseRequest::~CancelPurchaseRequest() {
  // @@protoc_insertion_point(destructor:micromsg.CancelPurchaseRequest)
  SharedDtor();
}

void CancelPurchaseRequest::SharedDtor() {
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currencytype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  billno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errordescription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void CancelPurchaseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelPurchaseRequest::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CancelPurchaseRequest& CancelPurchaseRequest::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

CancelPurchaseRequest* CancelPurchaseRequest::New(::google::protobuf::Arena* arena) const {
  CancelPurchaseRequest* n = new CancelPurchaseRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CancelPurchaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CancelPurchaseRequest)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_productid()) {
      GOOGLE_DCHECK(!productid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*productid_.UnsafeRawStringPointer())->clear();
    }
    if (has_price()) {
      GOOGLE_DCHECK(!price_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*price_.UnsafeRawStringPointer())->clear();
    }
    if (has_currencytype()) {
      GOOGLE_DCHECK(!currencytype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*currencytype_.UnsafeRawStringPointer())->clear();
    }
    if (has_billno()) {
      GOOGLE_DCHECK(!billno_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*billno_.UnsafeRawStringPointer())->clear();
    }
    if (has_errordescription()) {
      GOOGLE_DCHECK(!errordescription_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*errordescription_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&verifytype_, 0, reinterpret_cast<char*>(&paytype_) -
      reinterpret_cast<char*>(&verifytype_) + sizeof(paytype_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&paytime_, 0, reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&paytime_) + sizeof(errorcode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CancelPurchaseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CancelPurchaseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ProductID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CancelPurchaseRequest.ProductID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 VerifyType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_verifytype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verifytype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 PayType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_paytype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paytype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Price = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->price().data(), this->price().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CancelPurchaseRequest.Price");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CurrencyType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currencytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currencytype().data(), this->currencytype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CancelPurchaseRequest.CurrencyType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BillNo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->billno().data(), this->billno().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CancelPurchaseRequest.BillNo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 PayTime = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_paytime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paytime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ErrorCode = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_errorcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ErrorDescription = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errordescription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errordescription().data(), this->errordescription().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CancelPurchaseRequest.ErrorDescription");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CancelPurchaseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CancelPurchaseRequest)
  return false;
#undef DO_
}

void CancelPurchaseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CancelPurchaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ProductID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CancelPurchaseRequest.ProductID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->productid(), output);
  }

  // required uint32 VerifyType = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->verifytype(), output);
  }

  // required uint32 PayType = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->paytype(), output);
  }

  // optional string Price = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CancelPurchaseRequest.Price");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->price(), output);
  }

  // optional string CurrencyType = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currencytype().data(), this->currencytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CancelPurchaseRequest.CurrencyType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->currencytype(), output);
  }

  // optional string BillNo = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->billno().data(), this->billno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CancelPurchaseRequest.BillNo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->billno(), output);
  }

  // required uint32 PayTime = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->paytime(), output);
  }

  // required int32 ErrorCode = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->errorcode(), output);
  }

  // optional string ErrorDescription = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errordescription().data(), this->errordescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CancelPurchaseRequest.ErrorDescription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->errordescription(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CancelPurchaseRequest)
}

::google::protobuf::uint8* CancelPurchaseRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CancelPurchaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ProductID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CancelPurchaseRequest.ProductID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->productid(), target);
  }

  // required uint32 VerifyType = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->verifytype(), target);
  }

  // required uint32 PayType = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->paytype(), target);
  }

  // optional string Price = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CancelPurchaseRequest.Price");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->price(), target);
  }

  // optional string CurrencyType = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currencytype().data(), this->currencytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CancelPurchaseRequest.CurrencyType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->currencytype(), target);
  }

  // optional string BillNo = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->billno().data(), this->billno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CancelPurchaseRequest.BillNo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->billno(), target);
  }

  // required uint32 PayTime = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->paytime(), target);
  }

  // required int32 ErrorCode = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->errorcode(), target);
  }

  // optional string ErrorDescription = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errordescription().data(), this->errordescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CancelPurchaseRequest.ErrorDescription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->errordescription(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CancelPurchaseRequest)
  return target;
}

size_t CancelPurchaseRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CancelPurchaseRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_verifytype()) {
    // required uint32 VerifyType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->verifytype());
  }

  if (has_paytype()) {
    // required uint32 PayType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->paytype());
  }

  if (has_paytime()) {
    // required uint32 PayTime = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->paytime());
  }

  if (has_errorcode()) {
    // required int32 ErrorCode = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errorcode());
  }

  return total_size;
}
size_t CancelPurchaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CancelPurchaseRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003e0) ^ 0x000003e0) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 VerifyType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->verifytype());

    // required uint32 PayType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->paytype());

    // required uint32 PayTime = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->paytime());

    // required int32 ErrorCode = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errorcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string ProductID = 2;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // optional string Price = 5;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->price());
    }

    // optional string CurrencyType = 6;
    if (has_currencytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currencytype());
    }

    // optional string BillNo = 7;
    if (has_billno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billno());
    }

    // optional string ErrorDescription = 10;
    if (has_errordescription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errordescription());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelPurchaseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CancelPurchaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelPurchaseRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CancelPurchaseRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CancelPurchaseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CancelPurchaseRequest)
    MergeFrom(*source);
  }
}

void CancelPurchaseRequest::MergeFrom(const CancelPurchaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CancelPurchaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_price();
      price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_currencytype();
      currencytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currencytype_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_billno();
      billno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.billno_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_errordescription();
      errordescription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errordescription_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000040u) {
      verifytype_ = from.verifytype_;
    }
    if (cached_has_bits & 0x00000080u) {
      paytype_ = from.paytype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      paytime_ = from.paytime_;
    }
    if (cached_has_bits & 0x00000200u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CancelPurchaseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CancelPurchaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelPurchaseRequest::CopyFrom(const CancelPurchaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CancelPurchaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelPurchaseRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003e0) != 0x000003e0) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void CancelPurchaseRequest::Swap(CancelPurchaseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CancelPurchaseRequest::InternalSwap(CancelPurchaseRequest* other) {
  productid_.Swap(&other->productid_);
  price_.Swap(&other->price_);
  currencytype_.Swap(&other->currencytype_);
  billno_.Swap(&other->billno_);
  errordescription_.Swap(&other->errordescription_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(verifytype_, other->verifytype_);
  std::swap(paytype_, other->paytype_);
  std::swap(paytime_, other->paytime_);
  std::swap(errorcode_, other->errorcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CancelPurchaseRequest::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CancelPurchaseRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool CancelPurchaseRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CancelPurchaseRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000020u;
}
void CancelPurchaseRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000020u;
}
void CancelPurchaseRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& CancelPurchaseRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.CancelPurchaseRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* CancelPurchaseRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CancelPurchaseRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* CancelPurchaseRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.CancelPurchaseRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void CancelPurchaseRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CancelPurchaseRequest.BaseRequest)
}

// optional string ProductID = 2;
bool CancelPurchaseRequest::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CancelPurchaseRequest::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
void CancelPurchaseRequest::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CancelPurchaseRequest::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
const ::std::string& CancelPurchaseRequest::productid() const {
  // @@protoc_insertion_point(field_get:micromsg.CancelPurchaseRequest.ProductID)
  return productid_.GetNoArena();
}
void CancelPurchaseRequest::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CancelPurchaseRequest.ProductID)
}
#if LANG_CXX11
void CancelPurchaseRequest::set_productid(::std::string&& value) {
  set_has_productid();
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CancelPurchaseRequest.ProductID)
}
#endif
void CancelPurchaseRequest::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CancelPurchaseRequest.ProductID)
}
void CancelPurchaseRequest::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CancelPurchaseRequest.ProductID)
}
::std::string* CancelPurchaseRequest::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:micromsg.CancelPurchaseRequest.ProductID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CancelPurchaseRequest::release_productid() {
  // @@protoc_insertion_point(field_release:micromsg.CancelPurchaseRequest.ProductID)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CancelPurchaseRequest::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CancelPurchaseRequest.ProductID)
}

// required uint32 VerifyType = 3;
bool CancelPurchaseRequest::has_verifytype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CancelPurchaseRequest::set_has_verifytype() {
  _has_bits_[0] |= 0x00000040u;
}
void CancelPurchaseRequest::clear_has_verifytype() {
  _has_bits_[0] &= ~0x00000040u;
}
void CancelPurchaseRequest::clear_verifytype() {
  verifytype_ = 0u;
  clear_has_verifytype();
}
::google::protobuf::uint32 CancelPurchaseRequest::verifytype() const {
  // @@protoc_insertion_point(field_get:micromsg.CancelPurchaseRequest.VerifyType)
  return verifytype_;
}
void CancelPurchaseRequest::set_verifytype(::google::protobuf::uint32 value) {
  set_has_verifytype();
  verifytype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CancelPurchaseRequest.VerifyType)
}

// required uint32 PayType = 4;
bool CancelPurchaseRequest::has_paytype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CancelPurchaseRequest::set_has_paytype() {
  _has_bits_[0] |= 0x00000080u;
}
void CancelPurchaseRequest::clear_has_paytype() {
  _has_bits_[0] &= ~0x00000080u;
}
void CancelPurchaseRequest::clear_paytype() {
  paytype_ = 0u;
  clear_has_paytype();
}
::google::protobuf::uint32 CancelPurchaseRequest::paytype() const {
  // @@protoc_insertion_point(field_get:micromsg.CancelPurchaseRequest.PayType)
  return paytype_;
}
void CancelPurchaseRequest::set_paytype(::google::protobuf::uint32 value) {
  set_has_paytype();
  paytype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CancelPurchaseRequest.PayType)
}

// optional string Price = 5;
bool CancelPurchaseRequest::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CancelPurchaseRequest::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
void CancelPurchaseRequest::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
void CancelPurchaseRequest::clear_price() {
  price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_price();
}
const ::std::string& CancelPurchaseRequest::price() const {
  // @@protoc_insertion_point(field_get:micromsg.CancelPurchaseRequest.Price)
  return price_.GetNoArena();
}
void CancelPurchaseRequest::set_price(const ::std::string& value) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CancelPurchaseRequest.Price)
}
#if LANG_CXX11
void CancelPurchaseRequest::set_price(::std::string&& value) {
  set_has_price();
  price_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CancelPurchaseRequest.Price)
}
#endif
void CancelPurchaseRequest::set_price(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CancelPurchaseRequest.Price)
}
void CancelPurchaseRequest::set_price(const char* value, size_t size) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CancelPurchaseRequest.Price)
}
::std::string* CancelPurchaseRequest::mutable_price() {
  set_has_price();
  // @@protoc_insertion_point(field_mutable:micromsg.CancelPurchaseRequest.Price)
  return price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CancelPurchaseRequest::release_price() {
  // @@protoc_insertion_point(field_release:micromsg.CancelPurchaseRequest.Price)
  clear_has_price();
  return price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CancelPurchaseRequest::set_allocated_price(::std::string* price) {
  if (price != NULL) {
    set_has_price();
  } else {
    clear_has_price();
  }
  price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CancelPurchaseRequest.Price)
}

// optional string CurrencyType = 6;
bool CancelPurchaseRequest::has_currencytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CancelPurchaseRequest::set_has_currencytype() {
  _has_bits_[0] |= 0x00000004u;
}
void CancelPurchaseRequest::clear_has_currencytype() {
  _has_bits_[0] &= ~0x00000004u;
}
void CancelPurchaseRequest::clear_currencytype() {
  currencytype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_currencytype();
}
const ::std::string& CancelPurchaseRequest::currencytype() const {
  // @@protoc_insertion_point(field_get:micromsg.CancelPurchaseRequest.CurrencyType)
  return currencytype_.GetNoArena();
}
void CancelPurchaseRequest::set_currencytype(const ::std::string& value) {
  set_has_currencytype();
  currencytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CancelPurchaseRequest.CurrencyType)
}
#if LANG_CXX11
void CancelPurchaseRequest::set_currencytype(::std::string&& value) {
  set_has_currencytype();
  currencytype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CancelPurchaseRequest.CurrencyType)
}
#endif
void CancelPurchaseRequest::set_currencytype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_currencytype();
  currencytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CancelPurchaseRequest.CurrencyType)
}
void CancelPurchaseRequest::set_currencytype(const char* value, size_t size) {
  set_has_currencytype();
  currencytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CancelPurchaseRequest.CurrencyType)
}
::std::string* CancelPurchaseRequest::mutable_currencytype() {
  set_has_currencytype();
  // @@protoc_insertion_point(field_mutable:micromsg.CancelPurchaseRequest.CurrencyType)
  return currencytype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CancelPurchaseRequest::release_currencytype() {
  // @@protoc_insertion_point(field_release:micromsg.CancelPurchaseRequest.CurrencyType)
  clear_has_currencytype();
  return currencytype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CancelPurchaseRequest::set_allocated_currencytype(::std::string* currencytype) {
  if (currencytype != NULL) {
    set_has_currencytype();
  } else {
    clear_has_currencytype();
  }
  currencytype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currencytype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CancelPurchaseRequest.CurrencyType)
}

// optional string BillNo = 7;
bool CancelPurchaseRequest::has_billno() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CancelPurchaseRequest::set_has_billno() {
  _has_bits_[0] |= 0x00000008u;
}
void CancelPurchaseRequest::clear_has_billno() {
  _has_bits_[0] &= ~0x00000008u;
}
void CancelPurchaseRequest::clear_billno() {
  billno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_billno();
}
const ::std::string& CancelPurchaseRequest::billno() const {
  // @@protoc_insertion_point(field_get:micromsg.CancelPurchaseRequest.BillNo)
  return billno_.GetNoArena();
}
void CancelPurchaseRequest::set_billno(const ::std::string& value) {
  set_has_billno();
  billno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CancelPurchaseRequest.BillNo)
}
#if LANG_CXX11
void CancelPurchaseRequest::set_billno(::std::string&& value) {
  set_has_billno();
  billno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CancelPurchaseRequest.BillNo)
}
#endif
void CancelPurchaseRequest::set_billno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_billno();
  billno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CancelPurchaseRequest.BillNo)
}
void CancelPurchaseRequest::set_billno(const char* value, size_t size) {
  set_has_billno();
  billno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CancelPurchaseRequest.BillNo)
}
::std::string* CancelPurchaseRequest::mutable_billno() {
  set_has_billno();
  // @@protoc_insertion_point(field_mutable:micromsg.CancelPurchaseRequest.BillNo)
  return billno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CancelPurchaseRequest::release_billno() {
  // @@protoc_insertion_point(field_release:micromsg.CancelPurchaseRequest.BillNo)
  clear_has_billno();
  return billno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CancelPurchaseRequest::set_allocated_billno(::std::string* billno) {
  if (billno != NULL) {
    set_has_billno();
  } else {
    clear_has_billno();
  }
  billno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), billno);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CancelPurchaseRequest.BillNo)
}

// required uint32 PayTime = 8;
bool CancelPurchaseRequest::has_paytime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CancelPurchaseRequest::set_has_paytime() {
  _has_bits_[0] |= 0x00000100u;
}
void CancelPurchaseRequest::clear_has_paytime() {
  _has_bits_[0] &= ~0x00000100u;
}
void CancelPurchaseRequest::clear_paytime() {
  paytime_ = 0u;
  clear_has_paytime();
}
::google::protobuf::uint32 CancelPurchaseRequest::paytime() const {
  // @@protoc_insertion_point(field_get:micromsg.CancelPurchaseRequest.PayTime)
  return paytime_;
}
void CancelPurchaseRequest::set_paytime(::google::protobuf::uint32 value) {
  set_has_paytime();
  paytime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CancelPurchaseRequest.PayTime)
}

// required int32 ErrorCode = 9;
bool CancelPurchaseRequest::has_errorcode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CancelPurchaseRequest::set_has_errorcode() {
  _has_bits_[0] |= 0x00000200u;
}
void CancelPurchaseRequest::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000200u;
}
void CancelPurchaseRequest::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
::google::protobuf::int32 CancelPurchaseRequest::errorcode() const {
  // @@protoc_insertion_point(field_get:micromsg.CancelPurchaseRequest.ErrorCode)
  return errorcode_;
}
void CancelPurchaseRequest::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CancelPurchaseRequest.ErrorCode)
}

// optional string ErrorDescription = 10;
bool CancelPurchaseRequest::has_errordescription() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CancelPurchaseRequest::set_has_errordescription() {
  _has_bits_[0] |= 0x00000010u;
}
void CancelPurchaseRequest::clear_has_errordescription() {
  _has_bits_[0] &= ~0x00000010u;
}
void CancelPurchaseRequest::clear_errordescription() {
  errordescription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errordescription();
}
const ::std::string& CancelPurchaseRequest::errordescription() const {
  // @@protoc_insertion_point(field_get:micromsg.CancelPurchaseRequest.ErrorDescription)
  return errordescription_.GetNoArena();
}
void CancelPurchaseRequest::set_errordescription(const ::std::string& value) {
  set_has_errordescription();
  errordescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CancelPurchaseRequest.ErrorDescription)
}
#if LANG_CXX11
void CancelPurchaseRequest::set_errordescription(::std::string&& value) {
  set_has_errordescription();
  errordescription_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CancelPurchaseRequest.ErrorDescription)
}
#endif
void CancelPurchaseRequest::set_errordescription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_errordescription();
  errordescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CancelPurchaseRequest.ErrorDescription)
}
void CancelPurchaseRequest::set_errordescription(const char* value, size_t size) {
  set_has_errordescription();
  errordescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CancelPurchaseRequest.ErrorDescription)
}
::std::string* CancelPurchaseRequest::mutable_errordescription() {
  set_has_errordescription();
  // @@protoc_insertion_point(field_mutable:micromsg.CancelPurchaseRequest.ErrorDescription)
  return errordescription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CancelPurchaseRequest::release_errordescription() {
  // @@protoc_insertion_point(field_release:micromsg.CancelPurchaseRequest.ErrorDescription)
  clear_has_errordescription();
  return errordescription_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CancelPurchaseRequest::set_allocated_errordescription(::std::string* errordescription) {
  if (errordescription != NULL) {
    set_has_errordescription();
  } else {
    clear_has_errordescription();
  }
  errordescription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errordescription);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CancelPurchaseRequest.ErrorDescription)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CancelPurchaseResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CancelPurchaseResponse::CancelPurchaseResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CancelPurchaseResponse)
}
CancelPurchaseResponse::CancelPurchaseResponse(const CancelPurchaseResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.CancelPurchaseResponse)
}

void CancelPurchaseResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

CancelPurchaseResponse::~CancelPurchaseResponse() {
  // @@protoc_insertion_point(destructor:micromsg.CancelPurchaseResponse)
  SharedDtor();
}

void CancelPurchaseResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void CancelPurchaseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelPurchaseResponse::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CancelPurchaseResponse& CancelPurchaseResponse::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

CancelPurchaseResponse* CancelPurchaseResponse::New(::google::protobuf::Arena* arena) const {
  CancelPurchaseResponse* n = new CancelPurchaseResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CancelPurchaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CancelPurchaseResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CancelPurchaseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CancelPurchaseResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CancelPurchaseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CancelPurchaseResponse)
  return false;
#undef DO_
}

void CancelPurchaseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CancelPurchaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CancelPurchaseResponse)
}

::google::protobuf::uint8* CancelPurchaseResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CancelPurchaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CancelPurchaseResponse)
  return target;
}

size_t CancelPurchaseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CancelPurchaseResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelPurchaseResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CancelPurchaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelPurchaseResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CancelPurchaseResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CancelPurchaseResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CancelPurchaseResponse)
    MergeFrom(*source);
  }
}

void CancelPurchaseResponse::MergeFrom(const CancelPurchaseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CancelPurchaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void CancelPurchaseResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CancelPurchaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelPurchaseResponse::CopyFrom(const CancelPurchaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CancelPurchaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelPurchaseResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void CancelPurchaseResponse::Swap(CancelPurchaseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CancelPurchaseResponse::InternalSwap(CancelPurchaseResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CancelPurchaseResponse::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CancelPurchaseResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool CancelPurchaseResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CancelPurchaseResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void CancelPurchaseResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void CancelPurchaseResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& CancelPurchaseResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.CancelPurchaseResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* CancelPurchaseResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CancelPurchaseResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* CancelPurchaseResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.CancelPurchaseResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void CancelPurchaseResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CancelPurchaseResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmotionMember::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmotionMember::EmotionMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EmotionMember)
}
EmotionMember::EmotionMember(const EmotionMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.EmotionMember)
}

void EmotionMember::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EmotionMember::~EmotionMember() {
  // @@protoc_insertion_point(destructor:micromsg.EmotionMember)
  SharedDtor();
}

void EmotionMember::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EmotionMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmotionMember::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmotionMember& EmotionMember::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmotionMember* EmotionMember::New(::google::protobuf::Arena* arena) const {
  EmotionMember* n = new EmotionMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmotionMember::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EmotionMember)
  if (has_username()) {
    GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*username_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmotionMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EmotionMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionMember.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EmotionMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EmotionMember)
  return false;
#undef DO_
}

void EmotionMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EmotionMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionMember.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EmotionMember)
}

::google::protobuf::uint8* EmotionMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EmotionMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionMember.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EmotionMember)
  return target;
}

size_t EmotionMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EmotionMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string UserName = 1;
  if (has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmotionMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EmotionMember)
  GOOGLE_DCHECK_NE(&from, this);
  const EmotionMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmotionMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EmotionMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EmotionMember)
    MergeFrom(*source);
  }
}

void EmotionMember::MergeFrom(const EmotionMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EmotionMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_username()) {
    set_has_username();
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void EmotionMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EmotionMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmotionMember::CopyFrom(const EmotionMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EmotionMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmotionMember::IsInitialized() const {
  return true;
}

void EmotionMember::Swap(EmotionMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmotionMember::InternalSwap(EmotionMember* other) {
  username_.Swap(&other->username_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmotionMember::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmotionMember

// optional string UserName = 1;
bool EmotionMember::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmotionMember::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void EmotionMember::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmotionMember::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& EmotionMember::username() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionMember.UserName)
  return username_.GetNoArena();
}
void EmotionMember::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionMember.UserName)
}
#if LANG_CXX11
void EmotionMember::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionMember.UserName)
}
#endif
void EmotionMember::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionMember.UserName)
}
void EmotionMember::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionMember.UserName)
}
::std::string* EmotionMember::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionMember.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionMember::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionMember.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionMember::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionMember.UserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemberStatus::kUserNameFieldNumber;
const int MemberStatus::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemberStatus::MemberStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.MemberStatus)
}
MemberStatus::MemberStatus(const MemberStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:micromsg.MemberStatus)
}

void MemberStatus::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

MemberStatus::~MemberStatus() {
  // @@protoc_insertion_point(destructor:micromsg.MemberStatus)
  SharedDtor();
}

void MemberStatus::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MemberStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberStatus::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MemberStatus& MemberStatus::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemberStatus* MemberStatus::New(::google::protobuf::Arena* arena) const {
  MemberStatus* n = new MemberStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemberStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.MemberStatus)
  if (has_username()) {
    GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*username_.UnsafeRawStringPointer())->clear();
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MemberStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.MemberStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.MemberStatus.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.MemberStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.MemberStatus)
  return false;
#undef DO_
}

void MemberStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.MemberStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.MemberStatus.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required int32 Status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.MemberStatus)
}

::google::protobuf::uint8* MemberStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.MemberStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.MemberStatus.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required int32 Status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.MemberStatus)
  return target;
}

size_t MemberStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.MemberStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 Status = 2;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }
  // optional string UserName = 1;
  if (has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.MemberStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemberStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.MemberStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.MemberStatus)
    MergeFrom(*source);
  }
}

void MemberStatus::MergeFrom(const MemberStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.MemberStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemberStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.MemberStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberStatus::CopyFrom(const MemberStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.MemberStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void MemberStatus::Swap(MemberStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemberStatus::InternalSwap(MemberStatus* other) {
  username_.Swap(&other->username_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemberStatus::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemberStatus

// optional string UserName = 1;
bool MemberStatus::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MemberStatus::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void MemberStatus::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void MemberStatus::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& MemberStatus::username() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberStatus.UserName)
  return username_.GetNoArena();
}
void MemberStatus::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.MemberStatus.UserName)
}
#if LANG_CXX11
void MemberStatus::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.MemberStatus.UserName)
}
#endif
void MemberStatus::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.MemberStatus.UserName)
}
void MemberStatus::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.MemberStatus.UserName)
}
::std::string* MemberStatus::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.MemberStatus.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MemberStatus::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.MemberStatus.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MemberStatus::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberStatus.UserName)
}

// required int32 Status = 2;
bool MemberStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MemberStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void MemberStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void MemberStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
::google::protobuf::int32 MemberStatus::status() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberStatus.Status)
  return status_;
}
void MemberStatus::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MemberStatus.Status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyEmotionPresentationRequest::kBaseRequestFieldNumber;
const int VerifyEmotionPresentationRequest::kProductIDFieldNumber;
const int VerifyEmotionPresentationRequest::kMemberCountFieldNumber;
const int VerifyEmotionPresentationRequest::kMemberListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyEmotionPresentationRequest::VerifyEmotionPresentationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VerifyEmotionPresentationRequest)
}
VerifyEmotionPresentationRequest::VerifyEmotionPresentationRequest(const VerifyEmotionPresentationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      memberlist_(from.memberlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  membercount_ = from.membercount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.VerifyEmotionPresentationRequest)
}

void VerifyEmotionPresentationRequest::SharedCtor() {
  _cached_size_ = 0;
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&membercount_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(membercount_));
}

VerifyEmotionPresentationRequest::~VerifyEmotionPresentationRequest() {
  // @@protoc_insertion_point(destructor:micromsg.VerifyEmotionPresentationRequest)
  SharedDtor();
}

void VerifyEmotionPresentationRequest::SharedDtor() {
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void VerifyEmotionPresentationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyEmotionPresentationRequest::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VerifyEmotionPresentationRequest& VerifyEmotionPresentationRequest::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

VerifyEmotionPresentationRequest* VerifyEmotionPresentationRequest::New(::google::protobuf::Arena* arena) const {
  VerifyEmotionPresentationRequest* n = new VerifyEmotionPresentationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyEmotionPresentationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VerifyEmotionPresentationRequest)
  memberlist_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_productid()) {
      GOOGLE_DCHECK(!productid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*productid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  membercount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VerifyEmotionPresentationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VerifyEmotionPresentationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ProductID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VerifyEmotionPresentationRequest.ProductID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MemberCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_membercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.EmotionMember MemberList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VerifyEmotionPresentationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VerifyEmotionPresentationRequest)
  return false;
#undef DO_
}

void VerifyEmotionPresentationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VerifyEmotionPresentationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ProductID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyEmotionPresentationRequest.ProductID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->productid(), output);
  }

  // required uint32 MemberCount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->membercount(), output);
  }

  // repeated .micromsg.EmotionMember MemberList = 4;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->memberlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VerifyEmotionPresentationRequest)
}

::google::protobuf::uint8* VerifyEmotionPresentationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VerifyEmotionPresentationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ProductID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyEmotionPresentationRequest.ProductID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->productid(), target);
  }

  // required uint32 MemberCount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->membercount(), target);
  }

  // repeated .micromsg.EmotionMember MemberList = 4;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->memberlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VerifyEmotionPresentationRequest)
  return target;
}

size_t VerifyEmotionPresentationRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VerifyEmotionPresentationRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_membercount()) {
    // required uint32 MemberCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());
  }

  return total_size;
}
size_t VerifyEmotionPresentationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VerifyEmotionPresentationRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 MemberCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.EmotionMember MemberList = 4;
  {
    unsigned int count = this->memberlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberlist(i));
    }
  }

  // optional string ProductID = 2;
  if (has_productid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyEmotionPresentationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VerifyEmotionPresentationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyEmotionPresentationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyEmotionPresentationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VerifyEmotionPresentationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VerifyEmotionPresentationRequest)
    MergeFrom(*source);
  }
}

void VerifyEmotionPresentationRequest::MergeFrom(const VerifyEmotionPresentationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VerifyEmotionPresentationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memberlist_.MergeFrom(from.memberlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      membercount_ = from.membercount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VerifyEmotionPresentationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VerifyEmotionPresentationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyEmotionPresentationRequest::CopyFrom(const VerifyEmotionPresentationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VerifyEmotionPresentationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyEmotionPresentationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void VerifyEmotionPresentationRequest::Swap(VerifyEmotionPresentationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyEmotionPresentationRequest::InternalSwap(VerifyEmotionPresentationRequest* other) {
  memberlist_.InternalSwap(&other->memberlist_);
  productid_.Swap(&other->productid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(membercount_, other->membercount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerifyEmotionPresentationRequest::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyEmotionPresentationRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool VerifyEmotionPresentationRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VerifyEmotionPresentationRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void VerifyEmotionPresentationRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void VerifyEmotionPresentationRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VerifyEmotionPresentationRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyEmotionPresentationRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VerifyEmotionPresentationRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyEmotionPresentationRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VerifyEmotionPresentationRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyEmotionPresentationRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VerifyEmotionPresentationRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyEmotionPresentationRequest.BaseRequest)
}

// optional string ProductID = 2;
bool VerifyEmotionPresentationRequest::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VerifyEmotionPresentationRequest::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
void VerifyEmotionPresentationRequest::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
void VerifyEmotionPresentationRequest::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
const ::std::string& VerifyEmotionPresentationRequest::productid() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyEmotionPresentationRequest.ProductID)
  return productid_.GetNoArena();
}
void VerifyEmotionPresentationRequest::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyEmotionPresentationRequest.ProductID)
}
#if LANG_CXX11
void VerifyEmotionPresentationRequest::set_productid(::std::string&& value) {
  set_has_productid();
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyEmotionPresentationRequest.ProductID)
}
#endif
void VerifyEmotionPresentationRequest::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyEmotionPresentationRequest.ProductID)
}
void VerifyEmotionPresentationRequest::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyEmotionPresentationRequest.ProductID)
}
::std::string* VerifyEmotionPresentationRequest::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyEmotionPresentationRequest.ProductID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyEmotionPresentationRequest::release_productid() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyEmotionPresentationRequest.ProductID)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyEmotionPresentationRequest::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyEmotionPresentationRequest.ProductID)
}

// required uint32 MemberCount = 3;
bool VerifyEmotionPresentationRequest::has_membercount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VerifyEmotionPresentationRequest::set_has_membercount() {
  _has_bits_[0] |= 0x00000004u;
}
void VerifyEmotionPresentationRequest::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000004u;
}
void VerifyEmotionPresentationRequest::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
::google::protobuf::uint32 VerifyEmotionPresentationRequest::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyEmotionPresentationRequest.MemberCount)
  return membercount_;
}
void VerifyEmotionPresentationRequest::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VerifyEmotionPresentationRequest.MemberCount)
}

// repeated .micromsg.EmotionMember MemberList = 4;
int VerifyEmotionPresentationRequest::memberlist_size() const {
  return memberlist_.size();
}
void VerifyEmotionPresentationRequest::clear_memberlist() {
  memberlist_.Clear();
}
const ::micromsg::EmotionMember& VerifyEmotionPresentationRequest::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyEmotionPresentationRequest.MemberList)
  return memberlist_.Get(index);
}
::micromsg::EmotionMember* VerifyEmotionPresentationRequest::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyEmotionPresentationRequest.MemberList)
  return memberlist_.Mutable(index);
}
::micromsg::EmotionMember* VerifyEmotionPresentationRequest::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.VerifyEmotionPresentationRequest.MemberList)
  return memberlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::EmotionMember >*
VerifyEmotionPresentationRequest::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VerifyEmotionPresentationRequest.MemberList)
  return &memberlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::EmotionMember >&
VerifyEmotionPresentationRequest::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.VerifyEmotionPresentationRequest.MemberList)
  return memberlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyEmotionPresentationResponse::kBaseResponseFieldNumber;
const int VerifyEmotionPresentationResponse::kMemberCountFieldNumber;
const int VerifyEmotionPresentationResponse::kStatusListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyEmotionPresentationResponse::VerifyEmotionPresentationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VerifyEmotionPresentationResponse)
}
VerifyEmotionPresentationResponse::VerifyEmotionPresentationResponse(const VerifyEmotionPresentationResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      statuslist_(from.statuslist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  membercount_ = from.membercount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.VerifyEmotionPresentationResponse)
}

void VerifyEmotionPresentationResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&membercount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(membercount_));
}

VerifyEmotionPresentationResponse::~VerifyEmotionPresentationResponse() {
  // @@protoc_insertion_point(destructor:micromsg.VerifyEmotionPresentationResponse)
  SharedDtor();
}

void VerifyEmotionPresentationResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void VerifyEmotionPresentationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyEmotionPresentationResponse::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VerifyEmotionPresentationResponse& VerifyEmotionPresentationResponse::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

VerifyEmotionPresentationResponse* VerifyEmotionPresentationResponse::New(::google::protobuf::Arena* arena) const {
  VerifyEmotionPresentationResponse* n = new VerifyEmotionPresentationResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyEmotionPresentationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VerifyEmotionPresentationResponse)
  statuslist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  membercount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VerifyEmotionPresentationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VerifyEmotionPresentationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MemberCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_membercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.MemberStatus StatusList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statuslist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VerifyEmotionPresentationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VerifyEmotionPresentationResponse)
  return false;
#undef DO_
}

void VerifyEmotionPresentationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VerifyEmotionPresentationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 MemberCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->membercount(), output);
  }

  // repeated .micromsg.MemberStatus StatusList = 3;
  for (unsigned int i = 0, n = this->statuslist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->statuslist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VerifyEmotionPresentationResponse)
}

::google::protobuf::uint8* VerifyEmotionPresentationResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VerifyEmotionPresentationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 MemberCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->membercount(), target);
  }

  // repeated .micromsg.MemberStatus StatusList = 3;
  for (unsigned int i = 0, n = this->statuslist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->statuslist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VerifyEmotionPresentationResponse)
  return target;
}

size_t VerifyEmotionPresentationResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VerifyEmotionPresentationResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_membercount()) {
    // required uint32 MemberCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());
  }

  return total_size;
}
size_t VerifyEmotionPresentationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VerifyEmotionPresentationResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 MemberCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.MemberStatus StatusList = 3;
  {
    unsigned int count = this->statuslist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statuslist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyEmotionPresentationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VerifyEmotionPresentationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyEmotionPresentationResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyEmotionPresentationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VerifyEmotionPresentationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VerifyEmotionPresentationResponse)
    MergeFrom(*source);
  }
}

void VerifyEmotionPresentationResponse::MergeFrom(const VerifyEmotionPresentationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VerifyEmotionPresentationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  statuslist_.MergeFrom(from.statuslist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      membercount_ = from.membercount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VerifyEmotionPresentationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VerifyEmotionPresentationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyEmotionPresentationResponse::CopyFrom(const VerifyEmotionPresentationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VerifyEmotionPresentationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyEmotionPresentationResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->statuslist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void VerifyEmotionPresentationResponse::Swap(VerifyEmotionPresentationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyEmotionPresentationResponse::InternalSwap(VerifyEmotionPresentationResponse* other) {
  statuslist_.InternalSwap(&other->statuslist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(membercount_, other->membercount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerifyEmotionPresentationResponse::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyEmotionPresentationResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool VerifyEmotionPresentationResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VerifyEmotionPresentationResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void VerifyEmotionPresentationResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void VerifyEmotionPresentationResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VerifyEmotionPresentationResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyEmotionPresentationResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VerifyEmotionPresentationResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyEmotionPresentationResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VerifyEmotionPresentationResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyEmotionPresentationResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VerifyEmotionPresentationResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyEmotionPresentationResponse.BaseResponse)
}

// required uint32 MemberCount = 2;
bool VerifyEmotionPresentationResponse::has_membercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VerifyEmotionPresentationResponse::set_has_membercount() {
  _has_bits_[0] |= 0x00000002u;
}
void VerifyEmotionPresentationResponse::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000002u;
}
void VerifyEmotionPresentationResponse::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
::google::protobuf::uint32 VerifyEmotionPresentationResponse::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyEmotionPresentationResponse.MemberCount)
  return membercount_;
}
void VerifyEmotionPresentationResponse::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VerifyEmotionPresentationResponse.MemberCount)
}

// repeated .micromsg.MemberStatus StatusList = 3;
int VerifyEmotionPresentationResponse::statuslist_size() const {
  return statuslist_.size();
}
void VerifyEmotionPresentationResponse::clear_statuslist() {
  statuslist_.Clear();
}
const ::micromsg::MemberStatus& VerifyEmotionPresentationResponse::statuslist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyEmotionPresentationResponse.StatusList)
  return statuslist_.Get(index);
}
::micromsg::MemberStatus* VerifyEmotionPresentationResponse::mutable_statuslist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyEmotionPresentationResponse.StatusList)
  return statuslist_.Mutable(index);
}
::micromsg::MemberStatus* VerifyEmotionPresentationResponse::add_statuslist() {
  // @@protoc_insertion_point(field_add:micromsg.VerifyEmotionPresentationResponse.StatusList)
  return statuslist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::MemberStatus >*
VerifyEmotionPresentationResponse::mutable_statuslist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VerifyEmotionPresentationResponse.StatusList)
  return &statuslist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberStatus >&
VerifyEmotionPresentationResponse::statuslist() const {
  // @@protoc_insertion_point(field_list:micromsg.VerifyEmotionPresentationResponse.StatusList)
  return statuslist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LangDesc::kLangFieldNumber;
const int LangDesc::kDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LangDesc::LangDesc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.LangDesc)
}
LangDesc::LangDesc(const LangDesc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lang()) {
    lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.LangDesc)
}

void LangDesc::SharedCtor() {
  _cached_size_ = 0;
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LangDesc::~LangDesc() {
  // @@protoc_insertion_point(destructor:micromsg.LangDesc)
  SharedDtor();
}

void LangDesc::SharedDtor() {
  lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LangDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LangDesc::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LangDesc& LangDesc::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

LangDesc* LangDesc::New(::google::protobuf::Arena* arena) const {
  LangDesc* n = new LangDesc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LangDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.LangDesc)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_lang()) {
      GOOGLE_DCHECK(!lang_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*lang_.UnsafeRawStringPointer())->clear();
    }
    if (has_desc()) {
      GOOGLE_DCHECK(!desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*desc_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LangDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.LangDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Lang = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.LangDesc.Lang");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.LangDesc.Desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.LangDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.LangDesc)
  return false;
#undef DO_
}

void LangDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.LangDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Lang = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LangDesc.Lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lang(), output);
  }

  // optional string Desc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LangDesc.Desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.LangDesc)
}

::google::protobuf::uint8* LangDesc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.LangDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Lang = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LangDesc.Lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lang(), target);
  }

  // optional string Desc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LangDesc.Desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.LangDesc)
  return target;
}

size_t LangDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.LangDesc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string Lang = 1;
    if (has_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lang());
    }

    // optional string Desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LangDesc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.LangDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const LangDesc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LangDesc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.LangDesc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.LangDesc)
    MergeFrom(*source);
  }
}

void LangDesc::MergeFrom(const LangDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.LangDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_lang();
      lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
  }
}

void LangDesc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.LangDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LangDesc::CopyFrom(const LangDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.LangDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LangDesc::IsInitialized() const {
  return true;
}

void LangDesc::Swap(LangDesc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LangDesc::InternalSwap(LangDesc* other) {
  lang_.Swap(&other->lang_);
  desc_.Swap(&other->desc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LangDesc::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LangDesc

// optional string Lang = 1;
bool LangDesc::has_lang() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LangDesc::set_has_lang() {
  _has_bits_[0] |= 0x00000001u;
}
void LangDesc::clear_has_lang() {
  _has_bits_[0] &= ~0x00000001u;
}
void LangDesc::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lang();
}
const ::std::string& LangDesc::lang() const {
  // @@protoc_insertion_point(field_get:micromsg.LangDesc.Lang)
  return lang_.GetNoArena();
}
void LangDesc::set_lang(const ::std::string& value) {
  set_has_lang();
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.LangDesc.Lang)
}
#if LANG_CXX11
void LangDesc::set_lang(::std::string&& value) {
  set_has_lang();
  lang_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.LangDesc.Lang)
}
#endif
void LangDesc::set_lang(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lang();
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.LangDesc.Lang)
}
void LangDesc::set_lang(const char* value, size_t size) {
  set_has_lang();
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.LangDesc.Lang)
}
::std::string* LangDesc::mutable_lang() {
  set_has_lang();
  // @@protoc_insertion_point(field_mutable:micromsg.LangDesc.Lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LangDesc::release_lang() {
  // @@protoc_insertion_point(field_release:micromsg.LangDesc.Lang)
  clear_has_lang();
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LangDesc::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    set_has_lang();
  } else {
    clear_has_lang();
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:micromsg.LangDesc.Lang)
}

// optional string Desc = 2;
bool LangDesc::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LangDesc::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
void LangDesc::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
void LangDesc::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
const ::std::string& LangDesc::desc() const {
  // @@protoc_insertion_point(field_get:micromsg.LangDesc.Desc)
  return desc_.GetNoArena();
}
void LangDesc::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.LangDesc.Desc)
}
#if LANG_CXX11
void LangDesc::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.LangDesc.Desc)
}
#endif
void LangDesc::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.LangDesc.Desc)
}
void LangDesc::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.LangDesc.Desc)
}
::std::string* LangDesc::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:micromsg.LangDesc.Desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LangDesc::release_desc() {
  // @@protoc_insertion_point(field_release:micromsg.LangDesc.Desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LangDesc::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:micromsg.LangDesc.Desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmotionDesc::kMd5FieldNumber;
const int EmotionDesc::kCountFieldNumber;
const int EmotionDesc::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmotionDesc::EmotionDesc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EmotionDesc)
}
EmotionDesc::EmotionDesc(const EmotionDesc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_md5()) {
    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.EmotionDesc)
}

void EmotionDesc::SharedCtor() {
  _cached_size_ = 0;
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
}

EmotionDesc::~EmotionDesc() {
  // @@protoc_insertion_point(destructor:micromsg.EmotionDesc)
  SharedDtor();
}

void EmotionDesc::SharedDtor() {
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EmotionDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmotionDesc::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmotionDesc& EmotionDesc::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmotionDesc* EmotionDesc::New(::google::protobuf::Arena* arena) const {
  EmotionDesc* n = new EmotionDesc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmotionDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EmotionDesc)
  list_.Clear();
  if (has_md5()) {
    GOOGLE_DCHECK(!md5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*md5_.UnsafeRawStringPointer())->clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmotionDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EmotionDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Md5 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionDesc.Md5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.LangDesc List = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EmotionDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EmotionDesc)
  return false;
#undef DO_
}

void EmotionDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EmotionDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Md5 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDesc.Md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->md5(), output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .micromsg.LangDesc List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EmotionDesc)
}

::google::protobuf::uint8* EmotionDesc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EmotionDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Md5 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDesc.Md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->md5(), target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.LangDesc List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EmotionDesc)
  return target;
}

size_t EmotionDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EmotionDesc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Count = 2;
  if (has_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }
  // repeated .micromsg.LangDesc List = 3;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  // optional string Md5 = 1;
  if (has_md5()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->md5());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmotionDesc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EmotionDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const EmotionDesc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmotionDesc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EmotionDesc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EmotionDesc)
    MergeFrom(*source);
  }
}

void EmotionDesc::MergeFrom(const EmotionDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EmotionDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_md5();
      md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EmotionDesc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EmotionDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmotionDesc::CopyFrom(const EmotionDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EmotionDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmotionDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void EmotionDesc::Swap(EmotionDesc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmotionDesc::InternalSwap(EmotionDesc* other) {
  list_.InternalSwap(&other->list_);
  md5_.Swap(&other->md5_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmotionDesc::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmotionDesc

// optional string Md5 = 1;
bool EmotionDesc::has_md5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmotionDesc::set_has_md5() {
  _has_bits_[0] |= 0x00000001u;
}
void EmotionDesc::clear_has_md5() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmotionDesc::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
const ::std::string& EmotionDesc::md5() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDesc.Md5)
  return md5_.GetNoArena();
}
void EmotionDesc::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionDesc.Md5)
}
#if LANG_CXX11
void EmotionDesc::set_md5(::std::string&& value) {
  set_has_md5();
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionDesc.Md5)
}
#endif
void EmotionDesc::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionDesc.Md5)
}
void EmotionDesc::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionDesc.Md5)
}
::std::string* EmotionDesc::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionDesc.Md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionDesc::release_md5() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionDesc.Md5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionDesc::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionDesc.Md5)
}

// required uint32 Count = 2;
bool EmotionDesc::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmotionDesc::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void EmotionDesc::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmotionDesc::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 EmotionDesc::count() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDesc.Count)
  return count_;
}
void EmotionDesc::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmotionDesc.Count)
}

// repeated .micromsg.LangDesc List = 3;
int EmotionDesc::list_size() const {
  return list_.size();
}
void EmotionDesc::clear_list() {
  list_.Clear();
}
const ::micromsg::LangDesc& EmotionDesc::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDesc.List)
  return list_.Get(index);
}
::micromsg::LangDesc* EmotionDesc::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionDesc.List)
  return list_.Mutable(index);
}
::micromsg::LangDesc* EmotionDesc::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.EmotionDesc.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::LangDesc >*
EmotionDesc::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.EmotionDesc.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::LangDesc >&
EmotionDesc::list() const {
  // @@protoc_insertion_point(field_list:micromsg.EmotionDesc.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetEmotionDescRequest::kBaseRequestFieldNumber;
const int GetEmotionDescRequest::kProductIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEmotionDescRequest::GetEmotionDescRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetEmotionDescRequest)
}
GetEmotionDescRequest::GetEmotionDescRequest(const GetEmotionDescRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetEmotionDescRequest)
}

void GetEmotionDescRequest::SharedCtor() {
  _cached_size_ = 0;
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

GetEmotionDescRequest::~GetEmotionDescRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetEmotionDescRequest)
  SharedDtor();
}

void GetEmotionDescRequest::SharedDtor() {
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetEmotionDescRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEmotionDescRequest::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetEmotionDescRequest& GetEmotionDescRequest::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetEmotionDescRequest* GetEmotionDescRequest::New(::google::protobuf::Arena* arena) const {
  GetEmotionDescRequest* n = new GetEmotionDescRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetEmotionDescRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetEmotionDescRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_productid()) {
      GOOGLE_DCHECK(!productid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*productid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetEmotionDescRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetEmotionDescRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ProductID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetEmotionDescRequest.ProductID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetEmotionDescRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetEmotionDescRequest)
  return false;
#undef DO_
}

void GetEmotionDescRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetEmotionDescRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ProductID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetEmotionDescRequest.ProductID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->productid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetEmotionDescRequest)
}

::google::protobuf::uint8* GetEmotionDescRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetEmotionDescRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ProductID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetEmotionDescRequest.ProductID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->productid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetEmotionDescRequest)
  return target;
}

size_t GetEmotionDescRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetEmotionDescRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string ProductID = 2;
  if (has_productid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEmotionDescRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetEmotionDescRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEmotionDescRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetEmotionDescRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetEmotionDescRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetEmotionDescRequest)
    MergeFrom(*source);
  }
}

void GetEmotionDescRequest::MergeFrom(const GetEmotionDescRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetEmotionDescRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void GetEmotionDescRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetEmotionDescRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEmotionDescRequest::CopyFrom(const GetEmotionDescRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetEmotionDescRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEmotionDescRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetEmotionDescRequest::Swap(GetEmotionDescRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEmotionDescRequest::InternalSwap(GetEmotionDescRequest* other) {
  productid_.Swap(&other->productid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetEmotionDescRequest::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetEmotionDescRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetEmotionDescRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetEmotionDescRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GetEmotionDescRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetEmotionDescRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetEmotionDescRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionDescRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetEmotionDescRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionDescRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetEmotionDescRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetEmotionDescRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetEmotionDescRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetEmotionDescRequest.BaseRequest)
}

// optional string ProductID = 2;
bool GetEmotionDescRequest::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetEmotionDescRequest::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
void GetEmotionDescRequest::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetEmotionDescRequest::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
const ::std::string& GetEmotionDescRequest::productid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionDescRequest.ProductID)
  return productid_.GetNoArena();
}
void GetEmotionDescRequest::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetEmotionDescRequest.ProductID)
}
#if LANG_CXX11
void GetEmotionDescRequest::set_productid(::std::string&& value) {
  set_has_productid();
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetEmotionDescRequest.ProductID)
}
#endif
void GetEmotionDescRequest::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetEmotionDescRequest.ProductID)
}
void GetEmotionDescRequest::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetEmotionDescRequest.ProductID)
}
::std::string* GetEmotionDescRequest::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionDescRequest.ProductID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetEmotionDescRequest::release_productid() {
  // @@protoc_insertion_point(field_release:micromsg.GetEmotionDescRequest.ProductID)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetEmotionDescRequest::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetEmotionDescRequest.ProductID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetEmotionDescResponse::kBaseResponseFieldNumber;
const int GetEmotionDescResponse::kCountFieldNumber;
const int GetEmotionDescResponse::kListFieldNumber;
const int GetEmotionDescResponse::kClickFlagFieldNumber;
const int GetEmotionDescResponse::kButtonDescFieldNumber;
const int GetEmotionDescResponse::kDownLoadFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEmotionDescResponse::GetEmotionDescResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetEmotionDescResponse)
}
GetEmotionDescResponse::GetEmotionDescResponse(const GetEmotionDescResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buttondesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buttondesc()) {
    buttondesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buttondesc_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&count_, &from.count_,
    reinterpret_cast<char*>(&downloadflag_) -
    reinterpret_cast<char*>(&count_) + sizeof(downloadflag_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetEmotionDescResponse)
}

void GetEmotionDescResponse::SharedCtor() {
  _cached_size_ = 0;
  buttondesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&downloadflag_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(downloadflag_));
}

GetEmotionDescResponse::~GetEmotionDescResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetEmotionDescResponse)
  SharedDtor();
}

void GetEmotionDescResponse::SharedDtor() {
  buttondesc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetEmotionDescResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEmotionDescResponse::descriptor() {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetEmotionDescResponse& GetEmotionDescResponse::default_instance() {
  protobuf_mmemotion_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetEmotionDescResponse* GetEmotionDescResponse::New(::google::protobuf::Arena* arena) const {
  GetEmotionDescResponse* n = new GetEmotionDescResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetEmotionDescResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetEmotionDescResponse)
  list_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_buttondesc()) {
      GOOGLE_DCHECK(!buttondesc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*buttondesc_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&count_, 0, reinterpret_cast<char*>(&downloadflag_) -
      reinterpret_cast<char*>(&count_) + sizeof(downloadflag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetEmotionDescResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetEmotionDescResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.EmotionDesc List = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ClickFlag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_clickflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clickflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ButtonDesc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buttondesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buttondesc().data(), this->buttondesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetEmotionDescResponse.ButtonDesc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 DownLoadFlag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_downloadflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &downloadflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetEmotionDescResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetEmotionDescResponse)
  return false;
#undef DO_
}

void GetEmotionDescResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetEmotionDescResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .micromsg.EmotionDesc List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  // required uint32 ClickFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->clickflag(), output);
  }

  // optional string ButtonDesc = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buttondesc().data(), this->buttondesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetEmotionDescResponse.ButtonDesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->buttondesc(), output);
  }

  // optional uint32 DownLoadFlag = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->downloadflag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetEmotionDescResponse)
}

::google::protobuf::uint8* GetEmotionDescResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetEmotionDescResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.EmotionDesc List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->list(i), deterministic, target);
  }

  // required uint32 ClickFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->clickflag(), target);
  }

  // optional string ButtonDesc = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buttondesc().data(), this->buttondesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetEmotionDescResponse.ButtonDesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->buttondesc(), target);
  }

  // optional uint32 DownLoadFlag = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->downloadflag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetEmotionDescResponse)
  return target;
}

size_t GetEmotionDescResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetEmotionDescResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  if (has_clickflag()) {
    // required uint32 ClickFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clickflag());
  }

  return total_size;
}
size_t GetEmotionDescResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetEmotionDescResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

    // required uint32 ClickFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clickflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.EmotionDesc List = 3;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  // optional string ButtonDesc = 5;
  if (has_buttondesc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->buttondesc());
  }

  // optional uint32 DownLoadFlag = 6;
  if (has_downloadflag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->downloadflag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEmotionDescResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetEmotionDescResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEmotionDescResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetEmotionDescResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetEmotionDescResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetEmotionDescResponse)
    MergeFrom(*source);
  }
}

void GetEmotionDescResponse::MergeFrom(const GetEmotionDescResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetEmotionDescResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_buttondesc();
      buttondesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buttondesc_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      clickflag_ = from.clickflag_;
    }
    if (cached_has_bits & 0x00000010u) {
      downloadflag_ = from.downloadflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetEmotionDescResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetEmotionDescResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEmotionDescResponse::CopyFrom(const GetEmotionDescResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetEmotionDescResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEmotionDescResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetEmotionDescResponse::Swap(GetEmotionDescResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEmotionDescResponse::InternalSwap(GetEmotionDescResponse* other) {
  list_.InternalSwap(&other->list_);
  buttondesc_.Swap(&other->buttondesc_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(count_, other->count_);
  std::swap(clickflag_, other->clickflag_);
  std::swap(downloadflag_, other->downloadflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetEmotionDescResponse::GetMetadata() const {
  protobuf_mmemotion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetEmotionDescResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetEmotionDescResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetEmotionDescResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void GetEmotionDescResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetEmotionDescResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetEmotionDescResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionDescResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetEmotionDescResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionDescResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetEmotionDescResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetEmotionDescResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetEmotionDescResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetEmotionDescResponse.BaseResponse)
}

// required uint32 Count = 2;
bool GetEmotionDescResponse::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetEmotionDescResponse::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
void GetEmotionDescResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetEmotionDescResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 GetEmotionDescResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionDescResponse.Count)
  return count_;
}
void GetEmotionDescResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetEmotionDescResponse.Count)
}

// repeated .micromsg.EmotionDesc List = 3;
int GetEmotionDescResponse::list_size() const {
  return list_.size();
}
void GetEmotionDescResponse::clear_list() {
  list_.Clear();
}
const ::micromsg::EmotionDesc& GetEmotionDescResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionDescResponse.List)
  return list_.Get(index);
}
::micromsg::EmotionDesc* GetEmotionDescResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionDescResponse.List)
  return list_.Mutable(index);
}
::micromsg::EmotionDesc* GetEmotionDescResponse::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.GetEmotionDescResponse.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::EmotionDesc >*
GetEmotionDescResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetEmotionDescResponse.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::EmotionDesc >&
GetEmotionDescResponse::list() const {
  // @@protoc_insertion_point(field_list:micromsg.GetEmotionDescResponse.List)
  return list_;
}

// required uint32 ClickFlag = 4;
bool GetEmotionDescResponse::has_clickflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetEmotionDescResponse::set_has_clickflag() {
  _has_bits_[0] |= 0x00000008u;
}
void GetEmotionDescResponse::clear_has_clickflag() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetEmotionDescResponse::clear_clickflag() {
  clickflag_ = 0u;
  clear_has_clickflag();
}
::google::protobuf::uint32 GetEmotionDescResponse::clickflag() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionDescResponse.ClickFlag)
  return clickflag_;
}
void GetEmotionDescResponse::set_clickflag(::google::protobuf::uint32 value) {
  set_has_clickflag();
  clickflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetEmotionDescResponse.ClickFlag)
}

// optional string ButtonDesc = 5;
bool GetEmotionDescResponse::has_buttondesc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetEmotionDescResponse::set_has_buttondesc() {
  _has_bits_[0] |= 0x00000001u;
}
void GetEmotionDescResponse::clear_has_buttondesc() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetEmotionDescResponse::clear_buttondesc() {
  buttondesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buttondesc();
}
const ::std::string& GetEmotionDescResponse::buttondesc() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionDescResponse.ButtonDesc)
  return buttondesc_.GetNoArena();
}
void GetEmotionDescResponse::set_buttondesc(const ::std::string& value) {
  set_has_buttondesc();
  buttondesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetEmotionDescResponse.ButtonDesc)
}
#if LANG_CXX11
void GetEmotionDescResponse::set_buttondesc(::std::string&& value) {
  set_has_buttondesc();
  buttondesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetEmotionDescResponse.ButtonDesc)
}
#endif
void GetEmotionDescResponse::set_buttondesc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_buttondesc();
  buttondesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetEmotionDescResponse.ButtonDesc)
}
void GetEmotionDescResponse::set_buttondesc(const char* value, size_t size) {
  set_has_buttondesc();
  buttondesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetEmotionDescResponse.ButtonDesc)
}
::std::string* GetEmotionDescResponse::mutable_buttondesc() {
  set_has_buttondesc();
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionDescResponse.ButtonDesc)
  return buttondesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetEmotionDescResponse::release_buttondesc() {
  // @@protoc_insertion_point(field_release:micromsg.GetEmotionDescResponse.ButtonDesc)
  clear_has_buttondesc();
  return buttondesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetEmotionDescResponse::set_allocated_buttondesc(::std::string* buttondesc) {
  if (buttondesc != NULL) {
    set_has_buttondesc();
  } else {
    clear_has_buttondesc();
  }
  buttondesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buttondesc);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetEmotionDescResponse.ButtonDesc)
}

// optional uint32 DownLoadFlag = 6;
bool GetEmotionDescResponse::has_downloadflag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetEmotionDescResponse::set_has_downloadflag() {
  _has_bits_[0] |= 0x00000010u;
}
void GetEmotionDescResponse::clear_has_downloadflag() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetEmotionDescResponse::clear_downloadflag() {
  downloadflag_ = 0u;
  clear_has_downloadflag();
}
::google::protobuf::uint32 GetEmotionDescResponse::downloadflag() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionDescResponse.DownLoadFlag)
  return downloadflag_;
}
void GetEmotionDescResponse::set_downloadflag(::google::protobuf::uint32 value) {
  set_has_downloadflag();
  downloadflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetEmotionDescResponse.DownLoadFlag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg

// @@protoc_insertion_point(global_scope)
