// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmemotionstore.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mmemotionstore.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micromsg {
class JumpEmotionDetailRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JumpEmotionDetailRequest> {
} _JumpEmotionDetailRequest_default_instance_;
class JumpEmotionDetailResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JumpEmotionDetailResponse> {
} _JumpEmotionDetailResponse_default_instance_;
class BatchEmojiBackupRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchEmojiBackupRequest> {
} _BatchEmojiBackupRequest_default_instance_;
class BatchEmojiBackupResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchEmojiBackupResponse> {
} _BatchEmojiBackupResponse_default_instance_;
class BatchEmojiDownLoadRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchEmojiDownLoadRequest> {
} _BatchEmojiDownLoadRequest_default_instance_;
class EmojiInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmojiInfo> {
} _EmojiInfo_default_instance_;
class BatchEmojiDownLoadResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchEmojiDownLoadResponse> {
} _BatchEmojiDownLoadResponse_default_instance_;
class BackupEmojiOperateRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BackupEmojiOperateRequest> {
} _BackupEmojiOperateRequest_default_instance_;
class BackupEmojiOperateResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BackupEmojiOperateResponse> {
} _BackupEmojiOperateResponse_default_instance_;
class UploadEmojiInfoReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UploadEmojiInfoReq> {
} _UploadEmojiInfoReq_default_instance_;
class EmojiUploadRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmojiUploadRequest> {
} _EmojiUploadRequest_default_instance_;
class UploadEmojiInfoRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UploadEmojiInfoResp> {
} _UploadEmojiInfoResp_default_instance_;
class EmojiUploadResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmojiUploadResponse> {
} _EmojiUploadResponse_default_instance_;
class UploadMyPanelListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UploadMyPanelListRequest> {
} _UploadMyPanelListRequest_default_instance_;
class UploadMyPanelListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UploadMyPanelListResponse> {
} _UploadMyPanelListResponse_default_instance_;
class GetPersonalDesignerRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetPersonalDesignerRequest> {
} _GetPersonalDesignerRequest_default_instance_;
class GetPersonalDesignerResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetPersonalDesignerResponse> {
} _GetPersonalDesignerResponse_default_instance_;
class GetEmotionRewardRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetEmotionRewardRequest> {
} _GetEmotionRewardRequest_default_instance_;
class EmotionPriceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmotionPrice> {
} _EmotionPrice_default_instance_;
class EmotionDonorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmotionDonor> {
} _EmotionDonor_default_instance_;
class EmotionRewardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmotionReward> {
} _EmotionReward_default_instance_;
class GetEmotionRewardResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetEmotionRewardResponse> {
} _GetEmotionRewardResponse_default_instance_;
class GetEmotionDonorListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetEmotionDonorListRequest> {
} _GetEmotionDonorListRequest_default_instance_;
class GetEmotionDonorListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetEmotionDonorListResponse> {
} _GetEmotionDonorListResponse_default_instance_;
class AskForRewardRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AskForRewardRequest> {
} _AskForRewardRequest_default_instance_;
class AskForRewardResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AskForRewardResponse> {
} _AskForRewardResponse_default_instance_;
class GetRewardMagicListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetRewardMagicListRequest> {
} _GetRewardMagicListRequest_default_instance_;
class RewardMagicDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RewardMagic> {
} _RewardMagic_default_instance_;
class GetRewardMagicListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetRewardMagicListResponse> {
} _GetRewardMagicListResponse_default_instance_;

namespace protobuf_mmemotionstore_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[29];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpEmotionDetailRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpEmotionDetailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpEmotionDetailRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpEmotionDetailRequest, url_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpEmotionDetailResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpEmotionDetailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpEmotionDetailResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpEmotionDetailResponse, productid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEmojiBackupRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEmojiBackupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEmojiBackupRequest, md5list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEmojiBackupResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEmojiBackupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEmojiBackupResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEmojiBackupResponse, needuploadmd5list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEmojiDownLoadRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEmojiDownLoadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEmojiDownLoadRequest, index_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiInfo, md5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiInfo, url_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEmojiDownLoadResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEmojiDownLoadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEmojiDownLoadResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEmojiDownLoadResponse, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEmojiDownLoadResponse, md5list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEmojiDownLoadResponse, endflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEmojiDownLoadResponse, emojilist_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupEmojiOperateRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupEmojiOperateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupEmojiOperateRequest, md5list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupEmojiOperateRequest, opcode_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupEmojiOperateResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupEmojiOperateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupEmojiOperateResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupEmojiOperateResponse, needuploadmd5list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiInfoReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiInfoReq, md5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiInfoReq, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiInfoReq, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiInfoReq, emojibuffer_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadRequest, emojiitem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadRequest, reqtime_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiInfoResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiInfoResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiInfoResp, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiInfoResp, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiInfoResp, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiInfoResp, md5_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadResponse, emojiitem_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMyPanelListRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMyPanelListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMyPanelListRequest, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMyPanelListRequest, productidlist_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMyPanelListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMyPanelListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMyPanelListResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDesignerRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDesignerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDesignerRequest, designeruin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDesignerRequest, reqbuf_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDesignerResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDesignerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDesignerResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDesignerResponse, bannerurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDesignerResponse, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDesignerResponse, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDesignerResponse, headurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDesignerResponse, bizname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDesignerResponse, emotionlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalDesignerResponse, reqbuf_),
  5,
  0,
  1,
  2,
  3,
  4,
  ~0u,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionRewardRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionRewardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionRewardRequest, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionRewardRequest, opcode_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionPrice, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionPrice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionPrice, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionPrice, number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionPrice, type_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDonor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDonor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionDonor, headurl_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionReward, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionReward, begword_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionReward, begpicurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionReward, thankspicurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionReward, magicurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionReward, magicword_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionReward, magicexpire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionReward, magiclimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmotionReward, magicmd5_),
  0,
  1,
  2,
  3,
  4,
  6,
  7,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionRewardResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionRewardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionRewardResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionRewardResponse, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionRewardResponse, donornum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionRewardResponse, donors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionRewardResponse, reward_),
  0,
  ~0u,
  2,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDonorListRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDonorListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDonorListRequest, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDonorListRequest, reqbuf_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDonorListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDonorListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDonorListResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDonorListResponse, donornum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDonorListResponse, donors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEmotionDonorListResponse, respbuf_),
  0,
  2,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskForRewardRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskForRewardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskForRewardRequest, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskForRewardRequest, price_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskForRewardResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskForRewardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskForRewardResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskForRewardResponse, reqkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskForRewardResponse, appid_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRewardMagicListRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRewardMagicListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRewardMagicListRequest, scene_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMagic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMagic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMagic, magicword_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMagic, magicurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMagic, magicexpire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMagic, magiclimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMagic, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMagic, md5_),
  0,
  1,
  4,
  5,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRewardMagicListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRewardMagicListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRewardMagicListResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRewardMagicListResponse, magic_),
  0,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(JumpEmotionDetailRequest)},
  { 9, 16, sizeof(JumpEmotionDetailResponse)},
  { 18, 24, sizeof(BatchEmojiBackupRequest)},
  { 25, 32, sizeof(BatchEmojiBackupResponse)},
  { 34, 40, sizeof(BatchEmojiDownLoadRequest)},
  { 41, 48, sizeof(EmojiInfo)},
  { 50, 60, sizeof(BatchEmojiDownLoadResponse)},
  { 65, 72, sizeof(BackupEmojiOperateRequest)},
  { 74, 81, sizeof(BackupEmojiOperateResponse)},
  { 83, 92, sizeof(UploadEmojiInfoReq)},
  { 96, 103, sizeof(EmojiUploadRequest)},
  { 105, 114, sizeof(UploadEmojiInfoResp)},
  { 118, 125, sizeof(EmojiUploadResponse)},
  { 127, 134, sizeof(UploadMyPanelListRequest)},
  { 136, 142, sizeof(UploadMyPanelListResponse)},
  { 143, 150, sizeof(GetPersonalDesignerRequest)},
  { 152, 165, sizeof(GetPersonalDesignerResponse)},
  { 173, 180, sizeof(GetEmotionRewardRequest)},
  { 182, 190, sizeof(EmotionPrice)},
  { 193, 199, sizeof(EmotionDonor)},
  { 200, 213, sizeof(EmotionReward)},
  { 221, 231, sizeof(GetEmotionRewardResponse)},
  { 236, 243, sizeof(GetEmotionDonorListRequest)},
  { 245, 254, sizeof(GetEmotionDonorListResponse)},
  { 258, 265, sizeof(AskForRewardRequest)},
  { 267, 275, sizeof(AskForRewardResponse)},
  { 278, 284, sizeof(GetRewardMagicListRequest)},
  { 285, 296, sizeof(RewardMagic)},
  { 302, 309, sizeof(GetRewardMagicListResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_JumpEmotionDetailRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JumpEmotionDetailResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchEmojiBackupRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchEmojiBackupResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchEmojiDownLoadRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmojiInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchEmojiDownLoadResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackupEmojiOperateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackupEmojiOperateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UploadEmojiInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmojiUploadRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UploadEmojiInfoResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmojiUploadResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UploadMyPanelListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UploadMyPanelListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPersonalDesignerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPersonalDesignerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetEmotionRewardRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmotionPrice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmotionDonor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmotionReward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetEmotionRewardResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetEmotionDonorListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetEmotionDonorListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AskForRewardRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AskForRewardResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetRewardMagicListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RewardMagic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetRewardMagicListResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mmemotionstore.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 29);
}

}  // namespace

void TableStruct::Shutdown() {
  _JumpEmotionDetailRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _JumpEmotionDetailResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _BatchEmojiBackupRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _BatchEmojiBackupResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _BatchEmojiDownLoadRequest_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _EmojiInfo_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _BatchEmojiDownLoadResponse_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _BackupEmojiOperateRequest_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _BackupEmojiOperateResponse_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _UploadEmojiInfoReq_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _EmojiUploadRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _UploadEmojiInfoResp_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _EmojiUploadResponse_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _UploadMyPanelListRequest_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _UploadMyPanelListResponse_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _GetPersonalDesignerRequest_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _GetPersonalDesignerResponse_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _GetEmotionRewardRequest_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _EmotionPrice_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _EmotionDonor_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _EmotionReward_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _GetEmotionRewardResponse_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _GetEmotionDonorListRequest_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _GetEmotionDonorListResponse_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _AskForRewardRequest_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _AskForRewardResponse_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _GetRewardMagicListRequest_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _RewardMagic_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _GetRewardMagicListResponse_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::micromsg::protobuf_mmbuiltintype_2eproto::InitDefaults();
  ::micromsg::protobuf_mmbase_2eproto::InitDefaults();
  ::micromsg::protobuf_mmemotion_2eproto::InitDefaults();
  _JumpEmotionDetailRequest_default_instance_.DefaultConstruct();
  _JumpEmotionDetailResponse_default_instance_.DefaultConstruct();
  _BatchEmojiBackupRequest_default_instance_.DefaultConstruct();
  _BatchEmojiBackupResponse_default_instance_.DefaultConstruct();
  _BatchEmojiDownLoadRequest_default_instance_.DefaultConstruct();
  _EmojiInfo_default_instance_.DefaultConstruct();
  _BatchEmojiDownLoadResponse_default_instance_.DefaultConstruct();
  _BackupEmojiOperateRequest_default_instance_.DefaultConstruct();
  _BackupEmojiOperateResponse_default_instance_.DefaultConstruct();
  _UploadEmojiInfoReq_default_instance_.DefaultConstruct();
  _EmojiUploadRequest_default_instance_.DefaultConstruct();
  _UploadEmojiInfoResp_default_instance_.DefaultConstruct();
  _EmojiUploadResponse_default_instance_.DefaultConstruct();
  _UploadMyPanelListRequest_default_instance_.DefaultConstruct();
  _UploadMyPanelListResponse_default_instance_.DefaultConstruct();
  _GetPersonalDesignerRequest_default_instance_.DefaultConstruct();
  _GetPersonalDesignerResponse_default_instance_.DefaultConstruct();
  _GetEmotionRewardRequest_default_instance_.DefaultConstruct();
  _EmotionPrice_default_instance_.DefaultConstruct();
  _EmotionDonor_default_instance_.DefaultConstruct();
  _EmotionReward_default_instance_.DefaultConstruct();
  _GetEmotionRewardResponse_default_instance_.DefaultConstruct();
  _GetEmotionDonorListRequest_default_instance_.DefaultConstruct();
  _GetEmotionDonorListResponse_default_instance_.DefaultConstruct();
  _AskForRewardRequest_default_instance_.DefaultConstruct();
  _AskForRewardResponse_default_instance_.DefaultConstruct();
  _GetRewardMagicListRequest_default_instance_.DefaultConstruct();
  _RewardMagic_default_instance_.DefaultConstruct();
  _GetRewardMagicListResponse_default_instance_.DefaultConstruct();
  _JumpEmotionDetailRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _JumpEmotionDetailResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _BatchEmojiBackupResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _BatchEmojiDownLoadResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _BackupEmojiOperateResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _EmojiUploadResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _UploadMyPanelListResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetPersonalDesignerRequest_default_instance_.get_mutable()->reqbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetPersonalDesignerResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetPersonalDesignerResponse_default_instance_.get_mutable()->reqbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetEmotionRewardResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetEmotionRewardResponse_default_instance_.get_mutable()->reward_ = const_cast< ::micromsg::EmotionReward*>(
      ::micromsg::EmotionReward::internal_default_instance());
  _GetEmotionDonorListRequest_default_instance_.get_mutable()->reqbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetEmotionDonorListResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetEmotionDonorListResponse_default_instance_.get_mutable()->respbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _AskForRewardRequest_default_instance_.get_mutable()->price_ = const_cast< ::micromsg::EmotionPrice*>(
      ::micromsg::EmotionPrice::internal_default_instance());
  _AskForRewardResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetRewardMagicListResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024mmemotionstore.proto\022\010micromsg\032\023mmbuil"
      "tintype.proto\032\014mmbase.proto\032\017mmemotion.p"
      "roto\"S\n\030JumpEmotionDetailRequest\022*\n\013Base"
      "Request\030\001 \002(\0132\025.micromsg.BaseRequest\022\013\n\003"
      "Url\030\002 \002(\t\"\\\n\031JumpEmotionDetailResponse\022,"
      "\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseResp"
      "onse\022\021\n\tProductID\030\002 \001(\t\"*\n\027BatchEmojiBac"
      "kupRequest\022\017\n\007Md5List\030\001 \003(\t\"c\n\030BatchEmoj"
      "iBackupResponse\022,\n\014BaseResponse\030\001 \002(\0132\026."
      "micromsg.BaseResponse\022\031\n\021NeedUploadMd5Li"
      "st\030\002 \003(\t\"*\n\031BatchEmojiDownLoadRequest\022\r\n"
      "\005Index\030\001 \002(\r\"%\n\tEmojiInfo\022\013\n\003Md5\030\001 \002(\t\022\013"
      "\n\003Url\030\002 \001(\t\"\243\001\n\032BatchEmojiDownLoadRespon"
      "se\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.Base"
      "Response\022\r\n\005Index\030\002 \002(\r\022\017\n\007Md5List\030\003 \003(\t"
      "\022\017\n\007EndFlag\030\004 \002(\r\022&\n\tEmojiList\030\005 \003(\0132\023.m"
      "icromsg.EmojiInfo\"<\n\031BackupEmojiOperateR"
      "equest\022\017\n\007Md5List\030\001 \003(\t\022\016\n\006Opcode\030\002 \002(\r\""
      "e\n\032BackupEmojiOperateResponse\022,\n\014BaseRes"
      "ponse\030\001 \002(\0132\026.micromsg.BaseResponse\022\031\n\021N"
      "eedUploadMd5List\030\002 \003(\t\"Z\n\022UploadEmojiInf"
      "oReq\022\013\n\003MD5\030\001 \001(\t\022\020\n\010StartPos\030\002 \002(\005\022\020\n\010T"
      "otalLen\030\003 \002(\005\022\023\n\013EmojiBuffer\030\004 \002(\014\"V\n\022Em"
      "ojiUploadRequest\022/\n\tEmojiItem\030\001 \003(\0132\034.mi"
      "cromsg.UploadEmojiInfoReq\022\017\n\007ReqTime\030\002 \001"
      "(\r\"S\n\023UploadEmojiInfoResp\022\013\n\003Ret\030\001 \002(\005\022\020"
      "\n\010StartPos\030\002 \002(\005\022\020\n\010TotalLen\030\003 \002(\005\022\013\n\003MD"
      "5\030\004 \001(\t\"u\n\023EmojiUploadResponse\022,\n\014BaseRe"
      "sponse\030\001 \002(\0132\026.micromsg.BaseResponse\0220\n\t"
      "EmojiItem\030\002 \003(\0132\035.micromsg.UploadEmojiIn"
      "foResp\"A\n\030UploadMyPanelListRequest\022\016\n\006Op"
      "Code\030\001 \002(\r\022\025\n\rProductIDList\030\002 \003(\t\"I\n\031Upl"
      "oadMyPanelListResponse\022,\n\014BaseResponse\030\001"
      " \002(\0132\026.micromsg.BaseResponse\"^\n\032GetPerso"
      "nalDesignerRequest\022\023\n\013DesignerUin\030\001 \002(\r\022"
      "+\n\006ReqBuf\030\002 \002(\0132\033.micromsg.SKBuiltinBuff"
      "er_t\"\370\001\n\033GetPersonalDesignerResponse\022,\n\014"
      "BaseResponse\030\001 \002(\0132\026.micromsg.BaseRespon"
      "se\022\021\n\tBannerUrl\030\002 \002(\t\022\014\n\004Name\030\003 \002(\t\022\014\n\004D"
      "esc\030\004 \002(\t\022\017\n\007HeadUrl\030\005 \002(\t\022\017\n\007BizName\030\006 "
      "\002(\t\022-\n\013EmotionList\030\007 \003(\0132\030.micromsg.Emot"
      "ionSummary\022+\n\006ReqBuf\030\010 \002(\0132\033.micromsg.SK"
      "BuiltinBuffer_t\"<\n\027GetEmotionRewardReque"
      "st\022\021\n\tProductID\030\001 \002(\t\022\016\n\006OpCode\030\002 \002(\r\";\n"
      "\014EmotionPrice\022\r\n\005Label\030\001 \002(\t\022\016\n\006Number\030\002"
      " \002(\t\022\014\n\004Type\030\003 \002(\t\"\037\n\014EmotionDonor\022\017\n\007He"
      "adUrl\030\001 \002(\t\"\251\001\n\rEmotionReward\022\017\n\007BegWord"
      "\030\001 \002(\t\022\021\n\tBegPicUrl\030\002 \002(\t\022\024\n\014ThanksPicUr"
      "l\030\003 \002(\t\022\020\n\010MagicUrl\030\004 \001(\t\022\021\n\tMagicWord\030\005"
      " \001(\t\022\023\n\013MagicExpire\030\006 \001(\r\022\022\n\nMagicLimit\030"
      "\007 \001(\r\022\020\n\010MagicMd5\030\010 \001(\t\"\322\001\n\030GetEmotionRe"
      "wardResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.mic"
      "romsg.BaseResponse\022%\n\005Price\030\002 \003(\0132\026.micr"
      "omsg.EmotionPrice\022\020\n\010DonorNum\030\003 \001(\r\022&\n\006D"
      "onors\030\004 \003(\0132\026.micromsg.EmotionDonor\022\'\n\006R"
      "eward\030\005 \001(\0132\027.micromsg.EmotionReward\"\\\n\032"
      "GetEmotionDonorListRequest\022\021\n\tProductID\030"
      "\001 \002(\t\022+\n\006ReqBuf\030\002 \002(\0132\033.micromsg.SKBuilt"
      "inBuffer_t\"\263\001\n\033GetEmotionDonorListRespon"
      "se\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.Base"
      "Response\022\020\n\010DonorNum\030\002 \002(\r\022&\n\006Donors\030\003 \003"
      "(\0132\026.micromsg.EmotionDonor\022,\n\007RespBuf\030\004 "
      "\001(\0132\033.micromsg.SKBuiltinBuffer_t\"O\n\023AskF"
      "orRewardRequest\022\021\n\tProductID\030\001 \002(\t\022%\n\005Pr"
      "ice\030\002 \002(\0132\026.micromsg.EmotionPrice\"c\n\024Ask"
      "ForRewardResponse\022,\n\014BaseResponse\030\001 \002(\0132"
      "\026.micromsg.BaseResponse\022\016\n\006ReqKey\030\002 \002(\t\022"
      "\r\n\005AppID\030\003 \002(\t\"*\n\031GetRewardMagicListRequ"
      "est\022\r\n\005Scene\030\001 \002(\r\"{\n\013RewardMagic\022\021\n\tMag"
      "icWord\030\001 \002(\t\022\020\n\010MagicUrl\030\002 \002(\t\022\023\n\013MagicE"
      "xpire\030\003 \001(\r\022\022\n\nMagicLimit\030\004 \001(\r\022\021\n\tProdu"
      "ctID\030\005 \002(\t\022\013\n\003Md5\030\006 \001(\t\"p\n\032GetRewardMagi"
      "cListResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.mi"
      "cromsg.BaseResponse\022$\n\005Magic\030\002 \003(\0132\025.mic"
      "romsg.RewardMagic"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2977);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mmemotionstore.proto", &protobuf_RegisterTypes);
  ::micromsg::protobuf_mmbuiltintype_2eproto::AddDescriptors();
  ::micromsg::protobuf_mmbase_2eproto::AddDescriptors();
  ::micromsg::protobuf_mmemotion_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mmemotionstore_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JumpEmotionDetailRequest::kBaseRequestFieldNumber;
const int JumpEmotionDetailRequest::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JumpEmotionDetailRequest::JumpEmotionDetailRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.JumpEmotionDetailRequest)
}
JumpEmotionDetailRequest::JumpEmotionDetailRequest(const JumpEmotionDetailRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.JumpEmotionDetailRequest)
}

void JumpEmotionDetailRequest::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

JumpEmotionDetailRequest::~JumpEmotionDetailRequest() {
  // @@protoc_insertion_point(destructor:micromsg.JumpEmotionDetailRequest)
  SharedDtor();
}

void JumpEmotionDetailRequest::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void JumpEmotionDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JumpEmotionDetailRequest::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JumpEmotionDetailRequest& JumpEmotionDetailRequest::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

JumpEmotionDetailRequest* JumpEmotionDetailRequest::New(::google::protobuf::Arena* arena) const {
  JumpEmotionDetailRequest* n = new JumpEmotionDetailRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JumpEmotionDetailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.JumpEmotionDetailRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool JumpEmotionDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.JumpEmotionDetailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string Url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.JumpEmotionDetailRequest.Url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.JumpEmotionDetailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.JumpEmotionDetailRequest)
  return false;
#undef DO_
}

void JumpEmotionDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.JumpEmotionDetailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required string Url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.JumpEmotionDetailRequest.Url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.JumpEmotionDetailRequest)
}

::google::protobuf::uint8* JumpEmotionDetailRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.JumpEmotionDetailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required string Url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.JumpEmotionDetailRequest.Url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.JumpEmotionDetailRequest)
  return target;
}

size_t JumpEmotionDetailRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.JumpEmotionDetailRequest)
  size_t total_size = 0;

  if (has_url()) {
    // required string Url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  return total_size;
}
size_t JumpEmotionDetailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.JumpEmotionDetailRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string Url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JumpEmotionDetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.JumpEmotionDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JumpEmotionDetailRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JumpEmotionDetailRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.JumpEmotionDetailRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.JumpEmotionDetailRequest)
    MergeFrom(*source);
  }
}

void JumpEmotionDetailRequest::MergeFrom(const JumpEmotionDetailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.JumpEmotionDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void JumpEmotionDetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.JumpEmotionDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JumpEmotionDetailRequest::CopyFrom(const JumpEmotionDetailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.JumpEmotionDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JumpEmotionDetailRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void JumpEmotionDetailRequest::Swap(JumpEmotionDetailRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JumpEmotionDetailRequest::InternalSwap(JumpEmotionDetailRequest* other) {
  url_.Swap(&other->url_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JumpEmotionDetailRequest::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JumpEmotionDetailRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool JumpEmotionDetailRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void JumpEmotionDetailRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void JumpEmotionDetailRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void JumpEmotionDetailRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& JumpEmotionDetailRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.JumpEmotionDetailRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* JumpEmotionDetailRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.JumpEmotionDetailRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* JumpEmotionDetailRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.JumpEmotionDetailRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void JumpEmotionDetailRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.JumpEmotionDetailRequest.BaseRequest)
}

// required string Url = 2;
bool JumpEmotionDetailRequest::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void JumpEmotionDetailRequest::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void JumpEmotionDetailRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void JumpEmotionDetailRequest::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& JumpEmotionDetailRequest::url() const {
  // @@protoc_insertion_point(field_get:micromsg.JumpEmotionDetailRequest.Url)
  return url_.GetNoArena();
}
void JumpEmotionDetailRequest::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.JumpEmotionDetailRequest.Url)
}
#if LANG_CXX11
void JumpEmotionDetailRequest::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.JumpEmotionDetailRequest.Url)
}
#endif
void JumpEmotionDetailRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.JumpEmotionDetailRequest.Url)
}
void JumpEmotionDetailRequest::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.JumpEmotionDetailRequest.Url)
}
::std::string* JumpEmotionDetailRequest::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:micromsg.JumpEmotionDetailRequest.Url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JumpEmotionDetailRequest::release_url() {
  // @@protoc_insertion_point(field_release:micromsg.JumpEmotionDetailRequest.Url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JumpEmotionDetailRequest::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:micromsg.JumpEmotionDetailRequest.Url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JumpEmotionDetailResponse::kBaseResponseFieldNumber;
const int JumpEmotionDetailResponse::kProductIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JumpEmotionDetailResponse::JumpEmotionDetailResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.JumpEmotionDetailResponse)
}
JumpEmotionDetailResponse::JumpEmotionDetailResponse(const JumpEmotionDetailResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.JumpEmotionDetailResponse)
}

void JumpEmotionDetailResponse::SharedCtor() {
  _cached_size_ = 0;
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

JumpEmotionDetailResponse::~JumpEmotionDetailResponse() {
  // @@protoc_insertion_point(destructor:micromsg.JumpEmotionDetailResponse)
  SharedDtor();
}

void JumpEmotionDetailResponse::SharedDtor() {
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void JumpEmotionDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JumpEmotionDetailResponse::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JumpEmotionDetailResponse& JumpEmotionDetailResponse::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

JumpEmotionDetailResponse* JumpEmotionDetailResponse::New(::google::protobuf::Arena* arena) const {
  JumpEmotionDetailResponse* n = new JumpEmotionDetailResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JumpEmotionDetailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.JumpEmotionDetailResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_productid()) {
      GOOGLE_DCHECK(!productid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*productid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool JumpEmotionDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.JumpEmotionDetailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ProductID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.JumpEmotionDetailResponse.ProductID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.JumpEmotionDetailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.JumpEmotionDetailResponse)
  return false;
#undef DO_
}

void JumpEmotionDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.JumpEmotionDetailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string ProductID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.JumpEmotionDetailResponse.ProductID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->productid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.JumpEmotionDetailResponse)
}

::google::protobuf::uint8* JumpEmotionDetailResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.JumpEmotionDetailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string ProductID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.JumpEmotionDetailResponse.ProductID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->productid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.JumpEmotionDetailResponse)
  return target;
}

size_t JumpEmotionDetailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.JumpEmotionDetailResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional string ProductID = 2;
  if (has_productid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JumpEmotionDetailResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.JumpEmotionDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const JumpEmotionDetailResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JumpEmotionDetailResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.JumpEmotionDetailResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.JumpEmotionDetailResponse)
    MergeFrom(*source);
  }
}

void JumpEmotionDetailResponse::MergeFrom(const JumpEmotionDetailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.JumpEmotionDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void JumpEmotionDetailResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.JumpEmotionDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JumpEmotionDetailResponse::CopyFrom(const JumpEmotionDetailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.JumpEmotionDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JumpEmotionDetailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void JumpEmotionDetailResponse::Swap(JumpEmotionDetailResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JumpEmotionDetailResponse::InternalSwap(JumpEmotionDetailResponse* other) {
  productid_.Swap(&other->productid_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JumpEmotionDetailResponse::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JumpEmotionDetailResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool JumpEmotionDetailResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void JumpEmotionDetailResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void JumpEmotionDetailResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void JumpEmotionDetailResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& JumpEmotionDetailResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.JumpEmotionDetailResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* JumpEmotionDetailResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.JumpEmotionDetailResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* JumpEmotionDetailResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.JumpEmotionDetailResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void JumpEmotionDetailResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.JumpEmotionDetailResponse.BaseResponse)
}

// optional string ProductID = 2;
bool JumpEmotionDetailResponse::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void JumpEmotionDetailResponse::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
void JumpEmotionDetailResponse::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
void JumpEmotionDetailResponse::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
const ::std::string& JumpEmotionDetailResponse::productid() const {
  // @@protoc_insertion_point(field_get:micromsg.JumpEmotionDetailResponse.ProductID)
  return productid_.GetNoArena();
}
void JumpEmotionDetailResponse::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.JumpEmotionDetailResponse.ProductID)
}
#if LANG_CXX11
void JumpEmotionDetailResponse::set_productid(::std::string&& value) {
  set_has_productid();
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.JumpEmotionDetailResponse.ProductID)
}
#endif
void JumpEmotionDetailResponse::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.JumpEmotionDetailResponse.ProductID)
}
void JumpEmotionDetailResponse::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.JumpEmotionDetailResponse.ProductID)
}
::std::string* JumpEmotionDetailResponse::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:micromsg.JumpEmotionDetailResponse.ProductID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JumpEmotionDetailResponse::release_productid() {
  // @@protoc_insertion_point(field_release:micromsg.JumpEmotionDetailResponse.ProductID)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JumpEmotionDetailResponse::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.JumpEmotionDetailResponse.ProductID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchEmojiBackupRequest::kMd5ListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchEmojiBackupRequest::BatchEmojiBackupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchEmojiBackupRequest)
}
BatchEmojiBackupRequest::BatchEmojiBackupRequest(const BatchEmojiBackupRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      md5list_(from.md5list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchEmojiBackupRequest)
}

void BatchEmojiBackupRequest::SharedCtor() {
  _cached_size_ = 0;
}

BatchEmojiBackupRequest::~BatchEmojiBackupRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BatchEmojiBackupRequest)
  SharedDtor();
}

void BatchEmojiBackupRequest::SharedDtor() {
}

void BatchEmojiBackupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchEmojiBackupRequest::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchEmojiBackupRequest& BatchEmojiBackupRequest::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchEmojiBackupRequest* BatchEmojiBackupRequest::New(::google::protobuf::Arena* arena) const {
  BatchEmojiBackupRequest* n = new BatchEmojiBackupRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchEmojiBackupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchEmojiBackupRequest)
  md5list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchEmojiBackupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchEmojiBackupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string Md5List = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_md5list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5list(this->md5list_size() - 1).data(),
            this->md5list(this->md5list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BatchEmojiBackupRequest.Md5List");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchEmojiBackupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchEmojiBackupRequest)
  return false;
#undef DO_
}

void BatchEmojiBackupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchEmojiBackupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string Md5List = 1;
  for (int i = 0, n = this->md5list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5list(i).data(), this->md5list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BatchEmojiBackupRequest.Md5List");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->md5list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchEmojiBackupRequest)
}

::google::protobuf::uint8* BatchEmojiBackupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchEmojiBackupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string Md5List = 1;
  for (int i = 0, n = this->md5list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5list(i).data(), this->md5list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BatchEmojiBackupRequest.Md5List");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->md5list(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchEmojiBackupRequest)
  return target;
}

size_t BatchEmojiBackupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchEmojiBackupRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string Md5List = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->md5list_size());
  for (int i = 0, n = this->md5list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->md5list(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchEmojiBackupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchEmojiBackupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchEmojiBackupRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchEmojiBackupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchEmojiBackupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchEmojiBackupRequest)
    MergeFrom(*source);
  }
}

void BatchEmojiBackupRequest::MergeFrom(const BatchEmojiBackupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchEmojiBackupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  md5list_.MergeFrom(from.md5list_);
}

void BatchEmojiBackupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchEmojiBackupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchEmojiBackupRequest::CopyFrom(const BatchEmojiBackupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchEmojiBackupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchEmojiBackupRequest::IsInitialized() const {
  return true;
}

void BatchEmojiBackupRequest::Swap(BatchEmojiBackupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchEmojiBackupRequest::InternalSwap(BatchEmojiBackupRequest* other) {
  md5list_.InternalSwap(&other->md5list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchEmojiBackupRequest::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchEmojiBackupRequest

// repeated string Md5List = 1;
int BatchEmojiBackupRequest::md5list_size() const {
  return md5list_.size();
}
void BatchEmojiBackupRequest::clear_md5list() {
  md5list_.Clear();
}
const ::std::string& BatchEmojiBackupRequest::md5list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchEmojiBackupRequest.Md5List)
  return md5list_.Get(index);
}
::std::string* BatchEmojiBackupRequest::mutable_md5list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchEmojiBackupRequest.Md5List)
  return md5list_.Mutable(index);
}
void BatchEmojiBackupRequest::set_md5list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.BatchEmojiBackupRequest.Md5List)
  md5list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void BatchEmojiBackupRequest::set_md5list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.BatchEmojiBackupRequest.Md5List)
  md5list_.Mutable(index)->assign(std::move(value));
}
#endif
void BatchEmojiBackupRequest::set_md5list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.BatchEmojiBackupRequest.Md5List)
}
void BatchEmojiBackupRequest::set_md5list(int index, const char* value, size_t size) {
  md5list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.BatchEmojiBackupRequest.Md5List)
}
::std::string* BatchEmojiBackupRequest::add_md5list() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.BatchEmojiBackupRequest.Md5List)
  return md5list_.Add();
}
void BatchEmojiBackupRequest::add_md5list(const ::std::string& value) {
  md5list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.BatchEmojiBackupRequest.Md5List)
}
#if LANG_CXX11
void BatchEmojiBackupRequest::add_md5list(::std::string&& value) {
  md5list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.BatchEmojiBackupRequest.Md5List)
}
#endif
void BatchEmojiBackupRequest::add_md5list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.BatchEmojiBackupRequest.Md5List)
}
void BatchEmojiBackupRequest::add_md5list(const char* value, size_t size) {
  md5list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.BatchEmojiBackupRequest.Md5List)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchEmojiBackupRequest::md5list() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchEmojiBackupRequest.Md5List)
  return md5list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BatchEmojiBackupRequest::mutable_md5list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchEmojiBackupRequest.Md5List)
  return &md5list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchEmojiBackupResponse::kBaseResponseFieldNumber;
const int BatchEmojiBackupResponse::kNeedUploadMd5ListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchEmojiBackupResponse::BatchEmojiBackupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchEmojiBackupResponse)
}
BatchEmojiBackupResponse::BatchEmojiBackupResponse(const BatchEmojiBackupResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      needuploadmd5list_(from.needuploadmd5list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchEmojiBackupResponse)
}

void BatchEmojiBackupResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

BatchEmojiBackupResponse::~BatchEmojiBackupResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BatchEmojiBackupResponse)
  SharedDtor();
}

void BatchEmojiBackupResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BatchEmojiBackupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchEmojiBackupResponse::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchEmojiBackupResponse& BatchEmojiBackupResponse::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchEmojiBackupResponse* BatchEmojiBackupResponse::New(::google::protobuf::Arena* arena) const {
  BatchEmojiBackupResponse* n = new BatchEmojiBackupResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchEmojiBackupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchEmojiBackupResponse)
  needuploadmd5list_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchEmojiBackupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchEmojiBackupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string NeedUploadMd5List = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_needuploadmd5list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->needuploadmd5list(this->needuploadmd5list_size() - 1).data(),
            this->needuploadmd5list(this->needuploadmd5list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BatchEmojiBackupResponse.NeedUploadMd5List");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchEmojiBackupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchEmojiBackupResponse)
  return false;
#undef DO_
}

void BatchEmojiBackupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchEmojiBackupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // repeated string NeedUploadMd5List = 2;
  for (int i = 0, n = this->needuploadmd5list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->needuploadmd5list(i).data(), this->needuploadmd5list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BatchEmojiBackupResponse.NeedUploadMd5List");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->needuploadmd5list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchEmojiBackupResponse)
}

::google::protobuf::uint8* BatchEmojiBackupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchEmojiBackupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // repeated string NeedUploadMd5List = 2;
  for (int i = 0, n = this->needuploadmd5list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->needuploadmd5list(i).data(), this->needuploadmd5list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BatchEmojiBackupResponse.NeedUploadMd5List");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->needuploadmd5list(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchEmojiBackupResponse)
  return target;
}

size_t BatchEmojiBackupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchEmojiBackupResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // repeated string NeedUploadMd5List = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->needuploadmd5list_size());
  for (int i = 0, n = this->needuploadmd5list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->needuploadmd5list(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchEmojiBackupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchEmojiBackupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchEmojiBackupResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchEmojiBackupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchEmojiBackupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchEmojiBackupResponse)
    MergeFrom(*source);
  }
}

void BatchEmojiBackupResponse::MergeFrom(const BatchEmojiBackupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchEmojiBackupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  needuploadmd5list_.MergeFrom(from.needuploadmd5list_);
  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void BatchEmojiBackupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchEmojiBackupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchEmojiBackupResponse::CopyFrom(const BatchEmojiBackupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchEmojiBackupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchEmojiBackupResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BatchEmojiBackupResponse::Swap(BatchEmojiBackupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchEmojiBackupResponse::InternalSwap(BatchEmojiBackupResponse* other) {
  needuploadmd5list_.InternalSwap(&other->needuploadmd5list_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchEmojiBackupResponse::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchEmojiBackupResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BatchEmojiBackupResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchEmojiBackupResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchEmojiBackupResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchEmojiBackupResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BatchEmojiBackupResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchEmojiBackupResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BatchEmojiBackupResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchEmojiBackupResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BatchEmojiBackupResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BatchEmojiBackupResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BatchEmojiBackupResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchEmojiBackupResponse.BaseResponse)
}

// repeated string NeedUploadMd5List = 2;
int BatchEmojiBackupResponse::needuploadmd5list_size() const {
  return needuploadmd5list_.size();
}
void BatchEmojiBackupResponse::clear_needuploadmd5list() {
  needuploadmd5list_.Clear();
}
const ::std::string& BatchEmojiBackupResponse::needuploadmd5list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchEmojiBackupResponse.NeedUploadMd5List)
  return needuploadmd5list_.Get(index);
}
::std::string* BatchEmojiBackupResponse::mutable_needuploadmd5list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchEmojiBackupResponse.NeedUploadMd5List)
  return needuploadmd5list_.Mutable(index);
}
void BatchEmojiBackupResponse::set_needuploadmd5list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.BatchEmojiBackupResponse.NeedUploadMd5List)
  needuploadmd5list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void BatchEmojiBackupResponse::set_needuploadmd5list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.BatchEmojiBackupResponse.NeedUploadMd5List)
  needuploadmd5list_.Mutable(index)->assign(std::move(value));
}
#endif
void BatchEmojiBackupResponse::set_needuploadmd5list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  needuploadmd5list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.BatchEmojiBackupResponse.NeedUploadMd5List)
}
void BatchEmojiBackupResponse::set_needuploadmd5list(int index, const char* value, size_t size) {
  needuploadmd5list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.BatchEmojiBackupResponse.NeedUploadMd5List)
}
::std::string* BatchEmojiBackupResponse::add_needuploadmd5list() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.BatchEmojiBackupResponse.NeedUploadMd5List)
  return needuploadmd5list_.Add();
}
void BatchEmojiBackupResponse::add_needuploadmd5list(const ::std::string& value) {
  needuploadmd5list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.BatchEmojiBackupResponse.NeedUploadMd5List)
}
#if LANG_CXX11
void BatchEmojiBackupResponse::add_needuploadmd5list(::std::string&& value) {
  needuploadmd5list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.BatchEmojiBackupResponse.NeedUploadMd5List)
}
#endif
void BatchEmojiBackupResponse::add_needuploadmd5list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  needuploadmd5list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.BatchEmojiBackupResponse.NeedUploadMd5List)
}
void BatchEmojiBackupResponse::add_needuploadmd5list(const char* value, size_t size) {
  needuploadmd5list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.BatchEmojiBackupResponse.NeedUploadMd5List)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchEmojiBackupResponse::needuploadmd5list() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchEmojiBackupResponse.NeedUploadMd5List)
  return needuploadmd5list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BatchEmojiBackupResponse::mutable_needuploadmd5list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchEmojiBackupResponse.NeedUploadMd5List)
  return &needuploadmd5list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchEmojiDownLoadRequest::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchEmojiDownLoadRequest::BatchEmojiDownLoadRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchEmojiDownLoadRequest)
}
BatchEmojiDownLoadRequest::BatchEmojiDownLoadRequest(const BatchEmojiDownLoadRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchEmojiDownLoadRequest)
}

void BatchEmojiDownLoadRequest::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
}

BatchEmojiDownLoadRequest::~BatchEmojiDownLoadRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BatchEmojiDownLoadRequest)
  SharedDtor();
}

void BatchEmojiDownLoadRequest::SharedDtor() {
}

void BatchEmojiDownLoadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchEmojiDownLoadRequest::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchEmojiDownLoadRequest& BatchEmojiDownLoadRequest::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchEmojiDownLoadRequest* BatchEmojiDownLoadRequest::New(::google::protobuf::Arena* arena) const {
  BatchEmojiDownLoadRequest* n = new BatchEmojiDownLoadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchEmojiDownLoadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchEmojiDownLoadRequest)
  index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchEmojiDownLoadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchEmojiDownLoadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchEmojiDownLoadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchEmojiDownLoadRequest)
  return false;
#undef DO_
}

void BatchEmojiDownLoadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchEmojiDownLoadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchEmojiDownLoadRequest)
}

::google::protobuf::uint8* BatchEmojiDownLoadRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchEmojiDownLoadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchEmojiDownLoadRequest)
  return target;
}

size_t BatchEmojiDownLoadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchEmojiDownLoadRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Index = 1;
  if (has_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchEmojiDownLoadRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchEmojiDownLoadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchEmojiDownLoadRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchEmojiDownLoadRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchEmojiDownLoadRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchEmojiDownLoadRequest)
    MergeFrom(*source);
  }
}

void BatchEmojiDownLoadRequest::MergeFrom(const BatchEmojiDownLoadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchEmojiDownLoadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_index()) {
    set_index(from.index());
  }
}

void BatchEmojiDownLoadRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchEmojiDownLoadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchEmojiDownLoadRequest::CopyFrom(const BatchEmojiDownLoadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchEmojiDownLoadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchEmojiDownLoadRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void BatchEmojiDownLoadRequest::Swap(BatchEmojiDownLoadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchEmojiDownLoadRequest::InternalSwap(BatchEmojiDownLoadRequest* other) {
  std::swap(index_, other->index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchEmojiDownLoadRequest::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchEmojiDownLoadRequest

// required uint32 Index = 1;
bool BatchEmojiDownLoadRequest::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchEmojiDownLoadRequest::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchEmojiDownLoadRequest::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchEmojiDownLoadRequest::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 BatchEmojiDownLoadRequest::index() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchEmojiDownLoadRequest.Index)
  return index_;
}
void BatchEmojiDownLoadRequest::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchEmojiDownLoadRequest.Index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmojiInfo::kMd5FieldNumber;
const int EmojiInfo::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmojiInfo::EmojiInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EmojiInfo)
}
EmojiInfo::EmojiInfo(const EmojiInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_md5()) {
    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.EmojiInfo)
}

void EmojiInfo::SharedCtor() {
  _cached_size_ = 0;
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EmojiInfo::~EmojiInfo() {
  // @@protoc_insertion_point(destructor:micromsg.EmojiInfo)
  SharedDtor();
}

void EmojiInfo::SharedDtor() {
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EmojiInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmojiInfo::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmojiInfo& EmojiInfo::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmojiInfo* EmojiInfo::New(::google::protobuf::Arena* arena) const {
  EmojiInfo* n = new EmojiInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmojiInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EmojiInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_md5()) {
      GOOGLE_DCHECK(!md5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*md5_.UnsafeRawStringPointer())->clear();
    }
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmojiInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EmojiInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Md5 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmojiInfo.Md5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmojiInfo.Url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EmojiInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EmojiInfo)
  return false;
#undef DO_
}

void EmojiInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EmojiInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Md5 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiInfo.Md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->md5(), output);
  }

  // optional string Url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiInfo.Url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EmojiInfo)
}

::google::protobuf::uint8* EmojiInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EmojiInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Md5 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiInfo.Md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->md5(), target);
  }

  // optional string Url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiInfo.Url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EmojiInfo)
  return target;
}

size_t EmojiInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EmojiInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string Md5 = 1;
  if (has_md5()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->md5());
  }
  // optional string Url = 2;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmojiInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EmojiInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EmojiInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmojiInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EmojiInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EmojiInfo)
    MergeFrom(*source);
  }
}

void EmojiInfo::MergeFrom(const EmojiInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EmojiInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_md5();
      md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
  }
}

void EmojiInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EmojiInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmojiInfo::CopyFrom(const EmojiInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EmojiInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmojiInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void EmojiInfo::Swap(EmojiInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmojiInfo::InternalSwap(EmojiInfo* other) {
  md5_.Swap(&other->md5_);
  url_.Swap(&other->url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmojiInfo::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmojiInfo

// required string Md5 = 1;
bool EmojiInfo::has_md5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmojiInfo::set_has_md5() {
  _has_bits_[0] |= 0x00000001u;
}
void EmojiInfo::clear_has_md5() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmojiInfo::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
const ::std::string& EmojiInfo::md5() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiInfo.Md5)
  return md5_.GetNoArena();
}
void EmojiInfo::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiInfo.Md5)
}
#if LANG_CXX11
void EmojiInfo::set_md5(::std::string&& value) {
  set_has_md5();
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiInfo.Md5)
}
#endif
void EmojiInfo::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiInfo.Md5)
}
void EmojiInfo::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiInfo.Md5)
}
::std::string* EmojiInfo::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiInfo.Md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmojiInfo::release_md5() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiInfo.Md5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmojiInfo::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiInfo.Md5)
}

// optional string Url = 2;
bool EmojiInfo::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmojiInfo::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void EmojiInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmojiInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& EmojiInfo::url() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiInfo.Url)
  return url_.GetNoArena();
}
void EmojiInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiInfo.Url)
}
#if LANG_CXX11
void EmojiInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiInfo.Url)
}
#endif
void EmojiInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiInfo.Url)
}
void EmojiInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiInfo.Url)
}
::std::string* EmojiInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiInfo.Url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmojiInfo::release_url() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiInfo.Url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmojiInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiInfo.Url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchEmojiDownLoadResponse::kBaseResponseFieldNumber;
const int BatchEmojiDownLoadResponse::kIndexFieldNumber;
const int BatchEmojiDownLoadResponse::kMd5ListFieldNumber;
const int BatchEmojiDownLoadResponse::kEndFlagFieldNumber;
const int BatchEmojiDownLoadResponse::kEmojiListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchEmojiDownLoadResponse::BatchEmojiDownLoadResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchEmojiDownLoadResponse)
}
BatchEmojiDownLoadResponse::BatchEmojiDownLoadResponse(const BatchEmojiDownLoadResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      md5list_(from.md5list_),
      emojilist_(from.emojilist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&index_, &from.index_,
    reinterpret_cast<char*>(&endflag_) -
    reinterpret_cast<char*>(&index_) + sizeof(endflag_));
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchEmojiDownLoadResponse)
}

void BatchEmojiDownLoadResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&endflag_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(endflag_));
}

BatchEmojiDownLoadResponse::~BatchEmojiDownLoadResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BatchEmojiDownLoadResponse)
  SharedDtor();
}

void BatchEmojiDownLoadResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BatchEmojiDownLoadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchEmojiDownLoadResponse::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchEmojiDownLoadResponse& BatchEmojiDownLoadResponse::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchEmojiDownLoadResponse* BatchEmojiDownLoadResponse::New(::google::protobuf::Arena* arena) const {
  BatchEmojiDownLoadResponse* n = new BatchEmojiDownLoadResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchEmojiDownLoadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchEmojiDownLoadResponse)
  md5list_.Clear();
  emojilist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&index_, 0, reinterpret_cast<char*>(&endflag_) -
      reinterpret_cast<char*>(&index_) + sizeof(endflag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchEmojiDownLoadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchEmojiDownLoadResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string Md5List = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_md5list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5list(this->md5list_size() - 1).data(),
            this->md5list(this->md5list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BatchEmojiDownLoadResponse.Md5List");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 EndFlag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_endflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.EmojiInfo EmojiList = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_emojilist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchEmojiDownLoadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchEmojiDownLoadResponse)
  return false;
#undef DO_
}

void BatchEmojiDownLoadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchEmojiDownLoadResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // repeated string Md5List = 3;
  for (int i = 0, n = this->md5list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5list(i).data(), this->md5list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BatchEmojiDownLoadResponse.Md5List");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->md5list(i), output);
  }

  // required uint32 EndFlag = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->endflag(), output);
  }

  // repeated .micromsg.EmojiInfo EmojiList = 5;
  for (unsigned int i = 0, n = this->emojilist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->emojilist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchEmojiDownLoadResponse)
}

::google::protobuf::uint8* BatchEmojiDownLoadResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchEmojiDownLoadResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // repeated string Md5List = 3;
  for (int i = 0, n = this->md5list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5list(i).data(), this->md5list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BatchEmojiDownLoadResponse.Md5List");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->md5list(i), target);
  }

  // required uint32 EndFlag = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->endflag(), target);
  }

  // repeated .micromsg.EmojiInfo EmojiList = 5;
  for (unsigned int i = 0, n = this->emojilist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->emojilist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchEmojiDownLoadResponse)
  return target;
}

size_t BatchEmojiDownLoadResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BatchEmojiDownLoadResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_index()) {
    // required uint32 Index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  if (has_endflag()) {
    // required uint32 EndFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());
  }

  return total_size;
}
size_t BatchEmojiDownLoadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchEmojiDownLoadResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());

    // required uint32 EndFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string Md5List = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->md5list_size());
  for (int i = 0, n = this->md5list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->md5list(i));
  }

  // repeated .micromsg.EmojiInfo EmojiList = 5;
  {
    unsigned int count = this->emojilist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emojilist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchEmojiDownLoadResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchEmojiDownLoadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchEmojiDownLoadResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchEmojiDownLoadResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchEmojiDownLoadResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchEmojiDownLoadResponse)
    MergeFrom(*source);
  }
}

void BatchEmojiDownLoadResponse::MergeFrom(const BatchEmojiDownLoadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchEmojiDownLoadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  md5list_.MergeFrom(from.md5list_);
  emojilist_.MergeFrom(from.emojilist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000004u) {
      endflag_ = from.endflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchEmojiDownLoadResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchEmojiDownLoadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchEmojiDownLoadResponse::CopyFrom(const BatchEmojiDownLoadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchEmojiDownLoadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchEmojiDownLoadResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->emojilist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BatchEmojiDownLoadResponse::Swap(BatchEmojiDownLoadResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchEmojiDownLoadResponse::InternalSwap(BatchEmojiDownLoadResponse* other) {
  md5list_.InternalSwap(&other->md5list_);
  emojilist_.InternalSwap(&other->emojilist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(index_, other->index_);
  std::swap(endflag_, other->endflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchEmojiDownLoadResponse::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchEmojiDownLoadResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BatchEmojiDownLoadResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchEmojiDownLoadResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchEmojiDownLoadResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchEmojiDownLoadResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BatchEmojiDownLoadResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchEmojiDownLoadResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BatchEmojiDownLoadResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchEmojiDownLoadResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BatchEmojiDownLoadResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BatchEmojiDownLoadResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BatchEmojiDownLoadResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchEmojiDownLoadResponse.BaseResponse)
}

// required uint32 Index = 2;
bool BatchEmojiDownLoadResponse::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchEmojiDownLoadResponse::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchEmojiDownLoadResponse::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchEmojiDownLoadResponse::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 BatchEmojiDownLoadResponse::index() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchEmojiDownLoadResponse.Index)
  return index_;
}
void BatchEmojiDownLoadResponse::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchEmojiDownLoadResponse.Index)
}

// repeated string Md5List = 3;
int BatchEmojiDownLoadResponse::md5list_size() const {
  return md5list_.size();
}
void BatchEmojiDownLoadResponse::clear_md5list() {
  md5list_.Clear();
}
const ::std::string& BatchEmojiDownLoadResponse::md5list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchEmojiDownLoadResponse.Md5List)
  return md5list_.Get(index);
}
::std::string* BatchEmojiDownLoadResponse::mutable_md5list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchEmojiDownLoadResponse.Md5List)
  return md5list_.Mutable(index);
}
void BatchEmojiDownLoadResponse::set_md5list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.BatchEmojiDownLoadResponse.Md5List)
  md5list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void BatchEmojiDownLoadResponse::set_md5list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.BatchEmojiDownLoadResponse.Md5List)
  md5list_.Mutable(index)->assign(std::move(value));
}
#endif
void BatchEmojiDownLoadResponse::set_md5list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.BatchEmojiDownLoadResponse.Md5List)
}
void BatchEmojiDownLoadResponse::set_md5list(int index, const char* value, size_t size) {
  md5list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.BatchEmojiDownLoadResponse.Md5List)
}
::std::string* BatchEmojiDownLoadResponse::add_md5list() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.BatchEmojiDownLoadResponse.Md5List)
  return md5list_.Add();
}
void BatchEmojiDownLoadResponse::add_md5list(const ::std::string& value) {
  md5list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.BatchEmojiDownLoadResponse.Md5List)
}
#if LANG_CXX11
void BatchEmojiDownLoadResponse::add_md5list(::std::string&& value) {
  md5list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.BatchEmojiDownLoadResponse.Md5List)
}
#endif
void BatchEmojiDownLoadResponse::add_md5list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.BatchEmojiDownLoadResponse.Md5List)
}
void BatchEmojiDownLoadResponse::add_md5list(const char* value, size_t size) {
  md5list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.BatchEmojiDownLoadResponse.Md5List)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchEmojiDownLoadResponse::md5list() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchEmojiDownLoadResponse.Md5List)
  return md5list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BatchEmojiDownLoadResponse::mutable_md5list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchEmojiDownLoadResponse.Md5List)
  return &md5list_;
}

// required uint32 EndFlag = 4;
bool BatchEmojiDownLoadResponse::has_endflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BatchEmojiDownLoadResponse::set_has_endflag() {
  _has_bits_[0] |= 0x00000004u;
}
void BatchEmojiDownLoadResponse::clear_has_endflag() {
  _has_bits_[0] &= ~0x00000004u;
}
void BatchEmojiDownLoadResponse::clear_endflag() {
  endflag_ = 0u;
  clear_has_endflag();
}
::google::protobuf::uint32 BatchEmojiDownLoadResponse::endflag() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchEmojiDownLoadResponse.EndFlag)
  return endflag_;
}
void BatchEmojiDownLoadResponse::set_endflag(::google::protobuf::uint32 value) {
  set_has_endflag();
  endflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchEmojiDownLoadResponse.EndFlag)
}

// repeated .micromsg.EmojiInfo EmojiList = 5;
int BatchEmojiDownLoadResponse::emojilist_size() const {
  return emojilist_.size();
}
void BatchEmojiDownLoadResponse::clear_emojilist() {
  emojilist_.Clear();
}
const ::micromsg::EmojiInfo& BatchEmojiDownLoadResponse::emojilist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchEmojiDownLoadResponse.EmojiList)
  return emojilist_.Get(index);
}
::micromsg::EmojiInfo* BatchEmojiDownLoadResponse::mutable_emojilist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchEmojiDownLoadResponse.EmojiList)
  return emojilist_.Mutable(index);
}
::micromsg::EmojiInfo* BatchEmojiDownLoadResponse::add_emojilist() {
  // @@protoc_insertion_point(field_add:micromsg.BatchEmojiDownLoadResponse.EmojiList)
  return emojilist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::EmojiInfo >*
BatchEmojiDownLoadResponse::mutable_emojilist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchEmojiDownLoadResponse.EmojiList)
  return &emojilist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiInfo >&
BatchEmojiDownLoadResponse::emojilist() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchEmojiDownLoadResponse.EmojiList)
  return emojilist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupEmojiOperateRequest::kMd5ListFieldNumber;
const int BackupEmojiOperateRequest::kOpcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupEmojiOperateRequest::BackupEmojiOperateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BackupEmojiOperateRequest)
}
BackupEmojiOperateRequest::BackupEmojiOperateRequest(const BackupEmojiOperateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      md5list_(from.md5list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  opcode_ = from.opcode_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BackupEmojiOperateRequest)
}

void BackupEmojiOperateRequest::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0u;
}

BackupEmojiOperateRequest::~BackupEmojiOperateRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BackupEmojiOperateRequest)
  SharedDtor();
}

void BackupEmojiOperateRequest::SharedDtor() {
}

void BackupEmojiOperateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupEmojiOperateRequest::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackupEmojiOperateRequest& BackupEmojiOperateRequest::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackupEmojiOperateRequest* BackupEmojiOperateRequest::New(::google::protobuf::Arena* arena) const {
  BackupEmojiOperateRequest* n = new BackupEmojiOperateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackupEmojiOperateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BackupEmojiOperateRequest)
  md5list_.Clear();
  opcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BackupEmojiOperateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BackupEmojiOperateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string Md5List = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_md5list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5list(this->md5list_size() - 1).data(),
            this->md5list(this->md5list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BackupEmojiOperateRequest.Md5List");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Opcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BackupEmojiOperateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BackupEmojiOperateRequest)
  return false;
#undef DO_
}

void BackupEmojiOperateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BackupEmojiOperateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string Md5List = 1;
  for (int i = 0, n = this->md5list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5list(i).data(), this->md5list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupEmojiOperateRequest.Md5List");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->md5list(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required uint32 Opcode = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BackupEmojiOperateRequest)
}

::google::protobuf::uint8* BackupEmojiOperateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BackupEmojiOperateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string Md5List = 1;
  for (int i = 0, n = this->md5list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5list(i).data(), this->md5list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupEmojiOperateRequest.Md5List");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->md5list(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required uint32 Opcode = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BackupEmojiOperateRequest)
  return target;
}

size_t BackupEmojiOperateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BackupEmojiOperateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Opcode = 2;
  if (has_opcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }
  // repeated string Md5List = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->md5list_size());
  for (int i = 0, n = this->md5list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->md5list(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupEmojiOperateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BackupEmojiOperateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupEmojiOperateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupEmojiOperateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BackupEmojiOperateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BackupEmojiOperateRequest)
    MergeFrom(*source);
  }
}

void BackupEmojiOperateRequest::MergeFrom(const BackupEmojiOperateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BackupEmojiOperateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  md5list_.MergeFrom(from.md5list_);
  if (from.has_opcode()) {
    set_opcode(from.opcode());
  }
}

void BackupEmojiOperateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BackupEmojiOperateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupEmojiOperateRequest::CopyFrom(const BackupEmojiOperateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BackupEmojiOperateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupEmojiOperateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void BackupEmojiOperateRequest::Swap(BackupEmojiOperateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupEmojiOperateRequest::InternalSwap(BackupEmojiOperateRequest* other) {
  md5list_.InternalSwap(&other->md5list_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackupEmojiOperateRequest::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackupEmojiOperateRequest

// repeated string Md5List = 1;
int BackupEmojiOperateRequest::md5list_size() const {
  return md5list_.size();
}
void BackupEmojiOperateRequest::clear_md5list() {
  md5list_.Clear();
}
const ::std::string& BackupEmojiOperateRequest::md5list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BackupEmojiOperateRequest.Md5List)
  return md5list_.Get(index);
}
::std::string* BackupEmojiOperateRequest::mutable_md5list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BackupEmojiOperateRequest.Md5List)
  return md5list_.Mutable(index);
}
void BackupEmojiOperateRequest::set_md5list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.BackupEmojiOperateRequest.Md5List)
  md5list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void BackupEmojiOperateRequest::set_md5list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.BackupEmojiOperateRequest.Md5List)
  md5list_.Mutable(index)->assign(std::move(value));
}
#endif
void BackupEmojiOperateRequest::set_md5list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.BackupEmojiOperateRequest.Md5List)
}
void BackupEmojiOperateRequest::set_md5list(int index, const char* value, size_t size) {
  md5list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupEmojiOperateRequest.Md5List)
}
::std::string* BackupEmojiOperateRequest::add_md5list() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.BackupEmojiOperateRequest.Md5List)
  return md5list_.Add();
}
void BackupEmojiOperateRequest::add_md5list(const ::std::string& value) {
  md5list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.BackupEmojiOperateRequest.Md5List)
}
#if LANG_CXX11
void BackupEmojiOperateRequest::add_md5list(::std::string&& value) {
  md5list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.BackupEmojiOperateRequest.Md5List)
}
#endif
void BackupEmojiOperateRequest::add_md5list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.BackupEmojiOperateRequest.Md5List)
}
void BackupEmojiOperateRequest::add_md5list(const char* value, size_t size) {
  md5list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.BackupEmojiOperateRequest.Md5List)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BackupEmojiOperateRequest::md5list() const {
  // @@protoc_insertion_point(field_list:micromsg.BackupEmojiOperateRequest.Md5List)
  return md5list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BackupEmojiOperateRequest::mutable_md5list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BackupEmojiOperateRequest.Md5List)
  return &md5list_;
}

// required uint32 Opcode = 2;
bool BackupEmojiOperateRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BackupEmojiOperateRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
void BackupEmojiOperateRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void BackupEmojiOperateRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 BackupEmojiOperateRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupEmojiOperateRequest.Opcode)
  return opcode_;
}
void BackupEmojiOperateRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupEmojiOperateRequest.Opcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupEmojiOperateResponse::kBaseResponseFieldNumber;
const int BackupEmojiOperateResponse::kNeedUploadMd5ListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupEmojiOperateResponse::BackupEmojiOperateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BackupEmojiOperateResponse)
}
BackupEmojiOperateResponse::BackupEmojiOperateResponse(const BackupEmojiOperateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      needuploadmd5list_(from.needuploadmd5list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.BackupEmojiOperateResponse)
}

void BackupEmojiOperateResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

BackupEmojiOperateResponse::~BackupEmojiOperateResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BackupEmojiOperateResponse)
  SharedDtor();
}

void BackupEmojiOperateResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BackupEmojiOperateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupEmojiOperateResponse::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackupEmojiOperateResponse& BackupEmojiOperateResponse::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackupEmojiOperateResponse* BackupEmojiOperateResponse::New(::google::protobuf::Arena* arena) const {
  BackupEmojiOperateResponse* n = new BackupEmojiOperateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackupEmojiOperateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BackupEmojiOperateResponse)
  needuploadmd5list_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BackupEmojiOperateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BackupEmojiOperateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string NeedUploadMd5List = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_needuploadmd5list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->needuploadmd5list(this->needuploadmd5list_size() - 1).data(),
            this->needuploadmd5list(this->needuploadmd5list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BackupEmojiOperateResponse.NeedUploadMd5List");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BackupEmojiOperateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BackupEmojiOperateResponse)
  return false;
#undef DO_
}

void BackupEmojiOperateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BackupEmojiOperateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // repeated string NeedUploadMd5List = 2;
  for (int i = 0, n = this->needuploadmd5list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->needuploadmd5list(i).data(), this->needuploadmd5list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupEmojiOperateResponse.NeedUploadMd5List");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->needuploadmd5list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BackupEmojiOperateResponse)
}

::google::protobuf::uint8* BackupEmojiOperateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BackupEmojiOperateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // repeated string NeedUploadMd5List = 2;
  for (int i = 0, n = this->needuploadmd5list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->needuploadmd5list(i).data(), this->needuploadmd5list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupEmojiOperateResponse.NeedUploadMd5List");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->needuploadmd5list(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BackupEmojiOperateResponse)
  return target;
}

size_t BackupEmojiOperateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BackupEmojiOperateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // repeated string NeedUploadMd5List = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->needuploadmd5list_size());
  for (int i = 0, n = this->needuploadmd5list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->needuploadmd5list(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupEmojiOperateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BackupEmojiOperateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupEmojiOperateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupEmojiOperateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BackupEmojiOperateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BackupEmojiOperateResponse)
    MergeFrom(*source);
  }
}

void BackupEmojiOperateResponse::MergeFrom(const BackupEmojiOperateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BackupEmojiOperateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  needuploadmd5list_.MergeFrom(from.needuploadmd5list_);
  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void BackupEmojiOperateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BackupEmojiOperateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupEmojiOperateResponse::CopyFrom(const BackupEmojiOperateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BackupEmojiOperateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupEmojiOperateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BackupEmojiOperateResponse::Swap(BackupEmojiOperateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupEmojiOperateResponse::InternalSwap(BackupEmojiOperateResponse* other) {
  needuploadmd5list_.InternalSwap(&other->needuploadmd5list_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackupEmojiOperateResponse::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackupEmojiOperateResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BackupEmojiOperateResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BackupEmojiOperateResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void BackupEmojiOperateResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void BackupEmojiOperateResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BackupEmojiOperateResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupEmojiOperateResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BackupEmojiOperateResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BackupEmojiOperateResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BackupEmojiOperateResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BackupEmojiOperateResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BackupEmojiOperateResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupEmojiOperateResponse.BaseResponse)
}

// repeated string NeedUploadMd5List = 2;
int BackupEmojiOperateResponse::needuploadmd5list_size() const {
  return needuploadmd5list_.size();
}
void BackupEmojiOperateResponse::clear_needuploadmd5list() {
  needuploadmd5list_.Clear();
}
const ::std::string& BackupEmojiOperateResponse::needuploadmd5list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BackupEmojiOperateResponse.NeedUploadMd5List)
  return needuploadmd5list_.Get(index);
}
::std::string* BackupEmojiOperateResponse::mutable_needuploadmd5list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BackupEmojiOperateResponse.NeedUploadMd5List)
  return needuploadmd5list_.Mutable(index);
}
void BackupEmojiOperateResponse::set_needuploadmd5list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.BackupEmojiOperateResponse.NeedUploadMd5List)
  needuploadmd5list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void BackupEmojiOperateResponse::set_needuploadmd5list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.BackupEmojiOperateResponse.NeedUploadMd5List)
  needuploadmd5list_.Mutable(index)->assign(std::move(value));
}
#endif
void BackupEmojiOperateResponse::set_needuploadmd5list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  needuploadmd5list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.BackupEmojiOperateResponse.NeedUploadMd5List)
}
void BackupEmojiOperateResponse::set_needuploadmd5list(int index, const char* value, size_t size) {
  needuploadmd5list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupEmojiOperateResponse.NeedUploadMd5List)
}
::std::string* BackupEmojiOperateResponse::add_needuploadmd5list() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.BackupEmojiOperateResponse.NeedUploadMd5List)
  return needuploadmd5list_.Add();
}
void BackupEmojiOperateResponse::add_needuploadmd5list(const ::std::string& value) {
  needuploadmd5list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.BackupEmojiOperateResponse.NeedUploadMd5List)
}
#if LANG_CXX11
void BackupEmojiOperateResponse::add_needuploadmd5list(::std::string&& value) {
  needuploadmd5list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.BackupEmojiOperateResponse.NeedUploadMd5List)
}
#endif
void BackupEmojiOperateResponse::add_needuploadmd5list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  needuploadmd5list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.BackupEmojiOperateResponse.NeedUploadMd5List)
}
void BackupEmojiOperateResponse::add_needuploadmd5list(const char* value, size_t size) {
  needuploadmd5list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.BackupEmojiOperateResponse.NeedUploadMd5List)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BackupEmojiOperateResponse::needuploadmd5list() const {
  // @@protoc_insertion_point(field_list:micromsg.BackupEmojiOperateResponse.NeedUploadMd5List)
  return needuploadmd5list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BackupEmojiOperateResponse::mutable_needuploadmd5list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BackupEmojiOperateResponse.NeedUploadMd5List)
  return &needuploadmd5list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadEmojiInfoReq::kMD5FieldNumber;
const int UploadEmojiInfoReq::kStartPosFieldNumber;
const int UploadEmojiInfoReq::kTotalLenFieldNumber;
const int UploadEmojiInfoReq::kEmojiBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadEmojiInfoReq::UploadEmojiInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UploadEmojiInfoReq)
}
UploadEmojiInfoReq::UploadEmojiInfoReq(const UploadEmojiInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_md5()) {
    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  emojibuffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_emojibuffer()) {
    emojibuffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emojibuffer_);
  }
  ::memcpy(&startpos_, &from.startpos_,
    reinterpret_cast<char*>(&totallen_) -
    reinterpret_cast<char*>(&startpos_) + sizeof(totallen_));
  // @@protoc_insertion_point(copy_constructor:micromsg.UploadEmojiInfoReq)
}

void UploadEmojiInfoReq::SharedCtor() {
  _cached_size_ = 0;
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  emojibuffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&startpos_, 0, reinterpret_cast<char*>(&totallen_) -
    reinterpret_cast<char*>(&startpos_) + sizeof(totallen_));
}

UploadEmojiInfoReq::~UploadEmojiInfoReq() {
  // @@protoc_insertion_point(destructor:micromsg.UploadEmojiInfoReq)
  SharedDtor();
}

void UploadEmojiInfoReq::SharedDtor() {
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  emojibuffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UploadEmojiInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadEmojiInfoReq::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UploadEmojiInfoReq& UploadEmojiInfoReq::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

UploadEmojiInfoReq* UploadEmojiInfoReq::New(::google::protobuf::Arena* arena) const {
  UploadEmojiInfoReq* n = new UploadEmojiInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadEmojiInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UploadEmojiInfoReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_md5()) {
      GOOGLE_DCHECK(!md5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*md5_.UnsafeRawStringPointer())->clear();
    }
    if (has_emojibuffer()) {
      GOOGLE_DCHECK(!emojibuffer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*emojibuffer_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&startpos_, 0, reinterpret_cast<char*>(&totallen_) -
      reinterpret_cast<char*>(&startpos_) + sizeof(totallen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UploadEmojiInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UploadEmojiInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string MD5 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadEmojiInfoReq.MD5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 StartPos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 TotalLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes EmojiBuffer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_emojibuffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UploadEmojiInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UploadEmojiInfoReq)
  return false;
#undef DO_
}

void UploadEmojiInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UploadEmojiInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string MD5 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadEmojiInfoReq.MD5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->md5(), output);
  }

  // required int32 StartPos = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startpos(), output);
  }

  // required int32 TotalLen = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totallen(), output);
  }

  // required bytes EmojiBuffer = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->emojibuffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UploadEmojiInfoReq)
}

::google::protobuf::uint8* UploadEmojiInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UploadEmojiInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string MD5 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadEmojiInfoReq.MD5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->md5(), target);
  }

  // required int32 StartPos = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->startpos(), target);
  }

  // required int32 TotalLen = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totallen(), target);
  }

  // required bytes EmojiBuffer = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->emojibuffer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UploadEmojiInfoReq)
  return target;
}

size_t UploadEmojiInfoReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.UploadEmojiInfoReq)
  size_t total_size = 0;

  if (has_emojibuffer()) {
    // required bytes EmojiBuffer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->emojibuffer());
  }

  if (has_startpos()) {
    // required int32 StartPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startpos());
  }

  if (has_totallen()) {
    // required int32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totallen());
  }

  return total_size;
}
size_t UploadEmojiInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UploadEmojiInfoReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required bytes EmojiBuffer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->emojibuffer());

    // required int32 StartPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startpos());

    // required int32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totallen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string MD5 = 1;
  if (has_md5()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->md5());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadEmojiInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UploadEmojiInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadEmojiInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadEmojiInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UploadEmojiInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UploadEmojiInfoReq)
    MergeFrom(*source);
  }
}

void UploadEmojiInfoReq::MergeFrom(const UploadEmojiInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UploadEmojiInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_md5();
      md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_emojibuffer();
      emojibuffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emojibuffer_);
    }
    if (cached_has_bits & 0x00000004u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00000008u) {
      totallen_ = from.totallen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UploadEmojiInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UploadEmojiInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadEmojiInfoReq::CopyFrom(const UploadEmojiInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UploadEmojiInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadEmojiInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  return true;
}

void UploadEmojiInfoReq::Swap(UploadEmojiInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadEmojiInfoReq::InternalSwap(UploadEmojiInfoReq* other) {
  md5_.Swap(&other->md5_);
  emojibuffer_.Swap(&other->emojibuffer_);
  std::swap(startpos_, other->startpos_);
  std::swap(totallen_, other->totallen_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadEmojiInfoReq::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadEmojiInfoReq

// optional string MD5 = 1;
bool UploadEmojiInfoReq::has_md5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UploadEmojiInfoReq::set_has_md5() {
  _has_bits_[0] |= 0x00000001u;
}
void UploadEmojiInfoReq::clear_has_md5() {
  _has_bits_[0] &= ~0x00000001u;
}
void UploadEmojiInfoReq::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
const ::std::string& UploadEmojiInfoReq::md5() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiInfoReq.MD5)
  return md5_.GetNoArena();
}
void UploadEmojiInfoReq::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadEmojiInfoReq.MD5)
}
#if LANG_CXX11
void UploadEmojiInfoReq::set_md5(::std::string&& value) {
  set_has_md5();
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadEmojiInfoReq.MD5)
}
#endif
void UploadEmojiInfoReq::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadEmojiInfoReq.MD5)
}
void UploadEmojiInfoReq::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadEmojiInfoReq.MD5)
}
::std::string* UploadEmojiInfoReq::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadEmojiInfoReq.MD5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadEmojiInfoReq::release_md5() {
  // @@protoc_insertion_point(field_release:micromsg.UploadEmojiInfoReq.MD5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadEmojiInfoReq::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadEmojiInfoReq.MD5)
}

// required int32 StartPos = 2;
bool UploadEmojiInfoReq::has_startpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UploadEmojiInfoReq::set_has_startpos() {
  _has_bits_[0] |= 0x00000004u;
}
void UploadEmojiInfoReq::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000004u;
}
void UploadEmojiInfoReq::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
::google::protobuf::int32 UploadEmojiInfoReq::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiInfoReq.StartPos)
  return startpos_;
}
void UploadEmojiInfoReq::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadEmojiInfoReq.StartPos)
}

// required int32 TotalLen = 3;
bool UploadEmojiInfoReq::has_totallen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UploadEmojiInfoReq::set_has_totallen() {
  _has_bits_[0] |= 0x00000008u;
}
void UploadEmojiInfoReq::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000008u;
}
void UploadEmojiInfoReq::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
::google::protobuf::int32 UploadEmojiInfoReq::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiInfoReq.TotalLen)
  return totallen_;
}
void UploadEmojiInfoReq::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadEmojiInfoReq.TotalLen)
}

// required bytes EmojiBuffer = 4;
bool UploadEmojiInfoReq::has_emojibuffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UploadEmojiInfoReq::set_has_emojibuffer() {
  _has_bits_[0] |= 0x00000002u;
}
void UploadEmojiInfoReq::clear_has_emojibuffer() {
  _has_bits_[0] &= ~0x00000002u;
}
void UploadEmojiInfoReq::clear_emojibuffer() {
  emojibuffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_emojibuffer();
}
const ::std::string& UploadEmojiInfoReq::emojibuffer() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiInfoReq.EmojiBuffer)
  return emojibuffer_.GetNoArena();
}
void UploadEmojiInfoReq::set_emojibuffer(const ::std::string& value) {
  set_has_emojibuffer();
  emojibuffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadEmojiInfoReq.EmojiBuffer)
}
#if LANG_CXX11
void UploadEmojiInfoReq::set_emojibuffer(::std::string&& value) {
  set_has_emojibuffer();
  emojibuffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadEmojiInfoReq.EmojiBuffer)
}
#endif
void UploadEmojiInfoReq::set_emojibuffer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_emojibuffer();
  emojibuffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadEmojiInfoReq.EmojiBuffer)
}
void UploadEmojiInfoReq::set_emojibuffer(const void* value, size_t size) {
  set_has_emojibuffer();
  emojibuffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadEmojiInfoReq.EmojiBuffer)
}
::std::string* UploadEmojiInfoReq::mutable_emojibuffer() {
  set_has_emojibuffer();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadEmojiInfoReq.EmojiBuffer)
  return emojibuffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadEmojiInfoReq::release_emojibuffer() {
  // @@protoc_insertion_point(field_release:micromsg.UploadEmojiInfoReq.EmojiBuffer)
  clear_has_emojibuffer();
  return emojibuffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadEmojiInfoReq::set_allocated_emojibuffer(::std::string* emojibuffer) {
  if (emojibuffer != NULL) {
    set_has_emojibuffer();
  } else {
    clear_has_emojibuffer();
  }
  emojibuffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), emojibuffer);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadEmojiInfoReq.EmojiBuffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmojiUploadRequest::kEmojiItemFieldNumber;
const int EmojiUploadRequest::kReqTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmojiUploadRequest::EmojiUploadRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EmojiUploadRequest)
}
EmojiUploadRequest::EmojiUploadRequest(const EmojiUploadRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      emojiitem_(from.emojiitem_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reqtime_ = from.reqtime_;
  // @@protoc_insertion_point(copy_constructor:micromsg.EmojiUploadRequest)
}

void EmojiUploadRequest::SharedCtor() {
  _cached_size_ = 0;
  reqtime_ = 0u;
}

EmojiUploadRequest::~EmojiUploadRequest() {
  // @@protoc_insertion_point(destructor:micromsg.EmojiUploadRequest)
  SharedDtor();
}

void EmojiUploadRequest::SharedDtor() {
}

void EmojiUploadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmojiUploadRequest::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmojiUploadRequest& EmojiUploadRequest::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmojiUploadRequest* EmojiUploadRequest::New(::google::protobuf::Arena* arena) const {
  EmojiUploadRequest* n = new EmojiUploadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmojiUploadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EmojiUploadRequest)
  emojiitem_.Clear();
  reqtime_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmojiUploadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EmojiUploadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .micromsg.UploadEmojiInfoReq EmojiItem = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_emojiitem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ReqTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_reqtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EmojiUploadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EmojiUploadRequest)
  return false;
#undef DO_
}

void EmojiUploadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EmojiUploadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .micromsg.UploadEmojiInfoReq EmojiItem = 1;
  for (unsigned int i = 0, n = this->emojiitem_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->emojiitem(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 ReqTime = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reqtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EmojiUploadRequest)
}

::google::protobuf::uint8* EmojiUploadRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EmojiUploadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .micromsg.UploadEmojiInfoReq EmojiItem = 1;
  for (unsigned int i = 0, n = this->emojiitem_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->emojiitem(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 ReqTime = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reqtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EmojiUploadRequest)
  return target;
}

size_t EmojiUploadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EmojiUploadRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .micromsg.UploadEmojiInfoReq EmojiItem = 1;
  {
    unsigned int count = this->emojiitem_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emojiitem(i));
    }
  }

  // optional uint32 ReqTime = 2;
  if (has_reqtime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reqtime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmojiUploadRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EmojiUploadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EmojiUploadRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmojiUploadRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EmojiUploadRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EmojiUploadRequest)
    MergeFrom(*source);
  }
}

void EmojiUploadRequest::MergeFrom(const EmojiUploadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EmojiUploadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emojiitem_.MergeFrom(from.emojiitem_);
  if (from.has_reqtime()) {
    set_reqtime(from.reqtime());
  }
}

void EmojiUploadRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EmojiUploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmojiUploadRequest::CopyFrom(const EmojiUploadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EmojiUploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmojiUploadRequest::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->emojiitem())) return false;
  return true;
}

void EmojiUploadRequest::Swap(EmojiUploadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmojiUploadRequest::InternalSwap(EmojiUploadRequest* other) {
  emojiitem_.InternalSwap(&other->emojiitem_);
  std::swap(reqtime_, other->reqtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmojiUploadRequest::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmojiUploadRequest

// repeated .micromsg.UploadEmojiInfoReq EmojiItem = 1;
int EmojiUploadRequest::emojiitem_size() const {
  return emojiitem_.size();
}
void EmojiUploadRequest::clear_emojiitem() {
  emojiitem_.Clear();
}
const ::micromsg::UploadEmojiInfoReq& EmojiUploadRequest::emojiitem(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadRequest.EmojiItem)
  return emojiitem_.Get(index);
}
::micromsg::UploadEmojiInfoReq* EmojiUploadRequest::mutable_emojiitem(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiUploadRequest.EmojiItem)
  return emojiitem_.Mutable(index);
}
::micromsg::UploadEmojiInfoReq* EmojiUploadRequest::add_emojiitem() {
  // @@protoc_insertion_point(field_add:micromsg.EmojiUploadRequest.EmojiItem)
  return emojiitem_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::UploadEmojiInfoReq >*
EmojiUploadRequest::mutable_emojiitem() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.EmojiUploadRequest.EmojiItem)
  return &emojiitem_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::UploadEmojiInfoReq >&
EmojiUploadRequest::emojiitem() const {
  // @@protoc_insertion_point(field_list:micromsg.EmojiUploadRequest.EmojiItem)
  return emojiitem_;
}

// optional uint32 ReqTime = 2;
bool EmojiUploadRequest::has_reqtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmojiUploadRequest::set_has_reqtime() {
  _has_bits_[0] |= 0x00000001u;
}
void EmojiUploadRequest::clear_has_reqtime() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmojiUploadRequest::clear_reqtime() {
  reqtime_ = 0u;
  clear_has_reqtime();
}
::google::protobuf::uint32 EmojiUploadRequest::reqtime() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadRequest.ReqTime)
  return reqtime_;
}
void EmojiUploadRequest::set_reqtime(::google::protobuf::uint32 value) {
  set_has_reqtime();
  reqtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadRequest.ReqTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadEmojiInfoResp::kRetFieldNumber;
const int UploadEmojiInfoResp::kStartPosFieldNumber;
const int UploadEmojiInfoResp::kTotalLenFieldNumber;
const int UploadEmojiInfoResp::kMD5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadEmojiInfoResp::UploadEmojiInfoResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UploadEmojiInfoResp)
}
UploadEmojiInfoResp::UploadEmojiInfoResp(const UploadEmojiInfoResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_md5()) {
    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  ::memcpy(&ret_, &from.ret_,
    reinterpret_cast<char*>(&totallen_) -
    reinterpret_cast<char*>(&ret_) + sizeof(totallen_));
  // @@protoc_insertion_point(copy_constructor:micromsg.UploadEmojiInfoResp)
}

void UploadEmojiInfoResp::SharedCtor() {
  _cached_size_ = 0;
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ret_, 0, reinterpret_cast<char*>(&totallen_) -
    reinterpret_cast<char*>(&ret_) + sizeof(totallen_));
}

UploadEmojiInfoResp::~UploadEmojiInfoResp() {
  // @@protoc_insertion_point(destructor:micromsg.UploadEmojiInfoResp)
  SharedDtor();
}

void UploadEmojiInfoResp::SharedDtor() {
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UploadEmojiInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadEmojiInfoResp::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UploadEmojiInfoResp& UploadEmojiInfoResp::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

UploadEmojiInfoResp* UploadEmojiInfoResp::New(::google::protobuf::Arena* arena) const {
  UploadEmojiInfoResp* n = new UploadEmojiInfoResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadEmojiInfoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UploadEmojiInfoResp)
  if (has_md5()) {
    GOOGLE_DCHECK(!md5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*md5_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&ret_, 0, reinterpret_cast<char*>(&totallen_) -
      reinterpret_cast<char*>(&ret_) + sizeof(totallen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UploadEmojiInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UploadEmojiInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 StartPos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 TotalLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MD5 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadEmojiInfoResp.MD5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UploadEmojiInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UploadEmojiInfoResp)
  return false;
#undef DO_
}

void UploadEmojiInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UploadEmojiInfoResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required int32 StartPos = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startpos(), output);
  }

  // required int32 TotalLen = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totallen(), output);
  }

  // optional string MD5 = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadEmojiInfoResp.MD5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->md5(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UploadEmojiInfoResp)
}

::google::protobuf::uint8* UploadEmojiInfoResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UploadEmojiInfoResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required int32 StartPos = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->startpos(), target);
  }

  // required int32 TotalLen = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totallen(), target);
  }

  // optional string MD5 = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadEmojiInfoResp.MD5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->md5(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UploadEmojiInfoResp)
  return target;
}

size_t UploadEmojiInfoResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.UploadEmojiInfoResp)
  size_t total_size = 0;

  if (has_ret()) {
    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_startpos()) {
    // required int32 StartPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startpos());
  }

  if (has_totallen()) {
    // required int32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totallen());
  }

  return total_size;
}
size_t UploadEmojiInfoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UploadEmojiInfoResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required int32 StartPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startpos());

    // required int32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totallen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string MD5 = 4;
  if (has_md5()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->md5());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadEmojiInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UploadEmojiInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadEmojiInfoResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadEmojiInfoResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UploadEmojiInfoResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UploadEmojiInfoResp)
    MergeFrom(*source);
  }
}

void UploadEmojiInfoResp::MergeFrom(const UploadEmojiInfoResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UploadEmojiInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_md5();
      md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000004u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00000008u) {
      totallen_ = from.totallen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UploadEmojiInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UploadEmojiInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadEmojiInfoResp::CopyFrom(const UploadEmojiInfoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UploadEmojiInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadEmojiInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  return true;
}

void UploadEmojiInfoResp::Swap(UploadEmojiInfoResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadEmojiInfoResp::InternalSwap(UploadEmojiInfoResp* other) {
  md5_.Swap(&other->md5_);
  std::swap(ret_, other->ret_);
  std::swap(startpos_, other->startpos_);
  std::swap(totallen_, other->totallen_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadEmojiInfoResp::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadEmojiInfoResp

// required int32 Ret = 1;
bool UploadEmojiInfoResp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UploadEmojiInfoResp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void UploadEmojiInfoResp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void UploadEmojiInfoResp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::google::protobuf::int32 UploadEmojiInfoResp::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiInfoResp.Ret)
  return ret_;
}
void UploadEmojiInfoResp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadEmojiInfoResp.Ret)
}

// required int32 StartPos = 2;
bool UploadEmojiInfoResp::has_startpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UploadEmojiInfoResp::set_has_startpos() {
  _has_bits_[0] |= 0x00000004u;
}
void UploadEmojiInfoResp::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000004u;
}
void UploadEmojiInfoResp::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
::google::protobuf::int32 UploadEmojiInfoResp::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiInfoResp.StartPos)
  return startpos_;
}
void UploadEmojiInfoResp::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadEmojiInfoResp.StartPos)
}

// required int32 TotalLen = 3;
bool UploadEmojiInfoResp::has_totallen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UploadEmojiInfoResp::set_has_totallen() {
  _has_bits_[0] |= 0x00000008u;
}
void UploadEmojiInfoResp::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000008u;
}
void UploadEmojiInfoResp::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
::google::protobuf::int32 UploadEmojiInfoResp::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiInfoResp.TotalLen)
  return totallen_;
}
void UploadEmojiInfoResp::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadEmojiInfoResp.TotalLen)
}

// optional string MD5 = 4;
bool UploadEmojiInfoResp::has_md5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UploadEmojiInfoResp::set_has_md5() {
  _has_bits_[0] |= 0x00000001u;
}
void UploadEmojiInfoResp::clear_has_md5() {
  _has_bits_[0] &= ~0x00000001u;
}
void UploadEmojiInfoResp::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
const ::std::string& UploadEmojiInfoResp::md5() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiInfoResp.MD5)
  return md5_.GetNoArena();
}
void UploadEmojiInfoResp::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadEmojiInfoResp.MD5)
}
#if LANG_CXX11
void UploadEmojiInfoResp::set_md5(::std::string&& value) {
  set_has_md5();
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadEmojiInfoResp.MD5)
}
#endif
void UploadEmojiInfoResp::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadEmojiInfoResp.MD5)
}
void UploadEmojiInfoResp::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadEmojiInfoResp.MD5)
}
::std::string* UploadEmojiInfoResp::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadEmojiInfoResp.MD5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadEmojiInfoResp::release_md5() {
  // @@protoc_insertion_point(field_release:micromsg.UploadEmojiInfoResp.MD5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadEmojiInfoResp::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadEmojiInfoResp.MD5)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmojiUploadResponse::kBaseResponseFieldNumber;
const int EmojiUploadResponse::kEmojiItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmojiUploadResponse::EmojiUploadResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EmojiUploadResponse)
}
EmojiUploadResponse::EmojiUploadResponse(const EmojiUploadResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      emojiitem_(from.emojiitem_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.EmojiUploadResponse)
}

void EmojiUploadResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

EmojiUploadResponse::~EmojiUploadResponse() {
  // @@protoc_insertion_point(destructor:micromsg.EmojiUploadResponse)
  SharedDtor();
}

void EmojiUploadResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void EmojiUploadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmojiUploadResponse::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmojiUploadResponse& EmojiUploadResponse::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmojiUploadResponse* EmojiUploadResponse::New(::google::protobuf::Arena* arena) const {
  EmojiUploadResponse* n = new EmojiUploadResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmojiUploadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EmojiUploadResponse)
  emojiitem_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmojiUploadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EmojiUploadResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.UploadEmojiInfoResp EmojiItem = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_emojiitem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EmojiUploadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EmojiUploadResponse)
  return false;
#undef DO_
}

void EmojiUploadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EmojiUploadResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // repeated .micromsg.UploadEmojiInfoResp EmojiItem = 2;
  for (unsigned int i = 0, n = this->emojiitem_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->emojiitem(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EmojiUploadResponse)
}

::google::protobuf::uint8* EmojiUploadResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EmojiUploadResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // repeated .micromsg.UploadEmojiInfoResp EmojiItem = 2;
  for (unsigned int i = 0, n = this->emojiitem_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->emojiitem(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EmojiUploadResponse)
  return target;
}

size_t EmojiUploadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EmojiUploadResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // repeated .micromsg.UploadEmojiInfoResp EmojiItem = 2;
  {
    unsigned int count = this->emojiitem_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emojiitem(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmojiUploadResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EmojiUploadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EmojiUploadResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmojiUploadResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EmojiUploadResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EmojiUploadResponse)
    MergeFrom(*source);
  }
}

void EmojiUploadResponse::MergeFrom(const EmojiUploadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EmojiUploadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emojiitem_.MergeFrom(from.emojiitem_);
  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void EmojiUploadResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EmojiUploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmojiUploadResponse::CopyFrom(const EmojiUploadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EmojiUploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmojiUploadResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->emojiitem())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void EmojiUploadResponse::Swap(EmojiUploadResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmojiUploadResponse::InternalSwap(EmojiUploadResponse* other) {
  emojiitem_.InternalSwap(&other->emojiitem_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmojiUploadResponse::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmojiUploadResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool EmojiUploadResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmojiUploadResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void EmojiUploadResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmojiUploadResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& EmojiUploadResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* EmojiUploadResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiUploadResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* EmojiUploadResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiUploadResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void EmojiUploadResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiUploadResponse.BaseResponse)
}

// repeated .micromsg.UploadEmojiInfoResp EmojiItem = 2;
int EmojiUploadResponse::emojiitem_size() const {
  return emojiitem_.size();
}
void EmojiUploadResponse::clear_emojiitem() {
  emojiitem_.Clear();
}
const ::micromsg::UploadEmojiInfoResp& EmojiUploadResponse::emojiitem(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadResponse.EmojiItem)
  return emojiitem_.Get(index);
}
::micromsg::UploadEmojiInfoResp* EmojiUploadResponse::mutable_emojiitem(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiUploadResponse.EmojiItem)
  return emojiitem_.Mutable(index);
}
::micromsg::UploadEmojiInfoResp* EmojiUploadResponse::add_emojiitem() {
  // @@protoc_insertion_point(field_add:micromsg.EmojiUploadResponse.EmojiItem)
  return emojiitem_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::UploadEmojiInfoResp >*
EmojiUploadResponse::mutable_emojiitem() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.EmojiUploadResponse.EmojiItem)
  return &emojiitem_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::UploadEmojiInfoResp >&
EmojiUploadResponse::emojiitem() const {
  // @@protoc_insertion_point(field_list:micromsg.EmojiUploadResponse.EmojiItem)
  return emojiitem_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadMyPanelListRequest::kOpCodeFieldNumber;
const int UploadMyPanelListRequest::kProductIDListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadMyPanelListRequest::UploadMyPanelListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UploadMyPanelListRequest)
}
UploadMyPanelListRequest::UploadMyPanelListRequest(const UploadMyPanelListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      productidlist_(from.productidlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  opcode_ = from.opcode_;
  // @@protoc_insertion_point(copy_constructor:micromsg.UploadMyPanelListRequest)
}

void UploadMyPanelListRequest::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0u;
}

UploadMyPanelListRequest::~UploadMyPanelListRequest() {
  // @@protoc_insertion_point(destructor:micromsg.UploadMyPanelListRequest)
  SharedDtor();
}

void UploadMyPanelListRequest::SharedDtor() {
}

void UploadMyPanelListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadMyPanelListRequest::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UploadMyPanelListRequest& UploadMyPanelListRequest::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

UploadMyPanelListRequest* UploadMyPanelListRequest::New(::google::protobuf::Arena* arena) const {
  UploadMyPanelListRequest* n = new UploadMyPanelListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadMyPanelListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UploadMyPanelListRequest)
  productidlist_.Clear();
  opcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UploadMyPanelListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UploadMyPanelListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 OpCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string ProductIDList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_productidlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productidlist(this->productidlist_size() - 1).data(),
            this->productidlist(this->productidlist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadMyPanelListRequest.ProductIDList");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UploadMyPanelListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UploadMyPanelListRequest)
  return false;
#undef DO_
}

void UploadMyPanelListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UploadMyPanelListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 OpCode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->opcode(), output);
  }

  // repeated string ProductIDList = 2;
  for (int i = 0, n = this->productidlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productidlist(i).data(), this->productidlist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMyPanelListRequest.ProductIDList");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->productidlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UploadMyPanelListRequest)
}

::google::protobuf::uint8* UploadMyPanelListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UploadMyPanelListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 OpCode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->opcode(), target);
  }

  // repeated string ProductIDList = 2;
  for (int i = 0, n = this->productidlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productidlist(i).data(), this->productidlist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMyPanelListRequest.ProductIDList");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->productidlist(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UploadMyPanelListRequest)
  return target;
}

size_t UploadMyPanelListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UploadMyPanelListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 OpCode = 1;
  if (has_opcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }
  // repeated string ProductIDList = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->productidlist_size());
  for (int i = 0, n = this->productidlist_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->productidlist(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadMyPanelListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UploadMyPanelListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadMyPanelListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadMyPanelListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UploadMyPanelListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UploadMyPanelListRequest)
    MergeFrom(*source);
  }
}

void UploadMyPanelListRequest::MergeFrom(const UploadMyPanelListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UploadMyPanelListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  productidlist_.MergeFrom(from.productidlist_);
  if (from.has_opcode()) {
    set_opcode(from.opcode());
  }
}

void UploadMyPanelListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UploadMyPanelListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadMyPanelListRequest::CopyFrom(const UploadMyPanelListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UploadMyPanelListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadMyPanelListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UploadMyPanelListRequest::Swap(UploadMyPanelListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadMyPanelListRequest::InternalSwap(UploadMyPanelListRequest* other) {
  productidlist_.InternalSwap(&other->productidlist_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadMyPanelListRequest::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadMyPanelListRequest

// required uint32 OpCode = 1;
bool UploadMyPanelListRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UploadMyPanelListRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
void UploadMyPanelListRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void UploadMyPanelListRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 UploadMyPanelListRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMyPanelListRequest.OpCode)
  return opcode_;
}
void UploadMyPanelListRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMyPanelListRequest.OpCode)
}

// repeated string ProductIDList = 2;
int UploadMyPanelListRequest::productidlist_size() const {
  return productidlist_.size();
}
void UploadMyPanelListRequest::clear_productidlist() {
  productidlist_.Clear();
}
const ::std::string& UploadMyPanelListRequest::productidlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMyPanelListRequest.ProductIDList)
  return productidlist_.Get(index);
}
::std::string* UploadMyPanelListRequest::mutable_productidlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMyPanelListRequest.ProductIDList)
  return productidlist_.Mutable(index);
}
void UploadMyPanelListRequest::set_productidlist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.UploadMyPanelListRequest.ProductIDList)
  productidlist_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void UploadMyPanelListRequest::set_productidlist(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.UploadMyPanelListRequest.ProductIDList)
  productidlist_.Mutable(index)->assign(std::move(value));
}
#endif
void UploadMyPanelListRequest::set_productidlist(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  productidlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.UploadMyPanelListRequest.ProductIDList)
}
void UploadMyPanelListRequest::set_productidlist(int index, const char* value, size_t size) {
  productidlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadMyPanelListRequest.ProductIDList)
}
::std::string* UploadMyPanelListRequest::add_productidlist() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.UploadMyPanelListRequest.ProductIDList)
  return productidlist_.Add();
}
void UploadMyPanelListRequest::add_productidlist(const ::std::string& value) {
  productidlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.UploadMyPanelListRequest.ProductIDList)
}
#if LANG_CXX11
void UploadMyPanelListRequest::add_productidlist(::std::string&& value) {
  productidlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.UploadMyPanelListRequest.ProductIDList)
}
#endif
void UploadMyPanelListRequest::add_productidlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  productidlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.UploadMyPanelListRequest.ProductIDList)
}
void UploadMyPanelListRequest::add_productidlist(const char* value, size_t size) {
  productidlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.UploadMyPanelListRequest.ProductIDList)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
UploadMyPanelListRequest::productidlist() const {
  // @@protoc_insertion_point(field_list:micromsg.UploadMyPanelListRequest.ProductIDList)
  return productidlist_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
UploadMyPanelListRequest::mutable_productidlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.UploadMyPanelListRequest.ProductIDList)
  return &productidlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadMyPanelListResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadMyPanelListResponse::UploadMyPanelListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UploadMyPanelListResponse)
}
UploadMyPanelListResponse::UploadMyPanelListResponse(const UploadMyPanelListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.UploadMyPanelListResponse)
}

void UploadMyPanelListResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

UploadMyPanelListResponse::~UploadMyPanelListResponse() {
  // @@protoc_insertion_point(destructor:micromsg.UploadMyPanelListResponse)
  SharedDtor();
}

void UploadMyPanelListResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void UploadMyPanelListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadMyPanelListResponse::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UploadMyPanelListResponse& UploadMyPanelListResponse::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

UploadMyPanelListResponse* UploadMyPanelListResponse::New(::google::protobuf::Arena* arena) const {
  UploadMyPanelListResponse* n = new UploadMyPanelListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadMyPanelListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UploadMyPanelListResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UploadMyPanelListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UploadMyPanelListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UploadMyPanelListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UploadMyPanelListResponse)
  return false;
#undef DO_
}

void UploadMyPanelListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UploadMyPanelListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UploadMyPanelListResponse)
}

::google::protobuf::uint8* UploadMyPanelListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UploadMyPanelListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UploadMyPanelListResponse)
  return target;
}

size_t UploadMyPanelListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UploadMyPanelListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadMyPanelListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UploadMyPanelListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadMyPanelListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadMyPanelListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UploadMyPanelListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UploadMyPanelListResponse)
    MergeFrom(*source);
  }
}

void UploadMyPanelListResponse::MergeFrom(const UploadMyPanelListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UploadMyPanelListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void UploadMyPanelListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UploadMyPanelListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadMyPanelListResponse::CopyFrom(const UploadMyPanelListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UploadMyPanelListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadMyPanelListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void UploadMyPanelListResponse::Swap(UploadMyPanelListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadMyPanelListResponse::InternalSwap(UploadMyPanelListResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadMyPanelListResponse::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadMyPanelListResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool UploadMyPanelListResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UploadMyPanelListResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void UploadMyPanelListResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void UploadMyPanelListResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& UploadMyPanelListResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMyPanelListResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* UploadMyPanelListResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMyPanelListResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* UploadMyPanelListResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMyPanelListResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void UploadMyPanelListResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMyPanelListResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPersonalDesignerRequest::kDesignerUinFieldNumber;
const int GetPersonalDesignerRequest::kReqBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPersonalDesignerRequest::GetPersonalDesignerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetPersonalDesignerRequest)
}
GetPersonalDesignerRequest::GetPersonalDesignerRequest(const GetPersonalDesignerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reqbuf()) {
    reqbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.reqbuf_);
  } else {
    reqbuf_ = NULL;
  }
  designeruin_ = from.designeruin_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetPersonalDesignerRequest)
}

void GetPersonalDesignerRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&reqbuf_, 0, reinterpret_cast<char*>(&designeruin_) -
    reinterpret_cast<char*>(&reqbuf_) + sizeof(designeruin_));
}

GetPersonalDesignerRequest::~GetPersonalDesignerRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetPersonalDesignerRequest)
  SharedDtor();
}

void GetPersonalDesignerRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete reqbuf_;
  }
}

void GetPersonalDesignerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPersonalDesignerRequest::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPersonalDesignerRequest& GetPersonalDesignerRequest::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPersonalDesignerRequest* GetPersonalDesignerRequest::New(::google::protobuf::Arena* arena) const {
  GetPersonalDesignerRequest* n = new GetPersonalDesignerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPersonalDesignerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetPersonalDesignerRequest)
  if (has_reqbuf()) {
    GOOGLE_DCHECK(reqbuf_ != NULL);
    reqbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  }
  designeruin_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetPersonalDesignerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetPersonalDesignerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 DesignerUin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_designeruin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &designeruin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetPersonalDesignerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetPersonalDesignerRequest)
  return false;
#undef DO_
}

void GetPersonalDesignerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetPersonalDesignerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 DesignerUin = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->designeruin(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->reqbuf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetPersonalDesignerRequest)
}

::google::protobuf::uint8* GetPersonalDesignerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetPersonalDesignerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 DesignerUin = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->designeruin(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->reqbuf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetPersonalDesignerRequest)
  return target;
}

size_t GetPersonalDesignerRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetPersonalDesignerRequest)
  size_t total_size = 0;

  if (has_reqbuf()) {
    // required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reqbuf_);
  }

  if (has_designeruin()) {
    // required uint32 DesignerUin = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->designeruin());
  }

  return total_size;
}
size_t GetPersonalDesignerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetPersonalDesignerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reqbuf_);

    // required uint32 DesignerUin = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->designeruin());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPersonalDesignerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetPersonalDesignerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPersonalDesignerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPersonalDesignerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetPersonalDesignerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetPersonalDesignerRequest)
    MergeFrom(*source);
  }
}

void GetPersonalDesignerRequest::MergeFrom(const GetPersonalDesignerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetPersonalDesignerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_reqbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.reqbuf());
    }
    if (cached_has_bits & 0x00000002u) {
      designeruin_ = from.designeruin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetPersonalDesignerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetPersonalDesignerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPersonalDesignerRequest::CopyFrom(const GetPersonalDesignerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetPersonalDesignerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPersonalDesignerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_reqbuf()) {
    if (!this->reqbuf_->IsInitialized()) return false;
  }
  return true;
}

void GetPersonalDesignerRequest::Swap(GetPersonalDesignerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPersonalDesignerRequest::InternalSwap(GetPersonalDesignerRequest* other) {
  std::swap(reqbuf_, other->reqbuf_);
  std::swap(designeruin_, other->designeruin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPersonalDesignerRequest::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPersonalDesignerRequest

// required uint32 DesignerUin = 1;
bool GetPersonalDesignerRequest::has_designeruin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetPersonalDesignerRequest::set_has_designeruin() {
  _has_bits_[0] |= 0x00000002u;
}
void GetPersonalDesignerRequest::clear_has_designeruin() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetPersonalDesignerRequest::clear_designeruin() {
  designeruin_ = 0u;
  clear_has_designeruin();
}
::google::protobuf::uint32 GetPersonalDesignerRequest::designeruin() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPersonalDesignerRequest.DesignerUin)
  return designeruin_;
}
void GetPersonalDesignerRequest::set_designeruin(::google::protobuf::uint32 value) {
  set_has_designeruin();
  designeruin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetPersonalDesignerRequest.DesignerUin)
}

// required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
bool GetPersonalDesignerRequest::has_reqbuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetPersonalDesignerRequest::set_has_reqbuf() {
  _has_bits_[0] |= 0x00000001u;
}
void GetPersonalDesignerRequest::clear_has_reqbuf() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetPersonalDesignerRequest::clear_reqbuf() {
  if (reqbuf_ != NULL) reqbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_reqbuf();
}
const ::micromsg::SKBuiltinBuffer_t& GetPersonalDesignerRequest::reqbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPersonalDesignerRequest.ReqBuf)
  return reqbuf_ != NULL ? *reqbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetPersonalDesignerRequest::mutable_reqbuf() {
  set_has_reqbuf();
  if (reqbuf_ == NULL) {
    reqbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetPersonalDesignerRequest.ReqBuf)
  return reqbuf_;
}
::micromsg::SKBuiltinBuffer_t* GetPersonalDesignerRequest::release_reqbuf() {
  // @@protoc_insertion_point(field_release:micromsg.GetPersonalDesignerRequest.ReqBuf)
  clear_has_reqbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = reqbuf_;
  reqbuf_ = NULL;
  return temp;
}
void GetPersonalDesignerRequest::set_allocated_reqbuf(::micromsg::SKBuiltinBuffer_t* reqbuf) {
  delete reqbuf_;
  reqbuf_ = reqbuf;
  if (reqbuf) {
    set_has_reqbuf();
  } else {
    clear_has_reqbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPersonalDesignerRequest.ReqBuf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPersonalDesignerResponse::kBaseResponseFieldNumber;
const int GetPersonalDesignerResponse::kBannerUrlFieldNumber;
const int GetPersonalDesignerResponse::kNameFieldNumber;
const int GetPersonalDesignerResponse::kDescFieldNumber;
const int GetPersonalDesignerResponse::kHeadUrlFieldNumber;
const int GetPersonalDesignerResponse::kBizNameFieldNumber;
const int GetPersonalDesignerResponse::kEmotionListFieldNumber;
const int GetPersonalDesignerResponse::kReqBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPersonalDesignerResponse::GetPersonalDesignerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetPersonalDesignerResponse)
}
GetPersonalDesignerResponse::GetPersonalDesignerResponse(const GetPersonalDesignerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      emotionlist_(from.emotionlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bannerurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bannerurl()) {
    bannerurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bannerurl_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  headurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_headurl()) {
    headurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headurl_);
  }
  bizname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bizname()) {
    bizname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bizname_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_reqbuf()) {
    reqbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.reqbuf_);
  } else {
    reqbuf_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetPersonalDesignerResponse)
}

void GetPersonalDesignerResponse::SharedCtor() {
  _cached_size_ = 0;
  bannerurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bizname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&reqbuf_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(reqbuf_));
}

GetPersonalDesignerResponse::~GetPersonalDesignerResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetPersonalDesignerResponse)
  SharedDtor();
}

void GetPersonalDesignerResponse::SharedDtor() {
  bannerurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bizname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete reqbuf_;
  }
}

void GetPersonalDesignerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPersonalDesignerResponse::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPersonalDesignerResponse& GetPersonalDesignerResponse::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPersonalDesignerResponse* GetPersonalDesignerResponse::New(::google::protobuf::Arena* arena) const {
  GetPersonalDesignerResponse* n = new GetPersonalDesignerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPersonalDesignerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetPersonalDesignerResponse)
  emotionlist_.Clear();
  if (_has_bits_[0 / 32] & 127u) {
    if (has_bannerurl()) {
      GOOGLE_DCHECK(!bannerurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bannerurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_desc()) {
      GOOGLE_DCHECK(!desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*desc_.UnsafeRawStringPointer())->clear();
    }
    if (has_headurl()) {
      GOOGLE_DCHECK(!headurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*headurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_bizname()) {
      GOOGLE_DCHECK(!bizname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bizname_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_reqbuf()) {
      GOOGLE_DCHECK(reqbuf_ != NULL);
      reqbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetPersonalDesignerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetPersonalDesignerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string BannerUrl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bannerurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bannerurl().data(), this->bannerurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetPersonalDesignerResponse.BannerUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string Name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetPersonalDesignerResponse.Name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string Desc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetPersonalDesignerResponse.Desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string HeadUrl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headurl().data(), this->headurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetPersonalDesignerResponse.HeadUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string BizName = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bizname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bizname().data(), this->bizname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetPersonalDesignerResponse.BizName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.EmotionSummary EmotionList = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_emotionlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ReqBuf = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetPersonalDesignerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetPersonalDesignerResponse)
  return false;
#undef DO_
}

void GetPersonalDesignerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetPersonalDesignerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required string BannerUrl = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannerurl().data(), this->bannerurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetPersonalDesignerResponse.BannerUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bannerurl(), output);
  }

  // required string Name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetPersonalDesignerResponse.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // required string Desc = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetPersonalDesignerResponse.Desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->desc(), output);
  }

  // required string HeadUrl = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetPersonalDesignerResponse.HeadUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->headurl(), output);
  }

  // required string BizName = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bizname().data(), this->bizname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetPersonalDesignerResponse.BizName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->bizname(), output);
  }

  // repeated .micromsg.EmotionSummary EmotionList = 7;
  for (unsigned int i = 0, n = this->emotionlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->emotionlist(i), output);
  }

  // required .micromsg.SKBuiltinBuffer_t ReqBuf = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->reqbuf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetPersonalDesignerResponse)
}

::google::protobuf::uint8* GetPersonalDesignerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetPersonalDesignerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required string BannerUrl = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannerurl().data(), this->bannerurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetPersonalDesignerResponse.BannerUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bannerurl(), target);
  }

  // required string Name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetPersonalDesignerResponse.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required string Desc = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetPersonalDesignerResponse.Desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc(), target);
  }

  // required string HeadUrl = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetPersonalDesignerResponse.HeadUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->headurl(), target);
  }

  // required string BizName = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bizname().data(), this->bizname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetPersonalDesignerResponse.BizName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bizname(), target);
  }

  // repeated .micromsg.EmotionSummary EmotionList = 7;
  for (unsigned int i = 0, n = this->emotionlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->emotionlist(i), deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t ReqBuf = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->reqbuf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetPersonalDesignerResponse)
  return target;
}

size_t GetPersonalDesignerResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetPersonalDesignerResponse)
  size_t total_size = 0;

  if (has_bannerurl()) {
    // required string BannerUrl = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bannerurl());
  }

  if (has_name()) {
    // required string Name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_desc()) {
    // required string Desc = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  if (has_headurl()) {
    // required string HeadUrl = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->headurl());
  }

  if (has_bizname()) {
    // required string BizName = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bizname());
  }

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_reqbuf()) {
    // required .micromsg.SKBuiltinBuffer_t ReqBuf = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reqbuf_);
  }

  return total_size;
}
size_t GetPersonalDesignerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetPersonalDesignerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string BannerUrl = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bannerurl());

    // required string Name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string Desc = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());

    // required string HeadUrl = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->headurl());

    // required string BizName = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bizname());

    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinBuffer_t ReqBuf = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reqbuf_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.EmotionSummary EmotionList = 7;
  {
    unsigned int count = this->emotionlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emotionlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPersonalDesignerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetPersonalDesignerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPersonalDesignerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPersonalDesignerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetPersonalDesignerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetPersonalDesignerResponse)
    MergeFrom(*source);
  }
}

void GetPersonalDesignerResponse::MergeFrom(const GetPersonalDesignerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetPersonalDesignerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emotionlist_.MergeFrom(from.emotionlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_bannerurl();
      bannerurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bannerurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_headurl();
      headurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headurl_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_bizname();
      bizname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bizname_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_reqbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.reqbuf());
    }
  }
}

void GetPersonalDesignerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetPersonalDesignerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPersonalDesignerResponse::CopyFrom(const GetPersonalDesignerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetPersonalDesignerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPersonalDesignerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->emotionlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_reqbuf()) {
    if (!this->reqbuf_->IsInitialized()) return false;
  }
  return true;
}

void GetPersonalDesignerResponse::Swap(GetPersonalDesignerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPersonalDesignerResponse::InternalSwap(GetPersonalDesignerResponse* other) {
  emotionlist_.InternalSwap(&other->emotionlist_);
  bannerurl_.Swap(&other->bannerurl_);
  name_.Swap(&other->name_);
  desc_.Swap(&other->desc_);
  headurl_.Swap(&other->headurl_);
  bizname_.Swap(&other->bizname_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(reqbuf_, other->reqbuf_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPersonalDesignerResponse::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPersonalDesignerResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetPersonalDesignerResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetPersonalDesignerResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000020u;
}
void GetPersonalDesignerResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetPersonalDesignerResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetPersonalDesignerResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPersonalDesignerResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetPersonalDesignerResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetPersonalDesignerResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetPersonalDesignerResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetPersonalDesignerResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetPersonalDesignerResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPersonalDesignerResponse.BaseResponse)
}

// required string BannerUrl = 2;
bool GetPersonalDesignerResponse::has_bannerurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetPersonalDesignerResponse::set_has_bannerurl() {
  _has_bits_[0] |= 0x00000001u;
}
void GetPersonalDesignerResponse::clear_has_bannerurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetPersonalDesignerResponse::clear_bannerurl() {
  bannerurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bannerurl();
}
const ::std::string& GetPersonalDesignerResponse::bannerurl() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPersonalDesignerResponse.BannerUrl)
  return bannerurl_.GetNoArena();
}
void GetPersonalDesignerResponse::set_bannerurl(const ::std::string& value) {
  set_has_bannerurl();
  bannerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetPersonalDesignerResponse.BannerUrl)
}
#if LANG_CXX11
void GetPersonalDesignerResponse::set_bannerurl(::std::string&& value) {
  set_has_bannerurl();
  bannerurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetPersonalDesignerResponse.BannerUrl)
}
#endif
void GetPersonalDesignerResponse::set_bannerurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bannerurl();
  bannerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetPersonalDesignerResponse.BannerUrl)
}
void GetPersonalDesignerResponse::set_bannerurl(const char* value, size_t size) {
  set_has_bannerurl();
  bannerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetPersonalDesignerResponse.BannerUrl)
}
::std::string* GetPersonalDesignerResponse::mutable_bannerurl() {
  set_has_bannerurl();
  // @@protoc_insertion_point(field_mutable:micromsg.GetPersonalDesignerResponse.BannerUrl)
  return bannerurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetPersonalDesignerResponse::release_bannerurl() {
  // @@protoc_insertion_point(field_release:micromsg.GetPersonalDesignerResponse.BannerUrl)
  clear_has_bannerurl();
  return bannerurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPersonalDesignerResponse::set_allocated_bannerurl(::std::string* bannerurl) {
  if (bannerurl != NULL) {
    set_has_bannerurl();
  } else {
    clear_has_bannerurl();
  }
  bannerurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bannerurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPersonalDesignerResponse.BannerUrl)
}

// required string Name = 3;
bool GetPersonalDesignerResponse::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetPersonalDesignerResponse::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void GetPersonalDesignerResponse::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetPersonalDesignerResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& GetPersonalDesignerResponse::name() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPersonalDesignerResponse.Name)
  return name_.GetNoArena();
}
void GetPersonalDesignerResponse::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetPersonalDesignerResponse.Name)
}
#if LANG_CXX11
void GetPersonalDesignerResponse::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetPersonalDesignerResponse.Name)
}
#endif
void GetPersonalDesignerResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetPersonalDesignerResponse.Name)
}
void GetPersonalDesignerResponse::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetPersonalDesignerResponse.Name)
}
::std::string* GetPersonalDesignerResponse::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:micromsg.GetPersonalDesignerResponse.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetPersonalDesignerResponse::release_name() {
  // @@protoc_insertion_point(field_release:micromsg.GetPersonalDesignerResponse.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPersonalDesignerResponse::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPersonalDesignerResponse.Name)
}

// required string Desc = 4;
bool GetPersonalDesignerResponse::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetPersonalDesignerResponse::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
void GetPersonalDesignerResponse::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetPersonalDesignerResponse::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
const ::std::string& GetPersonalDesignerResponse::desc() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPersonalDesignerResponse.Desc)
  return desc_.GetNoArena();
}
void GetPersonalDesignerResponse::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetPersonalDesignerResponse.Desc)
}
#if LANG_CXX11
void GetPersonalDesignerResponse::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetPersonalDesignerResponse.Desc)
}
#endif
void GetPersonalDesignerResponse::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetPersonalDesignerResponse.Desc)
}
void GetPersonalDesignerResponse::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetPersonalDesignerResponse.Desc)
}
::std::string* GetPersonalDesignerResponse::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:micromsg.GetPersonalDesignerResponse.Desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetPersonalDesignerResponse::release_desc() {
  // @@protoc_insertion_point(field_release:micromsg.GetPersonalDesignerResponse.Desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPersonalDesignerResponse::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPersonalDesignerResponse.Desc)
}

// required string HeadUrl = 5;
bool GetPersonalDesignerResponse::has_headurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetPersonalDesignerResponse::set_has_headurl() {
  _has_bits_[0] |= 0x00000008u;
}
void GetPersonalDesignerResponse::clear_has_headurl() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetPersonalDesignerResponse::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headurl();
}
const ::std::string& GetPersonalDesignerResponse::headurl() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPersonalDesignerResponse.HeadUrl)
  return headurl_.GetNoArena();
}
void GetPersonalDesignerResponse::set_headurl(const ::std::string& value) {
  set_has_headurl();
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetPersonalDesignerResponse.HeadUrl)
}
#if LANG_CXX11
void GetPersonalDesignerResponse::set_headurl(::std::string&& value) {
  set_has_headurl();
  headurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetPersonalDesignerResponse.HeadUrl)
}
#endif
void GetPersonalDesignerResponse::set_headurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_headurl();
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetPersonalDesignerResponse.HeadUrl)
}
void GetPersonalDesignerResponse::set_headurl(const char* value, size_t size) {
  set_has_headurl();
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetPersonalDesignerResponse.HeadUrl)
}
::std::string* GetPersonalDesignerResponse::mutable_headurl() {
  set_has_headurl();
  // @@protoc_insertion_point(field_mutable:micromsg.GetPersonalDesignerResponse.HeadUrl)
  return headurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetPersonalDesignerResponse::release_headurl() {
  // @@protoc_insertion_point(field_release:micromsg.GetPersonalDesignerResponse.HeadUrl)
  clear_has_headurl();
  return headurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPersonalDesignerResponse::set_allocated_headurl(::std::string* headurl) {
  if (headurl != NULL) {
    set_has_headurl();
  } else {
    clear_has_headurl();
  }
  headurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPersonalDesignerResponse.HeadUrl)
}

// required string BizName = 6;
bool GetPersonalDesignerResponse::has_bizname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetPersonalDesignerResponse::set_has_bizname() {
  _has_bits_[0] |= 0x00000010u;
}
void GetPersonalDesignerResponse::clear_has_bizname() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetPersonalDesignerResponse::clear_bizname() {
  bizname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bizname();
}
const ::std::string& GetPersonalDesignerResponse::bizname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPersonalDesignerResponse.BizName)
  return bizname_.GetNoArena();
}
void GetPersonalDesignerResponse::set_bizname(const ::std::string& value) {
  set_has_bizname();
  bizname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetPersonalDesignerResponse.BizName)
}
#if LANG_CXX11
void GetPersonalDesignerResponse::set_bizname(::std::string&& value) {
  set_has_bizname();
  bizname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetPersonalDesignerResponse.BizName)
}
#endif
void GetPersonalDesignerResponse::set_bizname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bizname();
  bizname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetPersonalDesignerResponse.BizName)
}
void GetPersonalDesignerResponse::set_bizname(const char* value, size_t size) {
  set_has_bizname();
  bizname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetPersonalDesignerResponse.BizName)
}
::std::string* GetPersonalDesignerResponse::mutable_bizname() {
  set_has_bizname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetPersonalDesignerResponse.BizName)
  return bizname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetPersonalDesignerResponse::release_bizname() {
  // @@protoc_insertion_point(field_release:micromsg.GetPersonalDesignerResponse.BizName)
  clear_has_bizname();
  return bizname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPersonalDesignerResponse::set_allocated_bizname(::std::string* bizname) {
  if (bizname != NULL) {
    set_has_bizname();
  } else {
    clear_has_bizname();
  }
  bizname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bizname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPersonalDesignerResponse.BizName)
}

// repeated .micromsg.EmotionSummary EmotionList = 7;
int GetPersonalDesignerResponse::emotionlist_size() const {
  return emotionlist_.size();
}
void GetPersonalDesignerResponse::clear_emotionlist() {
  emotionlist_.Clear();
}
const ::micromsg::EmotionSummary& GetPersonalDesignerResponse::emotionlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetPersonalDesignerResponse.EmotionList)
  return emotionlist_.Get(index);
}
::micromsg::EmotionSummary* GetPersonalDesignerResponse::mutable_emotionlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetPersonalDesignerResponse.EmotionList)
  return emotionlist_.Mutable(index);
}
::micromsg::EmotionSummary* GetPersonalDesignerResponse::add_emotionlist() {
  // @@protoc_insertion_point(field_add:micromsg.GetPersonalDesignerResponse.EmotionList)
  return emotionlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::EmotionSummary >*
GetPersonalDesignerResponse::mutable_emotionlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetPersonalDesignerResponse.EmotionList)
  return &emotionlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::EmotionSummary >&
GetPersonalDesignerResponse::emotionlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GetPersonalDesignerResponse.EmotionList)
  return emotionlist_;
}

// required .micromsg.SKBuiltinBuffer_t ReqBuf = 8;
bool GetPersonalDesignerResponse::has_reqbuf() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GetPersonalDesignerResponse::set_has_reqbuf() {
  _has_bits_[0] |= 0x00000040u;
}
void GetPersonalDesignerResponse::clear_has_reqbuf() {
  _has_bits_[0] &= ~0x00000040u;
}
void GetPersonalDesignerResponse::clear_reqbuf() {
  if (reqbuf_ != NULL) reqbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_reqbuf();
}
const ::micromsg::SKBuiltinBuffer_t& GetPersonalDesignerResponse::reqbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.GetPersonalDesignerResponse.ReqBuf)
  return reqbuf_ != NULL ? *reqbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetPersonalDesignerResponse::mutable_reqbuf() {
  set_has_reqbuf();
  if (reqbuf_ == NULL) {
    reqbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetPersonalDesignerResponse.ReqBuf)
  return reqbuf_;
}
::micromsg::SKBuiltinBuffer_t* GetPersonalDesignerResponse::release_reqbuf() {
  // @@protoc_insertion_point(field_release:micromsg.GetPersonalDesignerResponse.ReqBuf)
  clear_has_reqbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = reqbuf_;
  reqbuf_ = NULL;
  return temp;
}
void GetPersonalDesignerResponse::set_allocated_reqbuf(::micromsg::SKBuiltinBuffer_t* reqbuf) {
  delete reqbuf_;
  reqbuf_ = reqbuf;
  if (reqbuf) {
    set_has_reqbuf();
  } else {
    clear_has_reqbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetPersonalDesignerResponse.ReqBuf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetEmotionRewardRequest::kProductIDFieldNumber;
const int GetEmotionRewardRequest::kOpCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEmotionRewardRequest::GetEmotionRewardRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetEmotionRewardRequest)
}
GetEmotionRewardRequest::GetEmotionRewardRequest(const GetEmotionRewardRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  opcode_ = from.opcode_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetEmotionRewardRequest)
}

void GetEmotionRewardRequest::SharedCtor() {
  _cached_size_ = 0;
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opcode_ = 0u;
}

GetEmotionRewardRequest::~GetEmotionRewardRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetEmotionRewardRequest)
  SharedDtor();
}

void GetEmotionRewardRequest::SharedDtor() {
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetEmotionRewardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEmotionRewardRequest::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetEmotionRewardRequest& GetEmotionRewardRequest::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetEmotionRewardRequest* GetEmotionRewardRequest::New(::google::protobuf::Arena* arena) const {
  GetEmotionRewardRequest* n = new GetEmotionRewardRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetEmotionRewardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetEmotionRewardRequest)
  if (has_productid()) {
    GOOGLE_DCHECK(!productid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*productid_.UnsafeRawStringPointer())->clear();
  }
  opcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetEmotionRewardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetEmotionRewardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ProductID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetEmotionRewardRequest.ProductID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 OpCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetEmotionRewardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetEmotionRewardRequest)
  return false;
#undef DO_
}

void GetEmotionRewardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetEmotionRewardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ProductID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetEmotionRewardRequest.ProductID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->productid(), output);
  }

  // required uint32 OpCode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetEmotionRewardRequest)
}

::google::protobuf::uint8* GetEmotionRewardRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetEmotionRewardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ProductID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetEmotionRewardRequest.ProductID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->productid(), target);
  }

  // required uint32 OpCode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetEmotionRewardRequest)
  return target;
}

size_t GetEmotionRewardRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetEmotionRewardRequest)
  size_t total_size = 0;

  if (has_productid()) {
    // required string ProductID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());
  }

  if (has_opcode()) {
    // required uint32 OpCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  return total_size;
}
size_t GetEmotionRewardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetEmotionRewardRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string ProductID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());

    // required uint32 OpCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEmotionRewardRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetEmotionRewardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEmotionRewardRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetEmotionRewardRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetEmotionRewardRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetEmotionRewardRequest)
    MergeFrom(*source);
  }
}

void GetEmotionRewardRequest::MergeFrom(const GetEmotionRewardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetEmotionRewardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000002u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetEmotionRewardRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetEmotionRewardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEmotionRewardRequest::CopyFrom(const GetEmotionRewardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetEmotionRewardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEmotionRewardRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GetEmotionRewardRequest::Swap(GetEmotionRewardRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEmotionRewardRequest::InternalSwap(GetEmotionRewardRequest* other) {
  productid_.Swap(&other->productid_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetEmotionRewardRequest::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetEmotionRewardRequest

// required string ProductID = 1;
bool GetEmotionRewardRequest::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetEmotionRewardRequest::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
void GetEmotionRewardRequest::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetEmotionRewardRequest::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
const ::std::string& GetEmotionRewardRequest::productid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionRewardRequest.ProductID)
  return productid_.GetNoArena();
}
void GetEmotionRewardRequest::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetEmotionRewardRequest.ProductID)
}
#if LANG_CXX11
void GetEmotionRewardRequest::set_productid(::std::string&& value) {
  set_has_productid();
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetEmotionRewardRequest.ProductID)
}
#endif
void GetEmotionRewardRequest::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetEmotionRewardRequest.ProductID)
}
void GetEmotionRewardRequest::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetEmotionRewardRequest.ProductID)
}
::std::string* GetEmotionRewardRequest::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionRewardRequest.ProductID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetEmotionRewardRequest::release_productid() {
  // @@protoc_insertion_point(field_release:micromsg.GetEmotionRewardRequest.ProductID)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetEmotionRewardRequest::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetEmotionRewardRequest.ProductID)
}

// required uint32 OpCode = 2;
bool GetEmotionRewardRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetEmotionRewardRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000002u;
}
void GetEmotionRewardRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetEmotionRewardRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 GetEmotionRewardRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionRewardRequest.OpCode)
  return opcode_;
}
void GetEmotionRewardRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetEmotionRewardRequest.OpCode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmotionPrice::kLabelFieldNumber;
const int EmotionPrice::kNumberFieldNumber;
const int EmotionPrice::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmotionPrice::EmotionPrice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EmotionPrice)
}
EmotionPrice::EmotionPrice(const EmotionPrice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_number()) {
    number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.number_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.EmotionPrice)
}

void EmotionPrice::SharedCtor() {
  _cached_size_ = 0;
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EmotionPrice::~EmotionPrice() {
  // @@protoc_insertion_point(destructor:micromsg.EmotionPrice)
  SharedDtor();
}

void EmotionPrice::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EmotionPrice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmotionPrice::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmotionPrice& EmotionPrice::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmotionPrice* EmotionPrice::New(::google::protobuf::Arena* arena) const {
  EmotionPrice* n = new EmotionPrice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmotionPrice::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EmotionPrice)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_label()) {
      GOOGLE_DCHECK(!label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*label_.UnsafeRawStringPointer())->clear();
    }
    if (has_number()) {
      GOOGLE_DCHECK(!number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*number_.UnsafeRawStringPointer())->clear();
    }
    if (has_type()) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmotionPrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EmotionPrice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionPrice.Label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string Number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionPrice.Number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string Type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionPrice.Type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EmotionPrice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EmotionPrice)
  return false;
#undef DO_
}

void EmotionPrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EmotionPrice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionPrice.Label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  // required string Number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionPrice.Number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->number(), output);
  }

  // required string Type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionPrice.Type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EmotionPrice)
}

::google::protobuf::uint8* EmotionPrice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EmotionPrice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionPrice.Label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  // required string Number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionPrice.Number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->number(), target);
  }

  // required string Type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionPrice.Type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EmotionPrice)
  return target;
}

size_t EmotionPrice::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.EmotionPrice)
  size_t total_size = 0;

  if (has_label()) {
    // required string Label = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());
  }

  if (has_number()) {
    // required string Number = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->number());
  }

  if (has_type()) {
    // required string Type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  return total_size;
}
size_t EmotionPrice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EmotionPrice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string Label = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());

    // required string Number = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->number());

    // required string Type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmotionPrice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EmotionPrice)
  GOOGLE_DCHECK_NE(&from, this);
  const EmotionPrice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmotionPrice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EmotionPrice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EmotionPrice)
    MergeFrom(*source);
  }
}

void EmotionPrice::MergeFrom(const EmotionPrice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EmotionPrice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_number();
      number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.number_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
  }
}

void EmotionPrice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EmotionPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmotionPrice::CopyFrom(const EmotionPrice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EmotionPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmotionPrice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void EmotionPrice::Swap(EmotionPrice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmotionPrice::InternalSwap(EmotionPrice* other) {
  label_.Swap(&other->label_);
  number_.Swap(&other->number_);
  type_.Swap(&other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmotionPrice::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmotionPrice

// required string Label = 1;
bool EmotionPrice::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmotionPrice::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
void EmotionPrice::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmotionPrice::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
const ::std::string& EmotionPrice::label() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionPrice.Label)
  return label_.GetNoArena();
}
void EmotionPrice::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionPrice.Label)
}
#if LANG_CXX11
void EmotionPrice::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionPrice.Label)
}
#endif
void EmotionPrice::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionPrice.Label)
}
void EmotionPrice::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionPrice.Label)
}
::std::string* EmotionPrice::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionPrice.Label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionPrice::release_label() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionPrice.Label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionPrice::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionPrice.Label)
}

// required string Number = 2;
bool EmotionPrice::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmotionPrice::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
void EmotionPrice::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmotionPrice::clear_number() {
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_number();
}
const ::std::string& EmotionPrice::number() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionPrice.Number)
  return number_.GetNoArena();
}
void EmotionPrice::set_number(const ::std::string& value) {
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionPrice.Number)
}
#if LANG_CXX11
void EmotionPrice::set_number(::std::string&& value) {
  set_has_number();
  number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionPrice.Number)
}
#endif
void EmotionPrice::set_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionPrice.Number)
}
void EmotionPrice::set_number(const char* value, size_t size) {
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionPrice.Number)
}
::std::string* EmotionPrice::mutable_number() {
  set_has_number();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionPrice.Number)
  return number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionPrice::release_number() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionPrice.Number)
  clear_has_number();
  return number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionPrice::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    set_has_number();
  } else {
    clear_has_number();
  }
  number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionPrice.Number)
}

// required string Type = 3;
bool EmotionPrice::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EmotionPrice::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void EmotionPrice::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void EmotionPrice::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& EmotionPrice::type() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionPrice.Type)
  return type_.GetNoArena();
}
void EmotionPrice::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionPrice.Type)
}
#if LANG_CXX11
void EmotionPrice::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionPrice.Type)
}
#endif
void EmotionPrice::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionPrice.Type)
}
void EmotionPrice::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionPrice.Type)
}
::std::string* EmotionPrice::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionPrice.Type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionPrice::release_type() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionPrice.Type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionPrice::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionPrice.Type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmotionDonor::kHeadUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmotionDonor::EmotionDonor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EmotionDonor)
}
EmotionDonor::EmotionDonor(const EmotionDonor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  headurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_headurl()) {
    headurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headurl_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.EmotionDonor)
}

void EmotionDonor::SharedCtor() {
  _cached_size_ = 0;
  headurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EmotionDonor::~EmotionDonor() {
  // @@protoc_insertion_point(destructor:micromsg.EmotionDonor)
  SharedDtor();
}

void EmotionDonor::SharedDtor() {
  headurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EmotionDonor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmotionDonor::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmotionDonor& EmotionDonor::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmotionDonor* EmotionDonor::New(::google::protobuf::Arena* arena) const {
  EmotionDonor* n = new EmotionDonor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmotionDonor::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EmotionDonor)
  if (has_headurl()) {
    GOOGLE_DCHECK(!headurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*headurl_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmotionDonor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EmotionDonor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string HeadUrl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headurl().data(), this->headurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionDonor.HeadUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EmotionDonor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EmotionDonor)
  return false;
#undef DO_
}

void EmotionDonor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EmotionDonor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string HeadUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDonor.HeadUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->headurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EmotionDonor)
}

::google::protobuf::uint8* EmotionDonor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EmotionDonor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string HeadUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionDonor.HeadUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->headurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EmotionDonor)
  return target;
}

size_t EmotionDonor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EmotionDonor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string HeadUrl = 1;
  if (has_headurl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->headurl());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmotionDonor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EmotionDonor)
  GOOGLE_DCHECK_NE(&from, this);
  const EmotionDonor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmotionDonor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EmotionDonor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EmotionDonor)
    MergeFrom(*source);
  }
}

void EmotionDonor::MergeFrom(const EmotionDonor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EmotionDonor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_headurl()) {
    set_has_headurl();
    headurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headurl_);
  }
}

void EmotionDonor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EmotionDonor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmotionDonor::CopyFrom(const EmotionDonor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EmotionDonor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmotionDonor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void EmotionDonor::Swap(EmotionDonor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmotionDonor::InternalSwap(EmotionDonor* other) {
  headurl_.Swap(&other->headurl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmotionDonor::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmotionDonor

// required string HeadUrl = 1;
bool EmotionDonor::has_headurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmotionDonor::set_has_headurl() {
  _has_bits_[0] |= 0x00000001u;
}
void EmotionDonor::clear_has_headurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmotionDonor::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headurl();
}
const ::std::string& EmotionDonor::headurl() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionDonor.HeadUrl)
  return headurl_.GetNoArena();
}
void EmotionDonor::set_headurl(const ::std::string& value) {
  set_has_headurl();
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionDonor.HeadUrl)
}
#if LANG_CXX11
void EmotionDonor::set_headurl(::std::string&& value) {
  set_has_headurl();
  headurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionDonor.HeadUrl)
}
#endif
void EmotionDonor::set_headurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_headurl();
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionDonor.HeadUrl)
}
void EmotionDonor::set_headurl(const char* value, size_t size) {
  set_has_headurl();
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionDonor.HeadUrl)
}
::std::string* EmotionDonor::mutable_headurl() {
  set_has_headurl();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionDonor.HeadUrl)
  return headurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionDonor::release_headurl() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionDonor.HeadUrl)
  clear_has_headurl();
  return headurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionDonor::set_allocated_headurl(::std::string* headurl) {
  if (headurl != NULL) {
    set_has_headurl();
  } else {
    clear_has_headurl();
  }
  headurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionDonor.HeadUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmotionReward::kBegWordFieldNumber;
const int EmotionReward::kBegPicUrlFieldNumber;
const int EmotionReward::kThanksPicUrlFieldNumber;
const int EmotionReward::kMagicUrlFieldNumber;
const int EmotionReward::kMagicWordFieldNumber;
const int EmotionReward::kMagicExpireFieldNumber;
const int EmotionReward::kMagicLimitFieldNumber;
const int EmotionReward::kMagicMd5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmotionReward::EmotionReward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EmotionReward)
}
EmotionReward::EmotionReward(const EmotionReward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  begword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_begword()) {
    begword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.begword_);
  }
  begpicurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_begpicurl()) {
    begpicurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.begpicurl_);
  }
  thankspicurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_thankspicurl()) {
    thankspicurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thankspicurl_);
  }
  magicurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_magicurl()) {
    magicurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.magicurl_);
  }
  magicword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_magicword()) {
    magicword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.magicword_);
  }
  magicmd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_magicmd5()) {
    magicmd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.magicmd5_);
  }
  ::memcpy(&magicexpire_, &from.magicexpire_,
    reinterpret_cast<char*>(&magiclimit_) -
    reinterpret_cast<char*>(&magicexpire_) + sizeof(magiclimit_));
  // @@protoc_insertion_point(copy_constructor:micromsg.EmotionReward)
}

void EmotionReward::SharedCtor() {
  _cached_size_ = 0;
  begword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begpicurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thankspicurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  magicurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  magicword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  magicmd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&magicexpire_, 0, reinterpret_cast<char*>(&magiclimit_) -
    reinterpret_cast<char*>(&magicexpire_) + sizeof(magiclimit_));
}

EmotionReward::~EmotionReward() {
  // @@protoc_insertion_point(destructor:micromsg.EmotionReward)
  SharedDtor();
}

void EmotionReward::SharedDtor() {
  begword_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begpicurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thankspicurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  magicurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  magicword_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  magicmd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EmotionReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmotionReward::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmotionReward& EmotionReward::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmotionReward* EmotionReward::New(::google::protobuf::Arena* arena) const {
  EmotionReward* n = new EmotionReward;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmotionReward::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EmotionReward)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_begword()) {
      GOOGLE_DCHECK(!begword_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*begword_.UnsafeRawStringPointer())->clear();
    }
    if (has_begpicurl()) {
      GOOGLE_DCHECK(!begpicurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*begpicurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_thankspicurl()) {
      GOOGLE_DCHECK(!thankspicurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*thankspicurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_magicurl()) {
      GOOGLE_DCHECK(!magicurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*magicurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_magicword()) {
      GOOGLE_DCHECK(!magicword_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*magicword_.UnsafeRawStringPointer())->clear();
    }
    if (has_magicmd5()) {
      GOOGLE_DCHECK(!magicmd5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*magicmd5_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&magicexpire_, 0, reinterpret_cast<char*>(&magiclimit_) -
      reinterpret_cast<char*>(&magicexpire_) + sizeof(magiclimit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmotionReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EmotionReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BegWord = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_begword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->begword().data(), this->begword().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionReward.BegWord");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string BegPicUrl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_begpicurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->begpicurl().data(), this->begpicurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionReward.BegPicUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string ThanksPicUrl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thankspicurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thankspicurl().data(), this->thankspicurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionReward.ThanksPicUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MagicUrl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_magicurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->magicurl().data(), this->magicurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionReward.MagicUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MagicWord = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_magicword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->magicword().data(), this->magicword().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionReward.MagicWord");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 MagicExpire = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_magicexpire();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magicexpire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 MagicLimit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_magiclimit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magiclimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MagicMd5 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_magicmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->magicmd5().data(), this->magicmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmotionReward.MagicMd5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EmotionReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EmotionReward)
  return false;
#undef DO_
}

void EmotionReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EmotionReward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string BegWord = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begword().data(), this->begword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionReward.BegWord");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->begword(), output);
  }

  // required string BegPicUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begpicurl().data(), this->begpicurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionReward.BegPicUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->begpicurl(), output);
  }

  // required string ThanksPicUrl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thankspicurl().data(), this->thankspicurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionReward.ThanksPicUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->thankspicurl(), output);
  }

  // optional string MagicUrl = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->magicurl().data(), this->magicurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionReward.MagicUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->magicurl(), output);
  }

  // optional string MagicWord = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->magicword().data(), this->magicword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionReward.MagicWord");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->magicword(), output);
  }

  // optional uint32 MagicExpire = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->magicexpire(), output);
  }

  // optional uint32 MagicLimit = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->magiclimit(), output);
  }

  // optional string MagicMd5 = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->magicmd5().data(), this->magicmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionReward.MagicMd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->magicmd5(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EmotionReward)
}

::google::protobuf::uint8* EmotionReward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EmotionReward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string BegWord = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begword().data(), this->begword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionReward.BegWord");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->begword(), target);
  }

  // required string BegPicUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begpicurl().data(), this->begpicurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionReward.BegPicUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->begpicurl(), target);
  }

  // required string ThanksPicUrl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thankspicurl().data(), this->thankspicurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionReward.ThanksPicUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->thankspicurl(), target);
  }

  // optional string MagicUrl = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->magicurl().data(), this->magicurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionReward.MagicUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->magicurl(), target);
  }

  // optional string MagicWord = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->magicword().data(), this->magicword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionReward.MagicWord");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->magicword(), target);
  }

  // optional uint32 MagicExpire = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->magicexpire(), target);
  }

  // optional uint32 MagicLimit = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->magiclimit(), target);
  }

  // optional string MagicMd5 = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->magicmd5().data(), this->magicmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmotionReward.MagicMd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->magicmd5(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EmotionReward)
  return target;
}

size_t EmotionReward::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.EmotionReward)
  size_t total_size = 0;

  if (has_begword()) {
    // required string BegWord = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->begword());
  }

  if (has_begpicurl()) {
    // required string BegPicUrl = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->begpicurl());
  }

  if (has_thankspicurl()) {
    // required string ThanksPicUrl = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->thankspicurl());
  }

  return total_size;
}
size_t EmotionReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EmotionReward)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string BegWord = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->begword());

    // required string BegPicUrl = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->begpicurl());

    // required string ThanksPicUrl = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->thankspicurl());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 248u) {
    // optional string MagicUrl = 4;
    if (has_magicurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->magicurl());
    }

    // optional string MagicWord = 5;
    if (has_magicword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->magicword());
    }

    // optional string MagicMd5 = 8;
    if (has_magicmd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->magicmd5());
    }

    // optional uint32 MagicExpire = 6;
    if (has_magicexpire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magicexpire());
    }

    // optional uint32 MagicLimit = 7;
    if (has_magiclimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magiclimit());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmotionReward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EmotionReward)
  GOOGLE_DCHECK_NE(&from, this);
  const EmotionReward* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmotionReward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EmotionReward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EmotionReward)
    MergeFrom(*source);
  }
}

void EmotionReward::MergeFrom(const EmotionReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EmotionReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_begword();
      begword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.begword_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_begpicurl();
      begpicurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.begpicurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_thankspicurl();
      thankspicurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thankspicurl_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_magicurl();
      magicurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.magicurl_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_magicword();
      magicword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.magicword_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_magicmd5();
      magicmd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.magicmd5_);
    }
    if (cached_has_bits & 0x00000040u) {
      magicexpire_ = from.magicexpire_;
    }
    if (cached_has_bits & 0x00000080u) {
      magiclimit_ = from.magiclimit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EmotionReward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EmotionReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmotionReward::CopyFrom(const EmotionReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EmotionReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmotionReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void EmotionReward::Swap(EmotionReward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmotionReward::InternalSwap(EmotionReward* other) {
  begword_.Swap(&other->begword_);
  begpicurl_.Swap(&other->begpicurl_);
  thankspicurl_.Swap(&other->thankspicurl_);
  magicurl_.Swap(&other->magicurl_);
  magicword_.Swap(&other->magicword_);
  magicmd5_.Swap(&other->magicmd5_);
  std::swap(magicexpire_, other->magicexpire_);
  std::swap(magiclimit_, other->magiclimit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmotionReward::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmotionReward

// required string BegWord = 1;
bool EmotionReward::has_begword() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmotionReward::set_has_begword() {
  _has_bits_[0] |= 0x00000001u;
}
void EmotionReward::clear_has_begword() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmotionReward::clear_begword() {
  begword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_begword();
}
const ::std::string& EmotionReward::begword() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionReward.BegWord)
  return begword_.GetNoArena();
}
void EmotionReward::set_begword(const ::std::string& value) {
  set_has_begword();
  begword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionReward.BegWord)
}
#if LANG_CXX11
void EmotionReward::set_begword(::std::string&& value) {
  set_has_begword();
  begword_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionReward.BegWord)
}
#endif
void EmotionReward::set_begword(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_begword();
  begword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionReward.BegWord)
}
void EmotionReward::set_begword(const char* value, size_t size) {
  set_has_begword();
  begword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionReward.BegWord)
}
::std::string* EmotionReward::mutable_begword() {
  set_has_begword();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionReward.BegWord)
  return begword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionReward::release_begword() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionReward.BegWord)
  clear_has_begword();
  return begword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionReward::set_allocated_begword(::std::string* begword) {
  if (begword != NULL) {
    set_has_begword();
  } else {
    clear_has_begword();
  }
  begword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), begword);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionReward.BegWord)
}

// required string BegPicUrl = 2;
bool EmotionReward::has_begpicurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmotionReward::set_has_begpicurl() {
  _has_bits_[0] |= 0x00000002u;
}
void EmotionReward::clear_has_begpicurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmotionReward::clear_begpicurl() {
  begpicurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_begpicurl();
}
const ::std::string& EmotionReward::begpicurl() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionReward.BegPicUrl)
  return begpicurl_.GetNoArena();
}
void EmotionReward::set_begpicurl(const ::std::string& value) {
  set_has_begpicurl();
  begpicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionReward.BegPicUrl)
}
#if LANG_CXX11
void EmotionReward::set_begpicurl(::std::string&& value) {
  set_has_begpicurl();
  begpicurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionReward.BegPicUrl)
}
#endif
void EmotionReward::set_begpicurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_begpicurl();
  begpicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionReward.BegPicUrl)
}
void EmotionReward::set_begpicurl(const char* value, size_t size) {
  set_has_begpicurl();
  begpicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionReward.BegPicUrl)
}
::std::string* EmotionReward::mutable_begpicurl() {
  set_has_begpicurl();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionReward.BegPicUrl)
  return begpicurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionReward::release_begpicurl() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionReward.BegPicUrl)
  clear_has_begpicurl();
  return begpicurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionReward::set_allocated_begpicurl(::std::string* begpicurl) {
  if (begpicurl != NULL) {
    set_has_begpicurl();
  } else {
    clear_has_begpicurl();
  }
  begpicurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), begpicurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionReward.BegPicUrl)
}

// required string ThanksPicUrl = 3;
bool EmotionReward::has_thankspicurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EmotionReward::set_has_thankspicurl() {
  _has_bits_[0] |= 0x00000004u;
}
void EmotionReward::clear_has_thankspicurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void EmotionReward::clear_thankspicurl() {
  thankspicurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_thankspicurl();
}
const ::std::string& EmotionReward::thankspicurl() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionReward.ThanksPicUrl)
  return thankspicurl_.GetNoArena();
}
void EmotionReward::set_thankspicurl(const ::std::string& value) {
  set_has_thankspicurl();
  thankspicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionReward.ThanksPicUrl)
}
#if LANG_CXX11
void EmotionReward::set_thankspicurl(::std::string&& value) {
  set_has_thankspicurl();
  thankspicurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionReward.ThanksPicUrl)
}
#endif
void EmotionReward::set_thankspicurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_thankspicurl();
  thankspicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionReward.ThanksPicUrl)
}
void EmotionReward::set_thankspicurl(const char* value, size_t size) {
  set_has_thankspicurl();
  thankspicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionReward.ThanksPicUrl)
}
::std::string* EmotionReward::mutable_thankspicurl() {
  set_has_thankspicurl();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionReward.ThanksPicUrl)
  return thankspicurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionReward::release_thankspicurl() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionReward.ThanksPicUrl)
  clear_has_thankspicurl();
  return thankspicurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionReward::set_allocated_thankspicurl(::std::string* thankspicurl) {
  if (thankspicurl != NULL) {
    set_has_thankspicurl();
  } else {
    clear_has_thankspicurl();
  }
  thankspicurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thankspicurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionReward.ThanksPicUrl)
}

// optional string MagicUrl = 4;
bool EmotionReward::has_magicurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EmotionReward::set_has_magicurl() {
  _has_bits_[0] |= 0x00000008u;
}
void EmotionReward::clear_has_magicurl() {
  _has_bits_[0] &= ~0x00000008u;
}
void EmotionReward::clear_magicurl() {
  magicurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_magicurl();
}
const ::std::string& EmotionReward::magicurl() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionReward.MagicUrl)
  return magicurl_.GetNoArena();
}
void EmotionReward::set_magicurl(const ::std::string& value) {
  set_has_magicurl();
  magicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionReward.MagicUrl)
}
#if LANG_CXX11
void EmotionReward::set_magicurl(::std::string&& value) {
  set_has_magicurl();
  magicurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionReward.MagicUrl)
}
#endif
void EmotionReward::set_magicurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_magicurl();
  magicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionReward.MagicUrl)
}
void EmotionReward::set_magicurl(const char* value, size_t size) {
  set_has_magicurl();
  magicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionReward.MagicUrl)
}
::std::string* EmotionReward::mutable_magicurl() {
  set_has_magicurl();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionReward.MagicUrl)
  return magicurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionReward::release_magicurl() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionReward.MagicUrl)
  clear_has_magicurl();
  return magicurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionReward::set_allocated_magicurl(::std::string* magicurl) {
  if (magicurl != NULL) {
    set_has_magicurl();
  } else {
    clear_has_magicurl();
  }
  magicurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), magicurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionReward.MagicUrl)
}

// optional string MagicWord = 5;
bool EmotionReward::has_magicword() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EmotionReward::set_has_magicword() {
  _has_bits_[0] |= 0x00000010u;
}
void EmotionReward::clear_has_magicword() {
  _has_bits_[0] &= ~0x00000010u;
}
void EmotionReward::clear_magicword() {
  magicword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_magicword();
}
const ::std::string& EmotionReward::magicword() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionReward.MagicWord)
  return magicword_.GetNoArena();
}
void EmotionReward::set_magicword(const ::std::string& value) {
  set_has_magicword();
  magicword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionReward.MagicWord)
}
#if LANG_CXX11
void EmotionReward::set_magicword(::std::string&& value) {
  set_has_magicword();
  magicword_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionReward.MagicWord)
}
#endif
void EmotionReward::set_magicword(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_magicword();
  magicword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionReward.MagicWord)
}
void EmotionReward::set_magicword(const char* value, size_t size) {
  set_has_magicword();
  magicword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionReward.MagicWord)
}
::std::string* EmotionReward::mutable_magicword() {
  set_has_magicword();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionReward.MagicWord)
  return magicword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionReward::release_magicword() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionReward.MagicWord)
  clear_has_magicword();
  return magicword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionReward::set_allocated_magicword(::std::string* magicword) {
  if (magicword != NULL) {
    set_has_magicword();
  } else {
    clear_has_magicword();
  }
  magicword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), magicword);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionReward.MagicWord)
}

// optional uint32 MagicExpire = 6;
bool EmotionReward::has_magicexpire() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EmotionReward::set_has_magicexpire() {
  _has_bits_[0] |= 0x00000040u;
}
void EmotionReward::clear_has_magicexpire() {
  _has_bits_[0] &= ~0x00000040u;
}
void EmotionReward::clear_magicexpire() {
  magicexpire_ = 0u;
  clear_has_magicexpire();
}
::google::protobuf::uint32 EmotionReward::magicexpire() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionReward.MagicExpire)
  return magicexpire_;
}
void EmotionReward::set_magicexpire(::google::protobuf::uint32 value) {
  set_has_magicexpire();
  magicexpire_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmotionReward.MagicExpire)
}

// optional uint32 MagicLimit = 7;
bool EmotionReward::has_magiclimit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void EmotionReward::set_has_magiclimit() {
  _has_bits_[0] |= 0x00000080u;
}
void EmotionReward::clear_has_magiclimit() {
  _has_bits_[0] &= ~0x00000080u;
}
void EmotionReward::clear_magiclimit() {
  magiclimit_ = 0u;
  clear_has_magiclimit();
}
::google::protobuf::uint32 EmotionReward::magiclimit() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionReward.MagicLimit)
  return magiclimit_;
}
void EmotionReward::set_magiclimit(::google::protobuf::uint32 value) {
  set_has_magiclimit();
  magiclimit_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmotionReward.MagicLimit)
}

// optional string MagicMd5 = 8;
bool EmotionReward::has_magicmd5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EmotionReward::set_has_magicmd5() {
  _has_bits_[0] |= 0x00000020u;
}
void EmotionReward::clear_has_magicmd5() {
  _has_bits_[0] &= ~0x00000020u;
}
void EmotionReward::clear_magicmd5() {
  magicmd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_magicmd5();
}
const ::std::string& EmotionReward::magicmd5() const {
  // @@protoc_insertion_point(field_get:micromsg.EmotionReward.MagicMd5)
  return magicmd5_.GetNoArena();
}
void EmotionReward::set_magicmd5(const ::std::string& value) {
  set_has_magicmd5();
  magicmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmotionReward.MagicMd5)
}
#if LANG_CXX11
void EmotionReward::set_magicmd5(::std::string&& value) {
  set_has_magicmd5();
  magicmd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmotionReward.MagicMd5)
}
#endif
void EmotionReward::set_magicmd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_magicmd5();
  magicmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmotionReward.MagicMd5)
}
void EmotionReward::set_magicmd5(const char* value, size_t size) {
  set_has_magicmd5();
  magicmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmotionReward.MagicMd5)
}
::std::string* EmotionReward::mutable_magicmd5() {
  set_has_magicmd5();
  // @@protoc_insertion_point(field_mutable:micromsg.EmotionReward.MagicMd5)
  return magicmd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmotionReward::release_magicmd5() {
  // @@protoc_insertion_point(field_release:micromsg.EmotionReward.MagicMd5)
  clear_has_magicmd5();
  return magicmd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmotionReward::set_allocated_magicmd5(::std::string* magicmd5) {
  if (magicmd5 != NULL) {
    set_has_magicmd5();
  } else {
    clear_has_magicmd5();
  }
  magicmd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), magicmd5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmotionReward.MagicMd5)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetEmotionRewardResponse::kBaseResponseFieldNumber;
const int GetEmotionRewardResponse::kPriceFieldNumber;
const int GetEmotionRewardResponse::kDonorNumFieldNumber;
const int GetEmotionRewardResponse::kDonorsFieldNumber;
const int GetEmotionRewardResponse::kRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEmotionRewardResponse::GetEmotionRewardResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetEmotionRewardResponse)
}
GetEmotionRewardResponse::GetEmotionRewardResponse(const GetEmotionRewardResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      price_(from.price_),
      donors_(from.donors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_reward()) {
    reward_ = new ::micromsg::EmotionReward(*from.reward_);
  } else {
    reward_ = NULL;
  }
  donornum_ = from.donornum_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetEmotionRewardResponse)
}

void GetEmotionRewardResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&donornum_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(donornum_));
}

GetEmotionRewardResponse::~GetEmotionRewardResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetEmotionRewardResponse)
  SharedDtor();
}

void GetEmotionRewardResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete reward_;
  }
}

void GetEmotionRewardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEmotionRewardResponse::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetEmotionRewardResponse& GetEmotionRewardResponse::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetEmotionRewardResponse* GetEmotionRewardResponse::New(::google::protobuf::Arena* arena) const {
  GetEmotionRewardResponse* n = new GetEmotionRewardResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetEmotionRewardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetEmotionRewardResponse)
  price_.Clear();
  donors_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_reward()) {
      GOOGLE_DCHECK(reward_ != NULL);
      reward_->::micromsg::EmotionReward::Clear();
    }
  }
  donornum_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetEmotionRewardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetEmotionRewardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.EmotionPrice Price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_price()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 DonorNum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_donornum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donornum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.EmotionDonor Donors = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_donors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.EmotionReward Reward = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetEmotionRewardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetEmotionRewardResponse)
  return false;
#undef DO_
}

void GetEmotionRewardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetEmotionRewardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // repeated .micromsg.EmotionPrice Price = 2;
  for (unsigned int i = 0, n = this->price_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->price(i), output);
  }

  // optional uint32 DonorNum = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->donornum(), output);
  }

  // repeated .micromsg.EmotionDonor Donors = 4;
  for (unsigned int i = 0, n = this->donors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->donors(i), output);
  }

  // optional .micromsg.EmotionReward Reward = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->reward_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetEmotionRewardResponse)
}

::google::protobuf::uint8* GetEmotionRewardResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetEmotionRewardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // repeated .micromsg.EmotionPrice Price = 2;
  for (unsigned int i = 0, n = this->price_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->price(i), deterministic, target);
  }

  // optional uint32 DonorNum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->donornum(), target);
  }

  // repeated .micromsg.EmotionDonor Donors = 4;
  for (unsigned int i = 0, n = this->donors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->donors(i), deterministic, target);
  }

  // optional .micromsg.EmotionReward Reward = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->reward_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetEmotionRewardResponse)
  return target;
}

size_t GetEmotionRewardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetEmotionRewardResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // repeated .micromsg.EmotionPrice Price = 2;
  {
    unsigned int count = this->price_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->price(i));
    }
  }

  // repeated .micromsg.EmotionDonor Donors = 4;
  {
    unsigned int count = this->donors_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->donors(i));
    }
  }

  if (_has_bits_[0 / 32] & 6u) {
    // optional .micromsg.EmotionReward Reward = 5;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reward_);
    }

    // optional uint32 DonorNum = 3;
    if (has_donornum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donornum());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEmotionRewardResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetEmotionRewardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEmotionRewardResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetEmotionRewardResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetEmotionRewardResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetEmotionRewardResponse)
    MergeFrom(*source);
  }
}

void GetEmotionRewardResponse::MergeFrom(const GetEmotionRewardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetEmotionRewardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  price_.MergeFrom(from.price_);
  donors_.MergeFrom(from.donors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reward()->::micromsg::EmotionReward::MergeFrom(from.reward());
    }
    if (cached_has_bits & 0x00000004u) {
      donornum_ = from.donornum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetEmotionRewardResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetEmotionRewardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEmotionRewardResponse::CopyFrom(const GetEmotionRewardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetEmotionRewardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEmotionRewardResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->price())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->donors())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_reward()) {
    if (!this->reward_->IsInitialized()) return false;
  }
  return true;
}

void GetEmotionRewardResponse::Swap(GetEmotionRewardResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEmotionRewardResponse::InternalSwap(GetEmotionRewardResponse* other) {
  price_.InternalSwap(&other->price_);
  donors_.InternalSwap(&other->donors_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(reward_, other->reward_);
  std::swap(donornum_, other->donornum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetEmotionRewardResponse::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetEmotionRewardResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetEmotionRewardResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetEmotionRewardResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetEmotionRewardResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetEmotionRewardResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetEmotionRewardResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionRewardResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetEmotionRewardResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionRewardResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetEmotionRewardResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetEmotionRewardResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetEmotionRewardResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetEmotionRewardResponse.BaseResponse)
}

// repeated .micromsg.EmotionPrice Price = 2;
int GetEmotionRewardResponse::price_size() const {
  return price_.size();
}
void GetEmotionRewardResponse::clear_price() {
  price_.Clear();
}
const ::micromsg::EmotionPrice& GetEmotionRewardResponse::price(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionRewardResponse.Price)
  return price_.Get(index);
}
::micromsg::EmotionPrice* GetEmotionRewardResponse::mutable_price(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionRewardResponse.Price)
  return price_.Mutable(index);
}
::micromsg::EmotionPrice* GetEmotionRewardResponse::add_price() {
  // @@protoc_insertion_point(field_add:micromsg.GetEmotionRewardResponse.Price)
  return price_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::EmotionPrice >*
GetEmotionRewardResponse::mutable_price() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetEmotionRewardResponse.Price)
  return &price_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::EmotionPrice >&
GetEmotionRewardResponse::price() const {
  // @@protoc_insertion_point(field_list:micromsg.GetEmotionRewardResponse.Price)
  return price_;
}

// optional uint32 DonorNum = 3;
bool GetEmotionRewardResponse::has_donornum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetEmotionRewardResponse::set_has_donornum() {
  _has_bits_[0] |= 0x00000004u;
}
void GetEmotionRewardResponse::clear_has_donornum() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetEmotionRewardResponse::clear_donornum() {
  donornum_ = 0u;
  clear_has_donornum();
}
::google::protobuf::uint32 GetEmotionRewardResponse::donornum() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionRewardResponse.DonorNum)
  return donornum_;
}
void GetEmotionRewardResponse::set_donornum(::google::protobuf::uint32 value) {
  set_has_donornum();
  donornum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetEmotionRewardResponse.DonorNum)
}

// repeated .micromsg.EmotionDonor Donors = 4;
int GetEmotionRewardResponse::donors_size() const {
  return donors_.size();
}
void GetEmotionRewardResponse::clear_donors() {
  donors_.Clear();
}
const ::micromsg::EmotionDonor& GetEmotionRewardResponse::donors(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionRewardResponse.Donors)
  return donors_.Get(index);
}
::micromsg::EmotionDonor* GetEmotionRewardResponse::mutable_donors(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionRewardResponse.Donors)
  return donors_.Mutable(index);
}
::micromsg::EmotionDonor* GetEmotionRewardResponse::add_donors() {
  // @@protoc_insertion_point(field_add:micromsg.GetEmotionRewardResponse.Donors)
  return donors_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::EmotionDonor >*
GetEmotionRewardResponse::mutable_donors() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetEmotionRewardResponse.Donors)
  return &donors_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::EmotionDonor >&
GetEmotionRewardResponse::donors() const {
  // @@protoc_insertion_point(field_list:micromsg.GetEmotionRewardResponse.Donors)
  return donors_;
}

// optional .micromsg.EmotionReward Reward = 5;
bool GetEmotionRewardResponse::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetEmotionRewardResponse::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
void GetEmotionRewardResponse::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetEmotionRewardResponse::clear_reward() {
  if (reward_ != NULL) reward_->::micromsg::EmotionReward::Clear();
  clear_has_reward();
}
const ::micromsg::EmotionReward& GetEmotionRewardResponse::reward() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionRewardResponse.Reward)
  return reward_ != NULL ? *reward_
                         : *::micromsg::EmotionReward::internal_default_instance();
}
::micromsg::EmotionReward* GetEmotionRewardResponse::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) {
    reward_ = new ::micromsg::EmotionReward;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionRewardResponse.Reward)
  return reward_;
}
::micromsg::EmotionReward* GetEmotionRewardResponse::release_reward() {
  // @@protoc_insertion_point(field_release:micromsg.GetEmotionRewardResponse.Reward)
  clear_has_reward();
  ::micromsg::EmotionReward* temp = reward_;
  reward_ = NULL;
  return temp;
}
void GetEmotionRewardResponse::set_allocated_reward(::micromsg::EmotionReward* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetEmotionRewardResponse.Reward)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetEmotionDonorListRequest::kProductIDFieldNumber;
const int GetEmotionDonorListRequest::kReqBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEmotionDonorListRequest::GetEmotionDonorListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetEmotionDonorListRequest)
}
GetEmotionDonorListRequest::GetEmotionDonorListRequest(const GetEmotionDonorListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  if (from.has_reqbuf()) {
    reqbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.reqbuf_);
  } else {
    reqbuf_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetEmotionDonorListRequest)
}

void GetEmotionDonorListRequest::SharedCtor() {
  _cached_size_ = 0;
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reqbuf_ = NULL;
}

GetEmotionDonorListRequest::~GetEmotionDonorListRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetEmotionDonorListRequest)
  SharedDtor();
}

void GetEmotionDonorListRequest::SharedDtor() {
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete reqbuf_;
  }
}

void GetEmotionDonorListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEmotionDonorListRequest::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetEmotionDonorListRequest& GetEmotionDonorListRequest::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetEmotionDonorListRequest* GetEmotionDonorListRequest::New(::google::protobuf::Arena* arena) const {
  GetEmotionDonorListRequest* n = new GetEmotionDonorListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetEmotionDonorListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetEmotionDonorListRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_productid()) {
      GOOGLE_DCHECK(!productid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*productid_.UnsafeRawStringPointer())->clear();
    }
    if (has_reqbuf()) {
      GOOGLE_DCHECK(reqbuf_ != NULL);
      reqbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetEmotionDonorListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetEmotionDonorListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ProductID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetEmotionDonorListRequest.ProductID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetEmotionDonorListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetEmotionDonorListRequest)
  return false;
#undef DO_
}

void GetEmotionDonorListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetEmotionDonorListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ProductID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetEmotionDonorListRequest.ProductID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->productid(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->reqbuf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetEmotionDonorListRequest)
}

::google::protobuf::uint8* GetEmotionDonorListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetEmotionDonorListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ProductID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetEmotionDonorListRequest.ProductID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->productid(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->reqbuf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetEmotionDonorListRequest)
  return target;
}

size_t GetEmotionDonorListRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetEmotionDonorListRequest)
  size_t total_size = 0;

  if (has_productid()) {
    // required string ProductID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());
  }

  if (has_reqbuf()) {
    // required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reqbuf_);
  }

  return total_size;
}
size_t GetEmotionDonorListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetEmotionDonorListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string ProductID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());

    // required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reqbuf_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEmotionDonorListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetEmotionDonorListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEmotionDonorListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetEmotionDonorListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetEmotionDonorListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetEmotionDonorListRequest)
    MergeFrom(*source);
  }
}

void GetEmotionDonorListRequest::MergeFrom(const GetEmotionDonorListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetEmotionDonorListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reqbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.reqbuf());
    }
  }
}

void GetEmotionDonorListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetEmotionDonorListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEmotionDonorListRequest::CopyFrom(const GetEmotionDonorListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetEmotionDonorListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEmotionDonorListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_reqbuf()) {
    if (!this->reqbuf_->IsInitialized()) return false;
  }
  return true;
}

void GetEmotionDonorListRequest::Swap(GetEmotionDonorListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEmotionDonorListRequest::InternalSwap(GetEmotionDonorListRequest* other) {
  productid_.Swap(&other->productid_);
  std::swap(reqbuf_, other->reqbuf_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetEmotionDonorListRequest::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetEmotionDonorListRequest

// required string ProductID = 1;
bool GetEmotionDonorListRequest::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetEmotionDonorListRequest::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
void GetEmotionDonorListRequest::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetEmotionDonorListRequest::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
const ::std::string& GetEmotionDonorListRequest::productid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionDonorListRequest.ProductID)
  return productid_.GetNoArena();
}
void GetEmotionDonorListRequest::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetEmotionDonorListRequest.ProductID)
}
#if LANG_CXX11
void GetEmotionDonorListRequest::set_productid(::std::string&& value) {
  set_has_productid();
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetEmotionDonorListRequest.ProductID)
}
#endif
void GetEmotionDonorListRequest::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetEmotionDonorListRequest.ProductID)
}
void GetEmotionDonorListRequest::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetEmotionDonorListRequest.ProductID)
}
::std::string* GetEmotionDonorListRequest::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionDonorListRequest.ProductID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetEmotionDonorListRequest::release_productid() {
  // @@protoc_insertion_point(field_release:micromsg.GetEmotionDonorListRequest.ProductID)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetEmotionDonorListRequest::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetEmotionDonorListRequest.ProductID)
}

// required .micromsg.SKBuiltinBuffer_t ReqBuf = 2;
bool GetEmotionDonorListRequest::has_reqbuf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetEmotionDonorListRequest::set_has_reqbuf() {
  _has_bits_[0] |= 0x00000002u;
}
void GetEmotionDonorListRequest::clear_has_reqbuf() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetEmotionDonorListRequest::clear_reqbuf() {
  if (reqbuf_ != NULL) reqbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_reqbuf();
}
const ::micromsg::SKBuiltinBuffer_t& GetEmotionDonorListRequest::reqbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionDonorListRequest.ReqBuf)
  return reqbuf_ != NULL ? *reqbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetEmotionDonorListRequest::mutable_reqbuf() {
  set_has_reqbuf();
  if (reqbuf_ == NULL) {
    reqbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionDonorListRequest.ReqBuf)
  return reqbuf_;
}
::micromsg::SKBuiltinBuffer_t* GetEmotionDonorListRequest::release_reqbuf() {
  // @@protoc_insertion_point(field_release:micromsg.GetEmotionDonorListRequest.ReqBuf)
  clear_has_reqbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = reqbuf_;
  reqbuf_ = NULL;
  return temp;
}
void GetEmotionDonorListRequest::set_allocated_reqbuf(::micromsg::SKBuiltinBuffer_t* reqbuf) {
  delete reqbuf_;
  reqbuf_ = reqbuf;
  if (reqbuf) {
    set_has_reqbuf();
  } else {
    clear_has_reqbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetEmotionDonorListRequest.ReqBuf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetEmotionDonorListResponse::kBaseResponseFieldNumber;
const int GetEmotionDonorListResponse::kDonorNumFieldNumber;
const int GetEmotionDonorListResponse::kDonorsFieldNumber;
const int GetEmotionDonorListResponse::kRespBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEmotionDonorListResponse::GetEmotionDonorListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetEmotionDonorListResponse)
}
GetEmotionDonorListResponse::GetEmotionDonorListResponse(const GetEmotionDonorListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      donors_(from.donors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_respbuf()) {
    respbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.respbuf_);
  } else {
    respbuf_ = NULL;
  }
  donornum_ = from.donornum_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetEmotionDonorListResponse)
}

void GetEmotionDonorListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&donornum_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(donornum_));
}

GetEmotionDonorListResponse::~GetEmotionDonorListResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetEmotionDonorListResponse)
  SharedDtor();
}

void GetEmotionDonorListResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete respbuf_;
  }
}

void GetEmotionDonorListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEmotionDonorListResponse::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetEmotionDonorListResponse& GetEmotionDonorListResponse::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetEmotionDonorListResponse* GetEmotionDonorListResponse::New(::google::protobuf::Arena* arena) const {
  GetEmotionDonorListResponse* n = new GetEmotionDonorListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetEmotionDonorListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetEmotionDonorListResponse)
  donors_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_respbuf()) {
      GOOGLE_DCHECK(respbuf_ != NULL);
      respbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  donornum_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetEmotionDonorListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetEmotionDonorListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DonorNum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_donornum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donornum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.EmotionDonor Donors = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_donors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t RespBuf = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_respbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetEmotionDonorListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetEmotionDonorListResponse)
  return false;
#undef DO_
}

void GetEmotionDonorListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetEmotionDonorListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 DonorNum = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->donornum(), output);
  }

  // repeated .micromsg.EmotionDonor Donors = 3;
  for (unsigned int i = 0, n = this->donors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->donors(i), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t RespBuf = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->respbuf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetEmotionDonorListResponse)
}

::google::protobuf::uint8* GetEmotionDonorListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetEmotionDonorListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 DonorNum = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->donornum(), target);
  }

  // repeated .micromsg.EmotionDonor Donors = 3;
  for (unsigned int i = 0, n = this->donors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->donors(i), deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t RespBuf = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->respbuf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetEmotionDonorListResponse)
  return target;
}

size_t GetEmotionDonorListResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetEmotionDonorListResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_donornum()) {
    // required uint32 DonorNum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->donornum());
  }

  return total_size;
}
size_t GetEmotionDonorListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetEmotionDonorListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 DonorNum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->donornum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.EmotionDonor Donors = 3;
  {
    unsigned int count = this->donors_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->donors(i));
    }
  }

  // optional .micromsg.SKBuiltinBuffer_t RespBuf = 4;
  if (has_respbuf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->respbuf_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEmotionDonorListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetEmotionDonorListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEmotionDonorListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetEmotionDonorListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetEmotionDonorListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetEmotionDonorListResponse)
    MergeFrom(*source);
  }
}

void GetEmotionDonorListResponse::MergeFrom(const GetEmotionDonorListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetEmotionDonorListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  donors_.MergeFrom(from.donors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_respbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.respbuf());
    }
    if (cached_has_bits & 0x00000004u) {
      donornum_ = from.donornum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetEmotionDonorListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetEmotionDonorListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEmotionDonorListResponse::CopyFrom(const GetEmotionDonorListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetEmotionDonorListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEmotionDonorListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->donors())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_respbuf()) {
    if (!this->respbuf_->IsInitialized()) return false;
  }
  return true;
}

void GetEmotionDonorListResponse::Swap(GetEmotionDonorListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEmotionDonorListResponse::InternalSwap(GetEmotionDonorListResponse* other) {
  donors_.InternalSwap(&other->donors_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(respbuf_, other->respbuf_);
  std::swap(donornum_, other->donornum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetEmotionDonorListResponse::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetEmotionDonorListResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetEmotionDonorListResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetEmotionDonorListResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetEmotionDonorListResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetEmotionDonorListResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetEmotionDonorListResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionDonorListResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetEmotionDonorListResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionDonorListResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetEmotionDonorListResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetEmotionDonorListResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetEmotionDonorListResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetEmotionDonorListResponse.BaseResponse)
}

// required uint32 DonorNum = 2;
bool GetEmotionDonorListResponse::has_donornum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetEmotionDonorListResponse::set_has_donornum() {
  _has_bits_[0] |= 0x00000004u;
}
void GetEmotionDonorListResponse::clear_has_donornum() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetEmotionDonorListResponse::clear_donornum() {
  donornum_ = 0u;
  clear_has_donornum();
}
::google::protobuf::uint32 GetEmotionDonorListResponse::donornum() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionDonorListResponse.DonorNum)
  return donornum_;
}
void GetEmotionDonorListResponse::set_donornum(::google::protobuf::uint32 value) {
  set_has_donornum();
  donornum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetEmotionDonorListResponse.DonorNum)
}

// repeated .micromsg.EmotionDonor Donors = 3;
int GetEmotionDonorListResponse::donors_size() const {
  return donors_.size();
}
void GetEmotionDonorListResponse::clear_donors() {
  donors_.Clear();
}
const ::micromsg::EmotionDonor& GetEmotionDonorListResponse::donors(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionDonorListResponse.Donors)
  return donors_.Get(index);
}
::micromsg::EmotionDonor* GetEmotionDonorListResponse::mutable_donors(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionDonorListResponse.Donors)
  return donors_.Mutable(index);
}
::micromsg::EmotionDonor* GetEmotionDonorListResponse::add_donors() {
  // @@protoc_insertion_point(field_add:micromsg.GetEmotionDonorListResponse.Donors)
  return donors_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::EmotionDonor >*
GetEmotionDonorListResponse::mutable_donors() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetEmotionDonorListResponse.Donors)
  return &donors_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::EmotionDonor >&
GetEmotionDonorListResponse::donors() const {
  // @@protoc_insertion_point(field_list:micromsg.GetEmotionDonorListResponse.Donors)
  return donors_;
}

// optional .micromsg.SKBuiltinBuffer_t RespBuf = 4;
bool GetEmotionDonorListResponse::has_respbuf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetEmotionDonorListResponse::set_has_respbuf() {
  _has_bits_[0] |= 0x00000002u;
}
void GetEmotionDonorListResponse::clear_has_respbuf() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetEmotionDonorListResponse::clear_respbuf() {
  if (respbuf_ != NULL) respbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_respbuf();
}
const ::micromsg::SKBuiltinBuffer_t& GetEmotionDonorListResponse::respbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.GetEmotionDonorListResponse.RespBuf)
  return respbuf_ != NULL ? *respbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetEmotionDonorListResponse::mutable_respbuf() {
  set_has_respbuf();
  if (respbuf_ == NULL) {
    respbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetEmotionDonorListResponse.RespBuf)
  return respbuf_;
}
::micromsg::SKBuiltinBuffer_t* GetEmotionDonorListResponse::release_respbuf() {
  // @@protoc_insertion_point(field_release:micromsg.GetEmotionDonorListResponse.RespBuf)
  clear_has_respbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = respbuf_;
  respbuf_ = NULL;
  return temp;
}
void GetEmotionDonorListResponse::set_allocated_respbuf(::micromsg::SKBuiltinBuffer_t* respbuf) {
  delete respbuf_;
  respbuf_ = respbuf;
  if (respbuf) {
    set_has_respbuf();
  } else {
    clear_has_respbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetEmotionDonorListResponse.RespBuf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskForRewardRequest::kProductIDFieldNumber;
const int AskForRewardRequest::kPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskForRewardRequest::AskForRewardRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AskForRewardRequest)
}
AskForRewardRequest::AskForRewardRequest(const AskForRewardRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  if (from.has_price()) {
    price_ = new ::micromsg::EmotionPrice(*from.price_);
  } else {
    price_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.AskForRewardRequest)
}

void AskForRewardRequest::SharedCtor() {
  _cached_size_ = 0;
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = NULL;
}

AskForRewardRequest::~AskForRewardRequest() {
  // @@protoc_insertion_point(destructor:micromsg.AskForRewardRequest)
  SharedDtor();
}

void AskForRewardRequest::SharedDtor() {
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete price_;
  }
}

void AskForRewardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskForRewardRequest::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AskForRewardRequest& AskForRewardRequest::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

AskForRewardRequest* AskForRewardRequest::New(::google::protobuf::Arena* arena) const {
  AskForRewardRequest* n = new AskForRewardRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AskForRewardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AskForRewardRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_productid()) {
      GOOGLE_DCHECK(!productid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*productid_.UnsafeRawStringPointer())->clear();
    }
    if (has_price()) {
      GOOGLE_DCHECK(price_ != NULL);
      price_->::micromsg::EmotionPrice::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AskForRewardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AskForRewardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ProductID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AskForRewardRequest.ProductID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.EmotionPrice Price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_price()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AskForRewardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AskForRewardRequest)
  return false;
#undef DO_
}

void AskForRewardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AskForRewardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ProductID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AskForRewardRequest.ProductID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->productid(), output);
  }

  // required .micromsg.EmotionPrice Price = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->price_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AskForRewardRequest)
}

::google::protobuf::uint8* AskForRewardRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AskForRewardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ProductID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AskForRewardRequest.ProductID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->productid(), target);
  }

  // required .micromsg.EmotionPrice Price = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->price_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AskForRewardRequest)
  return target;
}

size_t AskForRewardRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.AskForRewardRequest)
  size_t total_size = 0;

  if (has_productid()) {
    // required string ProductID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());
  }

  if (has_price()) {
    // required .micromsg.EmotionPrice Price = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->price_);
  }

  return total_size;
}
size_t AskForRewardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AskForRewardRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string ProductID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());

    // required .micromsg.EmotionPrice Price = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->price_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskForRewardRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AskForRewardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AskForRewardRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AskForRewardRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AskForRewardRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AskForRewardRequest)
    MergeFrom(*source);
  }
}

void AskForRewardRequest::MergeFrom(const AskForRewardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AskForRewardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_price()->::micromsg::EmotionPrice::MergeFrom(from.price());
    }
  }
}

void AskForRewardRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AskForRewardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskForRewardRequest::CopyFrom(const AskForRewardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AskForRewardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskForRewardRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_price()) {
    if (!this->price_->IsInitialized()) return false;
  }
  return true;
}

void AskForRewardRequest::Swap(AskForRewardRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskForRewardRequest::InternalSwap(AskForRewardRequest* other) {
  productid_.Swap(&other->productid_);
  std::swap(price_, other->price_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AskForRewardRequest::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AskForRewardRequest

// required string ProductID = 1;
bool AskForRewardRequest::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AskForRewardRequest::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
void AskForRewardRequest::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AskForRewardRequest::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
const ::std::string& AskForRewardRequest::productid() const {
  // @@protoc_insertion_point(field_get:micromsg.AskForRewardRequest.ProductID)
  return productid_.GetNoArena();
}
void AskForRewardRequest::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AskForRewardRequest.ProductID)
}
#if LANG_CXX11
void AskForRewardRequest::set_productid(::std::string&& value) {
  set_has_productid();
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AskForRewardRequest.ProductID)
}
#endif
void AskForRewardRequest::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AskForRewardRequest.ProductID)
}
void AskForRewardRequest::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AskForRewardRequest.ProductID)
}
::std::string* AskForRewardRequest::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:micromsg.AskForRewardRequest.ProductID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AskForRewardRequest::release_productid() {
  // @@protoc_insertion_point(field_release:micromsg.AskForRewardRequest.ProductID)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AskForRewardRequest::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AskForRewardRequest.ProductID)
}

// required .micromsg.EmotionPrice Price = 2;
bool AskForRewardRequest::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AskForRewardRequest::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
void AskForRewardRequest::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
void AskForRewardRequest::clear_price() {
  if (price_ != NULL) price_->::micromsg::EmotionPrice::Clear();
  clear_has_price();
}
const ::micromsg::EmotionPrice& AskForRewardRequest::price() const {
  // @@protoc_insertion_point(field_get:micromsg.AskForRewardRequest.Price)
  return price_ != NULL ? *price_
                         : *::micromsg::EmotionPrice::internal_default_instance();
}
::micromsg::EmotionPrice* AskForRewardRequest::mutable_price() {
  set_has_price();
  if (price_ == NULL) {
    price_ = new ::micromsg::EmotionPrice;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AskForRewardRequest.Price)
  return price_;
}
::micromsg::EmotionPrice* AskForRewardRequest::release_price() {
  // @@protoc_insertion_point(field_release:micromsg.AskForRewardRequest.Price)
  clear_has_price();
  ::micromsg::EmotionPrice* temp = price_;
  price_ = NULL;
  return temp;
}
void AskForRewardRequest::set_allocated_price(::micromsg::EmotionPrice* price) {
  delete price_;
  price_ = price;
  if (price) {
    set_has_price();
  } else {
    clear_has_price();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AskForRewardRequest.Price)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskForRewardResponse::kBaseResponseFieldNumber;
const int AskForRewardResponse::kReqKeyFieldNumber;
const int AskForRewardResponse::kAppIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskForRewardResponse::AskForRewardResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AskForRewardResponse)
}
AskForRewardResponse::AskForRewardResponse(const AskForRewardResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reqkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reqkey()) {
    reqkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reqkey_);
  }
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_appid()) {
    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.AskForRewardResponse)
}

void AskForRewardResponse::SharedCtor() {
  _cached_size_ = 0;
  reqkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

AskForRewardResponse::~AskForRewardResponse() {
  // @@protoc_insertion_point(destructor:micromsg.AskForRewardResponse)
  SharedDtor();
}

void AskForRewardResponse::SharedDtor() {
  reqkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void AskForRewardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskForRewardResponse::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AskForRewardResponse& AskForRewardResponse::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

AskForRewardResponse* AskForRewardResponse::New(::google::protobuf::Arena* arena) const {
  AskForRewardResponse* n = new AskForRewardResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AskForRewardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AskForRewardResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_reqkey()) {
      GOOGLE_DCHECK(!reqkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*reqkey_.UnsafeRawStringPointer())->clear();
    }
    if (has_appid()) {
      GOOGLE_DCHECK(!appid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*appid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AskForRewardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AskForRewardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string ReqKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reqkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reqkey().data(), this->reqkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AskForRewardResponse.ReqKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string AppID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AskForRewardResponse.AppID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AskForRewardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AskForRewardResponse)
  return false;
#undef DO_
}

void AskForRewardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AskForRewardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required string ReqKey = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reqkey().data(), this->reqkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AskForRewardResponse.ReqKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reqkey(), output);
  }

  // required string AppID = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AskForRewardResponse.AppID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AskForRewardResponse)
}

::google::protobuf::uint8* AskForRewardResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AskForRewardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required string ReqKey = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reqkey().data(), this->reqkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AskForRewardResponse.ReqKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reqkey(), target);
  }

  // required string AppID = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AskForRewardResponse.AppID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AskForRewardResponse)
  return target;
}

size_t AskForRewardResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.AskForRewardResponse)
  size_t total_size = 0;

  if (has_reqkey()) {
    // required string ReqKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reqkey());
  }

  if (has_appid()) {
    // required string AppID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appid());
  }

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  return total_size;
}
size_t AskForRewardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AskForRewardResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string ReqKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reqkey());

    // required string AppID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appid());

    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskForRewardResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AskForRewardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AskForRewardResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AskForRewardResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AskForRewardResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AskForRewardResponse)
    MergeFrom(*source);
  }
}

void AskForRewardResponse::MergeFrom(const AskForRewardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AskForRewardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reqkey();
      reqkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reqkey_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_appid();
      appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void AskForRewardResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AskForRewardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskForRewardResponse::CopyFrom(const AskForRewardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AskForRewardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskForRewardResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void AskForRewardResponse::Swap(AskForRewardResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskForRewardResponse::InternalSwap(AskForRewardResponse* other) {
  reqkey_.Swap(&other->reqkey_);
  appid_.Swap(&other->appid_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AskForRewardResponse::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AskForRewardResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool AskForRewardResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AskForRewardResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void AskForRewardResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void AskForRewardResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& AskForRewardResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.AskForRewardResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* AskForRewardResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AskForRewardResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* AskForRewardResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.AskForRewardResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void AskForRewardResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AskForRewardResponse.BaseResponse)
}

// required string ReqKey = 2;
bool AskForRewardResponse::has_reqkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AskForRewardResponse::set_has_reqkey() {
  _has_bits_[0] |= 0x00000001u;
}
void AskForRewardResponse::clear_has_reqkey() {
  _has_bits_[0] &= ~0x00000001u;
}
void AskForRewardResponse::clear_reqkey() {
  reqkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reqkey();
}
const ::std::string& AskForRewardResponse::reqkey() const {
  // @@protoc_insertion_point(field_get:micromsg.AskForRewardResponse.ReqKey)
  return reqkey_.GetNoArena();
}
void AskForRewardResponse::set_reqkey(const ::std::string& value) {
  set_has_reqkey();
  reqkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AskForRewardResponse.ReqKey)
}
#if LANG_CXX11
void AskForRewardResponse::set_reqkey(::std::string&& value) {
  set_has_reqkey();
  reqkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AskForRewardResponse.ReqKey)
}
#endif
void AskForRewardResponse::set_reqkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reqkey();
  reqkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AskForRewardResponse.ReqKey)
}
void AskForRewardResponse::set_reqkey(const char* value, size_t size) {
  set_has_reqkey();
  reqkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AskForRewardResponse.ReqKey)
}
::std::string* AskForRewardResponse::mutable_reqkey() {
  set_has_reqkey();
  // @@protoc_insertion_point(field_mutable:micromsg.AskForRewardResponse.ReqKey)
  return reqkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AskForRewardResponse::release_reqkey() {
  // @@protoc_insertion_point(field_release:micromsg.AskForRewardResponse.ReqKey)
  clear_has_reqkey();
  return reqkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AskForRewardResponse::set_allocated_reqkey(::std::string* reqkey) {
  if (reqkey != NULL) {
    set_has_reqkey();
  } else {
    clear_has_reqkey();
  }
  reqkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reqkey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AskForRewardResponse.ReqKey)
}

// required string AppID = 3;
bool AskForRewardResponse::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AskForRewardResponse::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void AskForRewardResponse::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void AskForRewardResponse::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
const ::std::string& AskForRewardResponse::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.AskForRewardResponse.AppID)
  return appid_.GetNoArena();
}
void AskForRewardResponse::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AskForRewardResponse.AppID)
}
#if LANG_CXX11
void AskForRewardResponse::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AskForRewardResponse.AppID)
}
#endif
void AskForRewardResponse::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AskForRewardResponse.AppID)
}
void AskForRewardResponse::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AskForRewardResponse.AppID)
}
::std::string* AskForRewardResponse::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.AskForRewardResponse.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AskForRewardResponse::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.AskForRewardResponse.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AskForRewardResponse::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AskForRewardResponse.AppID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRewardMagicListRequest::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRewardMagicListRequest::GetRewardMagicListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetRewardMagicListRequest)
}
GetRewardMagicListRequest::GetRewardMagicListRequest(const GetRewardMagicListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scene_ = from.scene_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetRewardMagicListRequest)
}

void GetRewardMagicListRequest::SharedCtor() {
  _cached_size_ = 0;
  scene_ = 0u;
}

GetRewardMagicListRequest::~GetRewardMagicListRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetRewardMagicListRequest)
  SharedDtor();
}

void GetRewardMagicListRequest::SharedDtor() {
}

void GetRewardMagicListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRewardMagicListRequest::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRewardMagicListRequest& GetRewardMagicListRequest::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetRewardMagicListRequest* GetRewardMagicListRequest::New(::google::protobuf::Arena* arena) const {
  GetRewardMagicListRequest* n = new GetRewardMagicListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRewardMagicListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetRewardMagicListRequest)
  scene_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetRewardMagicListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetRewardMagicListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Scene = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetRewardMagicListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetRewardMagicListRequest)
  return false;
#undef DO_
}

void GetRewardMagicListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetRewardMagicListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Scene = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetRewardMagicListRequest)
}

::google::protobuf::uint8* GetRewardMagicListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetRewardMagicListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Scene = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetRewardMagicListRequest)
  return target;
}

size_t GetRewardMagicListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetRewardMagicListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Scene = 1;
  if (has_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRewardMagicListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetRewardMagicListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRewardMagicListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRewardMagicListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetRewardMagicListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetRewardMagicListRequest)
    MergeFrom(*source);
  }
}

void GetRewardMagicListRequest::MergeFrom(const GetRewardMagicListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetRewardMagicListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scene()) {
    set_scene(from.scene());
  }
}

void GetRewardMagicListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetRewardMagicListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRewardMagicListRequest::CopyFrom(const GetRewardMagicListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetRewardMagicListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRewardMagicListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetRewardMagicListRequest::Swap(GetRewardMagicListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRewardMagicListRequest::InternalSwap(GetRewardMagicListRequest* other) {
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRewardMagicListRequest::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRewardMagicListRequest

// required uint32 Scene = 1;
bool GetRewardMagicListRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetRewardMagicListRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000001u;
}
void GetRewardMagicListRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetRewardMagicListRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 GetRewardMagicListRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.GetRewardMagicListRequest.Scene)
  return scene_;
}
void GetRewardMagicListRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetRewardMagicListRequest.Scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RewardMagic::kMagicWordFieldNumber;
const int RewardMagic::kMagicUrlFieldNumber;
const int RewardMagic::kMagicExpireFieldNumber;
const int RewardMagic::kMagicLimitFieldNumber;
const int RewardMagic::kProductIDFieldNumber;
const int RewardMagic::kMd5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RewardMagic::RewardMagic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.RewardMagic)
}
RewardMagic::RewardMagic(const RewardMagic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  magicword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_magicword()) {
    magicword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.magicword_);
  }
  magicurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_magicurl()) {
    magicurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.magicurl_);
  }
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_md5()) {
    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  ::memcpy(&magicexpire_, &from.magicexpire_,
    reinterpret_cast<char*>(&magiclimit_) -
    reinterpret_cast<char*>(&magicexpire_) + sizeof(magiclimit_));
  // @@protoc_insertion_point(copy_constructor:micromsg.RewardMagic)
}

void RewardMagic::SharedCtor() {
  _cached_size_ = 0;
  magicword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  magicurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&magicexpire_, 0, reinterpret_cast<char*>(&magiclimit_) -
    reinterpret_cast<char*>(&magicexpire_) + sizeof(magiclimit_));
}

RewardMagic::~RewardMagic() {
  // @@protoc_insertion_point(destructor:micromsg.RewardMagic)
  SharedDtor();
}

void RewardMagic::SharedDtor() {
  magicword_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  magicurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RewardMagic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardMagic::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RewardMagic& RewardMagic::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

RewardMagic* RewardMagic::New(::google::protobuf::Arena* arena) const {
  RewardMagic* n = new RewardMagic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RewardMagic::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.RewardMagic)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_magicword()) {
      GOOGLE_DCHECK(!magicword_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*magicword_.UnsafeRawStringPointer())->clear();
    }
    if (has_magicurl()) {
      GOOGLE_DCHECK(!magicurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*magicurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_productid()) {
      GOOGLE_DCHECK(!productid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*productid_.UnsafeRawStringPointer())->clear();
    }
    if (has_md5()) {
      GOOGLE_DCHECK(!md5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*md5_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 48u) {
    ::memset(&magicexpire_, 0, reinterpret_cast<char*>(&magiclimit_) -
      reinterpret_cast<char*>(&magicexpire_) + sizeof(magiclimit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RewardMagic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.RewardMagic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string MagicWord = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_magicword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->magicword().data(), this->magicword().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RewardMagic.MagicWord");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string MagicUrl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_magicurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->magicurl().data(), this->magicurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RewardMagic.MagicUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 MagicExpire = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_magicexpire();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magicexpire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 MagicLimit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_magiclimit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magiclimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string ProductID = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RewardMagic.ProductID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Md5 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RewardMagic.Md5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.RewardMagic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.RewardMagic)
  return false;
#undef DO_
}

void RewardMagic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.RewardMagic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string MagicWord = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->magicword().data(), this->magicword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RewardMagic.MagicWord");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->magicword(), output);
  }

  // required string MagicUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->magicurl().data(), this->magicurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RewardMagic.MagicUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->magicurl(), output);
  }

  // optional uint32 MagicExpire = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->magicexpire(), output);
  }

  // optional uint32 MagicLimit = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->magiclimit(), output);
  }

  // required string ProductID = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RewardMagic.ProductID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->productid(), output);
  }

  // optional string Md5 = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RewardMagic.Md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->md5(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.RewardMagic)
}

::google::protobuf::uint8* RewardMagic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.RewardMagic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string MagicWord = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->magicword().data(), this->magicword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RewardMagic.MagicWord");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->magicword(), target);
  }

  // required string MagicUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->magicurl().data(), this->magicurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RewardMagic.MagicUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->magicurl(), target);
  }

  // optional uint32 MagicExpire = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->magicexpire(), target);
  }

  // optional uint32 MagicLimit = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->magiclimit(), target);
  }

  // required string ProductID = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RewardMagic.ProductID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->productid(), target);
  }

  // optional string Md5 = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RewardMagic.Md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->md5(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.RewardMagic)
  return target;
}

size_t RewardMagic::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.RewardMagic)
  size_t total_size = 0;

  if (has_magicword()) {
    // required string MagicWord = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->magicword());
  }

  if (has_magicurl()) {
    // required string MagicUrl = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->magicurl());
  }

  if (has_productid()) {
    // required string ProductID = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());
  }

  return total_size;
}
size_t RewardMagic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.RewardMagic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string MagicWord = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->magicword());

    // required string MagicUrl = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->magicurl());

    // required string ProductID = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 56u) {
    // optional string Md5 = 6;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

    // optional uint32 MagicExpire = 3;
    if (has_magicexpire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magicexpire());
    }

    // optional uint32 MagicLimit = 4;
    if (has_magiclimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magiclimit());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardMagic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.RewardMagic)
  GOOGLE_DCHECK_NE(&from, this);
  const RewardMagic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RewardMagic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.RewardMagic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.RewardMagic)
    MergeFrom(*source);
  }
}

void RewardMagic::MergeFrom(const RewardMagic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.RewardMagic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_magicword();
      magicword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.magicword_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_magicurl();
      magicurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.magicurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_md5();
      md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
    }
    if (cached_has_bits & 0x00000010u) {
      magicexpire_ = from.magicexpire_;
    }
    if (cached_has_bits & 0x00000020u) {
      magiclimit_ = from.magiclimit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RewardMagic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.RewardMagic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardMagic::CopyFrom(const RewardMagic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.RewardMagic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardMagic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void RewardMagic::Swap(RewardMagic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RewardMagic::InternalSwap(RewardMagic* other) {
  magicword_.Swap(&other->magicword_);
  magicurl_.Swap(&other->magicurl_);
  productid_.Swap(&other->productid_);
  md5_.Swap(&other->md5_);
  std::swap(magicexpire_, other->magicexpire_);
  std::swap(magiclimit_, other->magiclimit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RewardMagic::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RewardMagic

// required string MagicWord = 1;
bool RewardMagic::has_magicword() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RewardMagic::set_has_magicword() {
  _has_bits_[0] |= 0x00000001u;
}
void RewardMagic::clear_has_magicword() {
  _has_bits_[0] &= ~0x00000001u;
}
void RewardMagic::clear_magicword() {
  magicword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_magicword();
}
const ::std::string& RewardMagic::magicword() const {
  // @@protoc_insertion_point(field_get:micromsg.RewardMagic.MagicWord)
  return magicword_.GetNoArena();
}
void RewardMagic::set_magicword(const ::std::string& value) {
  set_has_magicword();
  magicword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RewardMagic.MagicWord)
}
#if LANG_CXX11
void RewardMagic::set_magicword(::std::string&& value) {
  set_has_magicword();
  magicword_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RewardMagic.MagicWord)
}
#endif
void RewardMagic::set_magicword(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_magicword();
  magicword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RewardMagic.MagicWord)
}
void RewardMagic::set_magicword(const char* value, size_t size) {
  set_has_magicword();
  magicword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RewardMagic.MagicWord)
}
::std::string* RewardMagic::mutable_magicword() {
  set_has_magicword();
  // @@protoc_insertion_point(field_mutable:micromsg.RewardMagic.MagicWord)
  return magicword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RewardMagic::release_magicword() {
  // @@protoc_insertion_point(field_release:micromsg.RewardMagic.MagicWord)
  clear_has_magicword();
  return magicword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RewardMagic::set_allocated_magicword(::std::string* magicword) {
  if (magicword != NULL) {
    set_has_magicword();
  } else {
    clear_has_magicword();
  }
  magicword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), magicword);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RewardMagic.MagicWord)
}

// required string MagicUrl = 2;
bool RewardMagic::has_magicurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RewardMagic::set_has_magicurl() {
  _has_bits_[0] |= 0x00000002u;
}
void RewardMagic::clear_has_magicurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void RewardMagic::clear_magicurl() {
  magicurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_magicurl();
}
const ::std::string& RewardMagic::magicurl() const {
  // @@protoc_insertion_point(field_get:micromsg.RewardMagic.MagicUrl)
  return magicurl_.GetNoArena();
}
void RewardMagic::set_magicurl(const ::std::string& value) {
  set_has_magicurl();
  magicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RewardMagic.MagicUrl)
}
#if LANG_CXX11
void RewardMagic::set_magicurl(::std::string&& value) {
  set_has_magicurl();
  magicurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RewardMagic.MagicUrl)
}
#endif
void RewardMagic::set_magicurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_magicurl();
  magicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RewardMagic.MagicUrl)
}
void RewardMagic::set_magicurl(const char* value, size_t size) {
  set_has_magicurl();
  magicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RewardMagic.MagicUrl)
}
::std::string* RewardMagic::mutable_magicurl() {
  set_has_magicurl();
  // @@protoc_insertion_point(field_mutable:micromsg.RewardMagic.MagicUrl)
  return magicurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RewardMagic::release_magicurl() {
  // @@protoc_insertion_point(field_release:micromsg.RewardMagic.MagicUrl)
  clear_has_magicurl();
  return magicurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RewardMagic::set_allocated_magicurl(::std::string* magicurl) {
  if (magicurl != NULL) {
    set_has_magicurl();
  } else {
    clear_has_magicurl();
  }
  magicurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), magicurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RewardMagic.MagicUrl)
}

// optional uint32 MagicExpire = 3;
bool RewardMagic::has_magicexpire() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RewardMagic::set_has_magicexpire() {
  _has_bits_[0] |= 0x00000010u;
}
void RewardMagic::clear_has_magicexpire() {
  _has_bits_[0] &= ~0x00000010u;
}
void RewardMagic::clear_magicexpire() {
  magicexpire_ = 0u;
  clear_has_magicexpire();
}
::google::protobuf::uint32 RewardMagic::magicexpire() const {
  // @@protoc_insertion_point(field_get:micromsg.RewardMagic.MagicExpire)
  return magicexpire_;
}
void RewardMagic::set_magicexpire(::google::protobuf::uint32 value) {
  set_has_magicexpire();
  magicexpire_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RewardMagic.MagicExpire)
}

// optional uint32 MagicLimit = 4;
bool RewardMagic::has_magiclimit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RewardMagic::set_has_magiclimit() {
  _has_bits_[0] |= 0x00000020u;
}
void RewardMagic::clear_has_magiclimit() {
  _has_bits_[0] &= ~0x00000020u;
}
void RewardMagic::clear_magiclimit() {
  magiclimit_ = 0u;
  clear_has_magiclimit();
}
::google::protobuf::uint32 RewardMagic::magiclimit() const {
  // @@protoc_insertion_point(field_get:micromsg.RewardMagic.MagicLimit)
  return magiclimit_;
}
void RewardMagic::set_magiclimit(::google::protobuf::uint32 value) {
  set_has_magiclimit();
  magiclimit_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RewardMagic.MagicLimit)
}

// required string ProductID = 5;
bool RewardMagic::has_productid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RewardMagic::set_has_productid() {
  _has_bits_[0] |= 0x00000004u;
}
void RewardMagic::clear_has_productid() {
  _has_bits_[0] &= ~0x00000004u;
}
void RewardMagic::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
const ::std::string& RewardMagic::productid() const {
  // @@protoc_insertion_point(field_get:micromsg.RewardMagic.ProductID)
  return productid_.GetNoArena();
}
void RewardMagic::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RewardMagic.ProductID)
}
#if LANG_CXX11
void RewardMagic::set_productid(::std::string&& value) {
  set_has_productid();
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RewardMagic.ProductID)
}
#endif
void RewardMagic::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RewardMagic.ProductID)
}
void RewardMagic::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RewardMagic.ProductID)
}
::std::string* RewardMagic::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:micromsg.RewardMagic.ProductID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RewardMagic::release_productid() {
  // @@protoc_insertion_point(field_release:micromsg.RewardMagic.ProductID)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RewardMagic::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RewardMagic.ProductID)
}

// optional string Md5 = 6;
bool RewardMagic::has_md5() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RewardMagic::set_has_md5() {
  _has_bits_[0] |= 0x00000008u;
}
void RewardMagic::clear_has_md5() {
  _has_bits_[0] &= ~0x00000008u;
}
void RewardMagic::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
const ::std::string& RewardMagic::md5() const {
  // @@protoc_insertion_point(field_get:micromsg.RewardMagic.Md5)
  return md5_.GetNoArena();
}
void RewardMagic::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RewardMagic.Md5)
}
#if LANG_CXX11
void RewardMagic::set_md5(::std::string&& value) {
  set_has_md5();
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RewardMagic.Md5)
}
#endif
void RewardMagic::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RewardMagic.Md5)
}
void RewardMagic::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RewardMagic.Md5)
}
::std::string* RewardMagic::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:micromsg.RewardMagic.Md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RewardMagic::release_md5() {
  // @@protoc_insertion_point(field_release:micromsg.RewardMagic.Md5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RewardMagic::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RewardMagic.Md5)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRewardMagicListResponse::kBaseResponseFieldNumber;
const int GetRewardMagicListResponse::kMagicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRewardMagicListResponse::GetRewardMagicListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmemotionstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetRewardMagicListResponse)
}
GetRewardMagicListResponse::GetRewardMagicListResponse(const GetRewardMagicListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      magic_(from.magic_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetRewardMagicListResponse)
}

void GetRewardMagicListResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

GetRewardMagicListResponse::~GetRewardMagicListResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetRewardMagicListResponse)
  SharedDtor();
}

void GetRewardMagicListResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetRewardMagicListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRewardMagicListResponse::descriptor() {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRewardMagicListResponse& GetRewardMagicListResponse::default_instance() {
  protobuf_mmemotionstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetRewardMagicListResponse* GetRewardMagicListResponse::New(::google::protobuf::Arena* arena) const {
  GetRewardMagicListResponse* n = new GetRewardMagicListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRewardMagicListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetRewardMagicListResponse)
  magic_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetRewardMagicListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetRewardMagicListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.RewardMagic Magic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_magic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetRewardMagicListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetRewardMagicListResponse)
  return false;
#undef DO_
}

void GetRewardMagicListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetRewardMagicListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // repeated .micromsg.RewardMagic Magic = 2;
  for (unsigned int i = 0, n = this->magic_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->magic(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetRewardMagicListResponse)
}

::google::protobuf::uint8* GetRewardMagicListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetRewardMagicListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // repeated .micromsg.RewardMagic Magic = 2;
  for (unsigned int i = 0, n = this->magic_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->magic(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetRewardMagicListResponse)
  return target;
}

size_t GetRewardMagicListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetRewardMagicListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // repeated .micromsg.RewardMagic Magic = 2;
  {
    unsigned int count = this->magic_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->magic(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRewardMagicListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetRewardMagicListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRewardMagicListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRewardMagicListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetRewardMagicListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetRewardMagicListResponse)
    MergeFrom(*source);
  }
}

void GetRewardMagicListResponse::MergeFrom(const GetRewardMagicListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetRewardMagicListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  magic_.MergeFrom(from.magic_);
  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void GetRewardMagicListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetRewardMagicListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRewardMagicListResponse::CopyFrom(const GetRewardMagicListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetRewardMagicListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRewardMagicListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->magic())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetRewardMagicListResponse::Swap(GetRewardMagicListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRewardMagicListResponse::InternalSwap(GetRewardMagicListResponse* other) {
  magic_.InternalSwap(&other->magic_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRewardMagicListResponse::GetMetadata() const {
  protobuf_mmemotionstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmemotionstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRewardMagicListResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetRewardMagicListResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetRewardMagicListResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetRewardMagicListResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetRewardMagicListResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetRewardMagicListResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetRewardMagicListResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetRewardMagicListResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetRewardMagicListResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetRewardMagicListResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetRewardMagicListResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetRewardMagicListResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetRewardMagicListResponse.BaseResponse)
}

// repeated .micromsg.RewardMagic Magic = 2;
int GetRewardMagicListResponse::magic_size() const {
  return magic_.size();
}
void GetRewardMagicListResponse::clear_magic() {
  magic_.Clear();
}
const ::micromsg::RewardMagic& GetRewardMagicListResponse::magic(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetRewardMagicListResponse.Magic)
  return magic_.Get(index);
}
::micromsg::RewardMagic* GetRewardMagicListResponse::mutable_magic(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetRewardMagicListResponse.Magic)
  return magic_.Mutable(index);
}
::micromsg::RewardMagic* GetRewardMagicListResponse::add_magic() {
  // @@protoc_insertion_point(field_add:micromsg.GetRewardMagicListResponse.Magic)
  return magic_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::RewardMagic >*
GetRewardMagicListResponse::mutable_magic() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetRewardMagicListResponse.Magic)
  return &magic_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::RewardMagic >&
GetRewardMagicListResponse::magic() const {
  // @@protoc_insertion_point(field_list:micromsg.GetRewardMagicListResponse.Magic)
  return magic_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg

// @@protoc_insertion_point(global_scope)
