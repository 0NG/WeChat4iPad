// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmextsend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mmextsend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micromsg {
class GetCDNDnsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetCDNDnsRequest> {
} _GetCDNDnsRequest_default_instance_;
class GetCDNDnsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetCDNDnsResponse> {
} _GetCDNDnsResponse_default_instance_;
class EmojiUploadInfoReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmojiUploadInfoReq> {
} _EmojiUploadInfoReq_default_instance_;
class UploadEmojiRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UploadEmojiRequest> {
} _UploadEmojiRequest_default_instance_;
class EmojiUploadInfoRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmojiUploadInfoResp> {
} _EmojiUploadInfoResp_default_instance_;
class UploadEmojiResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UploadEmojiResponse> {
} _UploadEmojiResponse_default_instance_;
class EmojiDownloadInfoReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmojiDownloadInfoReq> {
} _EmojiDownloadInfoReq_default_instance_;
class DownloadEmojiRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DownloadEmojiRequest> {
} _DownloadEmojiRequest_default_instance_;
class EmojiDownloadInfoRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmojiDownloadInfoResp> {
} _EmojiDownloadInfoResp_default_instance_;
class DownloadEmojiResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DownloadEmojiResponse> {
} _DownloadEmojiResponse_default_instance_;
class DownloadVoiceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DownloadVoiceRequest> {
} _DownloadVoiceRequest_default_instance_;
class DownloadVoiceResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DownloadVoiceResponse> {
} _DownloadVoiceResponse_default_instance_;
class UploadMsgImgRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UploadMsgImgRequest> {
} _UploadMsgImgRequest_default_instance_;
class UploadMsgImgResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UploadMsgImgResponse> {
} _UploadMsgImgResponse_default_instance_;
class CDNUploadMsgImgPrepareRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDNUploadMsgImgPrepareRequest> {
} _CDNUploadMsgImgPrepareRequest_default_instance_;
class CDNUploadMsgImgPrepareResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDNUploadMsgImgPrepareResponse> {
} _CDNUploadMsgImgPrepareResponse_default_instance_;
class CDNUploadMsgImgCommitRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDNUploadMsgImgCommitRequest> {
} _CDNUploadMsgImgCommitRequest_default_instance_;
class CDNUploadMsgImgCommitResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDNUploadMsgImgCommitResponse> {
} _CDNUploadMsgImgCommitResponse_default_instance_;
class UploadWeiboImgRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UploadWeiboImgRequest> {
} _UploadWeiboImgRequest_default_instance_;
class UploadWeiboImgResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UploadWeiboImgResponse> {
} _UploadWeiboImgResponse_default_instance_;
class UploadToWeiboRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UploadToWeiboRequest> {
} _UploadToWeiboRequest_default_instance_;
class UploadToWeiboResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UploadToWeiboResponse> {
} _UploadToWeiboResponse_default_instance_;
class GetMsgImgRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetMsgImgRequest> {
} _GetMsgImgRequest_default_instance_;
class GetMsgImgResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetMsgImgResponse> {
} _GetMsgImgResponse_default_instance_;
class UploadVideoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UploadVideoRequest> {
} _UploadVideoRequest_default_instance_;
class UploadVideoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UploadVideoResponse> {
} _UploadVideoResponse_default_instance_;
class DownloadVideoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DownloadVideoRequest> {
} _DownloadVideoRequest_default_instance_;
class DownloadVideoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DownloadVideoResponse> {
} _DownloadVideoResponse_default_instance_;
class RevokeMsgRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RevokeMsgRequest> {
} _RevokeMsgRequest_default_instance_;
class RevokeMsgResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RevokeMsgResponse> {
} _RevokeMsgResponse_default_instance_;
class SendYoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendYoRequest> {
} _SendYoRequest_default_instance_;
class SendYoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendYoResponse> {
} _SendYoResponse_default_instance_;
class CheckBigFileUploadRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckBigFileUploadRequest> {
} _CheckBigFileUploadRequest_default_instance_;
class CheckBigFileUploadResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckBigFileUploadResponse> {
} _CheckBigFileUploadResponse_default_instance_;
class CheckBigFileDownloadRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckBigFileDownloadRequest> {
} _CheckBigFileDownloadRequest_default_instance_;
class CheckBigFileDownloadResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckBigFileDownloadResponse> {
} _CheckBigFileDownloadResponse_default_instance_;

namespace protobuf_mmextsend_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[36];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCDNDnsRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCDNDnsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCDNDnsRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCDNDnsRequest, clientip_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCDNDnsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCDNDnsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCDNDnsResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCDNDnsResponse, dnsinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCDNDnsResponse, snsdnsinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCDNDnsResponse, appdnsinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCDNDnsResponse, cdndnsrulebuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCDNDnsResponse, fakecdndnsrulebuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCDNDnsResponse, fakednsinfo_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadInfoReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadInfoReq, md5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadInfoReq, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadInfoReq, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadInfoReq, emojibuffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadInfoReq, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadInfoReq, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadInfoReq, externxml_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadInfoReq, report_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadInfoReq, clientmsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadInfoReq, msgsource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadInfoReq, newxmlflag_),
  0,
  7,
  8,
  6,
  9,
  1,
  2,
  3,
  4,
  5,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiRequest, emojiitemcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiRequest, emojiitem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiRequest, reqtime_),
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadInfoResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadInfoResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadInfoResp, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadInfoResp, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadInfoResp, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadInfoResp, md5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadInfoResp, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiUploadInfoResp, newmsgid_),
  1,
  2,
  3,
  0,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiResponse, emojiitemcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadEmojiResponse, emojiitem_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiDownloadInfoReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiDownloadInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiDownloadInfoReq, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiDownloadInfoReq, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiDownloadInfoReq, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiDownloadInfoReq, md5_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadEmojiRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadEmojiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadEmojiRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadEmojiRequest, emojiitemcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadEmojiRequest, emojiitem_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiDownloadInfoResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiDownloadInfoResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiDownloadInfoResp, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiDownloadInfoResp, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiDownloadInfoResp, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiDownloadInfoResp, emojibuffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiDownloadInfoResp, md5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmojiDownloadInfoResp, id_),
  3,
  4,
  5,
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadEmojiResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadEmojiResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadEmojiResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadEmojiResponse, emojiitemcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadEmojiResponse, emojiitem_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceRequest, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceRequest, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceRequest, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceRequest, clientmsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceRequest, newmsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceRequest, chatroomname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceRequest, masterbufid_),
  3,
  4,
  7,
  0,
  2,
  5,
  1,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceResponse, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceResponse, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceResponse, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceResponse, voicelength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceResponse, clientmsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceResponse, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceResponse, endflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceResponse, cancelflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVoiceResponse, newmsgid_),
  3,
  4,
  5,
  6,
  0,
  1,
  7,
  2,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, clientimgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, datalen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, msgtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, msgsource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, compresstype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, nettype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, photofrom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, mediaid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, cdnbigimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, cdnmidimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, aeskey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, encryver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, cdnbigimgsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, cdnmidimgsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, cdnthumbimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, cdnthumbimgsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, cdnthumbimgheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, cdnthumbimgwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, cdnthumbaeskey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, reqtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, md5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, crc32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, msgforwardtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgRequest, hitmd5_),
  8,
  9,
  10,
  11,
  13,
  14,
  15,
  12,
  16,
  0,
  17,
  18,
  19,
  1,
  2,
  3,
  4,
  20,
  21,
  22,
  5,
  23,
  24,
  25,
  6,
  26,
  7,
  27,
  28,
  29,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgResponse, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgResponse, clientimgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgResponse, fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgResponse, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgResponse, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgResponse, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgResponse, datalen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgResponse, createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgResponse, newmsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgResponse, aeskey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMsgImgResponse, fileid_),
  2,
  6,
  3,
  4,
  5,
  7,
  8,
  9,
  11,
  10,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareRequest, clientimgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareRequest, fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareRequest, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareRequest, thumbheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareRequest, thumbwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareRequest, msgsource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareRequest, clientstat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareRequest, scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareRequest, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareRequest, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareRequest, attachedcontent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareRequest, midheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareRequest, midwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareRequest, hdheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareRequest, hdwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareRequest, aeskey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareRequest, encryver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareRequest, crc32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareRequest, msgforwardtype_),
  0,
  1,
  2,
  7,
  8,
  3,
  6,
  9,
  10,
  11,
  4,
  12,
  13,
  14,
  15,
  5,
  16,
  17,
  18,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareResponse, clientimgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareResponse, fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareResponse, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareResponse, createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareResponse, newmsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareResponse, aeskey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgPrepareResponse, fileid_),
  5,
  0,
  1,
  2,
  6,
  7,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgCommitRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgCommitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgCommitRequest, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgCommitRequest, imgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgCommitRequest, aeskey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgCommitRequest, encryver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgCommitRequest, midsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgCommitRequest, thumbsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgCommitRequest, bigsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgCommitRequest, md5sum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgCommitRequest, safeproto_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgCommitRequest, hit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgCommitRequest, fileinfo_),
  0,
  1,
  2,
  5,
  6,
  7,
  8,
  3,
  9,
  10,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgCommitResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgCommitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNUploadMsgImgCommitResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeiboImgRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeiboImgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeiboImgRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeiboImgRequest, clientimgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeiboImgRequest, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeiboImgRequest, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeiboImgRequest, datalen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeiboImgRequest, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeiboImgRequest, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeiboImgRequest, filtertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeiboImgRequest, flag_),
  3,
  0,
  4,
  5,
  6,
  1,
  2,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeiboImgResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeiboImgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeiboImgResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeiboImgResponse, clientimgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeiboImgResponse, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeiboImgResponse, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeiboImgResponse, datalen_),
  1,
  0,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadToWeiboRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadToWeiboRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadToWeiboRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadToWeiboRequest, clientmsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadToWeiboRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadToWeiboRequest, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadToWeiboRequest, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadToWeiboRequest, datalen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadToWeiboRequest, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadToWeiboRequest, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadToWeiboRequest, filtertype_),
  3,
  0,
  4,
  5,
  6,
  7,
  1,
  2,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadToWeiboResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadToWeiboResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadToWeiboResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadToWeiboResponse, clientmsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadToWeiboResponse, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadToWeiboResponse, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadToWeiboResponse, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadToWeiboResponse, datalen_),
  1,
  0,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgRequest, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgRequest, fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgRequest, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgRequest, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgRequest, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgRequest, datalen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgRequest, compresstype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgRequest, newmsgid_),
  0,
  3,
  1,
  2,
  4,
  5,
  6,
  8,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgResponse, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgResponse, fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgResponse, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgResponse, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgResponse, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgResponse, datalen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgResponse, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgImgResponse, newmsgid_),
  0,
  4,
  1,
  2,
  5,
  6,
  7,
  3,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, clientmsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, thumbtotallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, thumbstartpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, thumbdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, videototallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, videostartpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, videodata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, playlength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, networkenv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, cameratype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, funcflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, msgsource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, cdnvideourl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, aeskey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, encryver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, cdnthumburl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, cdnthumbimgsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, cdnthumbimgheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, cdnthumbimgwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, cdnthumbaeskey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, videofrom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, reqtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, videomd5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, streamvideourl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, streamvideototaltime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, streamvideotitle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, streamvideowording_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, streamvideoweburl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, streamvideothumburl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, streamvideopublishid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, streamvideoaduxinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, statextstr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, hitmd5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, videonewmd5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, crc32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoRequest, msgforwardtype_),
  18,
  0,
  1,
  2,
  21,
  22,
  19,
  23,
  24,
  20,
  25,
  26,
  27,
  28,
  3,
  4,
  5,
  29,
  6,
  30,
  31,
  32,
  7,
  33,
  34,
  8,
  9,
  35,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  36,
  17,
  37,
  38,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoResponse, clientmsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoResponse, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoResponse, thumbstartpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoResponse, videostartpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoResponse, newmsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadVideoResponse, aeskey_),
  2,
  0,
  3,
  4,
  6,
  5,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVideoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVideoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVideoRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVideoRequest, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVideoRequest, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVideoRequest, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVideoRequest, networkenv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVideoRequest, mxpacksize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVideoRequest, newmsgid_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVideoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVideoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVideoResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVideoResponse, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVideoResponse, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVideoResponse, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVideoResponse, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadVideoResponse, newmsgid_),
  0,
  2,
  3,
  5,
  1,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeMsgRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeMsgRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeMsgRequest, clientmsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeMsgRequest, newclientmsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeMsgRequest, createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeMsgRequest, svrmsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeMsgRequest, fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeMsgRequest, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeMsgRequest, indexofrequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeMsgRequest, svrnewmsgid_),
  3,
  0,
  4,
  5,
  6,
  1,
  2,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeMsgResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeMsgResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeMsgResponse, introduction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeMsgResponse, syswording_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendYoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendYoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendYoRequest, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendYoRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendYoRequest, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendYoRequest, createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendYoRequest, clientmsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendYoRequest, msgsource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendYoRequest, yotype_),
  0,
  2,
  3,
  4,
  5,
  1,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendYoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendYoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendYoResponse, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendYoResponse, servertime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendYoResponse, msgid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileUploadRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileUploadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileUploadRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileUploadRequest, fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileUploadRequest, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileUploadRequest, filesize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileUploadRequest, aeskey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileUploadRequest, filemd5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileUploadRequest, filetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileUploadRequest, fileext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileUploadRequest, filename_),
  6,
  0,
  1,
  7,
  2,
  3,
  8,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileUploadResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileUploadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileUploadResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileUploadResponse, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileUploadResponse, fakeuin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileUploadResponse, fakeaeskey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileUploadResponse, fakesignature_),
  3,
  0,
  4,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileDownloadRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileDownloadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileDownloadRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileDownloadRequest, fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileDownloadRequest, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileDownloadRequest, filesize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileDownloadRequest, aeskey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileDownloadRequest, filemd5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileDownloadRequest, filetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileDownloadRequest, fileext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileDownloadRequest, filename_),
  6,
  0,
  1,
  7,
  2,
  3,
  8,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileDownloadResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileDownloadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileDownloadResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileDownloadResponse, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileDownloadResponse, fakeuin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileDownloadResponse, fakeaeskey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckBigFileDownloadResponse, fakesignature_),
  3,
  0,
  4,
  1,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(GetCDNDnsRequest)},
  { 9, 21, sizeof(GetCDNDnsResponse)},
  { 28, 44, sizeof(EmojiUploadInfoReq)},
  { 55, 64, sizeof(UploadEmojiRequest)},
  { 68, 79, sizeof(EmojiUploadInfoResp)},
  { 85, 93, sizeof(UploadEmojiResponse)},
  { 96, 105, sizeof(EmojiDownloadInfoReq)},
  { 109, 117, sizeof(DownloadEmojiRequest)},
  { 120, 131, sizeof(EmojiDownloadInfoResp)},
  { 137, 145, sizeof(DownloadEmojiResponse)},
  { 148, 161, sizeof(DownloadVoiceRequest)},
  { 169, 184, sizeof(DownloadVoiceResponse)},
  { 194, 229, sizeof(UploadMsgImgRequest)},
  { 259, 276, sizeof(UploadMsgImgResponse)},
  { 288, 312, sizeof(CDNUploadMsgImgPrepareRequest)},
  { 331, 344, sizeof(CDNUploadMsgImgPrepareResponse)},
  { 352, 368, sizeof(CDNUploadMsgImgCommitRequest)},
  { 379, 385, sizeof(CDNUploadMsgImgCommitResponse)},
  { 386, 400, sizeof(UploadWeiboImgRequest)},
  { 409, 419, sizeof(UploadWeiboImgResponse)},
  { 424, 438, sizeof(UploadToWeiboRequest)},
  { 447, 458, sizeof(UploadToWeiboResponse)},
  { 464, 478, sizeof(GetMsgImgRequest)},
  { 487, 501, sizeof(GetMsgImgResponse)},
  { 510, 554, sizeof(UploadVideoRequest)},
  { 593, 605, sizeof(UploadVideoResponse)},
  { 612, 624, sizeof(DownloadVideoRequest)},
  { 631, 642, sizeof(DownloadVideoResponse)},
  { 648, 662, sizeof(RevokeMsgRequest)},
  { 671, 679, sizeof(RevokeMsgResponse)},
  { 682, 694, sizeof(SendYoRequest)},
  { 701, 709, sizeof(SendYoResponse)},
  { 712, 726, sizeof(CheckBigFileUploadRequest)},
  { 735, 745, sizeof(CheckBigFileUploadResponse)},
  { 750, 764, sizeof(CheckBigFileDownloadRequest)},
  { 773, 783, sizeof(CheckBigFileDownloadResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetCDNDnsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetCDNDnsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmojiUploadInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UploadEmojiRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmojiUploadInfoResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UploadEmojiResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmojiDownloadInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DownloadEmojiRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmojiDownloadInfoResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DownloadEmojiResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DownloadVoiceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DownloadVoiceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UploadMsgImgRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UploadMsgImgResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDNUploadMsgImgPrepareRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDNUploadMsgImgPrepareResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDNUploadMsgImgCommitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDNUploadMsgImgCommitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UploadWeiboImgRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UploadWeiboImgResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UploadToWeiboRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UploadToWeiboResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetMsgImgRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetMsgImgResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UploadVideoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UploadVideoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DownloadVideoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DownloadVideoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RevokeMsgRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RevokeMsgResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendYoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendYoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckBigFileUploadRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckBigFileUploadResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckBigFileDownloadRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckBigFileDownloadResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mmextsend.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 36);
}

}  // namespace

void TableStruct::Shutdown() {
  _GetCDNDnsRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _GetCDNDnsResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _EmojiUploadInfoReq_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _UploadEmojiRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _EmojiUploadInfoResp_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _UploadEmojiResponse_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _EmojiDownloadInfoReq_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _DownloadEmojiRequest_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _EmojiDownloadInfoResp_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _DownloadEmojiResponse_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _DownloadVoiceRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _DownloadVoiceResponse_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _UploadMsgImgRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _UploadMsgImgResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CDNUploadMsgImgPrepareRequest_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CDNUploadMsgImgPrepareResponse_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CDNUploadMsgImgCommitRequest_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CDNUploadMsgImgCommitResponse_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _UploadWeiboImgRequest_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _UploadWeiboImgResponse_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _UploadToWeiboRequest_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _UploadToWeiboResponse_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _GetMsgImgRequest_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _GetMsgImgResponse_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _UploadVideoRequest_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _UploadVideoResponse_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _DownloadVideoRequest_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _DownloadVideoResponse_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _RevokeMsgRequest_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _RevokeMsgResponse_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _SendYoRequest_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _SendYoResponse_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _CheckBigFileUploadRequest_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _CheckBigFileUploadResponse_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _CheckBigFileDownloadRequest_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _CheckBigFileDownloadResponse_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::micromsg::protobuf_mmbuiltintype_2eproto::InitDefaults();
  ::micromsg::protobuf_mmbase_2eproto::InitDefaults();
  _GetCDNDnsRequest_default_instance_.DefaultConstruct();
  _GetCDNDnsResponse_default_instance_.DefaultConstruct();
  _EmojiUploadInfoReq_default_instance_.DefaultConstruct();
  _UploadEmojiRequest_default_instance_.DefaultConstruct();
  _EmojiUploadInfoResp_default_instance_.DefaultConstruct();
  _UploadEmojiResponse_default_instance_.DefaultConstruct();
  _EmojiDownloadInfoReq_default_instance_.DefaultConstruct();
  _DownloadEmojiRequest_default_instance_.DefaultConstruct();
  _EmojiDownloadInfoResp_default_instance_.DefaultConstruct();
  _DownloadEmojiResponse_default_instance_.DefaultConstruct();
  _DownloadVoiceRequest_default_instance_.DefaultConstruct();
  _DownloadVoiceResponse_default_instance_.DefaultConstruct();
  _UploadMsgImgRequest_default_instance_.DefaultConstruct();
  _UploadMsgImgResponse_default_instance_.DefaultConstruct();
  _CDNUploadMsgImgPrepareRequest_default_instance_.DefaultConstruct();
  _CDNUploadMsgImgPrepareResponse_default_instance_.DefaultConstruct();
  _CDNUploadMsgImgCommitRequest_default_instance_.DefaultConstruct();
  _CDNUploadMsgImgCommitResponse_default_instance_.DefaultConstruct();
  _UploadWeiboImgRequest_default_instance_.DefaultConstruct();
  _UploadWeiboImgResponse_default_instance_.DefaultConstruct();
  _UploadToWeiboRequest_default_instance_.DefaultConstruct();
  _UploadToWeiboResponse_default_instance_.DefaultConstruct();
  _GetMsgImgRequest_default_instance_.DefaultConstruct();
  _GetMsgImgResponse_default_instance_.DefaultConstruct();
  _UploadVideoRequest_default_instance_.DefaultConstruct();
  _UploadVideoResponse_default_instance_.DefaultConstruct();
  _DownloadVideoRequest_default_instance_.DefaultConstruct();
  _DownloadVideoResponse_default_instance_.DefaultConstruct();
  _RevokeMsgRequest_default_instance_.DefaultConstruct();
  _RevokeMsgResponse_default_instance_.DefaultConstruct();
  _SendYoRequest_default_instance_.DefaultConstruct();
  _SendYoResponse_default_instance_.DefaultConstruct();
  _CheckBigFileUploadRequest_default_instance_.DefaultConstruct();
  _CheckBigFileUploadResponse_default_instance_.DefaultConstruct();
  _CheckBigFileDownloadRequest_default_instance_.DefaultConstruct();
  _CheckBigFileDownloadResponse_default_instance_.DefaultConstruct();
  _GetCDNDnsRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetCDNDnsResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetCDNDnsResponse_default_instance_.get_mutable()->dnsinfo_ = const_cast< ::micromsg::CDNDnsInfo*>(
      ::micromsg::CDNDnsInfo::internal_default_instance());
  _GetCDNDnsResponse_default_instance_.get_mutable()->snsdnsinfo_ = const_cast< ::micromsg::CDNDnsInfo*>(
      ::micromsg::CDNDnsInfo::internal_default_instance());
  _GetCDNDnsResponse_default_instance_.get_mutable()->appdnsinfo_ = const_cast< ::micromsg::CDNDnsInfo*>(
      ::micromsg::CDNDnsInfo::internal_default_instance());
  _GetCDNDnsResponse_default_instance_.get_mutable()->cdndnsrulebuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetCDNDnsResponse_default_instance_.get_mutable()->fakecdndnsrulebuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetCDNDnsResponse_default_instance_.get_mutable()->fakednsinfo_ = const_cast< ::micromsg::CDNDnsInfo*>(
      ::micromsg::CDNDnsInfo::internal_default_instance());
  _EmojiUploadInfoReq_default_instance_.get_mutable()->emojibuffer_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _UploadEmojiRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _UploadEmojiResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _DownloadEmojiRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _EmojiDownloadInfoResp_default_instance_.get_mutable()->emojibuffer_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _DownloadEmojiResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _DownloadVoiceRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _DownloadVoiceResponse_default_instance_.get_mutable()->data_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _DownloadVoiceResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _UploadMsgImgRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _UploadMsgImgRequest_default_instance_.get_mutable()->clientimgid_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _UploadMsgImgRequest_default_instance_.get_mutable()->fromusername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _UploadMsgImgRequest_default_instance_.get_mutable()->tousername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _UploadMsgImgRequest_default_instance_.get_mutable()->data_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _UploadMsgImgResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _UploadMsgImgResponse_default_instance_.get_mutable()->clientimgid_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _UploadMsgImgResponse_default_instance_.get_mutable()->fromusername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _UploadMsgImgResponse_default_instance_.get_mutable()->tousername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _CDNUploadMsgImgPrepareRequest_default_instance_.get_mutable()->clientstat_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _CDNUploadMsgImgPrepareResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _CDNUploadMsgImgCommitResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _UploadWeiboImgRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _UploadWeiboImgResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _UploadToWeiboRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _UploadToWeiboResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetMsgImgRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetMsgImgRequest_default_instance_.get_mutable()->fromusername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _GetMsgImgRequest_default_instance_.get_mutable()->tousername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _GetMsgImgResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetMsgImgResponse_default_instance_.get_mutable()->fromusername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _GetMsgImgResponse_default_instance_.get_mutable()->tousername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _GetMsgImgResponse_default_instance_.get_mutable()->data_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _UploadVideoRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _UploadVideoRequest_default_instance_.get_mutable()->thumbdata_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _UploadVideoRequest_default_instance_.get_mutable()->videodata_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _UploadVideoResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _DownloadVideoRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _DownloadVideoResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _DownloadVideoResponse_default_instance_.get_mutable()->data_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _RevokeMsgRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _RevokeMsgResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _CheckBigFileUploadRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _CheckBigFileUploadResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _CheckBigFileDownloadRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _CheckBigFileDownloadResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017mmextsend.proto\022\010micromsg\032\023mmbuiltinty"
      "pe.proto\032\014mmbase.proto\"P\n\020GetCDNDnsReque"
      "st\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseR"
      "equest\022\020\n\010ClientIP\030\002 \001(\t\"\323\002\n\021GetCDNDnsRe"
      "sponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg."
      "BaseResponse\022%\n\007DnsInfo\030\002 \002(\0132\024.micromsg"
      ".CDNDnsInfo\022(\n\nSnsDnsInfo\030\003 \001(\0132\024.microm"
      "sg.CDNDnsInfo\022(\n\nAppDnsInfo\030\004 \001(\0132\024.micr"
      "omsg.CDNDnsInfo\0222\n\rCDNDnsRuleBuf\030\005 \001(\0132\033"
      ".micromsg.SKBuiltinBuffer_t\0226\n\021FakeCDNDn"
      "sRuleBuf\030\006 \001(\0132\033.micromsg.SKBuiltinBuffe"
      "r_t\022)\n\013FakeDnsInfo\030\007 \001(\0132\024.micromsg.CDND"
      "nsInfo\"\370\001\n\022EmojiUploadInfoReq\022\013\n\003MD5\030\001 \001"
      "(\t\022\020\n\010StartPos\030\002 \002(\005\022\020\n\010TotalLen\030\003 \002(\005\0220"
      "\n\013EmojiBuffer\030\004 \002(\0132\033.micromsg.SKBuiltin"
      "Buffer_t\022\014\n\004Type\030\005 \002(\005\022\022\n\nToUserName\030\006 \001"
      "(\t\022\021\n\tExternXML\030\007 \001(\t\022\016\n\006Report\030\010 \001(\t\022\023\n"
      "\013ClientMsgID\030\t \001(\t\022\021\n\tMsgSource\030\n \001(\t\022\022\n"
      "\nNewXmlFlag\030\013 \001(\005\"\232\001\n\022UploadEmojiRequest"
      "\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseReq"
      "uest\022\026\n\016EmojiItemCount\030\002 \002(\005\022/\n\tEmojiIte"
      "m\030\003 \003(\0132\034.micromsg.EmojiUploadInfoReq\022\017\n"
      "\007ReqTime\030\004 \001(\r\"t\n\023EmojiUploadInfoResp\022\013\n"
      "\003Ret\030\001 \002(\005\022\020\n\010StartPos\030\002 \002(\005\022\020\n\010TotalLen"
      "\030\003 \002(\005\022\013\n\003MD5\030\004 \001(\t\022\r\n\005MsgID\030\005 \002(\r\022\020\n\010Ne"
      "wMsgId\030\006 \001(\004\"\215\001\n\023UploadEmojiResponse\022,\n\014"
      "BaseResponse\030\001 \002(\0132\026.micromsg.BaseRespon"
      "se\022\026\n\016EmojiItemCount\030\002 \002(\005\0220\n\tEmojiItem\030"
      "\003 \003(\0132\035.micromsg.EmojiUploadInfoResp\"S\n\024"
      "EmojiDownloadInfoReq\022\n\n\002ID\030\001 \001(\t\022\020\n\010Star"
      "tPos\030\002 \002(\005\022\020\n\010TotalLen\030\003 \002(\005\022\013\n\003MD5\030\004 \001("
      "\t\"\215\001\n\024DownloadEmojiRequest\022*\n\013BaseReques"
      "t\030\001 \002(\0132\025.micromsg.BaseRequest\022\026\n\016EmojiI"
      "temCount\030\002 \002(\005\0221\n\tEmojiItem\030\003 \003(\0132\036.micr"
      "omsg.EmojiDownloadInfoReq\"\223\001\n\025EmojiDownl"
      "oadInfoResp\022\013\n\003Ret\030\001 \002(\005\022\020\n\010StartPos\030\002 \002"
      "(\005\022\020\n\010TotalLen\030\003 \002(\005\0220\n\013EmojiBuffer\030\004 \002("
      "\0132\033.micromsg.SKBuiltinBuffer_t\022\013\n\003MD5\030\005 "
      "\001(\t\022\n\n\002ID\030\006 \001(\t\"\221\001\n\025DownloadEmojiRespons"
      "e\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseR"
      "esponse\022\026\n\016EmojiItemCount\030\002 \002(\005\0222\n\tEmoji"
      "Item\030\003 \003(\0132\037.micromsg.EmojiDownloadInfoR"
      "esp\"\303\001\n\024DownloadVoiceRequest\022\r\n\005MsgId\030\001 "
      "\002(\r\022\016\n\006Offset\030\002 \002(\r\022\016\n\006Length\030\003 \002(\r\022\023\n\013C"
      "lientMsgId\030\004 \001(\t\022*\n\013BaseRequest\030\005 \002(\0132\025."
      "micromsg.BaseRequest\022\020\n\010NewMsgId\030\006 \001(\004\022\024"
      "\n\014ChatRoomName\030\007 \001(\t\022\023\n\013MasterBufId\030\010 \001("
      "\004\"\200\002\n\025DownloadVoiceResponse\022\r\n\005MsgId\030\001 \002"
      "(\r\022\016\n\006Offset\030\002 \002(\r\022\016\n\006Length\030\003 \002(\r\022\023\n\013Vo"
      "iceLength\030\005 \002(\r\022\023\n\013ClientMsgId\030\006 \001(\t\022)\n\004"
      "Data\030\007 \002(\0132\033.micromsg.SKBuiltinBuffer_t\022"
      "\017\n\007EndFlag\030\010 \002(\r\022,\n\014BaseResponse\030\t \002(\0132\026"
      ".micromsg.BaseResponse\022\022\n\nCancelFlag\030\n \001"
      "(\r\022\020\n\010NewMsgId\030\013 \001(\004\"\365\005\n\023UploadMsgImgReq"
      "uest\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.Bas"
      "eRequest\0220\n\013ClientImgId\030\002 \002(\0132\033.micromsg"
      ".SKBuiltinString_t\0221\n\014FromUserName\030\003 \002(\013"
      "2\033.micromsg.SKBuiltinString_t\022/\n\nToUserN"
      "ame\030\004 \002(\0132\033.micromsg.SKBuiltinString_t\022\020"
      "\n\010TotalLen\030\005 \002(\r\022\020\n\010StartPos\030\006 \002(\r\022\017\n\007Da"
      "taLen\030\007 \002(\r\022)\n\004Data\030\010 \002(\0132\033.micromsg.SKB"
      "uiltinBuffer_t\022\017\n\007MsgType\030\t \001(\r\022\021\n\tMsgSo"
      "urce\030\n \001(\t\022\024\n\014CompressType\030\013 \001(\r\022\017\n\007NetT"
      "ype\030\014 \001(\005\022\021\n\tPhotoFrom\030\r \001(\005\022\017\n\007MediaId\030"
      "\016 \001(\t\022\024\n\014CDNBigImgUrl\030\017 \001(\t\022\024\n\014CDNMidImg"
      "Url\030\020 \001(\t\022\016\n\006AESKey\030\021 \001(\t\022\020\n\010EncryVer\030\022 "
      "\001(\005\022\025\n\rCDNBigImgSize\030\023 \001(\005\022\025\n\rCDNMidImgS"
      "ize\030\024 \001(\005\022\026\n\016CDNThumbImgUrl\030\025 \001(\t\022\027\n\017CDN"
      "ThumbImgSize\030\026 \001(\005\022\031\n\021CDNThumbImgHeight\030"
      "\027 \001(\005\022\030\n\020CDNThumbImgWidth\030\030 \001(\005\022\026\n\016CDNTh"
      "umbAESKey\030\031 \001(\t\022\017\n\007ReqTime\030\032 \001(\r\022\013\n\003Md5\030"
      "\033 \001(\t\022\r\n\005CRC32\030\034 \001(\r\022\026\n\016MsgForwardType\030\035"
      " \001(\r\022\016\n\006HitMd5\030\036 \001(\r\"\344\002\n\024UploadMsgImgRes"
      "ponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.B"
      "aseResponse\022\r\n\005MsgId\030\002 \002(\r\0220\n\013ClientImgI"
      "d\030\003 \002(\0132\033.micromsg.SKBuiltinString_t\0221\n\014"
      "FromUserName\030\004 \002(\0132\033.micromsg.SKBuiltinS"
      "tring_t\022/\n\nToUserName\030\005 \002(\0132\033.micromsg.S"
      "KBuiltinString_t\022\020\n\010TotalLen\030\006 \002(\r\022\020\n\010St"
      "artPos\030\007 \002(\r\022\017\n\007DataLen\030\010 \002(\r\022\022\n\nCreateT"
      "ime\030\t \002(\r\022\020\n\010NewMsgId\030\n \001(\004\022\016\n\006AESKey\030\013 "
      "\001(\t\022\016\n\006FileId\030\014 \001(\t\"\251\003\n\035CDNUploadMsgImgP"
      "repareRequest\022\023\n\013ClientImgId\030\001 \001(\t\022\024\n\014Fr"
      "omUserName\030\002 \001(\t\022\022\n\nToUserName\030\003 \001(\t\022\023\n\013"
      "ThumbHeight\030\004 \002(\005\022\022\n\nThumbWidth\030\005 \002(\005\022\021\n"
      "\tMsgSource\030\006 \001(\t\022/\n\nClientStat\030\007 \001(\0132\033.m"
      "icromsg.SKBuiltinBuffer_t\022\r\n\005Scene\030\010 \001(\005"
      "\022\021\n\tLongitude\030\t \001(\002\022\020\n\010Latitude\030\n \001(\002\022\027\n"
      "\017AttachedContent\030\013 \001(\t\022\021\n\tMidHeight\030\014 \001("
      "\005\022\020\n\010MidWidth\030\r \001(\005\022\020\n\010HDHeight\030\016 \001(\005\022\017\n"
      "\007HDWidth\030\017 \001(\005\022\016\n\006AESKey\030\020 \001(\t\022\020\n\010EncryV"
      "er\030\021 \001(\005\022\r\n\005CRC32\030\022 \001(\r\022\026\n\016MsgForwardTyp"
      "e\030\023 \001(\r\"\323\001\n\036CDNUploadMsgImgPrepareRespon"
      "se\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.Base"
      "Response\022\023\n\013ClientImgId\030\003 \001(\t\022\024\n\014FromUse"
      "rName\030\004 \001(\t\022\022\n\nToUserName\030\005 \001(\t\022\022\n\nCreat"
      "eTime\030\t \002(\r\022\020\n\010NewMsgId\030\n \001(\004\022\016\n\006AESKey\030"
      "\013 \001(\t\022\016\n\006FileId\030\014 \001(\t\"\327\001\n\034CDNUploadMsgIm"
      "gCommitRequest\022\016\n\006Ticket\030\001 \001(\t\022\016\n\006ImgUrl"
      "\030\002 \001(\t\022\016\n\006AESKey\030\003 \001(\t\022\020\n\010EncryVer\030\004 \002(\005"
      "\022\017\n\007MidSize\030\005 \002(\005\022\021\n\tThumbSize\030\006 \002(\005\022\017\n\007"
      "BigSize\030\t \001(\005\022\016\n\006Md5Sum\030\n \001(\t\022\021\n\tSafePro"
      "to\030\013 \001(\005\022\013\n\003Hit\030\014 \001(\005\022\020\n\010FileInfo\030\r \001(\t\""
      "M\n\035CDNUploadMsgImgCommitResponse\022,\n\014Base"
      "Response\030\001 \002(\0132\026.micromsg.BaseResponse\"\316"
      "\001\n\025UploadWeiboImgRequest\022*\n\013BaseRequest\030"
      "\001 \002(\0132\025.micromsg.BaseRequest\022\023\n\013ClientIm"
      "gId\030\002 \001(\t\022\020\n\010TotalLen\030\003 \002(\r\022\020\n\010StartPos\030"
      "\004 \002(\r\022\017\n\007DataLen\030\005 \002(\r\022\014\n\004Data\030\006 \001(\014\022\017\n\007"
      "Content\030\007 \001(\t\022\022\n\nFilterType\030\010 \002(\r\022\014\n\004Fla"
      "g\030\t \001(\r\"\220\001\n\026UploadWeiboImgResponse\022,\n\014Ba"
      "seResponse\030\001 \002(\0132\026.micromsg.BaseResponse"
      "\022\023\n\013ClientImgId\030\002 \001(\t\022\020\n\010TotalLen\030\003 \002(\r\022"
      "\020\n\010StartPos\030\004 \002(\r\022\017\n\007DataLen\030\005 \002(\r\"\315\001\n\024U"
      "ploadToWeiboRequest\022*\n\013BaseRequest\030\001 \002(\013"
      "2\025.micromsg.BaseRequest\022\023\n\013ClientMsgId\030\002"
      " \001(\t\022\014\n\004Type\030\003 \002(\r\022\020\n\010TotalLen\030\004 \002(\r\022\020\n\010"
      "StartPos\030\005 \002(\r\022\017\n\007DataLen\030\006 \002(\r\022\014\n\004Data\030"
      "\007 \001(\014\022\017\n\007Content\030\010 \001(\t\022\022\n\nFilterType\030\t \002"
      "(\r\"\235\001\n\025UploadToWeiboResponse\022,\n\014BaseResp"
      "onse\030\001 \002(\0132\026.micromsg.BaseResponse\022\023\n\013Cl"
      "ientMsgId\030\002 \001(\t\022\014\n\004Type\030\003 \002(\r\022\020\n\010TotalLe"
      "n\030\004 \002(\r\022\020\n\010StartPos\030\005 \002(\r\022\017\n\007DataLen\030\006 \002"
      "(\r\"\216\002\n\020GetMsgImgRequest\022*\n\013BaseRequest\030\001"
      " \002(\0132\025.micromsg.BaseRequest\022\r\n\005MsgId\030\002 \002"
      "(\r\0221\n\014FromUserName\030\003 \002(\0132\033.micromsg.SKBu"
      "iltinString_t\022/\n\nToUserName\030\004 \002(\0132\033.micr"
      "omsg.SKBuiltinString_t\022\020\n\010TotalLen\030\005 \002(\r"
      "\022\020\n\010StartPos\030\006 \002(\r\022\017\n\007DataLen\030\007 \002(\r\022\024\n\014C"
      "ompressType\030\010 \001(\r\022\020\n\010NewMsgId\030\t \001(\004\"\246\002\n\021"
      "GetMsgImgResponse\022,\n\014BaseResponse\030\001 \002(\0132"
      "\026.micromsg.BaseResponse\022\r\n\005MsgId\030\002 \002(\r\0221"
      "\n\014FromUserName\030\003 \002(\0132\033.micromsg.SKBuilti"
      "nString_t\022/\n\nToUserName\030\004 \002(\0132\033.micromsg"
      ".SKBuiltinString_t\022\020\n\010TotalLen\030\005 \002(\r\022\020\n\010"
      "StartPos\030\006 \002(\r\022\017\n\007DataLen\030\007 \002(\r\022)\n\004Data\030"
      "\010 \002(\0132\033.micromsg.SKBuiltinBuffer_t\022\020\n\010Ne"
      "wMsgId\030\t \001(\004\"\303\007\n\022UploadVideoRequest\022*\n\013B"
      "aseRequest\030\001 \002(\0132\025.micromsg.BaseRequest\022"
      "\023\n\013ClientMsgId\030\002 \001(\t\022\024\n\014FromUserName\030\003 \001"
      "(\t\022\022\n\nToUserName\030\004 \001(\t\022\025\n\rThumbTotalLen\030"
      "\005 \002(\r\022\025\n\rThumbStartPos\030\006 \002(\r\022.\n\tThumbDat"
      "a\030\007 \002(\0132\033.micromsg.SKBuiltinBuffer_t\022\025\n\r"
      "VideoTotalLen\030\010 \002(\r\022\025\n\rVideoStartPos\030\t \002"
      "(\r\022.\n\tVideoData\030\n \002(\0132\033.micromsg.SKBuilt"
      "inBuffer_t\022\022\n\nPlayLength\030\013 \002(\r\022\022\n\nNetwor"
      "kEnv\030\014 \001(\r\022\022\n\nCameraType\030\r \001(\r\022\020\n\010FuncFl"
      "ag\030\016 \001(\r\022\021\n\tMsgSource\030\017 \001(\t\022\023\n\013CDNVideoU"
      "rl\030\020 \001(\t\022\016\n\006AESKey\030\021 \001(\t\022\020\n\010EncryVer\030\022 \001"
      "(\005\022\023\n\013CDNThumbUrl\030\023 \001(\t\022\027\n\017CDNThumbImgSi"
      "ze\030\024 \001(\005\022\031\n\021CDNThumbImgHeight\030\025 \001(\005\022\030\n\020C"
      "DNThumbImgWidth\030\026 \001(\005\022\026\n\016CDNThumbAESKey\030"
      "\027 \001(\t\022\021\n\tVideoFrom\030\030 \001(\005\022\017\n\007ReqTime\030\031 \001("
      "\r\022\020\n\010VideoMd5\030\032 \001(\t\022\026\n\016StreamVideoUrl\030\033 "
      "\001(\t\022\034\n\024StreamVideoTotalTime\030\034 \001(\r\022\030\n\020Str"
      "eamVideoTitle\030\035 \001(\t\022\032\n\022StreamVideoWordin"
      "g\030\036 \001(\t\022\031\n\021StreamVideoWebUrl\030\037 \001(\t\022\033\n\023St"
      "reamVideoThumbUrl\030  \001(\t\022\034\n\024StreamVideoPu"
      "blishId\030! \001(\t\022\033\n\023StreamVideoAdUxInfo\030\" \001"
      "(\t\022\022\n\nStatExtStr\030# \001(\t\022\016\n\006HitMd5\030$ \001(\r\022\023"
      "\n\013VideoNewMd5\030% \001(\t\022\r\n\005CRC32\030& \001(\r\022\026\n\016Ms"
      "gForwardType\030\' \001(\r\"\267\001\n\023UploadVideoRespon"
      "se\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.Base"
      "Response\022\023\n\013ClientMsgId\030\002 \001(\t\022\r\n\005MsgId\030\003"
      " \002(\r\022\025\n\rThumbStartPos\030\004 \002(\r\022\025\n\rVideoStar"
      "tPos\030\005 \002(\r\022\020\n\010NewMsgId\030\006 \001(\004\022\016\n\006AESKey\030\007"
      " \001(\t\"\257\001\n\024DownloadVideoRequest\022*\n\013BaseReq"
      "uest\030\001 \002(\0132\025.micromsg.BaseRequest\022\r\n\005Msg"
      "Id\030\002 \002(\r\022\020\n\010TotalLen\030\003 \002(\r\022\020\n\010StartPos\030\004"
      " \002(\r\022\022\n\nNetworkEnv\030\005 \001(\r\022\022\n\nMxPackSize\030\006"
      " \001(\r\022\020\n\010NewMsgId\030\007 \001(\004\"\265\001\n\025DownloadVideo"
      "Response\022,\n\014BaseResponse\030\001 \002(\0132\026.microms"
      "g.BaseResponse\022\r\n\005MsgId\030\002 \002(\r\022\020\n\010TotalLe"
      "n\030\003 \002(\r\022\020\n\010StartPos\030\004 \002(\r\022)\n\004Data\030\005 \002(\0132"
      "\033.micromsg.SKBuiltinBuffer_t\022\020\n\010NewMsgId"
      "\030\006 \001(\004\"\350\001\n\020RevokeMsgRequest\022*\n\013BaseReque"
      "st\030\001 \002(\0132\025.micromsg.BaseRequest\022\023\n\013Clien"
      "tMsgId\030\002 \001(\t\022\026\n\016NewClientMsgId\030\003 \002(\r\022\022\n\n"
      "CreateTime\030\004 \002(\r\022\020\n\010SvrMsgId\030\005 \002(\r\022\024\n\014Fr"
      "omUserName\030\006 \001(\t\022\022\n\nToUserName\030\007 \001(\t\022\026\n\016"
      "IndexOfRequest\030\010 \002(\r\022\023\n\013SvrNewMsgId\030\t \001("
      "\004\"k\n\021RevokeMsgResponse\022,\n\014BaseResponse\030\001"
      " \002(\0132\026.micromsg.BaseResponse\022\024\n\014Introduc"
      "tion\030\002 \001(\t\022\022\n\nSysWording\030\003 \001(\t\"\214\001\n\rSendY"
      "oRequest\022\022\n\nToUserName\030\001 \001(\t\022\014\n\004Type\030\002 \002"
      "(\r\022\r\n\005Count\030\003 \002(\r\022\022\n\nCreateTime\030\004 \002(\r\022\023\n"
      "\013ClientMsgId\030\005 \002(\r\022\021\n\tMsgSource\030\006 \001(\t\022\016\n"
      "\006YoType\030\007 \001(\r\"@\n\016SendYoResponse\022\013\n\003Ret\030\001"
      " \002(\005\022\022\n\nServerTime\030\002 \002(\r\022\r\n\005MsgId\030\003 \002(\004\""
      "\331\001\n\031CheckBigFileUploadRequest\022*\n\013BaseReq"
      "uest\030\001 \002(\0132\025.micromsg.BaseRequest\022\024\n\014Fro"
      "mUserName\030\002 \001(\t\022\022\n\nToUserName\030\003 \001(\t\022\020\n\010F"
      "ileSize\030\004 \002(\004\022\016\n\006AESKey\030\005 \001(\t\022\017\n\007FileMd5"
      "\030\006 \001(\t\022\020\n\010FileType\030\007 \002(\r\022\017\n\007FileExt\030\010 \001("
      "\t\022\020\n\010FileName\030\t \001(\t\"\231\001\n\032CheckBigFileUplo"
      "adResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micro"
      "msg.BaseResponse\022\021\n\tSignature\030\002 \001(\t\022\017\n\007F"
      "akeuin\030\003 \001(\r\022\022\n\nFakeAESKey\030\004 \001(\t\022\025\n\rFake"
      "Signature\030\005 \001(\t\"\333\001\n\033CheckBigFileDownload"
      "Request\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg."
      "BaseRequest\022\024\n\014FromUserName\030\002 \001(\t\022\022\n\nToU"
      "serName\030\003 \001(\t\022\020\n\010FileSize\030\004 \002(\004\022\016\n\006AESKe"
      "y\030\005 \001(\t\022\017\n\007FileMd5\030\006 \001(\t\022\020\n\010FileType\030\007 \002"
      "(\r\022\017\n\007FileExt\030\010 \001(\t\022\020\n\010FileName\030\t \001(\t\"\233\001"
      "\n\034CheckBigFileDownloadResponse\022,\n\014BaseRe"
      "sponse\030\001 \002(\0132\026.micromsg.BaseResponse\022\021\n\t"
      "Signature\030\002 \001(\t\022\017\n\007Fakeuin\030\003 \001(\r\022\022\n\nFake"
      "AESKey\030\004 \001(\t\022\025\n\rFakeSignature\030\005 \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 8315);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mmextsend.proto", &protobuf_RegisterTypes);
  ::micromsg::protobuf_mmbuiltintype_2eproto::AddDescriptors();
  ::micromsg::protobuf_mmbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mmextsend_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCDNDnsRequest::kBaseRequestFieldNumber;
const int GetCDNDnsRequest::kClientIPFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCDNDnsRequest::GetCDNDnsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetCDNDnsRequest)
}
GetCDNDnsRequest::GetCDNDnsRequest(const GetCDNDnsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientip()) {
    clientip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientip_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetCDNDnsRequest)
}

void GetCDNDnsRequest::SharedCtor() {
  _cached_size_ = 0;
  clientip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

GetCDNDnsRequest::~GetCDNDnsRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetCDNDnsRequest)
  SharedDtor();
}

void GetCDNDnsRequest::SharedDtor() {
  clientip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetCDNDnsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCDNDnsRequest::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCDNDnsRequest& GetCDNDnsRequest::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCDNDnsRequest* GetCDNDnsRequest::New(::google::protobuf::Arena* arena) const {
  GetCDNDnsRequest* n = new GetCDNDnsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCDNDnsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetCDNDnsRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_clientip()) {
      GOOGLE_DCHECK(!clientip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientip_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCDNDnsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetCDNDnsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientIP = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientip().data(), this->clientip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetCDNDnsRequest.ClientIP");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetCDNDnsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetCDNDnsRequest)
  return false;
#undef DO_
}

void GetCDNDnsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetCDNDnsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ClientIP = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientip().data(), this->clientip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCDNDnsRequest.ClientIP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetCDNDnsRequest)
}

::google::protobuf::uint8* GetCDNDnsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetCDNDnsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ClientIP = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientip().data(), this->clientip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCDNDnsRequest.ClientIP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetCDNDnsRequest)
  return target;
}

size_t GetCDNDnsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetCDNDnsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string ClientIP = 2;
  if (has_clientip()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCDNDnsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetCDNDnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCDNDnsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCDNDnsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetCDNDnsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetCDNDnsRequest)
    MergeFrom(*source);
  }
}

void GetCDNDnsRequest::MergeFrom(const GetCDNDnsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetCDNDnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientip();
      clientip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientip_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void GetCDNDnsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetCDNDnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCDNDnsRequest::CopyFrom(const GetCDNDnsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetCDNDnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCDNDnsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetCDNDnsRequest::Swap(GetCDNDnsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCDNDnsRequest::InternalSwap(GetCDNDnsRequest* other) {
  clientip_.Swap(&other->clientip_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCDNDnsRequest::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCDNDnsRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetCDNDnsRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetCDNDnsRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GetCDNDnsRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetCDNDnsRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetCDNDnsRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCDNDnsRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetCDNDnsRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCDNDnsRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetCDNDnsRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetCDNDnsRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetCDNDnsRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCDNDnsRequest.BaseRequest)
}

// optional string ClientIP = 2;
bool GetCDNDnsRequest::has_clientip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetCDNDnsRequest::set_has_clientip() {
  _has_bits_[0] |= 0x00000001u;
}
void GetCDNDnsRequest::clear_has_clientip() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetCDNDnsRequest::clear_clientip() {
  clientip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientip();
}
const ::std::string& GetCDNDnsRequest::clientip() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCDNDnsRequest.ClientIP)
  return clientip_.GetNoArena();
}
void GetCDNDnsRequest::set_clientip(const ::std::string& value) {
  set_has_clientip();
  clientip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetCDNDnsRequest.ClientIP)
}
#if LANG_CXX11
void GetCDNDnsRequest::set_clientip(::std::string&& value) {
  set_has_clientip();
  clientip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetCDNDnsRequest.ClientIP)
}
#endif
void GetCDNDnsRequest::set_clientip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientip();
  clientip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetCDNDnsRequest.ClientIP)
}
void GetCDNDnsRequest::set_clientip(const char* value, size_t size) {
  set_has_clientip();
  clientip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetCDNDnsRequest.ClientIP)
}
::std::string* GetCDNDnsRequest::mutable_clientip() {
  set_has_clientip();
  // @@protoc_insertion_point(field_mutable:micromsg.GetCDNDnsRequest.ClientIP)
  return clientip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetCDNDnsRequest::release_clientip() {
  // @@protoc_insertion_point(field_release:micromsg.GetCDNDnsRequest.ClientIP)
  clear_has_clientip();
  return clientip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetCDNDnsRequest::set_allocated_clientip(::std::string* clientip) {
  if (clientip != NULL) {
    set_has_clientip();
  } else {
    clear_has_clientip();
  }
  clientip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientip);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCDNDnsRequest.ClientIP)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCDNDnsResponse::kBaseResponseFieldNumber;
const int GetCDNDnsResponse::kDnsInfoFieldNumber;
const int GetCDNDnsResponse::kSnsDnsInfoFieldNumber;
const int GetCDNDnsResponse::kAppDnsInfoFieldNumber;
const int GetCDNDnsResponse::kCDNDnsRuleBufFieldNumber;
const int GetCDNDnsResponse::kFakeCDNDnsRuleBufFieldNumber;
const int GetCDNDnsResponse::kFakeDnsInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCDNDnsResponse::GetCDNDnsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetCDNDnsResponse)
}
GetCDNDnsResponse::GetCDNDnsResponse(const GetCDNDnsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_dnsinfo()) {
    dnsinfo_ = new ::micromsg::CDNDnsInfo(*from.dnsinfo_);
  } else {
    dnsinfo_ = NULL;
  }
  if (from.has_snsdnsinfo()) {
    snsdnsinfo_ = new ::micromsg::CDNDnsInfo(*from.snsdnsinfo_);
  } else {
    snsdnsinfo_ = NULL;
  }
  if (from.has_appdnsinfo()) {
    appdnsinfo_ = new ::micromsg::CDNDnsInfo(*from.appdnsinfo_);
  } else {
    appdnsinfo_ = NULL;
  }
  if (from.has_cdndnsrulebuf()) {
    cdndnsrulebuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.cdndnsrulebuf_);
  } else {
    cdndnsrulebuf_ = NULL;
  }
  if (from.has_fakecdndnsrulebuf()) {
    fakecdndnsrulebuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.fakecdndnsrulebuf_);
  } else {
    fakecdndnsrulebuf_ = NULL;
  }
  if (from.has_fakednsinfo()) {
    fakednsinfo_ = new ::micromsg::CDNDnsInfo(*from.fakednsinfo_);
  } else {
    fakednsinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetCDNDnsResponse)
}

void GetCDNDnsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&fakednsinfo_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(fakednsinfo_));
}

GetCDNDnsResponse::~GetCDNDnsResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetCDNDnsResponse)
  SharedDtor();
}

void GetCDNDnsResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete dnsinfo_;
  }
  if (this != internal_default_instance()) {
    delete snsdnsinfo_;
  }
  if (this != internal_default_instance()) {
    delete appdnsinfo_;
  }
  if (this != internal_default_instance()) {
    delete cdndnsrulebuf_;
  }
  if (this != internal_default_instance()) {
    delete fakecdndnsrulebuf_;
  }
  if (this != internal_default_instance()) {
    delete fakednsinfo_;
  }
}

void GetCDNDnsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCDNDnsResponse::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCDNDnsResponse& GetCDNDnsResponse::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCDNDnsResponse* GetCDNDnsResponse::New(::google::protobuf::Arena* arena) const {
  GetCDNDnsResponse* n = new GetCDNDnsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCDNDnsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetCDNDnsResponse)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_dnsinfo()) {
      GOOGLE_DCHECK(dnsinfo_ != NULL);
      dnsinfo_->::micromsg::CDNDnsInfo::Clear();
    }
    if (has_snsdnsinfo()) {
      GOOGLE_DCHECK(snsdnsinfo_ != NULL);
      snsdnsinfo_->::micromsg::CDNDnsInfo::Clear();
    }
    if (has_appdnsinfo()) {
      GOOGLE_DCHECK(appdnsinfo_ != NULL);
      appdnsinfo_->::micromsg::CDNDnsInfo::Clear();
    }
    if (has_cdndnsrulebuf()) {
      GOOGLE_DCHECK(cdndnsrulebuf_ != NULL);
      cdndnsrulebuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_fakecdndnsrulebuf()) {
      GOOGLE_DCHECK(fakecdndnsrulebuf_ != NULL);
      fakecdndnsrulebuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_fakednsinfo()) {
      GOOGLE_DCHECK(fakednsinfo_ != NULL);
      fakednsinfo_->::micromsg::CDNDnsInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCDNDnsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetCDNDnsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.CDNDnsInfo DnsInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dnsinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.CDNDnsInfo SnsDnsInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snsdnsinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.CDNDnsInfo AppDnsInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_appdnsinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t CDNDnsRuleBuf = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cdndnsrulebuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t FakeCDNDnsRuleBuf = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fakecdndnsrulebuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.CDNDnsInfo FakeDnsInfo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fakednsinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetCDNDnsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetCDNDnsResponse)
  return false;
#undef DO_
}

void GetCDNDnsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetCDNDnsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.CDNDnsInfo DnsInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dnsinfo_, output);
  }

  // optional .micromsg.CDNDnsInfo SnsDnsInfo = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->snsdnsinfo_, output);
  }

  // optional .micromsg.CDNDnsInfo AppDnsInfo = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->appdnsinfo_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t CDNDnsRuleBuf = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->cdndnsrulebuf_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t FakeCDNDnsRuleBuf = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->fakecdndnsrulebuf_, output);
  }

  // optional .micromsg.CDNDnsInfo FakeDnsInfo = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->fakednsinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetCDNDnsResponse)
}

::google::protobuf::uint8* GetCDNDnsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetCDNDnsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.CDNDnsInfo DnsInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dnsinfo_, deterministic, target);
  }

  // optional .micromsg.CDNDnsInfo SnsDnsInfo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->snsdnsinfo_, deterministic, target);
  }

  // optional .micromsg.CDNDnsInfo AppDnsInfo = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->appdnsinfo_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t CDNDnsRuleBuf = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->cdndnsrulebuf_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t FakeCDNDnsRuleBuf = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->fakecdndnsrulebuf_, deterministic, target);
  }

  // optional .micromsg.CDNDnsInfo FakeDnsInfo = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->fakednsinfo_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetCDNDnsResponse)
  return target;
}

size_t GetCDNDnsResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetCDNDnsResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_dnsinfo()) {
    // required .micromsg.CDNDnsInfo DnsInfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dnsinfo_);
  }

  return total_size;
}
size_t GetCDNDnsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetCDNDnsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.CDNDnsInfo DnsInfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dnsinfo_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 124u) {
    // optional .micromsg.CDNDnsInfo SnsDnsInfo = 3;
    if (has_snsdnsinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->snsdnsinfo_);
    }

    // optional .micromsg.CDNDnsInfo AppDnsInfo = 4;
    if (has_appdnsinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->appdnsinfo_);
    }

    // optional .micromsg.SKBuiltinBuffer_t CDNDnsRuleBuf = 5;
    if (has_cdndnsrulebuf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cdndnsrulebuf_);
    }

    // optional .micromsg.SKBuiltinBuffer_t FakeCDNDnsRuleBuf = 6;
    if (has_fakecdndnsrulebuf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fakecdndnsrulebuf_);
    }

    // optional .micromsg.CDNDnsInfo FakeDnsInfo = 7;
    if (has_fakednsinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fakednsinfo_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCDNDnsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetCDNDnsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCDNDnsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCDNDnsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetCDNDnsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetCDNDnsResponse)
    MergeFrom(*source);
  }
}

void GetCDNDnsResponse::MergeFrom(const GetCDNDnsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetCDNDnsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dnsinfo()->::micromsg::CDNDnsInfo::MergeFrom(from.dnsinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_snsdnsinfo()->::micromsg::CDNDnsInfo::MergeFrom(from.snsdnsinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_appdnsinfo()->::micromsg::CDNDnsInfo::MergeFrom(from.appdnsinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_cdndnsrulebuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.cdndnsrulebuf());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_fakecdndnsrulebuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.fakecdndnsrulebuf());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_fakednsinfo()->::micromsg::CDNDnsInfo::MergeFrom(from.fakednsinfo());
    }
  }
}

void GetCDNDnsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetCDNDnsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCDNDnsResponse::CopyFrom(const GetCDNDnsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetCDNDnsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCDNDnsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_dnsinfo()) {
    if (!this->dnsinfo_->IsInitialized()) return false;
  }
  if (has_snsdnsinfo()) {
    if (!this->snsdnsinfo_->IsInitialized()) return false;
  }
  if (has_appdnsinfo()) {
    if (!this->appdnsinfo_->IsInitialized()) return false;
  }
  if (has_cdndnsrulebuf()) {
    if (!this->cdndnsrulebuf_->IsInitialized()) return false;
  }
  if (has_fakecdndnsrulebuf()) {
    if (!this->fakecdndnsrulebuf_->IsInitialized()) return false;
  }
  if (has_fakednsinfo()) {
    if (!this->fakednsinfo_->IsInitialized()) return false;
  }
  return true;
}

void GetCDNDnsResponse::Swap(GetCDNDnsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCDNDnsResponse::InternalSwap(GetCDNDnsResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(dnsinfo_, other->dnsinfo_);
  std::swap(snsdnsinfo_, other->snsdnsinfo_);
  std::swap(appdnsinfo_, other->appdnsinfo_);
  std::swap(cdndnsrulebuf_, other->cdndnsrulebuf_);
  std::swap(fakecdndnsrulebuf_, other->fakecdndnsrulebuf_);
  std::swap(fakednsinfo_, other->fakednsinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCDNDnsResponse::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCDNDnsResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetCDNDnsResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetCDNDnsResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetCDNDnsResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetCDNDnsResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetCDNDnsResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCDNDnsResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetCDNDnsResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCDNDnsResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetCDNDnsResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetCDNDnsResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetCDNDnsResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCDNDnsResponse.BaseResponse)
}

// required .micromsg.CDNDnsInfo DnsInfo = 2;
bool GetCDNDnsResponse::has_dnsinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetCDNDnsResponse::set_has_dnsinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void GetCDNDnsResponse::clear_has_dnsinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetCDNDnsResponse::clear_dnsinfo() {
  if (dnsinfo_ != NULL) dnsinfo_->::micromsg::CDNDnsInfo::Clear();
  clear_has_dnsinfo();
}
const ::micromsg::CDNDnsInfo& GetCDNDnsResponse::dnsinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCDNDnsResponse.DnsInfo)
  return dnsinfo_ != NULL ? *dnsinfo_
                         : *::micromsg::CDNDnsInfo::internal_default_instance();
}
::micromsg::CDNDnsInfo* GetCDNDnsResponse::mutable_dnsinfo() {
  set_has_dnsinfo();
  if (dnsinfo_ == NULL) {
    dnsinfo_ = new ::micromsg::CDNDnsInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCDNDnsResponse.DnsInfo)
  return dnsinfo_;
}
::micromsg::CDNDnsInfo* GetCDNDnsResponse::release_dnsinfo() {
  // @@protoc_insertion_point(field_release:micromsg.GetCDNDnsResponse.DnsInfo)
  clear_has_dnsinfo();
  ::micromsg::CDNDnsInfo* temp = dnsinfo_;
  dnsinfo_ = NULL;
  return temp;
}
void GetCDNDnsResponse::set_allocated_dnsinfo(::micromsg::CDNDnsInfo* dnsinfo) {
  delete dnsinfo_;
  dnsinfo_ = dnsinfo;
  if (dnsinfo) {
    set_has_dnsinfo();
  } else {
    clear_has_dnsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCDNDnsResponse.DnsInfo)
}

// optional .micromsg.CDNDnsInfo SnsDnsInfo = 3;
bool GetCDNDnsResponse::has_snsdnsinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetCDNDnsResponse::set_has_snsdnsinfo() {
  _has_bits_[0] |= 0x00000004u;
}
void GetCDNDnsResponse::clear_has_snsdnsinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetCDNDnsResponse::clear_snsdnsinfo() {
  if (snsdnsinfo_ != NULL) snsdnsinfo_->::micromsg::CDNDnsInfo::Clear();
  clear_has_snsdnsinfo();
}
const ::micromsg::CDNDnsInfo& GetCDNDnsResponse::snsdnsinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCDNDnsResponse.SnsDnsInfo)
  return snsdnsinfo_ != NULL ? *snsdnsinfo_
                         : *::micromsg::CDNDnsInfo::internal_default_instance();
}
::micromsg::CDNDnsInfo* GetCDNDnsResponse::mutable_snsdnsinfo() {
  set_has_snsdnsinfo();
  if (snsdnsinfo_ == NULL) {
    snsdnsinfo_ = new ::micromsg::CDNDnsInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCDNDnsResponse.SnsDnsInfo)
  return snsdnsinfo_;
}
::micromsg::CDNDnsInfo* GetCDNDnsResponse::release_snsdnsinfo() {
  // @@protoc_insertion_point(field_release:micromsg.GetCDNDnsResponse.SnsDnsInfo)
  clear_has_snsdnsinfo();
  ::micromsg::CDNDnsInfo* temp = snsdnsinfo_;
  snsdnsinfo_ = NULL;
  return temp;
}
void GetCDNDnsResponse::set_allocated_snsdnsinfo(::micromsg::CDNDnsInfo* snsdnsinfo) {
  delete snsdnsinfo_;
  snsdnsinfo_ = snsdnsinfo;
  if (snsdnsinfo) {
    set_has_snsdnsinfo();
  } else {
    clear_has_snsdnsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCDNDnsResponse.SnsDnsInfo)
}

// optional .micromsg.CDNDnsInfo AppDnsInfo = 4;
bool GetCDNDnsResponse::has_appdnsinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetCDNDnsResponse::set_has_appdnsinfo() {
  _has_bits_[0] |= 0x00000008u;
}
void GetCDNDnsResponse::clear_has_appdnsinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetCDNDnsResponse::clear_appdnsinfo() {
  if (appdnsinfo_ != NULL) appdnsinfo_->::micromsg::CDNDnsInfo::Clear();
  clear_has_appdnsinfo();
}
const ::micromsg::CDNDnsInfo& GetCDNDnsResponse::appdnsinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCDNDnsResponse.AppDnsInfo)
  return appdnsinfo_ != NULL ? *appdnsinfo_
                         : *::micromsg::CDNDnsInfo::internal_default_instance();
}
::micromsg::CDNDnsInfo* GetCDNDnsResponse::mutable_appdnsinfo() {
  set_has_appdnsinfo();
  if (appdnsinfo_ == NULL) {
    appdnsinfo_ = new ::micromsg::CDNDnsInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCDNDnsResponse.AppDnsInfo)
  return appdnsinfo_;
}
::micromsg::CDNDnsInfo* GetCDNDnsResponse::release_appdnsinfo() {
  // @@protoc_insertion_point(field_release:micromsg.GetCDNDnsResponse.AppDnsInfo)
  clear_has_appdnsinfo();
  ::micromsg::CDNDnsInfo* temp = appdnsinfo_;
  appdnsinfo_ = NULL;
  return temp;
}
void GetCDNDnsResponse::set_allocated_appdnsinfo(::micromsg::CDNDnsInfo* appdnsinfo) {
  delete appdnsinfo_;
  appdnsinfo_ = appdnsinfo;
  if (appdnsinfo) {
    set_has_appdnsinfo();
  } else {
    clear_has_appdnsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCDNDnsResponse.AppDnsInfo)
}

// optional .micromsg.SKBuiltinBuffer_t CDNDnsRuleBuf = 5;
bool GetCDNDnsResponse::has_cdndnsrulebuf() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetCDNDnsResponse::set_has_cdndnsrulebuf() {
  _has_bits_[0] |= 0x00000010u;
}
void GetCDNDnsResponse::clear_has_cdndnsrulebuf() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetCDNDnsResponse::clear_cdndnsrulebuf() {
  if (cdndnsrulebuf_ != NULL) cdndnsrulebuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_cdndnsrulebuf();
}
const ::micromsg::SKBuiltinBuffer_t& GetCDNDnsResponse::cdndnsrulebuf() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCDNDnsResponse.CDNDnsRuleBuf)
  return cdndnsrulebuf_ != NULL ? *cdndnsrulebuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetCDNDnsResponse::mutable_cdndnsrulebuf() {
  set_has_cdndnsrulebuf();
  if (cdndnsrulebuf_ == NULL) {
    cdndnsrulebuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCDNDnsResponse.CDNDnsRuleBuf)
  return cdndnsrulebuf_;
}
::micromsg::SKBuiltinBuffer_t* GetCDNDnsResponse::release_cdndnsrulebuf() {
  // @@protoc_insertion_point(field_release:micromsg.GetCDNDnsResponse.CDNDnsRuleBuf)
  clear_has_cdndnsrulebuf();
  ::micromsg::SKBuiltinBuffer_t* temp = cdndnsrulebuf_;
  cdndnsrulebuf_ = NULL;
  return temp;
}
void GetCDNDnsResponse::set_allocated_cdndnsrulebuf(::micromsg::SKBuiltinBuffer_t* cdndnsrulebuf) {
  delete cdndnsrulebuf_;
  cdndnsrulebuf_ = cdndnsrulebuf;
  if (cdndnsrulebuf) {
    set_has_cdndnsrulebuf();
  } else {
    clear_has_cdndnsrulebuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCDNDnsResponse.CDNDnsRuleBuf)
}

// optional .micromsg.SKBuiltinBuffer_t FakeCDNDnsRuleBuf = 6;
bool GetCDNDnsResponse::has_fakecdndnsrulebuf() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetCDNDnsResponse::set_has_fakecdndnsrulebuf() {
  _has_bits_[0] |= 0x00000020u;
}
void GetCDNDnsResponse::clear_has_fakecdndnsrulebuf() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetCDNDnsResponse::clear_fakecdndnsrulebuf() {
  if (fakecdndnsrulebuf_ != NULL) fakecdndnsrulebuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_fakecdndnsrulebuf();
}
const ::micromsg::SKBuiltinBuffer_t& GetCDNDnsResponse::fakecdndnsrulebuf() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCDNDnsResponse.FakeCDNDnsRuleBuf)
  return fakecdndnsrulebuf_ != NULL ? *fakecdndnsrulebuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetCDNDnsResponse::mutable_fakecdndnsrulebuf() {
  set_has_fakecdndnsrulebuf();
  if (fakecdndnsrulebuf_ == NULL) {
    fakecdndnsrulebuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCDNDnsResponse.FakeCDNDnsRuleBuf)
  return fakecdndnsrulebuf_;
}
::micromsg::SKBuiltinBuffer_t* GetCDNDnsResponse::release_fakecdndnsrulebuf() {
  // @@protoc_insertion_point(field_release:micromsg.GetCDNDnsResponse.FakeCDNDnsRuleBuf)
  clear_has_fakecdndnsrulebuf();
  ::micromsg::SKBuiltinBuffer_t* temp = fakecdndnsrulebuf_;
  fakecdndnsrulebuf_ = NULL;
  return temp;
}
void GetCDNDnsResponse::set_allocated_fakecdndnsrulebuf(::micromsg::SKBuiltinBuffer_t* fakecdndnsrulebuf) {
  delete fakecdndnsrulebuf_;
  fakecdndnsrulebuf_ = fakecdndnsrulebuf;
  if (fakecdndnsrulebuf) {
    set_has_fakecdndnsrulebuf();
  } else {
    clear_has_fakecdndnsrulebuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCDNDnsResponse.FakeCDNDnsRuleBuf)
}

// optional .micromsg.CDNDnsInfo FakeDnsInfo = 7;
bool GetCDNDnsResponse::has_fakednsinfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GetCDNDnsResponse::set_has_fakednsinfo() {
  _has_bits_[0] |= 0x00000040u;
}
void GetCDNDnsResponse::clear_has_fakednsinfo() {
  _has_bits_[0] &= ~0x00000040u;
}
void GetCDNDnsResponse::clear_fakednsinfo() {
  if (fakednsinfo_ != NULL) fakednsinfo_->::micromsg::CDNDnsInfo::Clear();
  clear_has_fakednsinfo();
}
const ::micromsg::CDNDnsInfo& GetCDNDnsResponse::fakednsinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCDNDnsResponse.FakeDnsInfo)
  return fakednsinfo_ != NULL ? *fakednsinfo_
                         : *::micromsg::CDNDnsInfo::internal_default_instance();
}
::micromsg::CDNDnsInfo* GetCDNDnsResponse::mutable_fakednsinfo() {
  set_has_fakednsinfo();
  if (fakednsinfo_ == NULL) {
    fakednsinfo_ = new ::micromsg::CDNDnsInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCDNDnsResponse.FakeDnsInfo)
  return fakednsinfo_;
}
::micromsg::CDNDnsInfo* GetCDNDnsResponse::release_fakednsinfo() {
  // @@protoc_insertion_point(field_release:micromsg.GetCDNDnsResponse.FakeDnsInfo)
  clear_has_fakednsinfo();
  ::micromsg::CDNDnsInfo* temp = fakednsinfo_;
  fakednsinfo_ = NULL;
  return temp;
}
void GetCDNDnsResponse::set_allocated_fakednsinfo(::micromsg::CDNDnsInfo* fakednsinfo) {
  delete fakednsinfo_;
  fakednsinfo_ = fakednsinfo;
  if (fakednsinfo) {
    set_has_fakednsinfo();
  } else {
    clear_has_fakednsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCDNDnsResponse.FakeDnsInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmojiUploadInfoReq::kMD5FieldNumber;
const int EmojiUploadInfoReq::kStartPosFieldNumber;
const int EmojiUploadInfoReq::kTotalLenFieldNumber;
const int EmojiUploadInfoReq::kEmojiBufferFieldNumber;
const int EmojiUploadInfoReq::kTypeFieldNumber;
const int EmojiUploadInfoReq::kToUserNameFieldNumber;
const int EmojiUploadInfoReq::kExternXMLFieldNumber;
const int EmojiUploadInfoReq::kReportFieldNumber;
const int EmojiUploadInfoReq::kClientMsgIDFieldNumber;
const int EmojiUploadInfoReq::kMsgSourceFieldNumber;
const int EmojiUploadInfoReq::kNewXmlFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmojiUploadInfoReq::EmojiUploadInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EmojiUploadInfoReq)
}
EmojiUploadInfoReq::EmojiUploadInfoReq(const EmojiUploadInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_md5()) {
    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tousername()) {
    tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
  }
  externxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_externxml()) {
    externxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.externxml_);
  }
  report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_report()) {
    report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.report_);
  }
  clientmsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientmsgid()) {
    clientmsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientmsgid_);
  }
  msgsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msgsource()) {
    msgsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgsource_);
  }
  if (from.has_emojibuffer()) {
    emojibuffer_ = new ::micromsg::SKBuiltinBuffer_t(*from.emojibuffer_);
  } else {
    emojibuffer_ = NULL;
  }
  ::memcpy(&startpos_, &from.startpos_,
    reinterpret_cast<char*>(&newxmlflag_) -
    reinterpret_cast<char*>(&startpos_) + sizeof(newxmlflag_));
  // @@protoc_insertion_point(copy_constructor:micromsg.EmojiUploadInfoReq)
}

void EmojiUploadInfoReq::SharedCtor() {
  _cached_size_ = 0;
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  externxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientmsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&emojibuffer_, 0, reinterpret_cast<char*>(&newxmlflag_) -
    reinterpret_cast<char*>(&emojibuffer_) + sizeof(newxmlflag_));
}

EmojiUploadInfoReq::~EmojiUploadInfoReq() {
  // @@protoc_insertion_point(destructor:micromsg.EmojiUploadInfoReq)
  SharedDtor();
}

void EmojiUploadInfoReq::SharedDtor() {
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  externxml_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  report_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientmsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgsource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete emojibuffer_;
  }
}

void EmojiUploadInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmojiUploadInfoReq::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmojiUploadInfoReq& EmojiUploadInfoReq::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmojiUploadInfoReq* EmojiUploadInfoReq::New(::google::protobuf::Arena* arena) const {
  EmojiUploadInfoReq* n = new EmojiUploadInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmojiUploadInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EmojiUploadInfoReq)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_md5()) {
      GOOGLE_DCHECK(!md5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*md5_.UnsafeRawStringPointer())->clear();
    }
    if (has_tousername()) {
      GOOGLE_DCHECK(!tousername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tousername_.UnsafeRawStringPointer())->clear();
    }
    if (has_externxml()) {
      GOOGLE_DCHECK(!externxml_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*externxml_.UnsafeRawStringPointer())->clear();
    }
    if (has_report()) {
      GOOGLE_DCHECK(!report_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*report_.UnsafeRawStringPointer())->clear();
    }
    if (has_clientmsgid()) {
      GOOGLE_DCHECK(!clientmsgid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientmsgid_.UnsafeRawStringPointer())->clear();
    }
    if (has_msgsource()) {
      GOOGLE_DCHECK(!msgsource_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msgsource_.UnsafeRawStringPointer())->clear();
    }
    if (has_emojibuffer()) {
      GOOGLE_DCHECK(emojibuffer_ != NULL);
      emojibuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  startpos_ = 0;
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&totallen_, 0, reinterpret_cast<char*>(&newxmlflag_) -
      reinterpret_cast<char*>(&totallen_) + sizeof(newxmlflag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmojiUploadInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EmojiUploadInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string MD5 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmojiUploadInfoReq.MD5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 StartPos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 TotalLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t EmojiBuffer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emojibuffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ToUserName = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tousername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tousername().data(), this->tousername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmojiUploadInfoReq.ToUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ExternXML = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_externxml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->externxml().data(), this->externxml().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmojiUploadInfoReq.ExternXML");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Report = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_report()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->report().data(), this->report().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmojiUploadInfoReq.Report");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientMsgID = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientmsgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientmsgid().data(), this->clientmsgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmojiUploadInfoReq.ClientMsgID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MsgSource = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgsource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgsource().data(), this->msgsource().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmojiUploadInfoReq.MsgSource");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 NewXmlFlag = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_newxmlflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newxmlflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EmojiUploadInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EmojiUploadInfoReq)
  return false;
#undef DO_
}

void EmojiUploadInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EmojiUploadInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string MD5 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiUploadInfoReq.MD5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->md5(), output);
  }

  // required int32 StartPos = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startpos(), output);
  }

  // required int32 TotalLen = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totallen(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t EmojiBuffer = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->emojibuffer_, output);
  }

  // required int32 Type = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional string ToUserName = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiUploadInfoReq.ToUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->tousername(), output);
  }

  // optional string ExternXML = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->externxml().data(), this->externxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiUploadInfoReq.ExternXML");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->externxml(), output);
  }

  // optional string Report = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->report().data(), this->report().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiUploadInfoReq.Report");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->report(), output);
  }

  // optional string ClientMsgID = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientmsgid().data(), this->clientmsgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiUploadInfoReq.ClientMsgID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->clientmsgid(), output);
  }

  // optional string MsgSource = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgsource().data(), this->msgsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiUploadInfoReq.MsgSource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->msgsource(), output);
  }

  // optional int32 NewXmlFlag = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->newxmlflag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EmojiUploadInfoReq)
}

::google::protobuf::uint8* EmojiUploadInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EmojiUploadInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string MD5 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiUploadInfoReq.MD5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->md5(), target);
  }

  // required int32 StartPos = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->startpos(), target);
  }

  // required int32 TotalLen = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totallen(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t EmojiBuffer = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->emojibuffer_, deterministic, target);
  }

  // required int32 Type = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // optional string ToUserName = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiUploadInfoReq.ToUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->tousername(), target);
  }

  // optional string ExternXML = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->externxml().data(), this->externxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiUploadInfoReq.ExternXML");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->externxml(), target);
  }

  // optional string Report = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->report().data(), this->report().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiUploadInfoReq.Report");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->report(), target);
  }

  // optional string ClientMsgID = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientmsgid().data(), this->clientmsgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiUploadInfoReq.ClientMsgID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->clientmsgid(), target);
  }

  // optional string MsgSource = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgsource().data(), this->msgsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiUploadInfoReq.MsgSource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->msgsource(), target);
  }

  // optional int32 NewXmlFlag = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->newxmlflag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EmojiUploadInfoReq)
  return target;
}

size_t EmojiUploadInfoReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.EmojiUploadInfoReq)
  size_t total_size = 0;

  if (has_emojibuffer()) {
    // required .micromsg.SKBuiltinBuffer_t EmojiBuffer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->emojibuffer_);
  }

  if (has_startpos()) {
    // required int32 StartPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startpos());
  }

  if (has_totallen()) {
    // required int32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totallen());
  }

  if (has_type()) {
    // required int32 Type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t EmojiUploadInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EmojiUploadInfoReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003c0) ^ 0x000003c0) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t EmojiBuffer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->emojibuffer_);

    // required int32 StartPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startpos());

    // required int32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totallen());

    // required int32 Type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string MD5 = 1;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

    // optional string ToUserName = 6;
    if (has_tousername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tousername());
    }

    // optional string ExternXML = 7;
    if (has_externxml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->externxml());
    }

    // optional string Report = 8;
    if (has_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->report());
    }

    // optional string ClientMsgID = 9;
    if (has_clientmsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientmsgid());
    }

    // optional string MsgSource = 10;
    if (has_msgsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgsource());
    }

  }
  // optional int32 NewXmlFlag = 11;
  if (has_newxmlflag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->newxmlflag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmojiUploadInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EmojiUploadInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const EmojiUploadInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmojiUploadInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EmojiUploadInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EmojiUploadInfoReq)
    MergeFrom(*source);
  }
}

void EmojiUploadInfoReq::MergeFrom(const EmojiUploadInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EmojiUploadInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_md5();
      md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tousername();
      tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_externxml();
      externxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.externxml_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_report();
      report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.report_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_clientmsgid();
      clientmsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientmsgid_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_msgsource();
      msgsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgsource_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_emojibuffer()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.emojibuffer());
    }
    if (cached_has_bits & 0x00000080u) {
      startpos_ = from.startpos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      totallen_ = from.totallen_;
    }
    if (cached_has_bits & 0x00000200u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000400u) {
      newxmlflag_ = from.newxmlflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EmojiUploadInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EmojiUploadInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmojiUploadInfoReq::CopyFrom(const EmojiUploadInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EmojiUploadInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmojiUploadInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003c0) != 0x000003c0) return false;
  if (has_emojibuffer()) {
    if (!this->emojibuffer_->IsInitialized()) return false;
  }
  return true;
}

void EmojiUploadInfoReq::Swap(EmojiUploadInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmojiUploadInfoReq::InternalSwap(EmojiUploadInfoReq* other) {
  md5_.Swap(&other->md5_);
  tousername_.Swap(&other->tousername_);
  externxml_.Swap(&other->externxml_);
  report_.Swap(&other->report_);
  clientmsgid_.Swap(&other->clientmsgid_);
  msgsource_.Swap(&other->msgsource_);
  std::swap(emojibuffer_, other->emojibuffer_);
  std::swap(startpos_, other->startpos_);
  std::swap(totallen_, other->totallen_);
  std::swap(type_, other->type_);
  std::swap(newxmlflag_, other->newxmlflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmojiUploadInfoReq::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmojiUploadInfoReq

// optional string MD5 = 1;
bool EmojiUploadInfoReq::has_md5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmojiUploadInfoReq::set_has_md5() {
  _has_bits_[0] |= 0x00000001u;
}
void EmojiUploadInfoReq::clear_has_md5() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmojiUploadInfoReq::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
const ::std::string& EmojiUploadInfoReq::md5() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.MD5)
  return md5_.GetNoArena();
}
void EmojiUploadInfoReq::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoReq.MD5)
}
#if LANG_CXX11
void EmojiUploadInfoReq::set_md5(::std::string&& value) {
  set_has_md5();
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiUploadInfoReq.MD5)
}
#endif
void EmojiUploadInfoReq::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiUploadInfoReq.MD5)
}
void EmojiUploadInfoReq::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiUploadInfoReq.MD5)
}
::std::string* EmojiUploadInfoReq::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiUploadInfoReq.MD5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmojiUploadInfoReq::release_md5() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiUploadInfoReq.MD5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmojiUploadInfoReq::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiUploadInfoReq.MD5)
}

// required int32 StartPos = 2;
bool EmojiUploadInfoReq::has_startpos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void EmojiUploadInfoReq::set_has_startpos() {
  _has_bits_[0] |= 0x00000080u;
}
void EmojiUploadInfoReq::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000080u;
}
void EmojiUploadInfoReq::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
::google::protobuf::int32 EmojiUploadInfoReq::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.StartPos)
  return startpos_;
}
void EmojiUploadInfoReq::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoReq.StartPos)
}

// required int32 TotalLen = 3;
bool EmojiUploadInfoReq::has_totallen() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void EmojiUploadInfoReq::set_has_totallen() {
  _has_bits_[0] |= 0x00000100u;
}
void EmojiUploadInfoReq::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000100u;
}
void EmojiUploadInfoReq::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
::google::protobuf::int32 EmojiUploadInfoReq::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.TotalLen)
  return totallen_;
}
void EmojiUploadInfoReq::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoReq.TotalLen)
}

// required .micromsg.SKBuiltinBuffer_t EmojiBuffer = 4;
bool EmojiUploadInfoReq::has_emojibuffer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EmojiUploadInfoReq::set_has_emojibuffer() {
  _has_bits_[0] |= 0x00000040u;
}
void EmojiUploadInfoReq::clear_has_emojibuffer() {
  _has_bits_[0] &= ~0x00000040u;
}
void EmojiUploadInfoReq::clear_emojibuffer() {
  if (emojibuffer_ != NULL) emojibuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_emojibuffer();
}
const ::micromsg::SKBuiltinBuffer_t& EmojiUploadInfoReq::emojibuffer() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.EmojiBuffer)
  return emojibuffer_ != NULL ? *emojibuffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* EmojiUploadInfoReq::mutable_emojibuffer() {
  set_has_emojibuffer();
  if (emojibuffer_ == NULL) {
    emojibuffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiUploadInfoReq.EmojiBuffer)
  return emojibuffer_;
}
::micromsg::SKBuiltinBuffer_t* EmojiUploadInfoReq::release_emojibuffer() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiUploadInfoReq.EmojiBuffer)
  clear_has_emojibuffer();
  ::micromsg::SKBuiltinBuffer_t* temp = emojibuffer_;
  emojibuffer_ = NULL;
  return temp;
}
void EmojiUploadInfoReq::set_allocated_emojibuffer(::micromsg::SKBuiltinBuffer_t* emojibuffer) {
  delete emojibuffer_;
  emojibuffer_ = emojibuffer;
  if (emojibuffer) {
    set_has_emojibuffer();
  } else {
    clear_has_emojibuffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiUploadInfoReq.EmojiBuffer)
}

// required int32 Type = 5;
bool EmojiUploadInfoReq::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void EmojiUploadInfoReq::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
void EmojiUploadInfoReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
void EmojiUploadInfoReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 EmojiUploadInfoReq::type() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.Type)
  return type_;
}
void EmojiUploadInfoReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoReq.Type)
}

// optional string ToUserName = 6;
bool EmojiUploadInfoReq::has_tousername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmojiUploadInfoReq::set_has_tousername() {
  _has_bits_[0] |= 0x00000002u;
}
void EmojiUploadInfoReq::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmojiUploadInfoReq::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
const ::std::string& EmojiUploadInfoReq::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.ToUserName)
  return tousername_.GetNoArena();
}
void EmojiUploadInfoReq::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoReq.ToUserName)
}
#if LANG_CXX11
void EmojiUploadInfoReq::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiUploadInfoReq.ToUserName)
}
#endif
void EmojiUploadInfoReq::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiUploadInfoReq.ToUserName)
}
void EmojiUploadInfoReq::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiUploadInfoReq.ToUserName)
}
::std::string* EmojiUploadInfoReq::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiUploadInfoReq.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmojiUploadInfoReq::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiUploadInfoReq.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmojiUploadInfoReq::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiUploadInfoReq.ToUserName)
}

// optional string ExternXML = 7;
bool EmojiUploadInfoReq::has_externxml() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EmojiUploadInfoReq::set_has_externxml() {
  _has_bits_[0] |= 0x00000004u;
}
void EmojiUploadInfoReq::clear_has_externxml() {
  _has_bits_[0] &= ~0x00000004u;
}
void EmojiUploadInfoReq::clear_externxml() {
  externxml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_externxml();
}
const ::std::string& EmojiUploadInfoReq::externxml() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.ExternXML)
  return externxml_.GetNoArena();
}
void EmojiUploadInfoReq::set_externxml(const ::std::string& value) {
  set_has_externxml();
  externxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoReq.ExternXML)
}
#if LANG_CXX11
void EmojiUploadInfoReq::set_externxml(::std::string&& value) {
  set_has_externxml();
  externxml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiUploadInfoReq.ExternXML)
}
#endif
void EmojiUploadInfoReq::set_externxml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_externxml();
  externxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiUploadInfoReq.ExternXML)
}
void EmojiUploadInfoReq::set_externxml(const char* value, size_t size) {
  set_has_externxml();
  externxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiUploadInfoReq.ExternXML)
}
::std::string* EmojiUploadInfoReq::mutable_externxml() {
  set_has_externxml();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiUploadInfoReq.ExternXML)
  return externxml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmojiUploadInfoReq::release_externxml() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiUploadInfoReq.ExternXML)
  clear_has_externxml();
  return externxml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmojiUploadInfoReq::set_allocated_externxml(::std::string* externxml) {
  if (externxml != NULL) {
    set_has_externxml();
  } else {
    clear_has_externxml();
  }
  externxml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), externxml);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiUploadInfoReq.ExternXML)
}

// optional string Report = 8;
bool EmojiUploadInfoReq::has_report() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EmojiUploadInfoReq::set_has_report() {
  _has_bits_[0] |= 0x00000008u;
}
void EmojiUploadInfoReq::clear_has_report() {
  _has_bits_[0] &= ~0x00000008u;
}
void EmojiUploadInfoReq::clear_report() {
  report_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_report();
}
const ::std::string& EmojiUploadInfoReq::report() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.Report)
  return report_.GetNoArena();
}
void EmojiUploadInfoReq::set_report(const ::std::string& value) {
  set_has_report();
  report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoReq.Report)
}
#if LANG_CXX11
void EmojiUploadInfoReq::set_report(::std::string&& value) {
  set_has_report();
  report_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiUploadInfoReq.Report)
}
#endif
void EmojiUploadInfoReq::set_report(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_report();
  report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiUploadInfoReq.Report)
}
void EmojiUploadInfoReq::set_report(const char* value, size_t size) {
  set_has_report();
  report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiUploadInfoReq.Report)
}
::std::string* EmojiUploadInfoReq::mutable_report() {
  set_has_report();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiUploadInfoReq.Report)
  return report_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmojiUploadInfoReq::release_report() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiUploadInfoReq.Report)
  clear_has_report();
  return report_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmojiUploadInfoReq::set_allocated_report(::std::string* report) {
  if (report != NULL) {
    set_has_report();
  } else {
    clear_has_report();
  }
  report_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), report);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiUploadInfoReq.Report)
}

// optional string ClientMsgID = 9;
bool EmojiUploadInfoReq::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EmojiUploadInfoReq::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000010u;
}
void EmojiUploadInfoReq::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000010u;
}
void EmojiUploadInfoReq::clear_clientmsgid() {
  clientmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientmsgid();
}
const ::std::string& EmojiUploadInfoReq::clientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.ClientMsgID)
  return clientmsgid_.GetNoArena();
}
void EmojiUploadInfoReq::set_clientmsgid(const ::std::string& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoReq.ClientMsgID)
}
#if LANG_CXX11
void EmojiUploadInfoReq::set_clientmsgid(::std::string&& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiUploadInfoReq.ClientMsgID)
}
#endif
void EmojiUploadInfoReq::set_clientmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiUploadInfoReq.ClientMsgID)
}
void EmojiUploadInfoReq::set_clientmsgid(const char* value, size_t size) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiUploadInfoReq.ClientMsgID)
}
::std::string* EmojiUploadInfoReq::mutable_clientmsgid() {
  set_has_clientmsgid();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiUploadInfoReq.ClientMsgID)
  return clientmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmojiUploadInfoReq::release_clientmsgid() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiUploadInfoReq.ClientMsgID)
  clear_has_clientmsgid();
  return clientmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmojiUploadInfoReq::set_allocated_clientmsgid(::std::string* clientmsgid) {
  if (clientmsgid != NULL) {
    set_has_clientmsgid();
  } else {
    clear_has_clientmsgid();
  }
  clientmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientmsgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiUploadInfoReq.ClientMsgID)
}

// optional string MsgSource = 10;
bool EmojiUploadInfoReq::has_msgsource() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EmojiUploadInfoReq::set_has_msgsource() {
  _has_bits_[0] |= 0x00000020u;
}
void EmojiUploadInfoReq::clear_has_msgsource() {
  _has_bits_[0] &= ~0x00000020u;
}
void EmojiUploadInfoReq::clear_msgsource() {
  msgsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgsource();
}
const ::std::string& EmojiUploadInfoReq::msgsource() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.MsgSource)
  return msgsource_.GetNoArena();
}
void EmojiUploadInfoReq::set_msgsource(const ::std::string& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoReq.MsgSource)
}
#if LANG_CXX11
void EmojiUploadInfoReq::set_msgsource(::std::string&& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiUploadInfoReq.MsgSource)
}
#endif
void EmojiUploadInfoReq::set_msgsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiUploadInfoReq.MsgSource)
}
void EmojiUploadInfoReq::set_msgsource(const char* value, size_t size) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiUploadInfoReq.MsgSource)
}
::std::string* EmojiUploadInfoReq::mutable_msgsource() {
  set_has_msgsource();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiUploadInfoReq.MsgSource)
  return msgsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmojiUploadInfoReq::release_msgsource() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiUploadInfoReq.MsgSource)
  clear_has_msgsource();
  return msgsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmojiUploadInfoReq::set_allocated_msgsource(::std::string* msgsource) {
  if (msgsource != NULL) {
    set_has_msgsource();
  } else {
    clear_has_msgsource();
  }
  msgsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgsource);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiUploadInfoReq.MsgSource)
}

// optional int32 NewXmlFlag = 11;
bool EmojiUploadInfoReq::has_newxmlflag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void EmojiUploadInfoReq::set_has_newxmlflag() {
  _has_bits_[0] |= 0x00000400u;
}
void EmojiUploadInfoReq::clear_has_newxmlflag() {
  _has_bits_[0] &= ~0x00000400u;
}
void EmojiUploadInfoReq::clear_newxmlflag() {
  newxmlflag_ = 0;
  clear_has_newxmlflag();
}
::google::protobuf::int32 EmojiUploadInfoReq::newxmlflag() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.NewXmlFlag)
  return newxmlflag_;
}
void EmojiUploadInfoReq::set_newxmlflag(::google::protobuf::int32 value) {
  set_has_newxmlflag();
  newxmlflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoReq.NewXmlFlag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadEmojiRequest::kBaseRequestFieldNumber;
const int UploadEmojiRequest::kEmojiItemCountFieldNumber;
const int UploadEmojiRequest::kEmojiItemFieldNumber;
const int UploadEmojiRequest::kReqTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadEmojiRequest::UploadEmojiRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UploadEmojiRequest)
}
UploadEmojiRequest::UploadEmojiRequest(const UploadEmojiRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      emojiitem_(from.emojiitem_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&emojiitemcount_, &from.emojiitemcount_,
    reinterpret_cast<char*>(&reqtime_) -
    reinterpret_cast<char*>(&emojiitemcount_) + sizeof(reqtime_));
  // @@protoc_insertion_point(copy_constructor:micromsg.UploadEmojiRequest)
}

void UploadEmojiRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&reqtime_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(reqtime_));
}

UploadEmojiRequest::~UploadEmojiRequest() {
  // @@protoc_insertion_point(destructor:micromsg.UploadEmojiRequest)
  SharedDtor();
}

void UploadEmojiRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void UploadEmojiRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadEmojiRequest::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UploadEmojiRequest& UploadEmojiRequest::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

UploadEmojiRequest* UploadEmojiRequest::New(::google::protobuf::Arena* arena) const {
  UploadEmojiRequest* n = new UploadEmojiRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadEmojiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UploadEmojiRequest)
  emojiitem_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&emojiitemcount_, 0, reinterpret_cast<char*>(&reqtime_) -
      reinterpret_cast<char*>(&emojiitemcount_) + sizeof(reqtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UploadEmojiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UploadEmojiRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 EmojiItemCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_emojiitemcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emojiitemcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.EmojiUploadInfoReq EmojiItem = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_emojiitem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ReqTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_reqtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UploadEmojiRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UploadEmojiRequest)
  return false;
#undef DO_
}

void UploadEmojiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UploadEmojiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required int32 EmojiItemCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->emojiitemcount(), output);
  }

  // repeated .micromsg.EmojiUploadInfoReq EmojiItem = 3;
  for (unsigned int i = 0, n = this->emojiitem_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->emojiitem(i), output);
  }

  // optional uint32 ReqTime = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reqtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UploadEmojiRequest)
}

::google::protobuf::uint8* UploadEmojiRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UploadEmojiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required int32 EmojiItemCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->emojiitemcount(), target);
  }

  // repeated .micromsg.EmojiUploadInfoReq EmojiItem = 3;
  for (unsigned int i = 0, n = this->emojiitem_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->emojiitem(i), deterministic, target);
  }

  // optional uint32 ReqTime = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reqtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UploadEmojiRequest)
  return target;
}

size_t UploadEmojiRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.UploadEmojiRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_emojiitemcount()) {
    // required int32 EmojiItemCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->emojiitemcount());
  }

  return total_size;
}
size_t UploadEmojiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UploadEmojiRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int32 EmojiItemCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->emojiitemcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.EmojiUploadInfoReq EmojiItem = 3;
  {
    unsigned int count = this->emojiitem_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emojiitem(i));
    }
  }

  // optional uint32 ReqTime = 4;
  if (has_reqtime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reqtime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadEmojiRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UploadEmojiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadEmojiRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadEmojiRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UploadEmojiRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UploadEmojiRequest)
    MergeFrom(*source);
  }
}

void UploadEmojiRequest::MergeFrom(const UploadEmojiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UploadEmojiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emojiitem_.MergeFrom(from.emojiitem_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      emojiitemcount_ = from.emojiitemcount_;
    }
    if (cached_has_bits & 0x00000004u) {
      reqtime_ = from.reqtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UploadEmojiRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UploadEmojiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadEmojiRequest::CopyFrom(const UploadEmojiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UploadEmojiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadEmojiRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->emojiitem())) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void UploadEmojiRequest::Swap(UploadEmojiRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadEmojiRequest::InternalSwap(UploadEmojiRequest* other) {
  emojiitem_.InternalSwap(&other->emojiitem_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(emojiitemcount_, other->emojiitemcount_);
  std::swap(reqtime_, other->reqtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadEmojiRequest::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadEmojiRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool UploadEmojiRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UploadEmojiRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void UploadEmojiRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void UploadEmojiRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& UploadEmojiRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* UploadEmojiRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadEmojiRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* UploadEmojiRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.UploadEmojiRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void UploadEmojiRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadEmojiRequest.BaseRequest)
}

// required int32 EmojiItemCount = 2;
bool UploadEmojiRequest::has_emojiitemcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UploadEmojiRequest::set_has_emojiitemcount() {
  _has_bits_[0] |= 0x00000002u;
}
void UploadEmojiRequest::clear_has_emojiitemcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void UploadEmojiRequest::clear_emojiitemcount() {
  emojiitemcount_ = 0;
  clear_has_emojiitemcount();
}
::google::protobuf::int32 UploadEmojiRequest::emojiitemcount() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiRequest.EmojiItemCount)
  return emojiitemcount_;
}
void UploadEmojiRequest::set_emojiitemcount(::google::protobuf::int32 value) {
  set_has_emojiitemcount();
  emojiitemcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadEmojiRequest.EmojiItemCount)
}

// repeated .micromsg.EmojiUploadInfoReq EmojiItem = 3;
int UploadEmojiRequest::emojiitem_size() const {
  return emojiitem_.size();
}
void UploadEmojiRequest::clear_emojiitem() {
  emojiitem_.Clear();
}
const ::micromsg::EmojiUploadInfoReq& UploadEmojiRequest::emojiitem(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiRequest.EmojiItem)
  return emojiitem_.Get(index);
}
::micromsg::EmojiUploadInfoReq* UploadEmojiRequest::mutable_emojiitem(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.UploadEmojiRequest.EmojiItem)
  return emojiitem_.Mutable(index);
}
::micromsg::EmojiUploadInfoReq* UploadEmojiRequest::add_emojiitem() {
  // @@protoc_insertion_point(field_add:micromsg.UploadEmojiRequest.EmojiItem)
  return emojiitem_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::EmojiUploadInfoReq >*
UploadEmojiRequest::mutable_emojiitem() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.UploadEmojiRequest.EmojiItem)
  return &emojiitem_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiUploadInfoReq >&
UploadEmojiRequest::emojiitem() const {
  // @@protoc_insertion_point(field_list:micromsg.UploadEmojiRequest.EmojiItem)
  return emojiitem_;
}

// optional uint32 ReqTime = 4;
bool UploadEmojiRequest::has_reqtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UploadEmojiRequest::set_has_reqtime() {
  _has_bits_[0] |= 0x00000004u;
}
void UploadEmojiRequest::clear_has_reqtime() {
  _has_bits_[0] &= ~0x00000004u;
}
void UploadEmojiRequest::clear_reqtime() {
  reqtime_ = 0u;
  clear_has_reqtime();
}
::google::protobuf::uint32 UploadEmojiRequest::reqtime() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiRequest.ReqTime)
  return reqtime_;
}
void UploadEmojiRequest::set_reqtime(::google::protobuf::uint32 value) {
  set_has_reqtime();
  reqtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadEmojiRequest.ReqTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmojiUploadInfoResp::kRetFieldNumber;
const int EmojiUploadInfoResp::kStartPosFieldNumber;
const int EmojiUploadInfoResp::kTotalLenFieldNumber;
const int EmojiUploadInfoResp::kMD5FieldNumber;
const int EmojiUploadInfoResp::kMsgIDFieldNumber;
const int EmojiUploadInfoResp::kNewMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmojiUploadInfoResp::EmojiUploadInfoResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EmojiUploadInfoResp)
}
EmojiUploadInfoResp::EmojiUploadInfoResp(const EmojiUploadInfoResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_md5()) {
    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  ::memcpy(&ret_, &from.ret_,
    reinterpret_cast<char*>(&newmsgid_) -
    reinterpret_cast<char*>(&ret_) + sizeof(newmsgid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.EmojiUploadInfoResp)
}

void EmojiUploadInfoResp::SharedCtor() {
  _cached_size_ = 0;
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ret_, 0, reinterpret_cast<char*>(&newmsgid_) -
    reinterpret_cast<char*>(&ret_) + sizeof(newmsgid_));
}

EmojiUploadInfoResp::~EmojiUploadInfoResp() {
  // @@protoc_insertion_point(destructor:micromsg.EmojiUploadInfoResp)
  SharedDtor();
}

void EmojiUploadInfoResp::SharedDtor() {
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EmojiUploadInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmojiUploadInfoResp::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmojiUploadInfoResp& EmojiUploadInfoResp::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmojiUploadInfoResp* EmojiUploadInfoResp::New(::google::protobuf::Arena* arena) const {
  EmojiUploadInfoResp* n = new EmojiUploadInfoResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmojiUploadInfoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EmojiUploadInfoResp)
  if (has_md5()) {
    GOOGLE_DCHECK(!md5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*md5_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&ret_, 0, reinterpret_cast<char*>(&newmsgid_) -
      reinterpret_cast<char*>(&ret_) + sizeof(newmsgid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmojiUploadInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EmojiUploadInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 StartPos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 TotalLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MD5 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmojiUploadInfoResp.MD5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MsgID = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 NewMsgId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_newmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EmojiUploadInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EmojiUploadInfoResp)
  return false;
#undef DO_
}

void EmojiUploadInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EmojiUploadInfoResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required int32 StartPos = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startpos(), output);
  }

  // required int32 TotalLen = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totallen(), output);
  }

  // optional string MD5 = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiUploadInfoResp.MD5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->md5(), output);
  }

  // required uint32 MsgID = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->msgid(), output);
  }

  // optional uint64 NewMsgId = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->newmsgid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EmojiUploadInfoResp)
}

::google::protobuf::uint8* EmojiUploadInfoResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EmojiUploadInfoResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required int32 StartPos = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->startpos(), target);
  }

  // required int32 TotalLen = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totallen(), target);
  }

  // optional string MD5 = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiUploadInfoResp.MD5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->md5(), target);
  }

  // required uint32 MsgID = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->msgid(), target);
  }

  // optional uint64 NewMsgId = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->newmsgid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EmojiUploadInfoResp)
  return target;
}

size_t EmojiUploadInfoResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.EmojiUploadInfoResp)
  size_t total_size = 0;

  if (has_ret()) {
    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_startpos()) {
    // required int32 StartPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startpos());
  }

  if (has_totallen()) {
    // required int32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totallen());
  }

  if (has_msgid()) {
    // required uint32 MsgID = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  return total_size;
}
size_t EmojiUploadInfoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EmojiUploadInfoResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required int32 StartPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startpos());

    // required int32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totallen());

    // required uint32 MsgID = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string MD5 = 4;
  if (has_md5()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->md5());
  }

  // optional uint64 NewMsgId = 6;
  if (has_newmsgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->newmsgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmojiUploadInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EmojiUploadInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  const EmojiUploadInfoResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmojiUploadInfoResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EmojiUploadInfoResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EmojiUploadInfoResp)
    MergeFrom(*source);
  }
}

void EmojiUploadInfoResp::MergeFrom(const EmojiUploadInfoResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EmojiUploadInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_md5();
      md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000004u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00000008u) {
      totallen_ = from.totallen_;
    }
    if (cached_has_bits & 0x00000010u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x00000020u) {
      newmsgid_ = from.newmsgid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EmojiUploadInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EmojiUploadInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmojiUploadInfoResp::CopyFrom(const EmojiUploadInfoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EmojiUploadInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmojiUploadInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  return true;
}

void EmojiUploadInfoResp::Swap(EmojiUploadInfoResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmojiUploadInfoResp::InternalSwap(EmojiUploadInfoResp* other) {
  md5_.Swap(&other->md5_);
  std::swap(ret_, other->ret_);
  std::swap(startpos_, other->startpos_);
  std::swap(totallen_, other->totallen_);
  std::swap(msgid_, other->msgid_);
  std::swap(newmsgid_, other->newmsgid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmojiUploadInfoResp::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmojiUploadInfoResp

// required int32 Ret = 1;
bool EmojiUploadInfoResp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmojiUploadInfoResp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void EmojiUploadInfoResp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmojiUploadInfoResp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::google::protobuf::int32 EmojiUploadInfoResp::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoResp.Ret)
  return ret_;
}
void EmojiUploadInfoResp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoResp.Ret)
}

// required int32 StartPos = 2;
bool EmojiUploadInfoResp::has_startpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EmojiUploadInfoResp::set_has_startpos() {
  _has_bits_[0] |= 0x00000004u;
}
void EmojiUploadInfoResp::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000004u;
}
void EmojiUploadInfoResp::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
::google::protobuf::int32 EmojiUploadInfoResp::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoResp.StartPos)
  return startpos_;
}
void EmojiUploadInfoResp::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoResp.StartPos)
}

// required int32 TotalLen = 3;
bool EmojiUploadInfoResp::has_totallen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EmojiUploadInfoResp::set_has_totallen() {
  _has_bits_[0] |= 0x00000008u;
}
void EmojiUploadInfoResp::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000008u;
}
void EmojiUploadInfoResp::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
::google::protobuf::int32 EmojiUploadInfoResp::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoResp.TotalLen)
  return totallen_;
}
void EmojiUploadInfoResp::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoResp.TotalLen)
}

// optional string MD5 = 4;
bool EmojiUploadInfoResp::has_md5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmojiUploadInfoResp::set_has_md5() {
  _has_bits_[0] |= 0x00000001u;
}
void EmojiUploadInfoResp::clear_has_md5() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmojiUploadInfoResp::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
const ::std::string& EmojiUploadInfoResp::md5() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoResp.MD5)
  return md5_.GetNoArena();
}
void EmojiUploadInfoResp::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoResp.MD5)
}
#if LANG_CXX11
void EmojiUploadInfoResp::set_md5(::std::string&& value) {
  set_has_md5();
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiUploadInfoResp.MD5)
}
#endif
void EmojiUploadInfoResp::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiUploadInfoResp.MD5)
}
void EmojiUploadInfoResp::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiUploadInfoResp.MD5)
}
::std::string* EmojiUploadInfoResp::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiUploadInfoResp.MD5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmojiUploadInfoResp::release_md5() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiUploadInfoResp.MD5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmojiUploadInfoResp::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiUploadInfoResp.MD5)
}

// required uint32 MsgID = 5;
bool EmojiUploadInfoResp::has_msgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EmojiUploadInfoResp::set_has_msgid() {
  _has_bits_[0] |= 0x00000010u;
}
void EmojiUploadInfoResp::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000010u;
}
void EmojiUploadInfoResp::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
::google::protobuf::uint32 EmojiUploadInfoResp::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoResp.MsgID)
  return msgid_;
}
void EmojiUploadInfoResp::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoResp.MsgID)
}

// optional uint64 NewMsgId = 6;
bool EmojiUploadInfoResp::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EmojiUploadInfoResp::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000020u;
}
void EmojiUploadInfoResp::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000020u;
}
void EmojiUploadInfoResp::clear_newmsgid() {
  newmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_newmsgid();
}
::google::protobuf::uint64 EmojiUploadInfoResp::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoResp.NewMsgId)
  return newmsgid_;
}
void EmojiUploadInfoResp::set_newmsgid(::google::protobuf::uint64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoResp.NewMsgId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadEmojiResponse::kBaseResponseFieldNumber;
const int UploadEmojiResponse::kEmojiItemCountFieldNumber;
const int UploadEmojiResponse::kEmojiItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadEmojiResponse::UploadEmojiResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UploadEmojiResponse)
}
UploadEmojiResponse::UploadEmojiResponse(const UploadEmojiResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      emojiitem_(from.emojiitem_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  emojiitemcount_ = from.emojiitemcount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.UploadEmojiResponse)
}

void UploadEmojiResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&emojiitemcount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(emojiitemcount_));
}

UploadEmojiResponse::~UploadEmojiResponse() {
  // @@protoc_insertion_point(destructor:micromsg.UploadEmojiResponse)
  SharedDtor();
}

void UploadEmojiResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void UploadEmojiResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadEmojiResponse::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UploadEmojiResponse& UploadEmojiResponse::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

UploadEmojiResponse* UploadEmojiResponse::New(::google::protobuf::Arena* arena) const {
  UploadEmojiResponse* n = new UploadEmojiResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadEmojiResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UploadEmojiResponse)
  emojiitem_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  emojiitemcount_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UploadEmojiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UploadEmojiResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 EmojiItemCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_emojiitemcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emojiitemcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.EmojiUploadInfoResp EmojiItem = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_emojiitem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UploadEmojiResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UploadEmojiResponse)
  return false;
#undef DO_
}

void UploadEmojiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UploadEmojiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 EmojiItemCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->emojiitemcount(), output);
  }

  // repeated .micromsg.EmojiUploadInfoResp EmojiItem = 3;
  for (unsigned int i = 0, n = this->emojiitem_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->emojiitem(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UploadEmojiResponse)
}

::google::protobuf::uint8* UploadEmojiResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UploadEmojiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 EmojiItemCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->emojiitemcount(), target);
  }

  // repeated .micromsg.EmojiUploadInfoResp EmojiItem = 3;
  for (unsigned int i = 0, n = this->emojiitem_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->emojiitem(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UploadEmojiResponse)
  return target;
}

size_t UploadEmojiResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.UploadEmojiResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_emojiitemcount()) {
    // required int32 EmojiItemCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->emojiitemcount());
  }

  return total_size;
}
size_t UploadEmojiResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UploadEmojiResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required int32 EmojiItemCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->emojiitemcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.EmojiUploadInfoResp EmojiItem = 3;
  {
    unsigned int count = this->emojiitem_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emojiitem(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadEmojiResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UploadEmojiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadEmojiResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadEmojiResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UploadEmojiResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UploadEmojiResponse)
    MergeFrom(*source);
  }
}

void UploadEmojiResponse::MergeFrom(const UploadEmojiResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UploadEmojiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emojiitem_.MergeFrom(from.emojiitem_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      emojiitemcount_ = from.emojiitemcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UploadEmojiResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UploadEmojiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadEmojiResponse::CopyFrom(const UploadEmojiResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UploadEmojiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadEmojiResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->emojiitem())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void UploadEmojiResponse::Swap(UploadEmojiResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadEmojiResponse::InternalSwap(UploadEmojiResponse* other) {
  emojiitem_.InternalSwap(&other->emojiitem_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(emojiitemcount_, other->emojiitemcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadEmojiResponse::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadEmojiResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool UploadEmojiResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UploadEmojiResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void UploadEmojiResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void UploadEmojiResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& UploadEmojiResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* UploadEmojiResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadEmojiResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* UploadEmojiResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UploadEmojiResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void UploadEmojiResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadEmojiResponse.BaseResponse)
}

// required int32 EmojiItemCount = 2;
bool UploadEmojiResponse::has_emojiitemcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UploadEmojiResponse::set_has_emojiitemcount() {
  _has_bits_[0] |= 0x00000002u;
}
void UploadEmojiResponse::clear_has_emojiitemcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void UploadEmojiResponse::clear_emojiitemcount() {
  emojiitemcount_ = 0;
  clear_has_emojiitemcount();
}
::google::protobuf::int32 UploadEmojiResponse::emojiitemcount() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiResponse.EmojiItemCount)
  return emojiitemcount_;
}
void UploadEmojiResponse::set_emojiitemcount(::google::protobuf::int32 value) {
  set_has_emojiitemcount();
  emojiitemcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadEmojiResponse.EmojiItemCount)
}

// repeated .micromsg.EmojiUploadInfoResp EmojiItem = 3;
int UploadEmojiResponse::emojiitem_size() const {
  return emojiitem_.size();
}
void UploadEmojiResponse::clear_emojiitem() {
  emojiitem_.Clear();
}
const ::micromsg::EmojiUploadInfoResp& UploadEmojiResponse::emojiitem(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiResponse.EmojiItem)
  return emojiitem_.Get(index);
}
::micromsg::EmojiUploadInfoResp* UploadEmojiResponse::mutable_emojiitem(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.UploadEmojiResponse.EmojiItem)
  return emojiitem_.Mutable(index);
}
::micromsg::EmojiUploadInfoResp* UploadEmojiResponse::add_emojiitem() {
  // @@protoc_insertion_point(field_add:micromsg.UploadEmojiResponse.EmojiItem)
  return emojiitem_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::EmojiUploadInfoResp >*
UploadEmojiResponse::mutable_emojiitem() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.UploadEmojiResponse.EmojiItem)
  return &emojiitem_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiUploadInfoResp >&
UploadEmojiResponse::emojiitem() const {
  // @@protoc_insertion_point(field_list:micromsg.UploadEmojiResponse.EmojiItem)
  return emojiitem_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmojiDownloadInfoReq::kIDFieldNumber;
const int EmojiDownloadInfoReq::kStartPosFieldNumber;
const int EmojiDownloadInfoReq::kTotalLenFieldNumber;
const int EmojiDownloadInfoReq::kMD5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmojiDownloadInfoReq::EmojiDownloadInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EmojiDownloadInfoReq)
}
EmojiDownloadInfoReq::EmojiDownloadInfoReq(const EmojiDownloadInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_md5()) {
    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  ::memcpy(&startpos_, &from.startpos_,
    reinterpret_cast<char*>(&totallen_) -
    reinterpret_cast<char*>(&startpos_) + sizeof(totallen_));
  // @@protoc_insertion_point(copy_constructor:micromsg.EmojiDownloadInfoReq)
}

void EmojiDownloadInfoReq::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&startpos_, 0, reinterpret_cast<char*>(&totallen_) -
    reinterpret_cast<char*>(&startpos_) + sizeof(totallen_));
}

EmojiDownloadInfoReq::~EmojiDownloadInfoReq() {
  // @@protoc_insertion_point(destructor:micromsg.EmojiDownloadInfoReq)
  SharedDtor();
}

void EmojiDownloadInfoReq::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EmojiDownloadInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmojiDownloadInfoReq::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmojiDownloadInfoReq& EmojiDownloadInfoReq::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmojiDownloadInfoReq* EmojiDownloadInfoReq::New(::google::protobuf::Arena* arena) const {
  EmojiDownloadInfoReq* n = new EmojiDownloadInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmojiDownloadInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EmojiDownloadInfoReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_md5()) {
      GOOGLE_DCHECK(!md5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*md5_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&startpos_, 0, reinterpret_cast<char*>(&totallen_) -
      reinterpret_cast<char*>(&startpos_) + sizeof(totallen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmojiDownloadInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EmojiDownloadInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmojiDownloadInfoReq.ID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 StartPos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 TotalLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MD5 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmojiDownloadInfoReq.MD5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EmojiDownloadInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EmojiDownloadInfoReq)
  return false;
#undef DO_
}

void EmojiDownloadInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EmojiDownloadInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiDownloadInfoReq.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required int32 StartPos = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startpos(), output);
  }

  // required int32 TotalLen = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totallen(), output);
  }

  // optional string MD5 = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiDownloadInfoReq.MD5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->md5(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EmojiDownloadInfoReq)
}

::google::protobuf::uint8* EmojiDownloadInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EmojiDownloadInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiDownloadInfoReq.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 StartPos = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->startpos(), target);
  }

  // required int32 TotalLen = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totallen(), target);
  }

  // optional string MD5 = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiDownloadInfoReq.MD5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->md5(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EmojiDownloadInfoReq)
  return target;
}

size_t EmojiDownloadInfoReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.EmojiDownloadInfoReq)
  size_t total_size = 0;

  if (has_startpos()) {
    // required int32 StartPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startpos());
  }

  if (has_totallen()) {
    // required int32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totallen());
  }

  return total_size;
}
size_t EmojiDownloadInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EmojiDownloadInfoReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required int32 StartPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startpos());

    // required int32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totallen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string MD5 = 4;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmojiDownloadInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EmojiDownloadInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const EmojiDownloadInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmojiDownloadInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EmojiDownloadInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EmojiDownloadInfoReq)
    MergeFrom(*source);
  }
}

void EmojiDownloadInfoReq::MergeFrom(const EmojiDownloadInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EmojiDownloadInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_md5();
      md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
    }
    if (cached_has_bits & 0x00000004u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00000008u) {
      totallen_ = from.totallen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EmojiDownloadInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EmojiDownloadInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmojiDownloadInfoReq::CopyFrom(const EmojiDownloadInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EmojiDownloadInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmojiDownloadInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  return true;
}

void EmojiDownloadInfoReq::Swap(EmojiDownloadInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmojiDownloadInfoReq::InternalSwap(EmojiDownloadInfoReq* other) {
  id_.Swap(&other->id_);
  md5_.Swap(&other->md5_);
  std::swap(startpos_, other->startpos_);
  std::swap(totallen_, other->totallen_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmojiDownloadInfoReq::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmojiDownloadInfoReq

// optional string ID = 1;
bool EmojiDownloadInfoReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmojiDownloadInfoReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void EmojiDownloadInfoReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmojiDownloadInfoReq::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& EmojiDownloadInfoReq::id() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiDownloadInfoReq.ID)
  return id_.GetNoArena();
}
void EmojiDownloadInfoReq::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiDownloadInfoReq.ID)
}
#if LANG_CXX11
void EmojiDownloadInfoReq::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiDownloadInfoReq.ID)
}
#endif
void EmojiDownloadInfoReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiDownloadInfoReq.ID)
}
void EmojiDownloadInfoReq::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiDownloadInfoReq.ID)
}
::std::string* EmojiDownloadInfoReq::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiDownloadInfoReq.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmojiDownloadInfoReq::release_id() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiDownloadInfoReq.ID)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmojiDownloadInfoReq::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiDownloadInfoReq.ID)
}

// required int32 StartPos = 2;
bool EmojiDownloadInfoReq::has_startpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EmojiDownloadInfoReq::set_has_startpos() {
  _has_bits_[0] |= 0x00000004u;
}
void EmojiDownloadInfoReq::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000004u;
}
void EmojiDownloadInfoReq::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
::google::protobuf::int32 EmojiDownloadInfoReq::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiDownloadInfoReq.StartPos)
  return startpos_;
}
void EmojiDownloadInfoReq::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiDownloadInfoReq.StartPos)
}

// required int32 TotalLen = 3;
bool EmojiDownloadInfoReq::has_totallen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EmojiDownloadInfoReq::set_has_totallen() {
  _has_bits_[0] |= 0x00000008u;
}
void EmojiDownloadInfoReq::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000008u;
}
void EmojiDownloadInfoReq::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
::google::protobuf::int32 EmojiDownloadInfoReq::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiDownloadInfoReq.TotalLen)
  return totallen_;
}
void EmojiDownloadInfoReq::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiDownloadInfoReq.TotalLen)
}

// optional string MD5 = 4;
bool EmojiDownloadInfoReq::has_md5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmojiDownloadInfoReq::set_has_md5() {
  _has_bits_[0] |= 0x00000002u;
}
void EmojiDownloadInfoReq::clear_has_md5() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmojiDownloadInfoReq::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
const ::std::string& EmojiDownloadInfoReq::md5() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiDownloadInfoReq.MD5)
  return md5_.GetNoArena();
}
void EmojiDownloadInfoReq::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiDownloadInfoReq.MD5)
}
#if LANG_CXX11
void EmojiDownloadInfoReq::set_md5(::std::string&& value) {
  set_has_md5();
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiDownloadInfoReq.MD5)
}
#endif
void EmojiDownloadInfoReq::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiDownloadInfoReq.MD5)
}
void EmojiDownloadInfoReq::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiDownloadInfoReq.MD5)
}
::std::string* EmojiDownloadInfoReq::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiDownloadInfoReq.MD5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmojiDownloadInfoReq::release_md5() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiDownloadInfoReq.MD5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmojiDownloadInfoReq::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiDownloadInfoReq.MD5)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownloadEmojiRequest::kBaseRequestFieldNumber;
const int DownloadEmojiRequest::kEmojiItemCountFieldNumber;
const int DownloadEmojiRequest::kEmojiItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownloadEmojiRequest::DownloadEmojiRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DownloadEmojiRequest)
}
DownloadEmojiRequest::DownloadEmojiRequest(const DownloadEmojiRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      emojiitem_(from.emojiitem_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  emojiitemcount_ = from.emojiitemcount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.DownloadEmojiRequest)
}

void DownloadEmojiRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&emojiitemcount_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(emojiitemcount_));
}

DownloadEmojiRequest::~DownloadEmojiRequest() {
  // @@protoc_insertion_point(destructor:micromsg.DownloadEmojiRequest)
  SharedDtor();
}

void DownloadEmojiRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void DownloadEmojiRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadEmojiRequest::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DownloadEmojiRequest& DownloadEmojiRequest::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DownloadEmojiRequest* DownloadEmojiRequest::New(::google::protobuf::Arena* arena) const {
  DownloadEmojiRequest* n = new DownloadEmojiRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownloadEmojiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DownloadEmojiRequest)
  emojiitem_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  emojiitemcount_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DownloadEmojiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DownloadEmojiRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 EmojiItemCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_emojiitemcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emojiitemcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.EmojiDownloadInfoReq EmojiItem = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_emojiitem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DownloadEmojiRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DownloadEmojiRequest)
  return false;
#undef DO_
}

void DownloadEmojiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DownloadEmojiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required int32 EmojiItemCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->emojiitemcount(), output);
  }

  // repeated .micromsg.EmojiDownloadInfoReq EmojiItem = 3;
  for (unsigned int i = 0, n = this->emojiitem_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->emojiitem(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DownloadEmojiRequest)
}

::google::protobuf::uint8* DownloadEmojiRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DownloadEmojiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required int32 EmojiItemCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->emojiitemcount(), target);
  }

  // repeated .micromsg.EmojiDownloadInfoReq EmojiItem = 3;
  for (unsigned int i = 0, n = this->emojiitem_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->emojiitem(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DownloadEmojiRequest)
  return target;
}

size_t DownloadEmojiRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.DownloadEmojiRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_emojiitemcount()) {
    // required int32 EmojiItemCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->emojiitemcount());
  }

  return total_size;
}
size_t DownloadEmojiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DownloadEmojiRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int32 EmojiItemCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->emojiitemcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.EmojiDownloadInfoReq EmojiItem = 3;
  {
    unsigned int count = this->emojiitem_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emojiitem(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadEmojiRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DownloadEmojiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DownloadEmojiRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DownloadEmojiRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DownloadEmojiRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DownloadEmojiRequest)
    MergeFrom(*source);
  }
}

void DownloadEmojiRequest::MergeFrom(const DownloadEmojiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DownloadEmojiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emojiitem_.MergeFrom(from.emojiitem_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      emojiitemcount_ = from.emojiitemcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DownloadEmojiRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DownloadEmojiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadEmojiRequest::CopyFrom(const DownloadEmojiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DownloadEmojiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadEmojiRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->emojiitem())) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void DownloadEmojiRequest::Swap(DownloadEmojiRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownloadEmojiRequest::InternalSwap(DownloadEmojiRequest* other) {
  emojiitem_.InternalSwap(&other->emojiitem_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(emojiitemcount_, other->emojiitemcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DownloadEmojiRequest::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownloadEmojiRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool DownloadEmojiRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DownloadEmojiRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void DownloadEmojiRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void DownloadEmojiRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& DownloadEmojiRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadEmojiRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* DownloadEmojiRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadEmojiRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* DownloadEmojiRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadEmojiRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void DownloadEmojiRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadEmojiRequest.BaseRequest)
}

// required int32 EmojiItemCount = 2;
bool DownloadEmojiRequest::has_emojiitemcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DownloadEmojiRequest::set_has_emojiitemcount() {
  _has_bits_[0] |= 0x00000002u;
}
void DownloadEmojiRequest::clear_has_emojiitemcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void DownloadEmojiRequest::clear_emojiitemcount() {
  emojiitemcount_ = 0;
  clear_has_emojiitemcount();
}
::google::protobuf::int32 DownloadEmojiRequest::emojiitemcount() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadEmojiRequest.EmojiItemCount)
  return emojiitemcount_;
}
void DownloadEmojiRequest::set_emojiitemcount(::google::protobuf::int32 value) {
  set_has_emojiitemcount();
  emojiitemcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadEmojiRequest.EmojiItemCount)
}

// repeated .micromsg.EmojiDownloadInfoReq EmojiItem = 3;
int DownloadEmojiRequest::emojiitem_size() const {
  return emojiitem_.size();
}
void DownloadEmojiRequest::clear_emojiitem() {
  emojiitem_.Clear();
}
const ::micromsg::EmojiDownloadInfoReq& DownloadEmojiRequest::emojiitem(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadEmojiRequest.EmojiItem)
  return emojiitem_.Get(index);
}
::micromsg::EmojiDownloadInfoReq* DownloadEmojiRequest::mutable_emojiitem(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadEmojiRequest.EmojiItem)
  return emojiitem_.Mutable(index);
}
::micromsg::EmojiDownloadInfoReq* DownloadEmojiRequest::add_emojiitem() {
  // @@protoc_insertion_point(field_add:micromsg.DownloadEmojiRequest.EmojiItem)
  return emojiitem_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::EmojiDownloadInfoReq >*
DownloadEmojiRequest::mutable_emojiitem() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.DownloadEmojiRequest.EmojiItem)
  return &emojiitem_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiDownloadInfoReq >&
DownloadEmojiRequest::emojiitem() const {
  // @@protoc_insertion_point(field_list:micromsg.DownloadEmojiRequest.EmojiItem)
  return emojiitem_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmojiDownloadInfoResp::kRetFieldNumber;
const int EmojiDownloadInfoResp::kStartPosFieldNumber;
const int EmojiDownloadInfoResp::kTotalLenFieldNumber;
const int EmojiDownloadInfoResp::kEmojiBufferFieldNumber;
const int EmojiDownloadInfoResp::kMD5FieldNumber;
const int EmojiDownloadInfoResp::kIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmojiDownloadInfoResp::EmojiDownloadInfoResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EmojiDownloadInfoResp)
}
EmojiDownloadInfoResp::EmojiDownloadInfoResp(const EmojiDownloadInfoResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_md5()) {
    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_emojibuffer()) {
    emojibuffer_ = new ::micromsg::SKBuiltinBuffer_t(*from.emojibuffer_);
  } else {
    emojibuffer_ = NULL;
  }
  ::memcpy(&ret_, &from.ret_,
    reinterpret_cast<char*>(&totallen_) -
    reinterpret_cast<char*>(&ret_) + sizeof(totallen_));
  // @@protoc_insertion_point(copy_constructor:micromsg.EmojiDownloadInfoResp)
}

void EmojiDownloadInfoResp::SharedCtor() {
  _cached_size_ = 0;
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&emojibuffer_, 0, reinterpret_cast<char*>(&totallen_) -
    reinterpret_cast<char*>(&emojibuffer_) + sizeof(totallen_));
}

EmojiDownloadInfoResp::~EmojiDownloadInfoResp() {
  // @@protoc_insertion_point(destructor:micromsg.EmojiDownloadInfoResp)
  SharedDtor();
}

void EmojiDownloadInfoResp::SharedDtor() {
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete emojibuffer_;
  }
}

void EmojiDownloadInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmojiDownloadInfoResp::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmojiDownloadInfoResp& EmojiDownloadInfoResp::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmojiDownloadInfoResp* EmojiDownloadInfoResp::New(::google::protobuf::Arena* arena) const {
  EmojiDownloadInfoResp* n = new EmojiDownloadInfoResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmojiDownloadInfoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EmojiDownloadInfoResp)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_md5()) {
      GOOGLE_DCHECK(!md5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*md5_.UnsafeRawStringPointer())->clear();
    }
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_emojibuffer()) {
      GOOGLE_DCHECK(emojibuffer_ != NULL);
      emojibuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&ret_, 0, reinterpret_cast<char*>(&totallen_) -
      reinterpret_cast<char*>(&ret_) + sizeof(totallen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmojiDownloadInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EmojiDownloadInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 StartPos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 TotalLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t EmojiBuffer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emojibuffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MD5 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmojiDownloadInfoResp.MD5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmojiDownloadInfoResp.ID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EmojiDownloadInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EmojiDownloadInfoResp)
  return false;
#undef DO_
}

void EmojiDownloadInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EmojiDownloadInfoResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required int32 StartPos = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startpos(), output);
  }

  // required int32 TotalLen = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totallen(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t EmojiBuffer = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->emojibuffer_, output);
  }

  // optional string MD5 = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiDownloadInfoResp.MD5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->md5(), output);
  }

  // optional string ID = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiDownloadInfoResp.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EmojiDownloadInfoResp)
}

::google::protobuf::uint8* EmojiDownloadInfoResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EmojiDownloadInfoResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required int32 StartPos = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->startpos(), target);
  }

  // required int32 TotalLen = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totallen(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t EmojiBuffer = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->emojibuffer_, deterministic, target);
  }

  // optional string MD5 = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiDownloadInfoResp.MD5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->md5(), target);
  }

  // optional string ID = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmojiDownloadInfoResp.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EmojiDownloadInfoResp)
  return target;
}

size_t EmojiDownloadInfoResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.EmojiDownloadInfoResp)
  size_t total_size = 0;

  if (has_emojibuffer()) {
    // required .micromsg.SKBuiltinBuffer_t EmojiBuffer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->emojibuffer_);
  }

  if (has_ret()) {
    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_startpos()) {
    // required int32 StartPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startpos());
  }

  if (has_totallen()) {
    // required int32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totallen());
  }

  return total_size;
}
size_t EmojiDownloadInfoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EmojiDownloadInfoResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t EmojiBuffer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->emojibuffer_);

    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required int32 StartPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startpos());

    // required int32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totallen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string MD5 = 5;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

    // optional string ID = 6;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmojiDownloadInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EmojiDownloadInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  const EmojiDownloadInfoResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmojiDownloadInfoResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EmojiDownloadInfoResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EmojiDownloadInfoResp)
    MergeFrom(*source);
  }
}

void EmojiDownloadInfoResp::MergeFrom(const EmojiDownloadInfoResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EmojiDownloadInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_md5();
      md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_emojibuffer()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.emojibuffer());
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000010u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00000020u) {
      totallen_ = from.totallen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EmojiDownloadInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EmojiDownloadInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmojiDownloadInfoResp::CopyFrom(const EmojiDownloadInfoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EmojiDownloadInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmojiDownloadInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003c) != 0x0000003c) return false;
  if (has_emojibuffer()) {
    if (!this->emojibuffer_->IsInitialized()) return false;
  }
  return true;
}

void EmojiDownloadInfoResp::Swap(EmojiDownloadInfoResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmojiDownloadInfoResp::InternalSwap(EmojiDownloadInfoResp* other) {
  md5_.Swap(&other->md5_);
  id_.Swap(&other->id_);
  std::swap(emojibuffer_, other->emojibuffer_);
  std::swap(ret_, other->ret_);
  std::swap(startpos_, other->startpos_);
  std::swap(totallen_, other->totallen_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmojiDownloadInfoResp::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmojiDownloadInfoResp

// required int32 Ret = 1;
bool EmojiDownloadInfoResp::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EmojiDownloadInfoResp::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
void EmojiDownloadInfoResp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
void EmojiDownloadInfoResp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::google::protobuf::int32 EmojiDownloadInfoResp::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiDownloadInfoResp.Ret)
  return ret_;
}
void EmojiDownloadInfoResp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiDownloadInfoResp.Ret)
}

// required int32 StartPos = 2;
bool EmojiDownloadInfoResp::has_startpos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EmojiDownloadInfoResp::set_has_startpos() {
  _has_bits_[0] |= 0x00000010u;
}
void EmojiDownloadInfoResp::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000010u;
}
void EmojiDownloadInfoResp::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
::google::protobuf::int32 EmojiDownloadInfoResp::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiDownloadInfoResp.StartPos)
  return startpos_;
}
void EmojiDownloadInfoResp::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiDownloadInfoResp.StartPos)
}

// required int32 TotalLen = 3;
bool EmojiDownloadInfoResp::has_totallen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EmojiDownloadInfoResp::set_has_totallen() {
  _has_bits_[0] |= 0x00000020u;
}
void EmojiDownloadInfoResp::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000020u;
}
void EmojiDownloadInfoResp::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
::google::protobuf::int32 EmojiDownloadInfoResp::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiDownloadInfoResp.TotalLen)
  return totallen_;
}
void EmojiDownloadInfoResp::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiDownloadInfoResp.TotalLen)
}

// required .micromsg.SKBuiltinBuffer_t EmojiBuffer = 4;
bool EmojiDownloadInfoResp::has_emojibuffer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EmojiDownloadInfoResp::set_has_emojibuffer() {
  _has_bits_[0] |= 0x00000004u;
}
void EmojiDownloadInfoResp::clear_has_emojibuffer() {
  _has_bits_[0] &= ~0x00000004u;
}
void EmojiDownloadInfoResp::clear_emojibuffer() {
  if (emojibuffer_ != NULL) emojibuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_emojibuffer();
}
const ::micromsg::SKBuiltinBuffer_t& EmojiDownloadInfoResp::emojibuffer() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiDownloadInfoResp.EmojiBuffer)
  return emojibuffer_ != NULL ? *emojibuffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* EmojiDownloadInfoResp::mutable_emojibuffer() {
  set_has_emojibuffer();
  if (emojibuffer_ == NULL) {
    emojibuffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiDownloadInfoResp.EmojiBuffer)
  return emojibuffer_;
}
::micromsg::SKBuiltinBuffer_t* EmojiDownloadInfoResp::release_emojibuffer() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiDownloadInfoResp.EmojiBuffer)
  clear_has_emojibuffer();
  ::micromsg::SKBuiltinBuffer_t* temp = emojibuffer_;
  emojibuffer_ = NULL;
  return temp;
}
void EmojiDownloadInfoResp::set_allocated_emojibuffer(::micromsg::SKBuiltinBuffer_t* emojibuffer) {
  delete emojibuffer_;
  emojibuffer_ = emojibuffer;
  if (emojibuffer) {
    set_has_emojibuffer();
  } else {
    clear_has_emojibuffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiDownloadInfoResp.EmojiBuffer)
}

// optional string MD5 = 5;
bool EmojiDownloadInfoResp::has_md5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmojiDownloadInfoResp::set_has_md5() {
  _has_bits_[0] |= 0x00000001u;
}
void EmojiDownloadInfoResp::clear_has_md5() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmojiDownloadInfoResp::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
const ::std::string& EmojiDownloadInfoResp::md5() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiDownloadInfoResp.MD5)
  return md5_.GetNoArena();
}
void EmojiDownloadInfoResp::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiDownloadInfoResp.MD5)
}
#if LANG_CXX11
void EmojiDownloadInfoResp::set_md5(::std::string&& value) {
  set_has_md5();
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiDownloadInfoResp.MD5)
}
#endif
void EmojiDownloadInfoResp::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiDownloadInfoResp.MD5)
}
void EmojiDownloadInfoResp::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiDownloadInfoResp.MD5)
}
::std::string* EmojiDownloadInfoResp::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiDownloadInfoResp.MD5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmojiDownloadInfoResp::release_md5() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiDownloadInfoResp.MD5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmojiDownloadInfoResp::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiDownloadInfoResp.MD5)
}

// optional string ID = 6;
bool EmojiDownloadInfoResp::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmojiDownloadInfoResp::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void EmojiDownloadInfoResp::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmojiDownloadInfoResp::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& EmojiDownloadInfoResp::id() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiDownloadInfoResp.ID)
  return id_.GetNoArena();
}
void EmojiDownloadInfoResp::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiDownloadInfoResp.ID)
}
#if LANG_CXX11
void EmojiDownloadInfoResp::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiDownloadInfoResp.ID)
}
#endif
void EmojiDownloadInfoResp::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiDownloadInfoResp.ID)
}
void EmojiDownloadInfoResp::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiDownloadInfoResp.ID)
}
::std::string* EmojiDownloadInfoResp::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiDownloadInfoResp.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmojiDownloadInfoResp::release_id() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiDownloadInfoResp.ID)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmojiDownloadInfoResp::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiDownloadInfoResp.ID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownloadEmojiResponse::kBaseResponseFieldNumber;
const int DownloadEmojiResponse::kEmojiItemCountFieldNumber;
const int DownloadEmojiResponse::kEmojiItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownloadEmojiResponse::DownloadEmojiResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DownloadEmojiResponse)
}
DownloadEmojiResponse::DownloadEmojiResponse(const DownloadEmojiResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      emojiitem_(from.emojiitem_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  emojiitemcount_ = from.emojiitemcount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.DownloadEmojiResponse)
}

void DownloadEmojiResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&emojiitemcount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(emojiitemcount_));
}

DownloadEmojiResponse::~DownloadEmojiResponse() {
  // @@protoc_insertion_point(destructor:micromsg.DownloadEmojiResponse)
  SharedDtor();
}

void DownloadEmojiResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void DownloadEmojiResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadEmojiResponse::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DownloadEmojiResponse& DownloadEmojiResponse::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DownloadEmojiResponse* DownloadEmojiResponse::New(::google::protobuf::Arena* arena) const {
  DownloadEmojiResponse* n = new DownloadEmojiResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownloadEmojiResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DownloadEmojiResponse)
  emojiitem_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  emojiitemcount_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DownloadEmojiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DownloadEmojiResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 EmojiItemCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_emojiitemcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emojiitemcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.EmojiDownloadInfoResp EmojiItem = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_emojiitem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DownloadEmojiResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DownloadEmojiResponse)
  return false;
#undef DO_
}

void DownloadEmojiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DownloadEmojiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 EmojiItemCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->emojiitemcount(), output);
  }

  // repeated .micromsg.EmojiDownloadInfoResp EmojiItem = 3;
  for (unsigned int i = 0, n = this->emojiitem_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->emojiitem(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DownloadEmojiResponse)
}

::google::protobuf::uint8* DownloadEmojiResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DownloadEmojiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 EmojiItemCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->emojiitemcount(), target);
  }

  // repeated .micromsg.EmojiDownloadInfoResp EmojiItem = 3;
  for (unsigned int i = 0, n = this->emojiitem_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->emojiitem(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DownloadEmojiResponse)
  return target;
}

size_t DownloadEmojiResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.DownloadEmojiResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_emojiitemcount()) {
    // required int32 EmojiItemCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->emojiitemcount());
  }

  return total_size;
}
size_t DownloadEmojiResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DownloadEmojiResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required int32 EmojiItemCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->emojiitemcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.EmojiDownloadInfoResp EmojiItem = 3;
  {
    unsigned int count = this->emojiitem_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emojiitem(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadEmojiResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DownloadEmojiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DownloadEmojiResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DownloadEmojiResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DownloadEmojiResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DownloadEmojiResponse)
    MergeFrom(*source);
  }
}

void DownloadEmojiResponse::MergeFrom(const DownloadEmojiResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DownloadEmojiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emojiitem_.MergeFrom(from.emojiitem_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      emojiitemcount_ = from.emojiitemcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DownloadEmojiResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DownloadEmojiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadEmojiResponse::CopyFrom(const DownloadEmojiResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DownloadEmojiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadEmojiResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->emojiitem())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void DownloadEmojiResponse::Swap(DownloadEmojiResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownloadEmojiResponse::InternalSwap(DownloadEmojiResponse* other) {
  emojiitem_.InternalSwap(&other->emojiitem_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(emojiitemcount_, other->emojiitemcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DownloadEmojiResponse::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownloadEmojiResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool DownloadEmojiResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DownloadEmojiResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void DownloadEmojiResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void DownloadEmojiResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& DownloadEmojiResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadEmojiResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* DownloadEmojiResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadEmojiResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* DownloadEmojiResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadEmojiResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void DownloadEmojiResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadEmojiResponse.BaseResponse)
}

// required int32 EmojiItemCount = 2;
bool DownloadEmojiResponse::has_emojiitemcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DownloadEmojiResponse::set_has_emojiitemcount() {
  _has_bits_[0] |= 0x00000002u;
}
void DownloadEmojiResponse::clear_has_emojiitemcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void DownloadEmojiResponse::clear_emojiitemcount() {
  emojiitemcount_ = 0;
  clear_has_emojiitemcount();
}
::google::protobuf::int32 DownloadEmojiResponse::emojiitemcount() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadEmojiResponse.EmojiItemCount)
  return emojiitemcount_;
}
void DownloadEmojiResponse::set_emojiitemcount(::google::protobuf::int32 value) {
  set_has_emojiitemcount();
  emojiitemcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadEmojiResponse.EmojiItemCount)
}

// repeated .micromsg.EmojiDownloadInfoResp EmojiItem = 3;
int DownloadEmojiResponse::emojiitem_size() const {
  return emojiitem_.size();
}
void DownloadEmojiResponse::clear_emojiitem() {
  emojiitem_.Clear();
}
const ::micromsg::EmojiDownloadInfoResp& DownloadEmojiResponse::emojiitem(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadEmojiResponse.EmojiItem)
  return emojiitem_.Get(index);
}
::micromsg::EmojiDownloadInfoResp* DownloadEmojiResponse::mutable_emojiitem(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadEmojiResponse.EmojiItem)
  return emojiitem_.Mutable(index);
}
::micromsg::EmojiDownloadInfoResp* DownloadEmojiResponse::add_emojiitem() {
  // @@protoc_insertion_point(field_add:micromsg.DownloadEmojiResponse.EmojiItem)
  return emojiitem_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::EmojiDownloadInfoResp >*
DownloadEmojiResponse::mutable_emojiitem() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.DownloadEmojiResponse.EmojiItem)
  return &emojiitem_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiDownloadInfoResp >&
DownloadEmojiResponse::emojiitem() const {
  // @@protoc_insertion_point(field_list:micromsg.DownloadEmojiResponse.EmojiItem)
  return emojiitem_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownloadVoiceRequest::kMsgIdFieldNumber;
const int DownloadVoiceRequest::kOffsetFieldNumber;
const int DownloadVoiceRequest::kLengthFieldNumber;
const int DownloadVoiceRequest::kClientMsgIdFieldNumber;
const int DownloadVoiceRequest::kBaseRequestFieldNumber;
const int DownloadVoiceRequest::kNewMsgIdFieldNumber;
const int DownloadVoiceRequest::kChatRoomNameFieldNumber;
const int DownloadVoiceRequest::kMasterBufIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownloadVoiceRequest::DownloadVoiceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DownloadVoiceRequest)
}
DownloadVoiceRequest::DownloadVoiceRequest(const DownloadVoiceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientmsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientmsgid()) {
    clientmsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientmsgid_);
  }
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomname()) {
    chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&msgid_, &from.msgid_,
    reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&msgid_) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:micromsg.DownloadVoiceRequest)
}

void DownloadVoiceRequest::SharedCtor() {
  _cached_size_ = 0;
  clientmsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(length_));
}

DownloadVoiceRequest::~DownloadVoiceRequest() {
  // @@protoc_insertion_point(destructor:micromsg.DownloadVoiceRequest)
  SharedDtor();
}

void DownloadVoiceRequest::SharedDtor() {
  clientmsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatroomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void DownloadVoiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadVoiceRequest::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DownloadVoiceRequest& DownloadVoiceRequest::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DownloadVoiceRequest* DownloadVoiceRequest::New(::google::protobuf::Arena* arena) const {
  DownloadVoiceRequest* n = new DownloadVoiceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownloadVoiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DownloadVoiceRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_clientmsgid()) {
      GOOGLE_DCHECK(!clientmsgid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientmsgid_.UnsafeRawStringPointer())->clear();
    }
    if (has_chatroomname()) {
      GOOGLE_DCHECK(!chatroomname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomname_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&msgid_, 0, reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&msgid_) + sizeof(length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DownloadVoiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DownloadVoiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MsgId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientMsgId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientmsgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientmsgid().data(), this->clientmsgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.DownloadVoiceRequest.ClientMsgId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.BaseRequest BaseRequest = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 NewMsgId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_newmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ChatRoomName = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomname().data(), this->chatroomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.DownloadVoiceRequest.ChatRoomName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 MasterBufId = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_masterbufid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterbufid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DownloadVoiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DownloadVoiceRequest)
  return false;
#undef DO_
}

void DownloadVoiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DownloadVoiceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 MsgId = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // required uint32 Offset = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

  // required uint32 Length = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->length(), output);
  }

  // optional string ClientMsgId = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientmsgid().data(), this->clientmsgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DownloadVoiceRequest.ClientMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->clientmsgid(), output);
  }

  // required .micromsg.BaseRequest BaseRequest = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->baserequest_, output);
  }

  // optional uint64 NewMsgId = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->newmsgid(), output);
  }

  // optional string ChatRoomName = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DownloadVoiceRequest.ChatRoomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->chatroomname(), output);
  }

  // optional uint64 MasterBufId = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->masterbufid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DownloadVoiceRequest)
}

::google::protobuf::uint8* DownloadVoiceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DownloadVoiceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 MsgId = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }

  // required uint32 Offset = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->offset(), target);
  }

  // required uint32 Length = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->length(), target);
  }

  // optional string ClientMsgId = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientmsgid().data(), this->clientmsgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DownloadVoiceRequest.ClientMsgId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->clientmsgid(), target);
  }

  // required .micromsg.BaseRequest BaseRequest = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->baserequest_, deterministic, target);
  }

  // optional uint64 NewMsgId = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->newmsgid(), target);
  }

  // optional string ChatRoomName = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DownloadVoiceRequest.ChatRoomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->chatroomname(), target);
  }

  // optional uint64 MasterBufId = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->masterbufid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DownloadVoiceRequest)
  return target;
}

size_t DownloadVoiceRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.DownloadVoiceRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_msgid()) {
    // required uint32 MsgId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  if (has_offset()) {
    // required uint32 Offset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  if (has_length()) {
    // required uint32 Length = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  return total_size;
}
size_t DownloadVoiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DownloadVoiceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000009c) ^ 0x0000009c) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 MsgId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());

    // required uint32 Offset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());

    // required uint32 Length = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ClientMsgId = 4;
    if (has_clientmsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientmsgid());
    }

    // optional string ChatRoomName = 7;
    if (has_chatroomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatroomname());
    }

  }
  if (_has_bits_[0 / 32] & 96u) {
    // optional uint64 NewMsgId = 6;
    if (has_newmsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->newmsgid());
    }

    // optional uint64 MasterBufId = 8;
    if (has_masterbufid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterbufid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadVoiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DownloadVoiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DownloadVoiceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DownloadVoiceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DownloadVoiceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DownloadVoiceRequest)
    MergeFrom(*source);
  }
}

void DownloadVoiceRequest::MergeFrom(const DownloadVoiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DownloadVoiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientmsgid();
      clientmsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientmsgid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_chatroomname();
      chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x00000010u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000020u) {
      newmsgid_ = from.newmsgid_;
    }
    if (cached_has_bits & 0x00000040u) {
      masterbufid_ = from.masterbufid_;
    }
    if (cached_has_bits & 0x00000080u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DownloadVoiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DownloadVoiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadVoiceRequest::CopyFrom(const DownloadVoiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DownloadVoiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadVoiceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000009c) != 0x0000009c) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void DownloadVoiceRequest::Swap(DownloadVoiceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownloadVoiceRequest::InternalSwap(DownloadVoiceRequest* other) {
  clientmsgid_.Swap(&other->clientmsgid_);
  chatroomname_.Swap(&other->chatroomname_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(msgid_, other->msgid_);
  std::swap(offset_, other->offset_);
  std::swap(newmsgid_, other->newmsgid_);
  std::swap(masterbufid_, other->masterbufid_);
  std::swap(length_, other->length_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DownloadVoiceRequest::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownloadVoiceRequest

// required uint32 MsgId = 1;
bool DownloadVoiceRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DownloadVoiceRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000008u;
}
void DownloadVoiceRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000008u;
}
void DownloadVoiceRequest::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
::google::protobuf::uint32 DownloadVoiceRequest::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceRequest.MsgId)
  return msgid_;
}
void DownloadVoiceRequest::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceRequest.MsgId)
}

// required uint32 Offset = 2;
bool DownloadVoiceRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DownloadVoiceRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000010u;
}
void DownloadVoiceRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
void DownloadVoiceRequest::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
::google::protobuf::uint32 DownloadVoiceRequest::offset() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceRequest.Offset)
  return offset_;
}
void DownloadVoiceRequest::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceRequest.Offset)
}

// required uint32 Length = 3;
bool DownloadVoiceRequest::has_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DownloadVoiceRequest::set_has_length() {
  _has_bits_[0] |= 0x00000080u;
}
void DownloadVoiceRequest::clear_has_length() {
  _has_bits_[0] &= ~0x00000080u;
}
void DownloadVoiceRequest::clear_length() {
  length_ = 0u;
  clear_has_length();
}
::google::protobuf::uint32 DownloadVoiceRequest::length() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceRequest.Length)
  return length_;
}
void DownloadVoiceRequest::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceRequest.Length)
}

// optional string ClientMsgId = 4;
bool DownloadVoiceRequest::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DownloadVoiceRequest::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000001u;
}
void DownloadVoiceRequest::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000001u;
}
void DownloadVoiceRequest::clear_clientmsgid() {
  clientmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientmsgid();
}
const ::std::string& DownloadVoiceRequest::clientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceRequest.ClientMsgId)
  return clientmsgid_.GetNoArena();
}
void DownloadVoiceRequest::set_clientmsgid(const ::std::string& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceRequest.ClientMsgId)
}
#if LANG_CXX11
void DownloadVoiceRequest::set_clientmsgid(::std::string&& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DownloadVoiceRequest.ClientMsgId)
}
#endif
void DownloadVoiceRequest::set_clientmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DownloadVoiceRequest.ClientMsgId)
}
void DownloadVoiceRequest::set_clientmsgid(const char* value, size_t size) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DownloadVoiceRequest.ClientMsgId)
}
::std::string* DownloadVoiceRequest::mutable_clientmsgid() {
  set_has_clientmsgid();
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadVoiceRequest.ClientMsgId)
  return clientmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DownloadVoiceRequest::release_clientmsgid() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadVoiceRequest.ClientMsgId)
  clear_has_clientmsgid();
  return clientmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadVoiceRequest::set_allocated_clientmsgid(::std::string* clientmsgid) {
  if (clientmsgid != NULL) {
    set_has_clientmsgid();
  } else {
    clear_has_clientmsgid();
  }
  clientmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientmsgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadVoiceRequest.ClientMsgId)
}

// required .micromsg.BaseRequest BaseRequest = 5;
bool DownloadVoiceRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DownloadVoiceRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void DownloadVoiceRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void DownloadVoiceRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& DownloadVoiceRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* DownloadVoiceRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadVoiceRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* DownloadVoiceRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadVoiceRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void DownloadVoiceRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadVoiceRequest.BaseRequest)
}

// optional uint64 NewMsgId = 6;
bool DownloadVoiceRequest::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DownloadVoiceRequest::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000020u;
}
void DownloadVoiceRequest::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000020u;
}
void DownloadVoiceRequest::clear_newmsgid() {
  newmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_newmsgid();
}
::google::protobuf::uint64 DownloadVoiceRequest::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceRequest.NewMsgId)
  return newmsgid_;
}
void DownloadVoiceRequest::set_newmsgid(::google::protobuf::uint64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceRequest.NewMsgId)
}

// optional string ChatRoomName = 7;
bool DownloadVoiceRequest::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DownloadVoiceRequest::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000002u;
}
void DownloadVoiceRequest::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000002u;
}
void DownloadVoiceRequest::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
const ::std::string& DownloadVoiceRequest::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceRequest.ChatRoomName)
  return chatroomname_.GetNoArena();
}
void DownloadVoiceRequest::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceRequest.ChatRoomName)
}
#if LANG_CXX11
void DownloadVoiceRequest::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DownloadVoiceRequest.ChatRoomName)
}
#endif
void DownloadVoiceRequest::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DownloadVoiceRequest.ChatRoomName)
}
void DownloadVoiceRequest::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DownloadVoiceRequest.ChatRoomName)
}
::std::string* DownloadVoiceRequest::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadVoiceRequest.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DownloadVoiceRequest::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadVoiceRequest.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadVoiceRequest::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadVoiceRequest.ChatRoomName)
}

// optional uint64 MasterBufId = 8;
bool DownloadVoiceRequest::has_masterbufid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DownloadVoiceRequest::set_has_masterbufid() {
  _has_bits_[0] |= 0x00000040u;
}
void DownloadVoiceRequest::clear_has_masterbufid() {
  _has_bits_[0] &= ~0x00000040u;
}
void DownloadVoiceRequest::clear_masterbufid() {
  masterbufid_ = GOOGLE_ULONGLONG(0);
  clear_has_masterbufid();
}
::google::protobuf::uint64 DownloadVoiceRequest::masterbufid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceRequest.MasterBufId)
  return masterbufid_;
}
void DownloadVoiceRequest::set_masterbufid(::google::protobuf::uint64 value) {
  set_has_masterbufid();
  masterbufid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceRequest.MasterBufId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownloadVoiceResponse::kMsgIdFieldNumber;
const int DownloadVoiceResponse::kOffsetFieldNumber;
const int DownloadVoiceResponse::kLengthFieldNumber;
const int DownloadVoiceResponse::kVoiceLengthFieldNumber;
const int DownloadVoiceResponse::kClientMsgIdFieldNumber;
const int DownloadVoiceResponse::kDataFieldNumber;
const int DownloadVoiceResponse::kEndFlagFieldNumber;
const int DownloadVoiceResponse::kBaseResponseFieldNumber;
const int DownloadVoiceResponse::kCancelFlagFieldNumber;
const int DownloadVoiceResponse::kNewMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownloadVoiceResponse::DownloadVoiceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DownloadVoiceResponse)
}
DownloadVoiceResponse::DownloadVoiceResponse(const DownloadVoiceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientmsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientmsgid()) {
    clientmsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientmsgid_);
  }
  if (from.has_data()) {
    data_ = new ::micromsg::SKBuiltinBuffer_t(*from.data_);
  } else {
    data_ = NULL;
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&msgid_, &from.msgid_,
    reinterpret_cast<char*>(&newmsgid_) -
    reinterpret_cast<char*>(&msgid_) + sizeof(newmsgid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.DownloadVoiceResponse)
}

void DownloadVoiceResponse::SharedCtor() {
  _cached_size_ = 0;
  clientmsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, reinterpret_cast<char*>(&newmsgid_) -
    reinterpret_cast<char*>(&data_) + sizeof(newmsgid_));
}

DownloadVoiceResponse::~DownloadVoiceResponse() {
  // @@protoc_insertion_point(destructor:micromsg.DownloadVoiceResponse)
  SharedDtor();
}

void DownloadVoiceResponse::SharedDtor() {
  clientmsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete data_;
  }
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void DownloadVoiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadVoiceResponse::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DownloadVoiceResponse& DownloadVoiceResponse::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DownloadVoiceResponse* DownloadVoiceResponse::New(::google::protobuf::Arena* arena) const {
  DownloadVoiceResponse* n = new DownloadVoiceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownloadVoiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DownloadVoiceResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_clientmsgid()) {
      GOOGLE_DCHECK(!clientmsgid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientmsgid_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&msgid_, 0, reinterpret_cast<char*>(&endflag_) -
      reinterpret_cast<char*>(&msgid_) + sizeof(endflag_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&cancelflag_, 0, reinterpret_cast<char*>(&newmsgid_) -
      reinterpret_cast<char*>(&cancelflag_) + sizeof(newmsgid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DownloadVoiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DownloadVoiceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MsgId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 VoiceLength = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_voicelength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voicelength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientMsgId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientmsgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientmsgid().data(), this->clientmsgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.DownloadVoiceResponse.ClientMsgId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 EndFlag = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_endflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.BaseResponse BaseResponse = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CancelFlag = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_cancelflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cancelflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 NewMsgId = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_newmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DownloadVoiceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DownloadVoiceResponse)
  return false;
#undef DO_
}

void DownloadVoiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DownloadVoiceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 MsgId = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // required uint32 Offset = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

  // required uint32 Length = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->length(), output);
  }

  // required uint32 VoiceLength = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->voicelength(), output);
  }

  // optional string ClientMsgId = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientmsgid().data(), this->clientmsgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DownloadVoiceResponse.ClientMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->clientmsgid(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->data_, output);
  }

  // required uint32 EndFlag = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->endflag(), output);
  }

  // required .micromsg.BaseResponse BaseResponse = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->baseresponse_, output);
  }

  // optional uint32 CancelFlag = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cancelflag(), output);
  }

  // optional uint64 NewMsgId = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->newmsgid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DownloadVoiceResponse)
}

::google::protobuf::uint8* DownloadVoiceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DownloadVoiceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 MsgId = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }

  // required uint32 Offset = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->offset(), target);
  }

  // required uint32 Length = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->length(), target);
  }

  // required uint32 VoiceLength = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->voicelength(), target);
  }

  // optional string ClientMsgId = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientmsgid().data(), this->clientmsgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DownloadVoiceResponse.ClientMsgId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->clientmsgid(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->data_, deterministic, target);
  }

  // required uint32 EndFlag = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->endflag(), target);
  }

  // required .micromsg.BaseResponse BaseResponse = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->baseresponse_, deterministic, target);
  }

  // optional uint32 CancelFlag = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->cancelflag(), target);
  }

  // optional uint64 NewMsgId = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->newmsgid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DownloadVoiceResponse)
  return target;
}

size_t DownloadVoiceResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.DownloadVoiceResponse)
  size_t total_size = 0;

  if (has_data()) {
    // required .micromsg.SKBuiltinBuffer_t Data = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_msgid()) {
    // required uint32 MsgId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  if (has_offset()) {
    // required uint32 Offset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  if (has_length()) {
    // required uint32 Length = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  if (has_voicelength()) {
    // required uint32 VoiceLength = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->voicelength());
  }

  if (has_endflag()) {
    // required uint32 EndFlag = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());
  }

  return total_size;
}
size_t DownloadVoiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DownloadVoiceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000fe) ^ 0x000000fe) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t Data = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);

    // required .micromsg.BaseResponse BaseResponse = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 MsgId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());

    // required uint32 Offset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());

    // required uint32 Length = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());

    // required uint32 VoiceLength = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->voicelength());

    // required uint32 EndFlag = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string ClientMsgId = 6;
  if (has_clientmsgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientmsgid());
  }

  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 CancelFlag = 10;
    if (has_cancelflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cancelflag());
    }

    // optional uint64 NewMsgId = 11;
    if (has_newmsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->newmsgid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadVoiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DownloadVoiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DownloadVoiceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DownloadVoiceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DownloadVoiceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DownloadVoiceResponse)
    MergeFrom(*source);
  }
}

void DownloadVoiceResponse::MergeFrom(const DownloadVoiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DownloadVoiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientmsgid();
      clientmsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientmsgid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_data()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000008u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x00000010u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000020u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000040u) {
      voicelength_ = from.voicelength_;
    }
    if (cached_has_bits & 0x00000080u) {
      endflag_ = from.endflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      cancelflag_ = from.cancelflag_;
    }
    if (cached_has_bits & 0x00000200u) {
      newmsgid_ = from.newmsgid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DownloadVoiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DownloadVoiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadVoiceResponse::CopyFrom(const DownloadVoiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DownloadVoiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadVoiceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fe) != 0x000000fe) return false;
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void DownloadVoiceResponse::Swap(DownloadVoiceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownloadVoiceResponse::InternalSwap(DownloadVoiceResponse* other) {
  clientmsgid_.Swap(&other->clientmsgid_);
  std::swap(data_, other->data_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(msgid_, other->msgid_);
  std::swap(offset_, other->offset_);
  std::swap(length_, other->length_);
  std::swap(voicelength_, other->voicelength_);
  std::swap(endflag_, other->endflag_);
  std::swap(cancelflag_, other->cancelflag_);
  std::swap(newmsgid_, other->newmsgid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DownloadVoiceResponse::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownloadVoiceResponse

// required uint32 MsgId = 1;
bool DownloadVoiceResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DownloadVoiceResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000008u;
}
void DownloadVoiceResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000008u;
}
void DownloadVoiceResponse::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
::google::protobuf::uint32 DownloadVoiceResponse::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceResponse.MsgId)
  return msgid_;
}
void DownloadVoiceResponse::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceResponse.MsgId)
}

// required uint32 Offset = 2;
bool DownloadVoiceResponse::has_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DownloadVoiceResponse::set_has_offset() {
  _has_bits_[0] |= 0x00000010u;
}
void DownloadVoiceResponse::clear_has_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
void DownloadVoiceResponse::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
::google::protobuf::uint32 DownloadVoiceResponse::offset() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceResponse.Offset)
  return offset_;
}
void DownloadVoiceResponse::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceResponse.Offset)
}

// required uint32 Length = 3;
bool DownloadVoiceResponse::has_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DownloadVoiceResponse::set_has_length() {
  _has_bits_[0] |= 0x00000020u;
}
void DownloadVoiceResponse::clear_has_length() {
  _has_bits_[0] &= ~0x00000020u;
}
void DownloadVoiceResponse::clear_length() {
  length_ = 0u;
  clear_has_length();
}
::google::protobuf::uint32 DownloadVoiceResponse::length() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceResponse.Length)
  return length_;
}
void DownloadVoiceResponse::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceResponse.Length)
}

// required uint32 VoiceLength = 5;
bool DownloadVoiceResponse::has_voicelength() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DownloadVoiceResponse::set_has_voicelength() {
  _has_bits_[0] |= 0x00000040u;
}
void DownloadVoiceResponse::clear_has_voicelength() {
  _has_bits_[0] &= ~0x00000040u;
}
void DownloadVoiceResponse::clear_voicelength() {
  voicelength_ = 0u;
  clear_has_voicelength();
}
::google::protobuf::uint32 DownloadVoiceResponse::voicelength() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceResponse.VoiceLength)
  return voicelength_;
}
void DownloadVoiceResponse::set_voicelength(::google::protobuf::uint32 value) {
  set_has_voicelength();
  voicelength_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceResponse.VoiceLength)
}

// optional string ClientMsgId = 6;
bool DownloadVoiceResponse::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DownloadVoiceResponse::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000001u;
}
void DownloadVoiceResponse::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000001u;
}
void DownloadVoiceResponse::clear_clientmsgid() {
  clientmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientmsgid();
}
const ::std::string& DownloadVoiceResponse::clientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceResponse.ClientMsgId)
  return clientmsgid_.GetNoArena();
}
void DownloadVoiceResponse::set_clientmsgid(const ::std::string& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceResponse.ClientMsgId)
}
#if LANG_CXX11
void DownloadVoiceResponse::set_clientmsgid(::std::string&& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DownloadVoiceResponse.ClientMsgId)
}
#endif
void DownloadVoiceResponse::set_clientmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DownloadVoiceResponse.ClientMsgId)
}
void DownloadVoiceResponse::set_clientmsgid(const char* value, size_t size) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DownloadVoiceResponse.ClientMsgId)
}
::std::string* DownloadVoiceResponse::mutable_clientmsgid() {
  set_has_clientmsgid();
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadVoiceResponse.ClientMsgId)
  return clientmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DownloadVoiceResponse::release_clientmsgid() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadVoiceResponse.ClientMsgId)
  clear_has_clientmsgid();
  return clientmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadVoiceResponse::set_allocated_clientmsgid(::std::string* clientmsgid) {
  if (clientmsgid != NULL) {
    set_has_clientmsgid();
  } else {
    clear_has_clientmsgid();
  }
  clientmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientmsgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadVoiceResponse.ClientMsgId)
}

// required .micromsg.SKBuiltinBuffer_t Data = 7;
bool DownloadVoiceResponse::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DownloadVoiceResponse::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void DownloadVoiceResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void DownloadVoiceResponse::clear_data() {
  if (data_ != NULL) data_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_data();
}
const ::micromsg::SKBuiltinBuffer_t& DownloadVoiceResponse::data() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceResponse.Data)
  return data_ != NULL ? *data_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* DownloadVoiceResponse::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadVoiceResponse.Data)
  return data_;
}
::micromsg::SKBuiltinBuffer_t* DownloadVoiceResponse::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadVoiceResponse.Data)
  clear_has_data();
  ::micromsg::SKBuiltinBuffer_t* temp = data_;
  data_ = NULL;
  return temp;
}
void DownloadVoiceResponse::set_allocated_data(::micromsg::SKBuiltinBuffer_t* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadVoiceResponse.Data)
}

// required uint32 EndFlag = 8;
bool DownloadVoiceResponse::has_endflag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DownloadVoiceResponse::set_has_endflag() {
  _has_bits_[0] |= 0x00000080u;
}
void DownloadVoiceResponse::clear_has_endflag() {
  _has_bits_[0] &= ~0x00000080u;
}
void DownloadVoiceResponse::clear_endflag() {
  endflag_ = 0u;
  clear_has_endflag();
}
::google::protobuf::uint32 DownloadVoiceResponse::endflag() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceResponse.EndFlag)
  return endflag_;
}
void DownloadVoiceResponse::set_endflag(::google::protobuf::uint32 value) {
  set_has_endflag();
  endflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceResponse.EndFlag)
}

// required .micromsg.BaseResponse BaseResponse = 9;
bool DownloadVoiceResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DownloadVoiceResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void DownloadVoiceResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void DownloadVoiceResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& DownloadVoiceResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* DownloadVoiceResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadVoiceResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* DownloadVoiceResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadVoiceResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void DownloadVoiceResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadVoiceResponse.BaseResponse)
}

// optional uint32 CancelFlag = 10;
bool DownloadVoiceResponse::has_cancelflag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DownloadVoiceResponse::set_has_cancelflag() {
  _has_bits_[0] |= 0x00000100u;
}
void DownloadVoiceResponse::clear_has_cancelflag() {
  _has_bits_[0] &= ~0x00000100u;
}
void DownloadVoiceResponse::clear_cancelflag() {
  cancelflag_ = 0u;
  clear_has_cancelflag();
}
::google::protobuf::uint32 DownloadVoiceResponse::cancelflag() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceResponse.CancelFlag)
  return cancelflag_;
}
void DownloadVoiceResponse::set_cancelflag(::google::protobuf::uint32 value) {
  set_has_cancelflag();
  cancelflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceResponse.CancelFlag)
}

// optional uint64 NewMsgId = 11;
bool DownloadVoiceResponse::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DownloadVoiceResponse::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000200u;
}
void DownloadVoiceResponse::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000200u;
}
void DownloadVoiceResponse::clear_newmsgid() {
  newmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_newmsgid();
}
::google::protobuf::uint64 DownloadVoiceResponse::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceResponse.NewMsgId)
  return newmsgid_;
}
void DownloadVoiceResponse::set_newmsgid(::google::protobuf::uint64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceResponse.NewMsgId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadMsgImgRequest::kBaseRequestFieldNumber;
const int UploadMsgImgRequest::kClientImgIdFieldNumber;
const int UploadMsgImgRequest::kFromUserNameFieldNumber;
const int UploadMsgImgRequest::kToUserNameFieldNumber;
const int UploadMsgImgRequest::kTotalLenFieldNumber;
const int UploadMsgImgRequest::kStartPosFieldNumber;
const int UploadMsgImgRequest::kDataLenFieldNumber;
const int UploadMsgImgRequest::kDataFieldNumber;
const int UploadMsgImgRequest::kMsgTypeFieldNumber;
const int UploadMsgImgRequest::kMsgSourceFieldNumber;
const int UploadMsgImgRequest::kCompressTypeFieldNumber;
const int UploadMsgImgRequest::kNetTypeFieldNumber;
const int UploadMsgImgRequest::kPhotoFromFieldNumber;
const int UploadMsgImgRequest::kMediaIdFieldNumber;
const int UploadMsgImgRequest::kCDNBigImgUrlFieldNumber;
const int UploadMsgImgRequest::kCDNMidImgUrlFieldNumber;
const int UploadMsgImgRequest::kAESKeyFieldNumber;
const int UploadMsgImgRequest::kEncryVerFieldNumber;
const int UploadMsgImgRequest::kCDNBigImgSizeFieldNumber;
const int UploadMsgImgRequest::kCDNMidImgSizeFieldNumber;
const int UploadMsgImgRequest::kCDNThumbImgUrlFieldNumber;
const int UploadMsgImgRequest::kCDNThumbImgSizeFieldNumber;
const int UploadMsgImgRequest::kCDNThumbImgHeightFieldNumber;
const int UploadMsgImgRequest::kCDNThumbImgWidthFieldNumber;
const int UploadMsgImgRequest::kCDNThumbAESKeyFieldNumber;
const int UploadMsgImgRequest::kReqTimeFieldNumber;
const int UploadMsgImgRequest::kMd5FieldNumber;
const int UploadMsgImgRequest::kCRC32FieldNumber;
const int UploadMsgImgRequest::kMsgForwardTypeFieldNumber;
const int UploadMsgImgRequest::kHitMd5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadMsgImgRequest::UploadMsgImgRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UploadMsgImgRequest)
}
UploadMsgImgRequest::UploadMsgImgRequest(const UploadMsgImgRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msgsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msgsource()) {
    msgsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgsource_);
  }
  mediaid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mediaid()) {
    mediaid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mediaid_);
  }
  cdnbigimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cdnbigimgurl()) {
    cdnbigimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdnbigimgurl_);
  }
  cdnmidimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cdnmidimgurl()) {
    cdnmidimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdnmidimgurl_);
  }
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_aeskey()) {
    aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
  }
  cdnthumbimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cdnthumbimgurl()) {
    cdnthumbimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdnthumbimgurl_);
  }
  cdnthumbaeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cdnthumbaeskey()) {
    cdnthumbaeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdnthumbaeskey_);
  }
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_md5()) {
    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_clientimgid()) {
    clientimgid_ = new ::micromsg::SKBuiltinString_t(*from.clientimgid_);
  } else {
    clientimgid_ = NULL;
  }
  if (from.has_fromusername()) {
    fromusername_ = new ::micromsg::SKBuiltinString_t(*from.fromusername_);
  } else {
    fromusername_ = NULL;
  }
  if (from.has_tousername()) {
    tousername_ = new ::micromsg::SKBuiltinString_t(*from.tousername_);
  } else {
    tousername_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::micromsg::SKBuiltinBuffer_t(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&totallen_, &from.totallen_,
    reinterpret_cast<char*>(&hitmd5_) -
    reinterpret_cast<char*>(&totallen_) + sizeof(hitmd5_));
  // @@protoc_insertion_point(copy_constructor:micromsg.UploadMsgImgRequest)
}

void UploadMsgImgRequest::SharedCtor() {
  _cached_size_ = 0;
  msgsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mediaid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdnbigimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdnmidimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdnthumbimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdnthumbaeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&hitmd5_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(hitmd5_));
}

UploadMsgImgRequest::~UploadMsgImgRequest() {
  // @@protoc_insertion_point(destructor:micromsg.UploadMsgImgRequest)
  SharedDtor();
}

void UploadMsgImgRequest::SharedDtor() {
  msgsource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mediaid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdnbigimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdnmidimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdnthumbimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdnthumbaeskey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete clientimgid_;
  }
  if (this != internal_default_instance()) {
    delete fromusername_;
  }
  if (this != internal_default_instance()) {
    delete tousername_;
  }
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void UploadMsgImgRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadMsgImgRequest::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UploadMsgImgRequest& UploadMsgImgRequest::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

UploadMsgImgRequest* UploadMsgImgRequest::New(::google::protobuf::Arena* arena) const {
  UploadMsgImgRequest* n = new UploadMsgImgRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadMsgImgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UploadMsgImgRequest)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_msgsource()) {
      GOOGLE_DCHECK(!msgsource_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msgsource_.UnsafeRawStringPointer())->clear();
    }
    if (has_mediaid()) {
      GOOGLE_DCHECK(!mediaid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mediaid_.UnsafeRawStringPointer())->clear();
    }
    if (has_cdnbigimgurl()) {
      GOOGLE_DCHECK(!cdnbigimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cdnbigimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_cdnmidimgurl()) {
      GOOGLE_DCHECK(!cdnmidimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cdnmidimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_aeskey()) {
      GOOGLE_DCHECK(!aeskey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*aeskey_.UnsafeRawStringPointer())->clear();
    }
    if (has_cdnthumbimgurl()) {
      GOOGLE_DCHECK(!cdnthumbimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cdnthumbimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_cdnthumbaeskey()) {
      GOOGLE_DCHECK(!cdnthumbaeskey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cdnthumbaeskey_.UnsafeRawStringPointer())->clear();
    }
    if (has_md5()) {
      GOOGLE_DCHECK(!md5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*md5_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_clientimgid()) {
      GOOGLE_DCHECK(clientimgid_ != NULL);
      clientimgid_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_fromusername()) {
      GOOGLE_DCHECK(fromusername_ != NULL);
      fromusername_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_tousername()) {
      GOOGLE_DCHECK(tousername_ != NULL);
      tousername_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 57344u) {
    ::memset(&totallen_, 0, reinterpret_cast<char*>(&datalen_) -
      reinterpret_cast<char*>(&totallen_) + sizeof(datalen_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&msgtype_, 0, reinterpret_cast<char*>(&cdnthumbimgsize_) -
      reinterpret_cast<char*>(&msgtype_) + sizeof(cdnthumbimgsize_));
  }
  if (_has_bits_[24 / 32] & 1056964608u) {
    ::memset(&cdnthumbimgheight_, 0, reinterpret_cast<char*>(&hitmd5_) -
      reinterpret_cast<char*>(&cdnthumbimgheight_) + sizeof(hitmd5_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UploadMsgImgRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UploadMsgImgRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t ClientImgId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientimgid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t FromUserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fromusername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t ToUserName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tousername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TotalLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 StartPos = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DataLen = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_datalen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datalen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 MsgType = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_msgtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MsgSource = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgsource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgsource().data(), this->msgsource().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadMsgImgRequest.MsgSource");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CompressType = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_compresstype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compresstype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 NetType = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_nettype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nettype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 PhotoFrom = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_photofrom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photofrom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MediaId = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mediaid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mediaid().data(), this->mediaid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadMsgImgRequest.MediaId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CDNBigImgUrl = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdnbigimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cdnbigimgurl().data(), this->cdnbigimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadMsgImgRequest.CDNBigImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CDNMidImgUrl = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdnmidimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cdnmidimgurl().data(), this->cdnmidimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadMsgImgRequest.CDNMidImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AESKey = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aeskey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aeskey().data(), this->aeskey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadMsgImgRequest.AESKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 EncryVer = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_encryver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encryver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 CDNBigImgSize = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_cdnbigimgsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdnbigimgsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 CDNMidImgSize = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_cdnmidimgsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdnmidimgsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CDNThumbImgUrl = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdnthumbimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cdnthumbimgurl().data(), this->cdnthumbimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadMsgImgRequest.CDNThumbImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 CDNThumbImgSize = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_cdnthumbimgsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdnthumbimgsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 CDNThumbImgHeight = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_cdnthumbimgheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdnthumbimgheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 CDNThumbImgWidth = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_cdnthumbimgwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdnthumbimgwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CDNThumbAESKey = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdnthumbaeskey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cdnthumbaeskey().data(), this->cdnthumbaeskey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadMsgImgRequest.CDNThumbAESKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ReqTime = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_reqtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Md5 = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadMsgImgRequest.Md5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CRC32 = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_crc32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 MsgForwardType = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_msgforwardtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgforwardtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 HitMd5 = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_hitmd5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hitmd5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UploadMsgImgRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UploadMsgImgRequest)
  return false;
#undef DO_
}

void UploadMsgImgRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UploadMsgImgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SKBuiltinString_t ClientImgId = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->clientimgid_, output);
  }

  // required .micromsg.SKBuiltinString_t FromUserName = 3;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->fromusername_, output);
  }

  // required .micromsg.SKBuiltinString_t ToUserName = 4;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->tousername_, output);
  }

  // required uint32 TotalLen = 5;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->totallen(), output);
  }

  // required uint32 StartPos = 6;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->startpos(), output);
  }

  // required uint32 DataLen = 7;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->datalen(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 8;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->data_, output);
  }

  // optional uint32 MsgType = 9;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->msgtype(), output);
  }

  // optional string MsgSource = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgsource().data(), this->msgsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMsgImgRequest.MsgSource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->msgsource(), output);
  }

  // optional uint32 CompressType = 11;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->compresstype(), output);
  }

  // optional int32 NetType = 12;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->nettype(), output);
  }

  // optional int32 PhotoFrom = 13;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->photofrom(), output);
  }

  // optional string MediaId = 14;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mediaid().data(), this->mediaid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMsgImgRequest.MediaId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->mediaid(), output);
  }

  // optional string CDNBigImgUrl = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdnbigimgurl().data(), this->cdnbigimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMsgImgRequest.CDNBigImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->cdnbigimgurl(), output);
  }

  // optional string CDNMidImgUrl = 16;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdnmidimgurl().data(), this->cdnmidimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMsgImgRequest.CDNMidImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->cdnmidimgurl(), output);
  }

  // optional string AESKey = 17;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMsgImgRequest.AESKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->aeskey(), output);
  }

  // optional int32 EncryVer = 18;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->encryver(), output);
  }

  // optional int32 CDNBigImgSize = 19;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->cdnbigimgsize(), output);
  }

  // optional int32 CDNMidImgSize = 20;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->cdnmidimgsize(), output);
  }

  // optional string CDNThumbImgUrl = 21;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdnthumbimgurl().data(), this->cdnthumbimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMsgImgRequest.CDNThumbImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->cdnthumbimgurl(), output);
  }

  // optional int32 CDNThumbImgSize = 22;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->cdnthumbimgsize(), output);
  }

  // optional int32 CDNThumbImgHeight = 23;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->cdnthumbimgheight(), output);
  }

  // optional int32 CDNThumbImgWidth = 24;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->cdnthumbimgwidth(), output);
  }

  // optional string CDNThumbAESKey = 25;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdnthumbaeskey().data(), this->cdnthumbaeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMsgImgRequest.CDNThumbAESKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->cdnthumbaeskey(), output);
  }

  // optional uint32 ReqTime = 26;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->reqtime(), output);
  }

  // optional string Md5 = 27;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMsgImgRequest.Md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->md5(), output);
  }

  // optional uint32 CRC32 = 28;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->crc32(), output);
  }

  // optional uint32 MsgForwardType = 29;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->msgforwardtype(), output);
  }

  // optional uint32 HitMd5 = 30;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->hitmd5(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UploadMsgImgRequest)
}

::google::protobuf::uint8* UploadMsgImgRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UploadMsgImgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t ClientImgId = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->clientimgid_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t FromUserName = 3;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->fromusername_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t ToUserName = 4;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->tousername_, deterministic, target);
  }

  // required uint32 TotalLen = 5;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->totallen(), target);
  }

  // required uint32 StartPos = 6;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->startpos(), target);
  }

  // required uint32 DataLen = 7;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->datalen(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 8;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->data_, deterministic, target);
  }

  // optional uint32 MsgType = 9;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->msgtype(), target);
  }

  // optional string MsgSource = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgsource().data(), this->msgsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMsgImgRequest.MsgSource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->msgsource(), target);
  }

  // optional uint32 CompressType = 11;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->compresstype(), target);
  }

  // optional int32 NetType = 12;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->nettype(), target);
  }

  // optional int32 PhotoFrom = 13;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->photofrom(), target);
  }

  // optional string MediaId = 14;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mediaid().data(), this->mediaid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMsgImgRequest.MediaId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->mediaid(), target);
  }

  // optional string CDNBigImgUrl = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdnbigimgurl().data(), this->cdnbigimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMsgImgRequest.CDNBigImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->cdnbigimgurl(), target);
  }

  // optional string CDNMidImgUrl = 16;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdnmidimgurl().data(), this->cdnmidimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMsgImgRequest.CDNMidImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->cdnmidimgurl(), target);
  }

  // optional string AESKey = 17;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMsgImgRequest.AESKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->aeskey(), target);
  }

  // optional int32 EncryVer = 18;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->encryver(), target);
  }

  // optional int32 CDNBigImgSize = 19;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->cdnbigimgsize(), target);
  }

  // optional int32 CDNMidImgSize = 20;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->cdnmidimgsize(), target);
  }

  // optional string CDNThumbImgUrl = 21;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdnthumbimgurl().data(), this->cdnthumbimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMsgImgRequest.CDNThumbImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->cdnthumbimgurl(), target);
  }

  // optional int32 CDNThumbImgSize = 22;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->cdnthumbimgsize(), target);
  }

  // optional int32 CDNThumbImgHeight = 23;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->cdnthumbimgheight(), target);
  }

  // optional int32 CDNThumbImgWidth = 24;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->cdnthumbimgwidth(), target);
  }

  // optional string CDNThumbAESKey = 25;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdnthumbaeskey().data(), this->cdnthumbaeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMsgImgRequest.CDNThumbAESKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->cdnthumbaeskey(), target);
  }

  // optional uint32 ReqTime = 26;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->reqtime(), target);
  }

  // optional string Md5 = 27;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMsgImgRequest.Md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->md5(), target);
  }

  // optional uint32 CRC32 = 28;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->crc32(), target);
  }

  // optional uint32 MsgForwardType = 29;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->msgforwardtype(), target);
  }

  // optional uint32 HitMd5 = 30;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->hitmd5(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UploadMsgImgRequest)
  return target;
}

size_t UploadMsgImgRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.UploadMsgImgRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_clientimgid()) {
    // required .micromsg.SKBuiltinString_t ClientImgId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clientimgid_);
  }

  if (has_fromusername()) {
    // required .micromsg.SKBuiltinString_t FromUserName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fromusername_);
  }

  if (has_tousername()) {
    // required .micromsg.SKBuiltinString_t ToUserName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tousername_);
  }

  if (has_data()) {
    // required .micromsg.SKBuiltinBuffer_t Data = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  if (has_totallen()) {
    // required uint32 TotalLen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());
  }

  if (has_startpos()) {
    // required uint32 StartPos = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());
  }

  if (has_datalen()) {
    // required uint32 DataLen = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalen());
  }

  return total_size;
}
size_t UploadMsgImgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UploadMsgImgRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000ff00) ^ 0x0000ff00) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinString_t ClientImgId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clientimgid_);

    // required .micromsg.SKBuiltinString_t FromUserName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fromusername_);

    // required .micromsg.SKBuiltinString_t ToUserName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tousername_);

    // required .micromsg.SKBuiltinBuffer_t Data = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);

    // required uint32 TotalLen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());

    // required uint32 StartPos = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());

    // required uint32 DataLen = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string MsgSource = 10;
    if (has_msgsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgsource());
    }

    // optional string MediaId = 14;
    if (has_mediaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mediaid());
    }

    // optional string CDNBigImgUrl = 15;
    if (has_cdnbigimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cdnbigimgurl());
    }

    // optional string CDNMidImgUrl = 16;
    if (has_cdnmidimgurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cdnmidimgurl());
    }

    // optional string AESKey = 17;
    if (has_aeskey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aeskey());
    }

    // optional string CDNThumbImgUrl = 21;
    if (has_cdnthumbimgurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cdnthumbimgurl());
    }

    // optional string CDNThumbAESKey = 25;
    if (has_cdnthumbaeskey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cdnthumbaeskey());
    }

    // optional string Md5 = 27;
    if (has_md5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 MsgType = 9;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgtype());
    }

    // optional uint32 CompressType = 11;
    if (has_compresstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compresstype());
    }

    // optional int32 NetType = 12;
    if (has_nettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nettype());
    }

    // optional int32 PhotoFrom = 13;
    if (has_photofrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photofrom());
    }

    // optional int32 EncryVer = 18;
    if (has_encryver()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->encryver());
    }

    // optional int32 CDNBigImgSize = 19;
    if (has_cdnbigimgsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdnbigimgsize());
    }

    // optional int32 CDNMidImgSize = 20;
    if (has_cdnmidimgsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdnmidimgsize());
    }

    // optional int32 CDNThumbImgSize = 22;
    if (has_cdnthumbimgsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdnthumbimgsize());
    }

  }
  if (_has_bits_[24 / 32] & 1056964608u) {
    // optional int32 CDNThumbImgHeight = 23;
    if (has_cdnthumbimgheight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdnthumbimgheight());
    }

    // optional int32 CDNThumbImgWidth = 24;
    if (has_cdnthumbimgwidth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdnthumbimgwidth());
    }

    // optional uint32 ReqTime = 26;
    if (has_reqtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqtime());
    }

    // optional uint32 CRC32 = 28;
    if (has_crc32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc32());
    }

    // optional uint32 MsgForwardType = 29;
    if (has_msgforwardtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgforwardtype());
    }

    // optional uint32 HitMd5 = 30;
    if (has_hitmd5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hitmd5());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadMsgImgRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UploadMsgImgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadMsgImgRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadMsgImgRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UploadMsgImgRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UploadMsgImgRequest)
    MergeFrom(*source);
  }
}

void UploadMsgImgRequest::MergeFrom(const UploadMsgImgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UploadMsgImgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msgsource();
      msgsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgsource_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mediaid();
      mediaid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mediaid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_cdnbigimgurl();
      cdnbigimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdnbigimgurl_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_cdnmidimgurl();
      cdnmidimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdnmidimgurl_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_aeskey();
      aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_cdnthumbimgurl();
      cdnthumbimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdnthumbimgurl_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_cdnthumbaeskey();
      cdnthumbaeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdnthumbaeskey_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_md5();
      md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_clientimgid()->::micromsg::SKBuiltinString_t::MergeFrom(from.clientimgid());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_fromusername()->::micromsg::SKBuiltinString_t::MergeFrom(from.fromusername());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_tousername()->::micromsg::SKBuiltinString_t::MergeFrom(from.tousername());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_data()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00002000u) {
      totallen_ = from.totallen_;
    }
    if (cached_has_bits & 0x00004000u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00008000u) {
      datalen_ = from.datalen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      msgtype_ = from.msgtype_;
    }
    if (cached_has_bits & 0x00020000u) {
      compresstype_ = from.compresstype_;
    }
    if (cached_has_bits & 0x00040000u) {
      nettype_ = from.nettype_;
    }
    if (cached_has_bits & 0x00080000u) {
      photofrom_ = from.photofrom_;
    }
    if (cached_has_bits & 0x00100000u) {
      encryver_ = from.encryver_;
    }
    if (cached_has_bits & 0x00200000u) {
      cdnbigimgsize_ = from.cdnbigimgsize_;
    }
    if (cached_has_bits & 0x00400000u) {
      cdnmidimgsize_ = from.cdnmidimgsize_;
    }
    if (cached_has_bits & 0x00800000u) {
      cdnthumbimgsize_ = from.cdnthumbimgsize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1056964608u) {
    if (cached_has_bits & 0x01000000u) {
      cdnthumbimgheight_ = from.cdnthumbimgheight_;
    }
    if (cached_has_bits & 0x02000000u) {
      cdnthumbimgwidth_ = from.cdnthumbimgwidth_;
    }
    if (cached_has_bits & 0x04000000u) {
      reqtime_ = from.reqtime_;
    }
    if (cached_has_bits & 0x08000000u) {
      crc32_ = from.crc32_;
    }
    if (cached_has_bits & 0x10000000u) {
      msgforwardtype_ = from.msgforwardtype_;
    }
    if (cached_has_bits & 0x20000000u) {
      hitmd5_ = from.hitmd5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UploadMsgImgRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UploadMsgImgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadMsgImgRequest::CopyFrom(const UploadMsgImgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UploadMsgImgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadMsgImgRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ff00) != 0x0000ff00) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void UploadMsgImgRequest::Swap(UploadMsgImgRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadMsgImgRequest::InternalSwap(UploadMsgImgRequest* other) {
  msgsource_.Swap(&other->msgsource_);
  mediaid_.Swap(&other->mediaid_);
  cdnbigimgurl_.Swap(&other->cdnbigimgurl_);
  cdnmidimgurl_.Swap(&other->cdnmidimgurl_);
  aeskey_.Swap(&other->aeskey_);
  cdnthumbimgurl_.Swap(&other->cdnthumbimgurl_);
  cdnthumbaeskey_.Swap(&other->cdnthumbaeskey_);
  md5_.Swap(&other->md5_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(clientimgid_, other->clientimgid_);
  std::swap(fromusername_, other->fromusername_);
  std::swap(tousername_, other->tousername_);
  std::swap(data_, other->data_);
  std::swap(totallen_, other->totallen_);
  std::swap(startpos_, other->startpos_);
  std::swap(datalen_, other->datalen_);
  std::swap(msgtype_, other->msgtype_);
  std::swap(compresstype_, other->compresstype_);
  std::swap(nettype_, other->nettype_);
  std::swap(photofrom_, other->photofrom_);
  std::swap(encryver_, other->encryver_);
  std::swap(cdnbigimgsize_, other->cdnbigimgsize_);
  std::swap(cdnmidimgsize_, other->cdnmidimgsize_);
  std::swap(cdnthumbimgsize_, other->cdnthumbimgsize_);
  std::swap(cdnthumbimgheight_, other->cdnthumbimgheight_);
  std::swap(cdnthumbimgwidth_, other->cdnthumbimgwidth_);
  std::swap(reqtime_, other->reqtime_);
  std::swap(crc32_, other->crc32_);
  std::swap(msgforwardtype_, other->msgforwardtype_);
  std::swap(hitmd5_, other->hitmd5_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadMsgImgRequest::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadMsgImgRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool UploadMsgImgRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UploadMsgImgRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000100u;
}
void UploadMsgImgRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000100u;
}
void UploadMsgImgRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& UploadMsgImgRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* UploadMsgImgRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* UploadMsgImgRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void UploadMsgImgRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.BaseRequest)
}

// required .micromsg.SKBuiltinString_t ClientImgId = 2;
bool UploadMsgImgRequest::has_clientimgid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void UploadMsgImgRequest::set_has_clientimgid() {
  _has_bits_[0] |= 0x00000200u;
}
void UploadMsgImgRequest::clear_has_clientimgid() {
  _has_bits_[0] &= ~0x00000200u;
}
void UploadMsgImgRequest::clear_clientimgid() {
  if (clientimgid_ != NULL) clientimgid_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_clientimgid();
}
const ::micromsg::SKBuiltinString_t& UploadMsgImgRequest::clientimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.ClientImgId)
  return clientimgid_ != NULL ? *clientimgid_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* UploadMsgImgRequest::mutable_clientimgid() {
  set_has_clientimgid();
  if (clientimgid_ == NULL) {
    clientimgid_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.ClientImgId)
  return clientimgid_;
}
::micromsg::SKBuiltinString_t* UploadMsgImgRequest::release_clientimgid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.ClientImgId)
  clear_has_clientimgid();
  ::micromsg::SKBuiltinString_t* temp = clientimgid_;
  clientimgid_ = NULL;
  return temp;
}
void UploadMsgImgRequest::set_allocated_clientimgid(::micromsg::SKBuiltinString_t* clientimgid) {
  delete clientimgid_;
  clientimgid_ = clientimgid;
  if (clientimgid) {
    set_has_clientimgid();
  } else {
    clear_has_clientimgid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.ClientImgId)
}

// required .micromsg.SKBuiltinString_t FromUserName = 3;
bool UploadMsgImgRequest::has_fromusername() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void UploadMsgImgRequest::set_has_fromusername() {
  _has_bits_[0] |= 0x00000400u;
}
void UploadMsgImgRequest::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000400u;
}
void UploadMsgImgRequest::clear_fromusername() {
  if (fromusername_ != NULL) fromusername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_fromusername();
}
const ::micromsg::SKBuiltinString_t& UploadMsgImgRequest::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.FromUserName)
  return fromusername_ != NULL ? *fromusername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* UploadMsgImgRequest::mutable_fromusername() {
  set_has_fromusername();
  if (fromusername_ == NULL) {
    fromusername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.FromUserName)
  return fromusername_;
}
::micromsg::SKBuiltinString_t* UploadMsgImgRequest::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.FromUserName)
  clear_has_fromusername();
  ::micromsg::SKBuiltinString_t* temp = fromusername_;
  fromusername_ = NULL;
  return temp;
}
void UploadMsgImgRequest::set_allocated_fromusername(::micromsg::SKBuiltinString_t* fromusername) {
  delete fromusername_;
  fromusername_ = fromusername;
  if (fromusername) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.FromUserName)
}

// required .micromsg.SKBuiltinString_t ToUserName = 4;
bool UploadMsgImgRequest::has_tousername() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void UploadMsgImgRequest::set_has_tousername() {
  _has_bits_[0] |= 0x00000800u;
}
void UploadMsgImgRequest::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000800u;
}
void UploadMsgImgRequest::clear_tousername() {
  if (tousername_ != NULL) tousername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_tousername();
}
const ::micromsg::SKBuiltinString_t& UploadMsgImgRequest::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.ToUserName)
  return tousername_ != NULL ? *tousername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* UploadMsgImgRequest::mutable_tousername() {
  set_has_tousername();
  if (tousername_ == NULL) {
    tousername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.ToUserName)
  return tousername_;
}
::micromsg::SKBuiltinString_t* UploadMsgImgRequest::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.ToUserName)
  clear_has_tousername();
  ::micromsg::SKBuiltinString_t* temp = tousername_;
  tousername_ = NULL;
  return temp;
}
void UploadMsgImgRequest::set_allocated_tousername(::micromsg::SKBuiltinString_t* tousername) {
  delete tousername_;
  tousername_ = tousername;
  if (tousername) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.ToUserName)
}

// required uint32 TotalLen = 5;
bool UploadMsgImgRequest::has_totallen() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void UploadMsgImgRequest::set_has_totallen() {
  _has_bits_[0] |= 0x00002000u;
}
void UploadMsgImgRequest::clear_has_totallen() {
  _has_bits_[0] &= ~0x00002000u;
}
void UploadMsgImgRequest::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
::google::protobuf::uint32 UploadMsgImgRequest::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.TotalLen)
  return totallen_;
}
void UploadMsgImgRequest::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.TotalLen)
}

// required uint32 StartPos = 6;
bool UploadMsgImgRequest::has_startpos() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void UploadMsgImgRequest::set_has_startpos() {
  _has_bits_[0] |= 0x00004000u;
}
void UploadMsgImgRequest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00004000u;
}
void UploadMsgImgRequest::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
::google::protobuf::uint32 UploadMsgImgRequest::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.StartPos)
  return startpos_;
}
void UploadMsgImgRequest::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.StartPos)
}

// required uint32 DataLen = 7;
bool UploadMsgImgRequest::has_datalen() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void UploadMsgImgRequest::set_has_datalen() {
  _has_bits_[0] |= 0x00008000u;
}
void UploadMsgImgRequest::clear_has_datalen() {
  _has_bits_[0] &= ~0x00008000u;
}
void UploadMsgImgRequest::clear_datalen() {
  datalen_ = 0u;
  clear_has_datalen();
}
::google::protobuf::uint32 UploadMsgImgRequest::datalen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.DataLen)
  return datalen_;
}
void UploadMsgImgRequest::set_datalen(::google::protobuf::uint32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.DataLen)
}

// required .micromsg.SKBuiltinBuffer_t Data = 8;
bool UploadMsgImgRequest::has_data() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void UploadMsgImgRequest::set_has_data() {
  _has_bits_[0] |= 0x00001000u;
}
void UploadMsgImgRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00001000u;
}
void UploadMsgImgRequest::clear_data() {
  if (data_ != NULL) data_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_data();
}
const ::micromsg::SKBuiltinBuffer_t& UploadMsgImgRequest::data() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.Data)
  return data_ != NULL ? *data_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* UploadMsgImgRequest::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.Data)
  return data_;
}
::micromsg::SKBuiltinBuffer_t* UploadMsgImgRequest::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.Data)
  clear_has_data();
  ::micromsg::SKBuiltinBuffer_t* temp = data_;
  data_ = NULL;
  return temp;
}
void UploadMsgImgRequest::set_allocated_data(::micromsg::SKBuiltinBuffer_t* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.Data)
}

// optional uint32 MsgType = 9;
bool UploadMsgImgRequest::has_msgtype() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void UploadMsgImgRequest::set_has_msgtype() {
  _has_bits_[0] |= 0x00010000u;
}
void UploadMsgImgRequest::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00010000u;
}
void UploadMsgImgRequest::clear_msgtype() {
  msgtype_ = 0u;
  clear_has_msgtype();
}
::google::protobuf::uint32 UploadMsgImgRequest::msgtype() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.MsgType)
  return msgtype_;
}
void UploadMsgImgRequest::set_msgtype(::google::protobuf::uint32 value) {
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.MsgType)
}

// optional string MsgSource = 10;
bool UploadMsgImgRequest::has_msgsource() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UploadMsgImgRequest::set_has_msgsource() {
  _has_bits_[0] |= 0x00000001u;
}
void UploadMsgImgRequest::clear_has_msgsource() {
  _has_bits_[0] &= ~0x00000001u;
}
void UploadMsgImgRequest::clear_msgsource() {
  msgsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgsource();
}
const ::std::string& UploadMsgImgRequest::msgsource() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.MsgSource)
  return msgsource_.GetNoArena();
}
void UploadMsgImgRequest::set_msgsource(const ::std::string& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.MsgSource)
}
#if LANG_CXX11
void UploadMsgImgRequest::set_msgsource(::std::string&& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadMsgImgRequest.MsgSource)
}
#endif
void UploadMsgImgRequest::set_msgsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadMsgImgRequest.MsgSource)
}
void UploadMsgImgRequest::set_msgsource(const char* value, size_t size) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadMsgImgRequest.MsgSource)
}
::std::string* UploadMsgImgRequest::mutable_msgsource() {
  set_has_msgsource();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.MsgSource)
  return msgsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadMsgImgRequest::release_msgsource() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.MsgSource)
  clear_has_msgsource();
  return msgsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadMsgImgRequest::set_allocated_msgsource(::std::string* msgsource) {
  if (msgsource != NULL) {
    set_has_msgsource();
  } else {
    clear_has_msgsource();
  }
  msgsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgsource);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.MsgSource)
}

// optional uint32 CompressType = 11;
bool UploadMsgImgRequest::has_compresstype() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void UploadMsgImgRequest::set_has_compresstype() {
  _has_bits_[0] |= 0x00020000u;
}
void UploadMsgImgRequest::clear_has_compresstype() {
  _has_bits_[0] &= ~0x00020000u;
}
void UploadMsgImgRequest::clear_compresstype() {
  compresstype_ = 0u;
  clear_has_compresstype();
}
::google::protobuf::uint32 UploadMsgImgRequest::compresstype() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CompressType)
  return compresstype_;
}
void UploadMsgImgRequest::set_compresstype(::google::protobuf::uint32 value) {
  set_has_compresstype();
  compresstype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CompressType)
}

// optional int32 NetType = 12;
bool UploadMsgImgRequest::has_nettype() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void UploadMsgImgRequest::set_has_nettype() {
  _has_bits_[0] |= 0x00040000u;
}
void UploadMsgImgRequest::clear_has_nettype() {
  _has_bits_[0] &= ~0x00040000u;
}
void UploadMsgImgRequest::clear_nettype() {
  nettype_ = 0;
  clear_has_nettype();
}
::google::protobuf::int32 UploadMsgImgRequest::nettype() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.NetType)
  return nettype_;
}
void UploadMsgImgRequest::set_nettype(::google::protobuf::int32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.NetType)
}

// optional int32 PhotoFrom = 13;
bool UploadMsgImgRequest::has_photofrom() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void UploadMsgImgRequest::set_has_photofrom() {
  _has_bits_[0] |= 0x00080000u;
}
void UploadMsgImgRequest::clear_has_photofrom() {
  _has_bits_[0] &= ~0x00080000u;
}
void UploadMsgImgRequest::clear_photofrom() {
  photofrom_ = 0;
  clear_has_photofrom();
}
::google::protobuf::int32 UploadMsgImgRequest::photofrom() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.PhotoFrom)
  return photofrom_;
}
void UploadMsgImgRequest::set_photofrom(::google::protobuf::int32 value) {
  set_has_photofrom();
  photofrom_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.PhotoFrom)
}

// optional string MediaId = 14;
bool UploadMsgImgRequest::has_mediaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UploadMsgImgRequest::set_has_mediaid() {
  _has_bits_[0] |= 0x00000002u;
}
void UploadMsgImgRequest::clear_has_mediaid() {
  _has_bits_[0] &= ~0x00000002u;
}
void UploadMsgImgRequest::clear_mediaid() {
  mediaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mediaid();
}
const ::std::string& UploadMsgImgRequest::mediaid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.MediaId)
  return mediaid_.GetNoArena();
}
void UploadMsgImgRequest::set_mediaid(const ::std::string& value) {
  set_has_mediaid();
  mediaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.MediaId)
}
#if LANG_CXX11
void UploadMsgImgRequest::set_mediaid(::std::string&& value) {
  set_has_mediaid();
  mediaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadMsgImgRequest.MediaId)
}
#endif
void UploadMsgImgRequest::set_mediaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mediaid();
  mediaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadMsgImgRequest.MediaId)
}
void UploadMsgImgRequest::set_mediaid(const char* value, size_t size) {
  set_has_mediaid();
  mediaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadMsgImgRequest.MediaId)
}
::std::string* UploadMsgImgRequest::mutable_mediaid() {
  set_has_mediaid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.MediaId)
  return mediaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadMsgImgRequest::release_mediaid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.MediaId)
  clear_has_mediaid();
  return mediaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadMsgImgRequest::set_allocated_mediaid(::std::string* mediaid) {
  if (mediaid != NULL) {
    set_has_mediaid();
  } else {
    clear_has_mediaid();
  }
  mediaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mediaid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.MediaId)
}

// optional string CDNBigImgUrl = 15;
bool UploadMsgImgRequest::has_cdnbigimgurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UploadMsgImgRequest::set_has_cdnbigimgurl() {
  _has_bits_[0] |= 0x00000004u;
}
void UploadMsgImgRequest::clear_has_cdnbigimgurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void UploadMsgImgRequest::clear_cdnbigimgurl() {
  cdnbigimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdnbigimgurl();
}
const ::std::string& UploadMsgImgRequest::cdnbigimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CDNBigImgUrl)
  return cdnbigimgurl_.GetNoArena();
}
void UploadMsgImgRequest::set_cdnbigimgurl(const ::std::string& value) {
  set_has_cdnbigimgurl();
  cdnbigimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CDNBigImgUrl)
}
#if LANG_CXX11
void UploadMsgImgRequest::set_cdnbigimgurl(::std::string&& value) {
  set_has_cdnbigimgurl();
  cdnbigimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadMsgImgRequest.CDNBigImgUrl)
}
#endif
void UploadMsgImgRequest::set_cdnbigimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdnbigimgurl();
  cdnbigimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadMsgImgRequest.CDNBigImgUrl)
}
void UploadMsgImgRequest::set_cdnbigimgurl(const char* value, size_t size) {
  set_has_cdnbigimgurl();
  cdnbigimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadMsgImgRequest.CDNBigImgUrl)
}
::std::string* UploadMsgImgRequest::mutable_cdnbigimgurl() {
  set_has_cdnbigimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.CDNBigImgUrl)
  return cdnbigimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadMsgImgRequest::release_cdnbigimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.CDNBigImgUrl)
  clear_has_cdnbigimgurl();
  return cdnbigimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadMsgImgRequest::set_allocated_cdnbigimgurl(::std::string* cdnbigimgurl) {
  if (cdnbigimgurl != NULL) {
    set_has_cdnbigimgurl();
  } else {
    clear_has_cdnbigimgurl();
  }
  cdnbigimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdnbigimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.CDNBigImgUrl)
}

// optional string CDNMidImgUrl = 16;
bool UploadMsgImgRequest::has_cdnmidimgurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UploadMsgImgRequest::set_has_cdnmidimgurl() {
  _has_bits_[0] |= 0x00000008u;
}
void UploadMsgImgRequest::clear_has_cdnmidimgurl() {
  _has_bits_[0] &= ~0x00000008u;
}
void UploadMsgImgRequest::clear_cdnmidimgurl() {
  cdnmidimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdnmidimgurl();
}
const ::std::string& UploadMsgImgRequest::cdnmidimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CDNMidImgUrl)
  return cdnmidimgurl_.GetNoArena();
}
void UploadMsgImgRequest::set_cdnmidimgurl(const ::std::string& value) {
  set_has_cdnmidimgurl();
  cdnmidimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CDNMidImgUrl)
}
#if LANG_CXX11
void UploadMsgImgRequest::set_cdnmidimgurl(::std::string&& value) {
  set_has_cdnmidimgurl();
  cdnmidimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadMsgImgRequest.CDNMidImgUrl)
}
#endif
void UploadMsgImgRequest::set_cdnmidimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdnmidimgurl();
  cdnmidimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadMsgImgRequest.CDNMidImgUrl)
}
void UploadMsgImgRequest::set_cdnmidimgurl(const char* value, size_t size) {
  set_has_cdnmidimgurl();
  cdnmidimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadMsgImgRequest.CDNMidImgUrl)
}
::std::string* UploadMsgImgRequest::mutable_cdnmidimgurl() {
  set_has_cdnmidimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.CDNMidImgUrl)
  return cdnmidimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadMsgImgRequest::release_cdnmidimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.CDNMidImgUrl)
  clear_has_cdnmidimgurl();
  return cdnmidimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadMsgImgRequest::set_allocated_cdnmidimgurl(::std::string* cdnmidimgurl) {
  if (cdnmidimgurl != NULL) {
    set_has_cdnmidimgurl();
  } else {
    clear_has_cdnmidimgurl();
  }
  cdnmidimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdnmidimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.CDNMidImgUrl)
}

// optional string AESKey = 17;
bool UploadMsgImgRequest::has_aeskey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UploadMsgImgRequest::set_has_aeskey() {
  _has_bits_[0] |= 0x00000010u;
}
void UploadMsgImgRequest::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000010u;
}
void UploadMsgImgRequest::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
const ::std::string& UploadMsgImgRequest::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.AESKey)
  return aeskey_.GetNoArena();
}
void UploadMsgImgRequest::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.AESKey)
}
#if LANG_CXX11
void UploadMsgImgRequest::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadMsgImgRequest.AESKey)
}
#endif
void UploadMsgImgRequest::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadMsgImgRequest.AESKey)
}
void UploadMsgImgRequest::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadMsgImgRequest.AESKey)
}
::std::string* UploadMsgImgRequest::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.AESKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadMsgImgRequest::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.AESKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadMsgImgRequest::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.AESKey)
}

// optional int32 EncryVer = 18;
bool UploadMsgImgRequest::has_encryver() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void UploadMsgImgRequest::set_has_encryver() {
  _has_bits_[0] |= 0x00100000u;
}
void UploadMsgImgRequest::clear_has_encryver() {
  _has_bits_[0] &= ~0x00100000u;
}
void UploadMsgImgRequest::clear_encryver() {
  encryver_ = 0;
  clear_has_encryver();
}
::google::protobuf::int32 UploadMsgImgRequest::encryver() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.EncryVer)
  return encryver_;
}
void UploadMsgImgRequest::set_encryver(::google::protobuf::int32 value) {
  set_has_encryver();
  encryver_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.EncryVer)
}

// optional int32 CDNBigImgSize = 19;
bool UploadMsgImgRequest::has_cdnbigimgsize() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void UploadMsgImgRequest::set_has_cdnbigimgsize() {
  _has_bits_[0] |= 0x00200000u;
}
void UploadMsgImgRequest::clear_has_cdnbigimgsize() {
  _has_bits_[0] &= ~0x00200000u;
}
void UploadMsgImgRequest::clear_cdnbigimgsize() {
  cdnbigimgsize_ = 0;
  clear_has_cdnbigimgsize();
}
::google::protobuf::int32 UploadMsgImgRequest::cdnbigimgsize() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CDNBigImgSize)
  return cdnbigimgsize_;
}
void UploadMsgImgRequest::set_cdnbigimgsize(::google::protobuf::int32 value) {
  set_has_cdnbigimgsize();
  cdnbigimgsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CDNBigImgSize)
}

// optional int32 CDNMidImgSize = 20;
bool UploadMsgImgRequest::has_cdnmidimgsize() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void UploadMsgImgRequest::set_has_cdnmidimgsize() {
  _has_bits_[0] |= 0x00400000u;
}
void UploadMsgImgRequest::clear_has_cdnmidimgsize() {
  _has_bits_[0] &= ~0x00400000u;
}
void UploadMsgImgRequest::clear_cdnmidimgsize() {
  cdnmidimgsize_ = 0;
  clear_has_cdnmidimgsize();
}
::google::protobuf::int32 UploadMsgImgRequest::cdnmidimgsize() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CDNMidImgSize)
  return cdnmidimgsize_;
}
void UploadMsgImgRequest::set_cdnmidimgsize(::google::protobuf::int32 value) {
  set_has_cdnmidimgsize();
  cdnmidimgsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CDNMidImgSize)
}

// optional string CDNThumbImgUrl = 21;
bool UploadMsgImgRequest::has_cdnthumbimgurl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UploadMsgImgRequest::set_has_cdnthumbimgurl() {
  _has_bits_[0] |= 0x00000020u;
}
void UploadMsgImgRequest::clear_has_cdnthumbimgurl() {
  _has_bits_[0] &= ~0x00000020u;
}
void UploadMsgImgRequest::clear_cdnthumbimgurl() {
  cdnthumbimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdnthumbimgurl();
}
const ::std::string& UploadMsgImgRequest::cdnthumbimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CDNThumbImgUrl)
  return cdnthumbimgurl_.GetNoArena();
}
void UploadMsgImgRequest::set_cdnthumbimgurl(const ::std::string& value) {
  set_has_cdnthumbimgurl();
  cdnthumbimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CDNThumbImgUrl)
}
#if LANG_CXX11
void UploadMsgImgRequest::set_cdnthumbimgurl(::std::string&& value) {
  set_has_cdnthumbimgurl();
  cdnthumbimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadMsgImgRequest.CDNThumbImgUrl)
}
#endif
void UploadMsgImgRequest::set_cdnthumbimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdnthumbimgurl();
  cdnthumbimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadMsgImgRequest.CDNThumbImgUrl)
}
void UploadMsgImgRequest::set_cdnthumbimgurl(const char* value, size_t size) {
  set_has_cdnthumbimgurl();
  cdnthumbimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadMsgImgRequest.CDNThumbImgUrl)
}
::std::string* UploadMsgImgRequest::mutable_cdnthumbimgurl() {
  set_has_cdnthumbimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.CDNThumbImgUrl)
  return cdnthumbimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadMsgImgRequest::release_cdnthumbimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.CDNThumbImgUrl)
  clear_has_cdnthumbimgurl();
  return cdnthumbimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadMsgImgRequest::set_allocated_cdnthumbimgurl(::std::string* cdnthumbimgurl) {
  if (cdnthumbimgurl != NULL) {
    set_has_cdnthumbimgurl();
  } else {
    clear_has_cdnthumbimgurl();
  }
  cdnthumbimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdnthumbimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.CDNThumbImgUrl)
}

// optional int32 CDNThumbImgSize = 22;
bool UploadMsgImgRequest::has_cdnthumbimgsize() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void UploadMsgImgRequest::set_has_cdnthumbimgsize() {
  _has_bits_[0] |= 0x00800000u;
}
void UploadMsgImgRequest::clear_has_cdnthumbimgsize() {
  _has_bits_[0] &= ~0x00800000u;
}
void UploadMsgImgRequest::clear_cdnthumbimgsize() {
  cdnthumbimgsize_ = 0;
  clear_has_cdnthumbimgsize();
}
::google::protobuf::int32 UploadMsgImgRequest::cdnthumbimgsize() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CDNThumbImgSize)
  return cdnthumbimgsize_;
}
void UploadMsgImgRequest::set_cdnthumbimgsize(::google::protobuf::int32 value) {
  set_has_cdnthumbimgsize();
  cdnthumbimgsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CDNThumbImgSize)
}

// optional int32 CDNThumbImgHeight = 23;
bool UploadMsgImgRequest::has_cdnthumbimgheight() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void UploadMsgImgRequest::set_has_cdnthumbimgheight() {
  _has_bits_[0] |= 0x01000000u;
}
void UploadMsgImgRequest::clear_has_cdnthumbimgheight() {
  _has_bits_[0] &= ~0x01000000u;
}
void UploadMsgImgRequest::clear_cdnthumbimgheight() {
  cdnthumbimgheight_ = 0;
  clear_has_cdnthumbimgheight();
}
::google::protobuf::int32 UploadMsgImgRequest::cdnthumbimgheight() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CDNThumbImgHeight)
  return cdnthumbimgheight_;
}
void UploadMsgImgRequest::set_cdnthumbimgheight(::google::protobuf::int32 value) {
  set_has_cdnthumbimgheight();
  cdnthumbimgheight_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CDNThumbImgHeight)
}

// optional int32 CDNThumbImgWidth = 24;
bool UploadMsgImgRequest::has_cdnthumbimgwidth() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void UploadMsgImgRequest::set_has_cdnthumbimgwidth() {
  _has_bits_[0] |= 0x02000000u;
}
void UploadMsgImgRequest::clear_has_cdnthumbimgwidth() {
  _has_bits_[0] &= ~0x02000000u;
}
void UploadMsgImgRequest::clear_cdnthumbimgwidth() {
  cdnthumbimgwidth_ = 0;
  clear_has_cdnthumbimgwidth();
}
::google::protobuf::int32 UploadMsgImgRequest::cdnthumbimgwidth() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CDNThumbImgWidth)
  return cdnthumbimgwidth_;
}
void UploadMsgImgRequest::set_cdnthumbimgwidth(::google::protobuf::int32 value) {
  set_has_cdnthumbimgwidth();
  cdnthumbimgwidth_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CDNThumbImgWidth)
}

// optional string CDNThumbAESKey = 25;
bool UploadMsgImgRequest::has_cdnthumbaeskey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UploadMsgImgRequest::set_has_cdnthumbaeskey() {
  _has_bits_[0] |= 0x00000040u;
}
void UploadMsgImgRequest::clear_has_cdnthumbaeskey() {
  _has_bits_[0] &= ~0x00000040u;
}
void UploadMsgImgRequest::clear_cdnthumbaeskey() {
  cdnthumbaeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdnthumbaeskey();
}
const ::std::string& UploadMsgImgRequest::cdnthumbaeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CDNThumbAESKey)
  return cdnthumbaeskey_.GetNoArena();
}
void UploadMsgImgRequest::set_cdnthumbaeskey(const ::std::string& value) {
  set_has_cdnthumbaeskey();
  cdnthumbaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CDNThumbAESKey)
}
#if LANG_CXX11
void UploadMsgImgRequest::set_cdnthumbaeskey(::std::string&& value) {
  set_has_cdnthumbaeskey();
  cdnthumbaeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadMsgImgRequest.CDNThumbAESKey)
}
#endif
void UploadMsgImgRequest::set_cdnthumbaeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdnthumbaeskey();
  cdnthumbaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadMsgImgRequest.CDNThumbAESKey)
}
void UploadMsgImgRequest::set_cdnthumbaeskey(const char* value, size_t size) {
  set_has_cdnthumbaeskey();
  cdnthumbaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadMsgImgRequest.CDNThumbAESKey)
}
::std::string* UploadMsgImgRequest::mutable_cdnthumbaeskey() {
  set_has_cdnthumbaeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.CDNThumbAESKey)
  return cdnthumbaeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadMsgImgRequest::release_cdnthumbaeskey() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.CDNThumbAESKey)
  clear_has_cdnthumbaeskey();
  return cdnthumbaeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadMsgImgRequest::set_allocated_cdnthumbaeskey(::std::string* cdnthumbaeskey) {
  if (cdnthumbaeskey != NULL) {
    set_has_cdnthumbaeskey();
  } else {
    clear_has_cdnthumbaeskey();
  }
  cdnthumbaeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdnthumbaeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.CDNThumbAESKey)
}

// optional uint32 ReqTime = 26;
bool UploadMsgImgRequest::has_reqtime() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void UploadMsgImgRequest::set_has_reqtime() {
  _has_bits_[0] |= 0x04000000u;
}
void UploadMsgImgRequest::clear_has_reqtime() {
  _has_bits_[0] &= ~0x04000000u;
}
void UploadMsgImgRequest::clear_reqtime() {
  reqtime_ = 0u;
  clear_has_reqtime();
}
::google::protobuf::uint32 UploadMsgImgRequest::reqtime() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.ReqTime)
  return reqtime_;
}
void UploadMsgImgRequest::set_reqtime(::google::protobuf::uint32 value) {
  set_has_reqtime();
  reqtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.ReqTime)
}

// optional string Md5 = 27;
bool UploadMsgImgRequest::has_md5() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UploadMsgImgRequest::set_has_md5() {
  _has_bits_[0] |= 0x00000080u;
}
void UploadMsgImgRequest::clear_has_md5() {
  _has_bits_[0] &= ~0x00000080u;
}
void UploadMsgImgRequest::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
const ::std::string& UploadMsgImgRequest::md5() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.Md5)
  return md5_.GetNoArena();
}
void UploadMsgImgRequest::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.Md5)
}
#if LANG_CXX11
void UploadMsgImgRequest::set_md5(::std::string&& value) {
  set_has_md5();
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadMsgImgRequest.Md5)
}
#endif
void UploadMsgImgRequest::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadMsgImgRequest.Md5)
}
void UploadMsgImgRequest::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadMsgImgRequest.Md5)
}
::std::string* UploadMsgImgRequest::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.Md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadMsgImgRequest::release_md5() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.Md5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadMsgImgRequest::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.Md5)
}

// optional uint32 CRC32 = 28;
bool UploadMsgImgRequest::has_crc32() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void UploadMsgImgRequest::set_has_crc32() {
  _has_bits_[0] |= 0x08000000u;
}
void UploadMsgImgRequest::clear_has_crc32() {
  _has_bits_[0] &= ~0x08000000u;
}
void UploadMsgImgRequest::clear_crc32() {
  crc32_ = 0u;
  clear_has_crc32();
}
::google::protobuf::uint32 UploadMsgImgRequest::crc32() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CRC32)
  return crc32_;
}
void UploadMsgImgRequest::set_crc32(::google::protobuf::uint32 value) {
  set_has_crc32();
  crc32_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CRC32)
}

// optional uint32 MsgForwardType = 29;
bool UploadMsgImgRequest::has_msgforwardtype() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void UploadMsgImgRequest::set_has_msgforwardtype() {
  _has_bits_[0] |= 0x10000000u;
}
void UploadMsgImgRequest::clear_has_msgforwardtype() {
  _has_bits_[0] &= ~0x10000000u;
}
void UploadMsgImgRequest::clear_msgforwardtype() {
  msgforwardtype_ = 0u;
  clear_has_msgforwardtype();
}
::google::protobuf::uint32 UploadMsgImgRequest::msgforwardtype() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.MsgForwardType)
  return msgforwardtype_;
}
void UploadMsgImgRequest::set_msgforwardtype(::google::protobuf::uint32 value) {
  set_has_msgforwardtype();
  msgforwardtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.MsgForwardType)
}

// optional uint32 HitMd5 = 30;
bool UploadMsgImgRequest::has_hitmd5() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void UploadMsgImgRequest::set_has_hitmd5() {
  _has_bits_[0] |= 0x20000000u;
}
void UploadMsgImgRequest::clear_has_hitmd5() {
  _has_bits_[0] &= ~0x20000000u;
}
void UploadMsgImgRequest::clear_hitmd5() {
  hitmd5_ = 0u;
  clear_has_hitmd5();
}
::google::protobuf::uint32 UploadMsgImgRequest::hitmd5() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.HitMd5)
  return hitmd5_;
}
void UploadMsgImgRequest::set_hitmd5(::google::protobuf::uint32 value) {
  set_has_hitmd5();
  hitmd5_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.HitMd5)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadMsgImgResponse::kBaseResponseFieldNumber;
const int UploadMsgImgResponse::kMsgIdFieldNumber;
const int UploadMsgImgResponse::kClientImgIdFieldNumber;
const int UploadMsgImgResponse::kFromUserNameFieldNumber;
const int UploadMsgImgResponse::kToUserNameFieldNumber;
const int UploadMsgImgResponse::kTotalLenFieldNumber;
const int UploadMsgImgResponse::kStartPosFieldNumber;
const int UploadMsgImgResponse::kDataLenFieldNumber;
const int UploadMsgImgResponse::kCreateTimeFieldNumber;
const int UploadMsgImgResponse::kNewMsgIdFieldNumber;
const int UploadMsgImgResponse::kAESKeyFieldNumber;
const int UploadMsgImgResponse::kFileIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadMsgImgResponse::UploadMsgImgResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UploadMsgImgResponse)
}
UploadMsgImgResponse::UploadMsgImgResponse(const UploadMsgImgResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_aeskey()) {
    aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
  }
  fileid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fileid()) {
    fileid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fileid_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_clientimgid()) {
    clientimgid_ = new ::micromsg::SKBuiltinString_t(*from.clientimgid_);
  } else {
    clientimgid_ = NULL;
  }
  if (from.has_fromusername()) {
    fromusername_ = new ::micromsg::SKBuiltinString_t(*from.fromusername_);
  } else {
    fromusername_ = NULL;
  }
  if (from.has_tousername()) {
    tousername_ = new ::micromsg::SKBuiltinString_t(*from.tousername_);
  } else {
    tousername_ = NULL;
  }
  ::memcpy(&msgid_, &from.msgid_,
    reinterpret_cast<char*>(&createtime_) -
    reinterpret_cast<char*>(&msgid_) + sizeof(createtime_));
  // @@protoc_insertion_point(copy_constructor:micromsg.UploadMsgImgResponse)
}

void UploadMsgImgResponse::SharedCtor() {
  _cached_size_ = 0;
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fileid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&createtime_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(createtime_));
}

UploadMsgImgResponse::~UploadMsgImgResponse() {
  // @@protoc_insertion_point(destructor:micromsg.UploadMsgImgResponse)
  SharedDtor();
}

void UploadMsgImgResponse::SharedDtor() {
  aeskey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fileid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete clientimgid_;
  }
  if (this != internal_default_instance()) {
    delete fromusername_;
  }
  if (this != internal_default_instance()) {
    delete tousername_;
  }
}

void UploadMsgImgResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadMsgImgResponse::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UploadMsgImgResponse& UploadMsgImgResponse::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

UploadMsgImgResponse* UploadMsgImgResponse::New(::google::protobuf::Arena* arena) const {
  UploadMsgImgResponse* n = new UploadMsgImgResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadMsgImgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UploadMsgImgResponse)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_aeskey()) {
      GOOGLE_DCHECK(!aeskey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*aeskey_.UnsafeRawStringPointer())->clear();
    }
    if (has_fileid()) {
      GOOGLE_DCHECK(!fileid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fileid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_clientimgid()) {
      GOOGLE_DCHECK(clientimgid_ != NULL);
      clientimgid_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_fromusername()) {
      GOOGLE_DCHECK(fromusername_ != NULL);
      fromusername_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_tousername()) {
      GOOGLE_DCHECK(tousername_ != NULL);
      tousername_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&msgid_, 0, reinterpret_cast<char*>(&totallen_) -
      reinterpret_cast<char*>(&msgid_) + sizeof(totallen_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&startpos_, 0, reinterpret_cast<char*>(&createtime_) -
      reinterpret_cast<char*>(&startpos_) + sizeof(createtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UploadMsgImgResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UploadMsgImgResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MsgId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t ClientImgId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientimgid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t FromUserName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fromusername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t ToUserName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tousername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TotalLen = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 StartPos = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DataLen = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_datalen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datalen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CreateTime = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_createtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 NewMsgId = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_newmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AESKey = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aeskey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aeskey().data(), this->aeskey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadMsgImgResponse.AESKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FileId = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fileid().data(), this->fileid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadMsgImgResponse.FileId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UploadMsgImgResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UploadMsgImgResponse)
  return false;
#undef DO_
}

void UploadMsgImgResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UploadMsgImgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 MsgId = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }

  // required .micromsg.SKBuiltinString_t ClientImgId = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->clientimgid_, output);
  }

  // required .micromsg.SKBuiltinString_t FromUserName = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->fromusername_, output);
  }

  // required .micromsg.SKBuiltinString_t ToUserName = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->tousername_, output);
  }

  // required uint32 TotalLen = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->totallen(), output);
  }

  // required uint32 StartPos = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->startpos(), output);
  }

  // required uint32 DataLen = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->datalen(), output);
  }

  // required uint32 CreateTime = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->createtime(), output);
  }

  // optional uint64 NewMsgId = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->newmsgid(), output);
  }

  // optional string AESKey = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMsgImgResponse.AESKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->aeskey(), output);
  }

  // optional string FileId = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMsgImgResponse.FileId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->fileid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UploadMsgImgResponse)
}

::google::protobuf::uint8* UploadMsgImgResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UploadMsgImgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 MsgId = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }

  // required .micromsg.SKBuiltinString_t ClientImgId = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->clientimgid_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t FromUserName = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->fromusername_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t ToUserName = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->tousername_, deterministic, target);
  }

  // required uint32 TotalLen = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->totallen(), target);
  }

  // required uint32 StartPos = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->startpos(), target);
  }

  // required uint32 DataLen = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->datalen(), target);
  }

  // required uint32 CreateTime = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->createtime(), target);
  }

  // optional uint64 NewMsgId = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->newmsgid(), target);
  }

  // optional string AESKey = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMsgImgResponse.AESKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->aeskey(), target);
  }

  // optional string FileId = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadMsgImgResponse.FileId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->fileid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UploadMsgImgResponse)
  return target;
}

size_t UploadMsgImgResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.UploadMsgImgResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_clientimgid()) {
    // required .micromsg.SKBuiltinString_t ClientImgId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clientimgid_);
  }

  if (has_fromusername()) {
    // required .micromsg.SKBuiltinString_t FromUserName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fromusername_);
  }

  if (has_tousername()) {
    // required .micromsg.SKBuiltinString_t ToUserName = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tousername_);
  }

  if (has_msgid()) {
    // required uint32 MsgId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  if (has_totallen()) {
    // required uint32 TotalLen = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());
  }

  if (has_startpos()) {
    // required uint32 StartPos = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());
  }

  if (has_datalen()) {
    // required uint32 DataLen = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalen());
  }

  if (has_createtime()) {
    // required uint32 CreateTime = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());
  }

  return total_size;
}
size_t UploadMsgImgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UploadMsgImgResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000bfc) ^ 0x00000bfc) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinString_t ClientImgId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clientimgid_);

    // required .micromsg.SKBuiltinString_t FromUserName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fromusername_);

    // required .micromsg.SKBuiltinString_t ToUserName = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tousername_);

    // required uint32 MsgId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());

    // required uint32 TotalLen = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());

    // required uint32 StartPos = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());

    // required uint32 DataLen = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalen());

    // required uint32 CreateTime = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string AESKey = 11;
    if (has_aeskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aeskey());
    }

    // optional string FileId = 12;
    if (has_fileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fileid());
    }

  }
  // optional uint64 NewMsgId = 10;
  if (has_newmsgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->newmsgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadMsgImgResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UploadMsgImgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadMsgImgResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadMsgImgResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UploadMsgImgResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UploadMsgImgResponse)
    MergeFrom(*source);
  }
}

void UploadMsgImgResponse::MergeFrom(const UploadMsgImgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UploadMsgImgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_aeskey();
      aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fileid();
      fileid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fileid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_clientimgid()->::micromsg::SKBuiltinString_t::MergeFrom(from.clientimgid());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_fromusername()->::micromsg::SKBuiltinString_t::MergeFrom(from.fromusername());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_tousername()->::micromsg::SKBuiltinString_t::MergeFrom(from.tousername());
    }
    if (cached_has_bits & 0x00000040u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x00000080u) {
      totallen_ = from.totallen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00000200u) {
      datalen_ = from.datalen_;
    }
    if (cached_has_bits & 0x00000400u) {
      newmsgid_ = from.newmsgid_;
    }
    if (cached_has_bits & 0x00000800u) {
      createtime_ = from.createtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UploadMsgImgResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UploadMsgImgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadMsgImgResponse::CopyFrom(const UploadMsgImgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UploadMsgImgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadMsgImgResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000bfc) != 0x00000bfc) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void UploadMsgImgResponse::Swap(UploadMsgImgResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadMsgImgResponse::InternalSwap(UploadMsgImgResponse* other) {
  aeskey_.Swap(&other->aeskey_);
  fileid_.Swap(&other->fileid_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(clientimgid_, other->clientimgid_);
  std::swap(fromusername_, other->fromusername_);
  std::swap(tousername_, other->tousername_);
  std::swap(msgid_, other->msgid_);
  std::swap(totallen_, other->totallen_);
  std::swap(startpos_, other->startpos_);
  std::swap(datalen_, other->datalen_);
  std::swap(newmsgid_, other->newmsgid_);
  std::swap(createtime_, other->createtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadMsgImgResponse::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadMsgImgResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool UploadMsgImgResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UploadMsgImgResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void UploadMsgImgResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void UploadMsgImgResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& UploadMsgImgResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* UploadMsgImgResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* UploadMsgImgResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void UploadMsgImgResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgResponse.BaseResponse)
}

// required uint32 MsgId = 2;
bool UploadMsgImgResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UploadMsgImgResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000040u;
}
void UploadMsgImgResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000040u;
}
void UploadMsgImgResponse::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
::google::protobuf::uint32 UploadMsgImgResponse::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.MsgId)
  return msgid_;
}
void UploadMsgImgResponse::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgResponse.MsgId)
}

// required .micromsg.SKBuiltinString_t ClientImgId = 3;
bool UploadMsgImgResponse::has_clientimgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UploadMsgImgResponse::set_has_clientimgid() {
  _has_bits_[0] |= 0x00000008u;
}
void UploadMsgImgResponse::clear_has_clientimgid() {
  _has_bits_[0] &= ~0x00000008u;
}
void UploadMsgImgResponse::clear_clientimgid() {
  if (clientimgid_ != NULL) clientimgid_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_clientimgid();
}
const ::micromsg::SKBuiltinString_t& UploadMsgImgResponse::clientimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.ClientImgId)
  return clientimgid_ != NULL ? *clientimgid_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* UploadMsgImgResponse::mutable_clientimgid() {
  set_has_clientimgid();
  if (clientimgid_ == NULL) {
    clientimgid_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgResponse.ClientImgId)
  return clientimgid_;
}
::micromsg::SKBuiltinString_t* UploadMsgImgResponse::release_clientimgid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgResponse.ClientImgId)
  clear_has_clientimgid();
  ::micromsg::SKBuiltinString_t* temp = clientimgid_;
  clientimgid_ = NULL;
  return temp;
}
void UploadMsgImgResponse::set_allocated_clientimgid(::micromsg::SKBuiltinString_t* clientimgid) {
  delete clientimgid_;
  clientimgid_ = clientimgid;
  if (clientimgid) {
    set_has_clientimgid();
  } else {
    clear_has_clientimgid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgResponse.ClientImgId)
}

// required .micromsg.SKBuiltinString_t FromUserName = 4;
bool UploadMsgImgResponse::has_fromusername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UploadMsgImgResponse::set_has_fromusername() {
  _has_bits_[0] |= 0x00000010u;
}
void UploadMsgImgResponse::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000010u;
}
void UploadMsgImgResponse::clear_fromusername() {
  if (fromusername_ != NULL) fromusername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_fromusername();
}
const ::micromsg::SKBuiltinString_t& UploadMsgImgResponse::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.FromUserName)
  return fromusername_ != NULL ? *fromusername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* UploadMsgImgResponse::mutable_fromusername() {
  set_has_fromusername();
  if (fromusername_ == NULL) {
    fromusername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgResponse.FromUserName)
  return fromusername_;
}
::micromsg::SKBuiltinString_t* UploadMsgImgResponse::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgResponse.FromUserName)
  clear_has_fromusername();
  ::micromsg::SKBuiltinString_t* temp = fromusername_;
  fromusername_ = NULL;
  return temp;
}
void UploadMsgImgResponse::set_allocated_fromusername(::micromsg::SKBuiltinString_t* fromusername) {
  delete fromusername_;
  fromusername_ = fromusername;
  if (fromusername) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgResponse.FromUserName)
}

// required .micromsg.SKBuiltinString_t ToUserName = 5;
bool UploadMsgImgResponse::has_tousername() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UploadMsgImgResponse::set_has_tousername() {
  _has_bits_[0] |= 0x00000020u;
}
void UploadMsgImgResponse::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000020u;
}
void UploadMsgImgResponse::clear_tousername() {
  if (tousername_ != NULL) tousername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_tousername();
}
const ::micromsg::SKBuiltinString_t& UploadMsgImgResponse::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.ToUserName)
  return tousername_ != NULL ? *tousername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* UploadMsgImgResponse::mutable_tousername() {
  set_has_tousername();
  if (tousername_ == NULL) {
    tousername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgResponse.ToUserName)
  return tousername_;
}
::micromsg::SKBuiltinString_t* UploadMsgImgResponse::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgResponse.ToUserName)
  clear_has_tousername();
  ::micromsg::SKBuiltinString_t* temp = tousername_;
  tousername_ = NULL;
  return temp;
}
void UploadMsgImgResponse::set_allocated_tousername(::micromsg::SKBuiltinString_t* tousername) {
  delete tousername_;
  tousername_ = tousername;
  if (tousername) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgResponse.ToUserName)
}

// required uint32 TotalLen = 6;
bool UploadMsgImgResponse::has_totallen() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UploadMsgImgResponse::set_has_totallen() {
  _has_bits_[0] |= 0x00000080u;
}
void UploadMsgImgResponse::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000080u;
}
void UploadMsgImgResponse::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
::google::protobuf::uint32 UploadMsgImgResponse::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.TotalLen)
  return totallen_;
}
void UploadMsgImgResponse::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgResponse.TotalLen)
}

// required uint32 StartPos = 7;
bool UploadMsgImgResponse::has_startpos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UploadMsgImgResponse::set_has_startpos() {
  _has_bits_[0] |= 0x00000100u;
}
void UploadMsgImgResponse::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000100u;
}
void UploadMsgImgResponse::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
::google::protobuf::uint32 UploadMsgImgResponse::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.StartPos)
  return startpos_;
}
void UploadMsgImgResponse::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgResponse.StartPos)
}

// required uint32 DataLen = 8;
bool UploadMsgImgResponse::has_datalen() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void UploadMsgImgResponse::set_has_datalen() {
  _has_bits_[0] |= 0x00000200u;
}
void UploadMsgImgResponse::clear_has_datalen() {
  _has_bits_[0] &= ~0x00000200u;
}
void UploadMsgImgResponse::clear_datalen() {
  datalen_ = 0u;
  clear_has_datalen();
}
::google::protobuf::uint32 UploadMsgImgResponse::datalen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.DataLen)
  return datalen_;
}
void UploadMsgImgResponse::set_datalen(::google::protobuf::uint32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgResponse.DataLen)
}

// required uint32 CreateTime = 9;
bool UploadMsgImgResponse::has_createtime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void UploadMsgImgResponse::set_has_createtime() {
  _has_bits_[0] |= 0x00000800u;
}
void UploadMsgImgResponse::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000800u;
}
void UploadMsgImgResponse::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
::google::protobuf::uint32 UploadMsgImgResponse::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.CreateTime)
  return createtime_;
}
void UploadMsgImgResponse::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgResponse.CreateTime)
}

// optional uint64 NewMsgId = 10;
bool UploadMsgImgResponse::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void UploadMsgImgResponse::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000400u;
}
void UploadMsgImgResponse::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000400u;
}
void UploadMsgImgResponse::clear_newmsgid() {
  newmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_newmsgid();
}
::google::protobuf::uint64 UploadMsgImgResponse::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.NewMsgId)
  return newmsgid_;
}
void UploadMsgImgResponse::set_newmsgid(::google::protobuf::uint64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgResponse.NewMsgId)
}

// optional string AESKey = 11;
bool UploadMsgImgResponse::has_aeskey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UploadMsgImgResponse::set_has_aeskey() {
  _has_bits_[0] |= 0x00000001u;
}
void UploadMsgImgResponse::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000001u;
}
void UploadMsgImgResponse::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
const ::std::string& UploadMsgImgResponse::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.AESKey)
  return aeskey_.GetNoArena();
}
void UploadMsgImgResponse::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgResponse.AESKey)
}
#if LANG_CXX11
void UploadMsgImgResponse::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadMsgImgResponse.AESKey)
}
#endif
void UploadMsgImgResponse::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadMsgImgResponse.AESKey)
}
void UploadMsgImgResponse::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadMsgImgResponse.AESKey)
}
::std::string* UploadMsgImgResponse::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgResponse.AESKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadMsgImgResponse::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgResponse.AESKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadMsgImgResponse::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgResponse.AESKey)
}

// optional string FileId = 12;
bool UploadMsgImgResponse::has_fileid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UploadMsgImgResponse::set_has_fileid() {
  _has_bits_[0] |= 0x00000002u;
}
void UploadMsgImgResponse::clear_has_fileid() {
  _has_bits_[0] &= ~0x00000002u;
}
void UploadMsgImgResponse::clear_fileid() {
  fileid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fileid();
}
const ::std::string& UploadMsgImgResponse::fileid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.FileId)
  return fileid_.GetNoArena();
}
void UploadMsgImgResponse::set_fileid(const ::std::string& value) {
  set_has_fileid();
  fileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgResponse.FileId)
}
#if LANG_CXX11
void UploadMsgImgResponse::set_fileid(::std::string&& value) {
  set_has_fileid();
  fileid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadMsgImgResponse.FileId)
}
#endif
void UploadMsgImgResponse::set_fileid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fileid();
  fileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadMsgImgResponse.FileId)
}
void UploadMsgImgResponse::set_fileid(const char* value, size_t size) {
  set_has_fileid();
  fileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadMsgImgResponse.FileId)
}
::std::string* UploadMsgImgResponse::mutable_fileid() {
  set_has_fileid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgResponse.FileId)
  return fileid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadMsgImgResponse::release_fileid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgResponse.FileId)
  clear_has_fileid();
  return fileid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadMsgImgResponse::set_allocated_fileid(::std::string* fileid) {
  if (fileid != NULL) {
    set_has_fileid();
  } else {
    clear_has_fileid();
  }
  fileid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fileid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgResponse.FileId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDNUploadMsgImgPrepareRequest::kClientImgIdFieldNumber;
const int CDNUploadMsgImgPrepareRequest::kFromUserNameFieldNumber;
const int CDNUploadMsgImgPrepareRequest::kToUserNameFieldNumber;
const int CDNUploadMsgImgPrepareRequest::kThumbHeightFieldNumber;
const int CDNUploadMsgImgPrepareRequest::kThumbWidthFieldNumber;
const int CDNUploadMsgImgPrepareRequest::kMsgSourceFieldNumber;
const int CDNUploadMsgImgPrepareRequest::kClientStatFieldNumber;
const int CDNUploadMsgImgPrepareRequest::kSceneFieldNumber;
const int CDNUploadMsgImgPrepareRequest::kLongitudeFieldNumber;
const int CDNUploadMsgImgPrepareRequest::kLatitudeFieldNumber;
const int CDNUploadMsgImgPrepareRequest::kAttachedContentFieldNumber;
const int CDNUploadMsgImgPrepareRequest::kMidHeightFieldNumber;
const int CDNUploadMsgImgPrepareRequest::kMidWidthFieldNumber;
const int CDNUploadMsgImgPrepareRequest::kHDHeightFieldNumber;
const int CDNUploadMsgImgPrepareRequest::kHDWidthFieldNumber;
const int CDNUploadMsgImgPrepareRequest::kAESKeyFieldNumber;
const int CDNUploadMsgImgPrepareRequest::kEncryVerFieldNumber;
const int CDNUploadMsgImgPrepareRequest::kCRC32FieldNumber;
const int CDNUploadMsgImgPrepareRequest::kMsgForwardTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDNUploadMsgImgPrepareRequest::CDNUploadMsgImgPrepareRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CDNUploadMsgImgPrepareRequest)
}
CDNUploadMsgImgPrepareRequest::CDNUploadMsgImgPrepareRequest(const CDNUploadMsgImgPrepareRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientimgid()) {
    clientimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientimgid_);
  }
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromusername()) {
    fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
  }
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tousername()) {
    tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
  }
  msgsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msgsource()) {
    msgsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgsource_);
  }
  attachedcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attachedcontent()) {
    attachedcontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attachedcontent_);
  }
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_aeskey()) {
    aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
  }
  if (from.has_clientstat()) {
    clientstat_ = new ::micromsg::SKBuiltinBuffer_t(*from.clientstat_);
  } else {
    clientstat_ = NULL;
  }
  ::memcpy(&thumbheight_, &from.thumbheight_,
    reinterpret_cast<char*>(&msgforwardtype_) -
    reinterpret_cast<char*>(&thumbheight_) + sizeof(msgforwardtype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.CDNUploadMsgImgPrepareRequest)
}

void CDNUploadMsgImgPrepareRequest::SharedCtor() {
  _cached_size_ = 0;
  clientimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attachedcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clientstat_, 0, reinterpret_cast<char*>(&msgforwardtype_) -
    reinterpret_cast<char*>(&clientstat_) + sizeof(msgforwardtype_));
}

CDNUploadMsgImgPrepareRequest::~CDNUploadMsgImgPrepareRequest() {
  // @@protoc_insertion_point(destructor:micromsg.CDNUploadMsgImgPrepareRequest)
  SharedDtor();
}

void CDNUploadMsgImgPrepareRequest::SharedDtor() {
  clientimgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgsource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attachedcontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete clientstat_;
  }
}

void CDNUploadMsgImgPrepareRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDNUploadMsgImgPrepareRequest::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDNUploadMsgImgPrepareRequest& CDNUploadMsgImgPrepareRequest::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDNUploadMsgImgPrepareRequest* CDNUploadMsgImgPrepareRequest::New(::google::protobuf::Arena* arena) const {
  CDNUploadMsgImgPrepareRequest* n = new CDNUploadMsgImgPrepareRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDNUploadMsgImgPrepareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CDNUploadMsgImgPrepareRequest)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_clientimgid()) {
      GOOGLE_DCHECK(!clientimgid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientimgid_.UnsafeRawStringPointer())->clear();
    }
    if (has_fromusername()) {
      GOOGLE_DCHECK(!fromusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_tousername()) {
      GOOGLE_DCHECK(!tousername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tousername_.UnsafeRawStringPointer())->clear();
    }
    if (has_msgsource()) {
      GOOGLE_DCHECK(!msgsource_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msgsource_.UnsafeRawStringPointer())->clear();
    }
    if (has_attachedcontent()) {
      GOOGLE_DCHECK(!attachedcontent_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*attachedcontent_.UnsafeRawStringPointer())->clear();
    }
    if (has_aeskey()) {
      GOOGLE_DCHECK(!aeskey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*aeskey_.UnsafeRawStringPointer())->clear();
    }
    if (has_clientstat()) {
      GOOGLE_DCHECK(clientstat_ != NULL);
      clientstat_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  thumbheight_ = 0;
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&thumbwidth_, 0, reinterpret_cast<char*>(&hdwidth_) -
      reinterpret_cast<char*>(&thumbwidth_) + sizeof(hdwidth_));
  }
  if (_has_bits_[16 / 32] & 458752u) {
    ::memset(&encryver_, 0, reinterpret_cast<char*>(&msgforwardtype_) -
      reinterpret_cast<char*>(&encryver_) + sizeof(msgforwardtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDNUploadMsgImgPrepareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CDNUploadMsgImgPrepareRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ClientImgId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientimgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientimgid().data(), this->clientimgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CDNUploadMsgImgPrepareRequest.ClientImgId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FromUserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromusername().data(), this->fromusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CDNUploadMsgImgPrepareRequest.FromUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ToUserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tousername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tousername().data(), this->tousername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CDNUploadMsgImgPrepareRequest.ToUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ThumbHeight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_thumbheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thumbheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ThumbWidth = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_thumbwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thumbwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MsgSource = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgsource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgsource().data(), this->msgsource().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CDNUploadMsgImgPrepareRequest.MsgSource");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t ClientStat = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientstat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Scene = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float Longitude = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float Latitude = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AttachedContent = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attachedcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attachedcontent().data(), this->attachedcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CDNUploadMsgImgPrepareRequest.AttachedContent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 MidHeight = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_midheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &midheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 MidWidth = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_midwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &midwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 HDHeight = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_hdheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hdheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 HDWidth = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_hdwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hdwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AESKey = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aeskey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aeskey().data(), this->aeskey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CDNUploadMsgImgPrepareRequest.AESKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 EncryVer = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_encryver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encryver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CRC32 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_crc32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 MsgForwardType = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_msgforwardtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgforwardtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CDNUploadMsgImgPrepareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CDNUploadMsgImgPrepareRequest)
  return false;
#undef DO_
}

void CDNUploadMsgImgPrepareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CDNUploadMsgImgPrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ClientImgId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientimgid().data(), this->clientimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareRequest.ClientImgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientimgid(), output);
  }

  // optional string FromUserName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareRequest.FromUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fromusername(), output);
  }

  // optional string ToUserName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareRequest.ToUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tousername(), output);
  }

  // required int32 ThumbHeight = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->thumbheight(), output);
  }

  // required int32 ThumbWidth = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->thumbwidth(), output);
  }

  // optional string MsgSource = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgsource().data(), this->msgsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareRequest.MsgSource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->msgsource(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t ClientStat = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->clientstat_, output);
  }

  // optional int32 Scene = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->scene(), output);
  }

  // optional float Longitude = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->longitude(), output);
  }

  // optional float Latitude = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->latitude(), output);
  }

  // optional string AttachedContent = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attachedcontent().data(), this->attachedcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareRequest.AttachedContent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->attachedcontent(), output);
  }

  // optional int32 MidHeight = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->midheight(), output);
  }

  // optional int32 MidWidth = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->midwidth(), output);
  }

  // optional int32 HDHeight = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->hdheight(), output);
  }

  // optional int32 HDWidth = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->hdwidth(), output);
  }

  // optional string AESKey = 16;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareRequest.AESKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->aeskey(), output);
  }

  // optional int32 EncryVer = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->encryver(), output);
  }

  // optional uint32 CRC32 = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->crc32(), output);
  }

  // optional uint32 MsgForwardType = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->msgforwardtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CDNUploadMsgImgPrepareRequest)
}

::google::protobuf::uint8* CDNUploadMsgImgPrepareRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CDNUploadMsgImgPrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ClientImgId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientimgid().data(), this->clientimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareRequest.ClientImgId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientimgid(), target);
  }

  // optional string FromUserName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareRequest.FromUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fromusername(), target);
  }

  // optional string ToUserName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareRequest.ToUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tousername(), target);
  }

  // required int32 ThumbHeight = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->thumbheight(), target);
  }

  // required int32 ThumbWidth = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->thumbwidth(), target);
  }

  // optional string MsgSource = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgsource().data(), this->msgsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareRequest.MsgSource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->msgsource(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t ClientStat = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->clientstat_, deterministic, target);
  }

  // optional int32 Scene = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->scene(), target);
  }

  // optional float Longitude = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->longitude(), target);
  }

  // optional float Latitude = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->latitude(), target);
  }

  // optional string AttachedContent = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attachedcontent().data(), this->attachedcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareRequest.AttachedContent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->attachedcontent(), target);
  }

  // optional int32 MidHeight = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->midheight(), target);
  }

  // optional int32 MidWidth = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->midwidth(), target);
  }

  // optional int32 HDHeight = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->hdheight(), target);
  }

  // optional int32 HDWidth = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->hdwidth(), target);
  }

  // optional string AESKey = 16;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareRequest.AESKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->aeskey(), target);
  }

  // optional int32 EncryVer = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->encryver(), target);
  }

  // optional uint32 CRC32 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->crc32(), target);
  }

  // optional uint32 MsgForwardType = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->msgforwardtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CDNUploadMsgImgPrepareRequest)
  return target;
}

size_t CDNUploadMsgImgPrepareRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CDNUploadMsgImgPrepareRequest)
  size_t total_size = 0;

  if (has_thumbheight()) {
    // required int32 ThumbHeight = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thumbheight());
  }

  if (has_thumbwidth()) {
    // required int32 ThumbWidth = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thumbwidth());
  }

  return total_size;
}
size_t CDNUploadMsgImgPrepareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CDNUploadMsgImgPrepareRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000180) ^ 0x00000180) == 0) {  // All required fields are present.
    // required int32 ThumbHeight = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thumbheight());

    // required int32 ThumbWidth = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thumbwidth());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string ClientImgId = 1;
    if (has_clientimgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientimgid());
    }

    // optional string FromUserName = 2;
    if (has_fromusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromusername());
    }

    // optional string ToUserName = 3;
    if (has_tousername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tousername());
    }

    // optional string MsgSource = 6;
    if (has_msgsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgsource());
    }

    // optional string AttachedContent = 11;
    if (has_attachedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attachedcontent());
    }

    // optional string AESKey = 16;
    if (has_aeskey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aeskey());
    }

    // optional .micromsg.SKBuiltinBuffer_t ClientStat = 7;
    if (has_clientstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clientstat_);
    }

  }
  if (_has_bits_[8 / 32] & 65024u) {
    // optional int32 Scene = 8;
    if (has_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene());
    }

    // optional float Longitude = 9;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

    // optional float Latitude = 10;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional int32 MidHeight = 12;
    if (has_midheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->midheight());
    }

    // optional int32 MidWidth = 13;
    if (has_midwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->midwidth());
    }

    // optional int32 HDHeight = 14;
    if (has_hdheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hdheight());
    }

    // optional int32 HDWidth = 15;
    if (has_hdwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hdwidth());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional int32 EncryVer = 17;
    if (has_encryver()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->encryver());
    }

    // optional uint32 CRC32 = 18;
    if (has_crc32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc32());
    }

    // optional uint32 MsgForwardType = 19;
    if (has_msgforwardtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgforwardtype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDNUploadMsgImgPrepareRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CDNUploadMsgImgPrepareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CDNUploadMsgImgPrepareRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDNUploadMsgImgPrepareRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CDNUploadMsgImgPrepareRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CDNUploadMsgImgPrepareRequest)
    MergeFrom(*source);
  }
}

void CDNUploadMsgImgPrepareRequest::MergeFrom(const CDNUploadMsgImgPrepareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CDNUploadMsgImgPrepareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientimgid();
      clientimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientimgid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fromusername();
      fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_tousername();
      tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_msgsource();
      msgsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgsource_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_attachedcontent();
      attachedcontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attachedcontent_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_aeskey();
      aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_clientstat()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.clientstat());
    }
    if (cached_has_bits & 0x00000080u) {
      thumbheight_ = from.thumbheight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      thumbwidth_ = from.thumbwidth_;
    }
    if (cached_has_bits & 0x00000200u) {
      scene_ = from.scene_;
    }
    if (cached_has_bits & 0x00000400u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000800u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00001000u) {
      midheight_ = from.midheight_;
    }
    if (cached_has_bits & 0x00002000u) {
      midwidth_ = from.midwidth_;
    }
    if (cached_has_bits & 0x00004000u) {
      hdheight_ = from.hdheight_;
    }
    if (cached_has_bits & 0x00008000u) {
      hdwidth_ = from.hdwidth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      encryver_ = from.encryver_;
    }
    if (cached_has_bits & 0x00020000u) {
      crc32_ = from.crc32_;
    }
    if (cached_has_bits & 0x00040000u) {
      msgforwardtype_ = from.msgforwardtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDNUploadMsgImgPrepareRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CDNUploadMsgImgPrepareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDNUploadMsgImgPrepareRequest::CopyFrom(const CDNUploadMsgImgPrepareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CDNUploadMsgImgPrepareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDNUploadMsgImgPrepareRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000180) != 0x00000180) return false;
  if (has_clientstat()) {
    if (!this->clientstat_->IsInitialized()) return false;
  }
  return true;
}

void CDNUploadMsgImgPrepareRequest::Swap(CDNUploadMsgImgPrepareRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDNUploadMsgImgPrepareRequest::InternalSwap(CDNUploadMsgImgPrepareRequest* other) {
  clientimgid_.Swap(&other->clientimgid_);
  fromusername_.Swap(&other->fromusername_);
  tousername_.Swap(&other->tousername_);
  msgsource_.Swap(&other->msgsource_);
  attachedcontent_.Swap(&other->attachedcontent_);
  aeskey_.Swap(&other->aeskey_);
  std::swap(clientstat_, other->clientstat_);
  std::swap(thumbheight_, other->thumbheight_);
  std::swap(thumbwidth_, other->thumbwidth_);
  std::swap(scene_, other->scene_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(midheight_, other->midheight_);
  std::swap(midwidth_, other->midwidth_);
  std::swap(hdheight_, other->hdheight_);
  std::swap(hdwidth_, other->hdwidth_);
  std::swap(encryver_, other->encryver_);
  std::swap(crc32_, other->crc32_);
  std::swap(msgforwardtype_, other->msgforwardtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDNUploadMsgImgPrepareRequest::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDNUploadMsgImgPrepareRequest

// optional string ClientImgId = 1;
bool CDNUploadMsgImgPrepareRequest::has_clientimgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDNUploadMsgImgPrepareRequest::set_has_clientimgid() {
  _has_bits_[0] |= 0x00000001u;
}
void CDNUploadMsgImgPrepareRequest::clear_has_clientimgid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDNUploadMsgImgPrepareRequest::clear_clientimgid() {
  clientimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientimgid();
}
const ::std::string& CDNUploadMsgImgPrepareRequest::clientimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.ClientImgId)
  return clientimgid_.GetNoArena();
}
void CDNUploadMsgImgPrepareRequest::set_clientimgid(const ::std::string& value) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.ClientImgId)
}
#if LANG_CXX11
void CDNUploadMsgImgPrepareRequest::set_clientimgid(::std::string&& value) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareRequest.ClientImgId)
}
#endif
void CDNUploadMsgImgPrepareRequest::set_clientimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareRequest.ClientImgId)
}
void CDNUploadMsgImgPrepareRequest::set_clientimgid(const char* value, size_t size) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareRequest.ClientImgId)
}
::std::string* CDNUploadMsgImgPrepareRequest::mutable_clientimgid() {
  set_has_clientimgid();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareRequest.ClientImgId)
  return clientimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDNUploadMsgImgPrepareRequest::release_clientimgid() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareRequest.ClientImgId)
  clear_has_clientimgid();
  return clientimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDNUploadMsgImgPrepareRequest::set_allocated_clientimgid(::std::string* clientimgid) {
  if (clientimgid != NULL) {
    set_has_clientimgid();
  } else {
    clear_has_clientimgid();
  }
  clientimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientimgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareRequest.ClientImgId)
}

// optional string FromUserName = 2;
bool CDNUploadMsgImgPrepareRequest::has_fromusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDNUploadMsgImgPrepareRequest::set_has_fromusername() {
  _has_bits_[0] |= 0x00000002u;
}
void CDNUploadMsgImgPrepareRequest::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDNUploadMsgImgPrepareRequest::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
const ::std::string& CDNUploadMsgImgPrepareRequest::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.FromUserName)
  return fromusername_.GetNoArena();
}
void CDNUploadMsgImgPrepareRequest::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.FromUserName)
}
#if LANG_CXX11
void CDNUploadMsgImgPrepareRequest::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareRequest.FromUserName)
}
#endif
void CDNUploadMsgImgPrepareRequest::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareRequest.FromUserName)
}
void CDNUploadMsgImgPrepareRequest::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareRequest.FromUserName)
}
::std::string* CDNUploadMsgImgPrepareRequest::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareRequest.FromUserName)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDNUploadMsgImgPrepareRequest::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareRequest.FromUserName)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDNUploadMsgImgPrepareRequest::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareRequest.FromUserName)
}

// optional string ToUserName = 3;
bool CDNUploadMsgImgPrepareRequest::has_tousername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDNUploadMsgImgPrepareRequest::set_has_tousername() {
  _has_bits_[0] |= 0x00000004u;
}
void CDNUploadMsgImgPrepareRequest::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDNUploadMsgImgPrepareRequest::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
const ::std::string& CDNUploadMsgImgPrepareRequest::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.ToUserName)
  return tousername_.GetNoArena();
}
void CDNUploadMsgImgPrepareRequest::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.ToUserName)
}
#if LANG_CXX11
void CDNUploadMsgImgPrepareRequest::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareRequest.ToUserName)
}
#endif
void CDNUploadMsgImgPrepareRequest::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareRequest.ToUserName)
}
void CDNUploadMsgImgPrepareRequest::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareRequest.ToUserName)
}
::std::string* CDNUploadMsgImgPrepareRequest::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareRequest.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDNUploadMsgImgPrepareRequest::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareRequest.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDNUploadMsgImgPrepareRequest::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareRequest.ToUserName)
}

// required int32 ThumbHeight = 4;
bool CDNUploadMsgImgPrepareRequest::has_thumbheight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDNUploadMsgImgPrepareRequest::set_has_thumbheight() {
  _has_bits_[0] |= 0x00000080u;
}
void CDNUploadMsgImgPrepareRequest::clear_has_thumbheight() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDNUploadMsgImgPrepareRequest::clear_thumbheight() {
  thumbheight_ = 0;
  clear_has_thumbheight();
}
::google::protobuf::int32 CDNUploadMsgImgPrepareRequest::thumbheight() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.ThumbHeight)
  return thumbheight_;
}
void CDNUploadMsgImgPrepareRequest::set_thumbheight(::google::protobuf::int32 value) {
  set_has_thumbheight();
  thumbheight_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.ThumbHeight)
}

// required int32 ThumbWidth = 5;
bool CDNUploadMsgImgPrepareRequest::has_thumbwidth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CDNUploadMsgImgPrepareRequest::set_has_thumbwidth() {
  _has_bits_[0] |= 0x00000100u;
}
void CDNUploadMsgImgPrepareRequest::clear_has_thumbwidth() {
  _has_bits_[0] &= ~0x00000100u;
}
void CDNUploadMsgImgPrepareRequest::clear_thumbwidth() {
  thumbwidth_ = 0;
  clear_has_thumbwidth();
}
::google::protobuf::int32 CDNUploadMsgImgPrepareRequest::thumbwidth() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.ThumbWidth)
  return thumbwidth_;
}
void CDNUploadMsgImgPrepareRequest::set_thumbwidth(::google::protobuf::int32 value) {
  set_has_thumbwidth();
  thumbwidth_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.ThumbWidth)
}

// optional string MsgSource = 6;
bool CDNUploadMsgImgPrepareRequest::has_msgsource() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDNUploadMsgImgPrepareRequest::set_has_msgsource() {
  _has_bits_[0] |= 0x00000008u;
}
void CDNUploadMsgImgPrepareRequest::clear_has_msgsource() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDNUploadMsgImgPrepareRequest::clear_msgsource() {
  msgsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgsource();
}
const ::std::string& CDNUploadMsgImgPrepareRequest::msgsource() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.MsgSource)
  return msgsource_.GetNoArena();
}
void CDNUploadMsgImgPrepareRequest::set_msgsource(const ::std::string& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.MsgSource)
}
#if LANG_CXX11
void CDNUploadMsgImgPrepareRequest::set_msgsource(::std::string&& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareRequest.MsgSource)
}
#endif
void CDNUploadMsgImgPrepareRequest::set_msgsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareRequest.MsgSource)
}
void CDNUploadMsgImgPrepareRequest::set_msgsource(const char* value, size_t size) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareRequest.MsgSource)
}
::std::string* CDNUploadMsgImgPrepareRequest::mutable_msgsource() {
  set_has_msgsource();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareRequest.MsgSource)
  return msgsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDNUploadMsgImgPrepareRequest::release_msgsource() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareRequest.MsgSource)
  clear_has_msgsource();
  return msgsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDNUploadMsgImgPrepareRequest::set_allocated_msgsource(::std::string* msgsource) {
  if (msgsource != NULL) {
    set_has_msgsource();
  } else {
    clear_has_msgsource();
  }
  msgsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgsource);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareRequest.MsgSource)
}

// optional .micromsg.SKBuiltinBuffer_t ClientStat = 7;
bool CDNUploadMsgImgPrepareRequest::has_clientstat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDNUploadMsgImgPrepareRequest::set_has_clientstat() {
  _has_bits_[0] |= 0x00000040u;
}
void CDNUploadMsgImgPrepareRequest::clear_has_clientstat() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDNUploadMsgImgPrepareRequest::clear_clientstat() {
  if (clientstat_ != NULL) clientstat_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_clientstat();
}
const ::micromsg::SKBuiltinBuffer_t& CDNUploadMsgImgPrepareRequest::clientstat() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.ClientStat)
  return clientstat_ != NULL ? *clientstat_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* CDNUploadMsgImgPrepareRequest::mutable_clientstat() {
  set_has_clientstat();
  if (clientstat_ == NULL) {
    clientstat_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareRequest.ClientStat)
  return clientstat_;
}
::micromsg::SKBuiltinBuffer_t* CDNUploadMsgImgPrepareRequest::release_clientstat() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareRequest.ClientStat)
  clear_has_clientstat();
  ::micromsg::SKBuiltinBuffer_t* temp = clientstat_;
  clientstat_ = NULL;
  return temp;
}
void CDNUploadMsgImgPrepareRequest::set_allocated_clientstat(::micromsg::SKBuiltinBuffer_t* clientstat) {
  delete clientstat_;
  clientstat_ = clientstat;
  if (clientstat) {
    set_has_clientstat();
  } else {
    clear_has_clientstat();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareRequest.ClientStat)
}

// optional int32 Scene = 8;
bool CDNUploadMsgImgPrepareRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CDNUploadMsgImgPrepareRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000200u;
}
void CDNUploadMsgImgPrepareRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000200u;
}
void CDNUploadMsgImgPrepareRequest::clear_scene() {
  scene_ = 0;
  clear_has_scene();
}
::google::protobuf::int32 CDNUploadMsgImgPrepareRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.Scene)
  return scene_;
}
void CDNUploadMsgImgPrepareRequest::set_scene(::google::protobuf::int32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.Scene)
}

// optional float Longitude = 9;
bool CDNUploadMsgImgPrepareRequest::has_longitude() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CDNUploadMsgImgPrepareRequest::set_has_longitude() {
  _has_bits_[0] |= 0x00000400u;
}
void CDNUploadMsgImgPrepareRequest::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000400u;
}
void CDNUploadMsgImgPrepareRequest::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
float CDNUploadMsgImgPrepareRequest::longitude() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.Longitude)
  return longitude_;
}
void CDNUploadMsgImgPrepareRequest::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.Longitude)
}

// optional float Latitude = 10;
bool CDNUploadMsgImgPrepareRequest::has_latitude() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CDNUploadMsgImgPrepareRequest::set_has_latitude() {
  _has_bits_[0] |= 0x00000800u;
}
void CDNUploadMsgImgPrepareRequest::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000800u;
}
void CDNUploadMsgImgPrepareRequest::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
float CDNUploadMsgImgPrepareRequest::latitude() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.Latitude)
  return latitude_;
}
void CDNUploadMsgImgPrepareRequest::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.Latitude)
}

// optional string AttachedContent = 11;
bool CDNUploadMsgImgPrepareRequest::has_attachedcontent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDNUploadMsgImgPrepareRequest::set_has_attachedcontent() {
  _has_bits_[0] |= 0x00000010u;
}
void CDNUploadMsgImgPrepareRequest::clear_has_attachedcontent() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDNUploadMsgImgPrepareRequest::clear_attachedcontent() {
  attachedcontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attachedcontent();
}
const ::std::string& CDNUploadMsgImgPrepareRequest::attachedcontent() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.AttachedContent)
  return attachedcontent_.GetNoArena();
}
void CDNUploadMsgImgPrepareRequest::set_attachedcontent(const ::std::string& value) {
  set_has_attachedcontent();
  attachedcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.AttachedContent)
}
#if LANG_CXX11
void CDNUploadMsgImgPrepareRequest::set_attachedcontent(::std::string&& value) {
  set_has_attachedcontent();
  attachedcontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareRequest.AttachedContent)
}
#endif
void CDNUploadMsgImgPrepareRequest::set_attachedcontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attachedcontent();
  attachedcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareRequest.AttachedContent)
}
void CDNUploadMsgImgPrepareRequest::set_attachedcontent(const char* value, size_t size) {
  set_has_attachedcontent();
  attachedcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareRequest.AttachedContent)
}
::std::string* CDNUploadMsgImgPrepareRequest::mutable_attachedcontent() {
  set_has_attachedcontent();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareRequest.AttachedContent)
  return attachedcontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDNUploadMsgImgPrepareRequest::release_attachedcontent() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareRequest.AttachedContent)
  clear_has_attachedcontent();
  return attachedcontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDNUploadMsgImgPrepareRequest::set_allocated_attachedcontent(::std::string* attachedcontent) {
  if (attachedcontent != NULL) {
    set_has_attachedcontent();
  } else {
    clear_has_attachedcontent();
  }
  attachedcontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attachedcontent);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareRequest.AttachedContent)
}

// optional int32 MidHeight = 12;
bool CDNUploadMsgImgPrepareRequest::has_midheight() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CDNUploadMsgImgPrepareRequest::set_has_midheight() {
  _has_bits_[0] |= 0x00001000u;
}
void CDNUploadMsgImgPrepareRequest::clear_has_midheight() {
  _has_bits_[0] &= ~0x00001000u;
}
void CDNUploadMsgImgPrepareRequest::clear_midheight() {
  midheight_ = 0;
  clear_has_midheight();
}
::google::protobuf::int32 CDNUploadMsgImgPrepareRequest::midheight() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.MidHeight)
  return midheight_;
}
void CDNUploadMsgImgPrepareRequest::set_midheight(::google::protobuf::int32 value) {
  set_has_midheight();
  midheight_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.MidHeight)
}

// optional int32 MidWidth = 13;
bool CDNUploadMsgImgPrepareRequest::has_midwidth() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CDNUploadMsgImgPrepareRequest::set_has_midwidth() {
  _has_bits_[0] |= 0x00002000u;
}
void CDNUploadMsgImgPrepareRequest::clear_has_midwidth() {
  _has_bits_[0] &= ~0x00002000u;
}
void CDNUploadMsgImgPrepareRequest::clear_midwidth() {
  midwidth_ = 0;
  clear_has_midwidth();
}
::google::protobuf::int32 CDNUploadMsgImgPrepareRequest::midwidth() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.MidWidth)
  return midwidth_;
}
void CDNUploadMsgImgPrepareRequest::set_midwidth(::google::protobuf::int32 value) {
  set_has_midwidth();
  midwidth_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.MidWidth)
}

// optional int32 HDHeight = 14;
bool CDNUploadMsgImgPrepareRequest::has_hdheight() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CDNUploadMsgImgPrepareRequest::set_has_hdheight() {
  _has_bits_[0] |= 0x00004000u;
}
void CDNUploadMsgImgPrepareRequest::clear_has_hdheight() {
  _has_bits_[0] &= ~0x00004000u;
}
void CDNUploadMsgImgPrepareRequest::clear_hdheight() {
  hdheight_ = 0;
  clear_has_hdheight();
}
::google::protobuf::int32 CDNUploadMsgImgPrepareRequest::hdheight() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.HDHeight)
  return hdheight_;
}
void CDNUploadMsgImgPrepareRequest::set_hdheight(::google::protobuf::int32 value) {
  set_has_hdheight();
  hdheight_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.HDHeight)
}

// optional int32 HDWidth = 15;
bool CDNUploadMsgImgPrepareRequest::has_hdwidth() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CDNUploadMsgImgPrepareRequest::set_has_hdwidth() {
  _has_bits_[0] |= 0x00008000u;
}
void CDNUploadMsgImgPrepareRequest::clear_has_hdwidth() {
  _has_bits_[0] &= ~0x00008000u;
}
void CDNUploadMsgImgPrepareRequest::clear_hdwidth() {
  hdwidth_ = 0;
  clear_has_hdwidth();
}
::google::protobuf::int32 CDNUploadMsgImgPrepareRequest::hdwidth() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.HDWidth)
  return hdwidth_;
}
void CDNUploadMsgImgPrepareRequest::set_hdwidth(::google::protobuf::int32 value) {
  set_has_hdwidth();
  hdwidth_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.HDWidth)
}

// optional string AESKey = 16;
bool CDNUploadMsgImgPrepareRequest::has_aeskey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDNUploadMsgImgPrepareRequest::set_has_aeskey() {
  _has_bits_[0] |= 0x00000020u;
}
void CDNUploadMsgImgPrepareRequest::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDNUploadMsgImgPrepareRequest::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
const ::std::string& CDNUploadMsgImgPrepareRequest::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.AESKey)
  return aeskey_.GetNoArena();
}
void CDNUploadMsgImgPrepareRequest::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.AESKey)
}
#if LANG_CXX11
void CDNUploadMsgImgPrepareRequest::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareRequest.AESKey)
}
#endif
void CDNUploadMsgImgPrepareRequest::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareRequest.AESKey)
}
void CDNUploadMsgImgPrepareRequest::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareRequest.AESKey)
}
::std::string* CDNUploadMsgImgPrepareRequest::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareRequest.AESKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDNUploadMsgImgPrepareRequest::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareRequest.AESKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDNUploadMsgImgPrepareRequest::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareRequest.AESKey)
}

// optional int32 EncryVer = 17;
bool CDNUploadMsgImgPrepareRequest::has_encryver() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CDNUploadMsgImgPrepareRequest::set_has_encryver() {
  _has_bits_[0] |= 0x00010000u;
}
void CDNUploadMsgImgPrepareRequest::clear_has_encryver() {
  _has_bits_[0] &= ~0x00010000u;
}
void CDNUploadMsgImgPrepareRequest::clear_encryver() {
  encryver_ = 0;
  clear_has_encryver();
}
::google::protobuf::int32 CDNUploadMsgImgPrepareRequest::encryver() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.EncryVer)
  return encryver_;
}
void CDNUploadMsgImgPrepareRequest::set_encryver(::google::protobuf::int32 value) {
  set_has_encryver();
  encryver_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.EncryVer)
}

// optional uint32 CRC32 = 18;
bool CDNUploadMsgImgPrepareRequest::has_crc32() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CDNUploadMsgImgPrepareRequest::set_has_crc32() {
  _has_bits_[0] |= 0x00020000u;
}
void CDNUploadMsgImgPrepareRequest::clear_has_crc32() {
  _has_bits_[0] &= ~0x00020000u;
}
void CDNUploadMsgImgPrepareRequest::clear_crc32() {
  crc32_ = 0u;
  clear_has_crc32();
}
::google::protobuf::uint32 CDNUploadMsgImgPrepareRequest::crc32() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.CRC32)
  return crc32_;
}
void CDNUploadMsgImgPrepareRequest::set_crc32(::google::protobuf::uint32 value) {
  set_has_crc32();
  crc32_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.CRC32)
}

// optional uint32 MsgForwardType = 19;
bool CDNUploadMsgImgPrepareRequest::has_msgforwardtype() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CDNUploadMsgImgPrepareRequest::set_has_msgforwardtype() {
  _has_bits_[0] |= 0x00040000u;
}
void CDNUploadMsgImgPrepareRequest::clear_has_msgforwardtype() {
  _has_bits_[0] &= ~0x00040000u;
}
void CDNUploadMsgImgPrepareRequest::clear_msgforwardtype() {
  msgforwardtype_ = 0u;
  clear_has_msgforwardtype();
}
::google::protobuf::uint32 CDNUploadMsgImgPrepareRequest::msgforwardtype() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.MsgForwardType)
  return msgforwardtype_;
}
void CDNUploadMsgImgPrepareRequest::set_msgforwardtype(::google::protobuf::uint32 value) {
  set_has_msgforwardtype();
  msgforwardtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.MsgForwardType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDNUploadMsgImgPrepareResponse::kBaseResponseFieldNumber;
const int CDNUploadMsgImgPrepareResponse::kClientImgIdFieldNumber;
const int CDNUploadMsgImgPrepareResponse::kFromUserNameFieldNumber;
const int CDNUploadMsgImgPrepareResponse::kToUserNameFieldNumber;
const int CDNUploadMsgImgPrepareResponse::kCreateTimeFieldNumber;
const int CDNUploadMsgImgPrepareResponse::kNewMsgIdFieldNumber;
const int CDNUploadMsgImgPrepareResponse::kAESKeyFieldNumber;
const int CDNUploadMsgImgPrepareResponse::kFileIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDNUploadMsgImgPrepareResponse::CDNUploadMsgImgPrepareResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CDNUploadMsgImgPrepareResponse)
}
CDNUploadMsgImgPrepareResponse::CDNUploadMsgImgPrepareResponse(const CDNUploadMsgImgPrepareResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientimgid()) {
    clientimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientimgid_);
  }
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromusername()) {
    fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
  }
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tousername()) {
    tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
  }
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_aeskey()) {
    aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
  }
  fileid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fileid()) {
    fileid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fileid_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&createtime_, &from.createtime_,
    reinterpret_cast<char*>(&newmsgid_) -
    reinterpret_cast<char*>(&createtime_) + sizeof(newmsgid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.CDNUploadMsgImgPrepareResponse)
}

void CDNUploadMsgImgPrepareResponse::SharedCtor() {
  _cached_size_ = 0;
  clientimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fileid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&newmsgid_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(newmsgid_));
}

CDNUploadMsgImgPrepareResponse::~CDNUploadMsgImgPrepareResponse() {
  // @@protoc_insertion_point(destructor:micromsg.CDNUploadMsgImgPrepareResponse)
  SharedDtor();
}

void CDNUploadMsgImgPrepareResponse::SharedDtor() {
  clientimgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fileid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void CDNUploadMsgImgPrepareResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDNUploadMsgImgPrepareResponse::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDNUploadMsgImgPrepareResponse& CDNUploadMsgImgPrepareResponse::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDNUploadMsgImgPrepareResponse* CDNUploadMsgImgPrepareResponse::New(::google::protobuf::Arena* arena) const {
  CDNUploadMsgImgPrepareResponse* n = new CDNUploadMsgImgPrepareResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDNUploadMsgImgPrepareResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CDNUploadMsgImgPrepareResponse)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_clientimgid()) {
      GOOGLE_DCHECK(!clientimgid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientimgid_.UnsafeRawStringPointer())->clear();
    }
    if (has_fromusername()) {
      GOOGLE_DCHECK(!fromusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_tousername()) {
      GOOGLE_DCHECK(!tousername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tousername_.UnsafeRawStringPointer())->clear();
    }
    if (has_aeskey()) {
      GOOGLE_DCHECK(!aeskey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*aeskey_.UnsafeRawStringPointer())->clear();
    }
    if (has_fileid()) {
      GOOGLE_DCHECK(!fileid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fileid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&createtime_, 0, reinterpret_cast<char*>(&newmsgid_) -
      reinterpret_cast<char*>(&createtime_) + sizeof(newmsgid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDNUploadMsgImgPrepareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CDNUploadMsgImgPrepareResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientImgId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientimgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientimgid().data(), this->clientimgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CDNUploadMsgImgPrepareResponse.ClientImgId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FromUserName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromusername().data(), this->fromusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CDNUploadMsgImgPrepareResponse.FromUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ToUserName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tousername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tousername().data(), this->tousername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CDNUploadMsgImgPrepareResponse.ToUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CreateTime = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_createtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 NewMsgId = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_newmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AESKey = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aeskey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aeskey().data(), this->aeskey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CDNUploadMsgImgPrepareResponse.AESKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FileId = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fileid().data(), this->fileid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CDNUploadMsgImgPrepareResponse.FileId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CDNUploadMsgImgPrepareResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CDNUploadMsgImgPrepareResponse)
  return false;
#undef DO_
}

void CDNUploadMsgImgPrepareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CDNUploadMsgImgPrepareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string ClientImgId = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientimgid().data(), this->clientimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareResponse.ClientImgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->clientimgid(), output);
  }

  // optional string FromUserName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareResponse.FromUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fromusername(), output);
  }

  // optional string ToUserName = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareResponse.ToUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tousername(), output);
  }

  // required uint32 CreateTime = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->createtime(), output);
  }

  // optional uint64 NewMsgId = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->newmsgid(), output);
  }

  // optional string AESKey = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareResponse.AESKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->aeskey(), output);
  }

  // optional string FileId = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareResponse.FileId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->fileid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CDNUploadMsgImgPrepareResponse)
}

::google::protobuf::uint8* CDNUploadMsgImgPrepareResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CDNUploadMsgImgPrepareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string ClientImgId = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientimgid().data(), this->clientimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareResponse.ClientImgId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clientimgid(), target);
  }

  // optional string FromUserName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareResponse.FromUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fromusername(), target);
  }

  // optional string ToUserName = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareResponse.ToUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tousername(), target);
  }

  // required uint32 CreateTime = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->createtime(), target);
  }

  // optional uint64 NewMsgId = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->newmsgid(), target);
  }

  // optional string AESKey = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareResponse.AESKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->aeskey(), target);
  }

  // optional string FileId = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgPrepareResponse.FileId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->fileid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CDNUploadMsgImgPrepareResponse)
  return target;
}

size_t CDNUploadMsgImgPrepareResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CDNUploadMsgImgPrepareResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_createtime()) {
    // required uint32 CreateTime = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());
  }

  return total_size;
}
size_t CDNUploadMsgImgPrepareResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CDNUploadMsgImgPrepareResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000060) ^ 0x00000060) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 CreateTime = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string ClientImgId = 3;
    if (has_clientimgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientimgid());
    }

    // optional string FromUserName = 4;
    if (has_fromusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromusername());
    }

    // optional string ToUserName = 5;
    if (has_tousername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tousername());
    }

    // optional string AESKey = 11;
    if (has_aeskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aeskey());
    }

    // optional string FileId = 12;
    if (has_fileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fileid());
    }

  }
  // optional uint64 NewMsgId = 10;
  if (has_newmsgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->newmsgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDNUploadMsgImgPrepareResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CDNUploadMsgImgPrepareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CDNUploadMsgImgPrepareResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDNUploadMsgImgPrepareResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CDNUploadMsgImgPrepareResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CDNUploadMsgImgPrepareResponse)
    MergeFrom(*source);
  }
}

void CDNUploadMsgImgPrepareResponse::MergeFrom(const CDNUploadMsgImgPrepareResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CDNUploadMsgImgPrepareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientimgid();
      clientimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientimgid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fromusername();
      fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_tousername();
      tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_aeskey();
      aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_fileid();
      fileid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fileid_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000040u) {
      createtime_ = from.createtime_;
    }
    if (cached_has_bits & 0x00000080u) {
      newmsgid_ = from.newmsgid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDNUploadMsgImgPrepareResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CDNUploadMsgImgPrepareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDNUploadMsgImgPrepareResponse::CopyFrom(const CDNUploadMsgImgPrepareResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CDNUploadMsgImgPrepareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDNUploadMsgImgPrepareResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000060) != 0x00000060) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void CDNUploadMsgImgPrepareResponse::Swap(CDNUploadMsgImgPrepareResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDNUploadMsgImgPrepareResponse::InternalSwap(CDNUploadMsgImgPrepareResponse* other) {
  clientimgid_.Swap(&other->clientimgid_);
  fromusername_.Swap(&other->fromusername_);
  tousername_.Swap(&other->tousername_);
  aeskey_.Swap(&other->aeskey_);
  fileid_.Swap(&other->fileid_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(createtime_, other->createtime_);
  std::swap(newmsgid_, other->newmsgid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDNUploadMsgImgPrepareResponse::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDNUploadMsgImgPrepareResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool CDNUploadMsgImgPrepareResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDNUploadMsgImgPrepareResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000020u;
}
void CDNUploadMsgImgPrepareResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDNUploadMsgImgPrepareResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& CDNUploadMsgImgPrepareResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* CDNUploadMsgImgPrepareResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* CDNUploadMsgImgPrepareResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void CDNUploadMsgImgPrepareResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareResponse.BaseResponse)
}

// optional string ClientImgId = 3;
bool CDNUploadMsgImgPrepareResponse::has_clientimgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDNUploadMsgImgPrepareResponse::set_has_clientimgid() {
  _has_bits_[0] |= 0x00000001u;
}
void CDNUploadMsgImgPrepareResponse::clear_has_clientimgid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDNUploadMsgImgPrepareResponse::clear_clientimgid() {
  clientimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientimgid();
}
const ::std::string& CDNUploadMsgImgPrepareResponse::clientimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareResponse.ClientImgId)
  return clientimgid_.GetNoArena();
}
void CDNUploadMsgImgPrepareResponse::set_clientimgid(const ::std::string& value) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareResponse.ClientImgId)
}
#if LANG_CXX11
void CDNUploadMsgImgPrepareResponse::set_clientimgid(::std::string&& value) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareResponse.ClientImgId)
}
#endif
void CDNUploadMsgImgPrepareResponse::set_clientimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareResponse.ClientImgId)
}
void CDNUploadMsgImgPrepareResponse::set_clientimgid(const char* value, size_t size) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareResponse.ClientImgId)
}
::std::string* CDNUploadMsgImgPrepareResponse::mutable_clientimgid() {
  set_has_clientimgid();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareResponse.ClientImgId)
  return clientimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDNUploadMsgImgPrepareResponse::release_clientimgid() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareResponse.ClientImgId)
  clear_has_clientimgid();
  return clientimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDNUploadMsgImgPrepareResponse::set_allocated_clientimgid(::std::string* clientimgid) {
  if (clientimgid != NULL) {
    set_has_clientimgid();
  } else {
    clear_has_clientimgid();
  }
  clientimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientimgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareResponse.ClientImgId)
}

// optional string FromUserName = 4;
bool CDNUploadMsgImgPrepareResponse::has_fromusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDNUploadMsgImgPrepareResponse::set_has_fromusername() {
  _has_bits_[0] |= 0x00000002u;
}
void CDNUploadMsgImgPrepareResponse::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDNUploadMsgImgPrepareResponse::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
const ::std::string& CDNUploadMsgImgPrepareResponse::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareResponse.FromUserName)
  return fromusername_.GetNoArena();
}
void CDNUploadMsgImgPrepareResponse::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareResponse.FromUserName)
}
#if LANG_CXX11
void CDNUploadMsgImgPrepareResponse::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareResponse.FromUserName)
}
#endif
void CDNUploadMsgImgPrepareResponse::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareResponse.FromUserName)
}
void CDNUploadMsgImgPrepareResponse::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareResponse.FromUserName)
}
::std::string* CDNUploadMsgImgPrepareResponse::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareResponse.FromUserName)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDNUploadMsgImgPrepareResponse::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareResponse.FromUserName)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDNUploadMsgImgPrepareResponse::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareResponse.FromUserName)
}

// optional string ToUserName = 5;
bool CDNUploadMsgImgPrepareResponse::has_tousername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDNUploadMsgImgPrepareResponse::set_has_tousername() {
  _has_bits_[0] |= 0x00000004u;
}
void CDNUploadMsgImgPrepareResponse::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDNUploadMsgImgPrepareResponse::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
const ::std::string& CDNUploadMsgImgPrepareResponse::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareResponse.ToUserName)
  return tousername_.GetNoArena();
}
void CDNUploadMsgImgPrepareResponse::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareResponse.ToUserName)
}
#if LANG_CXX11
void CDNUploadMsgImgPrepareResponse::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareResponse.ToUserName)
}
#endif
void CDNUploadMsgImgPrepareResponse::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareResponse.ToUserName)
}
void CDNUploadMsgImgPrepareResponse::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareResponse.ToUserName)
}
::std::string* CDNUploadMsgImgPrepareResponse::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareResponse.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDNUploadMsgImgPrepareResponse::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareResponse.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDNUploadMsgImgPrepareResponse::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareResponse.ToUserName)
}

// required uint32 CreateTime = 9;
bool CDNUploadMsgImgPrepareResponse::has_createtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDNUploadMsgImgPrepareResponse::set_has_createtime() {
  _has_bits_[0] |= 0x00000040u;
}
void CDNUploadMsgImgPrepareResponse::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDNUploadMsgImgPrepareResponse::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
::google::protobuf::uint32 CDNUploadMsgImgPrepareResponse::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareResponse.CreateTime)
  return createtime_;
}
void CDNUploadMsgImgPrepareResponse::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareResponse.CreateTime)
}

// optional uint64 NewMsgId = 10;
bool CDNUploadMsgImgPrepareResponse::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDNUploadMsgImgPrepareResponse::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000080u;
}
void CDNUploadMsgImgPrepareResponse::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDNUploadMsgImgPrepareResponse::clear_newmsgid() {
  newmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_newmsgid();
}
::google::protobuf::uint64 CDNUploadMsgImgPrepareResponse::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareResponse.NewMsgId)
  return newmsgid_;
}
void CDNUploadMsgImgPrepareResponse::set_newmsgid(::google::protobuf::uint64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareResponse.NewMsgId)
}

// optional string AESKey = 11;
bool CDNUploadMsgImgPrepareResponse::has_aeskey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDNUploadMsgImgPrepareResponse::set_has_aeskey() {
  _has_bits_[0] |= 0x00000008u;
}
void CDNUploadMsgImgPrepareResponse::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDNUploadMsgImgPrepareResponse::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
const ::std::string& CDNUploadMsgImgPrepareResponse::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareResponse.AESKey)
  return aeskey_.GetNoArena();
}
void CDNUploadMsgImgPrepareResponse::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareResponse.AESKey)
}
#if LANG_CXX11
void CDNUploadMsgImgPrepareResponse::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareResponse.AESKey)
}
#endif
void CDNUploadMsgImgPrepareResponse::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareResponse.AESKey)
}
void CDNUploadMsgImgPrepareResponse::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareResponse.AESKey)
}
::std::string* CDNUploadMsgImgPrepareResponse::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareResponse.AESKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDNUploadMsgImgPrepareResponse::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareResponse.AESKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDNUploadMsgImgPrepareResponse::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareResponse.AESKey)
}

// optional string FileId = 12;
bool CDNUploadMsgImgPrepareResponse::has_fileid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDNUploadMsgImgPrepareResponse::set_has_fileid() {
  _has_bits_[0] |= 0x00000010u;
}
void CDNUploadMsgImgPrepareResponse::clear_has_fileid() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDNUploadMsgImgPrepareResponse::clear_fileid() {
  fileid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fileid();
}
const ::std::string& CDNUploadMsgImgPrepareResponse::fileid() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareResponse.FileId)
  return fileid_.GetNoArena();
}
void CDNUploadMsgImgPrepareResponse::set_fileid(const ::std::string& value) {
  set_has_fileid();
  fileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareResponse.FileId)
}
#if LANG_CXX11
void CDNUploadMsgImgPrepareResponse::set_fileid(::std::string&& value) {
  set_has_fileid();
  fileid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareResponse.FileId)
}
#endif
void CDNUploadMsgImgPrepareResponse::set_fileid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fileid();
  fileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareResponse.FileId)
}
void CDNUploadMsgImgPrepareResponse::set_fileid(const char* value, size_t size) {
  set_has_fileid();
  fileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareResponse.FileId)
}
::std::string* CDNUploadMsgImgPrepareResponse::mutable_fileid() {
  set_has_fileid();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareResponse.FileId)
  return fileid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDNUploadMsgImgPrepareResponse::release_fileid() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareResponse.FileId)
  clear_has_fileid();
  return fileid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDNUploadMsgImgPrepareResponse::set_allocated_fileid(::std::string* fileid) {
  if (fileid != NULL) {
    set_has_fileid();
  } else {
    clear_has_fileid();
  }
  fileid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fileid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareResponse.FileId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDNUploadMsgImgCommitRequest::kTicketFieldNumber;
const int CDNUploadMsgImgCommitRequest::kImgUrlFieldNumber;
const int CDNUploadMsgImgCommitRequest::kAESKeyFieldNumber;
const int CDNUploadMsgImgCommitRequest::kEncryVerFieldNumber;
const int CDNUploadMsgImgCommitRequest::kMidSizeFieldNumber;
const int CDNUploadMsgImgCommitRequest::kThumbSizeFieldNumber;
const int CDNUploadMsgImgCommitRequest::kBigSizeFieldNumber;
const int CDNUploadMsgImgCommitRequest::kMd5SumFieldNumber;
const int CDNUploadMsgImgCommitRequest::kSafeProtoFieldNumber;
const int CDNUploadMsgImgCommitRequest::kHitFieldNumber;
const int CDNUploadMsgImgCommitRequest::kFileInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDNUploadMsgImgCommitRequest::CDNUploadMsgImgCommitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CDNUploadMsgImgCommitRequest)
}
CDNUploadMsgImgCommitRequest::CDNUploadMsgImgCommitRequest(const CDNUploadMsgImgCommitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  imgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imgurl()) {
    imgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgurl_);
  }
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_aeskey()) {
    aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
  }
  md5sum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_md5sum()) {
    md5sum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5sum_);
  }
  fileinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fileinfo()) {
    fileinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fileinfo_);
  }
  ::memcpy(&encryver_, &from.encryver_,
    reinterpret_cast<char*>(&hit_) -
    reinterpret_cast<char*>(&encryver_) + sizeof(hit_));
  // @@protoc_insertion_point(copy_constructor:micromsg.CDNUploadMsgImgCommitRequest)
}

void CDNUploadMsgImgCommitRequest::SharedCtor() {
  _cached_size_ = 0;
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5sum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fileinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&encryver_, 0, reinterpret_cast<char*>(&hit_) -
    reinterpret_cast<char*>(&encryver_) + sizeof(hit_));
}

CDNUploadMsgImgCommitRequest::~CDNUploadMsgImgCommitRequest() {
  // @@protoc_insertion_point(destructor:micromsg.CDNUploadMsgImgCommitRequest)
  SharedDtor();
}

void CDNUploadMsgImgCommitRequest::SharedDtor() {
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5sum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fileinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDNUploadMsgImgCommitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDNUploadMsgImgCommitRequest::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDNUploadMsgImgCommitRequest& CDNUploadMsgImgCommitRequest::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDNUploadMsgImgCommitRequest* CDNUploadMsgImgCommitRequest::New(::google::protobuf::Arena* arena) const {
  CDNUploadMsgImgCommitRequest* n = new CDNUploadMsgImgCommitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDNUploadMsgImgCommitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CDNUploadMsgImgCommitRequest)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_ticket()) {
      GOOGLE_DCHECK(!ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_imgurl()) {
      GOOGLE_DCHECK(!imgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_aeskey()) {
      GOOGLE_DCHECK(!aeskey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*aeskey_.UnsafeRawStringPointer())->clear();
    }
    if (has_md5sum()) {
      GOOGLE_DCHECK(!md5sum_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*md5sum_.UnsafeRawStringPointer())->clear();
    }
    if (has_fileinfo()) {
      GOOGLE_DCHECK(!fileinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fileinfo_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&encryver_, 0, reinterpret_cast<char*>(&thumbsize_) -
      reinterpret_cast<char*>(&encryver_) + sizeof(thumbsize_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&bigsize_, 0, reinterpret_cast<char*>(&hit_) -
      reinterpret_cast<char*>(&bigsize_) + sizeof(hit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDNUploadMsgImgCommitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CDNUploadMsgImgCommitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticket().data(), this->ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CDNUploadMsgImgCommitRequest.Ticket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ImgUrl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imgurl().data(), this->imgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CDNUploadMsgImgCommitRequest.ImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AESKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aeskey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aeskey().data(), this->aeskey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CDNUploadMsgImgCommitRequest.AESKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 EncryVer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_encryver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encryver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 MidSize = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_midsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &midsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ThumbSize = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_thumbsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thumbsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 BigSize = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_bigsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bigsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Md5Sum = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5sum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5sum().data(), this->md5sum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CDNUploadMsgImgCommitRequest.Md5Sum");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 SafeProto = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_safeproto();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &safeproto_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Hit = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_hit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FileInfo = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fileinfo().data(), this->fileinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CDNUploadMsgImgCommitRequest.FileInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CDNUploadMsgImgCommitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CDNUploadMsgImgCommitRequest)
  return false;
#undef DO_
}

void CDNUploadMsgImgCommitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CDNUploadMsgImgCommitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgCommitRequest.Ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ticket(), output);
  }

  // optional string ImgUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgurl().data(), this->imgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgCommitRequest.ImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->imgurl(), output);
  }

  // optional string AESKey = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgCommitRequest.AESKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->aeskey(), output);
  }

  // required int32 EncryVer = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->encryver(), output);
  }

  // required int32 MidSize = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->midsize(), output);
  }

  // required int32 ThumbSize = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->thumbsize(), output);
  }

  // optional int32 BigSize = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bigsize(), output);
  }

  // optional string Md5Sum = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5sum().data(), this->md5sum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgCommitRequest.Md5Sum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->md5sum(), output);
  }

  // optional int32 SafeProto = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->safeproto(), output);
  }

  // optional int32 Hit = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->hit(), output);
  }

  // optional string FileInfo = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileinfo().data(), this->fileinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgCommitRequest.FileInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->fileinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CDNUploadMsgImgCommitRequest)
}

::google::protobuf::uint8* CDNUploadMsgImgCommitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CDNUploadMsgImgCommitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgCommitRequest.Ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ticket(), target);
  }

  // optional string ImgUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgurl().data(), this->imgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgCommitRequest.ImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->imgurl(), target);
  }

  // optional string AESKey = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgCommitRequest.AESKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->aeskey(), target);
  }

  // required int32 EncryVer = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->encryver(), target);
  }

  // required int32 MidSize = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->midsize(), target);
  }

  // required int32 ThumbSize = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->thumbsize(), target);
  }

  // optional int32 BigSize = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bigsize(), target);
  }

  // optional string Md5Sum = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5sum().data(), this->md5sum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgCommitRequest.Md5Sum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->md5sum(), target);
  }

  // optional int32 SafeProto = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->safeproto(), target);
  }

  // optional int32 Hit = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->hit(), target);
  }

  // optional string FileInfo = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileinfo().data(), this->fileinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNUploadMsgImgCommitRequest.FileInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->fileinfo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CDNUploadMsgImgCommitRequest)
  return target;
}

size_t CDNUploadMsgImgCommitRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CDNUploadMsgImgCommitRequest)
  size_t total_size = 0;

  if (has_encryver()) {
    // required int32 EncryVer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->encryver());
  }

  if (has_midsize()) {
    // required int32 MidSize = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->midsize());
  }

  if (has_thumbsize()) {
    // required int32 ThumbSize = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thumbsize());
  }

  return total_size;
}
size_t CDNUploadMsgImgCommitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CDNUploadMsgImgCommitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000e0) ^ 0x000000e0) == 0) {  // All required fields are present.
    // required int32 EncryVer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->encryver());

    // required int32 MidSize = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->midsize());

    // required int32 ThumbSize = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thumbsize());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string Ticket = 1;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket());
    }

    // optional string ImgUrl = 2;
    if (has_imgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imgurl());
    }

    // optional string AESKey = 3;
    if (has_aeskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aeskey());
    }

    // optional string Md5Sum = 10;
    if (has_md5sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5sum());
    }

    // optional string FileInfo = 13;
    if (has_fileinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fileinfo());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 BigSize = 9;
    if (has_bigsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bigsize());
    }

    // optional int32 SafeProto = 11;
    if (has_safeproto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->safeproto());
    }

    // optional int32 Hit = 12;
    if (has_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDNUploadMsgImgCommitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CDNUploadMsgImgCommitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CDNUploadMsgImgCommitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDNUploadMsgImgCommitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CDNUploadMsgImgCommitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CDNUploadMsgImgCommitRequest)
    MergeFrom(*source);
  }
}

void CDNUploadMsgImgCommitRequest::MergeFrom(const CDNUploadMsgImgCommitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CDNUploadMsgImgCommitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_imgurl();
      imgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_aeskey();
      aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_md5sum();
      md5sum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5sum_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_fileinfo();
      fileinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fileinfo_);
    }
    if (cached_has_bits & 0x00000020u) {
      encryver_ = from.encryver_;
    }
    if (cached_has_bits & 0x00000040u) {
      midsize_ = from.midsize_;
    }
    if (cached_has_bits & 0x00000080u) {
      thumbsize_ = from.thumbsize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      bigsize_ = from.bigsize_;
    }
    if (cached_has_bits & 0x00000200u) {
      safeproto_ = from.safeproto_;
    }
    if (cached_has_bits & 0x00000400u) {
      hit_ = from.hit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDNUploadMsgImgCommitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CDNUploadMsgImgCommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDNUploadMsgImgCommitRequest::CopyFrom(const CDNUploadMsgImgCommitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CDNUploadMsgImgCommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDNUploadMsgImgCommitRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000e0) != 0x000000e0) return false;
  return true;
}

void CDNUploadMsgImgCommitRequest::Swap(CDNUploadMsgImgCommitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDNUploadMsgImgCommitRequest::InternalSwap(CDNUploadMsgImgCommitRequest* other) {
  ticket_.Swap(&other->ticket_);
  imgurl_.Swap(&other->imgurl_);
  aeskey_.Swap(&other->aeskey_);
  md5sum_.Swap(&other->md5sum_);
  fileinfo_.Swap(&other->fileinfo_);
  std::swap(encryver_, other->encryver_);
  std::swap(midsize_, other->midsize_);
  std::swap(thumbsize_, other->thumbsize_);
  std::swap(bigsize_, other->bigsize_);
  std::swap(safeproto_, other->safeproto_);
  std::swap(hit_, other->hit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDNUploadMsgImgCommitRequest::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDNUploadMsgImgCommitRequest

// optional string Ticket = 1;
bool CDNUploadMsgImgCommitRequest::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDNUploadMsgImgCommitRequest::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
void CDNUploadMsgImgCommitRequest::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDNUploadMsgImgCommitRequest::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
const ::std::string& CDNUploadMsgImgCommitRequest::ticket() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.Ticket)
  return ticket_.GetNoArena();
}
void CDNUploadMsgImgCommitRequest::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.Ticket)
}
#if LANG_CXX11
void CDNUploadMsgImgCommitRequest::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgCommitRequest.Ticket)
}
#endif
void CDNUploadMsgImgCommitRequest::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgCommitRequest.Ticket)
}
void CDNUploadMsgImgCommitRequest::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgCommitRequest.Ticket)
}
::std::string* CDNUploadMsgImgCommitRequest::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgCommitRequest.Ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDNUploadMsgImgCommitRequest::release_ticket() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgCommitRequest.Ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDNUploadMsgImgCommitRequest::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgCommitRequest.Ticket)
}

// optional string ImgUrl = 2;
bool CDNUploadMsgImgCommitRequest::has_imgurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDNUploadMsgImgCommitRequest::set_has_imgurl() {
  _has_bits_[0] |= 0x00000002u;
}
void CDNUploadMsgImgCommitRequest::clear_has_imgurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDNUploadMsgImgCommitRequest::clear_imgurl() {
  imgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgurl();
}
const ::std::string& CDNUploadMsgImgCommitRequest::imgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.ImgUrl)
  return imgurl_.GetNoArena();
}
void CDNUploadMsgImgCommitRequest::set_imgurl(const ::std::string& value) {
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.ImgUrl)
}
#if LANG_CXX11
void CDNUploadMsgImgCommitRequest::set_imgurl(::std::string&& value) {
  set_has_imgurl();
  imgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgCommitRequest.ImgUrl)
}
#endif
void CDNUploadMsgImgCommitRequest::set_imgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgCommitRequest.ImgUrl)
}
void CDNUploadMsgImgCommitRequest::set_imgurl(const char* value, size_t size) {
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgCommitRequest.ImgUrl)
}
::std::string* CDNUploadMsgImgCommitRequest::mutable_imgurl() {
  set_has_imgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgCommitRequest.ImgUrl)
  return imgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDNUploadMsgImgCommitRequest::release_imgurl() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgCommitRequest.ImgUrl)
  clear_has_imgurl();
  return imgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDNUploadMsgImgCommitRequest::set_allocated_imgurl(::std::string* imgurl) {
  if (imgurl != NULL) {
    set_has_imgurl();
  } else {
    clear_has_imgurl();
  }
  imgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgCommitRequest.ImgUrl)
}

// optional string AESKey = 3;
bool CDNUploadMsgImgCommitRequest::has_aeskey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDNUploadMsgImgCommitRequest::set_has_aeskey() {
  _has_bits_[0] |= 0x00000004u;
}
void CDNUploadMsgImgCommitRequest::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDNUploadMsgImgCommitRequest::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
const ::std::string& CDNUploadMsgImgCommitRequest::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.AESKey)
  return aeskey_.GetNoArena();
}
void CDNUploadMsgImgCommitRequest::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.AESKey)
}
#if LANG_CXX11
void CDNUploadMsgImgCommitRequest::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgCommitRequest.AESKey)
}
#endif
void CDNUploadMsgImgCommitRequest::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgCommitRequest.AESKey)
}
void CDNUploadMsgImgCommitRequest::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgCommitRequest.AESKey)
}
::std::string* CDNUploadMsgImgCommitRequest::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgCommitRequest.AESKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDNUploadMsgImgCommitRequest::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgCommitRequest.AESKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDNUploadMsgImgCommitRequest::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgCommitRequest.AESKey)
}

// required int32 EncryVer = 4;
bool CDNUploadMsgImgCommitRequest::has_encryver() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDNUploadMsgImgCommitRequest::set_has_encryver() {
  _has_bits_[0] |= 0x00000020u;
}
void CDNUploadMsgImgCommitRequest::clear_has_encryver() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDNUploadMsgImgCommitRequest::clear_encryver() {
  encryver_ = 0;
  clear_has_encryver();
}
::google::protobuf::int32 CDNUploadMsgImgCommitRequest::encryver() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.EncryVer)
  return encryver_;
}
void CDNUploadMsgImgCommitRequest::set_encryver(::google::protobuf::int32 value) {
  set_has_encryver();
  encryver_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.EncryVer)
}

// required int32 MidSize = 5;
bool CDNUploadMsgImgCommitRequest::has_midsize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDNUploadMsgImgCommitRequest::set_has_midsize() {
  _has_bits_[0] |= 0x00000040u;
}
void CDNUploadMsgImgCommitRequest::clear_has_midsize() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDNUploadMsgImgCommitRequest::clear_midsize() {
  midsize_ = 0;
  clear_has_midsize();
}
::google::protobuf::int32 CDNUploadMsgImgCommitRequest::midsize() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.MidSize)
  return midsize_;
}
void CDNUploadMsgImgCommitRequest::set_midsize(::google::protobuf::int32 value) {
  set_has_midsize();
  midsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.MidSize)
}

// required int32 ThumbSize = 6;
bool CDNUploadMsgImgCommitRequest::has_thumbsize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDNUploadMsgImgCommitRequest::set_has_thumbsize() {
  _has_bits_[0] |= 0x00000080u;
}
void CDNUploadMsgImgCommitRequest::clear_has_thumbsize() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDNUploadMsgImgCommitRequest::clear_thumbsize() {
  thumbsize_ = 0;
  clear_has_thumbsize();
}
::google::protobuf::int32 CDNUploadMsgImgCommitRequest::thumbsize() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.ThumbSize)
  return thumbsize_;
}
void CDNUploadMsgImgCommitRequest::set_thumbsize(::google::protobuf::int32 value) {
  set_has_thumbsize();
  thumbsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.ThumbSize)
}

// optional int32 BigSize = 9;
bool CDNUploadMsgImgCommitRequest::has_bigsize() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CDNUploadMsgImgCommitRequest::set_has_bigsize() {
  _has_bits_[0] |= 0x00000100u;
}
void CDNUploadMsgImgCommitRequest::clear_has_bigsize() {
  _has_bits_[0] &= ~0x00000100u;
}
void CDNUploadMsgImgCommitRequest::clear_bigsize() {
  bigsize_ = 0;
  clear_has_bigsize();
}
::google::protobuf::int32 CDNUploadMsgImgCommitRequest::bigsize() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.BigSize)
  return bigsize_;
}
void CDNUploadMsgImgCommitRequest::set_bigsize(::google::protobuf::int32 value) {
  set_has_bigsize();
  bigsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.BigSize)
}

// optional string Md5Sum = 10;
bool CDNUploadMsgImgCommitRequest::has_md5sum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDNUploadMsgImgCommitRequest::set_has_md5sum() {
  _has_bits_[0] |= 0x00000008u;
}
void CDNUploadMsgImgCommitRequest::clear_has_md5sum() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDNUploadMsgImgCommitRequest::clear_md5sum() {
  md5sum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5sum();
}
const ::std::string& CDNUploadMsgImgCommitRequest::md5sum() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.Md5Sum)
  return md5sum_.GetNoArena();
}
void CDNUploadMsgImgCommitRequest::set_md5sum(const ::std::string& value) {
  set_has_md5sum();
  md5sum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.Md5Sum)
}
#if LANG_CXX11
void CDNUploadMsgImgCommitRequest::set_md5sum(::std::string&& value) {
  set_has_md5sum();
  md5sum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgCommitRequest.Md5Sum)
}
#endif
void CDNUploadMsgImgCommitRequest::set_md5sum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5sum();
  md5sum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgCommitRequest.Md5Sum)
}
void CDNUploadMsgImgCommitRequest::set_md5sum(const char* value, size_t size) {
  set_has_md5sum();
  md5sum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgCommitRequest.Md5Sum)
}
::std::string* CDNUploadMsgImgCommitRequest::mutable_md5sum() {
  set_has_md5sum();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgCommitRequest.Md5Sum)
  return md5sum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDNUploadMsgImgCommitRequest::release_md5sum() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgCommitRequest.Md5Sum)
  clear_has_md5sum();
  return md5sum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDNUploadMsgImgCommitRequest::set_allocated_md5sum(::std::string* md5sum) {
  if (md5sum != NULL) {
    set_has_md5sum();
  } else {
    clear_has_md5sum();
  }
  md5sum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5sum);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgCommitRequest.Md5Sum)
}

// optional int32 SafeProto = 11;
bool CDNUploadMsgImgCommitRequest::has_safeproto() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CDNUploadMsgImgCommitRequest::set_has_safeproto() {
  _has_bits_[0] |= 0x00000200u;
}
void CDNUploadMsgImgCommitRequest::clear_has_safeproto() {
  _has_bits_[0] &= ~0x00000200u;
}
void CDNUploadMsgImgCommitRequest::clear_safeproto() {
  safeproto_ = 0;
  clear_has_safeproto();
}
::google::protobuf::int32 CDNUploadMsgImgCommitRequest::safeproto() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.SafeProto)
  return safeproto_;
}
void CDNUploadMsgImgCommitRequest::set_safeproto(::google::protobuf::int32 value) {
  set_has_safeproto();
  safeproto_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.SafeProto)
}

// optional int32 Hit = 12;
bool CDNUploadMsgImgCommitRequest::has_hit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CDNUploadMsgImgCommitRequest::set_has_hit() {
  _has_bits_[0] |= 0x00000400u;
}
void CDNUploadMsgImgCommitRequest::clear_has_hit() {
  _has_bits_[0] &= ~0x00000400u;
}
void CDNUploadMsgImgCommitRequest::clear_hit() {
  hit_ = 0;
  clear_has_hit();
}
::google::protobuf::int32 CDNUploadMsgImgCommitRequest::hit() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.Hit)
  return hit_;
}
void CDNUploadMsgImgCommitRequest::set_hit(::google::protobuf::int32 value) {
  set_has_hit();
  hit_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.Hit)
}

// optional string FileInfo = 13;
bool CDNUploadMsgImgCommitRequest::has_fileinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDNUploadMsgImgCommitRequest::set_has_fileinfo() {
  _has_bits_[0] |= 0x00000010u;
}
void CDNUploadMsgImgCommitRequest::clear_has_fileinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDNUploadMsgImgCommitRequest::clear_fileinfo() {
  fileinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fileinfo();
}
const ::std::string& CDNUploadMsgImgCommitRequest::fileinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.FileInfo)
  return fileinfo_.GetNoArena();
}
void CDNUploadMsgImgCommitRequest::set_fileinfo(const ::std::string& value) {
  set_has_fileinfo();
  fileinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.FileInfo)
}
#if LANG_CXX11
void CDNUploadMsgImgCommitRequest::set_fileinfo(::std::string&& value) {
  set_has_fileinfo();
  fileinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgCommitRequest.FileInfo)
}
#endif
void CDNUploadMsgImgCommitRequest::set_fileinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fileinfo();
  fileinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgCommitRequest.FileInfo)
}
void CDNUploadMsgImgCommitRequest::set_fileinfo(const char* value, size_t size) {
  set_has_fileinfo();
  fileinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgCommitRequest.FileInfo)
}
::std::string* CDNUploadMsgImgCommitRequest::mutable_fileinfo() {
  set_has_fileinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgCommitRequest.FileInfo)
  return fileinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDNUploadMsgImgCommitRequest::release_fileinfo() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgCommitRequest.FileInfo)
  clear_has_fileinfo();
  return fileinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDNUploadMsgImgCommitRequest::set_allocated_fileinfo(::std::string* fileinfo) {
  if (fileinfo != NULL) {
    set_has_fileinfo();
  } else {
    clear_has_fileinfo();
  }
  fileinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fileinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgCommitRequest.FileInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDNUploadMsgImgCommitResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDNUploadMsgImgCommitResponse::CDNUploadMsgImgCommitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CDNUploadMsgImgCommitResponse)
}
CDNUploadMsgImgCommitResponse::CDNUploadMsgImgCommitResponse(const CDNUploadMsgImgCommitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.CDNUploadMsgImgCommitResponse)
}

void CDNUploadMsgImgCommitResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

CDNUploadMsgImgCommitResponse::~CDNUploadMsgImgCommitResponse() {
  // @@protoc_insertion_point(destructor:micromsg.CDNUploadMsgImgCommitResponse)
  SharedDtor();
}

void CDNUploadMsgImgCommitResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void CDNUploadMsgImgCommitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDNUploadMsgImgCommitResponse::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDNUploadMsgImgCommitResponse& CDNUploadMsgImgCommitResponse::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDNUploadMsgImgCommitResponse* CDNUploadMsgImgCommitResponse::New(::google::protobuf::Arena* arena) const {
  CDNUploadMsgImgCommitResponse* n = new CDNUploadMsgImgCommitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDNUploadMsgImgCommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CDNUploadMsgImgCommitResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDNUploadMsgImgCommitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CDNUploadMsgImgCommitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CDNUploadMsgImgCommitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CDNUploadMsgImgCommitResponse)
  return false;
#undef DO_
}

void CDNUploadMsgImgCommitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CDNUploadMsgImgCommitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CDNUploadMsgImgCommitResponse)
}

::google::protobuf::uint8* CDNUploadMsgImgCommitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CDNUploadMsgImgCommitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CDNUploadMsgImgCommitResponse)
  return target;
}

size_t CDNUploadMsgImgCommitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CDNUploadMsgImgCommitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDNUploadMsgImgCommitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CDNUploadMsgImgCommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CDNUploadMsgImgCommitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDNUploadMsgImgCommitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CDNUploadMsgImgCommitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CDNUploadMsgImgCommitResponse)
    MergeFrom(*source);
  }
}

void CDNUploadMsgImgCommitResponse::MergeFrom(const CDNUploadMsgImgCommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CDNUploadMsgImgCommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void CDNUploadMsgImgCommitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CDNUploadMsgImgCommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDNUploadMsgImgCommitResponse::CopyFrom(const CDNUploadMsgImgCommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CDNUploadMsgImgCommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDNUploadMsgImgCommitResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void CDNUploadMsgImgCommitResponse::Swap(CDNUploadMsgImgCommitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDNUploadMsgImgCommitResponse::InternalSwap(CDNUploadMsgImgCommitResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDNUploadMsgImgCommitResponse::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDNUploadMsgImgCommitResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool CDNUploadMsgImgCommitResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDNUploadMsgImgCommitResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void CDNUploadMsgImgCommitResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDNUploadMsgImgCommitResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& CDNUploadMsgImgCommitResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* CDNUploadMsgImgCommitResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgCommitResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* CDNUploadMsgImgCommitResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgCommitResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void CDNUploadMsgImgCommitResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgCommitResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadWeiboImgRequest::kBaseRequestFieldNumber;
const int UploadWeiboImgRequest::kClientImgIdFieldNumber;
const int UploadWeiboImgRequest::kTotalLenFieldNumber;
const int UploadWeiboImgRequest::kStartPosFieldNumber;
const int UploadWeiboImgRequest::kDataLenFieldNumber;
const int UploadWeiboImgRequest::kDataFieldNumber;
const int UploadWeiboImgRequest::kContentFieldNumber;
const int UploadWeiboImgRequest::kFilterTypeFieldNumber;
const int UploadWeiboImgRequest::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadWeiboImgRequest::UploadWeiboImgRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UploadWeiboImgRequest)
}
UploadWeiboImgRequest::UploadWeiboImgRequest(const UploadWeiboImgRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientimgid()) {
    clientimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientimgid_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&totallen_, &from.totallen_,
    reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&totallen_) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:micromsg.UploadWeiboImgRequest)
}

void UploadWeiboImgRequest::SharedCtor() {
  _cached_size_ = 0;
  clientimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(flag_));
}

UploadWeiboImgRequest::~UploadWeiboImgRequest() {
  // @@protoc_insertion_point(destructor:micromsg.UploadWeiboImgRequest)
  SharedDtor();
}

void UploadWeiboImgRequest::SharedDtor() {
  clientimgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void UploadWeiboImgRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadWeiboImgRequest::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UploadWeiboImgRequest& UploadWeiboImgRequest::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

UploadWeiboImgRequest* UploadWeiboImgRequest::New(::google::protobuf::Arena* arena) const {
  UploadWeiboImgRequest* n = new UploadWeiboImgRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadWeiboImgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UploadWeiboImgRequest)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_clientimgid()) {
      GOOGLE_DCHECK(!clientimgid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientimgid_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
    if (has_content()) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&totallen_, 0, reinterpret_cast<char*>(&filtertype_) -
      reinterpret_cast<char*>(&totallen_) + sizeof(filtertype_));
  }
  flag_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UploadWeiboImgRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UploadWeiboImgRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientImgId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientimgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientimgid().data(), this->clientimgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadWeiboImgRequest.ClientImgId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TotalLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 StartPos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DataLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_datalen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datalen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes Data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Content = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadWeiboImgRequest.Content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 FilterType = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_filtertype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filtertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Flag = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UploadWeiboImgRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UploadWeiboImgRequest)
  return false;
#undef DO_
}

void UploadWeiboImgRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UploadWeiboImgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ClientImgId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientimgid().data(), this->clientimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadWeiboImgRequest.ClientImgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientimgid(), output);
  }

  // required uint32 TotalLen = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totallen(), output);
  }

  // required uint32 StartPos = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->startpos(), output);
  }

  // required uint32 DataLen = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->datalen(), output);
  }

  // optional bytes Data = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  // optional string Content = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadWeiboImgRequest.Content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->content(), output);
  }

  // required uint32 FilterType = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->filtertype(), output);
  }

  // optional uint32 Flag = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UploadWeiboImgRequest)
}

::google::protobuf::uint8* UploadWeiboImgRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UploadWeiboImgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ClientImgId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientimgid().data(), this->clientimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadWeiboImgRequest.ClientImgId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientimgid(), target);
  }

  // required uint32 TotalLen = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->totallen(), target);
  }

  // required uint32 StartPos = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->startpos(), target);
  }

  // required uint32 DataLen = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->datalen(), target);
  }

  // optional bytes Data = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // optional string Content = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadWeiboImgRequest.Content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->content(), target);
  }

  // required uint32 FilterType = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->filtertype(), target);
  }

  // optional uint32 Flag = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UploadWeiboImgRequest)
  return target;
}

size_t UploadWeiboImgRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.UploadWeiboImgRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_totallen()) {
    // required uint32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());
  }

  if (has_startpos()) {
    // required uint32 StartPos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());
  }

  if (has_datalen()) {
    // required uint32 DataLen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalen());
  }

  if (has_filtertype()) {
    // required uint32 FilterType = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->filtertype());
  }

  return total_size;
}
size_t UploadWeiboImgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UploadWeiboImgRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000f8) ^ 0x000000f8) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());

    // required uint32 StartPos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());

    // required uint32 DataLen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalen());

    // required uint32 FilterType = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->filtertype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string ClientImgId = 2;
    if (has_clientimgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientimgid());
    }

    // optional bytes Data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional string Content = 7;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  // optional uint32 Flag = 9;
  if (has_flag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadWeiboImgRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UploadWeiboImgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadWeiboImgRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadWeiboImgRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UploadWeiboImgRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UploadWeiboImgRequest)
    MergeFrom(*source);
  }
}

void UploadWeiboImgRequest::MergeFrom(const UploadWeiboImgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UploadWeiboImgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientimgid();
      clientimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientimgid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000010u) {
      totallen_ = from.totallen_;
    }
    if (cached_has_bits & 0x00000020u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00000040u) {
      datalen_ = from.datalen_;
    }
    if (cached_has_bits & 0x00000080u) {
      filtertype_ = from.filtertype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_flag(from.flag());
  }
}

void UploadWeiboImgRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UploadWeiboImgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadWeiboImgRequest::CopyFrom(const UploadWeiboImgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UploadWeiboImgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadWeiboImgRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000f8) != 0x000000f8) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void UploadWeiboImgRequest::Swap(UploadWeiboImgRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadWeiboImgRequest::InternalSwap(UploadWeiboImgRequest* other) {
  clientimgid_.Swap(&other->clientimgid_);
  data_.Swap(&other->data_);
  content_.Swap(&other->content_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(totallen_, other->totallen_);
  std::swap(startpos_, other->startpos_);
  std::swap(datalen_, other->datalen_);
  std::swap(filtertype_, other->filtertype_);
  std::swap(flag_, other->flag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadWeiboImgRequest::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadWeiboImgRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool UploadWeiboImgRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UploadWeiboImgRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000008u;
}
void UploadWeiboImgRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000008u;
}
void UploadWeiboImgRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& UploadWeiboImgRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* UploadWeiboImgRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadWeiboImgRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* UploadWeiboImgRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.UploadWeiboImgRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void UploadWeiboImgRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadWeiboImgRequest.BaseRequest)
}

// optional string ClientImgId = 2;
bool UploadWeiboImgRequest::has_clientimgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UploadWeiboImgRequest::set_has_clientimgid() {
  _has_bits_[0] |= 0x00000001u;
}
void UploadWeiboImgRequest::clear_has_clientimgid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UploadWeiboImgRequest::clear_clientimgid() {
  clientimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientimgid();
}
const ::std::string& UploadWeiboImgRequest::clientimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgRequest.ClientImgId)
  return clientimgid_.GetNoArena();
}
void UploadWeiboImgRequest::set_clientimgid(const ::std::string& value) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgRequest.ClientImgId)
}
#if LANG_CXX11
void UploadWeiboImgRequest::set_clientimgid(::std::string&& value) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadWeiboImgRequest.ClientImgId)
}
#endif
void UploadWeiboImgRequest::set_clientimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadWeiboImgRequest.ClientImgId)
}
void UploadWeiboImgRequest::set_clientimgid(const char* value, size_t size) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadWeiboImgRequest.ClientImgId)
}
::std::string* UploadWeiboImgRequest::mutable_clientimgid() {
  set_has_clientimgid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadWeiboImgRequest.ClientImgId)
  return clientimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadWeiboImgRequest::release_clientimgid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadWeiboImgRequest.ClientImgId)
  clear_has_clientimgid();
  return clientimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadWeiboImgRequest::set_allocated_clientimgid(::std::string* clientimgid) {
  if (clientimgid != NULL) {
    set_has_clientimgid();
  } else {
    clear_has_clientimgid();
  }
  clientimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientimgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadWeiboImgRequest.ClientImgId)
}

// required uint32 TotalLen = 3;
bool UploadWeiboImgRequest::has_totallen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UploadWeiboImgRequest::set_has_totallen() {
  _has_bits_[0] |= 0x00000010u;
}
void UploadWeiboImgRequest::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000010u;
}
void UploadWeiboImgRequest::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
::google::protobuf::uint32 UploadWeiboImgRequest::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgRequest.TotalLen)
  return totallen_;
}
void UploadWeiboImgRequest::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgRequest.TotalLen)
}

// required uint32 StartPos = 4;
bool UploadWeiboImgRequest::has_startpos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UploadWeiboImgRequest::set_has_startpos() {
  _has_bits_[0] |= 0x00000020u;
}
void UploadWeiboImgRequest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000020u;
}
void UploadWeiboImgRequest::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
::google::protobuf::uint32 UploadWeiboImgRequest::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgRequest.StartPos)
  return startpos_;
}
void UploadWeiboImgRequest::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgRequest.StartPos)
}

// required uint32 DataLen = 5;
bool UploadWeiboImgRequest::has_datalen() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UploadWeiboImgRequest::set_has_datalen() {
  _has_bits_[0] |= 0x00000040u;
}
void UploadWeiboImgRequest::clear_has_datalen() {
  _has_bits_[0] &= ~0x00000040u;
}
void UploadWeiboImgRequest::clear_datalen() {
  datalen_ = 0u;
  clear_has_datalen();
}
::google::protobuf::uint32 UploadWeiboImgRequest::datalen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgRequest.DataLen)
  return datalen_;
}
void UploadWeiboImgRequest::set_datalen(::google::protobuf::uint32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgRequest.DataLen)
}

// optional bytes Data = 6;
bool UploadWeiboImgRequest::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UploadWeiboImgRequest::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void UploadWeiboImgRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void UploadWeiboImgRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& UploadWeiboImgRequest::data() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgRequest.Data)
  return data_.GetNoArena();
}
void UploadWeiboImgRequest::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgRequest.Data)
}
#if LANG_CXX11
void UploadWeiboImgRequest::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadWeiboImgRequest.Data)
}
#endif
void UploadWeiboImgRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadWeiboImgRequest.Data)
}
void UploadWeiboImgRequest::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadWeiboImgRequest.Data)
}
::std::string* UploadWeiboImgRequest::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadWeiboImgRequest.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadWeiboImgRequest::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.UploadWeiboImgRequest.Data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadWeiboImgRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadWeiboImgRequest.Data)
}

// optional string Content = 7;
bool UploadWeiboImgRequest::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UploadWeiboImgRequest::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
void UploadWeiboImgRequest::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
void UploadWeiboImgRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& UploadWeiboImgRequest::content() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgRequest.Content)
  return content_.GetNoArena();
}
void UploadWeiboImgRequest::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgRequest.Content)
}
#if LANG_CXX11
void UploadWeiboImgRequest::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadWeiboImgRequest.Content)
}
#endif
void UploadWeiboImgRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadWeiboImgRequest.Content)
}
void UploadWeiboImgRequest::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadWeiboImgRequest.Content)
}
::std::string* UploadWeiboImgRequest::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadWeiboImgRequest.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadWeiboImgRequest::release_content() {
  // @@protoc_insertion_point(field_release:micromsg.UploadWeiboImgRequest.Content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadWeiboImgRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadWeiboImgRequest.Content)
}

// required uint32 FilterType = 8;
bool UploadWeiboImgRequest::has_filtertype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UploadWeiboImgRequest::set_has_filtertype() {
  _has_bits_[0] |= 0x00000080u;
}
void UploadWeiboImgRequest::clear_has_filtertype() {
  _has_bits_[0] &= ~0x00000080u;
}
void UploadWeiboImgRequest::clear_filtertype() {
  filtertype_ = 0u;
  clear_has_filtertype();
}
::google::protobuf::uint32 UploadWeiboImgRequest::filtertype() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgRequest.FilterType)
  return filtertype_;
}
void UploadWeiboImgRequest::set_filtertype(::google::protobuf::uint32 value) {
  set_has_filtertype();
  filtertype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgRequest.FilterType)
}

// optional uint32 Flag = 9;
bool UploadWeiboImgRequest::has_flag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UploadWeiboImgRequest::set_has_flag() {
  _has_bits_[0] |= 0x00000100u;
}
void UploadWeiboImgRequest::clear_has_flag() {
  _has_bits_[0] &= ~0x00000100u;
}
void UploadWeiboImgRequest::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
::google::protobuf::uint32 UploadWeiboImgRequest::flag() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgRequest.Flag)
  return flag_;
}
void UploadWeiboImgRequest::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgRequest.Flag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadWeiboImgResponse::kBaseResponseFieldNumber;
const int UploadWeiboImgResponse::kClientImgIdFieldNumber;
const int UploadWeiboImgResponse::kTotalLenFieldNumber;
const int UploadWeiboImgResponse::kStartPosFieldNumber;
const int UploadWeiboImgResponse::kDataLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadWeiboImgResponse::UploadWeiboImgResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UploadWeiboImgResponse)
}
UploadWeiboImgResponse::UploadWeiboImgResponse(const UploadWeiboImgResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientimgid()) {
    clientimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientimgid_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&totallen_, &from.totallen_,
    reinterpret_cast<char*>(&datalen_) -
    reinterpret_cast<char*>(&totallen_) + sizeof(datalen_));
  // @@protoc_insertion_point(copy_constructor:micromsg.UploadWeiboImgResponse)
}

void UploadWeiboImgResponse::SharedCtor() {
  _cached_size_ = 0;
  clientimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&datalen_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(datalen_));
}

UploadWeiboImgResponse::~UploadWeiboImgResponse() {
  // @@protoc_insertion_point(destructor:micromsg.UploadWeiboImgResponse)
  SharedDtor();
}

void UploadWeiboImgResponse::SharedDtor() {
  clientimgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void UploadWeiboImgResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadWeiboImgResponse::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UploadWeiboImgResponse& UploadWeiboImgResponse::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

UploadWeiboImgResponse* UploadWeiboImgResponse::New(::google::protobuf::Arena* arena) const {
  UploadWeiboImgResponse* n = new UploadWeiboImgResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadWeiboImgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UploadWeiboImgResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_clientimgid()) {
      GOOGLE_DCHECK(!clientimgid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientimgid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&totallen_, 0, reinterpret_cast<char*>(&datalen_) -
      reinterpret_cast<char*>(&totallen_) + sizeof(datalen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UploadWeiboImgResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UploadWeiboImgResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientImgId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientimgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientimgid().data(), this->clientimgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadWeiboImgResponse.ClientImgId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TotalLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 StartPos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DataLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_datalen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datalen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UploadWeiboImgResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UploadWeiboImgResponse)
  return false;
#undef DO_
}

void UploadWeiboImgResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UploadWeiboImgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string ClientImgId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientimgid().data(), this->clientimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadWeiboImgResponse.ClientImgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientimgid(), output);
  }

  // required uint32 TotalLen = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totallen(), output);
  }

  // required uint32 StartPos = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->startpos(), output);
  }

  // required uint32 DataLen = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->datalen(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UploadWeiboImgResponse)
}

::google::protobuf::uint8* UploadWeiboImgResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UploadWeiboImgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string ClientImgId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientimgid().data(), this->clientimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadWeiboImgResponse.ClientImgId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientimgid(), target);
  }

  // required uint32 TotalLen = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->totallen(), target);
  }

  // required uint32 StartPos = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->startpos(), target);
  }

  // required uint32 DataLen = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->datalen(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UploadWeiboImgResponse)
  return target;
}

size_t UploadWeiboImgResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.UploadWeiboImgResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_totallen()) {
    // required uint32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());
  }

  if (has_startpos()) {
    // required uint32 StartPos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());
  }

  if (has_datalen()) {
    // required uint32 DataLen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalen());
  }

  return total_size;
}
size_t UploadWeiboImgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UploadWeiboImgResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());

    // required uint32 StartPos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());

    // required uint32 DataLen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string ClientImgId = 2;
  if (has_clientimgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientimgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadWeiboImgResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UploadWeiboImgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadWeiboImgResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadWeiboImgResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UploadWeiboImgResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UploadWeiboImgResponse)
    MergeFrom(*source);
  }
}

void UploadWeiboImgResponse::MergeFrom(const UploadWeiboImgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UploadWeiboImgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientimgid();
      clientimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientimgid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      totallen_ = from.totallen_;
    }
    if (cached_has_bits & 0x00000008u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00000010u) {
      datalen_ = from.datalen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UploadWeiboImgResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UploadWeiboImgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadWeiboImgResponse::CopyFrom(const UploadWeiboImgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UploadWeiboImgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadWeiboImgResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void UploadWeiboImgResponse::Swap(UploadWeiboImgResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadWeiboImgResponse::InternalSwap(UploadWeiboImgResponse* other) {
  clientimgid_.Swap(&other->clientimgid_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(totallen_, other->totallen_);
  std::swap(startpos_, other->startpos_);
  std::swap(datalen_, other->datalen_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadWeiboImgResponse::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadWeiboImgResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool UploadWeiboImgResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UploadWeiboImgResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void UploadWeiboImgResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void UploadWeiboImgResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& UploadWeiboImgResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* UploadWeiboImgResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadWeiboImgResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* UploadWeiboImgResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UploadWeiboImgResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void UploadWeiboImgResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadWeiboImgResponse.BaseResponse)
}

// optional string ClientImgId = 2;
bool UploadWeiboImgResponse::has_clientimgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UploadWeiboImgResponse::set_has_clientimgid() {
  _has_bits_[0] |= 0x00000001u;
}
void UploadWeiboImgResponse::clear_has_clientimgid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UploadWeiboImgResponse::clear_clientimgid() {
  clientimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientimgid();
}
const ::std::string& UploadWeiboImgResponse::clientimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgResponse.ClientImgId)
  return clientimgid_.GetNoArena();
}
void UploadWeiboImgResponse::set_clientimgid(const ::std::string& value) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgResponse.ClientImgId)
}
#if LANG_CXX11
void UploadWeiboImgResponse::set_clientimgid(::std::string&& value) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadWeiboImgResponse.ClientImgId)
}
#endif
void UploadWeiboImgResponse::set_clientimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadWeiboImgResponse.ClientImgId)
}
void UploadWeiboImgResponse::set_clientimgid(const char* value, size_t size) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadWeiboImgResponse.ClientImgId)
}
::std::string* UploadWeiboImgResponse::mutable_clientimgid() {
  set_has_clientimgid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadWeiboImgResponse.ClientImgId)
  return clientimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadWeiboImgResponse::release_clientimgid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadWeiboImgResponse.ClientImgId)
  clear_has_clientimgid();
  return clientimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadWeiboImgResponse::set_allocated_clientimgid(::std::string* clientimgid) {
  if (clientimgid != NULL) {
    set_has_clientimgid();
  } else {
    clear_has_clientimgid();
  }
  clientimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientimgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadWeiboImgResponse.ClientImgId)
}

// required uint32 TotalLen = 3;
bool UploadWeiboImgResponse::has_totallen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UploadWeiboImgResponse::set_has_totallen() {
  _has_bits_[0] |= 0x00000004u;
}
void UploadWeiboImgResponse::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000004u;
}
void UploadWeiboImgResponse::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
::google::protobuf::uint32 UploadWeiboImgResponse::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgResponse.TotalLen)
  return totallen_;
}
void UploadWeiboImgResponse::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgResponse.TotalLen)
}

// required uint32 StartPos = 4;
bool UploadWeiboImgResponse::has_startpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UploadWeiboImgResponse::set_has_startpos() {
  _has_bits_[0] |= 0x00000008u;
}
void UploadWeiboImgResponse::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000008u;
}
void UploadWeiboImgResponse::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
::google::protobuf::uint32 UploadWeiboImgResponse::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgResponse.StartPos)
  return startpos_;
}
void UploadWeiboImgResponse::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgResponse.StartPos)
}

// required uint32 DataLen = 5;
bool UploadWeiboImgResponse::has_datalen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UploadWeiboImgResponse::set_has_datalen() {
  _has_bits_[0] |= 0x00000010u;
}
void UploadWeiboImgResponse::clear_has_datalen() {
  _has_bits_[0] &= ~0x00000010u;
}
void UploadWeiboImgResponse::clear_datalen() {
  datalen_ = 0u;
  clear_has_datalen();
}
::google::protobuf::uint32 UploadWeiboImgResponse::datalen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgResponse.DataLen)
  return datalen_;
}
void UploadWeiboImgResponse::set_datalen(::google::protobuf::uint32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgResponse.DataLen)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadToWeiboRequest::kBaseRequestFieldNumber;
const int UploadToWeiboRequest::kClientMsgIdFieldNumber;
const int UploadToWeiboRequest::kTypeFieldNumber;
const int UploadToWeiboRequest::kTotalLenFieldNumber;
const int UploadToWeiboRequest::kStartPosFieldNumber;
const int UploadToWeiboRequest::kDataLenFieldNumber;
const int UploadToWeiboRequest::kDataFieldNumber;
const int UploadToWeiboRequest::kContentFieldNumber;
const int UploadToWeiboRequest::kFilterTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadToWeiboRequest::UploadToWeiboRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UploadToWeiboRequest)
}
UploadToWeiboRequest::UploadToWeiboRequest(const UploadToWeiboRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientmsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientmsgid()) {
    clientmsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientmsgid_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&filtertype_) -
    reinterpret_cast<char*>(&type_) + sizeof(filtertype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.UploadToWeiboRequest)
}

void UploadToWeiboRequest::SharedCtor() {
  _cached_size_ = 0;
  clientmsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&filtertype_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(filtertype_));
}

UploadToWeiboRequest::~UploadToWeiboRequest() {
  // @@protoc_insertion_point(destructor:micromsg.UploadToWeiboRequest)
  SharedDtor();
}

void UploadToWeiboRequest::SharedDtor() {
  clientmsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void UploadToWeiboRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadToWeiboRequest::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UploadToWeiboRequest& UploadToWeiboRequest::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

UploadToWeiboRequest* UploadToWeiboRequest::New(::google::protobuf::Arena* arena) const {
  UploadToWeiboRequest* n = new UploadToWeiboRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadToWeiboRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UploadToWeiboRequest)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_clientmsgid()) {
      GOOGLE_DCHECK(!clientmsgid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientmsgid_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
    if (has_content()) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&datalen_) -
      reinterpret_cast<char*>(&type_) + sizeof(datalen_));
  }
  filtertype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UploadToWeiboRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UploadToWeiboRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientMsgId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientmsgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientmsgid().data(), this->clientmsgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadToWeiboRequest.ClientMsgId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TotalLen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 StartPos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DataLen = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_datalen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datalen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes Data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Content = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadToWeiboRequest.Content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 FilterType = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_filtertype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filtertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UploadToWeiboRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UploadToWeiboRequest)
  return false;
#undef DO_
}

void UploadToWeiboRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UploadToWeiboRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ClientMsgId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientmsgid().data(), this->clientmsgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadToWeiboRequest.ClientMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientmsgid(), output);
  }

  // required uint32 Type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required uint32 TotalLen = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->totallen(), output);
  }

  // required uint32 StartPos = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->startpos(), output);
  }

  // required uint32 DataLen = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->datalen(), output);
  }

  // optional bytes Data = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->data(), output);
  }

  // optional string Content = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadToWeiboRequest.Content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->content(), output);
  }

  // required uint32 FilterType = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->filtertype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UploadToWeiboRequest)
}

::google::protobuf::uint8* UploadToWeiboRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UploadToWeiboRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ClientMsgId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientmsgid().data(), this->clientmsgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadToWeiboRequest.ClientMsgId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientmsgid(), target);
  }

  // required uint32 Type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required uint32 TotalLen = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->totallen(), target);
  }

  // required uint32 StartPos = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->startpos(), target);
  }

  // required uint32 DataLen = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->datalen(), target);
  }

  // optional bytes Data = 7;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->data(), target);
  }

  // optional string Content = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadToWeiboRequest.Content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->content(), target);
  }

  // required uint32 FilterType = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->filtertype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UploadToWeiboRequest)
  return target;
}

size_t UploadToWeiboRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.UploadToWeiboRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_type()) {
    // required uint32 Type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_totallen()) {
    // required uint32 TotalLen = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());
  }

  if (has_startpos()) {
    // required uint32 StartPos = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());
  }

  if (has_datalen()) {
    // required uint32 DataLen = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalen());
  }

  if (has_filtertype()) {
    // required uint32 FilterType = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->filtertype());
  }

  return total_size;
}
size_t UploadToWeiboRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UploadToWeiboRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001f8) ^ 0x000001f8) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 TotalLen = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());

    // required uint32 StartPos = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());

    // required uint32 DataLen = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalen());

    // required uint32 FilterType = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->filtertype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string ClientMsgId = 2;
    if (has_clientmsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientmsgid());
    }

    // optional bytes Data = 7;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional string Content = 8;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadToWeiboRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UploadToWeiboRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadToWeiboRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadToWeiboRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UploadToWeiboRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UploadToWeiboRequest)
    MergeFrom(*source);
  }
}

void UploadToWeiboRequest::MergeFrom(const UploadToWeiboRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UploadToWeiboRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientmsgid();
      clientmsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientmsgid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      totallen_ = from.totallen_;
    }
    if (cached_has_bits & 0x00000040u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00000080u) {
      datalen_ = from.datalen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_filtertype(from.filtertype());
  }
}

void UploadToWeiboRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UploadToWeiboRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadToWeiboRequest::CopyFrom(const UploadToWeiboRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UploadToWeiboRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadToWeiboRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001f8) != 0x000001f8) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void UploadToWeiboRequest::Swap(UploadToWeiboRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadToWeiboRequest::InternalSwap(UploadToWeiboRequest* other) {
  clientmsgid_.Swap(&other->clientmsgid_);
  data_.Swap(&other->data_);
  content_.Swap(&other->content_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(type_, other->type_);
  std::swap(totallen_, other->totallen_);
  std::swap(startpos_, other->startpos_);
  std::swap(datalen_, other->datalen_);
  std::swap(filtertype_, other->filtertype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadToWeiboRequest::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadToWeiboRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool UploadToWeiboRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UploadToWeiboRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000008u;
}
void UploadToWeiboRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000008u;
}
void UploadToWeiboRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& UploadToWeiboRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* UploadToWeiboRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadToWeiboRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* UploadToWeiboRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.UploadToWeiboRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void UploadToWeiboRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadToWeiboRequest.BaseRequest)
}

// optional string ClientMsgId = 2;
bool UploadToWeiboRequest::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UploadToWeiboRequest::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000001u;
}
void UploadToWeiboRequest::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UploadToWeiboRequest::clear_clientmsgid() {
  clientmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientmsgid();
}
const ::std::string& UploadToWeiboRequest::clientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboRequest.ClientMsgId)
  return clientmsgid_.GetNoArena();
}
void UploadToWeiboRequest::set_clientmsgid(const ::std::string& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboRequest.ClientMsgId)
}
#if LANG_CXX11
void UploadToWeiboRequest::set_clientmsgid(::std::string&& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadToWeiboRequest.ClientMsgId)
}
#endif
void UploadToWeiboRequest::set_clientmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadToWeiboRequest.ClientMsgId)
}
void UploadToWeiboRequest::set_clientmsgid(const char* value, size_t size) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadToWeiboRequest.ClientMsgId)
}
::std::string* UploadToWeiboRequest::mutable_clientmsgid() {
  set_has_clientmsgid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadToWeiboRequest.ClientMsgId)
  return clientmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadToWeiboRequest::release_clientmsgid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadToWeiboRequest.ClientMsgId)
  clear_has_clientmsgid();
  return clientmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadToWeiboRequest::set_allocated_clientmsgid(::std::string* clientmsgid) {
  if (clientmsgid != NULL) {
    set_has_clientmsgid();
  } else {
    clear_has_clientmsgid();
  }
  clientmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientmsgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadToWeiboRequest.ClientMsgId)
}

// required uint32 Type = 3;
bool UploadToWeiboRequest::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UploadToWeiboRequest::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void UploadToWeiboRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void UploadToWeiboRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 UploadToWeiboRequest::type() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboRequest.Type)
  return type_;
}
void UploadToWeiboRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboRequest.Type)
}

// required uint32 TotalLen = 4;
bool UploadToWeiboRequest::has_totallen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UploadToWeiboRequest::set_has_totallen() {
  _has_bits_[0] |= 0x00000020u;
}
void UploadToWeiboRequest::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000020u;
}
void UploadToWeiboRequest::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
::google::protobuf::uint32 UploadToWeiboRequest::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboRequest.TotalLen)
  return totallen_;
}
void UploadToWeiboRequest::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboRequest.TotalLen)
}

// required uint32 StartPos = 5;
bool UploadToWeiboRequest::has_startpos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UploadToWeiboRequest::set_has_startpos() {
  _has_bits_[0] |= 0x00000040u;
}
void UploadToWeiboRequest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000040u;
}
void UploadToWeiboRequest::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
::google::protobuf::uint32 UploadToWeiboRequest::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboRequest.StartPos)
  return startpos_;
}
void UploadToWeiboRequest::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboRequest.StartPos)
}

// required uint32 DataLen = 6;
bool UploadToWeiboRequest::has_datalen() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UploadToWeiboRequest::set_has_datalen() {
  _has_bits_[0] |= 0x00000080u;
}
void UploadToWeiboRequest::clear_has_datalen() {
  _has_bits_[0] &= ~0x00000080u;
}
void UploadToWeiboRequest::clear_datalen() {
  datalen_ = 0u;
  clear_has_datalen();
}
::google::protobuf::uint32 UploadToWeiboRequest::datalen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboRequest.DataLen)
  return datalen_;
}
void UploadToWeiboRequest::set_datalen(::google::protobuf::uint32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboRequest.DataLen)
}

// optional bytes Data = 7;
bool UploadToWeiboRequest::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UploadToWeiboRequest::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void UploadToWeiboRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void UploadToWeiboRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& UploadToWeiboRequest::data() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboRequest.Data)
  return data_.GetNoArena();
}
void UploadToWeiboRequest::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboRequest.Data)
}
#if LANG_CXX11
void UploadToWeiboRequest::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadToWeiboRequest.Data)
}
#endif
void UploadToWeiboRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadToWeiboRequest.Data)
}
void UploadToWeiboRequest::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadToWeiboRequest.Data)
}
::std::string* UploadToWeiboRequest::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadToWeiboRequest.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadToWeiboRequest::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.UploadToWeiboRequest.Data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadToWeiboRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadToWeiboRequest.Data)
}

// optional string Content = 8;
bool UploadToWeiboRequest::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UploadToWeiboRequest::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
void UploadToWeiboRequest::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
void UploadToWeiboRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& UploadToWeiboRequest::content() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboRequest.Content)
  return content_.GetNoArena();
}
void UploadToWeiboRequest::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboRequest.Content)
}
#if LANG_CXX11
void UploadToWeiboRequest::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadToWeiboRequest.Content)
}
#endif
void UploadToWeiboRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadToWeiboRequest.Content)
}
void UploadToWeiboRequest::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadToWeiboRequest.Content)
}
::std::string* UploadToWeiboRequest::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadToWeiboRequest.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadToWeiboRequest::release_content() {
  // @@protoc_insertion_point(field_release:micromsg.UploadToWeiboRequest.Content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadToWeiboRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadToWeiboRequest.Content)
}

// required uint32 FilterType = 9;
bool UploadToWeiboRequest::has_filtertype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UploadToWeiboRequest::set_has_filtertype() {
  _has_bits_[0] |= 0x00000100u;
}
void UploadToWeiboRequest::clear_has_filtertype() {
  _has_bits_[0] &= ~0x00000100u;
}
void UploadToWeiboRequest::clear_filtertype() {
  filtertype_ = 0u;
  clear_has_filtertype();
}
::google::protobuf::uint32 UploadToWeiboRequest::filtertype() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboRequest.FilterType)
  return filtertype_;
}
void UploadToWeiboRequest::set_filtertype(::google::protobuf::uint32 value) {
  set_has_filtertype();
  filtertype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboRequest.FilterType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadToWeiboResponse::kBaseResponseFieldNumber;
const int UploadToWeiboResponse::kClientMsgIdFieldNumber;
const int UploadToWeiboResponse::kTypeFieldNumber;
const int UploadToWeiboResponse::kTotalLenFieldNumber;
const int UploadToWeiboResponse::kStartPosFieldNumber;
const int UploadToWeiboResponse::kDataLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadToWeiboResponse::UploadToWeiboResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UploadToWeiboResponse)
}
UploadToWeiboResponse::UploadToWeiboResponse(const UploadToWeiboResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientmsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientmsgid()) {
    clientmsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientmsgid_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&datalen_) -
    reinterpret_cast<char*>(&type_) + sizeof(datalen_));
  // @@protoc_insertion_point(copy_constructor:micromsg.UploadToWeiboResponse)
}

void UploadToWeiboResponse::SharedCtor() {
  _cached_size_ = 0;
  clientmsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&datalen_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(datalen_));
}

UploadToWeiboResponse::~UploadToWeiboResponse() {
  // @@protoc_insertion_point(destructor:micromsg.UploadToWeiboResponse)
  SharedDtor();
}

void UploadToWeiboResponse::SharedDtor() {
  clientmsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void UploadToWeiboResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadToWeiboResponse::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UploadToWeiboResponse& UploadToWeiboResponse::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

UploadToWeiboResponse* UploadToWeiboResponse::New(::google::protobuf::Arena* arena) const {
  UploadToWeiboResponse* n = new UploadToWeiboResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadToWeiboResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UploadToWeiboResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_clientmsgid()) {
      GOOGLE_DCHECK(!clientmsgid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientmsgid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&datalen_) -
      reinterpret_cast<char*>(&type_) + sizeof(datalen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UploadToWeiboResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UploadToWeiboResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientMsgId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientmsgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientmsgid().data(), this->clientmsgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadToWeiboResponse.ClientMsgId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TotalLen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 StartPos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DataLen = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_datalen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datalen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UploadToWeiboResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UploadToWeiboResponse)
  return false;
#undef DO_
}

void UploadToWeiboResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UploadToWeiboResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string ClientMsgId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientmsgid().data(), this->clientmsgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadToWeiboResponse.ClientMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientmsgid(), output);
  }

  // required uint32 Type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required uint32 TotalLen = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->totallen(), output);
  }

  // required uint32 StartPos = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->startpos(), output);
  }

  // required uint32 DataLen = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->datalen(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UploadToWeiboResponse)
}

::google::protobuf::uint8* UploadToWeiboResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UploadToWeiboResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string ClientMsgId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientmsgid().data(), this->clientmsgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadToWeiboResponse.ClientMsgId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientmsgid(), target);
  }

  // required uint32 Type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required uint32 TotalLen = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->totallen(), target);
  }

  // required uint32 StartPos = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->startpos(), target);
  }

  // required uint32 DataLen = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->datalen(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UploadToWeiboResponse)
  return target;
}

size_t UploadToWeiboResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.UploadToWeiboResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_type()) {
    // required uint32 Type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_totallen()) {
    // required uint32 TotalLen = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());
  }

  if (has_startpos()) {
    // required uint32 StartPos = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());
  }

  if (has_datalen()) {
    // required uint32 DataLen = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalen());
  }

  return total_size;
}
size_t UploadToWeiboResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UploadToWeiboResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003e) ^ 0x0000003e) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 TotalLen = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());

    // required uint32 StartPos = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());

    // required uint32 DataLen = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string ClientMsgId = 2;
  if (has_clientmsgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientmsgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadToWeiboResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UploadToWeiboResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadToWeiboResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadToWeiboResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UploadToWeiboResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UploadToWeiboResponse)
    MergeFrom(*source);
  }
}

void UploadToWeiboResponse::MergeFrom(const UploadToWeiboResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UploadToWeiboResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientmsgid();
      clientmsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientmsgid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      totallen_ = from.totallen_;
    }
    if (cached_has_bits & 0x00000010u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00000020u) {
      datalen_ = from.datalen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UploadToWeiboResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UploadToWeiboResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadToWeiboResponse::CopyFrom(const UploadToWeiboResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UploadToWeiboResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadToWeiboResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void UploadToWeiboResponse::Swap(UploadToWeiboResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadToWeiboResponse::InternalSwap(UploadToWeiboResponse* other) {
  clientmsgid_.Swap(&other->clientmsgid_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(type_, other->type_);
  std::swap(totallen_, other->totallen_);
  std::swap(startpos_, other->startpos_);
  std::swap(datalen_, other->datalen_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadToWeiboResponse::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadToWeiboResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool UploadToWeiboResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UploadToWeiboResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void UploadToWeiboResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void UploadToWeiboResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& UploadToWeiboResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* UploadToWeiboResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadToWeiboResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* UploadToWeiboResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UploadToWeiboResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void UploadToWeiboResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadToWeiboResponse.BaseResponse)
}

// optional string ClientMsgId = 2;
bool UploadToWeiboResponse::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UploadToWeiboResponse::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000001u;
}
void UploadToWeiboResponse::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UploadToWeiboResponse::clear_clientmsgid() {
  clientmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientmsgid();
}
const ::std::string& UploadToWeiboResponse::clientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboResponse.ClientMsgId)
  return clientmsgid_.GetNoArena();
}
void UploadToWeiboResponse::set_clientmsgid(const ::std::string& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboResponse.ClientMsgId)
}
#if LANG_CXX11
void UploadToWeiboResponse::set_clientmsgid(::std::string&& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadToWeiboResponse.ClientMsgId)
}
#endif
void UploadToWeiboResponse::set_clientmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadToWeiboResponse.ClientMsgId)
}
void UploadToWeiboResponse::set_clientmsgid(const char* value, size_t size) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadToWeiboResponse.ClientMsgId)
}
::std::string* UploadToWeiboResponse::mutable_clientmsgid() {
  set_has_clientmsgid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadToWeiboResponse.ClientMsgId)
  return clientmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadToWeiboResponse::release_clientmsgid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadToWeiboResponse.ClientMsgId)
  clear_has_clientmsgid();
  return clientmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadToWeiboResponse::set_allocated_clientmsgid(::std::string* clientmsgid) {
  if (clientmsgid != NULL) {
    set_has_clientmsgid();
  } else {
    clear_has_clientmsgid();
  }
  clientmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientmsgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadToWeiboResponse.ClientMsgId)
}

// required uint32 Type = 3;
bool UploadToWeiboResponse::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UploadToWeiboResponse::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void UploadToWeiboResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void UploadToWeiboResponse::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 UploadToWeiboResponse::type() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboResponse.Type)
  return type_;
}
void UploadToWeiboResponse::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboResponse.Type)
}

// required uint32 TotalLen = 4;
bool UploadToWeiboResponse::has_totallen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UploadToWeiboResponse::set_has_totallen() {
  _has_bits_[0] |= 0x00000008u;
}
void UploadToWeiboResponse::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000008u;
}
void UploadToWeiboResponse::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
::google::protobuf::uint32 UploadToWeiboResponse::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboResponse.TotalLen)
  return totallen_;
}
void UploadToWeiboResponse::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboResponse.TotalLen)
}

// required uint32 StartPos = 5;
bool UploadToWeiboResponse::has_startpos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UploadToWeiboResponse::set_has_startpos() {
  _has_bits_[0] |= 0x00000010u;
}
void UploadToWeiboResponse::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000010u;
}
void UploadToWeiboResponse::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
::google::protobuf::uint32 UploadToWeiboResponse::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboResponse.StartPos)
  return startpos_;
}
void UploadToWeiboResponse::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboResponse.StartPos)
}

// required uint32 DataLen = 6;
bool UploadToWeiboResponse::has_datalen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UploadToWeiboResponse::set_has_datalen() {
  _has_bits_[0] |= 0x00000020u;
}
void UploadToWeiboResponse::clear_has_datalen() {
  _has_bits_[0] &= ~0x00000020u;
}
void UploadToWeiboResponse::clear_datalen() {
  datalen_ = 0u;
  clear_has_datalen();
}
::google::protobuf::uint32 UploadToWeiboResponse::datalen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboResponse.DataLen)
  return datalen_;
}
void UploadToWeiboResponse::set_datalen(::google::protobuf::uint32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboResponse.DataLen)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMsgImgRequest::kBaseRequestFieldNumber;
const int GetMsgImgRequest::kMsgIdFieldNumber;
const int GetMsgImgRequest::kFromUserNameFieldNumber;
const int GetMsgImgRequest::kToUserNameFieldNumber;
const int GetMsgImgRequest::kTotalLenFieldNumber;
const int GetMsgImgRequest::kStartPosFieldNumber;
const int GetMsgImgRequest::kDataLenFieldNumber;
const int GetMsgImgRequest::kCompressTypeFieldNumber;
const int GetMsgImgRequest::kNewMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMsgImgRequest::GetMsgImgRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetMsgImgRequest)
}
GetMsgImgRequest::GetMsgImgRequest(const GetMsgImgRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_fromusername()) {
    fromusername_ = new ::micromsg::SKBuiltinString_t(*from.fromusername_);
  } else {
    fromusername_ = NULL;
  }
  if (from.has_tousername()) {
    tousername_ = new ::micromsg::SKBuiltinString_t(*from.tousername_);
  } else {
    tousername_ = NULL;
  }
  ::memcpy(&msgid_, &from.msgid_,
    reinterpret_cast<char*>(&compresstype_) -
    reinterpret_cast<char*>(&msgid_) + sizeof(compresstype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetMsgImgRequest)
}

void GetMsgImgRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&compresstype_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(compresstype_));
}

GetMsgImgRequest::~GetMsgImgRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetMsgImgRequest)
  SharedDtor();
}

void GetMsgImgRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete fromusername_;
  }
  if (this != internal_default_instance()) {
    delete tousername_;
  }
}

void GetMsgImgRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMsgImgRequest::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetMsgImgRequest& GetMsgImgRequest::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetMsgImgRequest* GetMsgImgRequest::New(::google::protobuf::Arena* arena) const {
  GetMsgImgRequest* n = new GetMsgImgRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMsgImgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetMsgImgRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_fromusername()) {
      GOOGLE_DCHECK(fromusername_ != NULL);
      fromusername_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_tousername()) {
      GOOGLE_DCHECK(tousername_ != NULL);
      tousername_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&msgid_, 0, reinterpret_cast<char*>(&newmsgid_) -
      reinterpret_cast<char*>(&msgid_) + sizeof(newmsgid_));
  }
  compresstype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetMsgImgRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetMsgImgRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MsgId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t FromUserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fromusername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t ToUserName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tousername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TotalLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 StartPos = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DataLen = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_datalen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datalen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CompressType = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_compresstype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compresstype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 NewMsgId = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_newmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetMsgImgRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetMsgImgRequest)
  return false;
#undef DO_
}

void GetMsgImgRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetMsgImgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 MsgId = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }

  // required .micromsg.SKBuiltinString_t FromUserName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->fromusername_, output);
  }

  // required .micromsg.SKBuiltinString_t ToUserName = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->tousername_, output);
  }

  // required uint32 TotalLen = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->totallen(), output);
  }

  // required uint32 StartPos = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->startpos(), output);
  }

  // required uint32 DataLen = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->datalen(), output);
  }

  // optional uint32 CompressType = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->compresstype(), output);
  }

  // optional uint64 NewMsgId = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->newmsgid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetMsgImgRequest)
}

::google::protobuf::uint8* GetMsgImgRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetMsgImgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 MsgId = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }

  // required .micromsg.SKBuiltinString_t FromUserName = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->fromusername_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t ToUserName = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->tousername_, deterministic, target);
  }

  // required uint32 TotalLen = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->totallen(), target);
  }

  // required uint32 StartPos = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->startpos(), target);
  }

  // required uint32 DataLen = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->datalen(), target);
  }

  // optional uint32 CompressType = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->compresstype(), target);
  }

  // optional uint64 NewMsgId = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->newmsgid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetMsgImgRequest)
  return target;
}

size_t GetMsgImgRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetMsgImgRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_fromusername()) {
    // required .micromsg.SKBuiltinString_t FromUserName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fromusername_);
  }

  if (has_tousername()) {
    // required .micromsg.SKBuiltinString_t ToUserName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tousername_);
  }

  if (has_msgid()) {
    // required uint32 MsgId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  if (has_totallen()) {
    // required uint32 TotalLen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());
  }

  if (has_startpos()) {
    // required uint32 StartPos = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());
  }

  if (has_datalen()) {
    // required uint32 DataLen = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalen());
  }

  return total_size;
}
size_t GetMsgImgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetMsgImgRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinString_t FromUserName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fromusername_);

    // required .micromsg.SKBuiltinString_t ToUserName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tousername_);

    // required uint32 MsgId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());

    // required uint32 TotalLen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());

    // required uint32 StartPos = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());

    // required uint32 DataLen = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint64 NewMsgId = 9;
  if (has_newmsgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->newmsgid());
  }

  // optional uint32 CompressType = 8;
  if (has_compresstype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->compresstype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMsgImgRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetMsgImgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMsgImgRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMsgImgRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetMsgImgRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetMsgImgRequest)
    MergeFrom(*source);
  }
}

void GetMsgImgRequest::MergeFrom(const GetMsgImgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetMsgImgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_fromusername()->::micromsg::SKBuiltinString_t::MergeFrom(from.fromusername());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_tousername()->::micromsg::SKBuiltinString_t::MergeFrom(from.tousername());
    }
    if (cached_has_bits & 0x00000008u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x00000010u) {
      totallen_ = from.totallen_;
    }
    if (cached_has_bits & 0x00000020u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00000040u) {
      datalen_ = from.datalen_;
    }
    if (cached_has_bits & 0x00000080u) {
      newmsgid_ = from.newmsgid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_compresstype(from.compresstype());
  }
}

void GetMsgImgRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetMsgImgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMsgImgRequest::CopyFrom(const GetMsgImgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetMsgImgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMsgImgRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetMsgImgRequest::Swap(GetMsgImgRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMsgImgRequest::InternalSwap(GetMsgImgRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(fromusername_, other->fromusername_);
  std::swap(tousername_, other->tousername_);
  std::swap(msgid_, other->msgid_);
  std::swap(totallen_, other->totallen_);
  std::swap(startpos_, other->startpos_);
  std::swap(datalen_, other->datalen_);
  std::swap(newmsgid_, other->newmsgid_);
  std::swap(compresstype_, other->compresstype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMsgImgRequest::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMsgImgRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetMsgImgRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetMsgImgRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void GetMsgImgRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetMsgImgRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetMsgImgRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetMsgImgRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetMsgImgRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetMsgImgRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetMsgImgRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetMsgImgRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetMsgImgRequest.BaseRequest)
}

// required uint32 MsgId = 2;
bool GetMsgImgRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetMsgImgRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000008u;
}
void GetMsgImgRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetMsgImgRequest::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
::google::protobuf::uint32 GetMsgImgRequest::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgRequest.MsgId)
  return msgid_;
}
void GetMsgImgRequest::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgRequest.MsgId)
}

// required .micromsg.SKBuiltinString_t FromUserName = 3;
bool GetMsgImgRequest::has_fromusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetMsgImgRequest::set_has_fromusername() {
  _has_bits_[0] |= 0x00000002u;
}
void GetMsgImgRequest::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetMsgImgRequest::clear_fromusername() {
  if (fromusername_ != NULL) fromusername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_fromusername();
}
const ::micromsg::SKBuiltinString_t& GetMsgImgRequest::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgRequest.FromUserName)
  return fromusername_ != NULL ? *fromusername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* GetMsgImgRequest::mutable_fromusername() {
  set_has_fromusername();
  if (fromusername_ == NULL) {
    fromusername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetMsgImgRequest.FromUserName)
  return fromusername_;
}
::micromsg::SKBuiltinString_t* GetMsgImgRequest::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.GetMsgImgRequest.FromUserName)
  clear_has_fromusername();
  ::micromsg::SKBuiltinString_t* temp = fromusername_;
  fromusername_ = NULL;
  return temp;
}
void GetMsgImgRequest::set_allocated_fromusername(::micromsg::SKBuiltinString_t* fromusername) {
  delete fromusername_;
  fromusername_ = fromusername;
  if (fromusername) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetMsgImgRequest.FromUserName)
}

// required .micromsg.SKBuiltinString_t ToUserName = 4;
bool GetMsgImgRequest::has_tousername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetMsgImgRequest::set_has_tousername() {
  _has_bits_[0] |= 0x00000004u;
}
void GetMsgImgRequest::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetMsgImgRequest::clear_tousername() {
  if (tousername_ != NULL) tousername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_tousername();
}
const ::micromsg::SKBuiltinString_t& GetMsgImgRequest::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgRequest.ToUserName)
  return tousername_ != NULL ? *tousername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* GetMsgImgRequest::mutable_tousername() {
  set_has_tousername();
  if (tousername_ == NULL) {
    tousername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetMsgImgRequest.ToUserName)
  return tousername_;
}
::micromsg::SKBuiltinString_t* GetMsgImgRequest::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.GetMsgImgRequest.ToUserName)
  clear_has_tousername();
  ::micromsg::SKBuiltinString_t* temp = tousername_;
  tousername_ = NULL;
  return temp;
}
void GetMsgImgRequest::set_allocated_tousername(::micromsg::SKBuiltinString_t* tousername) {
  delete tousername_;
  tousername_ = tousername;
  if (tousername) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetMsgImgRequest.ToUserName)
}

// required uint32 TotalLen = 5;
bool GetMsgImgRequest::has_totallen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetMsgImgRequest::set_has_totallen() {
  _has_bits_[0] |= 0x00000010u;
}
void GetMsgImgRequest::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetMsgImgRequest::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
::google::protobuf::uint32 GetMsgImgRequest::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgRequest.TotalLen)
  return totallen_;
}
void GetMsgImgRequest::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgRequest.TotalLen)
}

// required uint32 StartPos = 6;
bool GetMsgImgRequest::has_startpos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetMsgImgRequest::set_has_startpos() {
  _has_bits_[0] |= 0x00000020u;
}
void GetMsgImgRequest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetMsgImgRequest::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
::google::protobuf::uint32 GetMsgImgRequest::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgRequest.StartPos)
  return startpos_;
}
void GetMsgImgRequest::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgRequest.StartPos)
}

// required uint32 DataLen = 7;
bool GetMsgImgRequest::has_datalen() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GetMsgImgRequest::set_has_datalen() {
  _has_bits_[0] |= 0x00000040u;
}
void GetMsgImgRequest::clear_has_datalen() {
  _has_bits_[0] &= ~0x00000040u;
}
void GetMsgImgRequest::clear_datalen() {
  datalen_ = 0u;
  clear_has_datalen();
}
::google::protobuf::uint32 GetMsgImgRequest::datalen() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgRequest.DataLen)
  return datalen_;
}
void GetMsgImgRequest::set_datalen(::google::protobuf::uint32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgRequest.DataLen)
}

// optional uint32 CompressType = 8;
bool GetMsgImgRequest::has_compresstype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GetMsgImgRequest::set_has_compresstype() {
  _has_bits_[0] |= 0x00000100u;
}
void GetMsgImgRequest::clear_has_compresstype() {
  _has_bits_[0] &= ~0x00000100u;
}
void GetMsgImgRequest::clear_compresstype() {
  compresstype_ = 0u;
  clear_has_compresstype();
}
::google::protobuf::uint32 GetMsgImgRequest::compresstype() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgRequest.CompressType)
  return compresstype_;
}
void GetMsgImgRequest::set_compresstype(::google::protobuf::uint32 value) {
  set_has_compresstype();
  compresstype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgRequest.CompressType)
}

// optional uint64 NewMsgId = 9;
bool GetMsgImgRequest::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GetMsgImgRequest::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000080u;
}
void GetMsgImgRequest::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000080u;
}
void GetMsgImgRequest::clear_newmsgid() {
  newmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_newmsgid();
}
::google::protobuf::uint64 GetMsgImgRequest::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgRequest.NewMsgId)
  return newmsgid_;
}
void GetMsgImgRequest::set_newmsgid(::google::protobuf::uint64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgRequest.NewMsgId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMsgImgResponse::kBaseResponseFieldNumber;
const int GetMsgImgResponse::kMsgIdFieldNumber;
const int GetMsgImgResponse::kFromUserNameFieldNumber;
const int GetMsgImgResponse::kToUserNameFieldNumber;
const int GetMsgImgResponse::kTotalLenFieldNumber;
const int GetMsgImgResponse::kStartPosFieldNumber;
const int GetMsgImgResponse::kDataLenFieldNumber;
const int GetMsgImgResponse::kDataFieldNumber;
const int GetMsgImgResponse::kNewMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMsgImgResponse::GetMsgImgResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetMsgImgResponse)
}
GetMsgImgResponse::GetMsgImgResponse(const GetMsgImgResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_fromusername()) {
    fromusername_ = new ::micromsg::SKBuiltinString_t(*from.fromusername_);
  } else {
    fromusername_ = NULL;
  }
  if (from.has_tousername()) {
    tousername_ = new ::micromsg::SKBuiltinString_t(*from.tousername_);
  } else {
    tousername_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::micromsg::SKBuiltinBuffer_t(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&msgid_, &from.msgid_,
    reinterpret_cast<char*>(&newmsgid_) -
    reinterpret_cast<char*>(&msgid_) + sizeof(newmsgid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetMsgImgResponse)
}

void GetMsgImgResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&newmsgid_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(newmsgid_));
}

GetMsgImgResponse::~GetMsgImgResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetMsgImgResponse)
  SharedDtor();
}

void GetMsgImgResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete fromusername_;
  }
  if (this != internal_default_instance()) {
    delete tousername_;
  }
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void GetMsgImgResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMsgImgResponse::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetMsgImgResponse& GetMsgImgResponse::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetMsgImgResponse* GetMsgImgResponse::New(::google::protobuf::Arena* arena) const {
  GetMsgImgResponse* n = new GetMsgImgResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMsgImgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetMsgImgResponse)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_fromusername()) {
      GOOGLE_DCHECK(fromusername_ != NULL);
      fromusername_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_tousername()) {
      GOOGLE_DCHECK(tousername_ != NULL);
      tousername_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&msgid_, 0, reinterpret_cast<char*>(&datalen_) -
      reinterpret_cast<char*>(&msgid_) + sizeof(datalen_));
  }
  newmsgid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetMsgImgResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetMsgImgResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MsgId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t FromUserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fromusername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t ToUserName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tousername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TotalLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 StartPos = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DataLen = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_datalen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datalen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 NewMsgId = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_newmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetMsgImgResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetMsgImgResponse)
  return false;
#undef DO_
}

void GetMsgImgResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetMsgImgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 MsgId = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }

  // required .micromsg.SKBuiltinString_t FromUserName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->fromusername_, output);
  }

  // required .micromsg.SKBuiltinString_t ToUserName = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->tousername_, output);
  }

  // required uint32 TotalLen = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->totallen(), output);
  }

  // required uint32 StartPos = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->startpos(), output);
  }

  // required uint32 DataLen = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->datalen(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->data_, output);
  }

  // optional uint64 NewMsgId = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->newmsgid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetMsgImgResponse)
}

::google::protobuf::uint8* GetMsgImgResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetMsgImgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 MsgId = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }

  // required .micromsg.SKBuiltinString_t FromUserName = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->fromusername_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t ToUserName = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->tousername_, deterministic, target);
  }

  // required uint32 TotalLen = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->totallen(), target);
  }

  // required uint32 StartPos = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->startpos(), target);
  }

  // required uint32 DataLen = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->datalen(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->data_, deterministic, target);
  }

  // optional uint64 NewMsgId = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->newmsgid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetMsgImgResponse)
  return target;
}

size_t GetMsgImgResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetMsgImgResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_fromusername()) {
    // required .micromsg.SKBuiltinString_t FromUserName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fromusername_);
  }

  if (has_tousername()) {
    // required .micromsg.SKBuiltinString_t ToUserName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tousername_);
  }

  if (has_data()) {
    // required .micromsg.SKBuiltinBuffer_t Data = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  if (has_msgid()) {
    // required uint32 MsgId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  if (has_totallen()) {
    // required uint32 TotalLen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());
  }

  if (has_startpos()) {
    // required uint32 StartPos = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());
  }

  if (has_datalen()) {
    // required uint32 DataLen = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalen());
  }

  return total_size;
}
size_t GetMsgImgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetMsgImgResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinString_t FromUserName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fromusername_);

    // required .micromsg.SKBuiltinString_t ToUserName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tousername_);

    // required .micromsg.SKBuiltinBuffer_t Data = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);

    // required uint32 MsgId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());

    // required uint32 TotalLen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());

    // required uint32 StartPos = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());

    // required uint32 DataLen = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint64 NewMsgId = 9;
  if (has_newmsgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->newmsgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMsgImgResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetMsgImgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMsgImgResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMsgImgResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetMsgImgResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetMsgImgResponse)
    MergeFrom(*source);
  }
}

void GetMsgImgResponse::MergeFrom(const GetMsgImgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetMsgImgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_fromusername()->::micromsg::SKBuiltinString_t::MergeFrom(from.fromusername());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_tousername()->::micromsg::SKBuiltinString_t::MergeFrom(from.tousername());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_data()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000010u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x00000020u) {
      totallen_ = from.totallen_;
    }
    if (cached_has_bits & 0x00000040u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00000080u) {
      datalen_ = from.datalen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_newmsgid(from.newmsgid());
  }
}

void GetMsgImgResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetMsgImgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMsgImgResponse::CopyFrom(const GetMsgImgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetMsgImgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMsgImgResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void GetMsgImgResponse::Swap(GetMsgImgResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMsgImgResponse::InternalSwap(GetMsgImgResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(fromusername_, other->fromusername_);
  std::swap(tousername_, other->tousername_);
  std::swap(data_, other->data_);
  std::swap(msgid_, other->msgid_);
  std::swap(totallen_, other->totallen_);
  std::swap(startpos_, other->startpos_);
  std::swap(datalen_, other->datalen_);
  std::swap(newmsgid_, other->newmsgid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMsgImgResponse::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMsgImgResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetMsgImgResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetMsgImgResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetMsgImgResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetMsgImgResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetMsgImgResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetMsgImgResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetMsgImgResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetMsgImgResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetMsgImgResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetMsgImgResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetMsgImgResponse.BaseResponse)
}

// required uint32 MsgId = 2;
bool GetMsgImgResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetMsgImgResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000010u;
}
void GetMsgImgResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetMsgImgResponse::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
::google::protobuf::uint32 GetMsgImgResponse::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgResponse.MsgId)
  return msgid_;
}
void GetMsgImgResponse::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgResponse.MsgId)
}

// required .micromsg.SKBuiltinString_t FromUserName = 3;
bool GetMsgImgResponse::has_fromusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetMsgImgResponse::set_has_fromusername() {
  _has_bits_[0] |= 0x00000002u;
}
void GetMsgImgResponse::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetMsgImgResponse::clear_fromusername() {
  if (fromusername_ != NULL) fromusername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_fromusername();
}
const ::micromsg::SKBuiltinString_t& GetMsgImgResponse::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgResponse.FromUserName)
  return fromusername_ != NULL ? *fromusername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* GetMsgImgResponse::mutable_fromusername() {
  set_has_fromusername();
  if (fromusername_ == NULL) {
    fromusername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetMsgImgResponse.FromUserName)
  return fromusername_;
}
::micromsg::SKBuiltinString_t* GetMsgImgResponse::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.GetMsgImgResponse.FromUserName)
  clear_has_fromusername();
  ::micromsg::SKBuiltinString_t* temp = fromusername_;
  fromusername_ = NULL;
  return temp;
}
void GetMsgImgResponse::set_allocated_fromusername(::micromsg::SKBuiltinString_t* fromusername) {
  delete fromusername_;
  fromusername_ = fromusername;
  if (fromusername) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetMsgImgResponse.FromUserName)
}

// required .micromsg.SKBuiltinString_t ToUserName = 4;
bool GetMsgImgResponse::has_tousername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetMsgImgResponse::set_has_tousername() {
  _has_bits_[0] |= 0x00000004u;
}
void GetMsgImgResponse::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetMsgImgResponse::clear_tousername() {
  if (tousername_ != NULL) tousername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_tousername();
}
const ::micromsg::SKBuiltinString_t& GetMsgImgResponse::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgResponse.ToUserName)
  return tousername_ != NULL ? *tousername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* GetMsgImgResponse::mutable_tousername() {
  set_has_tousername();
  if (tousername_ == NULL) {
    tousername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetMsgImgResponse.ToUserName)
  return tousername_;
}
::micromsg::SKBuiltinString_t* GetMsgImgResponse::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.GetMsgImgResponse.ToUserName)
  clear_has_tousername();
  ::micromsg::SKBuiltinString_t* temp = tousername_;
  tousername_ = NULL;
  return temp;
}
void GetMsgImgResponse::set_allocated_tousername(::micromsg::SKBuiltinString_t* tousername) {
  delete tousername_;
  tousername_ = tousername;
  if (tousername) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetMsgImgResponse.ToUserName)
}

// required uint32 TotalLen = 5;
bool GetMsgImgResponse::has_totallen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetMsgImgResponse::set_has_totallen() {
  _has_bits_[0] |= 0x00000020u;
}
void GetMsgImgResponse::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetMsgImgResponse::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
::google::protobuf::uint32 GetMsgImgResponse::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgResponse.TotalLen)
  return totallen_;
}
void GetMsgImgResponse::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgResponse.TotalLen)
}

// required uint32 StartPos = 6;
bool GetMsgImgResponse::has_startpos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GetMsgImgResponse::set_has_startpos() {
  _has_bits_[0] |= 0x00000040u;
}
void GetMsgImgResponse::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000040u;
}
void GetMsgImgResponse::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
::google::protobuf::uint32 GetMsgImgResponse::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgResponse.StartPos)
  return startpos_;
}
void GetMsgImgResponse::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgResponse.StartPos)
}

// required uint32 DataLen = 7;
bool GetMsgImgResponse::has_datalen() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GetMsgImgResponse::set_has_datalen() {
  _has_bits_[0] |= 0x00000080u;
}
void GetMsgImgResponse::clear_has_datalen() {
  _has_bits_[0] &= ~0x00000080u;
}
void GetMsgImgResponse::clear_datalen() {
  datalen_ = 0u;
  clear_has_datalen();
}
::google::protobuf::uint32 GetMsgImgResponse::datalen() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgResponse.DataLen)
  return datalen_;
}
void GetMsgImgResponse::set_datalen(::google::protobuf::uint32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgResponse.DataLen)
}

// required .micromsg.SKBuiltinBuffer_t Data = 8;
bool GetMsgImgResponse::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetMsgImgResponse::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
void GetMsgImgResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetMsgImgResponse::clear_data() {
  if (data_ != NULL) data_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_data();
}
const ::micromsg::SKBuiltinBuffer_t& GetMsgImgResponse::data() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgResponse.Data)
  return data_ != NULL ? *data_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetMsgImgResponse::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetMsgImgResponse.Data)
  return data_;
}
::micromsg::SKBuiltinBuffer_t* GetMsgImgResponse::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.GetMsgImgResponse.Data)
  clear_has_data();
  ::micromsg::SKBuiltinBuffer_t* temp = data_;
  data_ = NULL;
  return temp;
}
void GetMsgImgResponse::set_allocated_data(::micromsg::SKBuiltinBuffer_t* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetMsgImgResponse.Data)
}

// optional uint64 NewMsgId = 9;
bool GetMsgImgResponse::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GetMsgImgResponse::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000100u;
}
void GetMsgImgResponse::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000100u;
}
void GetMsgImgResponse::clear_newmsgid() {
  newmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_newmsgid();
}
::google::protobuf::uint64 GetMsgImgResponse::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgResponse.NewMsgId)
  return newmsgid_;
}
void GetMsgImgResponse::set_newmsgid(::google::protobuf::uint64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgResponse.NewMsgId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadVideoRequest::kBaseRequestFieldNumber;
const int UploadVideoRequest::kClientMsgIdFieldNumber;
const int UploadVideoRequest::kFromUserNameFieldNumber;
const int UploadVideoRequest::kToUserNameFieldNumber;
const int UploadVideoRequest::kThumbTotalLenFieldNumber;
const int UploadVideoRequest::kThumbStartPosFieldNumber;
const int UploadVideoRequest::kThumbDataFieldNumber;
const int UploadVideoRequest::kVideoTotalLenFieldNumber;
const int UploadVideoRequest::kVideoStartPosFieldNumber;
const int UploadVideoRequest::kVideoDataFieldNumber;
const int UploadVideoRequest::kPlayLengthFieldNumber;
const int UploadVideoRequest::kNetworkEnvFieldNumber;
const int UploadVideoRequest::kCameraTypeFieldNumber;
const int UploadVideoRequest::kFuncFlagFieldNumber;
const int UploadVideoRequest::kMsgSourceFieldNumber;
const int UploadVideoRequest::kCDNVideoUrlFieldNumber;
const int UploadVideoRequest::kAESKeyFieldNumber;
const int UploadVideoRequest::kEncryVerFieldNumber;
const int UploadVideoRequest::kCDNThumbUrlFieldNumber;
const int UploadVideoRequest::kCDNThumbImgSizeFieldNumber;
const int UploadVideoRequest::kCDNThumbImgHeightFieldNumber;
const int UploadVideoRequest::kCDNThumbImgWidthFieldNumber;
const int UploadVideoRequest::kCDNThumbAESKeyFieldNumber;
const int UploadVideoRequest::kVideoFromFieldNumber;
const int UploadVideoRequest::kReqTimeFieldNumber;
const int UploadVideoRequest::kVideoMd5FieldNumber;
const int UploadVideoRequest::kStreamVideoUrlFieldNumber;
const int UploadVideoRequest::kStreamVideoTotalTimeFieldNumber;
const int UploadVideoRequest::kStreamVideoTitleFieldNumber;
const int UploadVideoRequest::kStreamVideoWordingFieldNumber;
const int UploadVideoRequest::kStreamVideoWebUrlFieldNumber;
const int UploadVideoRequest::kStreamVideoThumbUrlFieldNumber;
const int UploadVideoRequest::kStreamVideoPublishIdFieldNumber;
const int UploadVideoRequest::kStreamVideoAdUxInfoFieldNumber;
const int UploadVideoRequest::kStatExtStrFieldNumber;
const int UploadVideoRequest::kHitMd5FieldNumber;
const int UploadVideoRequest::kVideoNewMd5FieldNumber;
const int UploadVideoRequest::kCRC32FieldNumber;
const int UploadVideoRequest::kMsgForwardTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadVideoRequest::UploadVideoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UploadVideoRequest)
}
UploadVideoRequest::UploadVideoRequest(const UploadVideoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientmsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientmsgid()) {
    clientmsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientmsgid_);
  }
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromusername()) {
    fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
  }
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tousername()) {
    tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
  }
  msgsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msgsource()) {
    msgsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgsource_);
  }
  cdnvideourl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cdnvideourl()) {
    cdnvideourl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdnvideourl_);
  }
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_aeskey()) {
    aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
  }
  cdnthumburl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cdnthumburl()) {
    cdnthumburl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdnthumburl_);
  }
  cdnthumbaeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cdnthumbaeskey()) {
    cdnthumbaeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdnthumbaeskey_);
  }
  videomd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_videomd5()) {
    videomd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.videomd5_);
  }
  streamvideourl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_streamvideourl()) {
    streamvideourl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamvideourl_);
  }
  streamvideotitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_streamvideotitle()) {
    streamvideotitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamvideotitle_);
  }
  streamvideowording_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_streamvideowording()) {
    streamvideowording_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamvideowording_);
  }
  streamvideoweburl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_streamvideoweburl()) {
    streamvideoweburl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamvideoweburl_);
  }
  streamvideothumburl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_streamvideothumburl()) {
    streamvideothumburl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamvideothumburl_);
  }
  streamvideopublishid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_streamvideopublishid()) {
    streamvideopublishid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamvideopublishid_);
  }
  streamvideoaduxinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_streamvideoaduxinfo()) {
    streamvideoaduxinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamvideoaduxinfo_);
  }
  statextstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_statextstr()) {
    statextstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.statextstr_);
  }
  videonewmd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_videonewmd5()) {
    videonewmd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.videonewmd5_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_thumbdata()) {
    thumbdata_ = new ::micromsg::SKBuiltinBuffer_t(*from.thumbdata_);
  } else {
    thumbdata_ = NULL;
  }
  if (from.has_videodata()) {
    videodata_ = new ::micromsg::SKBuiltinBuffer_t(*from.videodata_);
  } else {
    videodata_ = NULL;
  }
  ::memcpy(&thumbtotallen_, &from.thumbtotallen_,
    reinterpret_cast<char*>(&msgforwardtype_) -
    reinterpret_cast<char*>(&thumbtotallen_) + sizeof(msgforwardtype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.UploadVideoRequest)
}

void UploadVideoRequest::SharedCtor() {
  clientmsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdnvideourl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdnthumburl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdnthumbaeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videomd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamvideourl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamvideotitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamvideowording_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamvideoweburl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamvideothumburl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamvideopublishid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamvideoaduxinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statextstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videonewmd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&msgforwardtype_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(msgforwardtype_));
  _cached_size_ = 0;
}

UploadVideoRequest::~UploadVideoRequest() {
  // @@protoc_insertion_point(destructor:micromsg.UploadVideoRequest)
  SharedDtor();
}

void UploadVideoRequest::SharedDtor() {
  clientmsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgsource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdnvideourl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdnthumburl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdnthumbaeskey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videomd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamvideourl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamvideotitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamvideowording_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamvideoweburl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamvideothumburl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamvideopublishid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamvideoaduxinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statextstr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videonewmd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete thumbdata_;
  }
  if (this != internal_default_instance()) {
    delete videodata_;
  }
}

void UploadVideoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadVideoRequest::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UploadVideoRequest& UploadVideoRequest::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

UploadVideoRequest* UploadVideoRequest::New(::google::protobuf::Arena* arena) const {
  UploadVideoRequest* n = new UploadVideoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadVideoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UploadVideoRequest)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_clientmsgid()) {
      GOOGLE_DCHECK(!clientmsgid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientmsgid_.UnsafeRawStringPointer())->clear();
    }
    if (has_fromusername()) {
      GOOGLE_DCHECK(!fromusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_tousername()) {
      GOOGLE_DCHECK(!tousername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tousername_.UnsafeRawStringPointer())->clear();
    }
    if (has_msgsource()) {
      GOOGLE_DCHECK(!msgsource_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msgsource_.UnsafeRawStringPointer())->clear();
    }
    if (has_cdnvideourl()) {
      GOOGLE_DCHECK(!cdnvideourl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cdnvideourl_.UnsafeRawStringPointer())->clear();
    }
    if (has_aeskey()) {
      GOOGLE_DCHECK(!aeskey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*aeskey_.UnsafeRawStringPointer())->clear();
    }
    if (has_cdnthumburl()) {
      GOOGLE_DCHECK(!cdnthumburl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cdnthumburl_.UnsafeRawStringPointer())->clear();
    }
    if (has_cdnthumbaeskey()) {
      GOOGLE_DCHECK(!cdnthumbaeskey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cdnthumbaeskey_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_videomd5()) {
      GOOGLE_DCHECK(!videomd5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*videomd5_.UnsafeRawStringPointer())->clear();
    }
    if (has_streamvideourl()) {
      GOOGLE_DCHECK(!streamvideourl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*streamvideourl_.UnsafeRawStringPointer())->clear();
    }
    if (has_streamvideotitle()) {
      GOOGLE_DCHECK(!streamvideotitle_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*streamvideotitle_.UnsafeRawStringPointer())->clear();
    }
    if (has_streamvideowording()) {
      GOOGLE_DCHECK(!streamvideowording_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*streamvideowording_.UnsafeRawStringPointer())->clear();
    }
    if (has_streamvideoweburl()) {
      GOOGLE_DCHECK(!streamvideoweburl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*streamvideoweburl_.UnsafeRawStringPointer())->clear();
    }
    if (has_streamvideothumburl()) {
      GOOGLE_DCHECK(!streamvideothumburl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*streamvideothumburl_.UnsafeRawStringPointer())->clear();
    }
    if (has_streamvideopublishid()) {
      GOOGLE_DCHECK(!streamvideopublishid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*streamvideopublishid_.UnsafeRawStringPointer())->clear();
    }
    if (has_streamvideoaduxinfo()) {
      GOOGLE_DCHECK(!streamvideoaduxinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*streamvideoaduxinfo_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[16 / 32] & 2031616u) {
    if (has_statextstr()) {
      GOOGLE_DCHECK(!statextstr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*statextstr_.UnsafeRawStringPointer())->clear();
    }
    if (has_videonewmd5()) {
      GOOGLE_DCHECK(!videonewmd5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*videonewmd5_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_thumbdata()) {
      GOOGLE_DCHECK(thumbdata_ != NULL);
      thumbdata_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_videodata()) {
      GOOGLE_DCHECK(videodata_ != NULL);
      videodata_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 14680064u) {
    ::memset(&thumbtotallen_, 0, reinterpret_cast<char*>(&videototallen_) -
      reinterpret_cast<char*>(&thumbtotallen_) + sizeof(videototallen_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&videostartpos_, 0, reinterpret_cast<char*>(&cdnthumbimgheight_) -
      reinterpret_cast<char*>(&videostartpos_) + sizeof(cdnthumbimgheight_));
  }
  if (_has_bits_[32 / 32] & 127u) {
    ::memset(&cdnthumbimgwidth_, 0, reinterpret_cast<char*>(&msgforwardtype_) -
      reinterpret_cast<char*>(&cdnthumbimgwidth_) + sizeof(msgforwardtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UploadVideoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UploadVideoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientMsgId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientmsgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientmsgid().data(), this->clientmsgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadVideoRequest.ClientMsgId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FromUserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromusername().data(), this->fromusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadVideoRequest.FromUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ToUserName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tousername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tousername().data(), this->tousername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadVideoRequest.ToUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ThumbTotalLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_thumbtotallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumbtotallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ThumbStartPos = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_thumbstartpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumbstartpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ThumbData = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thumbdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 VideoTotalLen = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_videototallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videototallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 VideoStartPos = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_videostartpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videostartpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t VideoData = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_videodata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 PlayLength = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_playlength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playlength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NetworkEnv = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_networkenv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &networkenv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CameraType = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_cameratype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cameratype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 FuncFlag = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_funcflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &funcflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MsgSource = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgsource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgsource().data(), this->msgsource().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadVideoRequest.MsgSource");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CDNVideoUrl = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdnvideourl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cdnvideourl().data(), this->cdnvideourl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadVideoRequest.CDNVideoUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AESKey = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aeskey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aeskey().data(), this->aeskey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadVideoRequest.AESKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 EncryVer = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_encryver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encryver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CDNThumbUrl = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdnthumburl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cdnthumburl().data(), this->cdnthumburl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadVideoRequest.CDNThumbUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 CDNThumbImgSize = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_cdnthumbimgsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdnthumbimgsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 CDNThumbImgHeight = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_cdnthumbimgheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdnthumbimgheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 CDNThumbImgWidth = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_cdnthumbimgwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdnthumbimgwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CDNThumbAESKey = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdnthumbaeskey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cdnthumbaeskey().data(), this->cdnthumbaeskey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadVideoRequest.CDNThumbAESKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 VideoFrom = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_videofrom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videofrom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ReqTime = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_reqtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VideoMd5 = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videomd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->videomd5().data(), this->videomd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadVideoRequest.VideoMd5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string StreamVideoUrl = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamvideourl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->streamvideourl().data(), this->streamvideourl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadVideoRequest.StreamVideoUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 StreamVideoTotalTime = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_streamvideototaltime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &streamvideototaltime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string StreamVideoTitle = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamvideotitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->streamvideotitle().data(), this->streamvideotitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadVideoRequest.StreamVideoTitle");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string StreamVideoWording = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamvideowording()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->streamvideowording().data(), this->streamvideowording().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadVideoRequest.StreamVideoWording");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string StreamVideoWebUrl = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamvideoweburl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->streamvideoweburl().data(), this->streamvideoweburl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadVideoRequest.StreamVideoWebUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string StreamVideoThumbUrl = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(258u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamvideothumburl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->streamvideothumburl().data(), this->streamvideothumburl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadVideoRequest.StreamVideoThumbUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string StreamVideoPublishId = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(266u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamvideopublishid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->streamvideopublishid().data(), this->streamvideopublishid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadVideoRequest.StreamVideoPublishId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string StreamVideoAdUxInfo = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(274u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamvideoaduxinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->streamvideoaduxinfo().data(), this->streamvideoaduxinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadVideoRequest.StreamVideoAdUxInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string StatExtStr = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(282u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statextstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->statextstr().data(), this->statextstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadVideoRequest.StatExtStr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 HitMd5 = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(288u)) {
          set_has_hitmd5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hitmd5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VideoNewMd5 = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(298u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videonewmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->videonewmd5().data(), this->videonewmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadVideoRequest.VideoNewMd5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CRC32 = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(304u)) {
          set_has_crc32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 MsgForwardType = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(312u)) {
          set_has_msgforwardtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgforwardtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UploadVideoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UploadVideoRequest)
  return false;
#undef DO_
}

void UploadVideoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UploadVideoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ClientMsgId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientmsgid().data(), this->clientmsgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.ClientMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientmsgid(), output);
  }

  // optional string FromUserName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.FromUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fromusername(), output);
  }

  // optional string ToUserName = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.ToUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tousername(), output);
  }

  // required uint32 ThumbTotalLen = 5;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->thumbtotallen(), output);
  }

  // required uint32 ThumbStartPos = 6;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->thumbstartpos(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t ThumbData = 7;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->thumbdata_, output);
  }

  // required uint32 VideoTotalLen = 8;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->videototallen(), output);
  }

  // required uint32 VideoStartPos = 9;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->videostartpos(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t VideoData = 10;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->videodata_, output);
  }

  // required uint32 PlayLength = 11;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->playlength(), output);
  }

  // optional uint32 NetworkEnv = 12;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->networkenv(), output);
  }

  // optional uint32 CameraType = 13;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->cameratype(), output);
  }

  // optional uint32 FuncFlag = 14;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->funcflag(), output);
  }

  // optional string MsgSource = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgsource().data(), this->msgsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.MsgSource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->msgsource(), output);
  }

  // optional string CDNVideoUrl = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdnvideourl().data(), this->cdnvideourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.CDNVideoUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->cdnvideourl(), output);
  }

  // optional string AESKey = 17;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.AESKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->aeskey(), output);
  }

  // optional int32 EncryVer = 18;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->encryver(), output);
  }

  // optional string CDNThumbUrl = 19;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdnthumburl().data(), this->cdnthumburl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.CDNThumbUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->cdnthumburl(), output);
  }

  // optional int32 CDNThumbImgSize = 20;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->cdnthumbimgsize(), output);
  }

  // optional int32 CDNThumbImgHeight = 21;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->cdnthumbimgheight(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 CDNThumbImgWidth = 22;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->cdnthumbimgwidth(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string CDNThumbAESKey = 23;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdnthumbaeskey().data(), this->cdnthumbaeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.CDNThumbAESKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->cdnthumbaeskey(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 VideoFrom = 24;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->videofrom(), output);
  }

  // optional uint32 ReqTime = 25;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->reqtime(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string VideoMd5 = 26;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->videomd5().data(), this->videomd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.VideoMd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->videomd5(), output);
  }

  // optional string StreamVideoUrl = 27;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamvideourl().data(), this->streamvideourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.StreamVideoUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->streamvideourl(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 StreamVideoTotalTime = 28;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->streamvideototaltime(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string StreamVideoTitle = 29;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamvideotitle().data(), this->streamvideotitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.StreamVideoTitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->streamvideotitle(), output);
  }

  // optional string StreamVideoWording = 30;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamvideowording().data(), this->streamvideowording().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.StreamVideoWording");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->streamvideowording(), output);
  }

  // optional string StreamVideoWebUrl = 31;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamvideoweburl().data(), this->streamvideoweburl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.StreamVideoWebUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->streamvideoweburl(), output);
  }

  // optional string StreamVideoThumbUrl = 32;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamvideothumburl().data(), this->streamvideothumburl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.StreamVideoThumbUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->streamvideothumburl(), output);
  }

  // optional string StreamVideoPublishId = 33;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamvideopublishid().data(), this->streamvideopublishid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.StreamVideoPublishId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->streamvideopublishid(), output);
  }

  // optional string StreamVideoAdUxInfo = 34;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamvideoaduxinfo().data(), this->streamvideoaduxinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.StreamVideoAdUxInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->streamvideoaduxinfo(), output);
  }

  // optional string StatExtStr = 35;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statextstr().data(), this->statextstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.StatExtStr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      35, this->statextstr(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 HitMd5 = 36;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->hitmd5(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string VideoNewMd5 = 37;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->videonewmd5().data(), this->videonewmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.VideoNewMd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->videonewmd5(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 CRC32 = 38;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->crc32(), output);
  }

  // optional uint32 MsgForwardType = 39;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->msgforwardtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UploadVideoRequest)
}

::google::protobuf::uint8* UploadVideoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UploadVideoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ClientMsgId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientmsgid().data(), this->clientmsgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.ClientMsgId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientmsgid(), target);
  }

  // optional string FromUserName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.FromUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fromusername(), target);
  }

  // optional string ToUserName = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.ToUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tousername(), target);
  }

  // required uint32 ThumbTotalLen = 5;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->thumbtotallen(), target);
  }

  // required uint32 ThumbStartPos = 6;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->thumbstartpos(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t ThumbData = 7;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->thumbdata_, deterministic, target);
  }

  // required uint32 VideoTotalLen = 8;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->videototallen(), target);
  }

  // required uint32 VideoStartPos = 9;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->videostartpos(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t VideoData = 10;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->videodata_, deterministic, target);
  }

  // required uint32 PlayLength = 11;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->playlength(), target);
  }

  // optional uint32 NetworkEnv = 12;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->networkenv(), target);
  }

  // optional uint32 CameraType = 13;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->cameratype(), target);
  }

  // optional uint32 FuncFlag = 14;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->funcflag(), target);
  }

  // optional string MsgSource = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgsource().data(), this->msgsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.MsgSource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->msgsource(), target);
  }

  // optional string CDNVideoUrl = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdnvideourl().data(), this->cdnvideourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.CDNVideoUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->cdnvideourl(), target);
  }

  // optional string AESKey = 17;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.AESKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->aeskey(), target);
  }

  // optional int32 EncryVer = 18;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->encryver(), target);
  }

  // optional string CDNThumbUrl = 19;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdnthumburl().data(), this->cdnthumburl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.CDNThumbUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->cdnthumburl(), target);
  }

  // optional int32 CDNThumbImgSize = 20;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->cdnthumbimgsize(), target);
  }

  // optional int32 CDNThumbImgHeight = 21;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->cdnthumbimgheight(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 CDNThumbImgWidth = 22;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->cdnthumbimgwidth(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string CDNThumbAESKey = 23;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdnthumbaeskey().data(), this->cdnthumbaeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.CDNThumbAESKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->cdnthumbaeskey(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 VideoFrom = 24;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->videofrom(), target);
  }

  // optional uint32 ReqTime = 25;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->reqtime(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string VideoMd5 = 26;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->videomd5().data(), this->videomd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.VideoMd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->videomd5(), target);
  }

  // optional string StreamVideoUrl = 27;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamvideourl().data(), this->streamvideourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.StreamVideoUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->streamvideourl(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 StreamVideoTotalTime = 28;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->streamvideototaltime(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string StreamVideoTitle = 29;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamvideotitle().data(), this->streamvideotitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.StreamVideoTitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->streamvideotitle(), target);
  }

  // optional string StreamVideoWording = 30;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamvideowording().data(), this->streamvideowording().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.StreamVideoWording");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->streamvideowording(), target);
  }

  // optional string StreamVideoWebUrl = 31;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamvideoweburl().data(), this->streamvideoweburl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.StreamVideoWebUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->streamvideoweburl(), target);
  }

  // optional string StreamVideoThumbUrl = 32;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamvideothumburl().data(), this->streamvideothumburl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.StreamVideoThumbUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->streamvideothumburl(), target);
  }

  // optional string StreamVideoPublishId = 33;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamvideopublishid().data(), this->streamvideopublishid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.StreamVideoPublishId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->streamvideopublishid(), target);
  }

  // optional string StreamVideoAdUxInfo = 34;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamvideoaduxinfo().data(), this->streamvideoaduxinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.StreamVideoAdUxInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->streamvideoaduxinfo(), target);
  }

  // optional string StatExtStr = 35;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statextstr().data(), this->statextstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.StatExtStr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->statextstr(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 HitMd5 = 36;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->hitmd5(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string VideoNewMd5 = 37;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->videonewmd5().data(), this->videonewmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoRequest.VideoNewMd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->videonewmd5(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 CRC32 = 38;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->crc32(), target);
  }

  // optional uint32 MsgForwardType = 39;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->msgforwardtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UploadVideoRequest)
  return target;
}

size_t UploadVideoRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.UploadVideoRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_thumbdata()) {
    // required .micromsg.SKBuiltinBuffer_t ThumbData = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thumbdata_);
  }

  if (has_videodata()) {
    // required .micromsg.SKBuiltinBuffer_t VideoData = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->videodata_);
  }

  if (has_thumbtotallen()) {
    // required uint32 ThumbTotalLen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thumbtotallen());
  }

  if (has_thumbstartpos()) {
    // required uint32 ThumbStartPos = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thumbstartpos());
  }

  if (has_videototallen()) {
    // required uint32 VideoTotalLen = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->videototallen());
  }

  if (has_videostartpos()) {
    // required uint32 VideoStartPos = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->videostartpos());
  }

  if (has_playlength()) {
    // required uint32 PlayLength = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playlength());
  }

  return total_size;
}
size_t UploadVideoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UploadVideoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x03fc0000) ^ 0x03fc0000) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t ThumbData = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thumbdata_);

    // required .micromsg.SKBuiltinBuffer_t VideoData = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->videodata_);

    // required uint32 ThumbTotalLen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thumbtotallen());

    // required uint32 ThumbStartPos = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thumbstartpos());

    // required uint32 VideoTotalLen = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->videototallen());

    // required uint32 VideoStartPos = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->videostartpos());

    // required uint32 PlayLength = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playlength());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string ClientMsgId = 2;
    if (has_clientmsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientmsgid());
    }

    // optional string FromUserName = 3;
    if (has_fromusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromusername());
    }

    // optional string ToUserName = 4;
    if (has_tousername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tousername());
    }

    // optional string MsgSource = 15;
    if (has_msgsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgsource());
    }

    // optional string CDNVideoUrl = 16;
    if (has_cdnvideourl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cdnvideourl());
    }

    // optional string AESKey = 17;
    if (has_aeskey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aeskey());
    }

    // optional string CDNThumbUrl = 19;
    if (has_cdnthumburl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cdnthumburl());
    }

    // optional string CDNThumbAESKey = 23;
    if (has_cdnthumbaeskey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cdnthumbaeskey());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string VideoMd5 = 26;
    if (has_videomd5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->videomd5());
    }

    // optional string StreamVideoUrl = 27;
    if (has_streamvideourl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->streamvideourl());
    }

    // optional string StreamVideoTitle = 29;
    if (has_streamvideotitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->streamvideotitle());
    }

    // optional string StreamVideoWording = 30;
    if (has_streamvideowording()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->streamvideowording());
    }

    // optional string StreamVideoWebUrl = 31;
    if (has_streamvideoweburl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->streamvideoweburl());
    }

    // optional string StreamVideoThumbUrl = 32;
    if (has_streamvideothumburl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->streamvideothumburl());
    }

    // optional string StreamVideoPublishId = 33;
    if (has_streamvideopublishid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->streamvideopublishid());
    }

    // optional string StreamVideoAdUxInfo = 34;
    if (has_streamvideoaduxinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->streamvideoaduxinfo());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional string StatExtStr = 35;
    if (has_statextstr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statextstr());
    }

    // optional string VideoNewMd5 = 37;
    if (has_videonewmd5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->videonewmd5());
    }

  }
  if (_has_bits_[24 / 32] & 4227858432u) {
    // optional uint32 NetworkEnv = 12;
    if (has_networkenv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->networkenv());
    }

    // optional uint32 CameraType = 13;
    if (has_cameratype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cameratype());
    }

    // optional uint32 FuncFlag = 14;
    if (has_funcflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->funcflag());
    }

    // optional int32 EncryVer = 18;
    if (has_encryver()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->encryver());
    }

    // optional int32 CDNThumbImgSize = 20;
    if (has_cdnthumbimgsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdnthumbimgsize());
    }

    // optional int32 CDNThumbImgHeight = 21;
    if (has_cdnthumbimgheight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdnthumbimgheight());
    }

  }
  if (_has_bits_[32 / 32] & 127u) {
    // optional int32 CDNThumbImgWidth = 22;
    if (has_cdnthumbimgwidth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdnthumbimgwidth());
    }

    // optional int32 VideoFrom = 24;
    if (has_videofrom()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videofrom());
    }

    // optional uint32 ReqTime = 25;
    if (has_reqtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqtime());
    }

    // optional uint32 StreamVideoTotalTime = 28;
    if (has_streamvideototaltime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->streamvideototaltime());
    }

    // optional uint32 HitMd5 = 36;
    if (has_hitmd5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hitmd5());
    }

    // optional uint32 CRC32 = 38;
    if (has_crc32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc32());
    }

    // optional uint32 MsgForwardType = 39;
    if (has_msgforwardtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgforwardtype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadVideoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UploadVideoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadVideoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadVideoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UploadVideoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UploadVideoRequest)
    MergeFrom(*source);
  }
}

void UploadVideoRequest::MergeFrom(const UploadVideoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UploadVideoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientmsgid();
      clientmsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientmsgid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fromusername();
      fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_tousername();
      tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_msgsource();
      msgsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgsource_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_cdnvideourl();
      cdnvideourl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdnvideourl_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_aeskey();
      aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_cdnthumburl();
      cdnthumburl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdnthumburl_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_cdnthumbaeskey();
      cdnthumbaeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdnthumbaeskey_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_videomd5();
      videomd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.videomd5_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_streamvideourl();
      streamvideourl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamvideourl_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_streamvideotitle();
      streamvideotitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamvideotitle_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_streamvideowording();
      streamvideowording_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamvideowording_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_streamvideoweburl();
      streamvideoweburl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamvideoweburl_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_streamvideothumburl();
      streamvideothumburl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamvideothumburl_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_streamvideopublishid();
      streamvideopublishid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamvideopublishid_);
    }
    if (cached_has_bits & 0x00008000u) {
      set_has_streamvideoaduxinfo();
      streamvideoaduxinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamvideoaduxinfo_);
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      set_has_statextstr();
      statextstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.statextstr_);
    }
    if (cached_has_bits & 0x00020000u) {
      set_has_videonewmd5();
      videonewmd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.videonewmd5_);
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_thumbdata()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.thumbdata());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_videodata()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.videodata());
    }
    if (cached_has_bits & 0x00200000u) {
      thumbtotallen_ = from.thumbtotallen_;
    }
    if (cached_has_bits & 0x00400000u) {
      thumbstartpos_ = from.thumbstartpos_;
    }
    if (cached_has_bits & 0x00800000u) {
      videototallen_ = from.videototallen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      videostartpos_ = from.videostartpos_;
    }
    if (cached_has_bits & 0x02000000u) {
      playlength_ = from.playlength_;
    }
    if (cached_has_bits & 0x04000000u) {
      networkenv_ = from.networkenv_;
    }
    if (cached_has_bits & 0x08000000u) {
      cameratype_ = from.cameratype_;
    }
    if (cached_has_bits & 0x10000000u) {
      funcflag_ = from.funcflag_;
    }
    if (cached_has_bits & 0x20000000u) {
      encryver_ = from.encryver_;
    }
    if (cached_has_bits & 0x40000000u) {
      cdnthumbimgsize_ = from.cdnthumbimgsize_;
    }
    if (cached_has_bits & 0x80000000u) {
      cdnthumbimgheight_ = from.cdnthumbimgheight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      cdnthumbimgwidth_ = from.cdnthumbimgwidth_;
    }
    if (cached_has_bits & 0x00000002u) {
      videofrom_ = from.videofrom_;
    }
    if (cached_has_bits & 0x00000004u) {
      reqtime_ = from.reqtime_;
    }
    if (cached_has_bits & 0x00000008u) {
      streamvideototaltime_ = from.streamvideototaltime_;
    }
    if (cached_has_bits & 0x00000010u) {
      hitmd5_ = from.hitmd5_;
    }
    if (cached_has_bits & 0x00000020u) {
      crc32_ = from.crc32_;
    }
    if (cached_has_bits & 0x00000040u) {
      msgforwardtype_ = from.msgforwardtype_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void UploadVideoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UploadVideoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadVideoRequest::CopyFrom(const UploadVideoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UploadVideoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadVideoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x03fc0000) != 0x03fc0000) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_thumbdata()) {
    if (!this->thumbdata_->IsInitialized()) return false;
  }
  if (has_videodata()) {
    if (!this->videodata_->IsInitialized()) return false;
  }
  return true;
}

void UploadVideoRequest::Swap(UploadVideoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadVideoRequest::InternalSwap(UploadVideoRequest* other) {
  clientmsgid_.Swap(&other->clientmsgid_);
  fromusername_.Swap(&other->fromusername_);
  tousername_.Swap(&other->tousername_);
  msgsource_.Swap(&other->msgsource_);
  cdnvideourl_.Swap(&other->cdnvideourl_);
  aeskey_.Swap(&other->aeskey_);
  cdnthumburl_.Swap(&other->cdnthumburl_);
  cdnthumbaeskey_.Swap(&other->cdnthumbaeskey_);
  videomd5_.Swap(&other->videomd5_);
  streamvideourl_.Swap(&other->streamvideourl_);
  streamvideotitle_.Swap(&other->streamvideotitle_);
  streamvideowording_.Swap(&other->streamvideowording_);
  streamvideoweburl_.Swap(&other->streamvideoweburl_);
  streamvideothumburl_.Swap(&other->streamvideothumburl_);
  streamvideopublishid_.Swap(&other->streamvideopublishid_);
  streamvideoaduxinfo_.Swap(&other->streamvideoaduxinfo_);
  statextstr_.Swap(&other->statextstr_);
  videonewmd5_.Swap(&other->videonewmd5_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(thumbdata_, other->thumbdata_);
  std::swap(videodata_, other->videodata_);
  std::swap(thumbtotallen_, other->thumbtotallen_);
  std::swap(thumbstartpos_, other->thumbstartpos_);
  std::swap(videototallen_, other->videototallen_);
  std::swap(videostartpos_, other->videostartpos_);
  std::swap(playlength_, other->playlength_);
  std::swap(networkenv_, other->networkenv_);
  std::swap(cameratype_, other->cameratype_);
  std::swap(funcflag_, other->funcflag_);
  std::swap(encryver_, other->encryver_);
  std::swap(cdnthumbimgsize_, other->cdnthumbimgsize_);
  std::swap(cdnthumbimgheight_, other->cdnthumbimgheight_);
  std::swap(cdnthumbimgwidth_, other->cdnthumbimgwidth_);
  std::swap(videofrom_, other->videofrom_);
  std::swap(reqtime_, other->reqtime_);
  std::swap(streamvideototaltime_, other->streamvideototaltime_);
  std::swap(hitmd5_, other->hitmd5_);
  std::swap(crc32_, other->crc32_);
  std::swap(msgforwardtype_, other->msgforwardtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadVideoRequest::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadVideoRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool UploadVideoRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void UploadVideoRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00040000u;
}
void UploadVideoRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00040000u;
}
void UploadVideoRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& UploadVideoRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* UploadVideoRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* UploadVideoRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void UploadVideoRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.BaseRequest)
}

// optional string ClientMsgId = 2;
bool UploadVideoRequest::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UploadVideoRequest::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000001u;
}
void UploadVideoRequest::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UploadVideoRequest::clear_clientmsgid() {
  clientmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientmsgid();
}
const ::std::string& UploadVideoRequest::clientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.ClientMsgId)
  return clientmsgid_.GetNoArena();
}
void UploadVideoRequest::set_clientmsgid(const ::std::string& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.ClientMsgId)
}
#if LANG_CXX11
void UploadVideoRequest::set_clientmsgid(::std::string&& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.ClientMsgId)
}
#endif
void UploadVideoRequest::set_clientmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.ClientMsgId)
}
void UploadVideoRequest::set_clientmsgid(const char* value, size_t size) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.ClientMsgId)
}
::std::string* UploadVideoRequest::mutable_clientmsgid() {
  set_has_clientmsgid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.ClientMsgId)
  return clientmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadVideoRequest::release_clientmsgid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.ClientMsgId)
  clear_has_clientmsgid();
  return clientmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadVideoRequest::set_allocated_clientmsgid(::std::string* clientmsgid) {
  if (clientmsgid != NULL) {
    set_has_clientmsgid();
  } else {
    clear_has_clientmsgid();
  }
  clientmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientmsgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.ClientMsgId)
}

// optional string FromUserName = 3;
bool UploadVideoRequest::has_fromusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UploadVideoRequest::set_has_fromusername() {
  _has_bits_[0] |= 0x00000002u;
}
void UploadVideoRequest::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000002u;
}
void UploadVideoRequest::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
const ::std::string& UploadVideoRequest::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.FromUserName)
  return fromusername_.GetNoArena();
}
void UploadVideoRequest::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.FromUserName)
}
#if LANG_CXX11
void UploadVideoRequest::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.FromUserName)
}
#endif
void UploadVideoRequest::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.FromUserName)
}
void UploadVideoRequest::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.FromUserName)
}
::std::string* UploadVideoRequest::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.FromUserName)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadVideoRequest::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.FromUserName)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadVideoRequest::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.FromUserName)
}

// optional string ToUserName = 4;
bool UploadVideoRequest::has_tousername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UploadVideoRequest::set_has_tousername() {
  _has_bits_[0] |= 0x00000004u;
}
void UploadVideoRequest::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000004u;
}
void UploadVideoRequest::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
const ::std::string& UploadVideoRequest::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.ToUserName)
  return tousername_.GetNoArena();
}
void UploadVideoRequest::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.ToUserName)
}
#if LANG_CXX11
void UploadVideoRequest::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.ToUserName)
}
#endif
void UploadVideoRequest::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.ToUserName)
}
void UploadVideoRequest::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.ToUserName)
}
::std::string* UploadVideoRequest::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadVideoRequest::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadVideoRequest::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.ToUserName)
}

// required uint32 ThumbTotalLen = 5;
bool UploadVideoRequest::has_thumbtotallen() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void UploadVideoRequest::set_has_thumbtotallen() {
  _has_bits_[0] |= 0x00200000u;
}
void UploadVideoRequest::clear_has_thumbtotallen() {
  _has_bits_[0] &= ~0x00200000u;
}
void UploadVideoRequest::clear_thumbtotallen() {
  thumbtotallen_ = 0u;
  clear_has_thumbtotallen();
}
::google::protobuf::uint32 UploadVideoRequest::thumbtotallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.ThumbTotalLen)
  return thumbtotallen_;
}
void UploadVideoRequest::set_thumbtotallen(::google::protobuf::uint32 value) {
  set_has_thumbtotallen();
  thumbtotallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.ThumbTotalLen)
}

// required uint32 ThumbStartPos = 6;
bool UploadVideoRequest::has_thumbstartpos() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void UploadVideoRequest::set_has_thumbstartpos() {
  _has_bits_[0] |= 0x00400000u;
}
void UploadVideoRequest::clear_has_thumbstartpos() {
  _has_bits_[0] &= ~0x00400000u;
}
void UploadVideoRequest::clear_thumbstartpos() {
  thumbstartpos_ = 0u;
  clear_has_thumbstartpos();
}
::google::protobuf::uint32 UploadVideoRequest::thumbstartpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.ThumbStartPos)
  return thumbstartpos_;
}
void UploadVideoRequest::set_thumbstartpos(::google::protobuf::uint32 value) {
  set_has_thumbstartpos();
  thumbstartpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.ThumbStartPos)
}

// required .micromsg.SKBuiltinBuffer_t ThumbData = 7;
bool UploadVideoRequest::has_thumbdata() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void UploadVideoRequest::set_has_thumbdata() {
  _has_bits_[0] |= 0x00080000u;
}
void UploadVideoRequest::clear_has_thumbdata() {
  _has_bits_[0] &= ~0x00080000u;
}
void UploadVideoRequest::clear_thumbdata() {
  if (thumbdata_ != NULL) thumbdata_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_thumbdata();
}
const ::micromsg::SKBuiltinBuffer_t& UploadVideoRequest::thumbdata() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.ThumbData)
  return thumbdata_ != NULL ? *thumbdata_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* UploadVideoRequest::mutable_thumbdata() {
  set_has_thumbdata();
  if (thumbdata_ == NULL) {
    thumbdata_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.ThumbData)
  return thumbdata_;
}
::micromsg::SKBuiltinBuffer_t* UploadVideoRequest::release_thumbdata() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.ThumbData)
  clear_has_thumbdata();
  ::micromsg::SKBuiltinBuffer_t* temp = thumbdata_;
  thumbdata_ = NULL;
  return temp;
}
void UploadVideoRequest::set_allocated_thumbdata(::micromsg::SKBuiltinBuffer_t* thumbdata) {
  delete thumbdata_;
  thumbdata_ = thumbdata;
  if (thumbdata) {
    set_has_thumbdata();
  } else {
    clear_has_thumbdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.ThumbData)
}

// required uint32 VideoTotalLen = 8;
bool UploadVideoRequest::has_videototallen() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void UploadVideoRequest::set_has_videototallen() {
  _has_bits_[0] |= 0x00800000u;
}
void UploadVideoRequest::clear_has_videototallen() {
  _has_bits_[0] &= ~0x00800000u;
}
void UploadVideoRequest::clear_videototallen() {
  videototallen_ = 0u;
  clear_has_videototallen();
}
::google::protobuf::uint32 UploadVideoRequest::videototallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.VideoTotalLen)
  return videototallen_;
}
void UploadVideoRequest::set_videototallen(::google::protobuf::uint32 value) {
  set_has_videototallen();
  videototallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.VideoTotalLen)
}

// required uint32 VideoStartPos = 9;
bool UploadVideoRequest::has_videostartpos() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void UploadVideoRequest::set_has_videostartpos() {
  _has_bits_[0] |= 0x01000000u;
}
void UploadVideoRequest::clear_has_videostartpos() {
  _has_bits_[0] &= ~0x01000000u;
}
void UploadVideoRequest::clear_videostartpos() {
  videostartpos_ = 0u;
  clear_has_videostartpos();
}
::google::protobuf::uint32 UploadVideoRequest::videostartpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.VideoStartPos)
  return videostartpos_;
}
void UploadVideoRequest::set_videostartpos(::google::protobuf::uint32 value) {
  set_has_videostartpos();
  videostartpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.VideoStartPos)
}

// required .micromsg.SKBuiltinBuffer_t VideoData = 10;
bool UploadVideoRequest::has_videodata() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void UploadVideoRequest::set_has_videodata() {
  _has_bits_[0] |= 0x00100000u;
}
void UploadVideoRequest::clear_has_videodata() {
  _has_bits_[0] &= ~0x00100000u;
}
void UploadVideoRequest::clear_videodata() {
  if (videodata_ != NULL) videodata_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_videodata();
}
const ::micromsg::SKBuiltinBuffer_t& UploadVideoRequest::videodata() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.VideoData)
  return videodata_ != NULL ? *videodata_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* UploadVideoRequest::mutable_videodata() {
  set_has_videodata();
  if (videodata_ == NULL) {
    videodata_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.VideoData)
  return videodata_;
}
::micromsg::SKBuiltinBuffer_t* UploadVideoRequest::release_videodata() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.VideoData)
  clear_has_videodata();
  ::micromsg::SKBuiltinBuffer_t* temp = videodata_;
  videodata_ = NULL;
  return temp;
}
void UploadVideoRequest::set_allocated_videodata(::micromsg::SKBuiltinBuffer_t* videodata) {
  delete videodata_;
  videodata_ = videodata;
  if (videodata) {
    set_has_videodata();
  } else {
    clear_has_videodata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.VideoData)
}

// required uint32 PlayLength = 11;
bool UploadVideoRequest::has_playlength() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void UploadVideoRequest::set_has_playlength() {
  _has_bits_[0] |= 0x02000000u;
}
void UploadVideoRequest::clear_has_playlength() {
  _has_bits_[0] &= ~0x02000000u;
}
void UploadVideoRequest::clear_playlength() {
  playlength_ = 0u;
  clear_has_playlength();
}
::google::protobuf::uint32 UploadVideoRequest::playlength() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.PlayLength)
  return playlength_;
}
void UploadVideoRequest::set_playlength(::google::protobuf::uint32 value) {
  set_has_playlength();
  playlength_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.PlayLength)
}

// optional uint32 NetworkEnv = 12;
bool UploadVideoRequest::has_networkenv() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void UploadVideoRequest::set_has_networkenv() {
  _has_bits_[0] |= 0x04000000u;
}
void UploadVideoRequest::clear_has_networkenv() {
  _has_bits_[0] &= ~0x04000000u;
}
void UploadVideoRequest::clear_networkenv() {
  networkenv_ = 0u;
  clear_has_networkenv();
}
::google::protobuf::uint32 UploadVideoRequest::networkenv() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.NetworkEnv)
  return networkenv_;
}
void UploadVideoRequest::set_networkenv(::google::protobuf::uint32 value) {
  set_has_networkenv();
  networkenv_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.NetworkEnv)
}

// optional uint32 CameraType = 13;
bool UploadVideoRequest::has_cameratype() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void UploadVideoRequest::set_has_cameratype() {
  _has_bits_[0] |= 0x08000000u;
}
void UploadVideoRequest::clear_has_cameratype() {
  _has_bits_[0] &= ~0x08000000u;
}
void UploadVideoRequest::clear_cameratype() {
  cameratype_ = 0u;
  clear_has_cameratype();
}
::google::protobuf::uint32 UploadVideoRequest::cameratype() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.CameraType)
  return cameratype_;
}
void UploadVideoRequest::set_cameratype(::google::protobuf::uint32 value) {
  set_has_cameratype();
  cameratype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.CameraType)
}

// optional uint32 FuncFlag = 14;
bool UploadVideoRequest::has_funcflag() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void UploadVideoRequest::set_has_funcflag() {
  _has_bits_[0] |= 0x10000000u;
}
void UploadVideoRequest::clear_has_funcflag() {
  _has_bits_[0] &= ~0x10000000u;
}
void UploadVideoRequest::clear_funcflag() {
  funcflag_ = 0u;
  clear_has_funcflag();
}
::google::protobuf::uint32 UploadVideoRequest::funcflag() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.FuncFlag)
  return funcflag_;
}
void UploadVideoRequest::set_funcflag(::google::protobuf::uint32 value) {
  set_has_funcflag();
  funcflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.FuncFlag)
}

// optional string MsgSource = 15;
bool UploadVideoRequest::has_msgsource() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UploadVideoRequest::set_has_msgsource() {
  _has_bits_[0] |= 0x00000008u;
}
void UploadVideoRequest::clear_has_msgsource() {
  _has_bits_[0] &= ~0x00000008u;
}
void UploadVideoRequest::clear_msgsource() {
  msgsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgsource();
}
const ::std::string& UploadVideoRequest::msgsource() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.MsgSource)
  return msgsource_.GetNoArena();
}
void UploadVideoRequest::set_msgsource(const ::std::string& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.MsgSource)
}
#if LANG_CXX11
void UploadVideoRequest::set_msgsource(::std::string&& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.MsgSource)
}
#endif
void UploadVideoRequest::set_msgsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.MsgSource)
}
void UploadVideoRequest::set_msgsource(const char* value, size_t size) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.MsgSource)
}
::std::string* UploadVideoRequest::mutable_msgsource() {
  set_has_msgsource();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.MsgSource)
  return msgsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadVideoRequest::release_msgsource() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.MsgSource)
  clear_has_msgsource();
  return msgsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadVideoRequest::set_allocated_msgsource(::std::string* msgsource) {
  if (msgsource != NULL) {
    set_has_msgsource();
  } else {
    clear_has_msgsource();
  }
  msgsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgsource);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.MsgSource)
}

// optional string CDNVideoUrl = 16;
bool UploadVideoRequest::has_cdnvideourl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UploadVideoRequest::set_has_cdnvideourl() {
  _has_bits_[0] |= 0x00000010u;
}
void UploadVideoRequest::clear_has_cdnvideourl() {
  _has_bits_[0] &= ~0x00000010u;
}
void UploadVideoRequest::clear_cdnvideourl() {
  cdnvideourl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdnvideourl();
}
const ::std::string& UploadVideoRequest::cdnvideourl() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.CDNVideoUrl)
  return cdnvideourl_.GetNoArena();
}
void UploadVideoRequest::set_cdnvideourl(const ::std::string& value) {
  set_has_cdnvideourl();
  cdnvideourl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.CDNVideoUrl)
}
#if LANG_CXX11
void UploadVideoRequest::set_cdnvideourl(::std::string&& value) {
  set_has_cdnvideourl();
  cdnvideourl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.CDNVideoUrl)
}
#endif
void UploadVideoRequest::set_cdnvideourl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdnvideourl();
  cdnvideourl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.CDNVideoUrl)
}
void UploadVideoRequest::set_cdnvideourl(const char* value, size_t size) {
  set_has_cdnvideourl();
  cdnvideourl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.CDNVideoUrl)
}
::std::string* UploadVideoRequest::mutable_cdnvideourl() {
  set_has_cdnvideourl();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.CDNVideoUrl)
  return cdnvideourl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadVideoRequest::release_cdnvideourl() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.CDNVideoUrl)
  clear_has_cdnvideourl();
  return cdnvideourl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadVideoRequest::set_allocated_cdnvideourl(::std::string* cdnvideourl) {
  if (cdnvideourl != NULL) {
    set_has_cdnvideourl();
  } else {
    clear_has_cdnvideourl();
  }
  cdnvideourl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdnvideourl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.CDNVideoUrl)
}

// optional string AESKey = 17;
bool UploadVideoRequest::has_aeskey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UploadVideoRequest::set_has_aeskey() {
  _has_bits_[0] |= 0x00000020u;
}
void UploadVideoRequest::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000020u;
}
void UploadVideoRequest::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
const ::std::string& UploadVideoRequest::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.AESKey)
  return aeskey_.GetNoArena();
}
void UploadVideoRequest::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.AESKey)
}
#if LANG_CXX11
void UploadVideoRequest::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.AESKey)
}
#endif
void UploadVideoRequest::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.AESKey)
}
void UploadVideoRequest::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.AESKey)
}
::std::string* UploadVideoRequest::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.AESKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadVideoRequest::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.AESKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadVideoRequest::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.AESKey)
}

// optional int32 EncryVer = 18;
bool UploadVideoRequest::has_encryver() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void UploadVideoRequest::set_has_encryver() {
  _has_bits_[0] |= 0x20000000u;
}
void UploadVideoRequest::clear_has_encryver() {
  _has_bits_[0] &= ~0x20000000u;
}
void UploadVideoRequest::clear_encryver() {
  encryver_ = 0;
  clear_has_encryver();
}
::google::protobuf::int32 UploadVideoRequest::encryver() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.EncryVer)
  return encryver_;
}
void UploadVideoRequest::set_encryver(::google::protobuf::int32 value) {
  set_has_encryver();
  encryver_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.EncryVer)
}

// optional string CDNThumbUrl = 19;
bool UploadVideoRequest::has_cdnthumburl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UploadVideoRequest::set_has_cdnthumburl() {
  _has_bits_[0] |= 0x00000040u;
}
void UploadVideoRequest::clear_has_cdnthumburl() {
  _has_bits_[0] &= ~0x00000040u;
}
void UploadVideoRequest::clear_cdnthumburl() {
  cdnthumburl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdnthumburl();
}
const ::std::string& UploadVideoRequest::cdnthumburl() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.CDNThumbUrl)
  return cdnthumburl_.GetNoArena();
}
void UploadVideoRequest::set_cdnthumburl(const ::std::string& value) {
  set_has_cdnthumburl();
  cdnthumburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.CDNThumbUrl)
}
#if LANG_CXX11
void UploadVideoRequest::set_cdnthumburl(::std::string&& value) {
  set_has_cdnthumburl();
  cdnthumburl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.CDNThumbUrl)
}
#endif
void UploadVideoRequest::set_cdnthumburl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdnthumburl();
  cdnthumburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.CDNThumbUrl)
}
void UploadVideoRequest::set_cdnthumburl(const char* value, size_t size) {
  set_has_cdnthumburl();
  cdnthumburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.CDNThumbUrl)
}
::std::string* UploadVideoRequest::mutable_cdnthumburl() {
  set_has_cdnthumburl();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.CDNThumbUrl)
  return cdnthumburl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadVideoRequest::release_cdnthumburl() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.CDNThumbUrl)
  clear_has_cdnthumburl();
  return cdnthumburl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadVideoRequest::set_allocated_cdnthumburl(::std::string* cdnthumburl) {
  if (cdnthumburl != NULL) {
    set_has_cdnthumburl();
  } else {
    clear_has_cdnthumburl();
  }
  cdnthumburl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdnthumburl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.CDNThumbUrl)
}

// optional int32 CDNThumbImgSize = 20;
bool UploadVideoRequest::has_cdnthumbimgsize() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void UploadVideoRequest::set_has_cdnthumbimgsize() {
  _has_bits_[0] |= 0x40000000u;
}
void UploadVideoRequest::clear_has_cdnthumbimgsize() {
  _has_bits_[0] &= ~0x40000000u;
}
void UploadVideoRequest::clear_cdnthumbimgsize() {
  cdnthumbimgsize_ = 0;
  clear_has_cdnthumbimgsize();
}
::google::protobuf::int32 UploadVideoRequest::cdnthumbimgsize() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.CDNThumbImgSize)
  return cdnthumbimgsize_;
}
void UploadVideoRequest::set_cdnthumbimgsize(::google::protobuf::int32 value) {
  set_has_cdnthumbimgsize();
  cdnthumbimgsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.CDNThumbImgSize)
}

// optional int32 CDNThumbImgHeight = 21;
bool UploadVideoRequest::has_cdnthumbimgheight() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void UploadVideoRequest::set_has_cdnthumbimgheight() {
  _has_bits_[0] |= 0x80000000u;
}
void UploadVideoRequest::clear_has_cdnthumbimgheight() {
  _has_bits_[0] &= ~0x80000000u;
}
void UploadVideoRequest::clear_cdnthumbimgheight() {
  cdnthumbimgheight_ = 0;
  clear_has_cdnthumbimgheight();
}
::google::protobuf::int32 UploadVideoRequest::cdnthumbimgheight() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.CDNThumbImgHeight)
  return cdnthumbimgheight_;
}
void UploadVideoRequest::set_cdnthumbimgheight(::google::protobuf::int32 value) {
  set_has_cdnthumbimgheight();
  cdnthumbimgheight_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.CDNThumbImgHeight)
}

// optional int32 CDNThumbImgWidth = 22;
bool UploadVideoRequest::has_cdnthumbimgwidth() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void UploadVideoRequest::set_has_cdnthumbimgwidth() {
  _has_bits_[1] |= 0x00000001u;
}
void UploadVideoRequest::clear_has_cdnthumbimgwidth() {
  _has_bits_[1] &= ~0x00000001u;
}
void UploadVideoRequest::clear_cdnthumbimgwidth() {
  cdnthumbimgwidth_ = 0;
  clear_has_cdnthumbimgwidth();
}
::google::protobuf::int32 UploadVideoRequest::cdnthumbimgwidth() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.CDNThumbImgWidth)
  return cdnthumbimgwidth_;
}
void UploadVideoRequest::set_cdnthumbimgwidth(::google::protobuf::int32 value) {
  set_has_cdnthumbimgwidth();
  cdnthumbimgwidth_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.CDNThumbImgWidth)
}

// optional string CDNThumbAESKey = 23;
bool UploadVideoRequest::has_cdnthumbaeskey() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UploadVideoRequest::set_has_cdnthumbaeskey() {
  _has_bits_[0] |= 0x00000080u;
}
void UploadVideoRequest::clear_has_cdnthumbaeskey() {
  _has_bits_[0] &= ~0x00000080u;
}
void UploadVideoRequest::clear_cdnthumbaeskey() {
  cdnthumbaeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdnthumbaeskey();
}
const ::std::string& UploadVideoRequest::cdnthumbaeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.CDNThumbAESKey)
  return cdnthumbaeskey_.GetNoArena();
}
void UploadVideoRequest::set_cdnthumbaeskey(const ::std::string& value) {
  set_has_cdnthumbaeskey();
  cdnthumbaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.CDNThumbAESKey)
}
#if LANG_CXX11
void UploadVideoRequest::set_cdnthumbaeskey(::std::string&& value) {
  set_has_cdnthumbaeskey();
  cdnthumbaeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.CDNThumbAESKey)
}
#endif
void UploadVideoRequest::set_cdnthumbaeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdnthumbaeskey();
  cdnthumbaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.CDNThumbAESKey)
}
void UploadVideoRequest::set_cdnthumbaeskey(const char* value, size_t size) {
  set_has_cdnthumbaeskey();
  cdnthumbaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.CDNThumbAESKey)
}
::std::string* UploadVideoRequest::mutable_cdnthumbaeskey() {
  set_has_cdnthumbaeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.CDNThumbAESKey)
  return cdnthumbaeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadVideoRequest::release_cdnthumbaeskey() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.CDNThumbAESKey)
  clear_has_cdnthumbaeskey();
  return cdnthumbaeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadVideoRequest::set_allocated_cdnthumbaeskey(::std::string* cdnthumbaeskey) {
  if (cdnthumbaeskey != NULL) {
    set_has_cdnthumbaeskey();
  } else {
    clear_has_cdnthumbaeskey();
  }
  cdnthumbaeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdnthumbaeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.CDNThumbAESKey)
}

// optional int32 VideoFrom = 24;
bool UploadVideoRequest::has_videofrom() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void UploadVideoRequest::set_has_videofrom() {
  _has_bits_[1] |= 0x00000002u;
}
void UploadVideoRequest::clear_has_videofrom() {
  _has_bits_[1] &= ~0x00000002u;
}
void UploadVideoRequest::clear_videofrom() {
  videofrom_ = 0;
  clear_has_videofrom();
}
::google::protobuf::int32 UploadVideoRequest::videofrom() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.VideoFrom)
  return videofrom_;
}
void UploadVideoRequest::set_videofrom(::google::protobuf::int32 value) {
  set_has_videofrom();
  videofrom_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.VideoFrom)
}

// optional uint32 ReqTime = 25;
bool UploadVideoRequest::has_reqtime() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void UploadVideoRequest::set_has_reqtime() {
  _has_bits_[1] |= 0x00000004u;
}
void UploadVideoRequest::clear_has_reqtime() {
  _has_bits_[1] &= ~0x00000004u;
}
void UploadVideoRequest::clear_reqtime() {
  reqtime_ = 0u;
  clear_has_reqtime();
}
::google::protobuf::uint32 UploadVideoRequest::reqtime() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.ReqTime)
  return reqtime_;
}
void UploadVideoRequest::set_reqtime(::google::protobuf::uint32 value) {
  set_has_reqtime();
  reqtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.ReqTime)
}

// optional string VideoMd5 = 26;
bool UploadVideoRequest::has_videomd5() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UploadVideoRequest::set_has_videomd5() {
  _has_bits_[0] |= 0x00000100u;
}
void UploadVideoRequest::clear_has_videomd5() {
  _has_bits_[0] &= ~0x00000100u;
}
void UploadVideoRequest::clear_videomd5() {
  videomd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_videomd5();
}
const ::std::string& UploadVideoRequest::videomd5() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.VideoMd5)
  return videomd5_.GetNoArena();
}
void UploadVideoRequest::set_videomd5(const ::std::string& value) {
  set_has_videomd5();
  videomd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.VideoMd5)
}
#if LANG_CXX11
void UploadVideoRequest::set_videomd5(::std::string&& value) {
  set_has_videomd5();
  videomd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.VideoMd5)
}
#endif
void UploadVideoRequest::set_videomd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_videomd5();
  videomd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.VideoMd5)
}
void UploadVideoRequest::set_videomd5(const char* value, size_t size) {
  set_has_videomd5();
  videomd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.VideoMd5)
}
::std::string* UploadVideoRequest::mutable_videomd5() {
  set_has_videomd5();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.VideoMd5)
  return videomd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadVideoRequest::release_videomd5() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.VideoMd5)
  clear_has_videomd5();
  return videomd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadVideoRequest::set_allocated_videomd5(::std::string* videomd5) {
  if (videomd5 != NULL) {
    set_has_videomd5();
  } else {
    clear_has_videomd5();
  }
  videomd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videomd5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.VideoMd5)
}

// optional string StreamVideoUrl = 27;
bool UploadVideoRequest::has_streamvideourl() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void UploadVideoRequest::set_has_streamvideourl() {
  _has_bits_[0] |= 0x00000200u;
}
void UploadVideoRequest::clear_has_streamvideourl() {
  _has_bits_[0] &= ~0x00000200u;
}
void UploadVideoRequest::clear_streamvideourl() {
  streamvideourl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamvideourl();
}
const ::std::string& UploadVideoRequest::streamvideourl() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.StreamVideoUrl)
  return streamvideourl_.GetNoArena();
}
void UploadVideoRequest::set_streamvideourl(const ::std::string& value) {
  set_has_streamvideourl();
  streamvideourl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.StreamVideoUrl)
}
#if LANG_CXX11
void UploadVideoRequest::set_streamvideourl(::std::string&& value) {
  set_has_streamvideourl();
  streamvideourl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.StreamVideoUrl)
}
#endif
void UploadVideoRequest::set_streamvideourl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_streamvideourl();
  streamvideourl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.StreamVideoUrl)
}
void UploadVideoRequest::set_streamvideourl(const char* value, size_t size) {
  set_has_streamvideourl();
  streamvideourl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.StreamVideoUrl)
}
::std::string* UploadVideoRequest::mutable_streamvideourl() {
  set_has_streamvideourl();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.StreamVideoUrl)
  return streamvideourl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadVideoRequest::release_streamvideourl() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.StreamVideoUrl)
  clear_has_streamvideourl();
  return streamvideourl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadVideoRequest::set_allocated_streamvideourl(::std::string* streamvideourl) {
  if (streamvideourl != NULL) {
    set_has_streamvideourl();
  } else {
    clear_has_streamvideourl();
  }
  streamvideourl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamvideourl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.StreamVideoUrl)
}

// optional uint32 StreamVideoTotalTime = 28;
bool UploadVideoRequest::has_streamvideototaltime() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void UploadVideoRequest::set_has_streamvideototaltime() {
  _has_bits_[1] |= 0x00000008u;
}
void UploadVideoRequest::clear_has_streamvideototaltime() {
  _has_bits_[1] &= ~0x00000008u;
}
void UploadVideoRequest::clear_streamvideototaltime() {
  streamvideototaltime_ = 0u;
  clear_has_streamvideototaltime();
}
::google::protobuf::uint32 UploadVideoRequest::streamvideototaltime() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.StreamVideoTotalTime)
  return streamvideototaltime_;
}
void UploadVideoRequest::set_streamvideototaltime(::google::protobuf::uint32 value) {
  set_has_streamvideototaltime();
  streamvideototaltime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.StreamVideoTotalTime)
}

// optional string StreamVideoTitle = 29;
bool UploadVideoRequest::has_streamvideotitle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void UploadVideoRequest::set_has_streamvideotitle() {
  _has_bits_[0] |= 0x00000400u;
}
void UploadVideoRequest::clear_has_streamvideotitle() {
  _has_bits_[0] &= ~0x00000400u;
}
void UploadVideoRequest::clear_streamvideotitle() {
  streamvideotitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamvideotitle();
}
const ::std::string& UploadVideoRequest::streamvideotitle() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.StreamVideoTitle)
  return streamvideotitle_.GetNoArena();
}
void UploadVideoRequest::set_streamvideotitle(const ::std::string& value) {
  set_has_streamvideotitle();
  streamvideotitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.StreamVideoTitle)
}
#if LANG_CXX11
void UploadVideoRequest::set_streamvideotitle(::std::string&& value) {
  set_has_streamvideotitle();
  streamvideotitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.StreamVideoTitle)
}
#endif
void UploadVideoRequest::set_streamvideotitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_streamvideotitle();
  streamvideotitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.StreamVideoTitle)
}
void UploadVideoRequest::set_streamvideotitle(const char* value, size_t size) {
  set_has_streamvideotitle();
  streamvideotitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.StreamVideoTitle)
}
::std::string* UploadVideoRequest::mutable_streamvideotitle() {
  set_has_streamvideotitle();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.StreamVideoTitle)
  return streamvideotitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadVideoRequest::release_streamvideotitle() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.StreamVideoTitle)
  clear_has_streamvideotitle();
  return streamvideotitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadVideoRequest::set_allocated_streamvideotitle(::std::string* streamvideotitle) {
  if (streamvideotitle != NULL) {
    set_has_streamvideotitle();
  } else {
    clear_has_streamvideotitle();
  }
  streamvideotitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamvideotitle);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.StreamVideoTitle)
}

// optional string StreamVideoWording = 30;
bool UploadVideoRequest::has_streamvideowording() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void UploadVideoRequest::set_has_streamvideowording() {
  _has_bits_[0] |= 0x00000800u;
}
void UploadVideoRequest::clear_has_streamvideowording() {
  _has_bits_[0] &= ~0x00000800u;
}
void UploadVideoRequest::clear_streamvideowording() {
  streamvideowording_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamvideowording();
}
const ::std::string& UploadVideoRequest::streamvideowording() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.StreamVideoWording)
  return streamvideowording_.GetNoArena();
}
void UploadVideoRequest::set_streamvideowording(const ::std::string& value) {
  set_has_streamvideowording();
  streamvideowording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.StreamVideoWording)
}
#if LANG_CXX11
void UploadVideoRequest::set_streamvideowording(::std::string&& value) {
  set_has_streamvideowording();
  streamvideowording_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.StreamVideoWording)
}
#endif
void UploadVideoRequest::set_streamvideowording(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_streamvideowording();
  streamvideowording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.StreamVideoWording)
}
void UploadVideoRequest::set_streamvideowording(const char* value, size_t size) {
  set_has_streamvideowording();
  streamvideowording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.StreamVideoWording)
}
::std::string* UploadVideoRequest::mutable_streamvideowording() {
  set_has_streamvideowording();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.StreamVideoWording)
  return streamvideowording_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadVideoRequest::release_streamvideowording() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.StreamVideoWording)
  clear_has_streamvideowording();
  return streamvideowording_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadVideoRequest::set_allocated_streamvideowording(::std::string* streamvideowording) {
  if (streamvideowording != NULL) {
    set_has_streamvideowording();
  } else {
    clear_has_streamvideowording();
  }
  streamvideowording_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamvideowording);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.StreamVideoWording)
}

// optional string StreamVideoWebUrl = 31;
bool UploadVideoRequest::has_streamvideoweburl() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void UploadVideoRequest::set_has_streamvideoweburl() {
  _has_bits_[0] |= 0x00001000u;
}
void UploadVideoRequest::clear_has_streamvideoweburl() {
  _has_bits_[0] &= ~0x00001000u;
}
void UploadVideoRequest::clear_streamvideoweburl() {
  streamvideoweburl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamvideoweburl();
}
const ::std::string& UploadVideoRequest::streamvideoweburl() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.StreamVideoWebUrl)
  return streamvideoweburl_.GetNoArena();
}
void UploadVideoRequest::set_streamvideoweburl(const ::std::string& value) {
  set_has_streamvideoweburl();
  streamvideoweburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.StreamVideoWebUrl)
}
#if LANG_CXX11
void UploadVideoRequest::set_streamvideoweburl(::std::string&& value) {
  set_has_streamvideoweburl();
  streamvideoweburl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.StreamVideoWebUrl)
}
#endif
void UploadVideoRequest::set_streamvideoweburl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_streamvideoweburl();
  streamvideoweburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.StreamVideoWebUrl)
}
void UploadVideoRequest::set_streamvideoweburl(const char* value, size_t size) {
  set_has_streamvideoweburl();
  streamvideoweburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.StreamVideoWebUrl)
}
::std::string* UploadVideoRequest::mutable_streamvideoweburl() {
  set_has_streamvideoweburl();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.StreamVideoWebUrl)
  return streamvideoweburl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadVideoRequest::release_streamvideoweburl() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.StreamVideoWebUrl)
  clear_has_streamvideoweburl();
  return streamvideoweburl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadVideoRequest::set_allocated_streamvideoweburl(::std::string* streamvideoweburl) {
  if (streamvideoweburl != NULL) {
    set_has_streamvideoweburl();
  } else {
    clear_has_streamvideoweburl();
  }
  streamvideoweburl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamvideoweburl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.StreamVideoWebUrl)
}

// optional string StreamVideoThumbUrl = 32;
bool UploadVideoRequest::has_streamvideothumburl() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void UploadVideoRequest::set_has_streamvideothumburl() {
  _has_bits_[0] |= 0x00002000u;
}
void UploadVideoRequest::clear_has_streamvideothumburl() {
  _has_bits_[0] &= ~0x00002000u;
}
void UploadVideoRequest::clear_streamvideothumburl() {
  streamvideothumburl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamvideothumburl();
}
const ::std::string& UploadVideoRequest::streamvideothumburl() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.StreamVideoThumbUrl)
  return streamvideothumburl_.GetNoArena();
}
void UploadVideoRequest::set_streamvideothumburl(const ::std::string& value) {
  set_has_streamvideothumburl();
  streamvideothumburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.StreamVideoThumbUrl)
}
#if LANG_CXX11
void UploadVideoRequest::set_streamvideothumburl(::std::string&& value) {
  set_has_streamvideothumburl();
  streamvideothumburl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.StreamVideoThumbUrl)
}
#endif
void UploadVideoRequest::set_streamvideothumburl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_streamvideothumburl();
  streamvideothumburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.StreamVideoThumbUrl)
}
void UploadVideoRequest::set_streamvideothumburl(const char* value, size_t size) {
  set_has_streamvideothumburl();
  streamvideothumburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.StreamVideoThumbUrl)
}
::std::string* UploadVideoRequest::mutable_streamvideothumburl() {
  set_has_streamvideothumburl();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.StreamVideoThumbUrl)
  return streamvideothumburl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadVideoRequest::release_streamvideothumburl() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.StreamVideoThumbUrl)
  clear_has_streamvideothumburl();
  return streamvideothumburl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadVideoRequest::set_allocated_streamvideothumburl(::std::string* streamvideothumburl) {
  if (streamvideothumburl != NULL) {
    set_has_streamvideothumburl();
  } else {
    clear_has_streamvideothumburl();
  }
  streamvideothumburl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamvideothumburl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.StreamVideoThumbUrl)
}

// optional string StreamVideoPublishId = 33;
bool UploadVideoRequest::has_streamvideopublishid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void UploadVideoRequest::set_has_streamvideopublishid() {
  _has_bits_[0] |= 0x00004000u;
}
void UploadVideoRequest::clear_has_streamvideopublishid() {
  _has_bits_[0] &= ~0x00004000u;
}
void UploadVideoRequest::clear_streamvideopublishid() {
  streamvideopublishid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamvideopublishid();
}
const ::std::string& UploadVideoRequest::streamvideopublishid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.StreamVideoPublishId)
  return streamvideopublishid_.GetNoArena();
}
void UploadVideoRequest::set_streamvideopublishid(const ::std::string& value) {
  set_has_streamvideopublishid();
  streamvideopublishid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.StreamVideoPublishId)
}
#if LANG_CXX11
void UploadVideoRequest::set_streamvideopublishid(::std::string&& value) {
  set_has_streamvideopublishid();
  streamvideopublishid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.StreamVideoPublishId)
}
#endif
void UploadVideoRequest::set_streamvideopublishid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_streamvideopublishid();
  streamvideopublishid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.StreamVideoPublishId)
}
void UploadVideoRequest::set_streamvideopublishid(const char* value, size_t size) {
  set_has_streamvideopublishid();
  streamvideopublishid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.StreamVideoPublishId)
}
::std::string* UploadVideoRequest::mutable_streamvideopublishid() {
  set_has_streamvideopublishid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.StreamVideoPublishId)
  return streamvideopublishid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadVideoRequest::release_streamvideopublishid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.StreamVideoPublishId)
  clear_has_streamvideopublishid();
  return streamvideopublishid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadVideoRequest::set_allocated_streamvideopublishid(::std::string* streamvideopublishid) {
  if (streamvideopublishid != NULL) {
    set_has_streamvideopublishid();
  } else {
    clear_has_streamvideopublishid();
  }
  streamvideopublishid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamvideopublishid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.StreamVideoPublishId)
}

// optional string StreamVideoAdUxInfo = 34;
bool UploadVideoRequest::has_streamvideoaduxinfo() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void UploadVideoRequest::set_has_streamvideoaduxinfo() {
  _has_bits_[0] |= 0x00008000u;
}
void UploadVideoRequest::clear_has_streamvideoaduxinfo() {
  _has_bits_[0] &= ~0x00008000u;
}
void UploadVideoRequest::clear_streamvideoaduxinfo() {
  streamvideoaduxinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamvideoaduxinfo();
}
const ::std::string& UploadVideoRequest::streamvideoaduxinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.StreamVideoAdUxInfo)
  return streamvideoaduxinfo_.GetNoArena();
}
void UploadVideoRequest::set_streamvideoaduxinfo(const ::std::string& value) {
  set_has_streamvideoaduxinfo();
  streamvideoaduxinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.StreamVideoAdUxInfo)
}
#if LANG_CXX11
void UploadVideoRequest::set_streamvideoaduxinfo(::std::string&& value) {
  set_has_streamvideoaduxinfo();
  streamvideoaduxinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.StreamVideoAdUxInfo)
}
#endif
void UploadVideoRequest::set_streamvideoaduxinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_streamvideoaduxinfo();
  streamvideoaduxinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.StreamVideoAdUxInfo)
}
void UploadVideoRequest::set_streamvideoaduxinfo(const char* value, size_t size) {
  set_has_streamvideoaduxinfo();
  streamvideoaduxinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.StreamVideoAdUxInfo)
}
::std::string* UploadVideoRequest::mutable_streamvideoaduxinfo() {
  set_has_streamvideoaduxinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.StreamVideoAdUxInfo)
  return streamvideoaduxinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadVideoRequest::release_streamvideoaduxinfo() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.StreamVideoAdUxInfo)
  clear_has_streamvideoaduxinfo();
  return streamvideoaduxinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadVideoRequest::set_allocated_streamvideoaduxinfo(::std::string* streamvideoaduxinfo) {
  if (streamvideoaduxinfo != NULL) {
    set_has_streamvideoaduxinfo();
  } else {
    clear_has_streamvideoaduxinfo();
  }
  streamvideoaduxinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamvideoaduxinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.StreamVideoAdUxInfo)
}

// optional string StatExtStr = 35;
bool UploadVideoRequest::has_statextstr() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void UploadVideoRequest::set_has_statextstr() {
  _has_bits_[0] |= 0x00010000u;
}
void UploadVideoRequest::clear_has_statextstr() {
  _has_bits_[0] &= ~0x00010000u;
}
void UploadVideoRequest::clear_statextstr() {
  statextstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_statextstr();
}
const ::std::string& UploadVideoRequest::statextstr() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.StatExtStr)
  return statextstr_.GetNoArena();
}
void UploadVideoRequest::set_statextstr(const ::std::string& value) {
  set_has_statextstr();
  statextstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.StatExtStr)
}
#if LANG_CXX11
void UploadVideoRequest::set_statextstr(::std::string&& value) {
  set_has_statextstr();
  statextstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.StatExtStr)
}
#endif
void UploadVideoRequest::set_statextstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_statextstr();
  statextstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.StatExtStr)
}
void UploadVideoRequest::set_statextstr(const char* value, size_t size) {
  set_has_statextstr();
  statextstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.StatExtStr)
}
::std::string* UploadVideoRequest::mutable_statextstr() {
  set_has_statextstr();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.StatExtStr)
  return statextstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadVideoRequest::release_statextstr() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.StatExtStr)
  clear_has_statextstr();
  return statextstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadVideoRequest::set_allocated_statextstr(::std::string* statextstr) {
  if (statextstr != NULL) {
    set_has_statextstr();
  } else {
    clear_has_statextstr();
  }
  statextstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), statextstr);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.StatExtStr)
}

// optional uint32 HitMd5 = 36;
bool UploadVideoRequest::has_hitmd5() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void UploadVideoRequest::set_has_hitmd5() {
  _has_bits_[1] |= 0x00000010u;
}
void UploadVideoRequest::clear_has_hitmd5() {
  _has_bits_[1] &= ~0x00000010u;
}
void UploadVideoRequest::clear_hitmd5() {
  hitmd5_ = 0u;
  clear_has_hitmd5();
}
::google::protobuf::uint32 UploadVideoRequest::hitmd5() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.HitMd5)
  return hitmd5_;
}
void UploadVideoRequest::set_hitmd5(::google::protobuf::uint32 value) {
  set_has_hitmd5();
  hitmd5_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.HitMd5)
}

// optional string VideoNewMd5 = 37;
bool UploadVideoRequest::has_videonewmd5() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void UploadVideoRequest::set_has_videonewmd5() {
  _has_bits_[0] |= 0x00020000u;
}
void UploadVideoRequest::clear_has_videonewmd5() {
  _has_bits_[0] &= ~0x00020000u;
}
void UploadVideoRequest::clear_videonewmd5() {
  videonewmd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_videonewmd5();
}
const ::std::string& UploadVideoRequest::videonewmd5() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.VideoNewMd5)
  return videonewmd5_.GetNoArena();
}
void UploadVideoRequest::set_videonewmd5(const ::std::string& value) {
  set_has_videonewmd5();
  videonewmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.VideoNewMd5)
}
#if LANG_CXX11
void UploadVideoRequest::set_videonewmd5(::std::string&& value) {
  set_has_videonewmd5();
  videonewmd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.VideoNewMd5)
}
#endif
void UploadVideoRequest::set_videonewmd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_videonewmd5();
  videonewmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.VideoNewMd5)
}
void UploadVideoRequest::set_videonewmd5(const char* value, size_t size) {
  set_has_videonewmd5();
  videonewmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.VideoNewMd5)
}
::std::string* UploadVideoRequest::mutable_videonewmd5() {
  set_has_videonewmd5();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.VideoNewMd5)
  return videonewmd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadVideoRequest::release_videonewmd5() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.VideoNewMd5)
  clear_has_videonewmd5();
  return videonewmd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadVideoRequest::set_allocated_videonewmd5(::std::string* videonewmd5) {
  if (videonewmd5 != NULL) {
    set_has_videonewmd5();
  } else {
    clear_has_videonewmd5();
  }
  videonewmd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videonewmd5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.VideoNewMd5)
}

// optional uint32 CRC32 = 38;
bool UploadVideoRequest::has_crc32() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void UploadVideoRequest::set_has_crc32() {
  _has_bits_[1] |= 0x00000020u;
}
void UploadVideoRequest::clear_has_crc32() {
  _has_bits_[1] &= ~0x00000020u;
}
void UploadVideoRequest::clear_crc32() {
  crc32_ = 0u;
  clear_has_crc32();
}
::google::protobuf::uint32 UploadVideoRequest::crc32() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.CRC32)
  return crc32_;
}
void UploadVideoRequest::set_crc32(::google::protobuf::uint32 value) {
  set_has_crc32();
  crc32_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.CRC32)
}

// optional uint32 MsgForwardType = 39;
bool UploadVideoRequest::has_msgforwardtype() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void UploadVideoRequest::set_has_msgforwardtype() {
  _has_bits_[1] |= 0x00000040u;
}
void UploadVideoRequest::clear_has_msgforwardtype() {
  _has_bits_[1] &= ~0x00000040u;
}
void UploadVideoRequest::clear_msgforwardtype() {
  msgforwardtype_ = 0u;
  clear_has_msgforwardtype();
}
::google::protobuf::uint32 UploadVideoRequest::msgforwardtype() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.MsgForwardType)
  return msgforwardtype_;
}
void UploadVideoRequest::set_msgforwardtype(::google::protobuf::uint32 value) {
  set_has_msgforwardtype();
  msgforwardtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.MsgForwardType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadVideoResponse::kBaseResponseFieldNumber;
const int UploadVideoResponse::kClientMsgIdFieldNumber;
const int UploadVideoResponse::kMsgIdFieldNumber;
const int UploadVideoResponse::kThumbStartPosFieldNumber;
const int UploadVideoResponse::kVideoStartPosFieldNumber;
const int UploadVideoResponse::kNewMsgIdFieldNumber;
const int UploadVideoResponse::kAESKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadVideoResponse::UploadVideoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UploadVideoResponse)
}
UploadVideoResponse::UploadVideoResponse(const UploadVideoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientmsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientmsgid()) {
    clientmsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientmsgid_);
  }
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_aeskey()) {
    aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&msgid_, &from.msgid_,
    reinterpret_cast<char*>(&videostartpos_) -
    reinterpret_cast<char*>(&msgid_) + sizeof(videostartpos_));
  // @@protoc_insertion_point(copy_constructor:micromsg.UploadVideoResponse)
}

void UploadVideoResponse::SharedCtor() {
  _cached_size_ = 0;
  clientmsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&videostartpos_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(videostartpos_));
}

UploadVideoResponse::~UploadVideoResponse() {
  // @@protoc_insertion_point(destructor:micromsg.UploadVideoResponse)
  SharedDtor();
}

void UploadVideoResponse::SharedDtor() {
  clientmsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void UploadVideoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadVideoResponse::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UploadVideoResponse& UploadVideoResponse::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

UploadVideoResponse* UploadVideoResponse::New(::google::protobuf::Arena* arena) const {
  UploadVideoResponse* n = new UploadVideoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadVideoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UploadVideoResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_clientmsgid()) {
      GOOGLE_DCHECK(!clientmsgid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientmsgid_.UnsafeRawStringPointer())->clear();
    }
    if (has_aeskey()) {
      GOOGLE_DCHECK(!aeskey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*aeskey_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 120u) {
    ::memset(&msgid_, 0, reinterpret_cast<char*>(&videostartpos_) -
      reinterpret_cast<char*>(&msgid_) + sizeof(videostartpos_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UploadVideoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UploadVideoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientMsgId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientmsgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientmsgid().data(), this->clientmsgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadVideoResponse.ClientMsgId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MsgId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ThumbStartPos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_thumbstartpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumbstartpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 VideoStartPos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_videostartpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videostartpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 NewMsgId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_newmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AESKey = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aeskey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aeskey().data(), this->aeskey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadVideoResponse.AESKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UploadVideoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UploadVideoResponse)
  return false;
#undef DO_
}

void UploadVideoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UploadVideoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string ClientMsgId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientmsgid().data(), this->clientmsgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoResponse.ClientMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientmsgid(), output);
  }

  // required uint32 MsgId = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msgid(), output);
  }

  // required uint32 ThumbStartPos = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->thumbstartpos(), output);
  }

  // required uint32 VideoStartPos = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->videostartpos(), output);
  }

  // optional uint64 NewMsgId = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->newmsgid(), output);
  }

  // optional string AESKey = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoResponse.AESKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->aeskey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UploadVideoResponse)
}

::google::protobuf::uint8* UploadVideoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UploadVideoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string ClientMsgId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientmsgid().data(), this->clientmsgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoResponse.ClientMsgId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientmsgid(), target);
  }

  // required uint32 MsgId = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->msgid(), target);
  }

  // required uint32 ThumbStartPos = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->thumbstartpos(), target);
  }

  // required uint32 VideoStartPos = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->videostartpos(), target);
  }

  // optional uint64 NewMsgId = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->newmsgid(), target);
  }

  // optional string AESKey = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadVideoResponse.AESKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->aeskey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UploadVideoResponse)
  return target;
}

size_t UploadVideoResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.UploadVideoResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_msgid()) {
    // required uint32 MsgId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  if (has_thumbstartpos()) {
    // required uint32 ThumbStartPos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thumbstartpos());
  }

  if (has_videostartpos()) {
    // required uint32 VideoStartPos = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->videostartpos());
  }

  return total_size;
}
size_t UploadVideoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UploadVideoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000005c) ^ 0x0000005c) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 MsgId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());

    // required uint32 ThumbStartPos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thumbstartpos());

    // required uint32 VideoStartPos = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->videostartpos());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ClientMsgId = 2;
    if (has_clientmsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientmsgid());
    }

    // optional string AESKey = 7;
    if (has_aeskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aeskey());
    }

  }
  // optional uint64 NewMsgId = 6;
  if (has_newmsgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->newmsgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadVideoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UploadVideoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadVideoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadVideoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UploadVideoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UploadVideoResponse)
    MergeFrom(*source);
  }
}

void UploadVideoResponse::MergeFrom(const UploadVideoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UploadVideoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientmsgid();
      clientmsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientmsgid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_aeskey();
      aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000008u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x00000010u) {
      thumbstartpos_ = from.thumbstartpos_;
    }
    if (cached_has_bits & 0x00000020u) {
      newmsgid_ = from.newmsgid_;
    }
    if (cached_has_bits & 0x00000040u) {
      videostartpos_ = from.videostartpos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UploadVideoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UploadVideoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadVideoResponse::CopyFrom(const UploadVideoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UploadVideoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadVideoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005c) != 0x0000005c) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void UploadVideoResponse::Swap(UploadVideoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadVideoResponse::InternalSwap(UploadVideoResponse* other) {
  clientmsgid_.Swap(&other->clientmsgid_);
  aeskey_.Swap(&other->aeskey_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(msgid_, other->msgid_);
  std::swap(thumbstartpos_, other->thumbstartpos_);
  std::swap(newmsgid_, other->newmsgid_);
  std::swap(videostartpos_, other->videostartpos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadVideoResponse::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadVideoResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool UploadVideoResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UploadVideoResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void UploadVideoResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void UploadVideoResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& UploadVideoResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* UploadVideoResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* UploadVideoResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void UploadVideoResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoResponse.BaseResponse)
}

// optional string ClientMsgId = 2;
bool UploadVideoResponse::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UploadVideoResponse::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000001u;
}
void UploadVideoResponse::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UploadVideoResponse::clear_clientmsgid() {
  clientmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientmsgid();
}
const ::std::string& UploadVideoResponse::clientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoResponse.ClientMsgId)
  return clientmsgid_.GetNoArena();
}
void UploadVideoResponse::set_clientmsgid(const ::std::string& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoResponse.ClientMsgId)
}
#if LANG_CXX11
void UploadVideoResponse::set_clientmsgid(::std::string&& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoResponse.ClientMsgId)
}
#endif
void UploadVideoResponse::set_clientmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoResponse.ClientMsgId)
}
void UploadVideoResponse::set_clientmsgid(const char* value, size_t size) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoResponse.ClientMsgId)
}
::std::string* UploadVideoResponse::mutable_clientmsgid() {
  set_has_clientmsgid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoResponse.ClientMsgId)
  return clientmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadVideoResponse::release_clientmsgid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoResponse.ClientMsgId)
  clear_has_clientmsgid();
  return clientmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadVideoResponse::set_allocated_clientmsgid(::std::string* clientmsgid) {
  if (clientmsgid != NULL) {
    set_has_clientmsgid();
  } else {
    clear_has_clientmsgid();
  }
  clientmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientmsgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoResponse.ClientMsgId)
}

// required uint32 MsgId = 3;
bool UploadVideoResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UploadVideoResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000008u;
}
void UploadVideoResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000008u;
}
void UploadVideoResponse::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
::google::protobuf::uint32 UploadVideoResponse::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoResponse.MsgId)
  return msgid_;
}
void UploadVideoResponse::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoResponse.MsgId)
}

// required uint32 ThumbStartPos = 4;
bool UploadVideoResponse::has_thumbstartpos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UploadVideoResponse::set_has_thumbstartpos() {
  _has_bits_[0] |= 0x00000010u;
}
void UploadVideoResponse::clear_has_thumbstartpos() {
  _has_bits_[0] &= ~0x00000010u;
}
void UploadVideoResponse::clear_thumbstartpos() {
  thumbstartpos_ = 0u;
  clear_has_thumbstartpos();
}
::google::protobuf::uint32 UploadVideoResponse::thumbstartpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoResponse.ThumbStartPos)
  return thumbstartpos_;
}
void UploadVideoResponse::set_thumbstartpos(::google::protobuf::uint32 value) {
  set_has_thumbstartpos();
  thumbstartpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoResponse.ThumbStartPos)
}

// required uint32 VideoStartPos = 5;
bool UploadVideoResponse::has_videostartpos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UploadVideoResponse::set_has_videostartpos() {
  _has_bits_[0] |= 0x00000040u;
}
void UploadVideoResponse::clear_has_videostartpos() {
  _has_bits_[0] &= ~0x00000040u;
}
void UploadVideoResponse::clear_videostartpos() {
  videostartpos_ = 0u;
  clear_has_videostartpos();
}
::google::protobuf::uint32 UploadVideoResponse::videostartpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoResponse.VideoStartPos)
  return videostartpos_;
}
void UploadVideoResponse::set_videostartpos(::google::protobuf::uint32 value) {
  set_has_videostartpos();
  videostartpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoResponse.VideoStartPos)
}

// optional uint64 NewMsgId = 6;
bool UploadVideoResponse::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UploadVideoResponse::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000020u;
}
void UploadVideoResponse::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000020u;
}
void UploadVideoResponse::clear_newmsgid() {
  newmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_newmsgid();
}
::google::protobuf::uint64 UploadVideoResponse::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoResponse.NewMsgId)
  return newmsgid_;
}
void UploadVideoResponse::set_newmsgid(::google::protobuf::uint64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoResponse.NewMsgId)
}

// optional string AESKey = 7;
bool UploadVideoResponse::has_aeskey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UploadVideoResponse::set_has_aeskey() {
  _has_bits_[0] |= 0x00000002u;
}
void UploadVideoResponse::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000002u;
}
void UploadVideoResponse::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
const ::std::string& UploadVideoResponse::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoResponse.AESKey)
  return aeskey_.GetNoArena();
}
void UploadVideoResponse::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoResponse.AESKey)
}
#if LANG_CXX11
void UploadVideoResponse::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoResponse.AESKey)
}
#endif
void UploadVideoResponse::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoResponse.AESKey)
}
void UploadVideoResponse::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoResponse.AESKey)
}
::std::string* UploadVideoResponse::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoResponse.AESKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadVideoResponse::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoResponse.AESKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadVideoResponse::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoResponse.AESKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownloadVideoRequest::kBaseRequestFieldNumber;
const int DownloadVideoRequest::kMsgIdFieldNumber;
const int DownloadVideoRequest::kTotalLenFieldNumber;
const int DownloadVideoRequest::kStartPosFieldNumber;
const int DownloadVideoRequest::kNetworkEnvFieldNumber;
const int DownloadVideoRequest::kMxPackSizeFieldNumber;
const int DownloadVideoRequest::kNewMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownloadVideoRequest::DownloadVideoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DownloadVideoRequest)
}
DownloadVideoRequest::DownloadVideoRequest(const DownloadVideoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&msgid_, &from.msgid_,
    reinterpret_cast<char*>(&mxpacksize_) -
    reinterpret_cast<char*>(&msgid_) + sizeof(mxpacksize_));
  // @@protoc_insertion_point(copy_constructor:micromsg.DownloadVideoRequest)
}

void DownloadVideoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&mxpacksize_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(mxpacksize_));
}

DownloadVideoRequest::~DownloadVideoRequest() {
  // @@protoc_insertion_point(destructor:micromsg.DownloadVideoRequest)
  SharedDtor();
}

void DownloadVideoRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void DownloadVideoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadVideoRequest::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DownloadVideoRequest& DownloadVideoRequest::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DownloadVideoRequest* DownloadVideoRequest::New(::google::protobuf::Arena* arena) const {
  DownloadVideoRequest* n = new DownloadVideoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownloadVideoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DownloadVideoRequest)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&msgid_, 0, reinterpret_cast<char*>(&mxpacksize_) -
      reinterpret_cast<char*>(&msgid_) + sizeof(mxpacksize_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DownloadVideoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DownloadVideoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MsgId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TotalLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 StartPos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NetworkEnv = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_networkenv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &networkenv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 MxPackSize = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_mxpacksize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mxpacksize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 NewMsgId = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_newmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DownloadVideoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DownloadVideoRequest)
  return false;
#undef DO_
}

void DownloadVideoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DownloadVideoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 MsgId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }

  // required uint32 TotalLen = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totallen(), output);
  }

  // required uint32 StartPos = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->startpos(), output);
  }

  // optional uint32 NetworkEnv = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->networkenv(), output);
  }

  // optional uint32 MxPackSize = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mxpacksize(), output);
  }

  // optional uint64 NewMsgId = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->newmsgid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DownloadVideoRequest)
}

::google::protobuf::uint8* DownloadVideoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DownloadVideoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 MsgId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }

  // required uint32 TotalLen = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->totallen(), target);
  }

  // required uint32 StartPos = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->startpos(), target);
  }

  // optional uint32 NetworkEnv = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->networkenv(), target);
  }

  // optional uint32 MxPackSize = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mxpacksize(), target);
  }

  // optional uint64 NewMsgId = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->newmsgid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DownloadVideoRequest)
  return target;
}

size_t DownloadVideoRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.DownloadVideoRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_msgid()) {
    // required uint32 MsgId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  if (has_totallen()) {
    // required uint32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());
  }

  if (has_startpos()) {
    // required uint32 StartPos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());
  }

  return total_size;
}
size_t DownloadVideoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DownloadVideoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 MsgId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());

    // required uint32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());

    // required uint32 StartPos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 112u) {
    // optional uint32 NetworkEnv = 5;
    if (has_networkenv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->networkenv());
    }

    // optional uint64 NewMsgId = 7;
    if (has_newmsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->newmsgid());
    }

    // optional uint32 MxPackSize = 6;
    if (has_mxpacksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mxpacksize());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadVideoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DownloadVideoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DownloadVideoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DownloadVideoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DownloadVideoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DownloadVideoRequest)
    MergeFrom(*source);
  }
}

void DownloadVideoRequest::MergeFrom(const DownloadVideoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DownloadVideoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x00000004u) {
      totallen_ = from.totallen_;
    }
    if (cached_has_bits & 0x00000008u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00000010u) {
      networkenv_ = from.networkenv_;
    }
    if (cached_has_bits & 0x00000020u) {
      newmsgid_ = from.newmsgid_;
    }
    if (cached_has_bits & 0x00000040u) {
      mxpacksize_ = from.mxpacksize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DownloadVideoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DownloadVideoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadVideoRequest::CopyFrom(const DownloadVideoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DownloadVideoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadVideoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void DownloadVideoRequest::Swap(DownloadVideoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownloadVideoRequest::InternalSwap(DownloadVideoRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(msgid_, other->msgid_);
  std::swap(totallen_, other->totallen_);
  std::swap(startpos_, other->startpos_);
  std::swap(networkenv_, other->networkenv_);
  std::swap(newmsgid_, other->newmsgid_);
  std::swap(mxpacksize_, other->mxpacksize_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DownloadVideoRequest::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownloadVideoRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool DownloadVideoRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DownloadVideoRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void DownloadVideoRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void DownloadVideoRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& DownloadVideoRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* DownloadVideoRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadVideoRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* DownloadVideoRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadVideoRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void DownloadVideoRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadVideoRequest.BaseRequest)
}

// required uint32 MsgId = 2;
bool DownloadVideoRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DownloadVideoRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000002u;
}
void DownloadVideoRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000002u;
}
void DownloadVideoRequest::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
::google::protobuf::uint32 DownloadVideoRequest::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoRequest.MsgId)
  return msgid_;
}
void DownloadVideoRequest::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVideoRequest.MsgId)
}

// required uint32 TotalLen = 3;
bool DownloadVideoRequest::has_totallen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DownloadVideoRequest::set_has_totallen() {
  _has_bits_[0] |= 0x00000004u;
}
void DownloadVideoRequest::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000004u;
}
void DownloadVideoRequest::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
::google::protobuf::uint32 DownloadVideoRequest::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoRequest.TotalLen)
  return totallen_;
}
void DownloadVideoRequest::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVideoRequest.TotalLen)
}

// required uint32 StartPos = 4;
bool DownloadVideoRequest::has_startpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DownloadVideoRequest::set_has_startpos() {
  _has_bits_[0] |= 0x00000008u;
}
void DownloadVideoRequest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000008u;
}
void DownloadVideoRequest::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
::google::protobuf::uint32 DownloadVideoRequest::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoRequest.StartPos)
  return startpos_;
}
void DownloadVideoRequest::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVideoRequest.StartPos)
}

// optional uint32 NetworkEnv = 5;
bool DownloadVideoRequest::has_networkenv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DownloadVideoRequest::set_has_networkenv() {
  _has_bits_[0] |= 0x00000010u;
}
void DownloadVideoRequest::clear_has_networkenv() {
  _has_bits_[0] &= ~0x00000010u;
}
void DownloadVideoRequest::clear_networkenv() {
  networkenv_ = 0u;
  clear_has_networkenv();
}
::google::protobuf::uint32 DownloadVideoRequest::networkenv() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoRequest.NetworkEnv)
  return networkenv_;
}
void DownloadVideoRequest::set_networkenv(::google::protobuf::uint32 value) {
  set_has_networkenv();
  networkenv_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVideoRequest.NetworkEnv)
}

// optional uint32 MxPackSize = 6;
bool DownloadVideoRequest::has_mxpacksize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DownloadVideoRequest::set_has_mxpacksize() {
  _has_bits_[0] |= 0x00000040u;
}
void DownloadVideoRequest::clear_has_mxpacksize() {
  _has_bits_[0] &= ~0x00000040u;
}
void DownloadVideoRequest::clear_mxpacksize() {
  mxpacksize_ = 0u;
  clear_has_mxpacksize();
}
::google::protobuf::uint32 DownloadVideoRequest::mxpacksize() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoRequest.MxPackSize)
  return mxpacksize_;
}
void DownloadVideoRequest::set_mxpacksize(::google::protobuf::uint32 value) {
  set_has_mxpacksize();
  mxpacksize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVideoRequest.MxPackSize)
}

// optional uint64 NewMsgId = 7;
bool DownloadVideoRequest::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DownloadVideoRequest::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000020u;
}
void DownloadVideoRequest::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000020u;
}
void DownloadVideoRequest::clear_newmsgid() {
  newmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_newmsgid();
}
::google::protobuf::uint64 DownloadVideoRequest::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoRequest.NewMsgId)
  return newmsgid_;
}
void DownloadVideoRequest::set_newmsgid(::google::protobuf::uint64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVideoRequest.NewMsgId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownloadVideoResponse::kBaseResponseFieldNumber;
const int DownloadVideoResponse::kMsgIdFieldNumber;
const int DownloadVideoResponse::kTotalLenFieldNumber;
const int DownloadVideoResponse::kStartPosFieldNumber;
const int DownloadVideoResponse::kDataFieldNumber;
const int DownloadVideoResponse::kNewMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownloadVideoResponse::DownloadVideoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DownloadVideoResponse)
}
DownloadVideoResponse::DownloadVideoResponse(const DownloadVideoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::micromsg::SKBuiltinBuffer_t(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&msgid_, &from.msgid_,
    reinterpret_cast<char*>(&startpos_) -
    reinterpret_cast<char*>(&msgid_) + sizeof(startpos_));
  // @@protoc_insertion_point(copy_constructor:micromsg.DownloadVideoResponse)
}

void DownloadVideoResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&startpos_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(startpos_));
}

DownloadVideoResponse::~DownloadVideoResponse() {
  // @@protoc_insertion_point(destructor:micromsg.DownloadVideoResponse)
  SharedDtor();
}

void DownloadVideoResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void DownloadVideoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadVideoResponse::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DownloadVideoResponse& DownloadVideoResponse::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DownloadVideoResponse* DownloadVideoResponse::New(::google::protobuf::Arena* arena) const {
  DownloadVideoResponse* n = new DownloadVideoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownloadVideoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DownloadVideoResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&msgid_, 0, reinterpret_cast<char*>(&startpos_) -
      reinterpret_cast<char*>(&msgid_) + sizeof(startpos_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DownloadVideoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DownloadVideoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MsgId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TotalLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 StartPos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 NewMsgId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_newmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DownloadVideoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DownloadVideoResponse)
  return false;
#undef DO_
}

void DownloadVideoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DownloadVideoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 MsgId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }

  // required uint32 TotalLen = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totallen(), output);
  }

  // required uint32 StartPos = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->startpos(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->data_, output);
  }

  // optional uint64 NewMsgId = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->newmsgid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DownloadVideoResponse)
}

::google::protobuf::uint8* DownloadVideoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DownloadVideoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 MsgId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }

  // required uint32 TotalLen = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->totallen(), target);
  }

  // required uint32 StartPos = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->startpos(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->data_, deterministic, target);
  }

  // optional uint64 NewMsgId = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->newmsgid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DownloadVideoResponse)
  return target;
}

size_t DownloadVideoResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.DownloadVideoResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_data()) {
    // required .micromsg.SKBuiltinBuffer_t Data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  if (has_msgid()) {
    // required uint32 MsgId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  if (has_totallen()) {
    // required uint32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());
  }

  if (has_startpos()) {
    // required uint32 StartPos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());
  }

  return total_size;
}
size_t DownloadVideoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DownloadVideoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000002f) ^ 0x0000002f) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinBuffer_t Data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);

    // required uint32 MsgId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());

    // required uint32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());

    // required uint32 StartPos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint64 NewMsgId = 6;
  if (has_newmsgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->newmsgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadVideoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DownloadVideoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DownloadVideoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DownloadVideoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DownloadVideoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DownloadVideoResponse)
    MergeFrom(*source);
  }
}

void DownloadVideoResponse::MergeFrom(const DownloadVideoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DownloadVideoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_data()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000004u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x00000008u) {
      totallen_ = from.totallen_;
    }
    if (cached_has_bits & 0x00000010u) {
      newmsgid_ = from.newmsgid_;
    }
    if (cached_has_bits & 0x00000020u) {
      startpos_ = from.startpos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DownloadVideoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DownloadVideoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadVideoResponse::CopyFrom(const DownloadVideoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DownloadVideoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadVideoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void DownloadVideoResponse::Swap(DownloadVideoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownloadVideoResponse::InternalSwap(DownloadVideoResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(data_, other->data_);
  std::swap(msgid_, other->msgid_);
  std::swap(totallen_, other->totallen_);
  std::swap(newmsgid_, other->newmsgid_);
  std::swap(startpos_, other->startpos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DownloadVideoResponse::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownloadVideoResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool DownloadVideoResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DownloadVideoResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void DownloadVideoResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void DownloadVideoResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& DownloadVideoResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* DownloadVideoResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadVideoResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* DownloadVideoResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadVideoResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void DownloadVideoResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadVideoResponse.BaseResponse)
}

// required uint32 MsgId = 2;
bool DownloadVideoResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DownloadVideoResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
void DownloadVideoResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
void DownloadVideoResponse::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
::google::protobuf::uint32 DownloadVideoResponse::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoResponse.MsgId)
  return msgid_;
}
void DownloadVideoResponse::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVideoResponse.MsgId)
}

// required uint32 TotalLen = 3;
bool DownloadVideoResponse::has_totallen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DownloadVideoResponse::set_has_totallen() {
  _has_bits_[0] |= 0x00000008u;
}
void DownloadVideoResponse::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000008u;
}
void DownloadVideoResponse::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
::google::protobuf::uint32 DownloadVideoResponse::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoResponse.TotalLen)
  return totallen_;
}
void DownloadVideoResponse::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVideoResponse.TotalLen)
}

// required uint32 StartPos = 4;
bool DownloadVideoResponse::has_startpos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DownloadVideoResponse::set_has_startpos() {
  _has_bits_[0] |= 0x00000020u;
}
void DownloadVideoResponse::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000020u;
}
void DownloadVideoResponse::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
::google::protobuf::uint32 DownloadVideoResponse::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoResponse.StartPos)
  return startpos_;
}
void DownloadVideoResponse::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVideoResponse.StartPos)
}

// required .micromsg.SKBuiltinBuffer_t Data = 5;
bool DownloadVideoResponse::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DownloadVideoResponse::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void DownloadVideoResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void DownloadVideoResponse::clear_data() {
  if (data_ != NULL) data_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_data();
}
const ::micromsg::SKBuiltinBuffer_t& DownloadVideoResponse::data() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoResponse.Data)
  return data_ != NULL ? *data_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* DownloadVideoResponse::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadVideoResponse.Data)
  return data_;
}
::micromsg::SKBuiltinBuffer_t* DownloadVideoResponse::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadVideoResponse.Data)
  clear_has_data();
  ::micromsg::SKBuiltinBuffer_t* temp = data_;
  data_ = NULL;
  return temp;
}
void DownloadVideoResponse::set_allocated_data(::micromsg::SKBuiltinBuffer_t* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadVideoResponse.Data)
}

// optional uint64 NewMsgId = 6;
bool DownloadVideoResponse::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DownloadVideoResponse::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000010u;
}
void DownloadVideoResponse::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000010u;
}
void DownloadVideoResponse::clear_newmsgid() {
  newmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_newmsgid();
}
::google::protobuf::uint64 DownloadVideoResponse::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoResponse.NewMsgId)
  return newmsgid_;
}
void DownloadVideoResponse::set_newmsgid(::google::protobuf::uint64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVideoResponse.NewMsgId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RevokeMsgRequest::kBaseRequestFieldNumber;
const int RevokeMsgRequest::kClientMsgIdFieldNumber;
const int RevokeMsgRequest::kNewClientMsgIdFieldNumber;
const int RevokeMsgRequest::kCreateTimeFieldNumber;
const int RevokeMsgRequest::kSvrMsgIdFieldNumber;
const int RevokeMsgRequest::kFromUserNameFieldNumber;
const int RevokeMsgRequest::kToUserNameFieldNumber;
const int RevokeMsgRequest::kIndexOfRequestFieldNumber;
const int RevokeMsgRequest::kSvrNewMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RevokeMsgRequest::RevokeMsgRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.RevokeMsgRequest)
}
RevokeMsgRequest::RevokeMsgRequest(const RevokeMsgRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientmsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientmsgid()) {
    clientmsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientmsgid_);
  }
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromusername()) {
    fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
  }
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tousername()) {
    tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&newclientmsgid_, &from.newclientmsgid_,
    reinterpret_cast<char*>(&svrnewmsgid_) -
    reinterpret_cast<char*>(&newclientmsgid_) + sizeof(svrnewmsgid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.RevokeMsgRequest)
}

void RevokeMsgRequest::SharedCtor() {
  _cached_size_ = 0;
  clientmsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&svrnewmsgid_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(svrnewmsgid_));
}

RevokeMsgRequest::~RevokeMsgRequest() {
  // @@protoc_insertion_point(destructor:micromsg.RevokeMsgRequest)
  SharedDtor();
}

void RevokeMsgRequest::SharedDtor() {
  clientmsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void RevokeMsgRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RevokeMsgRequest::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RevokeMsgRequest& RevokeMsgRequest::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

RevokeMsgRequest* RevokeMsgRequest::New(::google::protobuf::Arena* arena) const {
  RevokeMsgRequest* n = new RevokeMsgRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RevokeMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.RevokeMsgRequest)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_clientmsgid()) {
      GOOGLE_DCHECK(!clientmsgid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientmsgid_.UnsafeRawStringPointer())->clear();
    }
    if (has_fromusername()) {
      GOOGLE_DCHECK(!fromusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_tousername()) {
      GOOGLE_DCHECK(!tousername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tousername_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&newclientmsgid_, 0, reinterpret_cast<char*>(&indexofrequest_) -
      reinterpret_cast<char*>(&newclientmsgid_) + sizeof(indexofrequest_));
  }
  svrnewmsgid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RevokeMsgRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.RevokeMsgRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientMsgId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientmsgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientmsgid().data(), this->clientmsgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RevokeMsgRequest.ClientMsgId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 NewClientMsgId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_newclientmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newclientmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CreateTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_createtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SvrMsgId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_svrmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FromUserName = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromusername().data(), this->fromusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RevokeMsgRequest.FromUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ToUserName = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tousername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tousername().data(), this->tousername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RevokeMsgRequest.ToUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 IndexOfRequest = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_indexofrequest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &indexofrequest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 SvrNewMsgId = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_svrnewmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &svrnewmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.RevokeMsgRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.RevokeMsgRequest)
  return false;
#undef DO_
}

void RevokeMsgRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.RevokeMsgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ClientMsgId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientmsgid().data(), this->clientmsgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RevokeMsgRequest.ClientMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientmsgid(), output);
  }

  // required uint32 NewClientMsgId = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->newclientmsgid(), output);
  }

  // required uint32 CreateTime = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->createtime(), output);
  }

  // required uint32 SvrMsgId = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->svrmsgid(), output);
  }

  // optional string FromUserName = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RevokeMsgRequest.FromUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->fromusername(), output);
  }

  // optional string ToUserName = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RevokeMsgRequest.ToUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->tousername(), output);
  }

  // required uint32 IndexOfRequest = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->indexofrequest(), output);
  }

  // optional uint64 SvrNewMsgId = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->svrnewmsgid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.RevokeMsgRequest)
}

::google::protobuf::uint8* RevokeMsgRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.RevokeMsgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ClientMsgId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientmsgid().data(), this->clientmsgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RevokeMsgRequest.ClientMsgId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientmsgid(), target);
  }

  // required uint32 NewClientMsgId = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->newclientmsgid(), target);
  }

  // required uint32 CreateTime = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->createtime(), target);
  }

  // required uint32 SvrMsgId = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->svrmsgid(), target);
  }

  // optional string FromUserName = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RevokeMsgRequest.FromUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fromusername(), target);
  }

  // optional string ToUserName = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RevokeMsgRequest.ToUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tousername(), target);
  }

  // required uint32 IndexOfRequest = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->indexofrequest(), target);
  }

  // optional uint64 SvrNewMsgId = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->svrnewmsgid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.RevokeMsgRequest)
  return target;
}

size_t RevokeMsgRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.RevokeMsgRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_newclientmsgid()) {
    // required uint32 NewClientMsgId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newclientmsgid());
  }

  if (has_createtime()) {
    // required uint32 CreateTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());
  }

  if (has_svrmsgid()) {
    // required uint32 SvrMsgId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->svrmsgid());
  }

  if (has_indexofrequest()) {
    // required uint32 IndexOfRequest = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->indexofrequest());
  }

  return total_size;
}
size_t RevokeMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.RevokeMsgRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000f8) ^ 0x000000f8) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 NewClientMsgId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newclientmsgid());

    // required uint32 CreateTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());

    // required uint32 SvrMsgId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->svrmsgid());

    // required uint32 IndexOfRequest = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->indexofrequest());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string ClientMsgId = 2;
    if (has_clientmsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientmsgid());
    }

    // optional string FromUserName = 6;
    if (has_fromusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromusername());
    }

    // optional string ToUserName = 7;
    if (has_tousername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tousername());
    }

  }
  // optional uint64 SvrNewMsgId = 9;
  if (has_svrnewmsgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->svrnewmsgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RevokeMsgRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.RevokeMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RevokeMsgRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RevokeMsgRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.RevokeMsgRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.RevokeMsgRequest)
    MergeFrom(*source);
  }
}

void RevokeMsgRequest::MergeFrom(const RevokeMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.RevokeMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientmsgid();
      clientmsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientmsgid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fromusername();
      fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_tousername();
      tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000010u) {
      newclientmsgid_ = from.newclientmsgid_;
    }
    if (cached_has_bits & 0x00000020u) {
      createtime_ = from.createtime_;
    }
    if (cached_has_bits & 0x00000040u) {
      svrmsgid_ = from.svrmsgid_;
    }
    if (cached_has_bits & 0x00000080u) {
      indexofrequest_ = from.indexofrequest_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_svrnewmsgid(from.svrnewmsgid());
  }
}

void RevokeMsgRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.RevokeMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevokeMsgRequest::CopyFrom(const RevokeMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.RevokeMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevokeMsgRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000f8) != 0x000000f8) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void RevokeMsgRequest::Swap(RevokeMsgRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RevokeMsgRequest::InternalSwap(RevokeMsgRequest* other) {
  clientmsgid_.Swap(&other->clientmsgid_);
  fromusername_.Swap(&other->fromusername_);
  tousername_.Swap(&other->tousername_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(newclientmsgid_, other->newclientmsgid_);
  std::swap(createtime_, other->createtime_);
  std::swap(svrmsgid_, other->svrmsgid_);
  std::swap(indexofrequest_, other->indexofrequest_);
  std::swap(svrnewmsgid_, other->svrnewmsgid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RevokeMsgRequest::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RevokeMsgRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool RevokeMsgRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RevokeMsgRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000008u;
}
void RevokeMsgRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000008u;
}
void RevokeMsgRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& RevokeMsgRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* RevokeMsgRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RevokeMsgRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* RevokeMsgRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.RevokeMsgRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void RevokeMsgRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RevokeMsgRequest.BaseRequest)
}

// optional string ClientMsgId = 2;
bool RevokeMsgRequest::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RevokeMsgRequest::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000001u;
}
void RevokeMsgRequest::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000001u;
}
void RevokeMsgRequest::clear_clientmsgid() {
  clientmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientmsgid();
}
const ::std::string& RevokeMsgRequest::clientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgRequest.ClientMsgId)
  return clientmsgid_.GetNoArena();
}
void RevokeMsgRequest::set_clientmsgid(const ::std::string& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RevokeMsgRequest.ClientMsgId)
}
#if LANG_CXX11
void RevokeMsgRequest::set_clientmsgid(::std::string&& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RevokeMsgRequest.ClientMsgId)
}
#endif
void RevokeMsgRequest::set_clientmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RevokeMsgRequest.ClientMsgId)
}
void RevokeMsgRequest::set_clientmsgid(const char* value, size_t size) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RevokeMsgRequest.ClientMsgId)
}
::std::string* RevokeMsgRequest::mutable_clientmsgid() {
  set_has_clientmsgid();
  // @@protoc_insertion_point(field_mutable:micromsg.RevokeMsgRequest.ClientMsgId)
  return clientmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RevokeMsgRequest::release_clientmsgid() {
  // @@protoc_insertion_point(field_release:micromsg.RevokeMsgRequest.ClientMsgId)
  clear_has_clientmsgid();
  return clientmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RevokeMsgRequest::set_allocated_clientmsgid(::std::string* clientmsgid) {
  if (clientmsgid != NULL) {
    set_has_clientmsgid();
  } else {
    clear_has_clientmsgid();
  }
  clientmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientmsgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RevokeMsgRequest.ClientMsgId)
}

// required uint32 NewClientMsgId = 3;
bool RevokeMsgRequest::has_newclientmsgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RevokeMsgRequest::set_has_newclientmsgid() {
  _has_bits_[0] |= 0x00000010u;
}
void RevokeMsgRequest::clear_has_newclientmsgid() {
  _has_bits_[0] &= ~0x00000010u;
}
void RevokeMsgRequest::clear_newclientmsgid() {
  newclientmsgid_ = 0u;
  clear_has_newclientmsgid();
}
::google::protobuf::uint32 RevokeMsgRequest::newclientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgRequest.NewClientMsgId)
  return newclientmsgid_;
}
void RevokeMsgRequest::set_newclientmsgid(::google::protobuf::uint32 value) {
  set_has_newclientmsgid();
  newclientmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RevokeMsgRequest.NewClientMsgId)
}

// required uint32 CreateTime = 4;
bool RevokeMsgRequest::has_createtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RevokeMsgRequest::set_has_createtime() {
  _has_bits_[0] |= 0x00000020u;
}
void RevokeMsgRequest::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000020u;
}
void RevokeMsgRequest::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
::google::protobuf::uint32 RevokeMsgRequest::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgRequest.CreateTime)
  return createtime_;
}
void RevokeMsgRequest::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RevokeMsgRequest.CreateTime)
}

// required uint32 SvrMsgId = 5;
bool RevokeMsgRequest::has_svrmsgid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RevokeMsgRequest::set_has_svrmsgid() {
  _has_bits_[0] |= 0x00000040u;
}
void RevokeMsgRequest::clear_has_svrmsgid() {
  _has_bits_[0] &= ~0x00000040u;
}
void RevokeMsgRequest::clear_svrmsgid() {
  svrmsgid_ = 0u;
  clear_has_svrmsgid();
}
::google::protobuf::uint32 RevokeMsgRequest::svrmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgRequest.SvrMsgId)
  return svrmsgid_;
}
void RevokeMsgRequest::set_svrmsgid(::google::protobuf::uint32 value) {
  set_has_svrmsgid();
  svrmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RevokeMsgRequest.SvrMsgId)
}

// optional string FromUserName = 6;
bool RevokeMsgRequest::has_fromusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RevokeMsgRequest::set_has_fromusername() {
  _has_bits_[0] |= 0x00000002u;
}
void RevokeMsgRequest::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000002u;
}
void RevokeMsgRequest::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
const ::std::string& RevokeMsgRequest::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgRequest.FromUserName)
  return fromusername_.GetNoArena();
}
void RevokeMsgRequest::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RevokeMsgRequest.FromUserName)
}
#if LANG_CXX11
void RevokeMsgRequest::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RevokeMsgRequest.FromUserName)
}
#endif
void RevokeMsgRequest::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RevokeMsgRequest.FromUserName)
}
void RevokeMsgRequest::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RevokeMsgRequest.FromUserName)
}
::std::string* RevokeMsgRequest::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.RevokeMsgRequest.FromUserName)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RevokeMsgRequest::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.RevokeMsgRequest.FromUserName)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RevokeMsgRequest::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RevokeMsgRequest.FromUserName)
}

// optional string ToUserName = 7;
bool RevokeMsgRequest::has_tousername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RevokeMsgRequest::set_has_tousername() {
  _has_bits_[0] |= 0x00000004u;
}
void RevokeMsgRequest::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000004u;
}
void RevokeMsgRequest::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
const ::std::string& RevokeMsgRequest::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgRequest.ToUserName)
  return tousername_.GetNoArena();
}
void RevokeMsgRequest::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RevokeMsgRequest.ToUserName)
}
#if LANG_CXX11
void RevokeMsgRequest::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RevokeMsgRequest.ToUserName)
}
#endif
void RevokeMsgRequest::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RevokeMsgRequest.ToUserName)
}
void RevokeMsgRequest::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RevokeMsgRequest.ToUserName)
}
::std::string* RevokeMsgRequest::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.RevokeMsgRequest.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RevokeMsgRequest::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.RevokeMsgRequest.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RevokeMsgRequest::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RevokeMsgRequest.ToUserName)
}

// required uint32 IndexOfRequest = 8;
bool RevokeMsgRequest::has_indexofrequest() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RevokeMsgRequest::set_has_indexofrequest() {
  _has_bits_[0] |= 0x00000080u;
}
void RevokeMsgRequest::clear_has_indexofrequest() {
  _has_bits_[0] &= ~0x00000080u;
}
void RevokeMsgRequest::clear_indexofrequest() {
  indexofrequest_ = 0u;
  clear_has_indexofrequest();
}
::google::protobuf::uint32 RevokeMsgRequest::indexofrequest() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgRequest.IndexOfRequest)
  return indexofrequest_;
}
void RevokeMsgRequest::set_indexofrequest(::google::protobuf::uint32 value) {
  set_has_indexofrequest();
  indexofrequest_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RevokeMsgRequest.IndexOfRequest)
}

// optional uint64 SvrNewMsgId = 9;
bool RevokeMsgRequest::has_svrnewmsgid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RevokeMsgRequest::set_has_svrnewmsgid() {
  _has_bits_[0] |= 0x00000100u;
}
void RevokeMsgRequest::clear_has_svrnewmsgid() {
  _has_bits_[0] &= ~0x00000100u;
}
void RevokeMsgRequest::clear_svrnewmsgid() {
  svrnewmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_svrnewmsgid();
}
::google::protobuf::uint64 RevokeMsgRequest::svrnewmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgRequest.SvrNewMsgId)
  return svrnewmsgid_;
}
void RevokeMsgRequest::set_svrnewmsgid(::google::protobuf::uint64 value) {
  set_has_svrnewmsgid();
  svrnewmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RevokeMsgRequest.SvrNewMsgId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RevokeMsgResponse::kBaseResponseFieldNumber;
const int RevokeMsgResponse::kIntroductionFieldNumber;
const int RevokeMsgResponse::kSysWordingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RevokeMsgResponse::RevokeMsgResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.RevokeMsgResponse)
}
RevokeMsgResponse::RevokeMsgResponse(const RevokeMsgResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  introduction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_introduction()) {
    introduction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.introduction_);
  }
  syswording_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_syswording()) {
    syswording_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.syswording_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.RevokeMsgResponse)
}

void RevokeMsgResponse::SharedCtor() {
  _cached_size_ = 0;
  introduction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  syswording_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

RevokeMsgResponse::~RevokeMsgResponse() {
  // @@protoc_insertion_point(destructor:micromsg.RevokeMsgResponse)
  SharedDtor();
}

void RevokeMsgResponse::SharedDtor() {
  introduction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  syswording_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void RevokeMsgResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RevokeMsgResponse::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RevokeMsgResponse& RevokeMsgResponse::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

RevokeMsgResponse* RevokeMsgResponse::New(::google::protobuf::Arena* arena) const {
  RevokeMsgResponse* n = new RevokeMsgResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RevokeMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.RevokeMsgResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_introduction()) {
      GOOGLE_DCHECK(!introduction_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*introduction_.UnsafeRawStringPointer())->clear();
    }
    if (has_syswording()) {
      GOOGLE_DCHECK(!syswording_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*syswording_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RevokeMsgResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.RevokeMsgResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Introduction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_introduction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->introduction().data(), this->introduction().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RevokeMsgResponse.Introduction");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SysWording = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_syswording()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->syswording().data(), this->syswording().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RevokeMsgResponse.SysWording");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.RevokeMsgResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.RevokeMsgResponse)
  return false;
#undef DO_
}

void RevokeMsgResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.RevokeMsgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string Introduction = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->introduction().data(), this->introduction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RevokeMsgResponse.Introduction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->introduction(), output);
  }

  // optional string SysWording = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->syswording().data(), this->syswording().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RevokeMsgResponse.SysWording");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->syswording(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.RevokeMsgResponse)
}

::google::protobuf::uint8* RevokeMsgResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.RevokeMsgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string Introduction = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->introduction().data(), this->introduction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RevokeMsgResponse.Introduction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->introduction(), target);
  }

  // optional string SysWording = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->syswording().data(), this->syswording().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RevokeMsgResponse.SysWording");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->syswording(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.RevokeMsgResponse)
  return target;
}

size_t RevokeMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.RevokeMsgResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string Introduction = 2;
    if (has_introduction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->introduction());
    }

    // optional string SysWording = 3;
    if (has_syswording()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->syswording());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RevokeMsgResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.RevokeMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RevokeMsgResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RevokeMsgResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.RevokeMsgResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.RevokeMsgResponse)
    MergeFrom(*source);
  }
}

void RevokeMsgResponse::MergeFrom(const RevokeMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.RevokeMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_introduction();
      introduction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.introduction_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_syswording();
      syswording_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.syswording_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void RevokeMsgResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.RevokeMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevokeMsgResponse::CopyFrom(const RevokeMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.RevokeMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevokeMsgResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void RevokeMsgResponse::Swap(RevokeMsgResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RevokeMsgResponse::InternalSwap(RevokeMsgResponse* other) {
  introduction_.Swap(&other->introduction_);
  syswording_.Swap(&other->syswording_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RevokeMsgResponse::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RevokeMsgResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool RevokeMsgResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RevokeMsgResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void RevokeMsgResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void RevokeMsgResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& RevokeMsgResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* RevokeMsgResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RevokeMsgResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* RevokeMsgResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.RevokeMsgResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void RevokeMsgResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RevokeMsgResponse.BaseResponse)
}

// optional string Introduction = 2;
bool RevokeMsgResponse::has_introduction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RevokeMsgResponse::set_has_introduction() {
  _has_bits_[0] |= 0x00000001u;
}
void RevokeMsgResponse::clear_has_introduction() {
  _has_bits_[0] &= ~0x00000001u;
}
void RevokeMsgResponse::clear_introduction() {
  introduction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_introduction();
}
const ::std::string& RevokeMsgResponse::introduction() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgResponse.Introduction)
  return introduction_.GetNoArena();
}
void RevokeMsgResponse::set_introduction(const ::std::string& value) {
  set_has_introduction();
  introduction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RevokeMsgResponse.Introduction)
}
#if LANG_CXX11
void RevokeMsgResponse::set_introduction(::std::string&& value) {
  set_has_introduction();
  introduction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RevokeMsgResponse.Introduction)
}
#endif
void RevokeMsgResponse::set_introduction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_introduction();
  introduction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RevokeMsgResponse.Introduction)
}
void RevokeMsgResponse::set_introduction(const char* value, size_t size) {
  set_has_introduction();
  introduction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RevokeMsgResponse.Introduction)
}
::std::string* RevokeMsgResponse::mutable_introduction() {
  set_has_introduction();
  // @@protoc_insertion_point(field_mutable:micromsg.RevokeMsgResponse.Introduction)
  return introduction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RevokeMsgResponse::release_introduction() {
  // @@protoc_insertion_point(field_release:micromsg.RevokeMsgResponse.Introduction)
  clear_has_introduction();
  return introduction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RevokeMsgResponse::set_allocated_introduction(::std::string* introduction) {
  if (introduction != NULL) {
    set_has_introduction();
  } else {
    clear_has_introduction();
  }
  introduction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), introduction);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RevokeMsgResponse.Introduction)
}

// optional string SysWording = 3;
bool RevokeMsgResponse::has_syswording() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RevokeMsgResponse::set_has_syswording() {
  _has_bits_[0] |= 0x00000002u;
}
void RevokeMsgResponse::clear_has_syswording() {
  _has_bits_[0] &= ~0x00000002u;
}
void RevokeMsgResponse::clear_syswording() {
  syswording_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_syswording();
}
const ::std::string& RevokeMsgResponse::syswording() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgResponse.SysWording)
  return syswording_.GetNoArena();
}
void RevokeMsgResponse::set_syswording(const ::std::string& value) {
  set_has_syswording();
  syswording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RevokeMsgResponse.SysWording)
}
#if LANG_CXX11
void RevokeMsgResponse::set_syswording(::std::string&& value) {
  set_has_syswording();
  syswording_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RevokeMsgResponse.SysWording)
}
#endif
void RevokeMsgResponse::set_syswording(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_syswording();
  syswording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RevokeMsgResponse.SysWording)
}
void RevokeMsgResponse::set_syswording(const char* value, size_t size) {
  set_has_syswording();
  syswording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RevokeMsgResponse.SysWording)
}
::std::string* RevokeMsgResponse::mutable_syswording() {
  set_has_syswording();
  // @@protoc_insertion_point(field_mutable:micromsg.RevokeMsgResponse.SysWording)
  return syswording_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RevokeMsgResponse::release_syswording() {
  // @@protoc_insertion_point(field_release:micromsg.RevokeMsgResponse.SysWording)
  clear_has_syswording();
  return syswording_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RevokeMsgResponse::set_allocated_syswording(::std::string* syswording) {
  if (syswording != NULL) {
    set_has_syswording();
  } else {
    clear_has_syswording();
  }
  syswording_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), syswording);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RevokeMsgResponse.SysWording)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendYoRequest::kToUserNameFieldNumber;
const int SendYoRequest::kTypeFieldNumber;
const int SendYoRequest::kCountFieldNumber;
const int SendYoRequest::kCreateTimeFieldNumber;
const int SendYoRequest::kClientMsgIdFieldNumber;
const int SendYoRequest::kMsgSourceFieldNumber;
const int SendYoRequest::kYoTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendYoRequest::SendYoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SendYoRequest)
}
SendYoRequest::SendYoRequest(const SendYoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tousername()) {
    tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
  }
  msgsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msgsource()) {
    msgsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgsource_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&yotype_) -
    reinterpret_cast<char*>(&type_) + sizeof(yotype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SendYoRequest)
}

void SendYoRequest::SharedCtor() {
  _cached_size_ = 0;
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&yotype_) -
    reinterpret_cast<char*>(&type_) + sizeof(yotype_));
}

SendYoRequest::~SendYoRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SendYoRequest)
  SharedDtor();
}

void SendYoRequest::SharedDtor() {
  tousername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgsource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SendYoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendYoRequest::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SendYoRequest& SendYoRequest::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendYoRequest* SendYoRequest::New(::google::protobuf::Arena* arena) const {
  SendYoRequest* n = new SendYoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendYoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SendYoRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_tousername()) {
      GOOGLE_DCHECK(!tousername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tousername_.UnsafeRawStringPointer())->clear();
    }
    if (has_msgsource()) {
      GOOGLE_DCHECK(!msgsource_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msgsource_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&yotype_) -
      reinterpret_cast<char*>(&type_) + sizeof(yotype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SendYoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SendYoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ToUserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tousername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tousername().data(), this->tousername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SendYoRequest.ToUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CreateTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_createtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ClientMsgId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_clientmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MsgSource = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgsource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgsource().data(), this->msgsource().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SendYoRequest.MsgSource");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 YoType = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_yotype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yotype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SendYoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SendYoRequest)
  return false;
#undef DO_
}

void SendYoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SendYoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ToUserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SendYoRequest.ToUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tousername(), output);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 Count = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // required uint32 CreateTime = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->createtime(), output);
  }

  // required uint32 ClientMsgId = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->clientmsgid(), output);
  }

  // optional string MsgSource = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgsource().data(), this->msgsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SendYoRequest.MsgSource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->msgsource(), output);
  }

  // optional uint32 YoType = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->yotype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SendYoRequest)
}

::google::protobuf::uint8* SendYoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SendYoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ToUserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SendYoRequest.ToUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tousername(), target);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 Count = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // required uint32 CreateTime = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->createtime(), target);
  }

  // required uint32 ClientMsgId = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->clientmsgid(), target);
  }

  // optional string MsgSource = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgsource().data(), this->msgsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SendYoRequest.MsgSource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->msgsource(), target);
  }

  // optional uint32 YoType = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->yotype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SendYoRequest)
  return target;
}

size_t SendYoRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SendYoRequest)
  size_t total_size = 0;

  if (has_type()) {
    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_count()) {
    // required uint32 Count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  if (has_createtime()) {
    // required uint32 CreateTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());
  }

  if (has_clientmsgid()) {
    // required uint32 ClientMsgId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientmsgid());
  }

  return total_size;
}
size_t SendYoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SendYoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 Count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

    // required uint32 CreateTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());

    // required uint32 ClientMsgId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientmsgid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ToUserName = 1;
    if (has_tousername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tousername());
    }

    // optional string MsgSource = 6;
    if (has_msgsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgsource());
    }

  }
  // optional uint32 YoType = 7;
  if (has_yotype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->yotype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendYoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SendYoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendYoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendYoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SendYoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SendYoRequest)
    MergeFrom(*source);
  }
}

void SendYoRequest::MergeFrom(const SendYoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SendYoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tousername();
      tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_msgsource();
      msgsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgsource_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000010u) {
      createtime_ = from.createtime_;
    }
    if (cached_has_bits & 0x00000020u) {
      clientmsgid_ = from.clientmsgid_;
    }
    if (cached_has_bits & 0x00000040u) {
      yotype_ = from.yotype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SendYoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SendYoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendYoRequest::CopyFrom(const SendYoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SendYoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendYoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003c) != 0x0000003c) return false;
  return true;
}

void SendYoRequest::Swap(SendYoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendYoRequest::InternalSwap(SendYoRequest* other) {
  tousername_.Swap(&other->tousername_);
  msgsource_.Swap(&other->msgsource_);
  std::swap(type_, other->type_);
  std::swap(count_, other->count_);
  std::swap(createtime_, other->createtime_);
  std::swap(clientmsgid_, other->clientmsgid_);
  std::swap(yotype_, other->yotype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendYoRequest::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendYoRequest

// optional string ToUserName = 1;
bool SendYoRequest::has_tousername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SendYoRequest::set_has_tousername() {
  _has_bits_[0] |= 0x00000001u;
}
void SendYoRequest::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000001u;
}
void SendYoRequest::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
const ::std::string& SendYoRequest::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.SendYoRequest.ToUserName)
  return tousername_.GetNoArena();
}
void SendYoRequest::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SendYoRequest.ToUserName)
}
#if LANG_CXX11
void SendYoRequest::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SendYoRequest.ToUserName)
}
#endif
void SendYoRequest::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SendYoRequest.ToUserName)
}
void SendYoRequest::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SendYoRequest.ToUserName)
}
::std::string* SendYoRequest::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.SendYoRequest.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SendYoRequest::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.SendYoRequest.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendYoRequest::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SendYoRequest.ToUserName)
}

// required uint32 Type = 2;
bool SendYoRequest::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SendYoRequest::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void SendYoRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void SendYoRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 SendYoRequest::type() const {
  // @@protoc_insertion_point(field_get:micromsg.SendYoRequest.Type)
  return type_;
}
void SendYoRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SendYoRequest.Type)
}

// required uint32 Count = 3;
bool SendYoRequest::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SendYoRequest::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
void SendYoRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void SendYoRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 SendYoRequest::count() const {
  // @@protoc_insertion_point(field_get:micromsg.SendYoRequest.Count)
  return count_;
}
void SendYoRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SendYoRequest.Count)
}

// required uint32 CreateTime = 4;
bool SendYoRequest::has_createtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SendYoRequest::set_has_createtime() {
  _has_bits_[0] |= 0x00000010u;
}
void SendYoRequest::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000010u;
}
void SendYoRequest::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
::google::protobuf::uint32 SendYoRequest::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.SendYoRequest.CreateTime)
  return createtime_;
}
void SendYoRequest::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SendYoRequest.CreateTime)
}

// required uint32 ClientMsgId = 5;
bool SendYoRequest::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SendYoRequest::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000020u;
}
void SendYoRequest::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000020u;
}
void SendYoRequest::clear_clientmsgid() {
  clientmsgid_ = 0u;
  clear_has_clientmsgid();
}
::google::protobuf::uint32 SendYoRequest::clientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.SendYoRequest.ClientMsgId)
  return clientmsgid_;
}
void SendYoRequest::set_clientmsgid(::google::protobuf::uint32 value) {
  set_has_clientmsgid();
  clientmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SendYoRequest.ClientMsgId)
}

// optional string MsgSource = 6;
bool SendYoRequest::has_msgsource() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SendYoRequest::set_has_msgsource() {
  _has_bits_[0] |= 0x00000002u;
}
void SendYoRequest::clear_has_msgsource() {
  _has_bits_[0] &= ~0x00000002u;
}
void SendYoRequest::clear_msgsource() {
  msgsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgsource();
}
const ::std::string& SendYoRequest::msgsource() const {
  // @@protoc_insertion_point(field_get:micromsg.SendYoRequest.MsgSource)
  return msgsource_.GetNoArena();
}
void SendYoRequest::set_msgsource(const ::std::string& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SendYoRequest.MsgSource)
}
#if LANG_CXX11
void SendYoRequest::set_msgsource(::std::string&& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SendYoRequest.MsgSource)
}
#endif
void SendYoRequest::set_msgsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SendYoRequest.MsgSource)
}
void SendYoRequest::set_msgsource(const char* value, size_t size) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SendYoRequest.MsgSource)
}
::std::string* SendYoRequest::mutable_msgsource() {
  set_has_msgsource();
  // @@protoc_insertion_point(field_mutable:micromsg.SendYoRequest.MsgSource)
  return msgsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SendYoRequest::release_msgsource() {
  // @@protoc_insertion_point(field_release:micromsg.SendYoRequest.MsgSource)
  clear_has_msgsource();
  return msgsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendYoRequest::set_allocated_msgsource(::std::string* msgsource) {
  if (msgsource != NULL) {
    set_has_msgsource();
  } else {
    clear_has_msgsource();
  }
  msgsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgsource);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SendYoRequest.MsgSource)
}

// optional uint32 YoType = 7;
bool SendYoRequest::has_yotype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SendYoRequest::set_has_yotype() {
  _has_bits_[0] |= 0x00000040u;
}
void SendYoRequest::clear_has_yotype() {
  _has_bits_[0] &= ~0x00000040u;
}
void SendYoRequest::clear_yotype() {
  yotype_ = 0u;
  clear_has_yotype();
}
::google::protobuf::uint32 SendYoRequest::yotype() const {
  // @@protoc_insertion_point(field_get:micromsg.SendYoRequest.YoType)
  return yotype_;
}
void SendYoRequest::set_yotype(::google::protobuf::uint32 value) {
  set_has_yotype();
  yotype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SendYoRequest.YoType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendYoResponse::kRetFieldNumber;
const int SendYoResponse::kServerTimeFieldNumber;
const int SendYoResponse::kMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendYoResponse::SendYoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SendYoResponse)
}
SendYoResponse::SendYoResponse(const SendYoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ret_, &from.ret_,
    reinterpret_cast<char*>(&msgid_) -
    reinterpret_cast<char*>(&ret_) + sizeof(msgid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SendYoResponse)
}

void SendYoResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ret_, 0, reinterpret_cast<char*>(&msgid_) -
    reinterpret_cast<char*>(&ret_) + sizeof(msgid_));
}

SendYoResponse::~SendYoResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SendYoResponse)
  SharedDtor();
}

void SendYoResponse::SharedDtor() {
}

void SendYoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendYoResponse::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SendYoResponse& SendYoResponse::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendYoResponse* SendYoResponse::New(::google::protobuf::Arena* arena) const {
  SendYoResponse* n = new SendYoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendYoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SendYoResponse)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&ret_, 0, reinterpret_cast<char*>(&msgid_) -
      reinterpret_cast<char*>(&ret_) + sizeof(msgid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SendYoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SendYoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ServerTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_servertime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 MsgId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SendYoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SendYoResponse)
  return false;
#undef DO_
}

void SendYoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SendYoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required uint32 ServerTime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->servertime(), output);
  }

  // required uint64 MsgId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->msgid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SendYoResponse)
}

::google::protobuf::uint8* SendYoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SendYoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required uint32 ServerTime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->servertime(), target);
  }

  // required uint64 MsgId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->msgid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SendYoResponse)
  return target;
}

size_t SendYoResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SendYoResponse)
  size_t total_size = 0;

  if (has_ret()) {
    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_servertime()) {
    // required uint32 ServerTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->servertime());
  }

  if (has_msgid()) {
    // required uint64 MsgId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->msgid());
  }

  return total_size;
}
size_t SendYoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SendYoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required uint32 ServerTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->servertime());

    // required uint64 MsgId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->msgid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendYoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SendYoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendYoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendYoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SendYoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SendYoResponse)
    MergeFrom(*source);
  }
}

void SendYoResponse::MergeFrom(const SendYoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SendYoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000002u) {
      servertime_ = from.servertime_;
    }
    if (cached_has_bits & 0x00000004u) {
      msgid_ = from.msgid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SendYoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SendYoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendYoResponse::CopyFrom(const SendYoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SendYoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendYoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SendYoResponse::Swap(SendYoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendYoResponse::InternalSwap(SendYoResponse* other) {
  std::swap(ret_, other->ret_);
  std::swap(servertime_, other->servertime_);
  std::swap(msgid_, other->msgid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendYoResponse::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendYoResponse

// required int32 Ret = 1;
bool SendYoResponse::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SendYoResponse::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void SendYoResponse::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void SendYoResponse::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::google::protobuf::int32 SendYoResponse::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.SendYoResponse.Ret)
  return ret_;
}
void SendYoResponse::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SendYoResponse.Ret)
}

// required uint32 ServerTime = 2;
bool SendYoResponse::has_servertime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SendYoResponse::set_has_servertime() {
  _has_bits_[0] |= 0x00000002u;
}
void SendYoResponse::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000002u;
}
void SendYoResponse::clear_servertime() {
  servertime_ = 0u;
  clear_has_servertime();
}
::google::protobuf::uint32 SendYoResponse::servertime() const {
  // @@protoc_insertion_point(field_get:micromsg.SendYoResponse.ServerTime)
  return servertime_;
}
void SendYoResponse::set_servertime(::google::protobuf::uint32 value) {
  set_has_servertime();
  servertime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SendYoResponse.ServerTime)
}

// required uint64 MsgId = 3;
bool SendYoResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SendYoResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
void SendYoResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
void SendYoResponse::clear_msgid() {
  msgid_ = GOOGLE_ULONGLONG(0);
  clear_has_msgid();
}
::google::protobuf::uint64 SendYoResponse::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.SendYoResponse.MsgId)
  return msgid_;
}
void SendYoResponse::set_msgid(::google::protobuf::uint64 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SendYoResponse.MsgId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckBigFileUploadRequest::kBaseRequestFieldNumber;
const int CheckBigFileUploadRequest::kFromUserNameFieldNumber;
const int CheckBigFileUploadRequest::kToUserNameFieldNumber;
const int CheckBigFileUploadRequest::kFileSizeFieldNumber;
const int CheckBigFileUploadRequest::kAESKeyFieldNumber;
const int CheckBigFileUploadRequest::kFileMd5FieldNumber;
const int CheckBigFileUploadRequest::kFileTypeFieldNumber;
const int CheckBigFileUploadRequest::kFileExtFieldNumber;
const int CheckBigFileUploadRequest::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckBigFileUploadRequest::CheckBigFileUploadRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CheckBigFileUploadRequest)
}
CheckBigFileUploadRequest::CheckBigFileUploadRequest(const CheckBigFileUploadRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromusername()) {
    fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
  }
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tousername()) {
    tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
  }
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_aeskey()) {
    aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
  }
  filemd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filemd5()) {
    filemd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filemd5_);
  }
  fileext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fileext()) {
    fileext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fileext_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&filesize_, &from.filesize_,
    reinterpret_cast<char*>(&filetype_) -
    reinterpret_cast<char*>(&filesize_) + sizeof(filetype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.CheckBigFileUploadRequest)
}

void CheckBigFileUploadRequest::SharedCtor() {
  _cached_size_ = 0;
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filemd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fileext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&filetype_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(filetype_));
}

CheckBigFileUploadRequest::~CheckBigFileUploadRequest() {
  // @@protoc_insertion_point(destructor:micromsg.CheckBigFileUploadRequest)
  SharedDtor();
}

void CheckBigFileUploadRequest::SharedDtor() {
  fromusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filemd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fileext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void CheckBigFileUploadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckBigFileUploadRequest::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckBigFileUploadRequest& CheckBigFileUploadRequest::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckBigFileUploadRequest* CheckBigFileUploadRequest::New(::google::protobuf::Arena* arena) const {
  CheckBigFileUploadRequest* n = new CheckBigFileUploadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckBigFileUploadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CheckBigFileUploadRequest)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_fromusername()) {
      GOOGLE_DCHECK(!fromusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_tousername()) {
      GOOGLE_DCHECK(!tousername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tousername_.UnsafeRawStringPointer())->clear();
    }
    if (has_aeskey()) {
      GOOGLE_DCHECK(!aeskey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*aeskey_.UnsafeRawStringPointer())->clear();
    }
    if (has_filemd5()) {
      GOOGLE_DCHECK(!filemd5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filemd5_.UnsafeRawStringPointer())->clear();
    }
    if (has_fileext()) {
      GOOGLE_DCHECK(!fileext_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fileext_.UnsafeRawStringPointer())->clear();
    }
    if (has_filename()) {
      GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filename_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  filesize_ = GOOGLE_ULONGLONG(0);
  filetype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckBigFileUploadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CheckBigFileUploadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FromUserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromusername().data(), this->fromusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckBigFileUploadRequest.FromUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ToUserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tousername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tousername().data(), this->tousername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckBigFileUploadRequest.ToUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 FileSize = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_filesize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AESKey = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aeskey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aeskey().data(), this->aeskey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckBigFileUploadRequest.AESKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FileMd5 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filemd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filemd5().data(), this->filemd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckBigFileUploadRequest.FileMd5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 FileType = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_filetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FileExt = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fileext().data(), this->fileext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckBigFileUploadRequest.FileExt");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FileName = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckBigFileUploadRequest.FileName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CheckBigFileUploadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CheckBigFileUploadRequest)
  return false;
#undef DO_
}

void CheckBigFileUploadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CheckBigFileUploadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string FromUserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileUploadRequest.FromUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fromusername(), output);
  }

  // optional string ToUserName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileUploadRequest.ToUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tousername(), output);
  }

  // required uint64 FileSize = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->filesize(), output);
  }

  // optional string AESKey = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileUploadRequest.AESKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->aeskey(), output);
  }

  // optional string FileMd5 = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filemd5().data(), this->filemd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileUploadRequest.FileMd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->filemd5(), output);
  }

  // required uint32 FileType = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->filetype(), output);
  }

  // optional string FileExt = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileext().data(), this->fileext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileUploadRequest.FileExt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->fileext(), output);
  }

  // optional string FileName = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileUploadRequest.FileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CheckBigFileUploadRequest)
}

::google::protobuf::uint8* CheckBigFileUploadRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CheckBigFileUploadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string FromUserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileUploadRequest.FromUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fromusername(), target);
  }

  // optional string ToUserName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileUploadRequest.ToUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tousername(), target);
  }

  // required uint64 FileSize = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->filesize(), target);
  }

  // optional string AESKey = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileUploadRequest.AESKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->aeskey(), target);
  }

  // optional string FileMd5 = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filemd5().data(), this->filemd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileUploadRequest.FileMd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filemd5(), target);
  }

  // required uint32 FileType = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->filetype(), target);
  }

  // optional string FileExt = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileext().data(), this->fileext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileUploadRequest.FileExt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->fileext(), target);
  }

  // optional string FileName = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileUploadRequest.FileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CheckBigFileUploadRequest)
  return target;
}

size_t CheckBigFileUploadRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CheckBigFileUploadRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_filesize()) {
    // required uint64 FileSize = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->filesize());
  }

  if (has_filetype()) {
    // required uint32 FileType = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->filetype());
  }

  return total_size;
}
size_t CheckBigFileUploadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CheckBigFileUploadRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001c0) ^ 0x000001c0) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint64 FileSize = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->filesize());

    // required uint32 FileType = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->filetype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string FromUserName = 2;
    if (has_fromusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromusername());
    }

    // optional string ToUserName = 3;
    if (has_tousername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tousername());
    }

    // optional string AESKey = 5;
    if (has_aeskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aeskey());
    }

    // optional string FileMd5 = 6;
    if (has_filemd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filemd5());
    }

    // optional string FileExt = 8;
    if (has_fileext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fileext());
    }

    // optional string FileName = 9;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckBigFileUploadRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CheckBigFileUploadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckBigFileUploadRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckBigFileUploadRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CheckBigFileUploadRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CheckBigFileUploadRequest)
    MergeFrom(*source);
  }
}

void CheckBigFileUploadRequest::MergeFrom(const CheckBigFileUploadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CheckBigFileUploadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fromusername();
      fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tousername();
      tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_aeskey();
      aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_filemd5();
      filemd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filemd5_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_fileext();
      fileext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fileext_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000080u) {
      filesize_ = from.filesize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_filetype(from.filetype());
  }
}

void CheckBigFileUploadRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CheckBigFileUploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckBigFileUploadRequest::CopyFrom(const CheckBigFileUploadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CheckBigFileUploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckBigFileUploadRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001c0) != 0x000001c0) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void CheckBigFileUploadRequest::Swap(CheckBigFileUploadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckBigFileUploadRequest::InternalSwap(CheckBigFileUploadRequest* other) {
  fromusername_.Swap(&other->fromusername_);
  tousername_.Swap(&other->tousername_);
  aeskey_.Swap(&other->aeskey_);
  filemd5_.Swap(&other->filemd5_);
  fileext_.Swap(&other->fileext_);
  filename_.Swap(&other->filename_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(filesize_, other->filesize_);
  std::swap(filetype_, other->filetype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckBigFileUploadRequest::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckBigFileUploadRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool CheckBigFileUploadRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CheckBigFileUploadRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000040u;
}
void CheckBigFileUploadRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000040u;
}
void CheckBigFileUploadRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& CheckBigFileUploadRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* CheckBigFileUploadRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* CheckBigFileUploadRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void CheckBigFileUploadRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadRequest.BaseRequest)
}

// optional string FromUserName = 2;
bool CheckBigFileUploadRequest::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckBigFileUploadRequest::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckBigFileUploadRequest::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckBigFileUploadRequest::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
const ::std::string& CheckBigFileUploadRequest::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadRequest.FromUserName)
  return fromusername_.GetNoArena();
}
void CheckBigFileUploadRequest::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadRequest.FromUserName)
}
#if LANG_CXX11
void CheckBigFileUploadRequest::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileUploadRequest.FromUserName)
}
#endif
void CheckBigFileUploadRequest::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileUploadRequest.FromUserName)
}
void CheckBigFileUploadRequest::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileUploadRequest.FromUserName)
}
::std::string* CheckBigFileUploadRequest::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadRequest.FromUserName)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckBigFileUploadRequest::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadRequest.FromUserName)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckBigFileUploadRequest::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadRequest.FromUserName)
}

// optional string ToUserName = 3;
bool CheckBigFileUploadRequest::has_tousername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckBigFileUploadRequest::set_has_tousername() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckBigFileUploadRequest::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckBigFileUploadRequest::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
const ::std::string& CheckBigFileUploadRequest::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadRequest.ToUserName)
  return tousername_.GetNoArena();
}
void CheckBigFileUploadRequest::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadRequest.ToUserName)
}
#if LANG_CXX11
void CheckBigFileUploadRequest::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileUploadRequest.ToUserName)
}
#endif
void CheckBigFileUploadRequest::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileUploadRequest.ToUserName)
}
void CheckBigFileUploadRequest::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileUploadRequest.ToUserName)
}
::std::string* CheckBigFileUploadRequest::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadRequest.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckBigFileUploadRequest::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadRequest.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckBigFileUploadRequest::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadRequest.ToUserName)
}

// required uint64 FileSize = 4;
bool CheckBigFileUploadRequest::has_filesize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CheckBigFileUploadRequest::set_has_filesize() {
  _has_bits_[0] |= 0x00000080u;
}
void CheckBigFileUploadRequest::clear_has_filesize() {
  _has_bits_[0] &= ~0x00000080u;
}
void CheckBigFileUploadRequest::clear_filesize() {
  filesize_ = GOOGLE_ULONGLONG(0);
  clear_has_filesize();
}
::google::protobuf::uint64 CheckBigFileUploadRequest::filesize() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadRequest.FileSize)
  return filesize_;
}
void CheckBigFileUploadRequest::set_filesize(::google::protobuf::uint64 value) {
  set_has_filesize();
  filesize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadRequest.FileSize)
}

// optional string AESKey = 5;
bool CheckBigFileUploadRequest::has_aeskey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CheckBigFileUploadRequest::set_has_aeskey() {
  _has_bits_[0] |= 0x00000004u;
}
void CheckBigFileUploadRequest::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000004u;
}
void CheckBigFileUploadRequest::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
const ::std::string& CheckBigFileUploadRequest::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadRequest.AESKey)
  return aeskey_.GetNoArena();
}
void CheckBigFileUploadRequest::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadRequest.AESKey)
}
#if LANG_CXX11
void CheckBigFileUploadRequest::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileUploadRequest.AESKey)
}
#endif
void CheckBigFileUploadRequest::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileUploadRequest.AESKey)
}
void CheckBigFileUploadRequest::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileUploadRequest.AESKey)
}
::std::string* CheckBigFileUploadRequest::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadRequest.AESKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckBigFileUploadRequest::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadRequest.AESKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckBigFileUploadRequest::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadRequest.AESKey)
}

// optional string FileMd5 = 6;
bool CheckBigFileUploadRequest::has_filemd5() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CheckBigFileUploadRequest::set_has_filemd5() {
  _has_bits_[0] |= 0x00000008u;
}
void CheckBigFileUploadRequest::clear_has_filemd5() {
  _has_bits_[0] &= ~0x00000008u;
}
void CheckBigFileUploadRequest::clear_filemd5() {
  filemd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filemd5();
}
const ::std::string& CheckBigFileUploadRequest::filemd5() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadRequest.FileMd5)
  return filemd5_.GetNoArena();
}
void CheckBigFileUploadRequest::set_filemd5(const ::std::string& value) {
  set_has_filemd5();
  filemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadRequest.FileMd5)
}
#if LANG_CXX11
void CheckBigFileUploadRequest::set_filemd5(::std::string&& value) {
  set_has_filemd5();
  filemd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileUploadRequest.FileMd5)
}
#endif
void CheckBigFileUploadRequest::set_filemd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filemd5();
  filemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileUploadRequest.FileMd5)
}
void CheckBigFileUploadRequest::set_filemd5(const char* value, size_t size) {
  set_has_filemd5();
  filemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileUploadRequest.FileMd5)
}
::std::string* CheckBigFileUploadRequest::mutable_filemd5() {
  set_has_filemd5();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadRequest.FileMd5)
  return filemd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckBigFileUploadRequest::release_filemd5() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadRequest.FileMd5)
  clear_has_filemd5();
  return filemd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckBigFileUploadRequest::set_allocated_filemd5(::std::string* filemd5) {
  if (filemd5 != NULL) {
    set_has_filemd5();
  } else {
    clear_has_filemd5();
  }
  filemd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filemd5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadRequest.FileMd5)
}

// required uint32 FileType = 7;
bool CheckBigFileUploadRequest::has_filetype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CheckBigFileUploadRequest::set_has_filetype() {
  _has_bits_[0] |= 0x00000100u;
}
void CheckBigFileUploadRequest::clear_has_filetype() {
  _has_bits_[0] &= ~0x00000100u;
}
void CheckBigFileUploadRequest::clear_filetype() {
  filetype_ = 0u;
  clear_has_filetype();
}
::google::protobuf::uint32 CheckBigFileUploadRequest::filetype() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadRequest.FileType)
  return filetype_;
}
void CheckBigFileUploadRequest::set_filetype(::google::protobuf::uint32 value) {
  set_has_filetype();
  filetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadRequest.FileType)
}

// optional string FileExt = 8;
bool CheckBigFileUploadRequest::has_fileext() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CheckBigFileUploadRequest::set_has_fileext() {
  _has_bits_[0] |= 0x00000010u;
}
void CheckBigFileUploadRequest::clear_has_fileext() {
  _has_bits_[0] &= ~0x00000010u;
}
void CheckBigFileUploadRequest::clear_fileext() {
  fileext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fileext();
}
const ::std::string& CheckBigFileUploadRequest::fileext() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadRequest.FileExt)
  return fileext_.GetNoArena();
}
void CheckBigFileUploadRequest::set_fileext(const ::std::string& value) {
  set_has_fileext();
  fileext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadRequest.FileExt)
}
#if LANG_CXX11
void CheckBigFileUploadRequest::set_fileext(::std::string&& value) {
  set_has_fileext();
  fileext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileUploadRequest.FileExt)
}
#endif
void CheckBigFileUploadRequest::set_fileext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fileext();
  fileext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileUploadRequest.FileExt)
}
void CheckBigFileUploadRequest::set_fileext(const char* value, size_t size) {
  set_has_fileext();
  fileext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileUploadRequest.FileExt)
}
::std::string* CheckBigFileUploadRequest::mutable_fileext() {
  set_has_fileext();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadRequest.FileExt)
  return fileext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckBigFileUploadRequest::release_fileext() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadRequest.FileExt)
  clear_has_fileext();
  return fileext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckBigFileUploadRequest::set_allocated_fileext(::std::string* fileext) {
  if (fileext != NULL) {
    set_has_fileext();
  } else {
    clear_has_fileext();
  }
  fileext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fileext);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadRequest.FileExt)
}

// optional string FileName = 9;
bool CheckBigFileUploadRequest::has_filename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CheckBigFileUploadRequest::set_has_filename() {
  _has_bits_[0] |= 0x00000020u;
}
void CheckBigFileUploadRequest::clear_has_filename() {
  _has_bits_[0] &= ~0x00000020u;
}
void CheckBigFileUploadRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& CheckBigFileUploadRequest::filename() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadRequest.FileName)
  return filename_.GetNoArena();
}
void CheckBigFileUploadRequest::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadRequest.FileName)
}
#if LANG_CXX11
void CheckBigFileUploadRequest::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileUploadRequest.FileName)
}
#endif
void CheckBigFileUploadRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileUploadRequest.FileName)
}
void CheckBigFileUploadRequest::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileUploadRequest.FileName)
}
::std::string* CheckBigFileUploadRequest::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadRequest.FileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckBigFileUploadRequest::release_filename() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadRequest.FileName)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckBigFileUploadRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadRequest.FileName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckBigFileUploadResponse::kBaseResponseFieldNumber;
const int CheckBigFileUploadResponse::kSignatureFieldNumber;
const int CheckBigFileUploadResponse::kFakeuinFieldNumber;
const int CheckBigFileUploadResponse::kFakeAESKeyFieldNumber;
const int CheckBigFileUploadResponse::kFakeSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckBigFileUploadResponse::CheckBigFileUploadResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CheckBigFileUploadResponse)
}
CheckBigFileUploadResponse::CheckBigFileUploadResponse(const CheckBigFileUploadResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  fakeaeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fakeaeskey()) {
    fakeaeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fakeaeskey_);
  }
  fakesignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fakesignature()) {
    fakesignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fakesignature_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  fakeuin_ = from.fakeuin_;
  // @@protoc_insertion_point(copy_constructor:micromsg.CheckBigFileUploadResponse)
}

void CheckBigFileUploadResponse::SharedCtor() {
  _cached_size_ = 0;
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fakeaeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fakesignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&fakeuin_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(fakeuin_));
}

CheckBigFileUploadResponse::~CheckBigFileUploadResponse() {
  // @@protoc_insertion_point(destructor:micromsg.CheckBigFileUploadResponse)
  SharedDtor();
}

void CheckBigFileUploadResponse::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fakeaeskey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fakesignature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void CheckBigFileUploadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckBigFileUploadResponse::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckBigFileUploadResponse& CheckBigFileUploadResponse::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckBigFileUploadResponse* CheckBigFileUploadResponse::New(::google::protobuf::Arena* arena) const {
  CheckBigFileUploadResponse* n = new CheckBigFileUploadResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckBigFileUploadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CheckBigFileUploadResponse)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_signature()) {
      GOOGLE_DCHECK(!signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*signature_.UnsafeRawStringPointer())->clear();
    }
    if (has_fakeaeskey()) {
      GOOGLE_DCHECK(!fakeaeskey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fakeaeskey_.UnsafeRawStringPointer())->clear();
    }
    if (has_fakesignature()) {
      GOOGLE_DCHECK(!fakesignature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fakesignature_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  fakeuin_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckBigFileUploadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CheckBigFileUploadResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckBigFileUploadResponse.Signature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Fakeuin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_fakeuin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fakeuin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FakeAESKey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fakeaeskey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fakeaeskey().data(), this->fakeaeskey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckBigFileUploadResponse.FakeAESKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FakeSignature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fakesignature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fakesignature().data(), this->fakesignature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckBigFileUploadResponse.FakeSignature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CheckBigFileUploadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CheckBigFileUploadResponse)
  return false;
#undef DO_
}

void CheckBigFileUploadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CheckBigFileUploadResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string Signature = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileUploadResponse.Signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->signature(), output);
  }

  // optional uint32 Fakeuin = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fakeuin(), output);
  }

  // optional string FakeAESKey = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fakeaeskey().data(), this->fakeaeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileUploadResponse.FakeAESKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fakeaeskey(), output);
  }

  // optional string FakeSignature = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fakesignature().data(), this->fakesignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileUploadResponse.FakeSignature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->fakesignature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CheckBigFileUploadResponse)
}

::google::protobuf::uint8* CheckBigFileUploadResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CheckBigFileUploadResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string Signature = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileUploadResponse.Signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signature(), target);
  }

  // optional uint32 Fakeuin = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fakeuin(), target);
  }

  // optional string FakeAESKey = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fakeaeskey().data(), this->fakeaeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileUploadResponse.FakeAESKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fakeaeskey(), target);
  }

  // optional string FakeSignature = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fakesignature().data(), this->fakesignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileUploadResponse.FakeSignature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fakesignature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CheckBigFileUploadResponse)
  return target;
}

size_t CheckBigFileUploadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CheckBigFileUploadResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string Signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional string FakeAESKey = 4;
    if (has_fakeaeskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fakeaeskey());
    }

    // optional string FakeSignature = 5;
    if (has_fakesignature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fakesignature());
    }

  }
  // optional uint32 Fakeuin = 3;
  if (has_fakeuin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fakeuin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckBigFileUploadResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CheckBigFileUploadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckBigFileUploadResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckBigFileUploadResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CheckBigFileUploadResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CheckBigFileUploadResponse)
    MergeFrom(*source);
  }
}

void CheckBigFileUploadResponse::MergeFrom(const CheckBigFileUploadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CheckBigFileUploadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fakeaeskey();
      fakeaeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fakeaeskey_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_fakesignature();
      fakesignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fakesignature_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000010u) {
      fakeuin_ = from.fakeuin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CheckBigFileUploadResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CheckBigFileUploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckBigFileUploadResponse::CopyFrom(const CheckBigFileUploadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CheckBigFileUploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckBigFileUploadResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void CheckBigFileUploadResponse::Swap(CheckBigFileUploadResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckBigFileUploadResponse::InternalSwap(CheckBigFileUploadResponse* other) {
  signature_.Swap(&other->signature_);
  fakeaeskey_.Swap(&other->fakeaeskey_);
  fakesignature_.Swap(&other->fakesignature_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(fakeuin_, other->fakeuin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckBigFileUploadResponse::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckBigFileUploadResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool CheckBigFileUploadResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CheckBigFileUploadResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000008u;
}
void CheckBigFileUploadResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000008u;
}
void CheckBigFileUploadResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& CheckBigFileUploadResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* CheckBigFileUploadResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* CheckBigFileUploadResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void CheckBigFileUploadResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadResponse.BaseResponse)
}

// optional string Signature = 2;
bool CheckBigFileUploadResponse::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckBigFileUploadResponse::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckBigFileUploadResponse::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckBigFileUploadResponse::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
const ::std::string& CheckBigFileUploadResponse::signature() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadResponse.Signature)
  return signature_.GetNoArena();
}
void CheckBigFileUploadResponse::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadResponse.Signature)
}
#if LANG_CXX11
void CheckBigFileUploadResponse::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileUploadResponse.Signature)
}
#endif
void CheckBigFileUploadResponse::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileUploadResponse.Signature)
}
void CheckBigFileUploadResponse::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileUploadResponse.Signature)
}
::std::string* CheckBigFileUploadResponse::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadResponse.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckBigFileUploadResponse::release_signature() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadResponse.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckBigFileUploadResponse::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadResponse.Signature)
}

// optional uint32 Fakeuin = 3;
bool CheckBigFileUploadResponse::has_fakeuin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CheckBigFileUploadResponse::set_has_fakeuin() {
  _has_bits_[0] |= 0x00000010u;
}
void CheckBigFileUploadResponse::clear_has_fakeuin() {
  _has_bits_[0] &= ~0x00000010u;
}
void CheckBigFileUploadResponse::clear_fakeuin() {
  fakeuin_ = 0u;
  clear_has_fakeuin();
}
::google::protobuf::uint32 CheckBigFileUploadResponse::fakeuin() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadResponse.Fakeuin)
  return fakeuin_;
}
void CheckBigFileUploadResponse::set_fakeuin(::google::protobuf::uint32 value) {
  set_has_fakeuin();
  fakeuin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadResponse.Fakeuin)
}

// optional string FakeAESKey = 4;
bool CheckBigFileUploadResponse::has_fakeaeskey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckBigFileUploadResponse::set_has_fakeaeskey() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckBigFileUploadResponse::clear_has_fakeaeskey() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckBigFileUploadResponse::clear_fakeaeskey() {
  fakeaeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fakeaeskey();
}
const ::std::string& CheckBigFileUploadResponse::fakeaeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadResponse.FakeAESKey)
  return fakeaeskey_.GetNoArena();
}
void CheckBigFileUploadResponse::set_fakeaeskey(const ::std::string& value) {
  set_has_fakeaeskey();
  fakeaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadResponse.FakeAESKey)
}
#if LANG_CXX11
void CheckBigFileUploadResponse::set_fakeaeskey(::std::string&& value) {
  set_has_fakeaeskey();
  fakeaeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileUploadResponse.FakeAESKey)
}
#endif
void CheckBigFileUploadResponse::set_fakeaeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fakeaeskey();
  fakeaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileUploadResponse.FakeAESKey)
}
void CheckBigFileUploadResponse::set_fakeaeskey(const char* value, size_t size) {
  set_has_fakeaeskey();
  fakeaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileUploadResponse.FakeAESKey)
}
::std::string* CheckBigFileUploadResponse::mutable_fakeaeskey() {
  set_has_fakeaeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadResponse.FakeAESKey)
  return fakeaeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckBigFileUploadResponse::release_fakeaeskey() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadResponse.FakeAESKey)
  clear_has_fakeaeskey();
  return fakeaeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckBigFileUploadResponse::set_allocated_fakeaeskey(::std::string* fakeaeskey) {
  if (fakeaeskey != NULL) {
    set_has_fakeaeskey();
  } else {
    clear_has_fakeaeskey();
  }
  fakeaeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fakeaeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadResponse.FakeAESKey)
}

// optional string FakeSignature = 5;
bool CheckBigFileUploadResponse::has_fakesignature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CheckBigFileUploadResponse::set_has_fakesignature() {
  _has_bits_[0] |= 0x00000004u;
}
void CheckBigFileUploadResponse::clear_has_fakesignature() {
  _has_bits_[0] &= ~0x00000004u;
}
void CheckBigFileUploadResponse::clear_fakesignature() {
  fakesignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fakesignature();
}
const ::std::string& CheckBigFileUploadResponse::fakesignature() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadResponse.FakeSignature)
  return fakesignature_.GetNoArena();
}
void CheckBigFileUploadResponse::set_fakesignature(const ::std::string& value) {
  set_has_fakesignature();
  fakesignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadResponse.FakeSignature)
}
#if LANG_CXX11
void CheckBigFileUploadResponse::set_fakesignature(::std::string&& value) {
  set_has_fakesignature();
  fakesignature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileUploadResponse.FakeSignature)
}
#endif
void CheckBigFileUploadResponse::set_fakesignature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fakesignature();
  fakesignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileUploadResponse.FakeSignature)
}
void CheckBigFileUploadResponse::set_fakesignature(const char* value, size_t size) {
  set_has_fakesignature();
  fakesignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileUploadResponse.FakeSignature)
}
::std::string* CheckBigFileUploadResponse::mutable_fakesignature() {
  set_has_fakesignature();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadResponse.FakeSignature)
  return fakesignature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckBigFileUploadResponse::release_fakesignature() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadResponse.FakeSignature)
  clear_has_fakesignature();
  return fakesignature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckBigFileUploadResponse::set_allocated_fakesignature(::std::string* fakesignature) {
  if (fakesignature != NULL) {
    set_has_fakesignature();
  } else {
    clear_has_fakesignature();
  }
  fakesignature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fakesignature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadResponse.FakeSignature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckBigFileDownloadRequest::kBaseRequestFieldNumber;
const int CheckBigFileDownloadRequest::kFromUserNameFieldNumber;
const int CheckBigFileDownloadRequest::kToUserNameFieldNumber;
const int CheckBigFileDownloadRequest::kFileSizeFieldNumber;
const int CheckBigFileDownloadRequest::kAESKeyFieldNumber;
const int CheckBigFileDownloadRequest::kFileMd5FieldNumber;
const int CheckBigFileDownloadRequest::kFileTypeFieldNumber;
const int CheckBigFileDownloadRequest::kFileExtFieldNumber;
const int CheckBigFileDownloadRequest::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckBigFileDownloadRequest::CheckBigFileDownloadRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CheckBigFileDownloadRequest)
}
CheckBigFileDownloadRequest::CheckBigFileDownloadRequest(const CheckBigFileDownloadRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromusername()) {
    fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
  }
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tousername()) {
    tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
  }
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_aeskey()) {
    aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
  }
  filemd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filemd5()) {
    filemd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filemd5_);
  }
  fileext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fileext()) {
    fileext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fileext_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&filesize_, &from.filesize_,
    reinterpret_cast<char*>(&filetype_) -
    reinterpret_cast<char*>(&filesize_) + sizeof(filetype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.CheckBigFileDownloadRequest)
}

void CheckBigFileDownloadRequest::SharedCtor() {
  _cached_size_ = 0;
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filemd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fileext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&filetype_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(filetype_));
}

CheckBigFileDownloadRequest::~CheckBigFileDownloadRequest() {
  // @@protoc_insertion_point(destructor:micromsg.CheckBigFileDownloadRequest)
  SharedDtor();
}

void CheckBigFileDownloadRequest::SharedDtor() {
  fromusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filemd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fileext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void CheckBigFileDownloadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckBigFileDownloadRequest::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckBigFileDownloadRequest& CheckBigFileDownloadRequest::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckBigFileDownloadRequest* CheckBigFileDownloadRequest::New(::google::protobuf::Arena* arena) const {
  CheckBigFileDownloadRequest* n = new CheckBigFileDownloadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckBigFileDownloadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CheckBigFileDownloadRequest)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_fromusername()) {
      GOOGLE_DCHECK(!fromusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_tousername()) {
      GOOGLE_DCHECK(!tousername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tousername_.UnsafeRawStringPointer())->clear();
    }
    if (has_aeskey()) {
      GOOGLE_DCHECK(!aeskey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*aeskey_.UnsafeRawStringPointer())->clear();
    }
    if (has_filemd5()) {
      GOOGLE_DCHECK(!filemd5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filemd5_.UnsafeRawStringPointer())->clear();
    }
    if (has_fileext()) {
      GOOGLE_DCHECK(!fileext_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fileext_.UnsafeRawStringPointer())->clear();
    }
    if (has_filename()) {
      GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filename_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  filesize_ = GOOGLE_ULONGLONG(0);
  filetype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckBigFileDownloadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CheckBigFileDownloadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FromUserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromusername().data(), this->fromusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckBigFileDownloadRequest.FromUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ToUserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tousername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tousername().data(), this->tousername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckBigFileDownloadRequest.ToUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 FileSize = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_filesize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AESKey = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aeskey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aeskey().data(), this->aeskey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckBigFileDownloadRequest.AESKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FileMd5 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filemd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filemd5().data(), this->filemd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckBigFileDownloadRequest.FileMd5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 FileType = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_filetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FileExt = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fileext().data(), this->fileext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckBigFileDownloadRequest.FileExt");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FileName = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckBigFileDownloadRequest.FileName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CheckBigFileDownloadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CheckBigFileDownloadRequest)
  return false;
#undef DO_
}

void CheckBigFileDownloadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CheckBigFileDownloadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string FromUserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileDownloadRequest.FromUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fromusername(), output);
  }

  // optional string ToUserName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileDownloadRequest.ToUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tousername(), output);
  }

  // required uint64 FileSize = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->filesize(), output);
  }

  // optional string AESKey = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileDownloadRequest.AESKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->aeskey(), output);
  }

  // optional string FileMd5 = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filemd5().data(), this->filemd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileDownloadRequest.FileMd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->filemd5(), output);
  }

  // required uint32 FileType = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->filetype(), output);
  }

  // optional string FileExt = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileext().data(), this->fileext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileDownloadRequest.FileExt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->fileext(), output);
  }

  // optional string FileName = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileDownloadRequest.FileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CheckBigFileDownloadRequest)
}

::google::protobuf::uint8* CheckBigFileDownloadRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CheckBigFileDownloadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string FromUserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileDownloadRequest.FromUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fromusername(), target);
  }

  // optional string ToUserName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileDownloadRequest.ToUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tousername(), target);
  }

  // required uint64 FileSize = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->filesize(), target);
  }

  // optional string AESKey = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileDownloadRequest.AESKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->aeskey(), target);
  }

  // optional string FileMd5 = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filemd5().data(), this->filemd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileDownloadRequest.FileMd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filemd5(), target);
  }

  // required uint32 FileType = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->filetype(), target);
  }

  // optional string FileExt = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileext().data(), this->fileext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileDownloadRequest.FileExt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->fileext(), target);
  }

  // optional string FileName = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileDownloadRequest.FileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CheckBigFileDownloadRequest)
  return target;
}

size_t CheckBigFileDownloadRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CheckBigFileDownloadRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_filesize()) {
    // required uint64 FileSize = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->filesize());
  }

  if (has_filetype()) {
    // required uint32 FileType = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->filetype());
  }

  return total_size;
}
size_t CheckBigFileDownloadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CheckBigFileDownloadRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001c0) ^ 0x000001c0) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint64 FileSize = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->filesize());

    // required uint32 FileType = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->filetype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string FromUserName = 2;
    if (has_fromusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromusername());
    }

    // optional string ToUserName = 3;
    if (has_tousername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tousername());
    }

    // optional string AESKey = 5;
    if (has_aeskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aeskey());
    }

    // optional string FileMd5 = 6;
    if (has_filemd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filemd5());
    }

    // optional string FileExt = 8;
    if (has_fileext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fileext());
    }

    // optional string FileName = 9;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckBigFileDownloadRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CheckBigFileDownloadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckBigFileDownloadRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckBigFileDownloadRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CheckBigFileDownloadRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CheckBigFileDownloadRequest)
    MergeFrom(*source);
  }
}

void CheckBigFileDownloadRequest::MergeFrom(const CheckBigFileDownloadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CheckBigFileDownloadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fromusername();
      fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tousername();
      tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_aeskey();
      aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_filemd5();
      filemd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filemd5_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_fileext();
      fileext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fileext_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000080u) {
      filesize_ = from.filesize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_filetype(from.filetype());
  }
}

void CheckBigFileDownloadRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CheckBigFileDownloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckBigFileDownloadRequest::CopyFrom(const CheckBigFileDownloadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CheckBigFileDownloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckBigFileDownloadRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001c0) != 0x000001c0) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void CheckBigFileDownloadRequest::Swap(CheckBigFileDownloadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckBigFileDownloadRequest::InternalSwap(CheckBigFileDownloadRequest* other) {
  fromusername_.Swap(&other->fromusername_);
  tousername_.Swap(&other->tousername_);
  aeskey_.Swap(&other->aeskey_);
  filemd5_.Swap(&other->filemd5_);
  fileext_.Swap(&other->fileext_);
  filename_.Swap(&other->filename_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(filesize_, other->filesize_);
  std::swap(filetype_, other->filetype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckBigFileDownloadRequest::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckBigFileDownloadRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool CheckBigFileDownloadRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CheckBigFileDownloadRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000040u;
}
void CheckBigFileDownloadRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000040u;
}
void CheckBigFileDownloadRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& CheckBigFileDownloadRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* CheckBigFileDownloadRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* CheckBigFileDownloadRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void CheckBigFileDownloadRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadRequest.BaseRequest)
}

// optional string FromUserName = 2;
bool CheckBigFileDownloadRequest::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckBigFileDownloadRequest::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckBigFileDownloadRequest::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckBigFileDownloadRequest::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
const ::std::string& CheckBigFileDownloadRequest::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadRequest.FromUserName)
  return fromusername_.GetNoArena();
}
void CheckBigFileDownloadRequest::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadRequest.FromUserName)
}
#if LANG_CXX11
void CheckBigFileDownloadRequest::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileDownloadRequest.FromUserName)
}
#endif
void CheckBigFileDownloadRequest::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileDownloadRequest.FromUserName)
}
void CheckBigFileDownloadRequest::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileDownloadRequest.FromUserName)
}
::std::string* CheckBigFileDownloadRequest::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadRequest.FromUserName)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckBigFileDownloadRequest::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadRequest.FromUserName)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckBigFileDownloadRequest::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadRequest.FromUserName)
}

// optional string ToUserName = 3;
bool CheckBigFileDownloadRequest::has_tousername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckBigFileDownloadRequest::set_has_tousername() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckBigFileDownloadRequest::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckBigFileDownloadRequest::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
const ::std::string& CheckBigFileDownloadRequest::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadRequest.ToUserName)
  return tousername_.GetNoArena();
}
void CheckBigFileDownloadRequest::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadRequest.ToUserName)
}
#if LANG_CXX11
void CheckBigFileDownloadRequest::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileDownloadRequest.ToUserName)
}
#endif
void CheckBigFileDownloadRequest::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileDownloadRequest.ToUserName)
}
void CheckBigFileDownloadRequest::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileDownloadRequest.ToUserName)
}
::std::string* CheckBigFileDownloadRequest::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadRequest.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckBigFileDownloadRequest::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadRequest.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckBigFileDownloadRequest::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadRequest.ToUserName)
}

// required uint64 FileSize = 4;
bool CheckBigFileDownloadRequest::has_filesize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CheckBigFileDownloadRequest::set_has_filesize() {
  _has_bits_[0] |= 0x00000080u;
}
void CheckBigFileDownloadRequest::clear_has_filesize() {
  _has_bits_[0] &= ~0x00000080u;
}
void CheckBigFileDownloadRequest::clear_filesize() {
  filesize_ = GOOGLE_ULONGLONG(0);
  clear_has_filesize();
}
::google::protobuf::uint64 CheckBigFileDownloadRequest::filesize() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadRequest.FileSize)
  return filesize_;
}
void CheckBigFileDownloadRequest::set_filesize(::google::protobuf::uint64 value) {
  set_has_filesize();
  filesize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadRequest.FileSize)
}

// optional string AESKey = 5;
bool CheckBigFileDownloadRequest::has_aeskey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CheckBigFileDownloadRequest::set_has_aeskey() {
  _has_bits_[0] |= 0x00000004u;
}
void CheckBigFileDownloadRequest::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000004u;
}
void CheckBigFileDownloadRequest::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
const ::std::string& CheckBigFileDownloadRequest::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadRequest.AESKey)
  return aeskey_.GetNoArena();
}
void CheckBigFileDownloadRequest::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadRequest.AESKey)
}
#if LANG_CXX11
void CheckBigFileDownloadRequest::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileDownloadRequest.AESKey)
}
#endif
void CheckBigFileDownloadRequest::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileDownloadRequest.AESKey)
}
void CheckBigFileDownloadRequest::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileDownloadRequest.AESKey)
}
::std::string* CheckBigFileDownloadRequest::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadRequest.AESKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckBigFileDownloadRequest::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadRequest.AESKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckBigFileDownloadRequest::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadRequest.AESKey)
}

// optional string FileMd5 = 6;
bool CheckBigFileDownloadRequest::has_filemd5() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CheckBigFileDownloadRequest::set_has_filemd5() {
  _has_bits_[0] |= 0x00000008u;
}
void CheckBigFileDownloadRequest::clear_has_filemd5() {
  _has_bits_[0] &= ~0x00000008u;
}
void CheckBigFileDownloadRequest::clear_filemd5() {
  filemd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filemd5();
}
const ::std::string& CheckBigFileDownloadRequest::filemd5() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadRequest.FileMd5)
  return filemd5_.GetNoArena();
}
void CheckBigFileDownloadRequest::set_filemd5(const ::std::string& value) {
  set_has_filemd5();
  filemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadRequest.FileMd5)
}
#if LANG_CXX11
void CheckBigFileDownloadRequest::set_filemd5(::std::string&& value) {
  set_has_filemd5();
  filemd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileDownloadRequest.FileMd5)
}
#endif
void CheckBigFileDownloadRequest::set_filemd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filemd5();
  filemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileDownloadRequest.FileMd5)
}
void CheckBigFileDownloadRequest::set_filemd5(const char* value, size_t size) {
  set_has_filemd5();
  filemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileDownloadRequest.FileMd5)
}
::std::string* CheckBigFileDownloadRequest::mutable_filemd5() {
  set_has_filemd5();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadRequest.FileMd5)
  return filemd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckBigFileDownloadRequest::release_filemd5() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadRequest.FileMd5)
  clear_has_filemd5();
  return filemd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckBigFileDownloadRequest::set_allocated_filemd5(::std::string* filemd5) {
  if (filemd5 != NULL) {
    set_has_filemd5();
  } else {
    clear_has_filemd5();
  }
  filemd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filemd5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadRequest.FileMd5)
}

// required uint32 FileType = 7;
bool CheckBigFileDownloadRequest::has_filetype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CheckBigFileDownloadRequest::set_has_filetype() {
  _has_bits_[0] |= 0x00000100u;
}
void CheckBigFileDownloadRequest::clear_has_filetype() {
  _has_bits_[0] &= ~0x00000100u;
}
void CheckBigFileDownloadRequest::clear_filetype() {
  filetype_ = 0u;
  clear_has_filetype();
}
::google::protobuf::uint32 CheckBigFileDownloadRequest::filetype() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadRequest.FileType)
  return filetype_;
}
void CheckBigFileDownloadRequest::set_filetype(::google::protobuf::uint32 value) {
  set_has_filetype();
  filetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadRequest.FileType)
}

// optional string FileExt = 8;
bool CheckBigFileDownloadRequest::has_fileext() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CheckBigFileDownloadRequest::set_has_fileext() {
  _has_bits_[0] |= 0x00000010u;
}
void CheckBigFileDownloadRequest::clear_has_fileext() {
  _has_bits_[0] &= ~0x00000010u;
}
void CheckBigFileDownloadRequest::clear_fileext() {
  fileext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fileext();
}
const ::std::string& CheckBigFileDownloadRequest::fileext() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadRequest.FileExt)
  return fileext_.GetNoArena();
}
void CheckBigFileDownloadRequest::set_fileext(const ::std::string& value) {
  set_has_fileext();
  fileext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadRequest.FileExt)
}
#if LANG_CXX11
void CheckBigFileDownloadRequest::set_fileext(::std::string&& value) {
  set_has_fileext();
  fileext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileDownloadRequest.FileExt)
}
#endif
void CheckBigFileDownloadRequest::set_fileext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fileext();
  fileext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileDownloadRequest.FileExt)
}
void CheckBigFileDownloadRequest::set_fileext(const char* value, size_t size) {
  set_has_fileext();
  fileext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileDownloadRequest.FileExt)
}
::std::string* CheckBigFileDownloadRequest::mutable_fileext() {
  set_has_fileext();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadRequest.FileExt)
  return fileext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckBigFileDownloadRequest::release_fileext() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadRequest.FileExt)
  clear_has_fileext();
  return fileext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckBigFileDownloadRequest::set_allocated_fileext(::std::string* fileext) {
  if (fileext != NULL) {
    set_has_fileext();
  } else {
    clear_has_fileext();
  }
  fileext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fileext);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadRequest.FileExt)
}

// optional string FileName = 9;
bool CheckBigFileDownloadRequest::has_filename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CheckBigFileDownloadRequest::set_has_filename() {
  _has_bits_[0] |= 0x00000020u;
}
void CheckBigFileDownloadRequest::clear_has_filename() {
  _has_bits_[0] &= ~0x00000020u;
}
void CheckBigFileDownloadRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& CheckBigFileDownloadRequest::filename() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadRequest.FileName)
  return filename_.GetNoArena();
}
void CheckBigFileDownloadRequest::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadRequest.FileName)
}
#if LANG_CXX11
void CheckBigFileDownloadRequest::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileDownloadRequest.FileName)
}
#endif
void CheckBigFileDownloadRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileDownloadRequest.FileName)
}
void CheckBigFileDownloadRequest::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileDownloadRequest.FileName)
}
::std::string* CheckBigFileDownloadRequest::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadRequest.FileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckBigFileDownloadRequest::release_filename() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadRequest.FileName)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckBigFileDownloadRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadRequest.FileName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckBigFileDownloadResponse::kBaseResponseFieldNumber;
const int CheckBigFileDownloadResponse::kSignatureFieldNumber;
const int CheckBigFileDownloadResponse::kFakeuinFieldNumber;
const int CheckBigFileDownloadResponse::kFakeAESKeyFieldNumber;
const int CheckBigFileDownloadResponse::kFakeSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckBigFileDownloadResponse::CheckBigFileDownloadResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmextsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CheckBigFileDownloadResponse)
}
CheckBigFileDownloadResponse::CheckBigFileDownloadResponse(const CheckBigFileDownloadResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  fakeaeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fakeaeskey()) {
    fakeaeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fakeaeskey_);
  }
  fakesignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fakesignature()) {
    fakesignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fakesignature_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  fakeuin_ = from.fakeuin_;
  // @@protoc_insertion_point(copy_constructor:micromsg.CheckBigFileDownloadResponse)
}

void CheckBigFileDownloadResponse::SharedCtor() {
  _cached_size_ = 0;
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fakeaeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fakesignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&fakeuin_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(fakeuin_));
}

CheckBigFileDownloadResponse::~CheckBigFileDownloadResponse() {
  // @@protoc_insertion_point(destructor:micromsg.CheckBigFileDownloadResponse)
  SharedDtor();
}

void CheckBigFileDownloadResponse::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fakeaeskey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fakesignature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void CheckBigFileDownloadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckBigFileDownloadResponse::descriptor() {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckBigFileDownloadResponse& CheckBigFileDownloadResponse::default_instance() {
  protobuf_mmextsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckBigFileDownloadResponse* CheckBigFileDownloadResponse::New(::google::protobuf::Arena* arena) const {
  CheckBigFileDownloadResponse* n = new CheckBigFileDownloadResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckBigFileDownloadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CheckBigFileDownloadResponse)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_signature()) {
      GOOGLE_DCHECK(!signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*signature_.UnsafeRawStringPointer())->clear();
    }
    if (has_fakeaeskey()) {
      GOOGLE_DCHECK(!fakeaeskey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fakeaeskey_.UnsafeRawStringPointer())->clear();
    }
    if (has_fakesignature()) {
      GOOGLE_DCHECK(!fakesignature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fakesignature_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  fakeuin_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckBigFileDownloadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CheckBigFileDownloadResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckBigFileDownloadResponse.Signature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Fakeuin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_fakeuin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fakeuin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FakeAESKey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fakeaeskey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fakeaeskey().data(), this->fakeaeskey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckBigFileDownloadResponse.FakeAESKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FakeSignature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fakesignature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fakesignature().data(), this->fakesignature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckBigFileDownloadResponse.FakeSignature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CheckBigFileDownloadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CheckBigFileDownloadResponse)
  return false;
#undef DO_
}

void CheckBigFileDownloadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CheckBigFileDownloadResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string Signature = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileDownloadResponse.Signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->signature(), output);
  }

  // optional uint32 Fakeuin = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fakeuin(), output);
  }

  // optional string FakeAESKey = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fakeaeskey().data(), this->fakeaeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileDownloadResponse.FakeAESKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fakeaeskey(), output);
  }

  // optional string FakeSignature = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fakesignature().data(), this->fakesignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileDownloadResponse.FakeSignature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->fakesignature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CheckBigFileDownloadResponse)
}

::google::protobuf::uint8* CheckBigFileDownloadResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CheckBigFileDownloadResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string Signature = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileDownloadResponse.Signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signature(), target);
  }

  // optional uint32 Fakeuin = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fakeuin(), target);
  }

  // optional string FakeAESKey = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fakeaeskey().data(), this->fakeaeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileDownloadResponse.FakeAESKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fakeaeskey(), target);
  }

  // optional string FakeSignature = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fakesignature().data(), this->fakesignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckBigFileDownloadResponse.FakeSignature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fakesignature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CheckBigFileDownloadResponse)
  return target;
}

size_t CheckBigFileDownloadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CheckBigFileDownloadResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string Signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional string FakeAESKey = 4;
    if (has_fakeaeskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fakeaeskey());
    }

    // optional string FakeSignature = 5;
    if (has_fakesignature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fakesignature());
    }

  }
  // optional uint32 Fakeuin = 3;
  if (has_fakeuin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fakeuin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckBigFileDownloadResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CheckBigFileDownloadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckBigFileDownloadResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckBigFileDownloadResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CheckBigFileDownloadResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CheckBigFileDownloadResponse)
    MergeFrom(*source);
  }
}

void CheckBigFileDownloadResponse::MergeFrom(const CheckBigFileDownloadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CheckBigFileDownloadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fakeaeskey();
      fakeaeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fakeaeskey_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_fakesignature();
      fakesignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fakesignature_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000010u) {
      fakeuin_ = from.fakeuin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CheckBigFileDownloadResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CheckBigFileDownloadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckBigFileDownloadResponse::CopyFrom(const CheckBigFileDownloadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CheckBigFileDownloadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckBigFileDownloadResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void CheckBigFileDownloadResponse::Swap(CheckBigFileDownloadResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckBigFileDownloadResponse::InternalSwap(CheckBigFileDownloadResponse* other) {
  signature_.Swap(&other->signature_);
  fakeaeskey_.Swap(&other->fakeaeskey_);
  fakesignature_.Swap(&other->fakesignature_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(fakeuin_, other->fakeuin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckBigFileDownloadResponse::GetMetadata() const {
  protobuf_mmextsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmextsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckBigFileDownloadResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool CheckBigFileDownloadResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CheckBigFileDownloadResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000008u;
}
void CheckBigFileDownloadResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000008u;
}
void CheckBigFileDownloadResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& CheckBigFileDownloadResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* CheckBigFileDownloadResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* CheckBigFileDownloadResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void CheckBigFileDownloadResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadResponse.BaseResponse)
}

// optional string Signature = 2;
bool CheckBigFileDownloadResponse::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckBigFileDownloadResponse::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckBigFileDownloadResponse::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckBigFileDownloadResponse::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
const ::std::string& CheckBigFileDownloadResponse::signature() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadResponse.Signature)
  return signature_.GetNoArena();
}
void CheckBigFileDownloadResponse::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadResponse.Signature)
}
#if LANG_CXX11
void CheckBigFileDownloadResponse::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileDownloadResponse.Signature)
}
#endif
void CheckBigFileDownloadResponse::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileDownloadResponse.Signature)
}
void CheckBigFileDownloadResponse::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileDownloadResponse.Signature)
}
::std::string* CheckBigFileDownloadResponse::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadResponse.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckBigFileDownloadResponse::release_signature() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadResponse.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckBigFileDownloadResponse::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadResponse.Signature)
}

// optional uint32 Fakeuin = 3;
bool CheckBigFileDownloadResponse::has_fakeuin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CheckBigFileDownloadResponse::set_has_fakeuin() {
  _has_bits_[0] |= 0x00000010u;
}
void CheckBigFileDownloadResponse::clear_has_fakeuin() {
  _has_bits_[0] &= ~0x00000010u;
}
void CheckBigFileDownloadResponse::clear_fakeuin() {
  fakeuin_ = 0u;
  clear_has_fakeuin();
}
::google::protobuf::uint32 CheckBigFileDownloadResponse::fakeuin() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadResponse.Fakeuin)
  return fakeuin_;
}
void CheckBigFileDownloadResponse::set_fakeuin(::google::protobuf::uint32 value) {
  set_has_fakeuin();
  fakeuin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadResponse.Fakeuin)
}

// optional string FakeAESKey = 4;
bool CheckBigFileDownloadResponse::has_fakeaeskey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckBigFileDownloadResponse::set_has_fakeaeskey() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckBigFileDownloadResponse::clear_has_fakeaeskey() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckBigFileDownloadResponse::clear_fakeaeskey() {
  fakeaeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fakeaeskey();
}
const ::std::string& CheckBigFileDownloadResponse::fakeaeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadResponse.FakeAESKey)
  return fakeaeskey_.GetNoArena();
}
void CheckBigFileDownloadResponse::set_fakeaeskey(const ::std::string& value) {
  set_has_fakeaeskey();
  fakeaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadResponse.FakeAESKey)
}
#if LANG_CXX11
void CheckBigFileDownloadResponse::set_fakeaeskey(::std::string&& value) {
  set_has_fakeaeskey();
  fakeaeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileDownloadResponse.FakeAESKey)
}
#endif
void CheckBigFileDownloadResponse::set_fakeaeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fakeaeskey();
  fakeaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileDownloadResponse.FakeAESKey)
}
void CheckBigFileDownloadResponse::set_fakeaeskey(const char* value, size_t size) {
  set_has_fakeaeskey();
  fakeaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileDownloadResponse.FakeAESKey)
}
::std::string* CheckBigFileDownloadResponse::mutable_fakeaeskey() {
  set_has_fakeaeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadResponse.FakeAESKey)
  return fakeaeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckBigFileDownloadResponse::release_fakeaeskey() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadResponse.FakeAESKey)
  clear_has_fakeaeskey();
  return fakeaeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckBigFileDownloadResponse::set_allocated_fakeaeskey(::std::string* fakeaeskey) {
  if (fakeaeskey != NULL) {
    set_has_fakeaeskey();
  } else {
    clear_has_fakeaeskey();
  }
  fakeaeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fakeaeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadResponse.FakeAESKey)
}

// optional string FakeSignature = 5;
bool CheckBigFileDownloadResponse::has_fakesignature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CheckBigFileDownloadResponse::set_has_fakesignature() {
  _has_bits_[0] |= 0x00000004u;
}
void CheckBigFileDownloadResponse::clear_has_fakesignature() {
  _has_bits_[0] &= ~0x00000004u;
}
void CheckBigFileDownloadResponse::clear_fakesignature() {
  fakesignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fakesignature();
}
const ::std::string& CheckBigFileDownloadResponse::fakesignature() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadResponse.FakeSignature)
  return fakesignature_.GetNoArena();
}
void CheckBigFileDownloadResponse::set_fakesignature(const ::std::string& value) {
  set_has_fakesignature();
  fakesignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadResponse.FakeSignature)
}
#if LANG_CXX11
void CheckBigFileDownloadResponse::set_fakesignature(::std::string&& value) {
  set_has_fakesignature();
  fakesignature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileDownloadResponse.FakeSignature)
}
#endif
void CheckBigFileDownloadResponse::set_fakesignature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fakesignature();
  fakesignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileDownloadResponse.FakeSignature)
}
void CheckBigFileDownloadResponse::set_fakesignature(const char* value, size_t size) {
  set_has_fakesignature();
  fakesignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileDownloadResponse.FakeSignature)
}
::std::string* CheckBigFileDownloadResponse::mutable_fakesignature() {
  set_has_fakesignature();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadResponse.FakeSignature)
  return fakesignature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckBigFileDownloadResponse::release_fakesignature() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadResponse.FakeSignature)
  clear_has_fakesignature();
  return fakesignature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckBigFileDownloadResponse::set_allocated_fakesignature(::std::string* fakesignature) {
  if (fakesignature != NULL) {
    set_has_fakesignature();
  } else {
    clear_has_fakesignature();
  }
  fakesignature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fakesignature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadResponse.FakeSignature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg

// @@protoc_insertion_point(global_scope)
