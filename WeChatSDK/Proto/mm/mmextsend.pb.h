// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmextsend.proto

#ifndef PROTOBUF_mmextsend_2eproto__INCLUDED
#define PROTOBUF_mmextsend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mmbuiltintype.pb.h"
#include "mmbase.pb.h"
// @@protoc_insertion_point(includes)
namespace micromsg {
class AdditionalContactList;
class AdditionalContactListDefaultTypeInternal;
extern AdditionalContactListDefaultTypeInternal _AdditionalContactList_default_instance_;
class BaseRequest;
class BaseRequestDefaultTypeInternal;
extern BaseRequestDefaultTypeInternal _BaseRequest_default_instance_;
class BaseResponse;
class BaseResponseDefaultTypeInternal;
extern BaseResponseDefaultTypeInternal _BaseResponse_default_instance_;
class BindEmailRequest;
class BindEmailRequestDefaultTypeInternal;
extern BindEmailRequestDefaultTypeInternal _BindEmailRequest_default_instance_;
class BindEmailResponse;
class BindEmailResponseDefaultTypeInternal;
extern BindEmailResponseDefaultTypeInternal _BindEmailResponse_default_instance_;
class BuiltinIP;
class BuiltinIPDefaultTypeInternal;
extern BuiltinIPDefaultTypeInternal _BuiltinIP_default_instance_;
class BuiltinIPList;
class BuiltinIPListDefaultTypeInternal;
extern BuiltinIPListDefaultTypeInternal _BuiltinIPList_default_instance_;
class CDNDnsInfo;
class CDNDnsInfoDefaultTypeInternal;
extern CDNDnsInfoDefaultTypeInternal _CDNDnsInfo_default_instance_;
class CDNUploadMsgImgCommitRequest;
class CDNUploadMsgImgCommitRequestDefaultTypeInternal;
extern CDNUploadMsgImgCommitRequestDefaultTypeInternal _CDNUploadMsgImgCommitRequest_default_instance_;
class CDNUploadMsgImgCommitResponse;
class CDNUploadMsgImgCommitResponseDefaultTypeInternal;
extern CDNUploadMsgImgCommitResponseDefaultTypeInternal _CDNUploadMsgImgCommitResponse_default_instance_;
class CDNUploadMsgImgPrepareRequest;
class CDNUploadMsgImgPrepareRequestDefaultTypeInternal;
extern CDNUploadMsgImgPrepareRequestDefaultTypeInternal _CDNUploadMsgImgPrepareRequest_default_instance_;
class CDNUploadMsgImgPrepareResponse;
class CDNUploadMsgImgPrepareResponseDefaultTypeInternal;
extern CDNUploadMsgImgPrepareResponseDefaultTypeInternal _CDNUploadMsgImgPrepareResponse_default_instance_;
class ChatRoomMemberData;
class ChatRoomMemberDataDefaultTypeInternal;
extern ChatRoomMemberDataDefaultTypeInternal _ChatRoomMemberData_default_instance_;
class ChatRoomMemberInfo;
class ChatRoomMemberInfoDefaultTypeInternal;
extern ChatRoomMemberInfoDefaultTypeInternal _ChatRoomMemberInfo_default_instance_;
class CheckBigFileDownloadRequest;
class CheckBigFileDownloadRequestDefaultTypeInternal;
extern CheckBigFileDownloadRequestDefaultTypeInternal _CheckBigFileDownloadRequest_default_instance_;
class CheckBigFileDownloadResponse;
class CheckBigFileDownloadResponseDefaultTypeInternal;
extern CheckBigFileDownloadResponseDefaultTypeInternal _CheckBigFileDownloadResponse_default_instance_;
class CheckBigFileUploadRequest;
class CheckBigFileUploadRequestDefaultTypeInternal;
extern CheckBigFileUploadRequestDefaultTypeInternal _CheckBigFileUploadRequest_default_instance_;
class CheckBigFileUploadResponse;
class CheckBigFileUploadResponseDefaultTypeInternal;
extern CheckBigFileUploadResponseDefaultTypeInternal _CheckBigFileUploadResponse_default_instance_;
class CmdItem;
class CmdItemDefaultTypeInternal;
extern CmdItemDefaultTypeInternal _CmdItem_default_instance_;
class CmdList;
class CmdListDefaultTypeInternal;
extern CmdListDefaultTypeInternal _CmdList_default_instance_;
class CustomizedInfo;
class CustomizedInfoDefaultTypeInternal;
extern CustomizedInfoDefaultTypeInternal _CustomizedInfo_default_instance_;
class DelMemberReq;
class DelMemberReqDefaultTypeInternal;
extern DelMemberReqDefaultTypeInternal _DelMemberReq_default_instance_;
class DelMemberResp;
class DelMemberRespDefaultTypeInternal;
extern DelMemberRespDefaultTypeInternal _DelMemberResp_default_instance_;
class DisturbSetting;
class DisturbSettingDefaultTypeInternal;
extern DisturbSettingDefaultTypeInternal _DisturbSetting_default_instance_;
class DisturbTimeSpan;
class DisturbTimeSpanDefaultTypeInternal;
extern DisturbTimeSpanDefaultTypeInternal _DisturbTimeSpan_default_instance_;
class DownloadEmojiRequest;
class DownloadEmojiRequestDefaultTypeInternal;
extern DownloadEmojiRequestDefaultTypeInternal _DownloadEmojiRequest_default_instance_;
class DownloadEmojiResponse;
class DownloadEmojiResponseDefaultTypeInternal;
extern DownloadEmojiResponseDefaultTypeInternal _DownloadEmojiResponse_default_instance_;
class DownloadVideoRequest;
class DownloadVideoRequestDefaultTypeInternal;
extern DownloadVideoRequestDefaultTypeInternal _DownloadVideoRequest_default_instance_;
class DownloadVideoResponse;
class DownloadVideoResponseDefaultTypeInternal;
extern DownloadVideoResponseDefaultTypeInternal _DownloadVideoResponse_default_instance_;
class DownloadVoiceRequest;
class DownloadVoiceRequestDefaultTypeInternal;
extern DownloadVoiceRequestDefaultTypeInternal _DownloadVoiceRequest_default_instance_;
class DownloadVoiceResponse;
class DownloadVoiceResponseDefaultTypeInternal;
extern DownloadVoiceResponseDefaultTypeInternal _DownloadVoiceResponse_default_instance_;
class EmojiDownloadInfoReq;
class EmojiDownloadInfoReqDefaultTypeInternal;
extern EmojiDownloadInfoReqDefaultTypeInternal _EmojiDownloadInfoReq_default_instance_;
class EmojiDownloadInfoResp;
class EmojiDownloadInfoRespDefaultTypeInternal;
extern EmojiDownloadInfoRespDefaultTypeInternal _EmojiDownloadInfoResp_default_instance_;
class EmojiUploadInfoReq;
class EmojiUploadInfoReqDefaultTypeInternal;
extern EmojiUploadInfoReqDefaultTypeInternal _EmojiUploadInfoReq_default_instance_;
class EmojiUploadInfoResp;
class EmojiUploadInfoRespDefaultTypeInternal;
extern EmojiUploadInfoRespDefaultTypeInternal _EmojiUploadInfoResp_default_instance_;
class GetCDNDnsRequest;
class GetCDNDnsRequestDefaultTypeInternal;
extern GetCDNDnsRequestDefaultTypeInternal _GetCDNDnsRequest_default_instance_;
class GetCDNDnsResponse;
class GetCDNDnsResponseDefaultTypeInternal;
extern GetCDNDnsResponseDefaultTypeInternal _GetCDNDnsResponse_default_instance_;
class GetLocationRequest;
class GetLocationRequestDefaultTypeInternal;
extern GetLocationRequestDefaultTypeInternal _GetLocationRequest_default_instance_;
class GetLocationResponse;
class GetLocationResponseDefaultTypeInternal;
extern GetLocationResponseDefaultTypeInternal _GetLocationResponse_default_instance_;
class GetMsgImgRequest;
class GetMsgImgRequestDefaultTypeInternal;
extern GetMsgImgRequestDefaultTypeInternal _GetMsgImgRequest_default_instance_;
class GetMsgImgResponse;
class GetMsgImgResponseDefaultTypeInternal;
extern GetMsgImgResponseDefaultTypeInternal _GetMsgImgResponse_default_instance_;
class GmailInfo;
class GmailInfoDefaultTypeInternal;
extern GmailInfoDefaultTypeInternal _GmailInfo_default_instance_;
class GmailList;
class GmailListDefaultTypeInternal;
extern GmailListDefaultTypeInternal _GmailList_default_instance_;
class HardDevice;
class HardDeviceDefaultTypeInternal;
extern HardDeviceDefaultTypeInternal _HardDevice_default_instance_;
class Host;
class HostDefaultTypeInternal;
extern HostDefaultTypeInternal _Host_default_instance_;
class HostList;
class HostListDefaultTypeInternal;
extern HostListDefaultTypeInternal _HostList_default_instance_;
class LinkedinContactItem;
class LinkedinContactItemDefaultTypeInternal;
extern LinkedinContactItemDefaultTypeInternal _LinkedinContactItem_default_instance_;
class MemberReq;
class MemberReqDefaultTypeInternal;
extern MemberReqDefaultTypeInternal _MemberReq_default_instance_;
class MemberResp;
class MemberRespDefaultTypeInternal;
extern MemberRespDefaultTypeInternal _MemberResp_default_instance_;
class ModContact;
class ModContactDefaultTypeInternal;
extern ModContactDefaultTypeInternal _ModContact_default_instance_;
class ModUserInfo;
class ModUserInfoDefaultTypeInternal;
extern ModUserInfoDefaultTypeInternal _ModUserInfo_default_instance_;
class NetworkControl;
class NetworkControlDefaultTypeInternal;
extern NetworkControlDefaultTypeInternal _NetworkControl_default_instance_;
class PatternLockInfo;
class PatternLockInfoDefaultTypeInternal;
extern PatternLockInfoDefaultTypeInternal _PatternLockInfo_default_instance_;
class PluginKey;
class PluginKeyDefaultTypeInternal;
extern PluginKeyDefaultTypeInternal _PluginKey_default_instance_;
class PluginKeyList;
class PluginKeyListDefaultTypeInternal;
extern PluginKeyListDefaultTypeInternal _PluginKeyList_default_instance_;
class PositionInfo;
class PositionInfoDefaultTypeInternal;
extern PositionInfoDefaultTypeInternal _PositionInfo_default_instance_;
class RevokeMsgRequest;
class RevokeMsgRequestDefaultTypeInternal;
extern RevokeMsgRequestDefaultTypeInternal _RevokeMsgRequest_default_instance_;
class RevokeMsgResponse;
class RevokeMsgResponseDefaultTypeInternal;
extern RevokeMsgResponseDefaultTypeInternal _RevokeMsgResponse_default_instance_;
class RoomInfo;
class RoomInfoDefaultTypeInternal;
extern RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
class SKBuiltinBuffer_t;
class SKBuiltinBuffer_tDefaultTypeInternal;
extern SKBuiltinBuffer_tDefaultTypeInternal _SKBuiltinBuffer_t_default_instance_;
class SKBuiltinChar_t;
class SKBuiltinChar_tDefaultTypeInternal;
extern SKBuiltinChar_tDefaultTypeInternal _SKBuiltinChar_t_default_instance_;
class SKBuiltinDouble64_t;
class SKBuiltinDouble64_tDefaultTypeInternal;
extern SKBuiltinDouble64_tDefaultTypeInternal _SKBuiltinDouble64_t_default_instance_;
class SKBuiltinFloat32_t;
class SKBuiltinFloat32_tDefaultTypeInternal;
extern SKBuiltinFloat32_tDefaultTypeInternal _SKBuiltinFloat32_t_default_instance_;
class SKBuiltinInt16_t;
class SKBuiltinInt16_tDefaultTypeInternal;
extern SKBuiltinInt16_tDefaultTypeInternal _SKBuiltinInt16_t_default_instance_;
class SKBuiltinInt32_t;
class SKBuiltinInt32_tDefaultTypeInternal;
extern SKBuiltinInt32_tDefaultTypeInternal _SKBuiltinInt32_t_default_instance_;
class SKBuiltinInt64_t;
class SKBuiltinInt64_tDefaultTypeInternal;
extern SKBuiltinInt64_tDefaultTypeInternal _SKBuiltinInt64_t_default_instance_;
class SKBuiltinInt8_t;
class SKBuiltinInt8_tDefaultTypeInternal;
extern SKBuiltinInt8_tDefaultTypeInternal _SKBuiltinInt8_t_default_instance_;
class SKBuiltinString_t;
class SKBuiltinString_tDefaultTypeInternal;
extern SKBuiltinString_tDefaultTypeInternal _SKBuiltinString_t_default_instance_;
class SKBuiltinUchar_t;
class SKBuiltinUchar_tDefaultTypeInternal;
extern SKBuiltinUchar_tDefaultTypeInternal _SKBuiltinUchar_t_default_instance_;
class SKBuiltinUint16_t;
class SKBuiltinUint16_tDefaultTypeInternal;
extern SKBuiltinUint16_tDefaultTypeInternal _SKBuiltinUint16_t_default_instance_;
class SKBuiltinUint32_t;
class SKBuiltinUint32_tDefaultTypeInternal;
extern SKBuiltinUint32_tDefaultTypeInternal _SKBuiltinUint32_t_default_instance_;
class SKBuiltinUint64_t;
class SKBuiltinUint64_tDefaultTypeInternal;
extern SKBuiltinUint64_tDefaultTypeInternal _SKBuiltinUint64_t_default_instance_;
class SKBuiltinUint8_t;
class SKBuiltinUint8_tDefaultTypeInternal;
extern SKBuiltinUint8_tDefaultTypeInternal _SKBuiltinUint8_t_default_instance_;
class SafeDevice;
class SafeDeviceDefaultTypeInternal;
extern SafeDeviceDefaultTypeInternal _SafeDevice_default_instance_;
class SafeDeviceList;
class SafeDeviceListDefaultTypeInternal;
extern SafeDeviceListDefaultTypeInternal _SafeDeviceList_default_instance_;
class SendYoRequest;
class SendYoRequestDefaultTypeInternal;
extern SendYoRequestDefaultTypeInternal _SendYoRequest_default_instance_;
class SendYoResponse;
class SendYoResponseDefaultTypeInternal;
extern SendYoResponseDefaultTypeInternal _SendYoResponse_default_instance_;
class ShakeSyncRequest;
class ShakeSyncRequestDefaultTypeInternal;
extern ShakeSyncRequestDefaultTypeInternal _ShakeSyncRequest_default_instance_;
class ShakeSyncResponse;
class ShakeSyncResponseDefaultTypeInternal;
extern ShakeSyncResponseDefaultTypeInternal _ShakeSyncResponse_default_instance_;
class ShowStyleKey;
class ShowStyleKeyDefaultTypeInternal;
extern ShowStyleKeyDefaultTypeInternal _ShowStyleKey_default_instance_;
class SnsUserInfo;
class SnsUserInfoDefaultTypeInternal;
extern SnsUserInfoDefaultTypeInternal _SnsUserInfo_default_instance_;
class StyleKeyVal;
class StyleKeyValDefaultTypeInternal;
extern StyleKeyValDefaultTypeInternal _StyleKeyVal_default_instance_;
class UploadEmojiRequest;
class UploadEmojiRequestDefaultTypeInternal;
extern UploadEmojiRequestDefaultTypeInternal _UploadEmojiRequest_default_instance_;
class UploadEmojiResponse;
class UploadEmojiResponseDefaultTypeInternal;
extern UploadEmojiResponseDefaultTypeInternal _UploadEmojiResponse_default_instance_;
class UploadMsgImgRequest;
class UploadMsgImgRequestDefaultTypeInternal;
extern UploadMsgImgRequestDefaultTypeInternal _UploadMsgImgRequest_default_instance_;
class UploadMsgImgResponse;
class UploadMsgImgResponseDefaultTypeInternal;
extern UploadMsgImgResponseDefaultTypeInternal _UploadMsgImgResponse_default_instance_;
class UploadToWeiboRequest;
class UploadToWeiboRequestDefaultTypeInternal;
extern UploadToWeiboRequestDefaultTypeInternal _UploadToWeiboRequest_default_instance_;
class UploadToWeiboResponse;
class UploadToWeiboResponseDefaultTypeInternal;
extern UploadToWeiboResponseDefaultTypeInternal _UploadToWeiboResponse_default_instance_;
class UploadVideoRequest;
class UploadVideoRequestDefaultTypeInternal;
extern UploadVideoRequestDefaultTypeInternal _UploadVideoRequest_default_instance_;
class UploadVideoResponse;
class UploadVideoResponseDefaultTypeInternal;
extern UploadVideoResponseDefaultTypeInternal _UploadVideoResponse_default_instance_;
class UploadWeiboImgRequest;
class UploadWeiboImgRequestDefaultTypeInternal;
extern UploadWeiboImgRequestDefaultTypeInternal _UploadWeiboImgRequest_default_instance_;
class UploadWeiboImgResponse;
class UploadWeiboImgResponseDefaultTypeInternal;
extern UploadWeiboImgResponseDefaultTypeInternal _UploadWeiboImgResponse_default_instance_;
class UserInfoExt;
class UserInfoExtDefaultTypeInternal;
extern UserInfoExtDefaultTypeInternal _UserInfoExt_default_instance_;
}  // namespace micromsg

namespace micromsg {

namespace protobuf_mmextsend_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_mmextsend_2eproto

// ===================================================================

class GetCDNDnsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetCDNDnsRequest) */ {
 public:
  GetCDNDnsRequest();
  virtual ~GetCDNDnsRequest();

  GetCDNDnsRequest(const GetCDNDnsRequest& from);

  inline GetCDNDnsRequest& operator=(const GetCDNDnsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCDNDnsRequest& default_instance();

  static inline const GetCDNDnsRequest* internal_default_instance() {
    return reinterpret_cast<const GetCDNDnsRequest*>(
               &_GetCDNDnsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GetCDNDnsRequest* other);

  // implements Message ----------------------------------------------

  inline GetCDNDnsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCDNDnsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCDNDnsRequest& from);
  void MergeFrom(const GetCDNDnsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCDNDnsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ClientIP = 2;
  bool has_clientip() const;
  void clear_clientip();
  static const int kClientIPFieldNumber = 2;
  const ::std::string& clientip() const;
  void set_clientip(const ::std::string& value);
  #if LANG_CXX11
  void set_clientip(::std::string&& value);
  #endif
  void set_clientip(const char* value);
  void set_clientip(const char* value, size_t size);
  ::std::string* mutable_clientip();
  ::std::string* release_clientip();
  void set_allocated_clientip(::std::string* clientip);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.GetCDNDnsRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_clientip();
  void clear_has_clientip();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientip_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetCDNDnsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetCDNDnsResponse) */ {
 public:
  GetCDNDnsResponse();
  virtual ~GetCDNDnsResponse();

  GetCDNDnsResponse(const GetCDNDnsResponse& from);

  inline GetCDNDnsResponse& operator=(const GetCDNDnsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCDNDnsResponse& default_instance();

  static inline const GetCDNDnsResponse* internal_default_instance() {
    return reinterpret_cast<const GetCDNDnsResponse*>(
               &_GetCDNDnsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GetCDNDnsResponse* other);

  // implements Message ----------------------------------------------

  inline GetCDNDnsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCDNDnsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCDNDnsResponse& from);
  void MergeFrom(const GetCDNDnsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCDNDnsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required .micromsg.CDNDnsInfo DnsInfo = 2;
  bool has_dnsinfo() const;
  void clear_dnsinfo();
  static const int kDnsInfoFieldNumber = 2;
  const ::micromsg::CDNDnsInfo& dnsinfo() const;
  ::micromsg::CDNDnsInfo* mutable_dnsinfo();
  ::micromsg::CDNDnsInfo* release_dnsinfo();
  void set_allocated_dnsinfo(::micromsg::CDNDnsInfo* dnsinfo);

  // optional .micromsg.CDNDnsInfo SnsDnsInfo = 3;
  bool has_snsdnsinfo() const;
  void clear_snsdnsinfo();
  static const int kSnsDnsInfoFieldNumber = 3;
  const ::micromsg::CDNDnsInfo& snsdnsinfo() const;
  ::micromsg::CDNDnsInfo* mutable_snsdnsinfo();
  ::micromsg::CDNDnsInfo* release_snsdnsinfo();
  void set_allocated_snsdnsinfo(::micromsg::CDNDnsInfo* snsdnsinfo);

  // optional .micromsg.CDNDnsInfo AppDnsInfo = 4;
  bool has_appdnsinfo() const;
  void clear_appdnsinfo();
  static const int kAppDnsInfoFieldNumber = 4;
  const ::micromsg::CDNDnsInfo& appdnsinfo() const;
  ::micromsg::CDNDnsInfo* mutable_appdnsinfo();
  ::micromsg::CDNDnsInfo* release_appdnsinfo();
  void set_allocated_appdnsinfo(::micromsg::CDNDnsInfo* appdnsinfo);

  // optional .micromsg.SKBuiltinBuffer_t CDNDnsRuleBuf = 5;
  bool has_cdndnsrulebuf() const;
  void clear_cdndnsrulebuf();
  static const int kCDNDnsRuleBufFieldNumber = 5;
  const ::micromsg::SKBuiltinBuffer_t& cdndnsrulebuf() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_cdndnsrulebuf();
  ::micromsg::SKBuiltinBuffer_t* release_cdndnsrulebuf();
  void set_allocated_cdndnsrulebuf(::micromsg::SKBuiltinBuffer_t* cdndnsrulebuf);

  // optional .micromsg.SKBuiltinBuffer_t FakeCDNDnsRuleBuf = 6;
  bool has_fakecdndnsrulebuf() const;
  void clear_fakecdndnsrulebuf();
  static const int kFakeCDNDnsRuleBufFieldNumber = 6;
  const ::micromsg::SKBuiltinBuffer_t& fakecdndnsrulebuf() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_fakecdndnsrulebuf();
  ::micromsg::SKBuiltinBuffer_t* release_fakecdndnsrulebuf();
  void set_allocated_fakecdndnsrulebuf(::micromsg::SKBuiltinBuffer_t* fakecdndnsrulebuf);

  // optional .micromsg.CDNDnsInfo FakeDnsInfo = 7;
  bool has_fakednsinfo() const;
  void clear_fakednsinfo();
  static const int kFakeDnsInfoFieldNumber = 7;
  const ::micromsg::CDNDnsInfo& fakednsinfo() const;
  ::micromsg::CDNDnsInfo* mutable_fakednsinfo();
  ::micromsg::CDNDnsInfo* release_fakednsinfo();
  void set_allocated_fakednsinfo(::micromsg::CDNDnsInfo* fakednsinfo);

  // @@protoc_insertion_point(class_scope:micromsg.GetCDNDnsResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_dnsinfo();
  void clear_has_dnsinfo();
  void set_has_snsdnsinfo();
  void clear_has_snsdnsinfo();
  void set_has_appdnsinfo();
  void clear_has_appdnsinfo();
  void set_has_cdndnsrulebuf();
  void clear_has_cdndnsrulebuf();
  void set_has_fakecdndnsrulebuf();
  void clear_has_fakecdndnsrulebuf();
  void set_has_fakednsinfo();
  void clear_has_fakednsinfo();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  ::micromsg::CDNDnsInfo* dnsinfo_;
  ::micromsg::CDNDnsInfo* snsdnsinfo_;
  ::micromsg::CDNDnsInfo* appdnsinfo_;
  ::micromsg::SKBuiltinBuffer_t* cdndnsrulebuf_;
  ::micromsg::SKBuiltinBuffer_t* fakecdndnsrulebuf_;
  ::micromsg::CDNDnsInfo* fakednsinfo_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmojiUploadInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.EmojiUploadInfoReq) */ {
 public:
  EmojiUploadInfoReq();
  virtual ~EmojiUploadInfoReq();

  EmojiUploadInfoReq(const EmojiUploadInfoReq& from);

  inline EmojiUploadInfoReq& operator=(const EmojiUploadInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmojiUploadInfoReq& default_instance();

  static inline const EmojiUploadInfoReq* internal_default_instance() {
    return reinterpret_cast<const EmojiUploadInfoReq*>(
               &_EmojiUploadInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(EmojiUploadInfoReq* other);

  // implements Message ----------------------------------------------

  inline EmojiUploadInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  EmojiUploadInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EmojiUploadInfoReq& from);
  void MergeFrom(const EmojiUploadInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EmojiUploadInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MD5 = 1;
  bool has_md5() const;
  void clear_md5();
  static const int kMD5FieldNumber = 1;
  const ::std::string& md5() const;
  void set_md5(const ::std::string& value);
  #if LANG_CXX11
  void set_md5(::std::string&& value);
  #endif
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  ::std::string* mutable_md5();
  ::std::string* release_md5();
  void set_allocated_md5(::std::string* md5);

  // optional string ToUserName = 6;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 6;
  const ::std::string& tousername() const;
  void set_tousername(const ::std::string& value);
  #if LANG_CXX11
  void set_tousername(::std::string&& value);
  #endif
  void set_tousername(const char* value);
  void set_tousername(const char* value, size_t size);
  ::std::string* mutable_tousername();
  ::std::string* release_tousername();
  void set_allocated_tousername(::std::string* tousername);

  // optional string ExternXML = 7;
  bool has_externxml() const;
  void clear_externxml();
  static const int kExternXMLFieldNumber = 7;
  const ::std::string& externxml() const;
  void set_externxml(const ::std::string& value);
  #if LANG_CXX11
  void set_externxml(::std::string&& value);
  #endif
  void set_externxml(const char* value);
  void set_externxml(const char* value, size_t size);
  ::std::string* mutable_externxml();
  ::std::string* release_externxml();
  void set_allocated_externxml(::std::string* externxml);

  // optional string Report = 8;
  bool has_report() const;
  void clear_report();
  static const int kReportFieldNumber = 8;
  const ::std::string& report() const;
  void set_report(const ::std::string& value);
  #if LANG_CXX11
  void set_report(::std::string&& value);
  #endif
  void set_report(const char* value);
  void set_report(const char* value, size_t size);
  ::std::string* mutable_report();
  ::std::string* release_report();
  void set_allocated_report(::std::string* report);

  // optional string ClientMsgID = 9;
  bool has_clientmsgid() const;
  void clear_clientmsgid();
  static const int kClientMsgIDFieldNumber = 9;
  const ::std::string& clientmsgid() const;
  void set_clientmsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientmsgid(::std::string&& value);
  #endif
  void set_clientmsgid(const char* value);
  void set_clientmsgid(const char* value, size_t size);
  ::std::string* mutable_clientmsgid();
  ::std::string* release_clientmsgid();
  void set_allocated_clientmsgid(::std::string* clientmsgid);

  // optional string MsgSource = 10;
  bool has_msgsource() const;
  void clear_msgsource();
  static const int kMsgSourceFieldNumber = 10;
  const ::std::string& msgsource() const;
  void set_msgsource(const ::std::string& value);
  #if LANG_CXX11
  void set_msgsource(::std::string&& value);
  #endif
  void set_msgsource(const char* value);
  void set_msgsource(const char* value, size_t size);
  ::std::string* mutable_msgsource();
  ::std::string* release_msgsource();
  void set_allocated_msgsource(::std::string* msgsource);

  // required .micromsg.SKBuiltinBuffer_t EmojiBuffer = 4;
  bool has_emojibuffer() const;
  void clear_emojibuffer();
  static const int kEmojiBufferFieldNumber = 4;
  const ::micromsg::SKBuiltinBuffer_t& emojibuffer() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_emojibuffer();
  ::micromsg::SKBuiltinBuffer_t* release_emojibuffer();
  void set_allocated_emojibuffer(::micromsg::SKBuiltinBuffer_t* emojibuffer);

  // required int32 StartPos = 2;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 2;
  ::google::protobuf::int32 startpos() const;
  void set_startpos(::google::protobuf::int32 value);

  // required int32 TotalLen = 3;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 3;
  ::google::protobuf::int32 totallen() const;
  void set_totallen(::google::protobuf::int32 value);

  // required int32 Type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int32 NewXmlFlag = 11;
  bool has_newxmlflag() const;
  void clear_newxmlflag();
  static const int kNewXmlFlagFieldNumber = 11;
  ::google::protobuf::int32 newxmlflag() const;
  void set_newxmlflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.EmojiUploadInfoReq)
 private:
  void set_has_md5();
  void clear_has_md5();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_emojibuffer();
  void clear_has_emojibuffer();
  void set_has_type();
  void clear_has_type();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_externxml();
  void clear_has_externxml();
  void set_has_report();
  void clear_has_report();
  void set_has_clientmsgid();
  void clear_has_clientmsgid();
  void set_has_msgsource();
  void clear_has_msgsource();
  void set_has_newxmlflag();
  void clear_has_newxmlflag();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr md5_;
  ::google::protobuf::internal::ArenaStringPtr tousername_;
  ::google::protobuf::internal::ArenaStringPtr externxml_;
  ::google::protobuf::internal::ArenaStringPtr report_;
  ::google::protobuf::internal::ArenaStringPtr clientmsgid_;
  ::google::protobuf::internal::ArenaStringPtr msgsource_;
  ::micromsg::SKBuiltinBuffer_t* emojibuffer_;
  ::google::protobuf::int32 startpos_;
  ::google::protobuf::int32 totallen_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 newxmlflag_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UploadEmojiRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UploadEmojiRequest) */ {
 public:
  UploadEmojiRequest();
  virtual ~UploadEmojiRequest();

  UploadEmojiRequest(const UploadEmojiRequest& from);

  inline UploadEmojiRequest& operator=(const UploadEmojiRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadEmojiRequest& default_instance();

  static inline const UploadEmojiRequest* internal_default_instance() {
    return reinterpret_cast<const UploadEmojiRequest*>(
               &_UploadEmojiRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(UploadEmojiRequest* other);

  // implements Message ----------------------------------------------

  inline UploadEmojiRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadEmojiRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadEmojiRequest& from);
  void MergeFrom(const UploadEmojiRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadEmojiRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.EmojiUploadInfoReq EmojiItem = 3;
  int emojiitem_size() const;
  void clear_emojiitem();
  static const int kEmojiItemFieldNumber = 3;
  const ::micromsg::EmojiUploadInfoReq& emojiitem(int index) const;
  ::micromsg::EmojiUploadInfoReq* mutable_emojiitem(int index);
  ::micromsg::EmojiUploadInfoReq* add_emojiitem();
  ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiUploadInfoReq >*
      mutable_emojiitem();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiUploadInfoReq >&
      emojiitem() const;

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required int32 EmojiItemCount = 2;
  bool has_emojiitemcount() const;
  void clear_emojiitemcount();
  static const int kEmojiItemCountFieldNumber = 2;
  ::google::protobuf::int32 emojiitemcount() const;
  void set_emojiitemcount(::google::protobuf::int32 value);

  // optional uint32 ReqTime = 4;
  bool has_reqtime() const;
  void clear_reqtime();
  static const int kReqTimeFieldNumber = 4;
  ::google::protobuf::uint32 reqtime() const;
  void set_reqtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.UploadEmojiRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_emojiitemcount();
  void clear_has_emojiitemcount();
  void set_has_reqtime();
  void clear_has_reqtime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiUploadInfoReq > emojiitem_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::int32 emojiitemcount_;
  ::google::protobuf::uint32 reqtime_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmojiUploadInfoResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.EmojiUploadInfoResp) */ {
 public:
  EmojiUploadInfoResp();
  virtual ~EmojiUploadInfoResp();

  EmojiUploadInfoResp(const EmojiUploadInfoResp& from);

  inline EmojiUploadInfoResp& operator=(const EmojiUploadInfoResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmojiUploadInfoResp& default_instance();

  static inline const EmojiUploadInfoResp* internal_default_instance() {
    return reinterpret_cast<const EmojiUploadInfoResp*>(
               &_EmojiUploadInfoResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(EmojiUploadInfoResp* other);

  // implements Message ----------------------------------------------

  inline EmojiUploadInfoResp* New() const PROTOBUF_FINAL { return New(NULL); }

  EmojiUploadInfoResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EmojiUploadInfoResp& from);
  void MergeFrom(const EmojiUploadInfoResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EmojiUploadInfoResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MD5 = 4;
  bool has_md5() const;
  void clear_md5();
  static const int kMD5FieldNumber = 4;
  const ::std::string& md5() const;
  void set_md5(const ::std::string& value);
  #if LANG_CXX11
  void set_md5(::std::string&& value);
  #endif
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  ::std::string* mutable_md5();
  ::std::string* release_md5();
  void set_allocated_md5(::std::string* md5);

  // required int32 Ret = 1;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // required int32 StartPos = 2;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 2;
  ::google::protobuf::int32 startpos() const;
  void set_startpos(::google::protobuf::int32 value);

  // required int32 TotalLen = 3;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 3;
  ::google::protobuf::int32 totallen() const;
  void set_totallen(::google::protobuf::int32 value);

  // required uint32 MsgID = 5;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIDFieldNumber = 5;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // optional uint64 NewMsgId = 6;
  bool has_newmsgid() const;
  void clear_newmsgid();
  static const int kNewMsgIdFieldNumber = 6;
  ::google::protobuf::uint64 newmsgid() const;
  void set_newmsgid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:micromsg.EmojiUploadInfoResp)
 private:
  void set_has_ret();
  void clear_has_ret();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_md5();
  void clear_has_md5();
  void set_has_msgid();
  void clear_has_msgid();
  void set_has_newmsgid();
  void clear_has_newmsgid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr md5_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 startpos_;
  ::google::protobuf::int32 totallen_;
  ::google::protobuf::uint32 msgid_;
  ::google::protobuf::uint64 newmsgid_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UploadEmojiResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UploadEmojiResponse) */ {
 public:
  UploadEmojiResponse();
  virtual ~UploadEmojiResponse();

  UploadEmojiResponse(const UploadEmojiResponse& from);

  inline UploadEmojiResponse& operator=(const UploadEmojiResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadEmojiResponse& default_instance();

  static inline const UploadEmojiResponse* internal_default_instance() {
    return reinterpret_cast<const UploadEmojiResponse*>(
               &_UploadEmojiResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(UploadEmojiResponse* other);

  // implements Message ----------------------------------------------

  inline UploadEmojiResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadEmojiResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadEmojiResponse& from);
  void MergeFrom(const UploadEmojiResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadEmojiResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.EmojiUploadInfoResp EmojiItem = 3;
  int emojiitem_size() const;
  void clear_emojiitem();
  static const int kEmojiItemFieldNumber = 3;
  const ::micromsg::EmojiUploadInfoResp& emojiitem(int index) const;
  ::micromsg::EmojiUploadInfoResp* mutable_emojiitem(int index);
  ::micromsg::EmojiUploadInfoResp* add_emojiitem();
  ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiUploadInfoResp >*
      mutable_emojiitem();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiUploadInfoResp >&
      emojiitem() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required int32 EmojiItemCount = 2;
  bool has_emojiitemcount() const;
  void clear_emojiitemcount();
  static const int kEmojiItemCountFieldNumber = 2;
  ::google::protobuf::int32 emojiitemcount() const;
  void set_emojiitemcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.UploadEmojiResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_emojiitemcount();
  void clear_has_emojiitemcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiUploadInfoResp > emojiitem_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::int32 emojiitemcount_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmojiDownloadInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.EmojiDownloadInfoReq) */ {
 public:
  EmojiDownloadInfoReq();
  virtual ~EmojiDownloadInfoReq();

  EmojiDownloadInfoReq(const EmojiDownloadInfoReq& from);

  inline EmojiDownloadInfoReq& operator=(const EmojiDownloadInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmojiDownloadInfoReq& default_instance();

  static inline const EmojiDownloadInfoReq* internal_default_instance() {
    return reinterpret_cast<const EmojiDownloadInfoReq*>(
               &_EmojiDownloadInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(EmojiDownloadInfoReq* other);

  // implements Message ----------------------------------------------

  inline EmojiDownloadInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  EmojiDownloadInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EmojiDownloadInfoReq& from);
  void MergeFrom(const EmojiDownloadInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EmojiDownloadInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ID = 1;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string MD5 = 4;
  bool has_md5() const;
  void clear_md5();
  static const int kMD5FieldNumber = 4;
  const ::std::string& md5() const;
  void set_md5(const ::std::string& value);
  #if LANG_CXX11
  void set_md5(::std::string&& value);
  #endif
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  ::std::string* mutable_md5();
  ::std::string* release_md5();
  void set_allocated_md5(::std::string* md5);

  // required int32 StartPos = 2;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 2;
  ::google::protobuf::int32 startpos() const;
  void set_startpos(::google::protobuf::int32 value);

  // required int32 TotalLen = 3;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 3;
  ::google::protobuf::int32 totallen() const;
  void set_totallen(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.EmojiDownloadInfoReq)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_md5();
  void clear_has_md5();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr md5_;
  ::google::protobuf::int32 startpos_;
  ::google::protobuf::int32 totallen_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DownloadEmojiRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.DownloadEmojiRequest) */ {
 public:
  DownloadEmojiRequest();
  virtual ~DownloadEmojiRequest();

  DownloadEmojiRequest(const DownloadEmojiRequest& from);

  inline DownloadEmojiRequest& operator=(const DownloadEmojiRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadEmojiRequest& default_instance();

  static inline const DownloadEmojiRequest* internal_default_instance() {
    return reinterpret_cast<const DownloadEmojiRequest*>(
               &_DownloadEmojiRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(DownloadEmojiRequest* other);

  // implements Message ----------------------------------------------

  inline DownloadEmojiRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DownloadEmojiRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DownloadEmojiRequest& from);
  void MergeFrom(const DownloadEmojiRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DownloadEmojiRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.EmojiDownloadInfoReq EmojiItem = 3;
  int emojiitem_size() const;
  void clear_emojiitem();
  static const int kEmojiItemFieldNumber = 3;
  const ::micromsg::EmojiDownloadInfoReq& emojiitem(int index) const;
  ::micromsg::EmojiDownloadInfoReq* mutable_emojiitem(int index);
  ::micromsg::EmojiDownloadInfoReq* add_emojiitem();
  ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiDownloadInfoReq >*
      mutable_emojiitem();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiDownloadInfoReq >&
      emojiitem() const;

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required int32 EmojiItemCount = 2;
  bool has_emojiitemcount() const;
  void clear_emojiitemcount();
  static const int kEmojiItemCountFieldNumber = 2;
  ::google::protobuf::int32 emojiitemcount() const;
  void set_emojiitemcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.DownloadEmojiRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_emojiitemcount();
  void clear_has_emojiitemcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiDownloadInfoReq > emojiitem_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::int32 emojiitemcount_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmojiDownloadInfoResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.EmojiDownloadInfoResp) */ {
 public:
  EmojiDownloadInfoResp();
  virtual ~EmojiDownloadInfoResp();

  EmojiDownloadInfoResp(const EmojiDownloadInfoResp& from);

  inline EmojiDownloadInfoResp& operator=(const EmojiDownloadInfoResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmojiDownloadInfoResp& default_instance();

  static inline const EmojiDownloadInfoResp* internal_default_instance() {
    return reinterpret_cast<const EmojiDownloadInfoResp*>(
               &_EmojiDownloadInfoResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(EmojiDownloadInfoResp* other);

  // implements Message ----------------------------------------------

  inline EmojiDownloadInfoResp* New() const PROTOBUF_FINAL { return New(NULL); }

  EmojiDownloadInfoResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EmojiDownloadInfoResp& from);
  void MergeFrom(const EmojiDownloadInfoResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EmojiDownloadInfoResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MD5 = 5;
  bool has_md5() const;
  void clear_md5();
  static const int kMD5FieldNumber = 5;
  const ::std::string& md5() const;
  void set_md5(const ::std::string& value);
  #if LANG_CXX11
  void set_md5(::std::string&& value);
  #endif
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  ::std::string* mutable_md5();
  ::std::string* release_md5();
  void set_allocated_md5(::std::string* md5);

  // optional string ID = 6;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 6;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required .micromsg.SKBuiltinBuffer_t EmojiBuffer = 4;
  bool has_emojibuffer() const;
  void clear_emojibuffer();
  static const int kEmojiBufferFieldNumber = 4;
  const ::micromsg::SKBuiltinBuffer_t& emojibuffer() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_emojibuffer();
  ::micromsg::SKBuiltinBuffer_t* release_emojibuffer();
  void set_allocated_emojibuffer(::micromsg::SKBuiltinBuffer_t* emojibuffer);

  // required int32 Ret = 1;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // required int32 StartPos = 2;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 2;
  ::google::protobuf::int32 startpos() const;
  void set_startpos(::google::protobuf::int32 value);

  // required int32 TotalLen = 3;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 3;
  ::google::protobuf::int32 totallen() const;
  void set_totallen(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.EmojiDownloadInfoResp)
 private:
  void set_has_ret();
  void clear_has_ret();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_emojibuffer();
  void clear_has_emojibuffer();
  void set_has_md5();
  void clear_has_md5();
  void set_has_id();
  void clear_has_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr md5_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::micromsg::SKBuiltinBuffer_t* emojibuffer_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 startpos_;
  ::google::protobuf::int32 totallen_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DownloadEmojiResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.DownloadEmojiResponse) */ {
 public:
  DownloadEmojiResponse();
  virtual ~DownloadEmojiResponse();

  DownloadEmojiResponse(const DownloadEmojiResponse& from);

  inline DownloadEmojiResponse& operator=(const DownloadEmojiResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadEmojiResponse& default_instance();

  static inline const DownloadEmojiResponse* internal_default_instance() {
    return reinterpret_cast<const DownloadEmojiResponse*>(
               &_DownloadEmojiResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(DownloadEmojiResponse* other);

  // implements Message ----------------------------------------------

  inline DownloadEmojiResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DownloadEmojiResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DownloadEmojiResponse& from);
  void MergeFrom(const DownloadEmojiResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DownloadEmojiResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.EmojiDownloadInfoResp EmojiItem = 3;
  int emojiitem_size() const;
  void clear_emojiitem();
  static const int kEmojiItemFieldNumber = 3;
  const ::micromsg::EmojiDownloadInfoResp& emojiitem(int index) const;
  ::micromsg::EmojiDownloadInfoResp* mutable_emojiitem(int index);
  ::micromsg::EmojiDownloadInfoResp* add_emojiitem();
  ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiDownloadInfoResp >*
      mutable_emojiitem();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiDownloadInfoResp >&
      emojiitem() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required int32 EmojiItemCount = 2;
  bool has_emojiitemcount() const;
  void clear_emojiitemcount();
  static const int kEmojiItemCountFieldNumber = 2;
  ::google::protobuf::int32 emojiitemcount() const;
  void set_emojiitemcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.DownloadEmojiResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_emojiitemcount();
  void clear_has_emojiitemcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiDownloadInfoResp > emojiitem_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::int32 emojiitemcount_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DownloadVoiceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.DownloadVoiceRequest) */ {
 public:
  DownloadVoiceRequest();
  virtual ~DownloadVoiceRequest();

  DownloadVoiceRequest(const DownloadVoiceRequest& from);

  inline DownloadVoiceRequest& operator=(const DownloadVoiceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadVoiceRequest& default_instance();

  static inline const DownloadVoiceRequest* internal_default_instance() {
    return reinterpret_cast<const DownloadVoiceRequest*>(
               &_DownloadVoiceRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(DownloadVoiceRequest* other);

  // implements Message ----------------------------------------------

  inline DownloadVoiceRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DownloadVoiceRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DownloadVoiceRequest& from);
  void MergeFrom(const DownloadVoiceRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DownloadVoiceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ClientMsgId = 4;
  bool has_clientmsgid() const;
  void clear_clientmsgid();
  static const int kClientMsgIdFieldNumber = 4;
  const ::std::string& clientmsgid() const;
  void set_clientmsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientmsgid(::std::string&& value);
  #endif
  void set_clientmsgid(const char* value);
  void set_clientmsgid(const char* value, size_t size);
  ::std::string* mutable_clientmsgid();
  ::std::string* release_clientmsgid();
  void set_allocated_clientmsgid(::std::string* clientmsgid);

  // optional string ChatRoomName = 7;
  bool has_chatroomname() const;
  void clear_chatroomname();
  static const int kChatRoomNameFieldNumber = 7;
  const ::std::string& chatroomname() const;
  void set_chatroomname(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomname(::std::string&& value);
  #endif
  void set_chatroomname(const char* value);
  void set_chatroomname(const char* value, size_t size);
  ::std::string* mutable_chatroomname();
  ::std::string* release_chatroomname();
  void set_allocated_chatroomname(::std::string* chatroomname);

  // required .micromsg.BaseRequest BaseRequest = 5;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 5;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 MsgId = 1;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 1;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // required uint32 Offset = 2;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // optional uint64 NewMsgId = 6;
  bool has_newmsgid() const;
  void clear_newmsgid();
  static const int kNewMsgIdFieldNumber = 6;
  ::google::protobuf::uint64 newmsgid() const;
  void set_newmsgid(::google::protobuf::uint64 value);

  // optional uint64 MasterBufId = 8;
  bool has_masterbufid() const;
  void clear_masterbufid();
  static const int kMasterBufIdFieldNumber = 8;
  ::google::protobuf::uint64 masterbufid() const;
  void set_masterbufid(::google::protobuf::uint64 value);

  // required uint32 Length = 3;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 3;
  ::google::protobuf::uint32 length() const;
  void set_length(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.DownloadVoiceRequest)
 private:
  void set_has_msgid();
  void clear_has_msgid();
  void set_has_offset();
  void clear_has_offset();
  void set_has_length();
  void clear_has_length();
  void set_has_clientmsgid();
  void clear_has_clientmsgid();
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_newmsgid();
  void clear_has_newmsgid();
  void set_has_chatroomname();
  void clear_has_chatroomname();
  void set_has_masterbufid();
  void clear_has_masterbufid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientmsgid_;
  ::google::protobuf::internal::ArenaStringPtr chatroomname_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 msgid_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint64 newmsgid_;
  ::google::protobuf::uint64 masterbufid_;
  ::google::protobuf::uint32 length_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DownloadVoiceResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.DownloadVoiceResponse) */ {
 public:
  DownloadVoiceResponse();
  virtual ~DownloadVoiceResponse();

  DownloadVoiceResponse(const DownloadVoiceResponse& from);

  inline DownloadVoiceResponse& operator=(const DownloadVoiceResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadVoiceResponse& default_instance();

  static inline const DownloadVoiceResponse* internal_default_instance() {
    return reinterpret_cast<const DownloadVoiceResponse*>(
               &_DownloadVoiceResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(DownloadVoiceResponse* other);

  // implements Message ----------------------------------------------

  inline DownloadVoiceResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DownloadVoiceResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DownloadVoiceResponse& from);
  void MergeFrom(const DownloadVoiceResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DownloadVoiceResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ClientMsgId = 6;
  bool has_clientmsgid() const;
  void clear_clientmsgid();
  static const int kClientMsgIdFieldNumber = 6;
  const ::std::string& clientmsgid() const;
  void set_clientmsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientmsgid(::std::string&& value);
  #endif
  void set_clientmsgid(const char* value);
  void set_clientmsgid(const char* value, size_t size);
  ::std::string* mutable_clientmsgid();
  ::std::string* release_clientmsgid();
  void set_allocated_clientmsgid(::std::string* clientmsgid);

  // required .micromsg.SKBuiltinBuffer_t Data = 7;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 7;
  const ::micromsg::SKBuiltinBuffer_t& data() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_data();
  ::micromsg::SKBuiltinBuffer_t* release_data();
  void set_allocated_data(::micromsg::SKBuiltinBuffer_t* data);

  // required .micromsg.BaseResponse BaseResponse = 9;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 9;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 MsgId = 1;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 1;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // required uint32 Offset = 2;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // required uint32 Length = 3;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 3;
  ::google::protobuf::uint32 length() const;
  void set_length(::google::protobuf::uint32 value);

  // required uint32 VoiceLength = 5;
  bool has_voicelength() const;
  void clear_voicelength();
  static const int kVoiceLengthFieldNumber = 5;
  ::google::protobuf::uint32 voicelength() const;
  void set_voicelength(::google::protobuf::uint32 value);

  // required uint32 EndFlag = 8;
  bool has_endflag() const;
  void clear_endflag();
  static const int kEndFlagFieldNumber = 8;
  ::google::protobuf::uint32 endflag() const;
  void set_endflag(::google::protobuf::uint32 value);

  // optional uint32 CancelFlag = 10;
  bool has_cancelflag() const;
  void clear_cancelflag();
  static const int kCancelFlagFieldNumber = 10;
  ::google::protobuf::uint32 cancelflag() const;
  void set_cancelflag(::google::protobuf::uint32 value);

  // optional uint64 NewMsgId = 11;
  bool has_newmsgid() const;
  void clear_newmsgid();
  static const int kNewMsgIdFieldNumber = 11;
  ::google::protobuf::uint64 newmsgid() const;
  void set_newmsgid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:micromsg.DownloadVoiceResponse)
 private:
  void set_has_msgid();
  void clear_has_msgid();
  void set_has_offset();
  void clear_has_offset();
  void set_has_length();
  void clear_has_length();
  void set_has_voicelength();
  void clear_has_voicelength();
  void set_has_clientmsgid();
  void clear_has_clientmsgid();
  void set_has_data();
  void clear_has_data();
  void set_has_endflag();
  void clear_has_endflag();
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_cancelflag();
  void clear_has_cancelflag();
  void set_has_newmsgid();
  void clear_has_newmsgid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientmsgid_;
  ::micromsg::SKBuiltinBuffer_t* data_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 msgid_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 length_;
  ::google::protobuf::uint32 voicelength_;
  ::google::protobuf::uint32 endflag_;
  ::google::protobuf::uint32 cancelflag_;
  ::google::protobuf::uint64 newmsgid_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UploadMsgImgRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UploadMsgImgRequest) */ {
 public:
  UploadMsgImgRequest();
  virtual ~UploadMsgImgRequest();

  UploadMsgImgRequest(const UploadMsgImgRequest& from);

  inline UploadMsgImgRequest& operator=(const UploadMsgImgRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadMsgImgRequest& default_instance();

  static inline const UploadMsgImgRequest* internal_default_instance() {
    return reinterpret_cast<const UploadMsgImgRequest*>(
               &_UploadMsgImgRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(UploadMsgImgRequest* other);

  // implements Message ----------------------------------------------

  inline UploadMsgImgRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadMsgImgRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadMsgImgRequest& from);
  void MergeFrom(const UploadMsgImgRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadMsgImgRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MsgSource = 10;
  bool has_msgsource() const;
  void clear_msgsource();
  static const int kMsgSourceFieldNumber = 10;
  const ::std::string& msgsource() const;
  void set_msgsource(const ::std::string& value);
  #if LANG_CXX11
  void set_msgsource(::std::string&& value);
  #endif
  void set_msgsource(const char* value);
  void set_msgsource(const char* value, size_t size);
  ::std::string* mutable_msgsource();
  ::std::string* release_msgsource();
  void set_allocated_msgsource(::std::string* msgsource);

  // optional string MediaId = 14;
  bool has_mediaid() const;
  void clear_mediaid();
  static const int kMediaIdFieldNumber = 14;
  const ::std::string& mediaid() const;
  void set_mediaid(const ::std::string& value);
  #if LANG_CXX11
  void set_mediaid(::std::string&& value);
  #endif
  void set_mediaid(const char* value);
  void set_mediaid(const char* value, size_t size);
  ::std::string* mutable_mediaid();
  ::std::string* release_mediaid();
  void set_allocated_mediaid(::std::string* mediaid);

  // optional string CDNBigImgUrl = 15;
  bool has_cdnbigimgurl() const;
  void clear_cdnbigimgurl();
  static const int kCDNBigImgUrlFieldNumber = 15;
  const ::std::string& cdnbigimgurl() const;
  void set_cdnbigimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_cdnbigimgurl(::std::string&& value);
  #endif
  void set_cdnbigimgurl(const char* value);
  void set_cdnbigimgurl(const char* value, size_t size);
  ::std::string* mutable_cdnbigimgurl();
  ::std::string* release_cdnbigimgurl();
  void set_allocated_cdnbigimgurl(::std::string* cdnbigimgurl);

  // optional string CDNMidImgUrl = 16;
  bool has_cdnmidimgurl() const;
  void clear_cdnmidimgurl();
  static const int kCDNMidImgUrlFieldNumber = 16;
  const ::std::string& cdnmidimgurl() const;
  void set_cdnmidimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_cdnmidimgurl(::std::string&& value);
  #endif
  void set_cdnmidimgurl(const char* value);
  void set_cdnmidimgurl(const char* value, size_t size);
  ::std::string* mutable_cdnmidimgurl();
  ::std::string* release_cdnmidimgurl();
  void set_allocated_cdnmidimgurl(::std::string* cdnmidimgurl);

  // optional string AESKey = 17;
  bool has_aeskey() const;
  void clear_aeskey();
  static const int kAESKeyFieldNumber = 17;
  const ::std::string& aeskey() const;
  void set_aeskey(const ::std::string& value);
  #if LANG_CXX11
  void set_aeskey(::std::string&& value);
  #endif
  void set_aeskey(const char* value);
  void set_aeskey(const char* value, size_t size);
  ::std::string* mutable_aeskey();
  ::std::string* release_aeskey();
  void set_allocated_aeskey(::std::string* aeskey);

  // optional string CDNThumbImgUrl = 21;
  bool has_cdnthumbimgurl() const;
  void clear_cdnthumbimgurl();
  static const int kCDNThumbImgUrlFieldNumber = 21;
  const ::std::string& cdnthumbimgurl() const;
  void set_cdnthumbimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_cdnthumbimgurl(::std::string&& value);
  #endif
  void set_cdnthumbimgurl(const char* value);
  void set_cdnthumbimgurl(const char* value, size_t size);
  ::std::string* mutable_cdnthumbimgurl();
  ::std::string* release_cdnthumbimgurl();
  void set_allocated_cdnthumbimgurl(::std::string* cdnthumbimgurl);

  // optional string CDNThumbAESKey = 25;
  bool has_cdnthumbaeskey() const;
  void clear_cdnthumbaeskey();
  static const int kCDNThumbAESKeyFieldNumber = 25;
  const ::std::string& cdnthumbaeskey() const;
  void set_cdnthumbaeskey(const ::std::string& value);
  #if LANG_CXX11
  void set_cdnthumbaeskey(::std::string&& value);
  #endif
  void set_cdnthumbaeskey(const char* value);
  void set_cdnthumbaeskey(const char* value, size_t size);
  ::std::string* mutable_cdnthumbaeskey();
  ::std::string* release_cdnthumbaeskey();
  void set_allocated_cdnthumbaeskey(::std::string* cdnthumbaeskey);

  // optional string Md5 = 27;
  bool has_md5() const;
  void clear_md5();
  static const int kMd5FieldNumber = 27;
  const ::std::string& md5() const;
  void set_md5(const ::std::string& value);
  #if LANG_CXX11
  void set_md5(::std::string&& value);
  #endif
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  ::std::string* mutable_md5();
  ::std::string* release_md5();
  void set_allocated_md5(::std::string* md5);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required .micromsg.SKBuiltinString_t ClientImgId = 2;
  bool has_clientimgid() const;
  void clear_clientimgid();
  static const int kClientImgIdFieldNumber = 2;
  const ::micromsg::SKBuiltinString_t& clientimgid() const;
  ::micromsg::SKBuiltinString_t* mutable_clientimgid();
  ::micromsg::SKBuiltinString_t* release_clientimgid();
  void set_allocated_clientimgid(::micromsg::SKBuiltinString_t* clientimgid);

  // required .micromsg.SKBuiltinString_t FromUserName = 3;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUserNameFieldNumber = 3;
  const ::micromsg::SKBuiltinString_t& fromusername() const;
  ::micromsg::SKBuiltinString_t* mutable_fromusername();
  ::micromsg::SKBuiltinString_t* release_fromusername();
  void set_allocated_fromusername(::micromsg::SKBuiltinString_t* fromusername);

  // required .micromsg.SKBuiltinString_t ToUserName = 4;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 4;
  const ::micromsg::SKBuiltinString_t& tousername() const;
  ::micromsg::SKBuiltinString_t* mutable_tousername();
  ::micromsg::SKBuiltinString_t* release_tousername();
  void set_allocated_tousername(::micromsg::SKBuiltinString_t* tousername);

  // required .micromsg.SKBuiltinBuffer_t Data = 8;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 8;
  const ::micromsg::SKBuiltinBuffer_t& data() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_data();
  ::micromsg::SKBuiltinBuffer_t* release_data();
  void set_allocated_data(::micromsg::SKBuiltinBuffer_t* data);

  // required uint32 TotalLen = 5;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 5;
  ::google::protobuf::uint32 totallen() const;
  void set_totallen(::google::protobuf::uint32 value);

  // required uint32 StartPos = 6;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 6;
  ::google::protobuf::uint32 startpos() const;
  void set_startpos(::google::protobuf::uint32 value);

  // required uint32 DataLen = 7;
  bool has_datalen() const;
  void clear_datalen();
  static const int kDataLenFieldNumber = 7;
  ::google::protobuf::uint32 datalen() const;
  void set_datalen(::google::protobuf::uint32 value);

  // optional uint32 MsgType = 9;
  bool has_msgtype() const;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 9;
  ::google::protobuf::uint32 msgtype() const;
  void set_msgtype(::google::protobuf::uint32 value);

  // optional uint32 CompressType = 11;
  bool has_compresstype() const;
  void clear_compresstype();
  static const int kCompressTypeFieldNumber = 11;
  ::google::protobuf::uint32 compresstype() const;
  void set_compresstype(::google::protobuf::uint32 value);

  // optional int32 NetType = 12;
  bool has_nettype() const;
  void clear_nettype();
  static const int kNetTypeFieldNumber = 12;
  ::google::protobuf::int32 nettype() const;
  void set_nettype(::google::protobuf::int32 value);

  // optional int32 PhotoFrom = 13;
  bool has_photofrom() const;
  void clear_photofrom();
  static const int kPhotoFromFieldNumber = 13;
  ::google::protobuf::int32 photofrom() const;
  void set_photofrom(::google::protobuf::int32 value);

  // optional int32 EncryVer = 18;
  bool has_encryver() const;
  void clear_encryver();
  static const int kEncryVerFieldNumber = 18;
  ::google::protobuf::int32 encryver() const;
  void set_encryver(::google::protobuf::int32 value);

  // optional int32 CDNBigImgSize = 19;
  bool has_cdnbigimgsize() const;
  void clear_cdnbigimgsize();
  static const int kCDNBigImgSizeFieldNumber = 19;
  ::google::protobuf::int32 cdnbigimgsize() const;
  void set_cdnbigimgsize(::google::protobuf::int32 value);

  // optional int32 CDNMidImgSize = 20;
  bool has_cdnmidimgsize() const;
  void clear_cdnmidimgsize();
  static const int kCDNMidImgSizeFieldNumber = 20;
  ::google::protobuf::int32 cdnmidimgsize() const;
  void set_cdnmidimgsize(::google::protobuf::int32 value);

  // optional int32 CDNThumbImgSize = 22;
  bool has_cdnthumbimgsize() const;
  void clear_cdnthumbimgsize();
  static const int kCDNThumbImgSizeFieldNumber = 22;
  ::google::protobuf::int32 cdnthumbimgsize() const;
  void set_cdnthumbimgsize(::google::protobuf::int32 value);

  // optional int32 CDNThumbImgHeight = 23;
  bool has_cdnthumbimgheight() const;
  void clear_cdnthumbimgheight();
  static const int kCDNThumbImgHeightFieldNumber = 23;
  ::google::protobuf::int32 cdnthumbimgheight() const;
  void set_cdnthumbimgheight(::google::protobuf::int32 value);

  // optional int32 CDNThumbImgWidth = 24;
  bool has_cdnthumbimgwidth() const;
  void clear_cdnthumbimgwidth();
  static const int kCDNThumbImgWidthFieldNumber = 24;
  ::google::protobuf::int32 cdnthumbimgwidth() const;
  void set_cdnthumbimgwidth(::google::protobuf::int32 value);

  // optional uint32 ReqTime = 26;
  bool has_reqtime() const;
  void clear_reqtime();
  static const int kReqTimeFieldNumber = 26;
  ::google::protobuf::uint32 reqtime() const;
  void set_reqtime(::google::protobuf::uint32 value);

  // optional uint32 CRC32 = 28;
  bool has_crc32() const;
  void clear_crc32();
  static const int kCRC32FieldNumber = 28;
  ::google::protobuf::uint32 crc32() const;
  void set_crc32(::google::protobuf::uint32 value);

  // optional uint32 MsgForwardType = 29;
  bool has_msgforwardtype() const;
  void clear_msgforwardtype();
  static const int kMsgForwardTypeFieldNumber = 29;
  ::google::protobuf::uint32 msgforwardtype() const;
  void set_msgforwardtype(::google::protobuf::uint32 value);

  // optional uint32 HitMd5 = 30;
  bool has_hitmd5() const;
  void clear_hitmd5();
  static const int kHitMd5FieldNumber = 30;
  ::google::protobuf::uint32 hitmd5() const;
  void set_hitmd5(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.UploadMsgImgRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_clientimgid();
  void clear_has_clientimgid();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_datalen();
  void clear_has_datalen();
  void set_has_data();
  void clear_has_data();
  void set_has_msgtype();
  void clear_has_msgtype();
  void set_has_msgsource();
  void clear_has_msgsource();
  void set_has_compresstype();
  void clear_has_compresstype();
  void set_has_nettype();
  void clear_has_nettype();
  void set_has_photofrom();
  void clear_has_photofrom();
  void set_has_mediaid();
  void clear_has_mediaid();
  void set_has_cdnbigimgurl();
  void clear_has_cdnbigimgurl();
  void set_has_cdnmidimgurl();
  void clear_has_cdnmidimgurl();
  void set_has_aeskey();
  void clear_has_aeskey();
  void set_has_encryver();
  void clear_has_encryver();
  void set_has_cdnbigimgsize();
  void clear_has_cdnbigimgsize();
  void set_has_cdnmidimgsize();
  void clear_has_cdnmidimgsize();
  void set_has_cdnthumbimgurl();
  void clear_has_cdnthumbimgurl();
  void set_has_cdnthumbimgsize();
  void clear_has_cdnthumbimgsize();
  void set_has_cdnthumbimgheight();
  void clear_has_cdnthumbimgheight();
  void set_has_cdnthumbimgwidth();
  void clear_has_cdnthumbimgwidth();
  void set_has_cdnthumbaeskey();
  void clear_has_cdnthumbaeskey();
  void set_has_reqtime();
  void clear_has_reqtime();
  void set_has_md5();
  void clear_has_md5();
  void set_has_crc32();
  void clear_has_crc32();
  void set_has_msgforwardtype();
  void clear_has_msgforwardtype();
  void set_has_hitmd5();
  void clear_has_hitmd5();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msgsource_;
  ::google::protobuf::internal::ArenaStringPtr mediaid_;
  ::google::protobuf::internal::ArenaStringPtr cdnbigimgurl_;
  ::google::protobuf::internal::ArenaStringPtr cdnmidimgurl_;
  ::google::protobuf::internal::ArenaStringPtr aeskey_;
  ::google::protobuf::internal::ArenaStringPtr cdnthumbimgurl_;
  ::google::protobuf::internal::ArenaStringPtr cdnthumbaeskey_;
  ::google::protobuf::internal::ArenaStringPtr md5_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::SKBuiltinString_t* clientimgid_;
  ::micromsg::SKBuiltinString_t* fromusername_;
  ::micromsg::SKBuiltinString_t* tousername_;
  ::micromsg::SKBuiltinBuffer_t* data_;
  ::google::protobuf::uint32 totallen_;
  ::google::protobuf::uint32 startpos_;
  ::google::protobuf::uint32 datalen_;
  ::google::protobuf::uint32 msgtype_;
  ::google::protobuf::uint32 compresstype_;
  ::google::protobuf::int32 nettype_;
  ::google::protobuf::int32 photofrom_;
  ::google::protobuf::int32 encryver_;
  ::google::protobuf::int32 cdnbigimgsize_;
  ::google::protobuf::int32 cdnmidimgsize_;
  ::google::protobuf::int32 cdnthumbimgsize_;
  ::google::protobuf::int32 cdnthumbimgheight_;
  ::google::protobuf::int32 cdnthumbimgwidth_;
  ::google::protobuf::uint32 reqtime_;
  ::google::protobuf::uint32 crc32_;
  ::google::protobuf::uint32 msgforwardtype_;
  ::google::protobuf::uint32 hitmd5_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UploadMsgImgResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UploadMsgImgResponse) */ {
 public:
  UploadMsgImgResponse();
  virtual ~UploadMsgImgResponse();

  UploadMsgImgResponse(const UploadMsgImgResponse& from);

  inline UploadMsgImgResponse& operator=(const UploadMsgImgResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadMsgImgResponse& default_instance();

  static inline const UploadMsgImgResponse* internal_default_instance() {
    return reinterpret_cast<const UploadMsgImgResponse*>(
               &_UploadMsgImgResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(UploadMsgImgResponse* other);

  // implements Message ----------------------------------------------

  inline UploadMsgImgResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadMsgImgResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadMsgImgResponse& from);
  void MergeFrom(const UploadMsgImgResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadMsgImgResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AESKey = 11;
  bool has_aeskey() const;
  void clear_aeskey();
  static const int kAESKeyFieldNumber = 11;
  const ::std::string& aeskey() const;
  void set_aeskey(const ::std::string& value);
  #if LANG_CXX11
  void set_aeskey(::std::string&& value);
  #endif
  void set_aeskey(const char* value);
  void set_aeskey(const char* value, size_t size);
  ::std::string* mutable_aeskey();
  ::std::string* release_aeskey();
  void set_allocated_aeskey(::std::string* aeskey);

  // optional string FileId = 12;
  bool has_fileid() const;
  void clear_fileid();
  static const int kFileIdFieldNumber = 12;
  const ::std::string& fileid() const;
  void set_fileid(const ::std::string& value);
  #if LANG_CXX11
  void set_fileid(::std::string&& value);
  #endif
  void set_fileid(const char* value);
  void set_fileid(const char* value, size_t size);
  ::std::string* mutable_fileid();
  ::std::string* release_fileid();
  void set_allocated_fileid(::std::string* fileid);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required .micromsg.SKBuiltinString_t ClientImgId = 3;
  bool has_clientimgid() const;
  void clear_clientimgid();
  static const int kClientImgIdFieldNumber = 3;
  const ::micromsg::SKBuiltinString_t& clientimgid() const;
  ::micromsg::SKBuiltinString_t* mutable_clientimgid();
  ::micromsg::SKBuiltinString_t* release_clientimgid();
  void set_allocated_clientimgid(::micromsg::SKBuiltinString_t* clientimgid);

  // required .micromsg.SKBuiltinString_t FromUserName = 4;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUserNameFieldNumber = 4;
  const ::micromsg::SKBuiltinString_t& fromusername() const;
  ::micromsg::SKBuiltinString_t* mutable_fromusername();
  ::micromsg::SKBuiltinString_t* release_fromusername();
  void set_allocated_fromusername(::micromsg::SKBuiltinString_t* fromusername);

  // required .micromsg.SKBuiltinString_t ToUserName = 5;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 5;
  const ::micromsg::SKBuiltinString_t& tousername() const;
  ::micromsg::SKBuiltinString_t* mutable_tousername();
  ::micromsg::SKBuiltinString_t* release_tousername();
  void set_allocated_tousername(::micromsg::SKBuiltinString_t* tousername);

  // required uint32 MsgId = 2;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 2;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // required uint32 TotalLen = 6;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 6;
  ::google::protobuf::uint32 totallen() const;
  void set_totallen(::google::protobuf::uint32 value);

  // required uint32 StartPos = 7;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 7;
  ::google::protobuf::uint32 startpos() const;
  void set_startpos(::google::protobuf::uint32 value);

  // required uint32 DataLen = 8;
  bool has_datalen() const;
  void clear_datalen();
  static const int kDataLenFieldNumber = 8;
  ::google::protobuf::uint32 datalen() const;
  void set_datalen(::google::protobuf::uint32 value);

  // optional uint64 NewMsgId = 10;
  bool has_newmsgid() const;
  void clear_newmsgid();
  static const int kNewMsgIdFieldNumber = 10;
  ::google::protobuf::uint64 newmsgid() const;
  void set_newmsgid(::google::protobuf::uint64 value);

  // required uint32 CreateTime = 9;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 9;
  ::google::protobuf::uint32 createtime() const;
  void set_createtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.UploadMsgImgResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_msgid();
  void clear_has_msgid();
  void set_has_clientimgid();
  void clear_has_clientimgid();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_datalen();
  void clear_has_datalen();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_newmsgid();
  void clear_has_newmsgid();
  void set_has_aeskey();
  void clear_has_aeskey();
  void set_has_fileid();
  void clear_has_fileid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr aeskey_;
  ::google::protobuf::internal::ArenaStringPtr fileid_;
  ::micromsg::BaseResponse* baseresponse_;
  ::micromsg::SKBuiltinString_t* clientimgid_;
  ::micromsg::SKBuiltinString_t* fromusername_;
  ::micromsg::SKBuiltinString_t* tousername_;
  ::google::protobuf::uint32 msgid_;
  ::google::protobuf::uint32 totallen_;
  ::google::protobuf::uint32 startpos_;
  ::google::protobuf::uint32 datalen_;
  ::google::protobuf::uint64 newmsgid_;
  ::google::protobuf::uint32 createtime_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CDNUploadMsgImgPrepareRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.CDNUploadMsgImgPrepareRequest) */ {
 public:
  CDNUploadMsgImgPrepareRequest();
  virtual ~CDNUploadMsgImgPrepareRequest();

  CDNUploadMsgImgPrepareRequest(const CDNUploadMsgImgPrepareRequest& from);

  inline CDNUploadMsgImgPrepareRequest& operator=(const CDNUploadMsgImgPrepareRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDNUploadMsgImgPrepareRequest& default_instance();

  static inline const CDNUploadMsgImgPrepareRequest* internal_default_instance() {
    return reinterpret_cast<const CDNUploadMsgImgPrepareRequest*>(
               &_CDNUploadMsgImgPrepareRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(CDNUploadMsgImgPrepareRequest* other);

  // implements Message ----------------------------------------------

  inline CDNUploadMsgImgPrepareRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CDNUploadMsgImgPrepareRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CDNUploadMsgImgPrepareRequest& from);
  void MergeFrom(const CDNUploadMsgImgPrepareRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CDNUploadMsgImgPrepareRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ClientImgId = 1;
  bool has_clientimgid() const;
  void clear_clientimgid();
  static const int kClientImgIdFieldNumber = 1;
  const ::std::string& clientimgid() const;
  void set_clientimgid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientimgid(::std::string&& value);
  #endif
  void set_clientimgid(const char* value);
  void set_clientimgid(const char* value, size_t size);
  ::std::string* mutable_clientimgid();
  ::std::string* release_clientimgid();
  void set_allocated_clientimgid(::std::string* clientimgid);

  // optional string FromUserName = 2;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUserNameFieldNumber = 2;
  const ::std::string& fromusername() const;
  void set_fromusername(const ::std::string& value);
  #if LANG_CXX11
  void set_fromusername(::std::string&& value);
  #endif
  void set_fromusername(const char* value);
  void set_fromusername(const char* value, size_t size);
  ::std::string* mutable_fromusername();
  ::std::string* release_fromusername();
  void set_allocated_fromusername(::std::string* fromusername);

  // optional string ToUserName = 3;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 3;
  const ::std::string& tousername() const;
  void set_tousername(const ::std::string& value);
  #if LANG_CXX11
  void set_tousername(::std::string&& value);
  #endif
  void set_tousername(const char* value);
  void set_tousername(const char* value, size_t size);
  ::std::string* mutable_tousername();
  ::std::string* release_tousername();
  void set_allocated_tousername(::std::string* tousername);

  // optional string MsgSource = 6;
  bool has_msgsource() const;
  void clear_msgsource();
  static const int kMsgSourceFieldNumber = 6;
  const ::std::string& msgsource() const;
  void set_msgsource(const ::std::string& value);
  #if LANG_CXX11
  void set_msgsource(::std::string&& value);
  #endif
  void set_msgsource(const char* value);
  void set_msgsource(const char* value, size_t size);
  ::std::string* mutable_msgsource();
  ::std::string* release_msgsource();
  void set_allocated_msgsource(::std::string* msgsource);

  // optional string AttachedContent = 11;
  bool has_attachedcontent() const;
  void clear_attachedcontent();
  static const int kAttachedContentFieldNumber = 11;
  const ::std::string& attachedcontent() const;
  void set_attachedcontent(const ::std::string& value);
  #if LANG_CXX11
  void set_attachedcontent(::std::string&& value);
  #endif
  void set_attachedcontent(const char* value);
  void set_attachedcontent(const char* value, size_t size);
  ::std::string* mutable_attachedcontent();
  ::std::string* release_attachedcontent();
  void set_allocated_attachedcontent(::std::string* attachedcontent);

  // optional string AESKey = 16;
  bool has_aeskey() const;
  void clear_aeskey();
  static const int kAESKeyFieldNumber = 16;
  const ::std::string& aeskey() const;
  void set_aeskey(const ::std::string& value);
  #if LANG_CXX11
  void set_aeskey(::std::string&& value);
  #endif
  void set_aeskey(const char* value);
  void set_aeskey(const char* value, size_t size);
  ::std::string* mutable_aeskey();
  ::std::string* release_aeskey();
  void set_allocated_aeskey(::std::string* aeskey);

  // optional .micromsg.SKBuiltinBuffer_t ClientStat = 7;
  bool has_clientstat() const;
  void clear_clientstat();
  static const int kClientStatFieldNumber = 7;
  const ::micromsg::SKBuiltinBuffer_t& clientstat() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_clientstat();
  ::micromsg::SKBuiltinBuffer_t* release_clientstat();
  void set_allocated_clientstat(::micromsg::SKBuiltinBuffer_t* clientstat);

  // required int32 ThumbHeight = 4;
  bool has_thumbheight() const;
  void clear_thumbheight();
  static const int kThumbHeightFieldNumber = 4;
  ::google::protobuf::int32 thumbheight() const;
  void set_thumbheight(::google::protobuf::int32 value);

  // required int32 ThumbWidth = 5;
  bool has_thumbwidth() const;
  void clear_thumbwidth();
  static const int kThumbWidthFieldNumber = 5;
  ::google::protobuf::int32 thumbwidth() const;
  void set_thumbwidth(::google::protobuf::int32 value);

  // optional int32 Scene = 8;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 8;
  ::google::protobuf::int32 scene() const;
  void set_scene(::google::protobuf::int32 value);

  // optional float Longitude = 9;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 9;
  float longitude() const;
  void set_longitude(float value);

  // optional float Latitude = 10;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 10;
  float latitude() const;
  void set_latitude(float value);

  // optional int32 MidHeight = 12;
  bool has_midheight() const;
  void clear_midheight();
  static const int kMidHeightFieldNumber = 12;
  ::google::protobuf::int32 midheight() const;
  void set_midheight(::google::protobuf::int32 value);

  // optional int32 MidWidth = 13;
  bool has_midwidth() const;
  void clear_midwidth();
  static const int kMidWidthFieldNumber = 13;
  ::google::protobuf::int32 midwidth() const;
  void set_midwidth(::google::protobuf::int32 value);

  // optional int32 HDHeight = 14;
  bool has_hdheight() const;
  void clear_hdheight();
  static const int kHDHeightFieldNumber = 14;
  ::google::protobuf::int32 hdheight() const;
  void set_hdheight(::google::protobuf::int32 value);

  // optional int32 HDWidth = 15;
  bool has_hdwidth() const;
  void clear_hdwidth();
  static const int kHDWidthFieldNumber = 15;
  ::google::protobuf::int32 hdwidth() const;
  void set_hdwidth(::google::protobuf::int32 value);

  // optional int32 EncryVer = 17;
  bool has_encryver() const;
  void clear_encryver();
  static const int kEncryVerFieldNumber = 17;
  ::google::protobuf::int32 encryver() const;
  void set_encryver(::google::protobuf::int32 value);

  // optional uint32 CRC32 = 18;
  bool has_crc32() const;
  void clear_crc32();
  static const int kCRC32FieldNumber = 18;
  ::google::protobuf::uint32 crc32() const;
  void set_crc32(::google::protobuf::uint32 value);

  // optional uint32 MsgForwardType = 19;
  bool has_msgforwardtype() const;
  void clear_msgforwardtype();
  static const int kMsgForwardTypeFieldNumber = 19;
  ::google::protobuf::uint32 msgforwardtype() const;
  void set_msgforwardtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.CDNUploadMsgImgPrepareRequest)
 private:
  void set_has_clientimgid();
  void clear_has_clientimgid();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_thumbheight();
  void clear_has_thumbheight();
  void set_has_thumbwidth();
  void clear_has_thumbwidth();
  void set_has_msgsource();
  void clear_has_msgsource();
  void set_has_clientstat();
  void clear_has_clientstat();
  void set_has_scene();
  void clear_has_scene();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_attachedcontent();
  void clear_has_attachedcontent();
  void set_has_midheight();
  void clear_has_midheight();
  void set_has_midwidth();
  void clear_has_midwidth();
  void set_has_hdheight();
  void clear_has_hdheight();
  void set_has_hdwidth();
  void clear_has_hdwidth();
  void set_has_aeskey();
  void clear_has_aeskey();
  void set_has_encryver();
  void clear_has_encryver();
  void set_has_crc32();
  void clear_has_crc32();
  void set_has_msgforwardtype();
  void clear_has_msgforwardtype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientimgid_;
  ::google::protobuf::internal::ArenaStringPtr fromusername_;
  ::google::protobuf::internal::ArenaStringPtr tousername_;
  ::google::protobuf::internal::ArenaStringPtr msgsource_;
  ::google::protobuf::internal::ArenaStringPtr attachedcontent_;
  ::google::protobuf::internal::ArenaStringPtr aeskey_;
  ::micromsg::SKBuiltinBuffer_t* clientstat_;
  ::google::protobuf::int32 thumbheight_;
  ::google::protobuf::int32 thumbwidth_;
  ::google::protobuf::int32 scene_;
  float longitude_;
  float latitude_;
  ::google::protobuf::int32 midheight_;
  ::google::protobuf::int32 midwidth_;
  ::google::protobuf::int32 hdheight_;
  ::google::protobuf::int32 hdwidth_;
  ::google::protobuf::int32 encryver_;
  ::google::protobuf::uint32 crc32_;
  ::google::protobuf::uint32 msgforwardtype_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CDNUploadMsgImgPrepareResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.CDNUploadMsgImgPrepareResponse) */ {
 public:
  CDNUploadMsgImgPrepareResponse();
  virtual ~CDNUploadMsgImgPrepareResponse();

  CDNUploadMsgImgPrepareResponse(const CDNUploadMsgImgPrepareResponse& from);

  inline CDNUploadMsgImgPrepareResponse& operator=(const CDNUploadMsgImgPrepareResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDNUploadMsgImgPrepareResponse& default_instance();

  static inline const CDNUploadMsgImgPrepareResponse* internal_default_instance() {
    return reinterpret_cast<const CDNUploadMsgImgPrepareResponse*>(
               &_CDNUploadMsgImgPrepareResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(CDNUploadMsgImgPrepareResponse* other);

  // implements Message ----------------------------------------------

  inline CDNUploadMsgImgPrepareResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CDNUploadMsgImgPrepareResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CDNUploadMsgImgPrepareResponse& from);
  void MergeFrom(const CDNUploadMsgImgPrepareResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CDNUploadMsgImgPrepareResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ClientImgId = 3;
  bool has_clientimgid() const;
  void clear_clientimgid();
  static const int kClientImgIdFieldNumber = 3;
  const ::std::string& clientimgid() const;
  void set_clientimgid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientimgid(::std::string&& value);
  #endif
  void set_clientimgid(const char* value);
  void set_clientimgid(const char* value, size_t size);
  ::std::string* mutable_clientimgid();
  ::std::string* release_clientimgid();
  void set_allocated_clientimgid(::std::string* clientimgid);

  // optional string FromUserName = 4;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUserNameFieldNumber = 4;
  const ::std::string& fromusername() const;
  void set_fromusername(const ::std::string& value);
  #if LANG_CXX11
  void set_fromusername(::std::string&& value);
  #endif
  void set_fromusername(const char* value);
  void set_fromusername(const char* value, size_t size);
  ::std::string* mutable_fromusername();
  ::std::string* release_fromusername();
  void set_allocated_fromusername(::std::string* fromusername);

  // optional string ToUserName = 5;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 5;
  const ::std::string& tousername() const;
  void set_tousername(const ::std::string& value);
  #if LANG_CXX11
  void set_tousername(::std::string&& value);
  #endif
  void set_tousername(const char* value);
  void set_tousername(const char* value, size_t size);
  ::std::string* mutable_tousername();
  ::std::string* release_tousername();
  void set_allocated_tousername(::std::string* tousername);

  // optional string AESKey = 11;
  bool has_aeskey() const;
  void clear_aeskey();
  static const int kAESKeyFieldNumber = 11;
  const ::std::string& aeskey() const;
  void set_aeskey(const ::std::string& value);
  #if LANG_CXX11
  void set_aeskey(::std::string&& value);
  #endif
  void set_aeskey(const char* value);
  void set_aeskey(const char* value, size_t size);
  ::std::string* mutable_aeskey();
  ::std::string* release_aeskey();
  void set_allocated_aeskey(::std::string* aeskey);

  // optional string FileId = 12;
  bool has_fileid() const;
  void clear_fileid();
  static const int kFileIdFieldNumber = 12;
  const ::std::string& fileid() const;
  void set_fileid(const ::std::string& value);
  #if LANG_CXX11
  void set_fileid(::std::string&& value);
  #endif
  void set_fileid(const char* value);
  void set_fileid(const char* value, size_t size);
  ::std::string* mutable_fileid();
  ::std::string* release_fileid();
  void set_allocated_fileid(::std::string* fileid);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 CreateTime = 9;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 9;
  ::google::protobuf::uint32 createtime() const;
  void set_createtime(::google::protobuf::uint32 value);

  // optional uint64 NewMsgId = 10;
  bool has_newmsgid() const;
  void clear_newmsgid();
  static const int kNewMsgIdFieldNumber = 10;
  ::google::protobuf::uint64 newmsgid() const;
  void set_newmsgid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:micromsg.CDNUploadMsgImgPrepareResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_clientimgid();
  void clear_has_clientimgid();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_newmsgid();
  void clear_has_newmsgid();
  void set_has_aeskey();
  void clear_has_aeskey();
  void set_has_fileid();
  void clear_has_fileid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientimgid_;
  ::google::protobuf::internal::ArenaStringPtr fromusername_;
  ::google::protobuf::internal::ArenaStringPtr tousername_;
  ::google::protobuf::internal::ArenaStringPtr aeskey_;
  ::google::protobuf::internal::ArenaStringPtr fileid_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 createtime_;
  ::google::protobuf::uint64 newmsgid_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CDNUploadMsgImgCommitRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.CDNUploadMsgImgCommitRequest) */ {
 public:
  CDNUploadMsgImgCommitRequest();
  virtual ~CDNUploadMsgImgCommitRequest();

  CDNUploadMsgImgCommitRequest(const CDNUploadMsgImgCommitRequest& from);

  inline CDNUploadMsgImgCommitRequest& operator=(const CDNUploadMsgImgCommitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDNUploadMsgImgCommitRequest& default_instance();

  static inline const CDNUploadMsgImgCommitRequest* internal_default_instance() {
    return reinterpret_cast<const CDNUploadMsgImgCommitRequest*>(
               &_CDNUploadMsgImgCommitRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(CDNUploadMsgImgCommitRequest* other);

  // implements Message ----------------------------------------------

  inline CDNUploadMsgImgCommitRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CDNUploadMsgImgCommitRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CDNUploadMsgImgCommitRequest& from);
  void MergeFrom(const CDNUploadMsgImgCommitRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CDNUploadMsgImgCommitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Ticket = 1;
  bool has_ticket() const;
  void clear_ticket();
  static const int kTicketFieldNumber = 1;
  const ::std::string& ticket() const;
  void set_ticket(const ::std::string& value);
  #if LANG_CXX11
  void set_ticket(::std::string&& value);
  #endif
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  ::std::string* mutable_ticket();
  ::std::string* release_ticket();
  void set_allocated_ticket(::std::string* ticket);

  // optional string ImgUrl = 2;
  bool has_imgurl() const;
  void clear_imgurl();
  static const int kImgUrlFieldNumber = 2;
  const ::std::string& imgurl() const;
  void set_imgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_imgurl(::std::string&& value);
  #endif
  void set_imgurl(const char* value);
  void set_imgurl(const char* value, size_t size);
  ::std::string* mutable_imgurl();
  ::std::string* release_imgurl();
  void set_allocated_imgurl(::std::string* imgurl);

  // optional string AESKey = 3;
  bool has_aeskey() const;
  void clear_aeskey();
  static const int kAESKeyFieldNumber = 3;
  const ::std::string& aeskey() const;
  void set_aeskey(const ::std::string& value);
  #if LANG_CXX11
  void set_aeskey(::std::string&& value);
  #endif
  void set_aeskey(const char* value);
  void set_aeskey(const char* value, size_t size);
  ::std::string* mutable_aeskey();
  ::std::string* release_aeskey();
  void set_allocated_aeskey(::std::string* aeskey);

  // optional string Md5Sum = 10;
  bool has_md5sum() const;
  void clear_md5sum();
  static const int kMd5SumFieldNumber = 10;
  const ::std::string& md5sum() const;
  void set_md5sum(const ::std::string& value);
  #if LANG_CXX11
  void set_md5sum(::std::string&& value);
  #endif
  void set_md5sum(const char* value);
  void set_md5sum(const char* value, size_t size);
  ::std::string* mutable_md5sum();
  ::std::string* release_md5sum();
  void set_allocated_md5sum(::std::string* md5sum);

  // optional string FileInfo = 13;
  bool has_fileinfo() const;
  void clear_fileinfo();
  static const int kFileInfoFieldNumber = 13;
  const ::std::string& fileinfo() const;
  void set_fileinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_fileinfo(::std::string&& value);
  #endif
  void set_fileinfo(const char* value);
  void set_fileinfo(const char* value, size_t size);
  ::std::string* mutable_fileinfo();
  ::std::string* release_fileinfo();
  void set_allocated_fileinfo(::std::string* fileinfo);

  // required int32 EncryVer = 4;
  bool has_encryver() const;
  void clear_encryver();
  static const int kEncryVerFieldNumber = 4;
  ::google::protobuf::int32 encryver() const;
  void set_encryver(::google::protobuf::int32 value);

  // required int32 MidSize = 5;
  bool has_midsize() const;
  void clear_midsize();
  static const int kMidSizeFieldNumber = 5;
  ::google::protobuf::int32 midsize() const;
  void set_midsize(::google::protobuf::int32 value);

  // required int32 ThumbSize = 6;
  bool has_thumbsize() const;
  void clear_thumbsize();
  static const int kThumbSizeFieldNumber = 6;
  ::google::protobuf::int32 thumbsize() const;
  void set_thumbsize(::google::protobuf::int32 value);

  // optional int32 BigSize = 9;
  bool has_bigsize() const;
  void clear_bigsize();
  static const int kBigSizeFieldNumber = 9;
  ::google::protobuf::int32 bigsize() const;
  void set_bigsize(::google::protobuf::int32 value);

  // optional int32 SafeProto = 11;
  bool has_safeproto() const;
  void clear_safeproto();
  static const int kSafeProtoFieldNumber = 11;
  ::google::protobuf::int32 safeproto() const;
  void set_safeproto(::google::protobuf::int32 value);

  // optional int32 Hit = 12;
  bool has_hit() const;
  void clear_hit();
  static const int kHitFieldNumber = 12;
  ::google::protobuf::int32 hit() const;
  void set_hit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.CDNUploadMsgImgCommitRequest)
 private:
  void set_has_ticket();
  void clear_has_ticket();
  void set_has_imgurl();
  void clear_has_imgurl();
  void set_has_aeskey();
  void clear_has_aeskey();
  void set_has_encryver();
  void clear_has_encryver();
  void set_has_midsize();
  void clear_has_midsize();
  void set_has_thumbsize();
  void clear_has_thumbsize();
  void set_has_bigsize();
  void clear_has_bigsize();
  void set_has_md5sum();
  void clear_has_md5sum();
  void set_has_safeproto();
  void clear_has_safeproto();
  void set_has_hit();
  void clear_has_hit();
  void set_has_fileinfo();
  void clear_has_fileinfo();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ticket_;
  ::google::protobuf::internal::ArenaStringPtr imgurl_;
  ::google::protobuf::internal::ArenaStringPtr aeskey_;
  ::google::protobuf::internal::ArenaStringPtr md5sum_;
  ::google::protobuf::internal::ArenaStringPtr fileinfo_;
  ::google::protobuf::int32 encryver_;
  ::google::protobuf::int32 midsize_;
  ::google::protobuf::int32 thumbsize_;
  ::google::protobuf::int32 bigsize_;
  ::google::protobuf::int32 safeproto_;
  ::google::protobuf::int32 hit_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CDNUploadMsgImgCommitResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.CDNUploadMsgImgCommitResponse) */ {
 public:
  CDNUploadMsgImgCommitResponse();
  virtual ~CDNUploadMsgImgCommitResponse();

  CDNUploadMsgImgCommitResponse(const CDNUploadMsgImgCommitResponse& from);

  inline CDNUploadMsgImgCommitResponse& operator=(const CDNUploadMsgImgCommitResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDNUploadMsgImgCommitResponse& default_instance();

  static inline const CDNUploadMsgImgCommitResponse* internal_default_instance() {
    return reinterpret_cast<const CDNUploadMsgImgCommitResponse*>(
               &_CDNUploadMsgImgCommitResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(CDNUploadMsgImgCommitResponse* other);

  // implements Message ----------------------------------------------

  inline CDNUploadMsgImgCommitResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CDNUploadMsgImgCommitResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CDNUploadMsgImgCommitResponse& from);
  void MergeFrom(const CDNUploadMsgImgCommitResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CDNUploadMsgImgCommitResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.CDNUploadMsgImgCommitResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UploadWeiboImgRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UploadWeiboImgRequest) */ {
 public:
  UploadWeiboImgRequest();
  virtual ~UploadWeiboImgRequest();

  UploadWeiboImgRequest(const UploadWeiboImgRequest& from);

  inline UploadWeiboImgRequest& operator=(const UploadWeiboImgRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadWeiboImgRequest& default_instance();

  static inline const UploadWeiboImgRequest* internal_default_instance() {
    return reinterpret_cast<const UploadWeiboImgRequest*>(
               &_UploadWeiboImgRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(UploadWeiboImgRequest* other);

  // implements Message ----------------------------------------------

  inline UploadWeiboImgRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadWeiboImgRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadWeiboImgRequest& from);
  void MergeFrom(const UploadWeiboImgRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadWeiboImgRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ClientImgId = 2;
  bool has_clientimgid() const;
  void clear_clientimgid();
  static const int kClientImgIdFieldNumber = 2;
  const ::std::string& clientimgid() const;
  void set_clientimgid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientimgid(::std::string&& value);
  #endif
  void set_clientimgid(const char* value);
  void set_clientimgid(const char* value, size_t size);
  ::std::string* mutable_clientimgid();
  ::std::string* release_clientimgid();
  void set_allocated_clientimgid(::std::string* clientimgid);

  // optional bytes Data = 6;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional string Content = 7;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 7;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 TotalLen = 3;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 3;
  ::google::protobuf::uint32 totallen() const;
  void set_totallen(::google::protobuf::uint32 value);

  // required uint32 StartPos = 4;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 4;
  ::google::protobuf::uint32 startpos() const;
  void set_startpos(::google::protobuf::uint32 value);

  // required uint32 DataLen = 5;
  bool has_datalen() const;
  void clear_datalen();
  static const int kDataLenFieldNumber = 5;
  ::google::protobuf::uint32 datalen() const;
  void set_datalen(::google::protobuf::uint32 value);

  // required uint32 FilterType = 8;
  bool has_filtertype() const;
  void clear_filtertype();
  static const int kFilterTypeFieldNumber = 8;
  ::google::protobuf::uint32 filtertype() const;
  void set_filtertype(::google::protobuf::uint32 value);

  // optional uint32 Flag = 9;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 9;
  ::google::protobuf::uint32 flag() const;
  void set_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.UploadWeiboImgRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_clientimgid();
  void clear_has_clientimgid();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_datalen();
  void clear_has_datalen();
  void set_has_data();
  void clear_has_data();
  void set_has_content();
  void clear_has_content();
  void set_has_filtertype();
  void clear_has_filtertype();
  void set_has_flag();
  void clear_has_flag();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientimgid_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 totallen_;
  ::google::protobuf::uint32 startpos_;
  ::google::protobuf::uint32 datalen_;
  ::google::protobuf::uint32 filtertype_;
  ::google::protobuf::uint32 flag_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UploadWeiboImgResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UploadWeiboImgResponse) */ {
 public:
  UploadWeiboImgResponse();
  virtual ~UploadWeiboImgResponse();

  UploadWeiboImgResponse(const UploadWeiboImgResponse& from);

  inline UploadWeiboImgResponse& operator=(const UploadWeiboImgResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadWeiboImgResponse& default_instance();

  static inline const UploadWeiboImgResponse* internal_default_instance() {
    return reinterpret_cast<const UploadWeiboImgResponse*>(
               &_UploadWeiboImgResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(UploadWeiboImgResponse* other);

  // implements Message ----------------------------------------------

  inline UploadWeiboImgResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadWeiboImgResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadWeiboImgResponse& from);
  void MergeFrom(const UploadWeiboImgResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadWeiboImgResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ClientImgId = 2;
  bool has_clientimgid() const;
  void clear_clientimgid();
  static const int kClientImgIdFieldNumber = 2;
  const ::std::string& clientimgid() const;
  void set_clientimgid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientimgid(::std::string&& value);
  #endif
  void set_clientimgid(const char* value);
  void set_clientimgid(const char* value, size_t size);
  ::std::string* mutable_clientimgid();
  ::std::string* release_clientimgid();
  void set_allocated_clientimgid(::std::string* clientimgid);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 TotalLen = 3;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 3;
  ::google::protobuf::uint32 totallen() const;
  void set_totallen(::google::protobuf::uint32 value);

  // required uint32 StartPos = 4;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 4;
  ::google::protobuf::uint32 startpos() const;
  void set_startpos(::google::protobuf::uint32 value);

  // required uint32 DataLen = 5;
  bool has_datalen() const;
  void clear_datalen();
  static const int kDataLenFieldNumber = 5;
  ::google::protobuf::uint32 datalen() const;
  void set_datalen(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.UploadWeiboImgResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_clientimgid();
  void clear_has_clientimgid();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_datalen();
  void clear_has_datalen();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientimgid_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 totallen_;
  ::google::protobuf::uint32 startpos_;
  ::google::protobuf::uint32 datalen_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UploadToWeiboRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UploadToWeiboRequest) */ {
 public:
  UploadToWeiboRequest();
  virtual ~UploadToWeiboRequest();

  UploadToWeiboRequest(const UploadToWeiboRequest& from);

  inline UploadToWeiboRequest& operator=(const UploadToWeiboRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadToWeiboRequest& default_instance();

  static inline const UploadToWeiboRequest* internal_default_instance() {
    return reinterpret_cast<const UploadToWeiboRequest*>(
               &_UploadToWeiboRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(UploadToWeiboRequest* other);

  // implements Message ----------------------------------------------

  inline UploadToWeiboRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadToWeiboRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadToWeiboRequest& from);
  void MergeFrom(const UploadToWeiboRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadToWeiboRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ClientMsgId = 2;
  bool has_clientmsgid() const;
  void clear_clientmsgid();
  static const int kClientMsgIdFieldNumber = 2;
  const ::std::string& clientmsgid() const;
  void set_clientmsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientmsgid(::std::string&& value);
  #endif
  void set_clientmsgid(const char* value);
  void set_clientmsgid(const char* value, size_t size);
  ::std::string* mutable_clientmsgid();
  ::std::string* release_clientmsgid();
  void set_allocated_clientmsgid(::std::string* clientmsgid);

  // optional bytes Data = 7;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 7;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional string Content = 8;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 8;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 Type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // required uint32 TotalLen = 4;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 4;
  ::google::protobuf::uint32 totallen() const;
  void set_totallen(::google::protobuf::uint32 value);

  // required uint32 StartPos = 5;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 5;
  ::google::protobuf::uint32 startpos() const;
  void set_startpos(::google::protobuf::uint32 value);

  // required uint32 DataLen = 6;
  bool has_datalen() const;
  void clear_datalen();
  static const int kDataLenFieldNumber = 6;
  ::google::protobuf::uint32 datalen() const;
  void set_datalen(::google::protobuf::uint32 value);

  // required uint32 FilterType = 9;
  bool has_filtertype() const;
  void clear_filtertype();
  static const int kFilterTypeFieldNumber = 9;
  ::google::protobuf::uint32 filtertype() const;
  void set_filtertype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.UploadToWeiboRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_clientmsgid();
  void clear_has_clientmsgid();
  void set_has_type();
  void clear_has_type();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_datalen();
  void clear_has_datalen();
  void set_has_data();
  void clear_has_data();
  void set_has_content();
  void clear_has_content();
  void set_has_filtertype();
  void clear_has_filtertype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientmsgid_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 totallen_;
  ::google::protobuf::uint32 startpos_;
  ::google::protobuf::uint32 datalen_;
  ::google::protobuf::uint32 filtertype_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UploadToWeiboResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UploadToWeiboResponse) */ {
 public:
  UploadToWeiboResponse();
  virtual ~UploadToWeiboResponse();

  UploadToWeiboResponse(const UploadToWeiboResponse& from);

  inline UploadToWeiboResponse& operator=(const UploadToWeiboResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadToWeiboResponse& default_instance();

  static inline const UploadToWeiboResponse* internal_default_instance() {
    return reinterpret_cast<const UploadToWeiboResponse*>(
               &_UploadToWeiboResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(UploadToWeiboResponse* other);

  // implements Message ----------------------------------------------

  inline UploadToWeiboResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadToWeiboResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadToWeiboResponse& from);
  void MergeFrom(const UploadToWeiboResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadToWeiboResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ClientMsgId = 2;
  bool has_clientmsgid() const;
  void clear_clientmsgid();
  static const int kClientMsgIdFieldNumber = 2;
  const ::std::string& clientmsgid() const;
  void set_clientmsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientmsgid(::std::string&& value);
  #endif
  void set_clientmsgid(const char* value);
  void set_clientmsgid(const char* value, size_t size);
  ::std::string* mutable_clientmsgid();
  ::std::string* release_clientmsgid();
  void set_allocated_clientmsgid(::std::string* clientmsgid);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 Type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // required uint32 TotalLen = 4;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 4;
  ::google::protobuf::uint32 totallen() const;
  void set_totallen(::google::protobuf::uint32 value);

  // required uint32 StartPos = 5;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 5;
  ::google::protobuf::uint32 startpos() const;
  void set_startpos(::google::protobuf::uint32 value);

  // required uint32 DataLen = 6;
  bool has_datalen() const;
  void clear_datalen();
  static const int kDataLenFieldNumber = 6;
  ::google::protobuf::uint32 datalen() const;
  void set_datalen(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.UploadToWeiboResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_clientmsgid();
  void clear_has_clientmsgid();
  void set_has_type();
  void clear_has_type();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_datalen();
  void clear_has_datalen();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientmsgid_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 totallen_;
  ::google::protobuf::uint32 startpos_;
  ::google::protobuf::uint32 datalen_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMsgImgRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetMsgImgRequest) */ {
 public:
  GetMsgImgRequest();
  virtual ~GetMsgImgRequest();

  GetMsgImgRequest(const GetMsgImgRequest& from);

  inline GetMsgImgRequest& operator=(const GetMsgImgRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMsgImgRequest& default_instance();

  static inline const GetMsgImgRequest* internal_default_instance() {
    return reinterpret_cast<const GetMsgImgRequest*>(
               &_GetMsgImgRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(GetMsgImgRequest* other);

  // implements Message ----------------------------------------------

  inline GetMsgImgRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMsgImgRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMsgImgRequest& from);
  void MergeFrom(const GetMsgImgRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMsgImgRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required .micromsg.SKBuiltinString_t FromUserName = 3;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUserNameFieldNumber = 3;
  const ::micromsg::SKBuiltinString_t& fromusername() const;
  ::micromsg::SKBuiltinString_t* mutable_fromusername();
  ::micromsg::SKBuiltinString_t* release_fromusername();
  void set_allocated_fromusername(::micromsg::SKBuiltinString_t* fromusername);

  // required .micromsg.SKBuiltinString_t ToUserName = 4;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 4;
  const ::micromsg::SKBuiltinString_t& tousername() const;
  ::micromsg::SKBuiltinString_t* mutable_tousername();
  ::micromsg::SKBuiltinString_t* release_tousername();
  void set_allocated_tousername(::micromsg::SKBuiltinString_t* tousername);

  // required uint32 MsgId = 2;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 2;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // required uint32 TotalLen = 5;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 5;
  ::google::protobuf::uint32 totallen() const;
  void set_totallen(::google::protobuf::uint32 value);

  // required uint32 StartPos = 6;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 6;
  ::google::protobuf::uint32 startpos() const;
  void set_startpos(::google::protobuf::uint32 value);

  // required uint32 DataLen = 7;
  bool has_datalen() const;
  void clear_datalen();
  static const int kDataLenFieldNumber = 7;
  ::google::protobuf::uint32 datalen() const;
  void set_datalen(::google::protobuf::uint32 value);

  // optional uint64 NewMsgId = 9;
  bool has_newmsgid() const;
  void clear_newmsgid();
  static const int kNewMsgIdFieldNumber = 9;
  ::google::protobuf::uint64 newmsgid() const;
  void set_newmsgid(::google::protobuf::uint64 value);

  // optional uint32 CompressType = 8;
  bool has_compresstype() const;
  void clear_compresstype();
  static const int kCompressTypeFieldNumber = 8;
  ::google::protobuf::uint32 compresstype() const;
  void set_compresstype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetMsgImgRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_msgid();
  void clear_has_msgid();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_datalen();
  void clear_has_datalen();
  void set_has_compresstype();
  void clear_has_compresstype();
  void set_has_newmsgid();
  void clear_has_newmsgid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::SKBuiltinString_t* fromusername_;
  ::micromsg::SKBuiltinString_t* tousername_;
  ::google::protobuf::uint32 msgid_;
  ::google::protobuf::uint32 totallen_;
  ::google::protobuf::uint32 startpos_;
  ::google::protobuf::uint32 datalen_;
  ::google::protobuf::uint64 newmsgid_;
  ::google::protobuf::uint32 compresstype_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMsgImgResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetMsgImgResponse) */ {
 public:
  GetMsgImgResponse();
  virtual ~GetMsgImgResponse();

  GetMsgImgResponse(const GetMsgImgResponse& from);

  inline GetMsgImgResponse& operator=(const GetMsgImgResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMsgImgResponse& default_instance();

  static inline const GetMsgImgResponse* internal_default_instance() {
    return reinterpret_cast<const GetMsgImgResponse*>(
               &_GetMsgImgResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(GetMsgImgResponse* other);

  // implements Message ----------------------------------------------

  inline GetMsgImgResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMsgImgResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMsgImgResponse& from);
  void MergeFrom(const GetMsgImgResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMsgImgResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required .micromsg.SKBuiltinString_t FromUserName = 3;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUserNameFieldNumber = 3;
  const ::micromsg::SKBuiltinString_t& fromusername() const;
  ::micromsg::SKBuiltinString_t* mutable_fromusername();
  ::micromsg::SKBuiltinString_t* release_fromusername();
  void set_allocated_fromusername(::micromsg::SKBuiltinString_t* fromusername);

  // required .micromsg.SKBuiltinString_t ToUserName = 4;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 4;
  const ::micromsg::SKBuiltinString_t& tousername() const;
  ::micromsg::SKBuiltinString_t* mutable_tousername();
  ::micromsg::SKBuiltinString_t* release_tousername();
  void set_allocated_tousername(::micromsg::SKBuiltinString_t* tousername);

  // required .micromsg.SKBuiltinBuffer_t Data = 8;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 8;
  const ::micromsg::SKBuiltinBuffer_t& data() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_data();
  ::micromsg::SKBuiltinBuffer_t* release_data();
  void set_allocated_data(::micromsg::SKBuiltinBuffer_t* data);

  // required uint32 MsgId = 2;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 2;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // required uint32 TotalLen = 5;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 5;
  ::google::protobuf::uint32 totallen() const;
  void set_totallen(::google::protobuf::uint32 value);

  // required uint32 StartPos = 6;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 6;
  ::google::protobuf::uint32 startpos() const;
  void set_startpos(::google::protobuf::uint32 value);

  // required uint32 DataLen = 7;
  bool has_datalen() const;
  void clear_datalen();
  static const int kDataLenFieldNumber = 7;
  ::google::protobuf::uint32 datalen() const;
  void set_datalen(::google::protobuf::uint32 value);

  // optional uint64 NewMsgId = 9;
  bool has_newmsgid() const;
  void clear_newmsgid();
  static const int kNewMsgIdFieldNumber = 9;
  ::google::protobuf::uint64 newmsgid() const;
  void set_newmsgid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetMsgImgResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_msgid();
  void clear_has_msgid();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_datalen();
  void clear_has_datalen();
  void set_has_data();
  void clear_has_data();
  void set_has_newmsgid();
  void clear_has_newmsgid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  ::micromsg::SKBuiltinString_t* fromusername_;
  ::micromsg::SKBuiltinString_t* tousername_;
  ::micromsg::SKBuiltinBuffer_t* data_;
  ::google::protobuf::uint32 msgid_;
  ::google::protobuf::uint32 totallen_;
  ::google::protobuf::uint32 startpos_;
  ::google::protobuf::uint32 datalen_;
  ::google::protobuf::uint64 newmsgid_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UploadVideoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UploadVideoRequest) */ {
 public:
  UploadVideoRequest();
  virtual ~UploadVideoRequest();

  UploadVideoRequest(const UploadVideoRequest& from);

  inline UploadVideoRequest& operator=(const UploadVideoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadVideoRequest& default_instance();

  static inline const UploadVideoRequest* internal_default_instance() {
    return reinterpret_cast<const UploadVideoRequest*>(
               &_UploadVideoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(UploadVideoRequest* other);

  // implements Message ----------------------------------------------

  inline UploadVideoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadVideoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadVideoRequest& from);
  void MergeFrom(const UploadVideoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadVideoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ClientMsgId = 2;
  bool has_clientmsgid() const;
  void clear_clientmsgid();
  static const int kClientMsgIdFieldNumber = 2;
  const ::std::string& clientmsgid() const;
  void set_clientmsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientmsgid(::std::string&& value);
  #endif
  void set_clientmsgid(const char* value);
  void set_clientmsgid(const char* value, size_t size);
  ::std::string* mutable_clientmsgid();
  ::std::string* release_clientmsgid();
  void set_allocated_clientmsgid(::std::string* clientmsgid);

  // optional string FromUserName = 3;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUserNameFieldNumber = 3;
  const ::std::string& fromusername() const;
  void set_fromusername(const ::std::string& value);
  #if LANG_CXX11
  void set_fromusername(::std::string&& value);
  #endif
  void set_fromusername(const char* value);
  void set_fromusername(const char* value, size_t size);
  ::std::string* mutable_fromusername();
  ::std::string* release_fromusername();
  void set_allocated_fromusername(::std::string* fromusername);

  // optional string ToUserName = 4;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 4;
  const ::std::string& tousername() const;
  void set_tousername(const ::std::string& value);
  #if LANG_CXX11
  void set_tousername(::std::string&& value);
  #endif
  void set_tousername(const char* value);
  void set_tousername(const char* value, size_t size);
  ::std::string* mutable_tousername();
  ::std::string* release_tousername();
  void set_allocated_tousername(::std::string* tousername);

  // optional string MsgSource = 15;
  bool has_msgsource() const;
  void clear_msgsource();
  static const int kMsgSourceFieldNumber = 15;
  const ::std::string& msgsource() const;
  void set_msgsource(const ::std::string& value);
  #if LANG_CXX11
  void set_msgsource(::std::string&& value);
  #endif
  void set_msgsource(const char* value);
  void set_msgsource(const char* value, size_t size);
  ::std::string* mutable_msgsource();
  ::std::string* release_msgsource();
  void set_allocated_msgsource(::std::string* msgsource);

  // optional string CDNVideoUrl = 16;
  bool has_cdnvideourl() const;
  void clear_cdnvideourl();
  static const int kCDNVideoUrlFieldNumber = 16;
  const ::std::string& cdnvideourl() const;
  void set_cdnvideourl(const ::std::string& value);
  #if LANG_CXX11
  void set_cdnvideourl(::std::string&& value);
  #endif
  void set_cdnvideourl(const char* value);
  void set_cdnvideourl(const char* value, size_t size);
  ::std::string* mutable_cdnvideourl();
  ::std::string* release_cdnvideourl();
  void set_allocated_cdnvideourl(::std::string* cdnvideourl);

  // optional string AESKey = 17;
  bool has_aeskey() const;
  void clear_aeskey();
  static const int kAESKeyFieldNumber = 17;
  const ::std::string& aeskey() const;
  void set_aeskey(const ::std::string& value);
  #if LANG_CXX11
  void set_aeskey(::std::string&& value);
  #endif
  void set_aeskey(const char* value);
  void set_aeskey(const char* value, size_t size);
  ::std::string* mutable_aeskey();
  ::std::string* release_aeskey();
  void set_allocated_aeskey(::std::string* aeskey);

  // optional string CDNThumbUrl = 19;
  bool has_cdnthumburl() const;
  void clear_cdnthumburl();
  static const int kCDNThumbUrlFieldNumber = 19;
  const ::std::string& cdnthumburl() const;
  void set_cdnthumburl(const ::std::string& value);
  #if LANG_CXX11
  void set_cdnthumburl(::std::string&& value);
  #endif
  void set_cdnthumburl(const char* value);
  void set_cdnthumburl(const char* value, size_t size);
  ::std::string* mutable_cdnthumburl();
  ::std::string* release_cdnthumburl();
  void set_allocated_cdnthumburl(::std::string* cdnthumburl);

  // optional string CDNThumbAESKey = 23;
  bool has_cdnthumbaeskey() const;
  void clear_cdnthumbaeskey();
  static const int kCDNThumbAESKeyFieldNumber = 23;
  const ::std::string& cdnthumbaeskey() const;
  void set_cdnthumbaeskey(const ::std::string& value);
  #if LANG_CXX11
  void set_cdnthumbaeskey(::std::string&& value);
  #endif
  void set_cdnthumbaeskey(const char* value);
  void set_cdnthumbaeskey(const char* value, size_t size);
  ::std::string* mutable_cdnthumbaeskey();
  ::std::string* release_cdnthumbaeskey();
  void set_allocated_cdnthumbaeskey(::std::string* cdnthumbaeskey);

  // optional string VideoMd5 = 26;
  bool has_videomd5() const;
  void clear_videomd5();
  static const int kVideoMd5FieldNumber = 26;
  const ::std::string& videomd5() const;
  void set_videomd5(const ::std::string& value);
  #if LANG_CXX11
  void set_videomd5(::std::string&& value);
  #endif
  void set_videomd5(const char* value);
  void set_videomd5(const char* value, size_t size);
  ::std::string* mutable_videomd5();
  ::std::string* release_videomd5();
  void set_allocated_videomd5(::std::string* videomd5);

  // optional string StreamVideoUrl = 27;
  bool has_streamvideourl() const;
  void clear_streamvideourl();
  static const int kStreamVideoUrlFieldNumber = 27;
  const ::std::string& streamvideourl() const;
  void set_streamvideourl(const ::std::string& value);
  #if LANG_CXX11
  void set_streamvideourl(::std::string&& value);
  #endif
  void set_streamvideourl(const char* value);
  void set_streamvideourl(const char* value, size_t size);
  ::std::string* mutable_streamvideourl();
  ::std::string* release_streamvideourl();
  void set_allocated_streamvideourl(::std::string* streamvideourl);

  // optional string StreamVideoTitle = 29;
  bool has_streamvideotitle() const;
  void clear_streamvideotitle();
  static const int kStreamVideoTitleFieldNumber = 29;
  const ::std::string& streamvideotitle() const;
  void set_streamvideotitle(const ::std::string& value);
  #if LANG_CXX11
  void set_streamvideotitle(::std::string&& value);
  #endif
  void set_streamvideotitle(const char* value);
  void set_streamvideotitle(const char* value, size_t size);
  ::std::string* mutable_streamvideotitle();
  ::std::string* release_streamvideotitle();
  void set_allocated_streamvideotitle(::std::string* streamvideotitle);

  // optional string StreamVideoWording = 30;
  bool has_streamvideowording() const;
  void clear_streamvideowording();
  static const int kStreamVideoWordingFieldNumber = 30;
  const ::std::string& streamvideowording() const;
  void set_streamvideowording(const ::std::string& value);
  #if LANG_CXX11
  void set_streamvideowording(::std::string&& value);
  #endif
  void set_streamvideowording(const char* value);
  void set_streamvideowording(const char* value, size_t size);
  ::std::string* mutable_streamvideowording();
  ::std::string* release_streamvideowording();
  void set_allocated_streamvideowording(::std::string* streamvideowording);

  // optional string StreamVideoWebUrl = 31;
  bool has_streamvideoweburl() const;
  void clear_streamvideoweburl();
  static const int kStreamVideoWebUrlFieldNumber = 31;
  const ::std::string& streamvideoweburl() const;
  void set_streamvideoweburl(const ::std::string& value);
  #if LANG_CXX11
  void set_streamvideoweburl(::std::string&& value);
  #endif
  void set_streamvideoweburl(const char* value);
  void set_streamvideoweburl(const char* value, size_t size);
  ::std::string* mutable_streamvideoweburl();
  ::std::string* release_streamvideoweburl();
  void set_allocated_streamvideoweburl(::std::string* streamvideoweburl);

  // optional string StreamVideoThumbUrl = 32;
  bool has_streamvideothumburl() const;
  void clear_streamvideothumburl();
  static const int kStreamVideoThumbUrlFieldNumber = 32;
  const ::std::string& streamvideothumburl() const;
  void set_streamvideothumburl(const ::std::string& value);
  #if LANG_CXX11
  void set_streamvideothumburl(::std::string&& value);
  #endif
  void set_streamvideothumburl(const char* value);
  void set_streamvideothumburl(const char* value, size_t size);
  ::std::string* mutable_streamvideothumburl();
  ::std::string* release_streamvideothumburl();
  void set_allocated_streamvideothumburl(::std::string* streamvideothumburl);

  // optional string StreamVideoPublishId = 33;
  bool has_streamvideopublishid() const;
  void clear_streamvideopublishid();
  static const int kStreamVideoPublishIdFieldNumber = 33;
  const ::std::string& streamvideopublishid() const;
  void set_streamvideopublishid(const ::std::string& value);
  #if LANG_CXX11
  void set_streamvideopublishid(::std::string&& value);
  #endif
  void set_streamvideopublishid(const char* value);
  void set_streamvideopublishid(const char* value, size_t size);
  ::std::string* mutable_streamvideopublishid();
  ::std::string* release_streamvideopublishid();
  void set_allocated_streamvideopublishid(::std::string* streamvideopublishid);

  // optional string StreamVideoAdUxInfo = 34;
  bool has_streamvideoaduxinfo() const;
  void clear_streamvideoaduxinfo();
  static const int kStreamVideoAdUxInfoFieldNumber = 34;
  const ::std::string& streamvideoaduxinfo() const;
  void set_streamvideoaduxinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_streamvideoaduxinfo(::std::string&& value);
  #endif
  void set_streamvideoaduxinfo(const char* value);
  void set_streamvideoaduxinfo(const char* value, size_t size);
  ::std::string* mutable_streamvideoaduxinfo();
  ::std::string* release_streamvideoaduxinfo();
  void set_allocated_streamvideoaduxinfo(::std::string* streamvideoaduxinfo);

  // optional string StatExtStr = 35;
  bool has_statextstr() const;
  void clear_statextstr();
  static const int kStatExtStrFieldNumber = 35;
  const ::std::string& statextstr() const;
  void set_statextstr(const ::std::string& value);
  #if LANG_CXX11
  void set_statextstr(::std::string&& value);
  #endif
  void set_statextstr(const char* value);
  void set_statextstr(const char* value, size_t size);
  ::std::string* mutable_statextstr();
  ::std::string* release_statextstr();
  void set_allocated_statextstr(::std::string* statextstr);

  // optional string VideoNewMd5 = 37;
  bool has_videonewmd5() const;
  void clear_videonewmd5();
  static const int kVideoNewMd5FieldNumber = 37;
  const ::std::string& videonewmd5() const;
  void set_videonewmd5(const ::std::string& value);
  #if LANG_CXX11
  void set_videonewmd5(::std::string&& value);
  #endif
  void set_videonewmd5(const char* value);
  void set_videonewmd5(const char* value, size_t size);
  ::std::string* mutable_videonewmd5();
  ::std::string* release_videonewmd5();
  void set_allocated_videonewmd5(::std::string* videonewmd5);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required .micromsg.SKBuiltinBuffer_t ThumbData = 7;
  bool has_thumbdata() const;
  void clear_thumbdata();
  static const int kThumbDataFieldNumber = 7;
  const ::micromsg::SKBuiltinBuffer_t& thumbdata() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_thumbdata();
  ::micromsg::SKBuiltinBuffer_t* release_thumbdata();
  void set_allocated_thumbdata(::micromsg::SKBuiltinBuffer_t* thumbdata);

  // required .micromsg.SKBuiltinBuffer_t VideoData = 10;
  bool has_videodata() const;
  void clear_videodata();
  static const int kVideoDataFieldNumber = 10;
  const ::micromsg::SKBuiltinBuffer_t& videodata() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_videodata();
  ::micromsg::SKBuiltinBuffer_t* release_videodata();
  void set_allocated_videodata(::micromsg::SKBuiltinBuffer_t* videodata);

  // required uint32 ThumbTotalLen = 5;
  bool has_thumbtotallen() const;
  void clear_thumbtotallen();
  static const int kThumbTotalLenFieldNumber = 5;
  ::google::protobuf::uint32 thumbtotallen() const;
  void set_thumbtotallen(::google::protobuf::uint32 value);

  // required uint32 ThumbStartPos = 6;
  bool has_thumbstartpos() const;
  void clear_thumbstartpos();
  static const int kThumbStartPosFieldNumber = 6;
  ::google::protobuf::uint32 thumbstartpos() const;
  void set_thumbstartpos(::google::protobuf::uint32 value);

  // required uint32 VideoTotalLen = 8;
  bool has_videototallen() const;
  void clear_videototallen();
  static const int kVideoTotalLenFieldNumber = 8;
  ::google::protobuf::uint32 videototallen() const;
  void set_videototallen(::google::protobuf::uint32 value);

  // required uint32 VideoStartPos = 9;
  bool has_videostartpos() const;
  void clear_videostartpos();
  static const int kVideoStartPosFieldNumber = 9;
  ::google::protobuf::uint32 videostartpos() const;
  void set_videostartpos(::google::protobuf::uint32 value);

  // required uint32 PlayLength = 11;
  bool has_playlength() const;
  void clear_playlength();
  static const int kPlayLengthFieldNumber = 11;
  ::google::protobuf::uint32 playlength() const;
  void set_playlength(::google::protobuf::uint32 value);

  // optional uint32 NetworkEnv = 12;
  bool has_networkenv() const;
  void clear_networkenv();
  static const int kNetworkEnvFieldNumber = 12;
  ::google::protobuf::uint32 networkenv() const;
  void set_networkenv(::google::protobuf::uint32 value);

  // optional uint32 CameraType = 13;
  bool has_cameratype() const;
  void clear_cameratype();
  static const int kCameraTypeFieldNumber = 13;
  ::google::protobuf::uint32 cameratype() const;
  void set_cameratype(::google::protobuf::uint32 value);

  // optional uint32 FuncFlag = 14;
  bool has_funcflag() const;
  void clear_funcflag();
  static const int kFuncFlagFieldNumber = 14;
  ::google::protobuf::uint32 funcflag() const;
  void set_funcflag(::google::protobuf::uint32 value);

  // optional int32 EncryVer = 18;
  bool has_encryver() const;
  void clear_encryver();
  static const int kEncryVerFieldNumber = 18;
  ::google::protobuf::int32 encryver() const;
  void set_encryver(::google::protobuf::int32 value);

  // optional int32 CDNThumbImgSize = 20;
  bool has_cdnthumbimgsize() const;
  void clear_cdnthumbimgsize();
  static const int kCDNThumbImgSizeFieldNumber = 20;
  ::google::protobuf::int32 cdnthumbimgsize() const;
  void set_cdnthumbimgsize(::google::protobuf::int32 value);

  // optional int32 CDNThumbImgHeight = 21;
  bool has_cdnthumbimgheight() const;
  void clear_cdnthumbimgheight();
  static const int kCDNThumbImgHeightFieldNumber = 21;
  ::google::protobuf::int32 cdnthumbimgheight() const;
  void set_cdnthumbimgheight(::google::protobuf::int32 value);

  // optional int32 CDNThumbImgWidth = 22;
  bool has_cdnthumbimgwidth() const;
  void clear_cdnthumbimgwidth();
  static const int kCDNThumbImgWidthFieldNumber = 22;
  ::google::protobuf::int32 cdnthumbimgwidth() const;
  void set_cdnthumbimgwidth(::google::protobuf::int32 value);

  // optional int32 VideoFrom = 24;
  bool has_videofrom() const;
  void clear_videofrom();
  static const int kVideoFromFieldNumber = 24;
  ::google::protobuf::int32 videofrom() const;
  void set_videofrom(::google::protobuf::int32 value);

  // optional uint32 ReqTime = 25;
  bool has_reqtime() const;
  void clear_reqtime();
  static const int kReqTimeFieldNumber = 25;
  ::google::protobuf::uint32 reqtime() const;
  void set_reqtime(::google::protobuf::uint32 value);

  // optional uint32 StreamVideoTotalTime = 28;
  bool has_streamvideototaltime() const;
  void clear_streamvideototaltime();
  static const int kStreamVideoTotalTimeFieldNumber = 28;
  ::google::protobuf::uint32 streamvideototaltime() const;
  void set_streamvideototaltime(::google::protobuf::uint32 value);

  // optional uint32 HitMd5 = 36;
  bool has_hitmd5() const;
  void clear_hitmd5();
  static const int kHitMd5FieldNumber = 36;
  ::google::protobuf::uint32 hitmd5() const;
  void set_hitmd5(::google::protobuf::uint32 value);

  // optional uint32 CRC32 = 38;
  bool has_crc32() const;
  void clear_crc32();
  static const int kCRC32FieldNumber = 38;
  ::google::protobuf::uint32 crc32() const;
  void set_crc32(::google::protobuf::uint32 value);

  // optional uint32 MsgForwardType = 39;
  bool has_msgforwardtype() const;
  void clear_msgforwardtype();
  static const int kMsgForwardTypeFieldNumber = 39;
  ::google::protobuf::uint32 msgforwardtype() const;
  void set_msgforwardtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.UploadVideoRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_clientmsgid();
  void clear_has_clientmsgid();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_thumbtotallen();
  void clear_has_thumbtotallen();
  void set_has_thumbstartpos();
  void clear_has_thumbstartpos();
  void set_has_thumbdata();
  void clear_has_thumbdata();
  void set_has_videototallen();
  void clear_has_videototallen();
  void set_has_videostartpos();
  void clear_has_videostartpos();
  void set_has_videodata();
  void clear_has_videodata();
  void set_has_playlength();
  void clear_has_playlength();
  void set_has_networkenv();
  void clear_has_networkenv();
  void set_has_cameratype();
  void clear_has_cameratype();
  void set_has_funcflag();
  void clear_has_funcflag();
  void set_has_msgsource();
  void clear_has_msgsource();
  void set_has_cdnvideourl();
  void clear_has_cdnvideourl();
  void set_has_aeskey();
  void clear_has_aeskey();
  void set_has_encryver();
  void clear_has_encryver();
  void set_has_cdnthumburl();
  void clear_has_cdnthumburl();
  void set_has_cdnthumbimgsize();
  void clear_has_cdnthumbimgsize();
  void set_has_cdnthumbimgheight();
  void clear_has_cdnthumbimgheight();
  void set_has_cdnthumbimgwidth();
  void clear_has_cdnthumbimgwidth();
  void set_has_cdnthumbaeskey();
  void clear_has_cdnthumbaeskey();
  void set_has_videofrom();
  void clear_has_videofrom();
  void set_has_reqtime();
  void clear_has_reqtime();
  void set_has_videomd5();
  void clear_has_videomd5();
  void set_has_streamvideourl();
  void clear_has_streamvideourl();
  void set_has_streamvideototaltime();
  void clear_has_streamvideototaltime();
  void set_has_streamvideotitle();
  void clear_has_streamvideotitle();
  void set_has_streamvideowording();
  void clear_has_streamvideowording();
  void set_has_streamvideoweburl();
  void clear_has_streamvideoweburl();
  void set_has_streamvideothumburl();
  void clear_has_streamvideothumburl();
  void set_has_streamvideopublishid();
  void clear_has_streamvideopublishid();
  void set_has_streamvideoaduxinfo();
  void clear_has_streamvideoaduxinfo();
  void set_has_statextstr();
  void clear_has_statextstr();
  void set_has_hitmd5();
  void clear_has_hitmd5();
  void set_has_videonewmd5();
  void clear_has_videonewmd5();
  void set_has_crc32();
  void clear_has_crc32();
  void set_has_msgforwardtype();
  void clear_has_msgforwardtype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::internal::ArenaStringPtr clientmsgid_;
  ::google::protobuf::internal::ArenaStringPtr fromusername_;
  ::google::protobuf::internal::ArenaStringPtr tousername_;
  ::google::protobuf::internal::ArenaStringPtr msgsource_;
  ::google::protobuf::internal::ArenaStringPtr cdnvideourl_;
  ::google::protobuf::internal::ArenaStringPtr aeskey_;
  ::google::protobuf::internal::ArenaStringPtr cdnthumburl_;
  ::google::protobuf::internal::ArenaStringPtr cdnthumbaeskey_;
  ::google::protobuf::internal::ArenaStringPtr videomd5_;
  ::google::protobuf::internal::ArenaStringPtr streamvideourl_;
  ::google::protobuf::internal::ArenaStringPtr streamvideotitle_;
  ::google::protobuf::internal::ArenaStringPtr streamvideowording_;
  ::google::protobuf::internal::ArenaStringPtr streamvideoweburl_;
  ::google::protobuf::internal::ArenaStringPtr streamvideothumburl_;
  ::google::protobuf::internal::ArenaStringPtr streamvideopublishid_;
  ::google::protobuf::internal::ArenaStringPtr streamvideoaduxinfo_;
  ::google::protobuf::internal::ArenaStringPtr statextstr_;
  ::google::protobuf::internal::ArenaStringPtr videonewmd5_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::SKBuiltinBuffer_t* thumbdata_;
  ::micromsg::SKBuiltinBuffer_t* videodata_;
  ::google::protobuf::uint32 thumbtotallen_;
  ::google::protobuf::uint32 thumbstartpos_;
  ::google::protobuf::uint32 videototallen_;
  ::google::protobuf::uint32 videostartpos_;
  ::google::protobuf::uint32 playlength_;
  ::google::protobuf::uint32 networkenv_;
  ::google::protobuf::uint32 cameratype_;
  ::google::protobuf::uint32 funcflag_;
  ::google::protobuf::int32 encryver_;
  ::google::protobuf::int32 cdnthumbimgsize_;
  ::google::protobuf::int32 cdnthumbimgheight_;
  ::google::protobuf::int32 cdnthumbimgwidth_;
  ::google::protobuf::int32 videofrom_;
  ::google::protobuf::uint32 reqtime_;
  ::google::protobuf::uint32 streamvideototaltime_;
  ::google::protobuf::uint32 hitmd5_;
  ::google::protobuf::uint32 crc32_;
  ::google::protobuf::uint32 msgforwardtype_;
  mutable int _cached_size_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UploadVideoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UploadVideoResponse) */ {
 public:
  UploadVideoResponse();
  virtual ~UploadVideoResponse();

  UploadVideoResponse(const UploadVideoResponse& from);

  inline UploadVideoResponse& operator=(const UploadVideoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadVideoResponse& default_instance();

  static inline const UploadVideoResponse* internal_default_instance() {
    return reinterpret_cast<const UploadVideoResponse*>(
               &_UploadVideoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(UploadVideoResponse* other);

  // implements Message ----------------------------------------------

  inline UploadVideoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadVideoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadVideoResponse& from);
  void MergeFrom(const UploadVideoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadVideoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ClientMsgId = 2;
  bool has_clientmsgid() const;
  void clear_clientmsgid();
  static const int kClientMsgIdFieldNumber = 2;
  const ::std::string& clientmsgid() const;
  void set_clientmsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientmsgid(::std::string&& value);
  #endif
  void set_clientmsgid(const char* value);
  void set_clientmsgid(const char* value, size_t size);
  ::std::string* mutable_clientmsgid();
  ::std::string* release_clientmsgid();
  void set_allocated_clientmsgid(::std::string* clientmsgid);

  // optional string AESKey = 7;
  bool has_aeskey() const;
  void clear_aeskey();
  static const int kAESKeyFieldNumber = 7;
  const ::std::string& aeskey() const;
  void set_aeskey(const ::std::string& value);
  #if LANG_CXX11
  void set_aeskey(::std::string&& value);
  #endif
  void set_aeskey(const char* value);
  void set_aeskey(const char* value, size_t size);
  ::std::string* mutable_aeskey();
  ::std::string* release_aeskey();
  void set_allocated_aeskey(::std::string* aeskey);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 MsgId = 3;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 3;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // required uint32 ThumbStartPos = 4;
  bool has_thumbstartpos() const;
  void clear_thumbstartpos();
  static const int kThumbStartPosFieldNumber = 4;
  ::google::protobuf::uint32 thumbstartpos() const;
  void set_thumbstartpos(::google::protobuf::uint32 value);

  // optional uint64 NewMsgId = 6;
  bool has_newmsgid() const;
  void clear_newmsgid();
  static const int kNewMsgIdFieldNumber = 6;
  ::google::protobuf::uint64 newmsgid() const;
  void set_newmsgid(::google::protobuf::uint64 value);

  // required uint32 VideoStartPos = 5;
  bool has_videostartpos() const;
  void clear_videostartpos();
  static const int kVideoStartPosFieldNumber = 5;
  ::google::protobuf::uint32 videostartpos() const;
  void set_videostartpos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.UploadVideoResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_clientmsgid();
  void clear_has_clientmsgid();
  void set_has_msgid();
  void clear_has_msgid();
  void set_has_thumbstartpos();
  void clear_has_thumbstartpos();
  void set_has_videostartpos();
  void clear_has_videostartpos();
  void set_has_newmsgid();
  void clear_has_newmsgid();
  void set_has_aeskey();
  void clear_has_aeskey();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientmsgid_;
  ::google::protobuf::internal::ArenaStringPtr aeskey_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 msgid_;
  ::google::protobuf::uint32 thumbstartpos_;
  ::google::protobuf::uint64 newmsgid_;
  ::google::protobuf::uint32 videostartpos_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DownloadVideoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.DownloadVideoRequest) */ {
 public:
  DownloadVideoRequest();
  virtual ~DownloadVideoRequest();

  DownloadVideoRequest(const DownloadVideoRequest& from);

  inline DownloadVideoRequest& operator=(const DownloadVideoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadVideoRequest& default_instance();

  static inline const DownloadVideoRequest* internal_default_instance() {
    return reinterpret_cast<const DownloadVideoRequest*>(
               &_DownloadVideoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(DownloadVideoRequest* other);

  // implements Message ----------------------------------------------

  inline DownloadVideoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DownloadVideoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DownloadVideoRequest& from);
  void MergeFrom(const DownloadVideoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DownloadVideoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 MsgId = 2;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 2;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // required uint32 TotalLen = 3;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 3;
  ::google::protobuf::uint32 totallen() const;
  void set_totallen(::google::protobuf::uint32 value);

  // required uint32 StartPos = 4;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 4;
  ::google::protobuf::uint32 startpos() const;
  void set_startpos(::google::protobuf::uint32 value);

  // optional uint32 NetworkEnv = 5;
  bool has_networkenv() const;
  void clear_networkenv();
  static const int kNetworkEnvFieldNumber = 5;
  ::google::protobuf::uint32 networkenv() const;
  void set_networkenv(::google::protobuf::uint32 value);

  // optional uint64 NewMsgId = 7;
  bool has_newmsgid() const;
  void clear_newmsgid();
  static const int kNewMsgIdFieldNumber = 7;
  ::google::protobuf::uint64 newmsgid() const;
  void set_newmsgid(::google::protobuf::uint64 value);

  // optional uint32 MxPackSize = 6;
  bool has_mxpacksize() const;
  void clear_mxpacksize();
  static const int kMxPackSizeFieldNumber = 6;
  ::google::protobuf::uint32 mxpacksize() const;
  void set_mxpacksize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.DownloadVideoRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_msgid();
  void clear_has_msgid();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_networkenv();
  void clear_has_networkenv();
  void set_has_mxpacksize();
  void clear_has_mxpacksize();
  void set_has_newmsgid();
  void clear_has_newmsgid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 msgid_;
  ::google::protobuf::uint32 totallen_;
  ::google::protobuf::uint32 startpos_;
  ::google::protobuf::uint32 networkenv_;
  ::google::protobuf::uint64 newmsgid_;
  ::google::protobuf::uint32 mxpacksize_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DownloadVideoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.DownloadVideoResponse) */ {
 public:
  DownloadVideoResponse();
  virtual ~DownloadVideoResponse();

  DownloadVideoResponse(const DownloadVideoResponse& from);

  inline DownloadVideoResponse& operator=(const DownloadVideoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadVideoResponse& default_instance();

  static inline const DownloadVideoResponse* internal_default_instance() {
    return reinterpret_cast<const DownloadVideoResponse*>(
               &_DownloadVideoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(DownloadVideoResponse* other);

  // implements Message ----------------------------------------------

  inline DownloadVideoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DownloadVideoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DownloadVideoResponse& from);
  void MergeFrom(const DownloadVideoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DownloadVideoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required .micromsg.SKBuiltinBuffer_t Data = 5;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::micromsg::SKBuiltinBuffer_t& data() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_data();
  ::micromsg::SKBuiltinBuffer_t* release_data();
  void set_allocated_data(::micromsg::SKBuiltinBuffer_t* data);

  // required uint32 MsgId = 2;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 2;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // required uint32 TotalLen = 3;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 3;
  ::google::protobuf::uint32 totallen() const;
  void set_totallen(::google::protobuf::uint32 value);

  // optional uint64 NewMsgId = 6;
  bool has_newmsgid() const;
  void clear_newmsgid();
  static const int kNewMsgIdFieldNumber = 6;
  ::google::protobuf::uint64 newmsgid() const;
  void set_newmsgid(::google::protobuf::uint64 value);

  // required uint32 StartPos = 4;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 4;
  ::google::protobuf::uint32 startpos() const;
  void set_startpos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.DownloadVideoResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_msgid();
  void clear_has_msgid();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_data();
  void clear_has_data();
  void set_has_newmsgid();
  void clear_has_newmsgid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  ::micromsg::SKBuiltinBuffer_t* data_;
  ::google::protobuf::uint32 msgid_;
  ::google::protobuf::uint32 totallen_;
  ::google::protobuf::uint64 newmsgid_;
  ::google::protobuf::uint32 startpos_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RevokeMsgRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.RevokeMsgRequest) */ {
 public:
  RevokeMsgRequest();
  virtual ~RevokeMsgRequest();

  RevokeMsgRequest(const RevokeMsgRequest& from);

  inline RevokeMsgRequest& operator=(const RevokeMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RevokeMsgRequest& default_instance();

  static inline const RevokeMsgRequest* internal_default_instance() {
    return reinterpret_cast<const RevokeMsgRequest*>(
               &_RevokeMsgRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(RevokeMsgRequest* other);

  // implements Message ----------------------------------------------

  inline RevokeMsgRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RevokeMsgRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RevokeMsgRequest& from);
  void MergeFrom(const RevokeMsgRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RevokeMsgRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ClientMsgId = 2;
  bool has_clientmsgid() const;
  void clear_clientmsgid();
  static const int kClientMsgIdFieldNumber = 2;
  const ::std::string& clientmsgid() const;
  void set_clientmsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientmsgid(::std::string&& value);
  #endif
  void set_clientmsgid(const char* value);
  void set_clientmsgid(const char* value, size_t size);
  ::std::string* mutable_clientmsgid();
  ::std::string* release_clientmsgid();
  void set_allocated_clientmsgid(::std::string* clientmsgid);

  // optional string FromUserName = 6;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUserNameFieldNumber = 6;
  const ::std::string& fromusername() const;
  void set_fromusername(const ::std::string& value);
  #if LANG_CXX11
  void set_fromusername(::std::string&& value);
  #endif
  void set_fromusername(const char* value);
  void set_fromusername(const char* value, size_t size);
  ::std::string* mutable_fromusername();
  ::std::string* release_fromusername();
  void set_allocated_fromusername(::std::string* fromusername);

  // optional string ToUserName = 7;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 7;
  const ::std::string& tousername() const;
  void set_tousername(const ::std::string& value);
  #if LANG_CXX11
  void set_tousername(::std::string&& value);
  #endif
  void set_tousername(const char* value);
  void set_tousername(const char* value, size_t size);
  ::std::string* mutable_tousername();
  ::std::string* release_tousername();
  void set_allocated_tousername(::std::string* tousername);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 NewClientMsgId = 3;
  bool has_newclientmsgid() const;
  void clear_newclientmsgid();
  static const int kNewClientMsgIdFieldNumber = 3;
  ::google::protobuf::uint32 newclientmsgid() const;
  void set_newclientmsgid(::google::protobuf::uint32 value);

  // required uint32 CreateTime = 4;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 4;
  ::google::protobuf::uint32 createtime() const;
  void set_createtime(::google::protobuf::uint32 value);

  // required uint32 SvrMsgId = 5;
  bool has_svrmsgid() const;
  void clear_svrmsgid();
  static const int kSvrMsgIdFieldNumber = 5;
  ::google::protobuf::uint32 svrmsgid() const;
  void set_svrmsgid(::google::protobuf::uint32 value);

  // required uint32 IndexOfRequest = 8;
  bool has_indexofrequest() const;
  void clear_indexofrequest();
  static const int kIndexOfRequestFieldNumber = 8;
  ::google::protobuf::uint32 indexofrequest() const;
  void set_indexofrequest(::google::protobuf::uint32 value);

  // optional uint64 SvrNewMsgId = 9;
  bool has_svrnewmsgid() const;
  void clear_svrnewmsgid();
  static const int kSvrNewMsgIdFieldNumber = 9;
  ::google::protobuf::uint64 svrnewmsgid() const;
  void set_svrnewmsgid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:micromsg.RevokeMsgRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_clientmsgid();
  void clear_has_clientmsgid();
  void set_has_newclientmsgid();
  void clear_has_newclientmsgid();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_svrmsgid();
  void clear_has_svrmsgid();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_indexofrequest();
  void clear_has_indexofrequest();
  void set_has_svrnewmsgid();
  void clear_has_svrnewmsgid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientmsgid_;
  ::google::protobuf::internal::ArenaStringPtr fromusername_;
  ::google::protobuf::internal::ArenaStringPtr tousername_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 newclientmsgid_;
  ::google::protobuf::uint32 createtime_;
  ::google::protobuf::uint32 svrmsgid_;
  ::google::protobuf::uint32 indexofrequest_;
  ::google::protobuf::uint64 svrnewmsgid_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RevokeMsgResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.RevokeMsgResponse) */ {
 public:
  RevokeMsgResponse();
  virtual ~RevokeMsgResponse();

  RevokeMsgResponse(const RevokeMsgResponse& from);

  inline RevokeMsgResponse& operator=(const RevokeMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RevokeMsgResponse& default_instance();

  static inline const RevokeMsgResponse* internal_default_instance() {
    return reinterpret_cast<const RevokeMsgResponse*>(
               &_RevokeMsgResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(RevokeMsgResponse* other);

  // implements Message ----------------------------------------------

  inline RevokeMsgResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RevokeMsgResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RevokeMsgResponse& from);
  void MergeFrom(const RevokeMsgResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RevokeMsgResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Introduction = 2;
  bool has_introduction() const;
  void clear_introduction();
  static const int kIntroductionFieldNumber = 2;
  const ::std::string& introduction() const;
  void set_introduction(const ::std::string& value);
  #if LANG_CXX11
  void set_introduction(::std::string&& value);
  #endif
  void set_introduction(const char* value);
  void set_introduction(const char* value, size_t size);
  ::std::string* mutable_introduction();
  ::std::string* release_introduction();
  void set_allocated_introduction(::std::string* introduction);

  // optional string SysWording = 3;
  bool has_syswording() const;
  void clear_syswording();
  static const int kSysWordingFieldNumber = 3;
  const ::std::string& syswording() const;
  void set_syswording(const ::std::string& value);
  #if LANG_CXX11
  void set_syswording(::std::string&& value);
  #endif
  void set_syswording(const char* value);
  void set_syswording(const char* value, size_t size);
  ::std::string* mutable_syswording();
  ::std::string* release_syswording();
  void set_allocated_syswording(::std::string* syswording);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.RevokeMsgResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_introduction();
  void clear_has_introduction();
  void set_has_syswording();
  void clear_has_syswording();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr introduction_;
  ::google::protobuf::internal::ArenaStringPtr syswording_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendYoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.SendYoRequest) */ {
 public:
  SendYoRequest();
  virtual ~SendYoRequest();

  SendYoRequest(const SendYoRequest& from);

  inline SendYoRequest& operator=(const SendYoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendYoRequest& default_instance();

  static inline const SendYoRequest* internal_default_instance() {
    return reinterpret_cast<const SendYoRequest*>(
               &_SendYoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(SendYoRequest* other);

  // implements Message ----------------------------------------------

  inline SendYoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SendYoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendYoRequest& from);
  void MergeFrom(const SendYoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendYoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ToUserName = 1;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 1;
  const ::std::string& tousername() const;
  void set_tousername(const ::std::string& value);
  #if LANG_CXX11
  void set_tousername(::std::string&& value);
  #endif
  void set_tousername(const char* value);
  void set_tousername(const char* value, size_t size);
  ::std::string* mutable_tousername();
  ::std::string* release_tousername();
  void set_allocated_tousername(::std::string* tousername);

  // optional string MsgSource = 6;
  bool has_msgsource() const;
  void clear_msgsource();
  static const int kMsgSourceFieldNumber = 6;
  const ::std::string& msgsource() const;
  void set_msgsource(const ::std::string& value);
  #if LANG_CXX11
  void set_msgsource(::std::string&& value);
  #endif
  void set_msgsource(const char* value);
  void set_msgsource(const char* value, size_t size);
  ::std::string* mutable_msgsource();
  ::std::string* release_msgsource();
  void set_allocated_msgsource(::std::string* msgsource);

  // required uint32 Type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // required uint32 Count = 3;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // required uint32 CreateTime = 4;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 4;
  ::google::protobuf::uint32 createtime() const;
  void set_createtime(::google::protobuf::uint32 value);

  // required uint32 ClientMsgId = 5;
  bool has_clientmsgid() const;
  void clear_clientmsgid();
  static const int kClientMsgIdFieldNumber = 5;
  ::google::protobuf::uint32 clientmsgid() const;
  void set_clientmsgid(::google::protobuf::uint32 value);

  // optional uint32 YoType = 7;
  bool has_yotype() const;
  void clear_yotype();
  static const int kYoTypeFieldNumber = 7;
  ::google::protobuf::uint32 yotype() const;
  void set_yotype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.SendYoRequest)
 private:
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_type();
  void clear_has_type();
  void set_has_count();
  void clear_has_count();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_clientmsgid();
  void clear_has_clientmsgid();
  void set_has_msgsource();
  void clear_has_msgsource();
  void set_has_yotype();
  void clear_has_yotype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr tousername_;
  ::google::protobuf::internal::ArenaStringPtr msgsource_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 createtime_;
  ::google::protobuf::uint32 clientmsgid_;
  ::google::protobuf::uint32 yotype_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendYoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.SendYoResponse) */ {
 public:
  SendYoResponse();
  virtual ~SendYoResponse();

  SendYoResponse(const SendYoResponse& from);

  inline SendYoResponse& operator=(const SendYoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendYoResponse& default_instance();

  static inline const SendYoResponse* internal_default_instance() {
    return reinterpret_cast<const SendYoResponse*>(
               &_SendYoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(SendYoResponse* other);

  // implements Message ----------------------------------------------

  inline SendYoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SendYoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendYoResponse& from);
  void MergeFrom(const SendYoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendYoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Ret = 1;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // required uint32 ServerTime = 2;
  bool has_servertime() const;
  void clear_servertime();
  static const int kServerTimeFieldNumber = 2;
  ::google::protobuf::uint32 servertime() const;
  void set_servertime(::google::protobuf::uint32 value);

  // required uint64 MsgId = 3;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 3;
  ::google::protobuf::uint64 msgid() const;
  void set_msgid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:micromsg.SendYoResponse)
 private:
  void set_has_ret();
  void clear_has_ret();
  void set_has_servertime();
  void clear_has_servertime();
  void set_has_msgid();
  void clear_has_msgid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint32 servertime_;
  ::google::protobuf::uint64 msgid_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckBigFileUploadRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.CheckBigFileUploadRequest) */ {
 public:
  CheckBigFileUploadRequest();
  virtual ~CheckBigFileUploadRequest();

  CheckBigFileUploadRequest(const CheckBigFileUploadRequest& from);

  inline CheckBigFileUploadRequest& operator=(const CheckBigFileUploadRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckBigFileUploadRequest& default_instance();

  static inline const CheckBigFileUploadRequest* internal_default_instance() {
    return reinterpret_cast<const CheckBigFileUploadRequest*>(
               &_CheckBigFileUploadRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(CheckBigFileUploadRequest* other);

  // implements Message ----------------------------------------------

  inline CheckBigFileUploadRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckBigFileUploadRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckBigFileUploadRequest& from);
  void MergeFrom(const CheckBigFileUploadRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckBigFileUploadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string FromUserName = 2;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUserNameFieldNumber = 2;
  const ::std::string& fromusername() const;
  void set_fromusername(const ::std::string& value);
  #if LANG_CXX11
  void set_fromusername(::std::string&& value);
  #endif
  void set_fromusername(const char* value);
  void set_fromusername(const char* value, size_t size);
  ::std::string* mutable_fromusername();
  ::std::string* release_fromusername();
  void set_allocated_fromusername(::std::string* fromusername);

  // optional string ToUserName = 3;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 3;
  const ::std::string& tousername() const;
  void set_tousername(const ::std::string& value);
  #if LANG_CXX11
  void set_tousername(::std::string&& value);
  #endif
  void set_tousername(const char* value);
  void set_tousername(const char* value, size_t size);
  ::std::string* mutable_tousername();
  ::std::string* release_tousername();
  void set_allocated_tousername(::std::string* tousername);

  // optional string AESKey = 5;
  bool has_aeskey() const;
  void clear_aeskey();
  static const int kAESKeyFieldNumber = 5;
  const ::std::string& aeskey() const;
  void set_aeskey(const ::std::string& value);
  #if LANG_CXX11
  void set_aeskey(::std::string&& value);
  #endif
  void set_aeskey(const char* value);
  void set_aeskey(const char* value, size_t size);
  ::std::string* mutable_aeskey();
  ::std::string* release_aeskey();
  void set_allocated_aeskey(::std::string* aeskey);

  // optional string FileMd5 = 6;
  bool has_filemd5() const;
  void clear_filemd5();
  static const int kFileMd5FieldNumber = 6;
  const ::std::string& filemd5() const;
  void set_filemd5(const ::std::string& value);
  #if LANG_CXX11
  void set_filemd5(::std::string&& value);
  #endif
  void set_filemd5(const char* value);
  void set_filemd5(const char* value, size_t size);
  ::std::string* mutable_filemd5();
  ::std::string* release_filemd5();
  void set_allocated_filemd5(::std::string* filemd5);

  // optional string FileExt = 8;
  bool has_fileext() const;
  void clear_fileext();
  static const int kFileExtFieldNumber = 8;
  const ::std::string& fileext() const;
  void set_fileext(const ::std::string& value);
  #if LANG_CXX11
  void set_fileext(::std::string&& value);
  #endif
  void set_fileext(const char* value);
  void set_fileext(const char* value, size_t size);
  ::std::string* mutable_fileext();
  ::std::string* release_fileext();
  void set_allocated_fileext(::std::string* fileext);

  // optional string FileName = 9;
  bool has_filename() const;
  void clear_filename();
  static const int kFileNameFieldNumber = 9;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint64 FileSize = 4;
  bool has_filesize() const;
  void clear_filesize();
  static const int kFileSizeFieldNumber = 4;
  ::google::protobuf::uint64 filesize() const;
  void set_filesize(::google::protobuf::uint64 value);

  // required uint32 FileType = 7;
  bool has_filetype() const;
  void clear_filetype();
  static const int kFileTypeFieldNumber = 7;
  ::google::protobuf::uint32 filetype() const;
  void set_filetype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.CheckBigFileUploadRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_filesize();
  void clear_has_filesize();
  void set_has_aeskey();
  void clear_has_aeskey();
  void set_has_filemd5();
  void clear_has_filemd5();
  void set_has_filetype();
  void clear_has_filetype();
  void set_has_fileext();
  void clear_has_fileext();
  void set_has_filename();
  void clear_has_filename();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fromusername_;
  ::google::protobuf::internal::ArenaStringPtr tousername_;
  ::google::protobuf::internal::ArenaStringPtr aeskey_;
  ::google::protobuf::internal::ArenaStringPtr filemd5_;
  ::google::protobuf::internal::ArenaStringPtr fileext_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint64 filesize_;
  ::google::protobuf::uint32 filetype_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckBigFileUploadResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.CheckBigFileUploadResponse) */ {
 public:
  CheckBigFileUploadResponse();
  virtual ~CheckBigFileUploadResponse();

  CheckBigFileUploadResponse(const CheckBigFileUploadResponse& from);

  inline CheckBigFileUploadResponse& operator=(const CheckBigFileUploadResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckBigFileUploadResponse& default_instance();

  static inline const CheckBigFileUploadResponse* internal_default_instance() {
    return reinterpret_cast<const CheckBigFileUploadResponse*>(
               &_CheckBigFileUploadResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(CheckBigFileUploadResponse* other);

  // implements Message ----------------------------------------------

  inline CheckBigFileUploadResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckBigFileUploadResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckBigFileUploadResponse& from);
  void MergeFrom(const CheckBigFileUploadResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckBigFileUploadResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Signature = 2;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 2;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string FakeAESKey = 4;
  bool has_fakeaeskey() const;
  void clear_fakeaeskey();
  static const int kFakeAESKeyFieldNumber = 4;
  const ::std::string& fakeaeskey() const;
  void set_fakeaeskey(const ::std::string& value);
  #if LANG_CXX11
  void set_fakeaeskey(::std::string&& value);
  #endif
  void set_fakeaeskey(const char* value);
  void set_fakeaeskey(const char* value, size_t size);
  ::std::string* mutable_fakeaeskey();
  ::std::string* release_fakeaeskey();
  void set_allocated_fakeaeskey(::std::string* fakeaeskey);

  // optional string FakeSignature = 5;
  bool has_fakesignature() const;
  void clear_fakesignature();
  static const int kFakeSignatureFieldNumber = 5;
  const ::std::string& fakesignature() const;
  void set_fakesignature(const ::std::string& value);
  #if LANG_CXX11
  void set_fakesignature(::std::string&& value);
  #endif
  void set_fakesignature(const char* value);
  void set_fakesignature(const char* value, size_t size);
  ::std::string* mutable_fakesignature();
  ::std::string* release_fakesignature();
  void set_allocated_fakesignature(::std::string* fakesignature);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // optional uint32 Fakeuin = 3;
  bool has_fakeuin() const;
  void clear_fakeuin();
  static const int kFakeuinFieldNumber = 3;
  ::google::protobuf::uint32 fakeuin() const;
  void set_fakeuin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.CheckBigFileUploadResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_signature();
  void clear_has_signature();
  void set_has_fakeuin();
  void clear_has_fakeuin();
  void set_has_fakeaeskey();
  void clear_has_fakeaeskey();
  void set_has_fakesignature();
  void clear_has_fakesignature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr fakeaeskey_;
  ::google::protobuf::internal::ArenaStringPtr fakesignature_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 fakeuin_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckBigFileDownloadRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.CheckBigFileDownloadRequest) */ {
 public:
  CheckBigFileDownloadRequest();
  virtual ~CheckBigFileDownloadRequest();

  CheckBigFileDownloadRequest(const CheckBigFileDownloadRequest& from);

  inline CheckBigFileDownloadRequest& operator=(const CheckBigFileDownloadRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckBigFileDownloadRequest& default_instance();

  static inline const CheckBigFileDownloadRequest* internal_default_instance() {
    return reinterpret_cast<const CheckBigFileDownloadRequest*>(
               &_CheckBigFileDownloadRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(CheckBigFileDownloadRequest* other);

  // implements Message ----------------------------------------------

  inline CheckBigFileDownloadRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckBigFileDownloadRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckBigFileDownloadRequest& from);
  void MergeFrom(const CheckBigFileDownloadRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckBigFileDownloadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string FromUserName = 2;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUserNameFieldNumber = 2;
  const ::std::string& fromusername() const;
  void set_fromusername(const ::std::string& value);
  #if LANG_CXX11
  void set_fromusername(::std::string&& value);
  #endif
  void set_fromusername(const char* value);
  void set_fromusername(const char* value, size_t size);
  ::std::string* mutable_fromusername();
  ::std::string* release_fromusername();
  void set_allocated_fromusername(::std::string* fromusername);

  // optional string ToUserName = 3;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 3;
  const ::std::string& tousername() const;
  void set_tousername(const ::std::string& value);
  #if LANG_CXX11
  void set_tousername(::std::string&& value);
  #endif
  void set_tousername(const char* value);
  void set_tousername(const char* value, size_t size);
  ::std::string* mutable_tousername();
  ::std::string* release_tousername();
  void set_allocated_tousername(::std::string* tousername);

  // optional string AESKey = 5;
  bool has_aeskey() const;
  void clear_aeskey();
  static const int kAESKeyFieldNumber = 5;
  const ::std::string& aeskey() const;
  void set_aeskey(const ::std::string& value);
  #if LANG_CXX11
  void set_aeskey(::std::string&& value);
  #endif
  void set_aeskey(const char* value);
  void set_aeskey(const char* value, size_t size);
  ::std::string* mutable_aeskey();
  ::std::string* release_aeskey();
  void set_allocated_aeskey(::std::string* aeskey);

  // optional string FileMd5 = 6;
  bool has_filemd5() const;
  void clear_filemd5();
  static const int kFileMd5FieldNumber = 6;
  const ::std::string& filemd5() const;
  void set_filemd5(const ::std::string& value);
  #if LANG_CXX11
  void set_filemd5(::std::string&& value);
  #endif
  void set_filemd5(const char* value);
  void set_filemd5(const char* value, size_t size);
  ::std::string* mutable_filemd5();
  ::std::string* release_filemd5();
  void set_allocated_filemd5(::std::string* filemd5);

  // optional string FileExt = 8;
  bool has_fileext() const;
  void clear_fileext();
  static const int kFileExtFieldNumber = 8;
  const ::std::string& fileext() const;
  void set_fileext(const ::std::string& value);
  #if LANG_CXX11
  void set_fileext(::std::string&& value);
  #endif
  void set_fileext(const char* value);
  void set_fileext(const char* value, size_t size);
  ::std::string* mutable_fileext();
  ::std::string* release_fileext();
  void set_allocated_fileext(::std::string* fileext);

  // optional string FileName = 9;
  bool has_filename() const;
  void clear_filename();
  static const int kFileNameFieldNumber = 9;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint64 FileSize = 4;
  bool has_filesize() const;
  void clear_filesize();
  static const int kFileSizeFieldNumber = 4;
  ::google::protobuf::uint64 filesize() const;
  void set_filesize(::google::protobuf::uint64 value);

  // required uint32 FileType = 7;
  bool has_filetype() const;
  void clear_filetype();
  static const int kFileTypeFieldNumber = 7;
  ::google::protobuf::uint32 filetype() const;
  void set_filetype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.CheckBigFileDownloadRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_filesize();
  void clear_has_filesize();
  void set_has_aeskey();
  void clear_has_aeskey();
  void set_has_filemd5();
  void clear_has_filemd5();
  void set_has_filetype();
  void clear_has_filetype();
  void set_has_fileext();
  void clear_has_fileext();
  void set_has_filename();
  void clear_has_filename();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fromusername_;
  ::google::protobuf::internal::ArenaStringPtr tousername_;
  ::google::protobuf::internal::ArenaStringPtr aeskey_;
  ::google::protobuf::internal::ArenaStringPtr filemd5_;
  ::google::protobuf::internal::ArenaStringPtr fileext_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint64 filesize_;
  ::google::protobuf::uint32 filetype_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckBigFileDownloadResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.CheckBigFileDownloadResponse) */ {
 public:
  CheckBigFileDownloadResponse();
  virtual ~CheckBigFileDownloadResponse();

  CheckBigFileDownloadResponse(const CheckBigFileDownloadResponse& from);

  inline CheckBigFileDownloadResponse& operator=(const CheckBigFileDownloadResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckBigFileDownloadResponse& default_instance();

  static inline const CheckBigFileDownloadResponse* internal_default_instance() {
    return reinterpret_cast<const CheckBigFileDownloadResponse*>(
               &_CheckBigFileDownloadResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(CheckBigFileDownloadResponse* other);

  // implements Message ----------------------------------------------

  inline CheckBigFileDownloadResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckBigFileDownloadResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckBigFileDownloadResponse& from);
  void MergeFrom(const CheckBigFileDownloadResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckBigFileDownloadResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Signature = 2;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 2;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string FakeAESKey = 4;
  bool has_fakeaeskey() const;
  void clear_fakeaeskey();
  static const int kFakeAESKeyFieldNumber = 4;
  const ::std::string& fakeaeskey() const;
  void set_fakeaeskey(const ::std::string& value);
  #if LANG_CXX11
  void set_fakeaeskey(::std::string&& value);
  #endif
  void set_fakeaeskey(const char* value);
  void set_fakeaeskey(const char* value, size_t size);
  ::std::string* mutable_fakeaeskey();
  ::std::string* release_fakeaeskey();
  void set_allocated_fakeaeskey(::std::string* fakeaeskey);

  // optional string FakeSignature = 5;
  bool has_fakesignature() const;
  void clear_fakesignature();
  static const int kFakeSignatureFieldNumber = 5;
  const ::std::string& fakesignature() const;
  void set_fakesignature(const ::std::string& value);
  #if LANG_CXX11
  void set_fakesignature(::std::string&& value);
  #endif
  void set_fakesignature(const char* value);
  void set_fakesignature(const char* value, size_t size);
  ::std::string* mutable_fakesignature();
  ::std::string* release_fakesignature();
  void set_allocated_fakesignature(::std::string* fakesignature);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // optional uint32 Fakeuin = 3;
  bool has_fakeuin() const;
  void clear_fakeuin();
  static const int kFakeuinFieldNumber = 3;
  ::google::protobuf::uint32 fakeuin() const;
  void set_fakeuin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.CheckBigFileDownloadResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_signature();
  void clear_has_signature();
  void set_has_fakeuin();
  void clear_has_fakeuin();
  void set_has_fakeaeskey();
  void clear_has_fakeaeskey();
  void set_has_fakesignature();
  void clear_has_fakesignature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr fakeaeskey_;
  ::google::protobuf::internal::ArenaStringPtr fakesignature_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 fakeuin_;
  friend struct protobuf_mmextsend_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCDNDnsRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GetCDNDnsRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetCDNDnsRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetCDNDnsRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetCDNDnsRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GetCDNDnsRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCDNDnsRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GetCDNDnsRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCDNDnsRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GetCDNDnsRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetCDNDnsRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GetCDNDnsRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCDNDnsRequest.BaseRequest)
}

// optional string ClientIP = 2;
inline bool GetCDNDnsRequest::has_clientip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetCDNDnsRequest::set_has_clientip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetCDNDnsRequest::clear_has_clientip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetCDNDnsRequest::clear_clientip() {
  clientip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientip();
}
inline const ::std::string& GetCDNDnsRequest::clientip() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCDNDnsRequest.ClientIP)
  return clientip_.GetNoArena();
}
inline void GetCDNDnsRequest::set_clientip(const ::std::string& value) {
  set_has_clientip();
  clientip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetCDNDnsRequest.ClientIP)
}
#if LANG_CXX11
inline void GetCDNDnsRequest::set_clientip(::std::string&& value) {
  set_has_clientip();
  clientip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetCDNDnsRequest.ClientIP)
}
#endif
inline void GetCDNDnsRequest::set_clientip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientip();
  clientip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetCDNDnsRequest.ClientIP)
}
inline void GetCDNDnsRequest::set_clientip(const char* value, size_t size) {
  set_has_clientip();
  clientip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetCDNDnsRequest.ClientIP)
}
inline ::std::string* GetCDNDnsRequest::mutable_clientip() {
  set_has_clientip();
  // @@protoc_insertion_point(field_mutable:micromsg.GetCDNDnsRequest.ClientIP)
  return clientip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetCDNDnsRequest::release_clientip() {
  // @@protoc_insertion_point(field_release:micromsg.GetCDNDnsRequest.ClientIP)
  clear_has_clientip();
  return clientip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCDNDnsRequest::set_allocated_clientip(::std::string* clientip) {
  if (clientip != NULL) {
    set_has_clientip();
  } else {
    clear_has_clientip();
  }
  clientip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientip);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCDNDnsRequest.ClientIP)
}

// -------------------------------------------------------------------

// GetCDNDnsResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GetCDNDnsResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetCDNDnsResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetCDNDnsResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetCDNDnsResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GetCDNDnsResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCDNDnsResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GetCDNDnsResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCDNDnsResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GetCDNDnsResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetCDNDnsResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GetCDNDnsResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCDNDnsResponse.BaseResponse)
}

// required .micromsg.CDNDnsInfo DnsInfo = 2;
inline bool GetCDNDnsResponse::has_dnsinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetCDNDnsResponse::set_has_dnsinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetCDNDnsResponse::clear_has_dnsinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetCDNDnsResponse::clear_dnsinfo() {
  if (dnsinfo_ != NULL) dnsinfo_->::micromsg::CDNDnsInfo::Clear();
  clear_has_dnsinfo();
}
inline const ::micromsg::CDNDnsInfo& GetCDNDnsResponse::dnsinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCDNDnsResponse.DnsInfo)
  return dnsinfo_ != NULL ? *dnsinfo_
                         : *::micromsg::CDNDnsInfo::internal_default_instance();
}
inline ::micromsg::CDNDnsInfo* GetCDNDnsResponse::mutable_dnsinfo() {
  set_has_dnsinfo();
  if (dnsinfo_ == NULL) {
    dnsinfo_ = new ::micromsg::CDNDnsInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCDNDnsResponse.DnsInfo)
  return dnsinfo_;
}
inline ::micromsg::CDNDnsInfo* GetCDNDnsResponse::release_dnsinfo() {
  // @@protoc_insertion_point(field_release:micromsg.GetCDNDnsResponse.DnsInfo)
  clear_has_dnsinfo();
  ::micromsg::CDNDnsInfo* temp = dnsinfo_;
  dnsinfo_ = NULL;
  return temp;
}
inline void GetCDNDnsResponse::set_allocated_dnsinfo(::micromsg::CDNDnsInfo* dnsinfo) {
  delete dnsinfo_;
  dnsinfo_ = dnsinfo;
  if (dnsinfo) {
    set_has_dnsinfo();
  } else {
    clear_has_dnsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCDNDnsResponse.DnsInfo)
}

// optional .micromsg.CDNDnsInfo SnsDnsInfo = 3;
inline bool GetCDNDnsResponse::has_snsdnsinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetCDNDnsResponse::set_has_snsdnsinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetCDNDnsResponse::clear_has_snsdnsinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetCDNDnsResponse::clear_snsdnsinfo() {
  if (snsdnsinfo_ != NULL) snsdnsinfo_->::micromsg::CDNDnsInfo::Clear();
  clear_has_snsdnsinfo();
}
inline const ::micromsg::CDNDnsInfo& GetCDNDnsResponse::snsdnsinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCDNDnsResponse.SnsDnsInfo)
  return snsdnsinfo_ != NULL ? *snsdnsinfo_
                         : *::micromsg::CDNDnsInfo::internal_default_instance();
}
inline ::micromsg::CDNDnsInfo* GetCDNDnsResponse::mutable_snsdnsinfo() {
  set_has_snsdnsinfo();
  if (snsdnsinfo_ == NULL) {
    snsdnsinfo_ = new ::micromsg::CDNDnsInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCDNDnsResponse.SnsDnsInfo)
  return snsdnsinfo_;
}
inline ::micromsg::CDNDnsInfo* GetCDNDnsResponse::release_snsdnsinfo() {
  // @@protoc_insertion_point(field_release:micromsg.GetCDNDnsResponse.SnsDnsInfo)
  clear_has_snsdnsinfo();
  ::micromsg::CDNDnsInfo* temp = snsdnsinfo_;
  snsdnsinfo_ = NULL;
  return temp;
}
inline void GetCDNDnsResponse::set_allocated_snsdnsinfo(::micromsg::CDNDnsInfo* snsdnsinfo) {
  delete snsdnsinfo_;
  snsdnsinfo_ = snsdnsinfo;
  if (snsdnsinfo) {
    set_has_snsdnsinfo();
  } else {
    clear_has_snsdnsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCDNDnsResponse.SnsDnsInfo)
}

// optional .micromsg.CDNDnsInfo AppDnsInfo = 4;
inline bool GetCDNDnsResponse::has_appdnsinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetCDNDnsResponse::set_has_appdnsinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetCDNDnsResponse::clear_has_appdnsinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetCDNDnsResponse::clear_appdnsinfo() {
  if (appdnsinfo_ != NULL) appdnsinfo_->::micromsg::CDNDnsInfo::Clear();
  clear_has_appdnsinfo();
}
inline const ::micromsg::CDNDnsInfo& GetCDNDnsResponse::appdnsinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCDNDnsResponse.AppDnsInfo)
  return appdnsinfo_ != NULL ? *appdnsinfo_
                         : *::micromsg::CDNDnsInfo::internal_default_instance();
}
inline ::micromsg::CDNDnsInfo* GetCDNDnsResponse::mutable_appdnsinfo() {
  set_has_appdnsinfo();
  if (appdnsinfo_ == NULL) {
    appdnsinfo_ = new ::micromsg::CDNDnsInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCDNDnsResponse.AppDnsInfo)
  return appdnsinfo_;
}
inline ::micromsg::CDNDnsInfo* GetCDNDnsResponse::release_appdnsinfo() {
  // @@protoc_insertion_point(field_release:micromsg.GetCDNDnsResponse.AppDnsInfo)
  clear_has_appdnsinfo();
  ::micromsg::CDNDnsInfo* temp = appdnsinfo_;
  appdnsinfo_ = NULL;
  return temp;
}
inline void GetCDNDnsResponse::set_allocated_appdnsinfo(::micromsg::CDNDnsInfo* appdnsinfo) {
  delete appdnsinfo_;
  appdnsinfo_ = appdnsinfo;
  if (appdnsinfo) {
    set_has_appdnsinfo();
  } else {
    clear_has_appdnsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCDNDnsResponse.AppDnsInfo)
}

// optional .micromsg.SKBuiltinBuffer_t CDNDnsRuleBuf = 5;
inline bool GetCDNDnsResponse::has_cdndnsrulebuf() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetCDNDnsResponse::set_has_cdndnsrulebuf() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetCDNDnsResponse::clear_has_cdndnsrulebuf() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetCDNDnsResponse::clear_cdndnsrulebuf() {
  if (cdndnsrulebuf_ != NULL) cdndnsrulebuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_cdndnsrulebuf();
}
inline const ::micromsg::SKBuiltinBuffer_t& GetCDNDnsResponse::cdndnsrulebuf() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCDNDnsResponse.CDNDnsRuleBuf)
  return cdndnsrulebuf_ != NULL ? *cdndnsrulebuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* GetCDNDnsResponse::mutable_cdndnsrulebuf() {
  set_has_cdndnsrulebuf();
  if (cdndnsrulebuf_ == NULL) {
    cdndnsrulebuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCDNDnsResponse.CDNDnsRuleBuf)
  return cdndnsrulebuf_;
}
inline ::micromsg::SKBuiltinBuffer_t* GetCDNDnsResponse::release_cdndnsrulebuf() {
  // @@protoc_insertion_point(field_release:micromsg.GetCDNDnsResponse.CDNDnsRuleBuf)
  clear_has_cdndnsrulebuf();
  ::micromsg::SKBuiltinBuffer_t* temp = cdndnsrulebuf_;
  cdndnsrulebuf_ = NULL;
  return temp;
}
inline void GetCDNDnsResponse::set_allocated_cdndnsrulebuf(::micromsg::SKBuiltinBuffer_t* cdndnsrulebuf) {
  delete cdndnsrulebuf_;
  cdndnsrulebuf_ = cdndnsrulebuf;
  if (cdndnsrulebuf) {
    set_has_cdndnsrulebuf();
  } else {
    clear_has_cdndnsrulebuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCDNDnsResponse.CDNDnsRuleBuf)
}

// optional .micromsg.SKBuiltinBuffer_t FakeCDNDnsRuleBuf = 6;
inline bool GetCDNDnsResponse::has_fakecdndnsrulebuf() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetCDNDnsResponse::set_has_fakecdndnsrulebuf() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetCDNDnsResponse::clear_has_fakecdndnsrulebuf() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetCDNDnsResponse::clear_fakecdndnsrulebuf() {
  if (fakecdndnsrulebuf_ != NULL) fakecdndnsrulebuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_fakecdndnsrulebuf();
}
inline const ::micromsg::SKBuiltinBuffer_t& GetCDNDnsResponse::fakecdndnsrulebuf() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCDNDnsResponse.FakeCDNDnsRuleBuf)
  return fakecdndnsrulebuf_ != NULL ? *fakecdndnsrulebuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* GetCDNDnsResponse::mutable_fakecdndnsrulebuf() {
  set_has_fakecdndnsrulebuf();
  if (fakecdndnsrulebuf_ == NULL) {
    fakecdndnsrulebuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCDNDnsResponse.FakeCDNDnsRuleBuf)
  return fakecdndnsrulebuf_;
}
inline ::micromsg::SKBuiltinBuffer_t* GetCDNDnsResponse::release_fakecdndnsrulebuf() {
  // @@protoc_insertion_point(field_release:micromsg.GetCDNDnsResponse.FakeCDNDnsRuleBuf)
  clear_has_fakecdndnsrulebuf();
  ::micromsg::SKBuiltinBuffer_t* temp = fakecdndnsrulebuf_;
  fakecdndnsrulebuf_ = NULL;
  return temp;
}
inline void GetCDNDnsResponse::set_allocated_fakecdndnsrulebuf(::micromsg::SKBuiltinBuffer_t* fakecdndnsrulebuf) {
  delete fakecdndnsrulebuf_;
  fakecdndnsrulebuf_ = fakecdndnsrulebuf;
  if (fakecdndnsrulebuf) {
    set_has_fakecdndnsrulebuf();
  } else {
    clear_has_fakecdndnsrulebuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCDNDnsResponse.FakeCDNDnsRuleBuf)
}

// optional .micromsg.CDNDnsInfo FakeDnsInfo = 7;
inline bool GetCDNDnsResponse::has_fakednsinfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetCDNDnsResponse::set_has_fakednsinfo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetCDNDnsResponse::clear_has_fakednsinfo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetCDNDnsResponse::clear_fakednsinfo() {
  if (fakednsinfo_ != NULL) fakednsinfo_->::micromsg::CDNDnsInfo::Clear();
  clear_has_fakednsinfo();
}
inline const ::micromsg::CDNDnsInfo& GetCDNDnsResponse::fakednsinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCDNDnsResponse.FakeDnsInfo)
  return fakednsinfo_ != NULL ? *fakednsinfo_
                         : *::micromsg::CDNDnsInfo::internal_default_instance();
}
inline ::micromsg::CDNDnsInfo* GetCDNDnsResponse::mutable_fakednsinfo() {
  set_has_fakednsinfo();
  if (fakednsinfo_ == NULL) {
    fakednsinfo_ = new ::micromsg::CDNDnsInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCDNDnsResponse.FakeDnsInfo)
  return fakednsinfo_;
}
inline ::micromsg::CDNDnsInfo* GetCDNDnsResponse::release_fakednsinfo() {
  // @@protoc_insertion_point(field_release:micromsg.GetCDNDnsResponse.FakeDnsInfo)
  clear_has_fakednsinfo();
  ::micromsg::CDNDnsInfo* temp = fakednsinfo_;
  fakednsinfo_ = NULL;
  return temp;
}
inline void GetCDNDnsResponse::set_allocated_fakednsinfo(::micromsg::CDNDnsInfo* fakednsinfo) {
  delete fakednsinfo_;
  fakednsinfo_ = fakednsinfo;
  if (fakednsinfo) {
    set_has_fakednsinfo();
  } else {
    clear_has_fakednsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCDNDnsResponse.FakeDnsInfo)
}

// -------------------------------------------------------------------

// EmojiUploadInfoReq

// optional string MD5 = 1;
inline bool EmojiUploadInfoReq::has_md5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmojiUploadInfoReq::set_has_md5() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmojiUploadInfoReq::clear_has_md5() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmojiUploadInfoReq::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
inline const ::std::string& EmojiUploadInfoReq::md5() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.MD5)
  return md5_.GetNoArena();
}
inline void EmojiUploadInfoReq::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoReq.MD5)
}
#if LANG_CXX11
inline void EmojiUploadInfoReq::set_md5(::std::string&& value) {
  set_has_md5();
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiUploadInfoReq.MD5)
}
#endif
inline void EmojiUploadInfoReq::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiUploadInfoReq.MD5)
}
inline void EmojiUploadInfoReq::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiUploadInfoReq.MD5)
}
inline ::std::string* EmojiUploadInfoReq::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiUploadInfoReq.MD5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmojiUploadInfoReq::release_md5() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiUploadInfoReq.MD5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmojiUploadInfoReq::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiUploadInfoReq.MD5)
}

// required int32 StartPos = 2;
inline bool EmojiUploadInfoReq::has_startpos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EmojiUploadInfoReq::set_has_startpos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EmojiUploadInfoReq::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EmojiUploadInfoReq::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
inline ::google::protobuf::int32 EmojiUploadInfoReq::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.StartPos)
  return startpos_;
}
inline void EmojiUploadInfoReq::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoReq.StartPos)
}

// required int32 TotalLen = 3;
inline bool EmojiUploadInfoReq::has_totallen() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EmojiUploadInfoReq::set_has_totallen() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EmojiUploadInfoReq::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EmojiUploadInfoReq::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
inline ::google::protobuf::int32 EmojiUploadInfoReq::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.TotalLen)
  return totallen_;
}
inline void EmojiUploadInfoReq::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoReq.TotalLen)
}

// required .micromsg.SKBuiltinBuffer_t EmojiBuffer = 4;
inline bool EmojiUploadInfoReq::has_emojibuffer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EmojiUploadInfoReq::set_has_emojibuffer() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EmojiUploadInfoReq::clear_has_emojibuffer() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EmojiUploadInfoReq::clear_emojibuffer() {
  if (emojibuffer_ != NULL) emojibuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_emojibuffer();
}
inline const ::micromsg::SKBuiltinBuffer_t& EmojiUploadInfoReq::emojibuffer() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.EmojiBuffer)
  return emojibuffer_ != NULL ? *emojibuffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* EmojiUploadInfoReq::mutable_emojibuffer() {
  set_has_emojibuffer();
  if (emojibuffer_ == NULL) {
    emojibuffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiUploadInfoReq.EmojiBuffer)
  return emojibuffer_;
}
inline ::micromsg::SKBuiltinBuffer_t* EmojiUploadInfoReq::release_emojibuffer() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiUploadInfoReq.EmojiBuffer)
  clear_has_emojibuffer();
  ::micromsg::SKBuiltinBuffer_t* temp = emojibuffer_;
  emojibuffer_ = NULL;
  return temp;
}
inline void EmojiUploadInfoReq::set_allocated_emojibuffer(::micromsg::SKBuiltinBuffer_t* emojibuffer) {
  delete emojibuffer_;
  emojibuffer_ = emojibuffer;
  if (emojibuffer) {
    set_has_emojibuffer();
  } else {
    clear_has_emojibuffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiUploadInfoReq.EmojiBuffer)
}

// required int32 Type = 5;
inline bool EmojiUploadInfoReq::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EmojiUploadInfoReq::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EmojiUploadInfoReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EmojiUploadInfoReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 EmojiUploadInfoReq::type() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.Type)
  return type_;
}
inline void EmojiUploadInfoReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoReq.Type)
}

// optional string ToUserName = 6;
inline bool EmojiUploadInfoReq::has_tousername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmojiUploadInfoReq::set_has_tousername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmojiUploadInfoReq::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmojiUploadInfoReq::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
inline const ::std::string& EmojiUploadInfoReq::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.ToUserName)
  return tousername_.GetNoArena();
}
inline void EmojiUploadInfoReq::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoReq.ToUserName)
}
#if LANG_CXX11
inline void EmojiUploadInfoReq::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiUploadInfoReq.ToUserName)
}
#endif
inline void EmojiUploadInfoReq::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiUploadInfoReq.ToUserName)
}
inline void EmojiUploadInfoReq::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiUploadInfoReq.ToUserName)
}
inline ::std::string* EmojiUploadInfoReq::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiUploadInfoReq.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmojiUploadInfoReq::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiUploadInfoReq.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmojiUploadInfoReq::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiUploadInfoReq.ToUserName)
}

// optional string ExternXML = 7;
inline bool EmojiUploadInfoReq::has_externxml() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmojiUploadInfoReq::set_has_externxml() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmojiUploadInfoReq::clear_has_externxml() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmojiUploadInfoReq::clear_externxml() {
  externxml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_externxml();
}
inline const ::std::string& EmojiUploadInfoReq::externxml() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.ExternXML)
  return externxml_.GetNoArena();
}
inline void EmojiUploadInfoReq::set_externxml(const ::std::string& value) {
  set_has_externxml();
  externxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoReq.ExternXML)
}
#if LANG_CXX11
inline void EmojiUploadInfoReq::set_externxml(::std::string&& value) {
  set_has_externxml();
  externxml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiUploadInfoReq.ExternXML)
}
#endif
inline void EmojiUploadInfoReq::set_externxml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_externxml();
  externxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiUploadInfoReq.ExternXML)
}
inline void EmojiUploadInfoReq::set_externxml(const char* value, size_t size) {
  set_has_externxml();
  externxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiUploadInfoReq.ExternXML)
}
inline ::std::string* EmojiUploadInfoReq::mutable_externxml() {
  set_has_externxml();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiUploadInfoReq.ExternXML)
  return externxml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmojiUploadInfoReq::release_externxml() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiUploadInfoReq.ExternXML)
  clear_has_externxml();
  return externxml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmojiUploadInfoReq::set_allocated_externxml(::std::string* externxml) {
  if (externxml != NULL) {
    set_has_externxml();
  } else {
    clear_has_externxml();
  }
  externxml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), externxml);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiUploadInfoReq.ExternXML)
}

// optional string Report = 8;
inline bool EmojiUploadInfoReq::has_report() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EmojiUploadInfoReq::set_has_report() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EmojiUploadInfoReq::clear_has_report() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EmojiUploadInfoReq::clear_report() {
  report_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_report();
}
inline const ::std::string& EmojiUploadInfoReq::report() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.Report)
  return report_.GetNoArena();
}
inline void EmojiUploadInfoReq::set_report(const ::std::string& value) {
  set_has_report();
  report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoReq.Report)
}
#if LANG_CXX11
inline void EmojiUploadInfoReq::set_report(::std::string&& value) {
  set_has_report();
  report_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiUploadInfoReq.Report)
}
#endif
inline void EmojiUploadInfoReq::set_report(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_report();
  report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiUploadInfoReq.Report)
}
inline void EmojiUploadInfoReq::set_report(const char* value, size_t size) {
  set_has_report();
  report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiUploadInfoReq.Report)
}
inline ::std::string* EmojiUploadInfoReq::mutable_report() {
  set_has_report();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiUploadInfoReq.Report)
  return report_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmojiUploadInfoReq::release_report() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiUploadInfoReq.Report)
  clear_has_report();
  return report_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmojiUploadInfoReq::set_allocated_report(::std::string* report) {
  if (report != NULL) {
    set_has_report();
  } else {
    clear_has_report();
  }
  report_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), report);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiUploadInfoReq.Report)
}

// optional string ClientMsgID = 9;
inline bool EmojiUploadInfoReq::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EmojiUploadInfoReq::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EmojiUploadInfoReq::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EmojiUploadInfoReq::clear_clientmsgid() {
  clientmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientmsgid();
}
inline const ::std::string& EmojiUploadInfoReq::clientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.ClientMsgID)
  return clientmsgid_.GetNoArena();
}
inline void EmojiUploadInfoReq::set_clientmsgid(const ::std::string& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoReq.ClientMsgID)
}
#if LANG_CXX11
inline void EmojiUploadInfoReq::set_clientmsgid(::std::string&& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiUploadInfoReq.ClientMsgID)
}
#endif
inline void EmojiUploadInfoReq::set_clientmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiUploadInfoReq.ClientMsgID)
}
inline void EmojiUploadInfoReq::set_clientmsgid(const char* value, size_t size) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiUploadInfoReq.ClientMsgID)
}
inline ::std::string* EmojiUploadInfoReq::mutable_clientmsgid() {
  set_has_clientmsgid();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiUploadInfoReq.ClientMsgID)
  return clientmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmojiUploadInfoReq::release_clientmsgid() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiUploadInfoReq.ClientMsgID)
  clear_has_clientmsgid();
  return clientmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmojiUploadInfoReq::set_allocated_clientmsgid(::std::string* clientmsgid) {
  if (clientmsgid != NULL) {
    set_has_clientmsgid();
  } else {
    clear_has_clientmsgid();
  }
  clientmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientmsgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiUploadInfoReq.ClientMsgID)
}

// optional string MsgSource = 10;
inline bool EmojiUploadInfoReq::has_msgsource() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EmojiUploadInfoReq::set_has_msgsource() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EmojiUploadInfoReq::clear_has_msgsource() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EmojiUploadInfoReq::clear_msgsource() {
  msgsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgsource();
}
inline const ::std::string& EmojiUploadInfoReq::msgsource() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.MsgSource)
  return msgsource_.GetNoArena();
}
inline void EmojiUploadInfoReq::set_msgsource(const ::std::string& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoReq.MsgSource)
}
#if LANG_CXX11
inline void EmojiUploadInfoReq::set_msgsource(::std::string&& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiUploadInfoReq.MsgSource)
}
#endif
inline void EmojiUploadInfoReq::set_msgsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiUploadInfoReq.MsgSource)
}
inline void EmojiUploadInfoReq::set_msgsource(const char* value, size_t size) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiUploadInfoReq.MsgSource)
}
inline ::std::string* EmojiUploadInfoReq::mutable_msgsource() {
  set_has_msgsource();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiUploadInfoReq.MsgSource)
  return msgsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmojiUploadInfoReq::release_msgsource() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiUploadInfoReq.MsgSource)
  clear_has_msgsource();
  return msgsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmojiUploadInfoReq::set_allocated_msgsource(::std::string* msgsource) {
  if (msgsource != NULL) {
    set_has_msgsource();
  } else {
    clear_has_msgsource();
  }
  msgsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgsource);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiUploadInfoReq.MsgSource)
}

// optional int32 NewXmlFlag = 11;
inline bool EmojiUploadInfoReq::has_newxmlflag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EmojiUploadInfoReq::set_has_newxmlflag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EmojiUploadInfoReq::clear_has_newxmlflag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EmojiUploadInfoReq::clear_newxmlflag() {
  newxmlflag_ = 0;
  clear_has_newxmlflag();
}
inline ::google::protobuf::int32 EmojiUploadInfoReq::newxmlflag() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoReq.NewXmlFlag)
  return newxmlflag_;
}
inline void EmojiUploadInfoReq::set_newxmlflag(::google::protobuf::int32 value) {
  set_has_newxmlflag();
  newxmlflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoReq.NewXmlFlag)
}

// -------------------------------------------------------------------

// UploadEmojiRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool UploadEmojiRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadEmojiRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadEmojiRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadEmojiRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& UploadEmojiRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* UploadEmojiRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadEmojiRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* UploadEmojiRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.UploadEmojiRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void UploadEmojiRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadEmojiRequest.BaseRequest)
}

// required int32 EmojiItemCount = 2;
inline bool UploadEmojiRequest::has_emojiitemcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadEmojiRequest::set_has_emojiitemcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadEmojiRequest::clear_has_emojiitemcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadEmojiRequest::clear_emojiitemcount() {
  emojiitemcount_ = 0;
  clear_has_emojiitemcount();
}
inline ::google::protobuf::int32 UploadEmojiRequest::emojiitemcount() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiRequest.EmojiItemCount)
  return emojiitemcount_;
}
inline void UploadEmojiRequest::set_emojiitemcount(::google::protobuf::int32 value) {
  set_has_emojiitemcount();
  emojiitemcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadEmojiRequest.EmojiItemCount)
}

// repeated .micromsg.EmojiUploadInfoReq EmojiItem = 3;
inline int UploadEmojiRequest::emojiitem_size() const {
  return emojiitem_.size();
}
inline void UploadEmojiRequest::clear_emojiitem() {
  emojiitem_.Clear();
}
inline const ::micromsg::EmojiUploadInfoReq& UploadEmojiRequest::emojiitem(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiRequest.EmojiItem)
  return emojiitem_.Get(index);
}
inline ::micromsg::EmojiUploadInfoReq* UploadEmojiRequest::mutable_emojiitem(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.UploadEmojiRequest.EmojiItem)
  return emojiitem_.Mutable(index);
}
inline ::micromsg::EmojiUploadInfoReq* UploadEmojiRequest::add_emojiitem() {
  // @@protoc_insertion_point(field_add:micromsg.UploadEmojiRequest.EmojiItem)
  return emojiitem_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiUploadInfoReq >*
UploadEmojiRequest::mutable_emojiitem() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.UploadEmojiRequest.EmojiItem)
  return &emojiitem_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiUploadInfoReq >&
UploadEmojiRequest::emojiitem() const {
  // @@protoc_insertion_point(field_list:micromsg.UploadEmojiRequest.EmojiItem)
  return emojiitem_;
}

// optional uint32 ReqTime = 4;
inline bool UploadEmojiRequest::has_reqtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadEmojiRequest::set_has_reqtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadEmojiRequest::clear_has_reqtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadEmojiRequest::clear_reqtime() {
  reqtime_ = 0u;
  clear_has_reqtime();
}
inline ::google::protobuf::uint32 UploadEmojiRequest::reqtime() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiRequest.ReqTime)
  return reqtime_;
}
inline void UploadEmojiRequest::set_reqtime(::google::protobuf::uint32 value) {
  set_has_reqtime();
  reqtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadEmojiRequest.ReqTime)
}

// -------------------------------------------------------------------

// EmojiUploadInfoResp

// required int32 Ret = 1;
inline bool EmojiUploadInfoResp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmojiUploadInfoResp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmojiUploadInfoResp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmojiUploadInfoResp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 EmojiUploadInfoResp::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoResp.Ret)
  return ret_;
}
inline void EmojiUploadInfoResp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoResp.Ret)
}

// required int32 StartPos = 2;
inline bool EmojiUploadInfoResp::has_startpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmojiUploadInfoResp::set_has_startpos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmojiUploadInfoResp::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmojiUploadInfoResp::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
inline ::google::protobuf::int32 EmojiUploadInfoResp::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoResp.StartPos)
  return startpos_;
}
inline void EmojiUploadInfoResp::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoResp.StartPos)
}

// required int32 TotalLen = 3;
inline bool EmojiUploadInfoResp::has_totallen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EmojiUploadInfoResp::set_has_totallen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EmojiUploadInfoResp::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EmojiUploadInfoResp::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
inline ::google::protobuf::int32 EmojiUploadInfoResp::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoResp.TotalLen)
  return totallen_;
}
inline void EmojiUploadInfoResp::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoResp.TotalLen)
}

// optional string MD5 = 4;
inline bool EmojiUploadInfoResp::has_md5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmojiUploadInfoResp::set_has_md5() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmojiUploadInfoResp::clear_has_md5() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmojiUploadInfoResp::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
inline const ::std::string& EmojiUploadInfoResp::md5() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoResp.MD5)
  return md5_.GetNoArena();
}
inline void EmojiUploadInfoResp::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoResp.MD5)
}
#if LANG_CXX11
inline void EmojiUploadInfoResp::set_md5(::std::string&& value) {
  set_has_md5();
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiUploadInfoResp.MD5)
}
#endif
inline void EmojiUploadInfoResp::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiUploadInfoResp.MD5)
}
inline void EmojiUploadInfoResp::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiUploadInfoResp.MD5)
}
inline ::std::string* EmojiUploadInfoResp::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiUploadInfoResp.MD5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmojiUploadInfoResp::release_md5() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiUploadInfoResp.MD5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmojiUploadInfoResp::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiUploadInfoResp.MD5)
}

// required uint32 MsgID = 5;
inline bool EmojiUploadInfoResp::has_msgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EmojiUploadInfoResp::set_has_msgid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EmojiUploadInfoResp::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EmojiUploadInfoResp::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 EmojiUploadInfoResp::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoResp.MsgID)
  return msgid_;
}
inline void EmojiUploadInfoResp::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoResp.MsgID)
}

// optional uint64 NewMsgId = 6;
inline bool EmojiUploadInfoResp::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EmojiUploadInfoResp::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EmojiUploadInfoResp::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EmojiUploadInfoResp::clear_newmsgid() {
  newmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_newmsgid();
}
inline ::google::protobuf::uint64 EmojiUploadInfoResp::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiUploadInfoResp.NewMsgId)
  return newmsgid_;
}
inline void EmojiUploadInfoResp::set_newmsgid(::google::protobuf::uint64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiUploadInfoResp.NewMsgId)
}

// -------------------------------------------------------------------

// UploadEmojiResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool UploadEmojiResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadEmojiResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadEmojiResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadEmojiResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& UploadEmojiResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* UploadEmojiResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadEmojiResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* UploadEmojiResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UploadEmojiResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void UploadEmojiResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadEmojiResponse.BaseResponse)
}

// required int32 EmojiItemCount = 2;
inline bool UploadEmojiResponse::has_emojiitemcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadEmojiResponse::set_has_emojiitemcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadEmojiResponse::clear_has_emojiitemcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadEmojiResponse::clear_emojiitemcount() {
  emojiitemcount_ = 0;
  clear_has_emojiitemcount();
}
inline ::google::protobuf::int32 UploadEmojiResponse::emojiitemcount() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiResponse.EmojiItemCount)
  return emojiitemcount_;
}
inline void UploadEmojiResponse::set_emojiitemcount(::google::protobuf::int32 value) {
  set_has_emojiitemcount();
  emojiitemcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadEmojiResponse.EmojiItemCount)
}

// repeated .micromsg.EmojiUploadInfoResp EmojiItem = 3;
inline int UploadEmojiResponse::emojiitem_size() const {
  return emojiitem_.size();
}
inline void UploadEmojiResponse::clear_emojiitem() {
  emojiitem_.Clear();
}
inline const ::micromsg::EmojiUploadInfoResp& UploadEmojiResponse::emojiitem(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.UploadEmojiResponse.EmojiItem)
  return emojiitem_.Get(index);
}
inline ::micromsg::EmojiUploadInfoResp* UploadEmojiResponse::mutable_emojiitem(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.UploadEmojiResponse.EmojiItem)
  return emojiitem_.Mutable(index);
}
inline ::micromsg::EmojiUploadInfoResp* UploadEmojiResponse::add_emojiitem() {
  // @@protoc_insertion_point(field_add:micromsg.UploadEmojiResponse.EmojiItem)
  return emojiitem_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiUploadInfoResp >*
UploadEmojiResponse::mutable_emojiitem() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.UploadEmojiResponse.EmojiItem)
  return &emojiitem_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiUploadInfoResp >&
UploadEmojiResponse::emojiitem() const {
  // @@protoc_insertion_point(field_list:micromsg.UploadEmojiResponse.EmojiItem)
  return emojiitem_;
}

// -------------------------------------------------------------------

// EmojiDownloadInfoReq

// optional string ID = 1;
inline bool EmojiDownloadInfoReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmojiDownloadInfoReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmojiDownloadInfoReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmojiDownloadInfoReq::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& EmojiDownloadInfoReq::id() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiDownloadInfoReq.ID)
  return id_.GetNoArena();
}
inline void EmojiDownloadInfoReq::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiDownloadInfoReq.ID)
}
#if LANG_CXX11
inline void EmojiDownloadInfoReq::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiDownloadInfoReq.ID)
}
#endif
inline void EmojiDownloadInfoReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiDownloadInfoReq.ID)
}
inline void EmojiDownloadInfoReq::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiDownloadInfoReq.ID)
}
inline ::std::string* EmojiDownloadInfoReq::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiDownloadInfoReq.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmojiDownloadInfoReq::release_id() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiDownloadInfoReq.ID)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmojiDownloadInfoReq::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiDownloadInfoReq.ID)
}

// required int32 StartPos = 2;
inline bool EmojiDownloadInfoReq::has_startpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmojiDownloadInfoReq::set_has_startpos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmojiDownloadInfoReq::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmojiDownloadInfoReq::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
inline ::google::protobuf::int32 EmojiDownloadInfoReq::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiDownloadInfoReq.StartPos)
  return startpos_;
}
inline void EmojiDownloadInfoReq::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiDownloadInfoReq.StartPos)
}

// required int32 TotalLen = 3;
inline bool EmojiDownloadInfoReq::has_totallen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EmojiDownloadInfoReq::set_has_totallen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EmojiDownloadInfoReq::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EmojiDownloadInfoReq::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
inline ::google::protobuf::int32 EmojiDownloadInfoReq::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiDownloadInfoReq.TotalLen)
  return totallen_;
}
inline void EmojiDownloadInfoReq::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiDownloadInfoReq.TotalLen)
}

// optional string MD5 = 4;
inline bool EmojiDownloadInfoReq::has_md5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmojiDownloadInfoReq::set_has_md5() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmojiDownloadInfoReq::clear_has_md5() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmojiDownloadInfoReq::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
inline const ::std::string& EmojiDownloadInfoReq::md5() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiDownloadInfoReq.MD5)
  return md5_.GetNoArena();
}
inline void EmojiDownloadInfoReq::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiDownloadInfoReq.MD5)
}
#if LANG_CXX11
inline void EmojiDownloadInfoReq::set_md5(::std::string&& value) {
  set_has_md5();
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiDownloadInfoReq.MD5)
}
#endif
inline void EmojiDownloadInfoReq::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiDownloadInfoReq.MD5)
}
inline void EmojiDownloadInfoReq::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiDownloadInfoReq.MD5)
}
inline ::std::string* EmojiDownloadInfoReq::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiDownloadInfoReq.MD5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmojiDownloadInfoReq::release_md5() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiDownloadInfoReq.MD5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmojiDownloadInfoReq::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiDownloadInfoReq.MD5)
}

// -------------------------------------------------------------------

// DownloadEmojiRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool DownloadEmojiRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadEmojiRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadEmojiRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadEmojiRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& DownloadEmojiRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadEmojiRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* DownloadEmojiRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadEmojiRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* DownloadEmojiRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadEmojiRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void DownloadEmojiRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadEmojiRequest.BaseRequest)
}

// required int32 EmojiItemCount = 2;
inline bool DownloadEmojiRequest::has_emojiitemcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadEmojiRequest::set_has_emojiitemcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadEmojiRequest::clear_has_emojiitemcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadEmojiRequest::clear_emojiitemcount() {
  emojiitemcount_ = 0;
  clear_has_emojiitemcount();
}
inline ::google::protobuf::int32 DownloadEmojiRequest::emojiitemcount() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadEmojiRequest.EmojiItemCount)
  return emojiitemcount_;
}
inline void DownloadEmojiRequest::set_emojiitemcount(::google::protobuf::int32 value) {
  set_has_emojiitemcount();
  emojiitemcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadEmojiRequest.EmojiItemCount)
}

// repeated .micromsg.EmojiDownloadInfoReq EmojiItem = 3;
inline int DownloadEmojiRequest::emojiitem_size() const {
  return emojiitem_.size();
}
inline void DownloadEmojiRequest::clear_emojiitem() {
  emojiitem_.Clear();
}
inline const ::micromsg::EmojiDownloadInfoReq& DownloadEmojiRequest::emojiitem(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadEmojiRequest.EmojiItem)
  return emojiitem_.Get(index);
}
inline ::micromsg::EmojiDownloadInfoReq* DownloadEmojiRequest::mutable_emojiitem(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadEmojiRequest.EmojiItem)
  return emojiitem_.Mutable(index);
}
inline ::micromsg::EmojiDownloadInfoReq* DownloadEmojiRequest::add_emojiitem() {
  // @@protoc_insertion_point(field_add:micromsg.DownloadEmojiRequest.EmojiItem)
  return emojiitem_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiDownloadInfoReq >*
DownloadEmojiRequest::mutable_emojiitem() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.DownloadEmojiRequest.EmojiItem)
  return &emojiitem_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiDownloadInfoReq >&
DownloadEmojiRequest::emojiitem() const {
  // @@protoc_insertion_point(field_list:micromsg.DownloadEmojiRequest.EmojiItem)
  return emojiitem_;
}

// -------------------------------------------------------------------

// EmojiDownloadInfoResp

// required int32 Ret = 1;
inline bool EmojiDownloadInfoResp::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EmojiDownloadInfoResp::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EmojiDownloadInfoResp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EmojiDownloadInfoResp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 EmojiDownloadInfoResp::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiDownloadInfoResp.Ret)
  return ret_;
}
inline void EmojiDownloadInfoResp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiDownloadInfoResp.Ret)
}

// required int32 StartPos = 2;
inline bool EmojiDownloadInfoResp::has_startpos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EmojiDownloadInfoResp::set_has_startpos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EmojiDownloadInfoResp::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EmojiDownloadInfoResp::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
inline ::google::protobuf::int32 EmojiDownloadInfoResp::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiDownloadInfoResp.StartPos)
  return startpos_;
}
inline void EmojiDownloadInfoResp::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiDownloadInfoResp.StartPos)
}

// required int32 TotalLen = 3;
inline bool EmojiDownloadInfoResp::has_totallen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EmojiDownloadInfoResp::set_has_totallen() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EmojiDownloadInfoResp::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EmojiDownloadInfoResp::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
inline ::google::protobuf::int32 EmojiDownloadInfoResp::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiDownloadInfoResp.TotalLen)
  return totallen_;
}
inline void EmojiDownloadInfoResp::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmojiDownloadInfoResp.TotalLen)
}

// required .micromsg.SKBuiltinBuffer_t EmojiBuffer = 4;
inline bool EmojiDownloadInfoResp::has_emojibuffer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmojiDownloadInfoResp::set_has_emojibuffer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmojiDownloadInfoResp::clear_has_emojibuffer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmojiDownloadInfoResp::clear_emojibuffer() {
  if (emojibuffer_ != NULL) emojibuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_emojibuffer();
}
inline const ::micromsg::SKBuiltinBuffer_t& EmojiDownloadInfoResp::emojibuffer() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiDownloadInfoResp.EmojiBuffer)
  return emojibuffer_ != NULL ? *emojibuffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* EmojiDownloadInfoResp::mutable_emojibuffer() {
  set_has_emojibuffer();
  if (emojibuffer_ == NULL) {
    emojibuffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiDownloadInfoResp.EmojiBuffer)
  return emojibuffer_;
}
inline ::micromsg::SKBuiltinBuffer_t* EmojiDownloadInfoResp::release_emojibuffer() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiDownloadInfoResp.EmojiBuffer)
  clear_has_emojibuffer();
  ::micromsg::SKBuiltinBuffer_t* temp = emojibuffer_;
  emojibuffer_ = NULL;
  return temp;
}
inline void EmojiDownloadInfoResp::set_allocated_emojibuffer(::micromsg::SKBuiltinBuffer_t* emojibuffer) {
  delete emojibuffer_;
  emojibuffer_ = emojibuffer;
  if (emojibuffer) {
    set_has_emojibuffer();
  } else {
    clear_has_emojibuffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiDownloadInfoResp.EmojiBuffer)
}

// optional string MD5 = 5;
inline bool EmojiDownloadInfoResp::has_md5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmojiDownloadInfoResp::set_has_md5() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmojiDownloadInfoResp::clear_has_md5() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmojiDownloadInfoResp::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
inline const ::std::string& EmojiDownloadInfoResp::md5() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiDownloadInfoResp.MD5)
  return md5_.GetNoArena();
}
inline void EmojiDownloadInfoResp::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiDownloadInfoResp.MD5)
}
#if LANG_CXX11
inline void EmojiDownloadInfoResp::set_md5(::std::string&& value) {
  set_has_md5();
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiDownloadInfoResp.MD5)
}
#endif
inline void EmojiDownloadInfoResp::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiDownloadInfoResp.MD5)
}
inline void EmojiDownloadInfoResp::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiDownloadInfoResp.MD5)
}
inline ::std::string* EmojiDownloadInfoResp::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiDownloadInfoResp.MD5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmojiDownloadInfoResp::release_md5() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiDownloadInfoResp.MD5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmojiDownloadInfoResp::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiDownloadInfoResp.MD5)
}

// optional string ID = 6;
inline bool EmojiDownloadInfoResp::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmojiDownloadInfoResp::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmojiDownloadInfoResp::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmojiDownloadInfoResp::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& EmojiDownloadInfoResp::id() const {
  // @@protoc_insertion_point(field_get:micromsg.EmojiDownloadInfoResp.ID)
  return id_.GetNoArena();
}
inline void EmojiDownloadInfoResp::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmojiDownloadInfoResp.ID)
}
#if LANG_CXX11
inline void EmojiDownloadInfoResp::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmojiDownloadInfoResp.ID)
}
#endif
inline void EmojiDownloadInfoResp::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmojiDownloadInfoResp.ID)
}
inline void EmojiDownloadInfoResp::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmojiDownloadInfoResp.ID)
}
inline ::std::string* EmojiDownloadInfoResp::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:micromsg.EmojiDownloadInfoResp.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmojiDownloadInfoResp::release_id() {
  // @@protoc_insertion_point(field_release:micromsg.EmojiDownloadInfoResp.ID)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmojiDownloadInfoResp::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmojiDownloadInfoResp.ID)
}

// -------------------------------------------------------------------

// DownloadEmojiResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool DownloadEmojiResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadEmojiResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadEmojiResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadEmojiResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& DownloadEmojiResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadEmojiResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* DownloadEmojiResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadEmojiResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* DownloadEmojiResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadEmojiResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void DownloadEmojiResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadEmojiResponse.BaseResponse)
}

// required int32 EmojiItemCount = 2;
inline bool DownloadEmojiResponse::has_emojiitemcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadEmojiResponse::set_has_emojiitemcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadEmojiResponse::clear_has_emojiitemcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadEmojiResponse::clear_emojiitemcount() {
  emojiitemcount_ = 0;
  clear_has_emojiitemcount();
}
inline ::google::protobuf::int32 DownloadEmojiResponse::emojiitemcount() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadEmojiResponse.EmojiItemCount)
  return emojiitemcount_;
}
inline void DownloadEmojiResponse::set_emojiitemcount(::google::protobuf::int32 value) {
  set_has_emojiitemcount();
  emojiitemcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadEmojiResponse.EmojiItemCount)
}

// repeated .micromsg.EmojiDownloadInfoResp EmojiItem = 3;
inline int DownloadEmojiResponse::emojiitem_size() const {
  return emojiitem_.size();
}
inline void DownloadEmojiResponse::clear_emojiitem() {
  emojiitem_.Clear();
}
inline const ::micromsg::EmojiDownloadInfoResp& DownloadEmojiResponse::emojiitem(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadEmojiResponse.EmojiItem)
  return emojiitem_.Get(index);
}
inline ::micromsg::EmojiDownloadInfoResp* DownloadEmojiResponse::mutable_emojiitem(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadEmojiResponse.EmojiItem)
  return emojiitem_.Mutable(index);
}
inline ::micromsg::EmojiDownloadInfoResp* DownloadEmojiResponse::add_emojiitem() {
  // @@protoc_insertion_point(field_add:micromsg.DownloadEmojiResponse.EmojiItem)
  return emojiitem_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiDownloadInfoResp >*
DownloadEmojiResponse::mutable_emojiitem() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.DownloadEmojiResponse.EmojiItem)
  return &emojiitem_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::EmojiDownloadInfoResp >&
DownloadEmojiResponse::emojiitem() const {
  // @@protoc_insertion_point(field_list:micromsg.DownloadEmojiResponse.EmojiItem)
  return emojiitem_;
}

// -------------------------------------------------------------------

// DownloadVoiceRequest

// required uint32 MsgId = 1;
inline bool DownloadVoiceRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DownloadVoiceRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DownloadVoiceRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DownloadVoiceRequest::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 DownloadVoiceRequest::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceRequest.MsgId)
  return msgid_;
}
inline void DownloadVoiceRequest::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceRequest.MsgId)
}

// required uint32 Offset = 2;
inline bool DownloadVoiceRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DownloadVoiceRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DownloadVoiceRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DownloadVoiceRequest::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 DownloadVoiceRequest::offset() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceRequest.Offset)
  return offset_;
}
inline void DownloadVoiceRequest::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceRequest.Offset)
}

// required uint32 Length = 3;
inline bool DownloadVoiceRequest::has_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DownloadVoiceRequest::set_has_length() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DownloadVoiceRequest::clear_has_length() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DownloadVoiceRequest::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 DownloadVoiceRequest::length() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceRequest.Length)
  return length_;
}
inline void DownloadVoiceRequest::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceRequest.Length)
}

// optional string ClientMsgId = 4;
inline bool DownloadVoiceRequest::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadVoiceRequest::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadVoiceRequest::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadVoiceRequest::clear_clientmsgid() {
  clientmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientmsgid();
}
inline const ::std::string& DownloadVoiceRequest::clientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceRequest.ClientMsgId)
  return clientmsgid_.GetNoArena();
}
inline void DownloadVoiceRequest::set_clientmsgid(const ::std::string& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceRequest.ClientMsgId)
}
#if LANG_CXX11
inline void DownloadVoiceRequest::set_clientmsgid(::std::string&& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DownloadVoiceRequest.ClientMsgId)
}
#endif
inline void DownloadVoiceRequest::set_clientmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DownloadVoiceRequest.ClientMsgId)
}
inline void DownloadVoiceRequest::set_clientmsgid(const char* value, size_t size) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DownloadVoiceRequest.ClientMsgId)
}
inline ::std::string* DownloadVoiceRequest::mutable_clientmsgid() {
  set_has_clientmsgid();
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadVoiceRequest.ClientMsgId)
  return clientmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DownloadVoiceRequest::release_clientmsgid() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadVoiceRequest.ClientMsgId)
  clear_has_clientmsgid();
  return clientmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DownloadVoiceRequest::set_allocated_clientmsgid(::std::string* clientmsgid) {
  if (clientmsgid != NULL) {
    set_has_clientmsgid();
  } else {
    clear_has_clientmsgid();
  }
  clientmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientmsgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadVoiceRequest.ClientMsgId)
}

// required .micromsg.BaseRequest BaseRequest = 5;
inline bool DownloadVoiceRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DownloadVoiceRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DownloadVoiceRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DownloadVoiceRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& DownloadVoiceRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* DownloadVoiceRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadVoiceRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* DownloadVoiceRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadVoiceRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void DownloadVoiceRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadVoiceRequest.BaseRequest)
}

// optional uint64 NewMsgId = 6;
inline bool DownloadVoiceRequest::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DownloadVoiceRequest::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DownloadVoiceRequest::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DownloadVoiceRequest::clear_newmsgid() {
  newmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_newmsgid();
}
inline ::google::protobuf::uint64 DownloadVoiceRequest::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceRequest.NewMsgId)
  return newmsgid_;
}
inline void DownloadVoiceRequest::set_newmsgid(::google::protobuf::uint64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceRequest.NewMsgId)
}

// optional string ChatRoomName = 7;
inline bool DownloadVoiceRequest::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadVoiceRequest::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadVoiceRequest::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadVoiceRequest::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
inline const ::std::string& DownloadVoiceRequest::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceRequest.ChatRoomName)
  return chatroomname_.GetNoArena();
}
inline void DownloadVoiceRequest::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceRequest.ChatRoomName)
}
#if LANG_CXX11
inline void DownloadVoiceRequest::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DownloadVoiceRequest.ChatRoomName)
}
#endif
inline void DownloadVoiceRequest::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DownloadVoiceRequest.ChatRoomName)
}
inline void DownloadVoiceRequest::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DownloadVoiceRequest.ChatRoomName)
}
inline ::std::string* DownloadVoiceRequest::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadVoiceRequest.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DownloadVoiceRequest::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadVoiceRequest.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DownloadVoiceRequest::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadVoiceRequest.ChatRoomName)
}

// optional uint64 MasterBufId = 8;
inline bool DownloadVoiceRequest::has_masterbufid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DownloadVoiceRequest::set_has_masterbufid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DownloadVoiceRequest::clear_has_masterbufid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DownloadVoiceRequest::clear_masterbufid() {
  masterbufid_ = GOOGLE_ULONGLONG(0);
  clear_has_masterbufid();
}
inline ::google::protobuf::uint64 DownloadVoiceRequest::masterbufid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceRequest.MasterBufId)
  return masterbufid_;
}
inline void DownloadVoiceRequest::set_masterbufid(::google::protobuf::uint64 value) {
  set_has_masterbufid();
  masterbufid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceRequest.MasterBufId)
}

// -------------------------------------------------------------------

// DownloadVoiceResponse

// required uint32 MsgId = 1;
inline bool DownloadVoiceResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DownloadVoiceResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DownloadVoiceResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DownloadVoiceResponse::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 DownloadVoiceResponse::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceResponse.MsgId)
  return msgid_;
}
inline void DownloadVoiceResponse::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceResponse.MsgId)
}

// required uint32 Offset = 2;
inline bool DownloadVoiceResponse::has_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DownloadVoiceResponse::set_has_offset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DownloadVoiceResponse::clear_has_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DownloadVoiceResponse::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 DownloadVoiceResponse::offset() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceResponse.Offset)
  return offset_;
}
inline void DownloadVoiceResponse::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceResponse.Offset)
}

// required uint32 Length = 3;
inline bool DownloadVoiceResponse::has_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DownloadVoiceResponse::set_has_length() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DownloadVoiceResponse::clear_has_length() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DownloadVoiceResponse::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 DownloadVoiceResponse::length() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceResponse.Length)
  return length_;
}
inline void DownloadVoiceResponse::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceResponse.Length)
}

// required uint32 VoiceLength = 5;
inline bool DownloadVoiceResponse::has_voicelength() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DownloadVoiceResponse::set_has_voicelength() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DownloadVoiceResponse::clear_has_voicelength() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DownloadVoiceResponse::clear_voicelength() {
  voicelength_ = 0u;
  clear_has_voicelength();
}
inline ::google::protobuf::uint32 DownloadVoiceResponse::voicelength() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceResponse.VoiceLength)
  return voicelength_;
}
inline void DownloadVoiceResponse::set_voicelength(::google::protobuf::uint32 value) {
  set_has_voicelength();
  voicelength_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceResponse.VoiceLength)
}

// optional string ClientMsgId = 6;
inline bool DownloadVoiceResponse::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadVoiceResponse::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadVoiceResponse::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadVoiceResponse::clear_clientmsgid() {
  clientmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientmsgid();
}
inline const ::std::string& DownloadVoiceResponse::clientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceResponse.ClientMsgId)
  return clientmsgid_.GetNoArena();
}
inline void DownloadVoiceResponse::set_clientmsgid(const ::std::string& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceResponse.ClientMsgId)
}
#if LANG_CXX11
inline void DownloadVoiceResponse::set_clientmsgid(::std::string&& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DownloadVoiceResponse.ClientMsgId)
}
#endif
inline void DownloadVoiceResponse::set_clientmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DownloadVoiceResponse.ClientMsgId)
}
inline void DownloadVoiceResponse::set_clientmsgid(const char* value, size_t size) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DownloadVoiceResponse.ClientMsgId)
}
inline ::std::string* DownloadVoiceResponse::mutable_clientmsgid() {
  set_has_clientmsgid();
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadVoiceResponse.ClientMsgId)
  return clientmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DownloadVoiceResponse::release_clientmsgid() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadVoiceResponse.ClientMsgId)
  clear_has_clientmsgid();
  return clientmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DownloadVoiceResponse::set_allocated_clientmsgid(::std::string* clientmsgid) {
  if (clientmsgid != NULL) {
    set_has_clientmsgid();
  } else {
    clear_has_clientmsgid();
  }
  clientmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientmsgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadVoiceResponse.ClientMsgId)
}

// required .micromsg.SKBuiltinBuffer_t Data = 7;
inline bool DownloadVoiceResponse::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadVoiceResponse::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadVoiceResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadVoiceResponse::clear_data() {
  if (data_ != NULL) data_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_data();
}
inline const ::micromsg::SKBuiltinBuffer_t& DownloadVoiceResponse::data() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceResponse.Data)
  return data_ != NULL ? *data_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* DownloadVoiceResponse::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadVoiceResponse.Data)
  return data_;
}
inline ::micromsg::SKBuiltinBuffer_t* DownloadVoiceResponse::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadVoiceResponse.Data)
  clear_has_data();
  ::micromsg::SKBuiltinBuffer_t* temp = data_;
  data_ = NULL;
  return temp;
}
inline void DownloadVoiceResponse::set_allocated_data(::micromsg::SKBuiltinBuffer_t* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadVoiceResponse.Data)
}

// required uint32 EndFlag = 8;
inline bool DownloadVoiceResponse::has_endflag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DownloadVoiceResponse::set_has_endflag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DownloadVoiceResponse::clear_has_endflag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DownloadVoiceResponse::clear_endflag() {
  endflag_ = 0u;
  clear_has_endflag();
}
inline ::google::protobuf::uint32 DownloadVoiceResponse::endflag() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceResponse.EndFlag)
  return endflag_;
}
inline void DownloadVoiceResponse::set_endflag(::google::protobuf::uint32 value) {
  set_has_endflag();
  endflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceResponse.EndFlag)
}

// required .micromsg.BaseResponse BaseResponse = 9;
inline bool DownloadVoiceResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DownloadVoiceResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DownloadVoiceResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DownloadVoiceResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& DownloadVoiceResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* DownloadVoiceResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadVoiceResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* DownloadVoiceResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadVoiceResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void DownloadVoiceResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadVoiceResponse.BaseResponse)
}

// optional uint32 CancelFlag = 10;
inline bool DownloadVoiceResponse::has_cancelflag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DownloadVoiceResponse::set_has_cancelflag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DownloadVoiceResponse::clear_has_cancelflag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DownloadVoiceResponse::clear_cancelflag() {
  cancelflag_ = 0u;
  clear_has_cancelflag();
}
inline ::google::protobuf::uint32 DownloadVoiceResponse::cancelflag() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceResponse.CancelFlag)
  return cancelflag_;
}
inline void DownloadVoiceResponse::set_cancelflag(::google::protobuf::uint32 value) {
  set_has_cancelflag();
  cancelflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceResponse.CancelFlag)
}

// optional uint64 NewMsgId = 11;
inline bool DownloadVoiceResponse::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DownloadVoiceResponse::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DownloadVoiceResponse::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DownloadVoiceResponse::clear_newmsgid() {
  newmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_newmsgid();
}
inline ::google::protobuf::uint64 DownloadVoiceResponse::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVoiceResponse.NewMsgId)
  return newmsgid_;
}
inline void DownloadVoiceResponse::set_newmsgid(::google::protobuf::uint64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVoiceResponse.NewMsgId)
}

// -------------------------------------------------------------------

// UploadMsgImgRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool UploadMsgImgRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UploadMsgImgRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UploadMsgImgRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UploadMsgImgRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& UploadMsgImgRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* UploadMsgImgRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* UploadMsgImgRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void UploadMsgImgRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.BaseRequest)
}

// required .micromsg.SKBuiltinString_t ClientImgId = 2;
inline bool UploadMsgImgRequest::has_clientimgid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UploadMsgImgRequest::set_has_clientimgid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UploadMsgImgRequest::clear_has_clientimgid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UploadMsgImgRequest::clear_clientimgid() {
  if (clientimgid_ != NULL) clientimgid_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_clientimgid();
}
inline const ::micromsg::SKBuiltinString_t& UploadMsgImgRequest::clientimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.ClientImgId)
  return clientimgid_ != NULL ? *clientimgid_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* UploadMsgImgRequest::mutable_clientimgid() {
  set_has_clientimgid();
  if (clientimgid_ == NULL) {
    clientimgid_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.ClientImgId)
  return clientimgid_;
}
inline ::micromsg::SKBuiltinString_t* UploadMsgImgRequest::release_clientimgid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.ClientImgId)
  clear_has_clientimgid();
  ::micromsg::SKBuiltinString_t* temp = clientimgid_;
  clientimgid_ = NULL;
  return temp;
}
inline void UploadMsgImgRequest::set_allocated_clientimgid(::micromsg::SKBuiltinString_t* clientimgid) {
  delete clientimgid_;
  clientimgid_ = clientimgid;
  if (clientimgid) {
    set_has_clientimgid();
  } else {
    clear_has_clientimgid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.ClientImgId)
}

// required .micromsg.SKBuiltinString_t FromUserName = 3;
inline bool UploadMsgImgRequest::has_fromusername() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UploadMsgImgRequest::set_has_fromusername() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UploadMsgImgRequest::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UploadMsgImgRequest::clear_fromusername() {
  if (fromusername_ != NULL) fromusername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_fromusername();
}
inline const ::micromsg::SKBuiltinString_t& UploadMsgImgRequest::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.FromUserName)
  return fromusername_ != NULL ? *fromusername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* UploadMsgImgRequest::mutable_fromusername() {
  set_has_fromusername();
  if (fromusername_ == NULL) {
    fromusername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.FromUserName)
  return fromusername_;
}
inline ::micromsg::SKBuiltinString_t* UploadMsgImgRequest::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.FromUserName)
  clear_has_fromusername();
  ::micromsg::SKBuiltinString_t* temp = fromusername_;
  fromusername_ = NULL;
  return temp;
}
inline void UploadMsgImgRequest::set_allocated_fromusername(::micromsg::SKBuiltinString_t* fromusername) {
  delete fromusername_;
  fromusername_ = fromusername;
  if (fromusername) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.FromUserName)
}

// required .micromsg.SKBuiltinString_t ToUserName = 4;
inline bool UploadMsgImgRequest::has_tousername() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UploadMsgImgRequest::set_has_tousername() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UploadMsgImgRequest::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UploadMsgImgRequest::clear_tousername() {
  if (tousername_ != NULL) tousername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_tousername();
}
inline const ::micromsg::SKBuiltinString_t& UploadMsgImgRequest::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.ToUserName)
  return tousername_ != NULL ? *tousername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* UploadMsgImgRequest::mutable_tousername() {
  set_has_tousername();
  if (tousername_ == NULL) {
    tousername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.ToUserName)
  return tousername_;
}
inline ::micromsg::SKBuiltinString_t* UploadMsgImgRequest::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.ToUserName)
  clear_has_tousername();
  ::micromsg::SKBuiltinString_t* temp = tousername_;
  tousername_ = NULL;
  return temp;
}
inline void UploadMsgImgRequest::set_allocated_tousername(::micromsg::SKBuiltinString_t* tousername) {
  delete tousername_;
  tousername_ = tousername;
  if (tousername) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.ToUserName)
}

// required uint32 TotalLen = 5;
inline bool UploadMsgImgRequest::has_totallen() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UploadMsgImgRequest::set_has_totallen() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UploadMsgImgRequest::clear_has_totallen() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UploadMsgImgRequest::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
inline ::google::protobuf::uint32 UploadMsgImgRequest::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.TotalLen)
  return totallen_;
}
inline void UploadMsgImgRequest::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.TotalLen)
}

// required uint32 StartPos = 6;
inline bool UploadMsgImgRequest::has_startpos() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UploadMsgImgRequest::set_has_startpos() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UploadMsgImgRequest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UploadMsgImgRequest::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
inline ::google::protobuf::uint32 UploadMsgImgRequest::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.StartPos)
  return startpos_;
}
inline void UploadMsgImgRequest::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.StartPos)
}

// required uint32 DataLen = 7;
inline bool UploadMsgImgRequest::has_datalen() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UploadMsgImgRequest::set_has_datalen() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UploadMsgImgRequest::clear_has_datalen() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UploadMsgImgRequest::clear_datalen() {
  datalen_ = 0u;
  clear_has_datalen();
}
inline ::google::protobuf::uint32 UploadMsgImgRequest::datalen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.DataLen)
  return datalen_;
}
inline void UploadMsgImgRequest::set_datalen(::google::protobuf::uint32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.DataLen)
}

// required .micromsg.SKBuiltinBuffer_t Data = 8;
inline bool UploadMsgImgRequest::has_data() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UploadMsgImgRequest::set_has_data() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UploadMsgImgRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UploadMsgImgRequest::clear_data() {
  if (data_ != NULL) data_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_data();
}
inline const ::micromsg::SKBuiltinBuffer_t& UploadMsgImgRequest::data() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.Data)
  return data_ != NULL ? *data_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* UploadMsgImgRequest::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.Data)
  return data_;
}
inline ::micromsg::SKBuiltinBuffer_t* UploadMsgImgRequest::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.Data)
  clear_has_data();
  ::micromsg::SKBuiltinBuffer_t* temp = data_;
  data_ = NULL;
  return temp;
}
inline void UploadMsgImgRequest::set_allocated_data(::micromsg::SKBuiltinBuffer_t* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.Data)
}

// optional uint32 MsgType = 9;
inline bool UploadMsgImgRequest::has_msgtype() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UploadMsgImgRequest::set_has_msgtype() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UploadMsgImgRequest::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UploadMsgImgRequest::clear_msgtype() {
  msgtype_ = 0u;
  clear_has_msgtype();
}
inline ::google::protobuf::uint32 UploadMsgImgRequest::msgtype() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.MsgType)
  return msgtype_;
}
inline void UploadMsgImgRequest::set_msgtype(::google::protobuf::uint32 value) {
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.MsgType)
}

// optional string MsgSource = 10;
inline bool UploadMsgImgRequest::has_msgsource() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadMsgImgRequest::set_has_msgsource() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadMsgImgRequest::clear_has_msgsource() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadMsgImgRequest::clear_msgsource() {
  msgsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgsource();
}
inline const ::std::string& UploadMsgImgRequest::msgsource() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.MsgSource)
  return msgsource_.GetNoArena();
}
inline void UploadMsgImgRequest::set_msgsource(const ::std::string& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.MsgSource)
}
#if LANG_CXX11
inline void UploadMsgImgRequest::set_msgsource(::std::string&& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadMsgImgRequest.MsgSource)
}
#endif
inline void UploadMsgImgRequest::set_msgsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadMsgImgRequest.MsgSource)
}
inline void UploadMsgImgRequest::set_msgsource(const char* value, size_t size) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadMsgImgRequest.MsgSource)
}
inline ::std::string* UploadMsgImgRequest::mutable_msgsource() {
  set_has_msgsource();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.MsgSource)
  return msgsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadMsgImgRequest::release_msgsource() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.MsgSource)
  clear_has_msgsource();
  return msgsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadMsgImgRequest::set_allocated_msgsource(::std::string* msgsource) {
  if (msgsource != NULL) {
    set_has_msgsource();
  } else {
    clear_has_msgsource();
  }
  msgsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgsource);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.MsgSource)
}

// optional uint32 CompressType = 11;
inline bool UploadMsgImgRequest::has_compresstype() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UploadMsgImgRequest::set_has_compresstype() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UploadMsgImgRequest::clear_has_compresstype() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UploadMsgImgRequest::clear_compresstype() {
  compresstype_ = 0u;
  clear_has_compresstype();
}
inline ::google::protobuf::uint32 UploadMsgImgRequest::compresstype() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CompressType)
  return compresstype_;
}
inline void UploadMsgImgRequest::set_compresstype(::google::protobuf::uint32 value) {
  set_has_compresstype();
  compresstype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CompressType)
}

// optional int32 NetType = 12;
inline bool UploadMsgImgRequest::has_nettype() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UploadMsgImgRequest::set_has_nettype() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UploadMsgImgRequest::clear_has_nettype() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UploadMsgImgRequest::clear_nettype() {
  nettype_ = 0;
  clear_has_nettype();
}
inline ::google::protobuf::int32 UploadMsgImgRequest::nettype() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.NetType)
  return nettype_;
}
inline void UploadMsgImgRequest::set_nettype(::google::protobuf::int32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.NetType)
}

// optional int32 PhotoFrom = 13;
inline bool UploadMsgImgRequest::has_photofrom() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void UploadMsgImgRequest::set_has_photofrom() {
  _has_bits_[0] |= 0x00080000u;
}
inline void UploadMsgImgRequest::clear_has_photofrom() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void UploadMsgImgRequest::clear_photofrom() {
  photofrom_ = 0;
  clear_has_photofrom();
}
inline ::google::protobuf::int32 UploadMsgImgRequest::photofrom() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.PhotoFrom)
  return photofrom_;
}
inline void UploadMsgImgRequest::set_photofrom(::google::protobuf::int32 value) {
  set_has_photofrom();
  photofrom_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.PhotoFrom)
}

// optional string MediaId = 14;
inline bool UploadMsgImgRequest::has_mediaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadMsgImgRequest::set_has_mediaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadMsgImgRequest::clear_has_mediaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadMsgImgRequest::clear_mediaid() {
  mediaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mediaid();
}
inline const ::std::string& UploadMsgImgRequest::mediaid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.MediaId)
  return mediaid_.GetNoArena();
}
inline void UploadMsgImgRequest::set_mediaid(const ::std::string& value) {
  set_has_mediaid();
  mediaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.MediaId)
}
#if LANG_CXX11
inline void UploadMsgImgRequest::set_mediaid(::std::string&& value) {
  set_has_mediaid();
  mediaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadMsgImgRequest.MediaId)
}
#endif
inline void UploadMsgImgRequest::set_mediaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mediaid();
  mediaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadMsgImgRequest.MediaId)
}
inline void UploadMsgImgRequest::set_mediaid(const char* value, size_t size) {
  set_has_mediaid();
  mediaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadMsgImgRequest.MediaId)
}
inline ::std::string* UploadMsgImgRequest::mutable_mediaid() {
  set_has_mediaid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.MediaId)
  return mediaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadMsgImgRequest::release_mediaid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.MediaId)
  clear_has_mediaid();
  return mediaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadMsgImgRequest::set_allocated_mediaid(::std::string* mediaid) {
  if (mediaid != NULL) {
    set_has_mediaid();
  } else {
    clear_has_mediaid();
  }
  mediaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mediaid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.MediaId)
}

// optional string CDNBigImgUrl = 15;
inline bool UploadMsgImgRequest::has_cdnbigimgurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadMsgImgRequest::set_has_cdnbigimgurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadMsgImgRequest::clear_has_cdnbigimgurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadMsgImgRequest::clear_cdnbigimgurl() {
  cdnbigimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdnbigimgurl();
}
inline const ::std::string& UploadMsgImgRequest::cdnbigimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CDNBigImgUrl)
  return cdnbigimgurl_.GetNoArena();
}
inline void UploadMsgImgRequest::set_cdnbigimgurl(const ::std::string& value) {
  set_has_cdnbigimgurl();
  cdnbigimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CDNBigImgUrl)
}
#if LANG_CXX11
inline void UploadMsgImgRequest::set_cdnbigimgurl(::std::string&& value) {
  set_has_cdnbigimgurl();
  cdnbigimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadMsgImgRequest.CDNBigImgUrl)
}
#endif
inline void UploadMsgImgRequest::set_cdnbigimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdnbigimgurl();
  cdnbigimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadMsgImgRequest.CDNBigImgUrl)
}
inline void UploadMsgImgRequest::set_cdnbigimgurl(const char* value, size_t size) {
  set_has_cdnbigimgurl();
  cdnbigimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadMsgImgRequest.CDNBigImgUrl)
}
inline ::std::string* UploadMsgImgRequest::mutable_cdnbigimgurl() {
  set_has_cdnbigimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.CDNBigImgUrl)
  return cdnbigimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadMsgImgRequest::release_cdnbigimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.CDNBigImgUrl)
  clear_has_cdnbigimgurl();
  return cdnbigimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadMsgImgRequest::set_allocated_cdnbigimgurl(::std::string* cdnbigimgurl) {
  if (cdnbigimgurl != NULL) {
    set_has_cdnbigimgurl();
  } else {
    clear_has_cdnbigimgurl();
  }
  cdnbigimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdnbigimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.CDNBigImgUrl)
}

// optional string CDNMidImgUrl = 16;
inline bool UploadMsgImgRequest::has_cdnmidimgurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadMsgImgRequest::set_has_cdnmidimgurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadMsgImgRequest::clear_has_cdnmidimgurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadMsgImgRequest::clear_cdnmidimgurl() {
  cdnmidimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdnmidimgurl();
}
inline const ::std::string& UploadMsgImgRequest::cdnmidimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CDNMidImgUrl)
  return cdnmidimgurl_.GetNoArena();
}
inline void UploadMsgImgRequest::set_cdnmidimgurl(const ::std::string& value) {
  set_has_cdnmidimgurl();
  cdnmidimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CDNMidImgUrl)
}
#if LANG_CXX11
inline void UploadMsgImgRequest::set_cdnmidimgurl(::std::string&& value) {
  set_has_cdnmidimgurl();
  cdnmidimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadMsgImgRequest.CDNMidImgUrl)
}
#endif
inline void UploadMsgImgRequest::set_cdnmidimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdnmidimgurl();
  cdnmidimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadMsgImgRequest.CDNMidImgUrl)
}
inline void UploadMsgImgRequest::set_cdnmidimgurl(const char* value, size_t size) {
  set_has_cdnmidimgurl();
  cdnmidimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadMsgImgRequest.CDNMidImgUrl)
}
inline ::std::string* UploadMsgImgRequest::mutable_cdnmidimgurl() {
  set_has_cdnmidimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.CDNMidImgUrl)
  return cdnmidimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadMsgImgRequest::release_cdnmidimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.CDNMidImgUrl)
  clear_has_cdnmidimgurl();
  return cdnmidimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadMsgImgRequest::set_allocated_cdnmidimgurl(::std::string* cdnmidimgurl) {
  if (cdnmidimgurl != NULL) {
    set_has_cdnmidimgurl();
  } else {
    clear_has_cdnmidimgurl();
  }
  cdnmidimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdnmidimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.CDNMidImgUrl)
}

// optional string AESKey = 17;
inline bool UploadMsgImgRequest::has_aeskey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UploadMsgImgRequest::set_has_aeskey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UploadMsgImgRequest::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UploadMsgImgRequest::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
inline const ::std::string& UploadMsgImgRequest::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.AESKey)
  return aeskey_.GetNoArena();
}
inline void UploadMsgImgRequest::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.AESKey)
}
#if LANG_CXX11
inline void UploadMsgImgRequest::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadMsgImgRequest.AESKey)
}
#endif
inline void UploadMsgImgRequest::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadMsgImgRequest.AESKey)
}
inline void UploadMsgImgRequest::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadMsgImgRequest.AESKey)
}
inline ::std::string* UploadMsgImgRequest::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.AESKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadMsgImgRequest::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.AESKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadMsgImgRequest::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.AESKey)
}

// optional int32 EncryVer = 18;
inline bool UploadMsgImgRequest::has_encryver() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void UploadMsgImgRequest::set_has_encryver() {
  _has_bits_[0] |= 0x00100000u;
}
inline void UploadMsgImgRequest::clear_has_encryver() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void UploadMsgImgRequest::clear_encryver() {
  encryver_ = 0;
  clear_has_encryver();
}
inline ::google::protobuf::int32 UploadMsgImgRequest::encryver() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.EncryVer)
  return encryver_;
}
inline void UploadMsgImgRequest::set_encryver(::google::protobuf::int32 value) {
  set_has_encryver();
  encryver_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.EncryVer)
}

// optional int32 CDNBigImgSize = 19;
inline bool UploadMsgImgRequest::has_cdnbigimgsize() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void UploadMsgImgRequest::set_has_cdnbigimgsize() {
  _has_bits_[0] |= 0x00200000u;
}
inline void UploadMsgImgRequest::clear_has_cdnbigimgsize() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void UploadMsgImgRequest::clear_cdnbigimgsize() {
  cdnbigimgsize_ = 0;
  clear_has_cdnbigimgsize();
}
inline ::google::protobuf::int32 UploadMsgImgRequest::cdnbigimgsize() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CDNBigImgSize)
  return cdnbigimgsize_;
}
inline void UploadMsgImgRequest::set_cdnbigimgsize(::google::protobuf::int32 value) {
  set_has_cdnbigimgsize();
  cdnbigimgsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CDNBigImgSize)
}

// optional int32 CDNMidImgSize = 20;
inline bool UploadMsgImgRequest::has_cdnmidimgsize() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void UploadMsgImgRequest::set_has_cdnmidimgsize() {
  _has_bits_[0] |= 0x00400000u;
}
inline void UploadMsgImgRequest::clear_has_cdnmidimgsize() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void UploadMsgImgRequest::clear_cdnmidimgsize() {
  cdnmidimgsize_ = 0;
  clear_has_cdnmidimgsize();
}
inline ::google::protobuf::int32 UploadMsgImgRequest::cdnmidimgsize() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CDNMidImgSize)
  return cdnmidimgsize_;
}
inline void UploadMsgImgRequest::set_cdnmidimgsize(::google::protobuf::int32 value) {
  set_has_cdnmidimgsize();
  cdnmidimgsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CDNMidImgSize)
}

// optional string CDNThumbImgUrl = 21;
inline bool UploadMsgImgRequest::has_cdnthumbimgurl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UploadMsgImgRequest::set_has_cdnthumbimgurl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UploadMsgImgRequest::clear_has_cdnthumbimgurl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UploadMsgImgRequest::clear_cdnthumbimgurl() {
  cdnthumbimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdnthumbimgurl();
}
inline const ::std::string& UploadMsgImgRequest::cdnthumbimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CDNThumbImgUrl)
  return cdnthumbimgurl_.GetNoArena();
}
inline void UploadMsgImgRequest::set_cdnthumbimgurl(const ::std::string& value) {
  set_has_cdnthumbimgurl();
  cdnthumbimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CDNThumbImgUrl)
}
#if LANG_CXX11
inline void UploadMsgImgRequest::set_cdnthumbimgurl(::std::string&& value) {
  set_has_cdnthumbimgurl();
  cdnthumbimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadMsgImgRequest.CDNThumbImgUrl)
}
#endif
inline void UploadMsgImgRequest::set_cdnthumbimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdnthumbimgurl();
  cdnthumbimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadMsgImgRequest.CDNThumbImgUrl)
}
inline void UploadMsgImgRequest::set_cdnthumbimgurl(const char* value, size_t size) {
  set_has_cdnthumbimgurl();
  cdnthumbimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadMsgImgRequest.CDNThumbImgUrl)
}
inline ::std::string* UploadMsgImgRequest::mutable_cdnthumbimgurl() {
  set_has_cdnthumbimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.CDNThumbImgUrl)
  return cdnthumbimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadMsgImgRequest::release_cdnthumbimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.CDNThumbImgUrl)
  clear_has_cdnthumbimgurl();
  return cdnthumbimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadMsgImgRequest::set_allocated_cdnthumbimgurl(::std::string* cdnthumbimgurl) {
  if (cdnthumbimgurl != NULL) {
    set_has_cdnthumbimgurl();
  } else {
    clear_has_cdnthumbimgurl();
  }
  cdnthumbimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdnthumbimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.CDNThumbImgUrl)
}

// optional int32 CDNThumbImgSize = 22;
inline bool UploadMsgImgRequest::has_cdnthumbimgsize() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void UploadMsgImgRequest::set_has_cdnthumbimgsize() {
  _has_bits_[0] |= 0x00800000u;
}
inline void UploadMsgImgRequest::clear_has_cdnthumbimgsize() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void UploadMsgImgRequest::clear_cdnthumbimgsize() {
  cdnthumbimgsize_ = 0;
  clear_has_cdnthumbimgsize();
}
inline ::google::protobuf::int32 UploadMsgImgRequest::cdnthumbimgsize() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CDNThumbImgSize)
  return cdnthumbimgsize_;
}
inline void UploadMsgImgRequest::set_cdnthumbimgsize(::google::protobuf::int32 value) {
  set_has_cdnthumbimgsize();
  cdnthumbimgsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CDNThumbImgSize)
}

// optional int32 CDNThumbImgHeight = 23;
inline bool UploadMsgImgRequest::has_cdnthumbimgheight() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void UploadMsgImgRequest::set_has_cdnthumbimgheight() {
  _has_bits_[0] |= 0x01000000u;
}
inline void UploadMsgImgRequest::clear_has_cdnthumbimgheight() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void UploadMsgImgRequest::clear_cdnthumbimgheight() {
  cdnthumbimgheight_ = 0;
  clear_has_cdnthumbimgheight();
}
inline ::google::protobuf::int32 UploadMsgImgRequest::cdnthumbimgheight() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CDNThumbImgHeight)
  return cdnthumbimgheight_;
}
inline void UploadMsgImgRequest::set_cdnthumbimgheight(::google::protobuf::int32 value) {
  set_has_cdnthumbimgheight();
  cdnthumbimgheight_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CDNThumbImgHeight)
}

// optional int32 CDNThumbImgWidth = 24;
inline bool UploadMsgImgRequest::has_cdnthumbimgwidth() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void UploadMsgImgRequest::set_has_cdnthumbimgwidth() {
  _has_bits_[0] |= 0x02000000u;
}
inline void UploadMsgImgRequest::clear_has_cdnthumbimgwidth() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void UploadMsgImgRequest::clear_cdnthumbimgwidth() {
  cdnthumbimgwidth_ = 0;
  clear_has_cdnthumbimgwidth();
}
inline ::google::protobuf::int32 UploadMsgImgRequest::cdnthumbimgwidth() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CDNThumbImgWidth)
  return cdnthumbimgwidth_;
}
inline void UploadMsgImgRequest::set_cdnthumbimgwidth(::google::protobuf::int32 value) {
  set_has_cdnthumbimgwidth();
  cdnthumbimgwidth_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CDNThumbImgWidth)
}

// optional string CDNThumbAESKey = 25;
inline bool UploadMsgImgRequest::has_cdnthumbaeskey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UploadMsgImgRequest::set_has_cdnthumbaeskey() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UploadMsgImgRequest::clear_has_cdnthumbaeskey() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UploadMsgImgRequest::clear_cdnthumbaeskey() {
  cdnthumbaeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdnthumbaeskey();
}
inline const ::std::string& UploadMsgImgRequest::cdnthumbaeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CDNThumbAESKey)
  return cdnthumbaeskey_.GetNoArena();
}
inline void UploadMsgImgRequest::set_cdnthumbaeskey(const ::std::string& value) {
  set_has_cdnthumbaeskey();
  cdnthumbaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CDNThumbAESKey)
}
#if LANG_CXX11
inline void UploadMsgImgRequest::set_cdnthumbaeskey(::std::string&& value) {
  set_has_cdnthumbaeskey();
  cdnthumbaeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadMsgImgRequest.CDNThumbAESKey)
}
#endif
inline void UploadMsgImgRequest::set_cdnthumbaeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdnthumbaeskey();
  cdnthumbaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadMsgImgRequest.CDNThumbAESKey)
}
inline void UploadMsgImgRequest::set_cdnthumbaeskey(const char* value, size_t size) {
  set_has_cdnthumbaeskey();
  cdnthumbaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadMsgImgRequest.CDNThumbAESKey)
}
inline ::std::string* UploadMsgImgRequest::mutable_cdnthumbaeskey() {
  set_has_cdnthumbaeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.CDNThumbAESKey)
  return cdnthumbaeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadMsgImgRequest::release_cdnthumbaeskey() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.CDNThumbAESKey)
  clear_has_cdnthumbaeskey();
  return cdnthumbaeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadMsgImgRequest::set_allocated_cdnthumbaeskey(::std::string* cdnthumbaeskey) {
  if (cdnthumbaeskey != NULL) {
    set_has_cdnthumbaeskey();
  } else {
    clear_has_cdnthumbaeskey();
  }
  cdnthumbaeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdnthumbaeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.CDNThumbAESKey)
}

// optional uint32 ReqTime = 26;
inline bool UploadMsgImgRequest::has_reqtime() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void UploadMsgImgRequest::set_has_reqtime() {
  _has_bits_[0] |= 0x04000000u;
}
inline void UploadMsgImgRequest::clear_has_reqtime() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void UploadMsgImgRequest::clear_reqtime() {
  reqtime_ = 0u;
  clear_has_reqtime();
}
inline ::google::protobuf::uint32 UploadMsgImgRequest::reqtime() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.ReqTime)
  return reqtime_;
}
inline void UploadMsgImgRequest::set_reqtime(::google::protobuf::uint32 value) {
  set_has_reqtime();
  reqtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.ReqTime)
}

// optional string Md5 = 27;
inline bool UploadMsgImgRequest::has_md5() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UploadMsgImgRequest::set_has_md5() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UploadMsgImgRequest::clear_has_md5() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UploadMsgImgRequest::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
inline const ::std::string& UploadMsgImgRequest::md5() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.Md5)
  return md5_.GetNoArena();
}
inline void UploadMsgImgRequest::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.Md5)
}
#if LANG_CXX11
inline void UploadMsgImgRequest::set_md5(::std::string&& value) {
  set_has_md5();
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadMsgImgRequest.Md5)
}
#endif
inline void UploadMsgImgRequest::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadMsgImgRequest.Md5)
}
inline void UploadMsgImgRequest::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadMsgImgRequest.Md5)
}
inline ::std::string* UploadMsgImgRequest::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgRequest.Md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadMsgImgRequest::release_md5() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgRequest.Md5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadMsgImgRequest::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgRequest.Md5)
}

// optional uint32 CRC32 = 28;
inline bool UploadMsgImgRequest::has_crc32() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void UploadMsgImgRequest::set_has_crc32() {
  _has_bits_[0] |= 0x08000000u;
}
inline void UploadMsgImgRequest::clear_has_crc32() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void UploadMsgImgRequest::clear_crc32() {
  crc32_ = 0u;
  clear_has_crc32();
}
inline ::google::protobuf::uint32 UploadMsgImgRequest::crc32() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.CRC32)
  return crc32_;
}
inline void UploadMsgImgRequest::set_crc32(::google::protobuf::uint32 value) {
  set_has_crc32();
  crc32_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.CRC32)
}

// optional uint32 MsgForwardType = 29;
inline bool UploadMsgImgRequest::has_msgforwardtype() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void UploadMsgImgRequest::set_has_msgforwardtype() {
  _has_bits_[0] |= 0x10000000u;
}
inline void UploadMsgImgRequest::clear_has_msgforwardtype() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void UploadMsgImgRequest::clear_msgforwardtype() {
  msgforwardtype_ = 0u;
  clear_has_msgforwardtype();
}
inline ::google::protobuf::uint32 UploadMsgImgRequest::msgforwardtype() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.MsgForwardType)
  return msgforwardtype_;
}
inline void UploadMsgImgRequest::set_msgforwardtype(::google::protobuf::uint32 value) {
  set_has_msgforwardtype();
  msgforwardtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.MsgForwardType)
}

// optional uint32 HitMd5 = 30;
inline bool UploadMsgImgRequest::has_hitmd5() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void UploadMsgImgRequest::set_has_hitmd5() {
  _has_bits_[0] |= 0x20000000u;
}
inline void UploadMsgImgRequest::clear_has_hitmd5() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void UploadMsgImgRequest::clear_hitmd5() {
  hitmd5_ = 0u;
  clear_has_hitmd5();
}
inline ::google::protobuf::uint32 UploadMsgImgRequest::hitmd5() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgRequest.HitMd5)
  return hitmd5_;
}
inline void UploadMsgImgRequest::set_hitmd5(::google::protobuf::uint32 value) {
  set_has_hitmd5();
  hitmd5_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgRequest.HitMd5)
}

// -------------------------------------------------------------------

// UploadMsgImgResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool UploadMsgImgResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadMsgImgResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadMsgImgResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadMsgImgResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& UploadMsgImgResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* UploadMsgImgResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* UploadMsgImgResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void UploadMsgImgResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgResponse.BaseResponse)
}

// required uint32 MsgId = 2;
inline bool UploadMsgImgResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UploadMsgImgResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UploadMsgImgResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UploadMsgImgResponse::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 UploadMsgImgResponse::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.MsgId)
  return msgid_;
}
inline void UploadMsgImgResponse::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgResponse.MsgId)
}

// required .micromsg.SKBuiltinString_t ClientImgId = 3;
inline bool UploadMsgImgResponse::has_clientimgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadMsgImgResponse::set_has_clientimgid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadMsgImgResponse::clear_has_clientimgid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadMsgImgResponse::clear_clientimgid() {
  if (clientimgid_ != NULL) clientimgid_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_clientimgid();
}
inline const ::micromsg::SKBuiltinString_t& UploadMsgImgResponse::clientimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.ClientImgId)
  return clientimgid_ != NULL ? *clientimgid_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* UploadMsgImgResponse::mutable_clientimgid() {
  set_has_clientimgid();
  if (clientimgid_ == NULL) {
    clientimgid_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgResponse.ClientImgId)
  return clientimgid_;
}
inline ::micromsg::SKBuiltinString_t* UploadMsgImgResponse::release_clientimgid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgResponse.ClientImgId)
  clear_has_clientimgid();
  ::micromsg::SKBuiltinString_t* temp = clientimgid_;
  clientimgid_ = NULL;
  return temp;
}
inline void UploadMsgImgResponse::set_allocated_clientimgid(::micromsg::SKBuiltinString_t* clientimgid) {
  delete clientimgid_;
  clientimgid_ = clientimgid;
  if (clientimgid) {
    set_has_clientimgid();
  } else {
    clear_has_clientimgid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgResponse.ClientImgId)
}

// required .micromsg.SKBuiltinString_t FromUserName = 4;
inline bool UploadMsgImgResponse::has_fromusername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UploadMsgImgResponse::set_has_fromusername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UploadMsgImgResponse::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UploadMsgImgResponse::clear_fromusername() {
  if (fromusername_ != NULL) fromusername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_fromusername();
}
inline const ::micromsg::SKBuiltinString_t& UploadMsgImgResponse::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.FromUserName)
  return fromusername_ != NULL ? *fromusername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* UploadMsgImgResponse::mutable_fromusername() {
  set_has_fromusername();
  if (fromusername_ == NULL) {
    fromusername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgResponse.FromUserName)
  return fromusername_;
}
inline ::micromsg::SKBuiltinString_t* UploadMsgImgResponse::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgResponse.FromUserName)
  clear_has_fromusername();
  ::micromsg::SKBuiltinString_t* temp = fromusername_;
  fromusername_ = NULL;
  return temp;
}
inline void UploadMsgImgResponse::set_allocated_fromusername(::micromsg::SKBuiltinString_t* fromusername) {
  delete fromusername_;
  fromusername_ = fromusername;
  if (fromusername) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgResponse.FromUserName)
}

// required .micromsg.SKBuiltinString_t ToUserName = 5;
inline bool UploadMsgImgResponse::has_tousername() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UploadMsgImgResponse::set_has_tousername() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UploadMsgImgResponse::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UploadMsgImgResponse::clear_tousername() {
  if (tousername_ != NULL) tousername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_tousername();
}
inline const ::micromsg::SKBuiltinString_t& UploadMsgImgResponse::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.ToUserName)
  return tousername_ != NULL ? *tousername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* UploadMsgImgResponse::mutable_tousername() {
  set_has_tousername();
  if (tousername_ == NULL) {
    tousername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgResponse.ToUserName)
  return tousername_;
}
inline ::micromsg::SKBuiltinString_t* UploadMsgImgResponse::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgResponse.ToUserName)
  clear_has_tousername();
  ::micromsg::SKBuiltinString_t* temp = tousername_;
  tousername_ = NULL;
  return temp;
}
inline void UploadMsgImgResponse::set_allocated_tousername(::micromsg::SKBuiltinString_t* tousername) {
  delete tousername_;
  tousername_ = tousername;
  if (tousername) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgResponse.ToUserName)
}

// required uint32 TotalLen = 6;
inline bool UploadMsgImgResponse::has_totallen() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UploadMsgImgResponse::set_has_totallen() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UploadMsgImgResponse::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UploadMsgImgResponse::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
inline ::google::protobuf::uint32 UploadMsgImgResponse::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.TotalLen)
  return totallen_;
}
inline void UploadMsgImgResponse::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgResponse.TotalLen)
}

// required uint32 StartPos = 7;
inline bool UploadMsgImgResponse::has_startpos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UploadMsgImgResponse::set_has_startpos() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UploadMsgImgResponse::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UploadMsgImgResponse::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
inline ::google::protobuf::uint32 UploadMsgImgResponse::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.StartPos)
  return startpos_;
}
inline void UploadMsgImgResponse::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgResponse.StartPos)
}

// required uint32 DataLen = 8;
inline bool UploadMsgImgResponse::has_datalen() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UploadMsgImgResponse::set_has_datalen() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UploadMsgImgResponse::clear_has_datalen() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UploadMsgImgResponse::clear_datalen() {
  datalen_ = 0u;
  clear_has_datalen();
}
inline ::google::protobuf::uint32 UploadMsgImgResponse::datalen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.DataLen)
  return datalen_;
}
inline void UploadMsgImgResponse::set_datalen(::google::protobuf::uint32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgResponse.DataLen)
}

// required uint32 CreateTime = 9;
inline bool UploadMsgImgResponse::has_createtime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UploadMsgImgResponse::set_has_createtime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UploadMsgImgResponse::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UploadMsgImgResponse::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 UploadMsgImgResponse::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.CreateTime)
  return createtime_;
}
inline void UploadMsgImgResponse::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgResponse.CreateTime)
}

// optional uint64 NewMsgId = 10;
inline bool UploadMsgImgResponse::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UploadMsgImgResponse::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UploadMsgImgResponse::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UploadMsgImgResponse::clear_newmsgid() {
  newmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_newmsgid();
}
inline ::google::protobuf::uint64 UploadMsgImgResponse::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.NewMsgId)
  return newmsgid_;
}
inline void UploadMsgImgResponse::set_newmsgid(::google::protobuf::uint64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgResponse.NewMsgId)
}

// optional string AESKey = 11;
inline bool UploadMsgImgResponse::has_aeskey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadMsgImgResponse::set_has_aeskey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadMsgImgResponse::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadMsgImgResponse::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
inline const ::std::string& UploadMsgImgResponse::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.AESKey)
  return aeskey_.GetNoArena();
}
inline void UploadMsgImgResponse::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgResponse.AESKey)
}
#if LANG_CXX11
inline void UploadMsgImgResponse::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadMsgImgResponse.AESKey)
}
#endif
inline void UploadMsgImgResponse::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadMsgImgResponse.AESKey)
}
inline void UploadMsgImgResponse::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadMsgImgResponse.AESKey)
}
inline ::std::string* UploadMsgImgResponse::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgResponse.AESKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadMsgImgResponse::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgResponse.AESKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadMsgImgResponse::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgResponse.AESKey)
}

// optional string FileId = 12;
inline bool UploadMsgImgResponse::has_fileid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadMsgImgResponse::set_has_fileid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadMsgImgResponse::clear_has_fileid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadMsgImgResponse::clear_fileid() {
  fileid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fileid();
}
inline const ::std::string& UploadMsgImgResponse::fileid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadMsgImgResponse.FileId)
  return fileid_.GetNoArena();
}
inline void UploadMsgImgResponse::set_fileid(const ::std::string& value) {
  set_has_fileid();
  fileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadMsgImgResponse.FileId)
}
#if LANG_CXX11
inline void UploadMsgImgResponse::set_fileid(::std::string&& value) {
  set_has_fileid();
  fileid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadMsgImgResponse.FileId)
}
#endif
inline void UploadMsgImgResponse::set_fileid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fileid();
  fileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadMsgImgResponse.FileId)
}
inline void UploadMsgImgResponse::set_fileid(const char* value, size_t size) {
  set_has_fileid();
  fileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadMsgImgResponse.FileId)
}
inline ::std::string* UploadMsgImgResponse::mutable_fileid() {
  set_has_fileid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadMsgImgResponse.FileId)
  return fileid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadMsgImgResponse::release_fileid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadMsgImgResponse.FileId)
  clear_has_fileid();
  return fileid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadMsgImgResponse::set_allocated_fileid(::std::string* fileid) {
  if (fileid != NULL) {
    set_has_fileid();
  } else {
    clear_has_fileid();
  }
  fileid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fileid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadMsgImgResponse.FileId)
}

// -------------------------------------------------------------------

// CDNUploadMsgImgPrepareRequest

// optional string ClientImgId = 1;
inline bool CDNUploadMsgImgPrepareRequest::has_clientimgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDNUploadMsgImgPrepareRequest::set_has_clientimgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_has_clientimgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_clientimgid() {
  clientimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientimgid();
}
inline const ::std::string& CDNUploadMsgImgPrepareRequest::clientimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.ClientImgId)
  return clientimgid_.GetNoArena();
}
inline void CDNUploadMsgImgPrepareRequest::set_clientimgid(const ::std::string& value) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.ClientImgId)
}
#if LANG_CXX11
inline void CDNUploadMsgImgPrepareRequest::set_clientimgid(::std::string&& value) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareRequest.ClientImgId)
}
#endif
inline void CDNUploadMsgImgPrepareRequest::set_clientimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareRequest.ClientImgId)
}
inline void CDNUploadMsgImgPrepareRequest::set_clientimgid(const char* value, size_t size) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareRequest.ClientImgId)
}
inline ::std::string* CDNUploadMsgImgPrepareRequest::mutable_clientimgid() {
  set_has_clientimgid();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareRequest.ClientImgId)
  return clientimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDNUploadMsgImgPrepareRequest::release_clientimgid() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareRequest.ClientImgId)
  clear_has_clientimgid();
  return clientimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDNUploadMsgImgPrepareRequest::set_allocated_clientimgid(::std::string* clientimgid) {
  if (clientimgid != NULL) {
    set_has_clientimgid();
  } else {
    clear_has_clientimgid();
  }
  clientimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientimgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareRequest.ClientImgId)
}

// optional string FromUserName = 2;
inline bool CDNUploadMsgImgPrepareRequest::has_fromusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDNUploadMsgImgPrepareRequest::set_has_fromusername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
inline const ::std::string& CDNUploadMsgImgPrepareRequest::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.FromUserName)
  return fromusername_.GetNoArena();
}
inline void CDNUploadMsgImgPrepareRequest::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.FromUserName)
}
#if LANG_CXX11
inline void CDNUploadMsgImgPrepareRequest::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareRequest.FromUserName)
}
#endif
inline void CDNUploadMsgImgPrepareRequest::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareRequest.FromUserName)
}
inline void CDNUploadMsgImgPrepareRequest::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareRequest.FromUserName)
}
inline ::std::string* CDNUploadMsgImgPrepareRequest::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareRequest.FromUserName)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDNUploadMsgImgPrepareRequest::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareRequest.FromUserName)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDNUploadMsgImgPrepareRequest::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareRequest.FromUserName)
}

// optional string ToUserName = 3;
inline bool CDNUploadMsgImgPrepareRequest::has_tousername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDNUploadMsgImgPrepareRequest::set_has_tousername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
inline const ::std::string& CDNUploadMsgImgPrepareRequest::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.ToUserName)
  return tousername_.GetNoArena();
}
inline void CDNUploadMsgImgPrepareRequest::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.ToUserName)
}
#if LANG_CXX11
inline void CDNUploadMsgImgPrepareRequest::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareRequest.ToUserName)
}
#endif
inline void CDNUploadMsgImgPrepareRequest::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareRequest.ToUserName)
}
inline void CDNUploadMsgImgPrepareRequest::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareRequest.ToUserName)
}
inline ::std::string* CDNUploadMsgImgPrepareRequest::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareRequest.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDNUploadMsgImgPrepareRequest::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareRequest.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDNUploadMsgImgPrepareRequest::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareRequest.ToUserName)
}

// required int32 ThumbHeight = 4;
inline bool CDNUploadMsgImgPrepareRequest::has_thumbheight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDNUploadMsgImgPrepareRequest::set_has_thumbheight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_has_thumbheight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_thumbheight() {
  thumbheight_ = 0;
  clear_has_thumbheight();
}
inline ::google::protobuf::int32 CDNUploadMsgImgPrepareRequest::thumbheight() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.ThumbHeight)
  return thumbheight_;
}
inline void CDNUploadMsgImgPrepareRequest::set_thumbheight(::google::protobuf::int32 value) {
  set_has_thumbheight();
  thumbheight_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.ThumbHeight)
}

// required int32 ThumbWidth = 5;
inline bool CDNUploadMsgImgPrepareRequest::has_thumbwidth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDNUploadMsgImgPrepareRequest::set_has_thumbwidth() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_has_thumbwidth() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_thumbwidth() {
  thumbwidth_ = 0;
  clear_has_thumbwidth();
}
inline ::google::protobuf::int32 CDNUploadMsgImgPrepareRequest::thumbwidth() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.ThumbWidth)
  return thumbwidth_;
}
inline void CDNUploadMsgImgPrepareRequest::set_thumbwidth(::google::protobuf::int32 value) {
  set_has_thumbwidth();
  thumbwidth_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.ThumbWidth)
}

// optional string MsgSource = 6;
inline bool CDNUploadMsgImgPrepareRequest::has_msgsource() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDNUploadMsgImgPrepareRequest::set_has_msgsource() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_has_msgsource() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_msgsource() {
  msgsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgsource();
}
inline const ::std::string& CDNUploadMsgImgPrepareRequest::msgsource() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.MsgSource)
  return msgsource_.GetNoArena();
}
inline void CDNUploadMsgImgPrepareRequest::set_msgsource(const ::std::string& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.MsgSource)
}
#if LANG_CXX11
inline void CDNUploadMsgImgPrepareRequest::set_msgsource(::std::string&& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareRequest.MsgSource)
}
#endif
inline void CDNUploadMsgImgPrepareRequest::set_msgsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareRequest.MsgSource)
}
inline void CDNUploadMsgImgPrepareRequest::set_msgsource(const char* value, size_t size) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareRequest.MsgSource)
}
inline ::std::string* CDNUploadMsgImgPrepareRequest::mutable_msgsource() {
  set_has_msgsource();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareRequest.MsgSource)
  return msgsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDNUploadMsgImgPrepareRequest::release_msgsource() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareRequest.MsgSource)
  clear_has_msgsource();
  return msgsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDNUploadMsgImgPrepareRequest::set_allocated_msgsource(::std::string* msgsource) {
  if (msgsource != NULL) {
    set_has_msgsource();
  } else {
    clear_has_msgsource();
  }
  msgsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgsource);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareRequest.MsgSource)
}

// optional .micromsg.SKBuiltinBuffer_t ClientStat = 7;
inline bool CDNUploadMsgImgPrepareRequest::has_clientstat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDNUploadMsgImgPrepareRequest::set_has_clientstat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_has_clientstat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_clientstat() {
  if (clientstat_ != NULL) clientstat_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_clientstat();
}
inline const ::micromsg::SKBuiltinBuffer_t& CDNUploadMsgImgPrepareRequest::clientstat() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.ClientStat)
  return clientstat_ != NULL ? *clientstat_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* CDNUploadMsgImgPrepareRequest::mutable_clientstat() {
  set_has_clientstat();
  if (clientstat_ == NULL) {
    clientstat_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareRequest.ClientStat)
  return clientstat_;
}
inline ::micromsg::SKBuiltinBuffer_t* CDNUploadMsgImgPrepareRequest::release_clientstat() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareRequest.ClientStat)
  clear_has_clientstat();
  ::micromsg::SKBuiltinBuffer_t* temp = clientstat_;
  clientstat_ = NULL;
  return temp;
}
inline void CDNUploadMsgImgPrepareRequest::set_allocated_clientstat(::micromsg::SKBuiltinBuffer_t* clientstat) {
  delete clientstat_;
  clientstat_ = clientstat;
  if (clientstat) {
    set_has_clientstat();
  } else {
    clear_has_clientstat();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareRequest.ClientStat)
}

// optional int32 Scene = 8;
inline bool CDNUploadMsgImgPrepareRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CDNUploadMsgImgPrepareRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_scene() {
  scene_ = 0;
  clear_has_scene();
}
inline ::google::protobuf::int32 CDNUploadMsgImgPrepareRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.Scene)
  return scene_;
}
inline void CDNUploadMsgImgPrepareRequest::set_scene(::google::protobuf::int32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.Scene)
}

// optional float Longitude = 9;
inline bool CDNUploadMsgImgPrepareRequest::has_longitude() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CDNUploadMsgImgPrepareRequest::set_has_longitude() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float CDNUploadMsgImgPrepareRequest::longitude() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.Longitude)
  return longitude_;
}
inline void CDNUploadMsgImgPrepareRequest::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.Longitude)
}

// optional float Latitude = 10;
inline bool CDNUploadMsgImgPrepareRequest::has_latitude() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CDNUploadMsgImgPrepareRequest::set_has_latitude() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float CDNUploadMsgImgPrepareRequest::latitude() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.Latitude)
  return latitude_;
}
inline void CDNUploadMsgImgPrepareRequest::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.Latitude)
}

// optional string AttachedContent = 11;
inline bool CDNUploadMsgImgPrepareRequest::has_attachedcontent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDNUploadMsgImgPrepareRequest::set_has_attachedcontent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_has_attachedcontent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_attachedcontent() {
  attachedcontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attachedcontent();
}
inline const ::std::string& CDNUploadMsgImgPrepareRequest::attachedcontent() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.AttachedContent)
  return attachedcontent_.GetNoArena();
}
inline void CDNUploadMsgImgPrepareRequest::set_attachedcontent(const ::std::string& value) {
  set_has_attachedcontent();
  attachedcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.AttachedContent)
}
#if LANG_CXX11
inline void CDNUploadMsgImgPrepareRequest::set_attachedcontent(::std::string&& value) {
  set_has_attachedcontent();
  attachedcontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareRequest.AttachedContent)
}
#endif
inline void CDNUploadMsgImgPrepareRequest::set_attachedcontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attachedcontent();
  attachedcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareRequest.AttachedContent)
}
inline void CDNUploadMsgImgPrepareRequest::set_attachedcontent(const char* value, size_t size) {
  set_has_attachedcontent();
  attachedcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareRequest.AttachedContent)
}
inline ::std::string* CDNUploadMsgImgPrepareRequest::mutable_attachedcontent() {
  set_has_attachedcontent();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareRequest.AttachedContent)
  return attachedcontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDNUploadMsgImgPrepareRequest::release_attachedcontent() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareRequest.AttachedContent)
  clear_has_attachedcontent();
  return attachedcontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDNUploadMsgImgPrepareRequest::set_allocated_attachedcontent(::std::string* attachedcontent) {
  if (attachedcontent != NULL) {
    set_has_attachedcontent();
  } else {
    clear_has_attachedcontent();
  }
  attachedcontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attachedcontent);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareRequest.AttachedContent)
}

// optional int32 MidHeight = 12;
inline bool CDNUploadMsgImgPrepareRequest::has_midheight() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CDNUploadMsgImgPrepareRequest::set_has_midheight() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_has_midheight() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_midheight() {
  midheight_ = 0;
  clear_has_midheight();
}
inline ::google::protobuf::int32 CDNUploadMsgImgPrepareRequest::midheight() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.MidHeight)
  return midheight_;
}
inline void CDNUploadMsgImgPrepareRequest::set_midheight(::google::protobuf::int32 value) {
  set_has_midheight();
  midheight_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.MidHeight)
}

// optional int32 MidWidth = 13;
inline bool CDNUploadMsgImgPrepareRequest::has_midwidth() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CDNUploadMsgImgPrepareRequest::set_has_midwidth() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_has_midwidth() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_midwidth() {
  midwidth_ = 0;
  clear_has_midwidth();
}
inline ::google::protobuf::int32 CDNUploadMsgImgPrepareRequest::midwidth() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.MidWidth)
  return midwidth_;
}
inline void CDNUploadMsgImgPrepareRequest::set_midwidth(::google::protobuf::int32 value) {
  set_has_midwidth();
  midwidth_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.MidWidth)
}

// optional int32 HDHeight = 14;
inline bool CDNUploadMsgImgPrepareRequest::has_hdheight() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CDNUploadMsgImgPrepareRequest::set_has_hdheight() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_has_hdheight() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_hdheight() {
  hdheight_ = 0;
  clear_has_hdheight();
}
inline ::google::protobuf::int32 CDNUploadMsgImgPrepareRequest::hdheight() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.HDHeight)
  return hdheight_;
}
inline void CDNUploadMsgImgPrepareRequest::set_hdheight(::google::protobuf::int32 value) {
  set_has_hdheight();
  hdheight_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.HDHeight)
}

// optional int32 HDWidth = 15;
inline bool CDNUploadMsgImgPrepareRequest::has_hdwidth() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CDNUploadMsgImgPrepareRequest::set_has_hdwidth() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_has_hdwidth() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_hdwidth() {
  hdwidth_ = 0;
  clear_has_hdwidth();
}
inline ::google::protobuf::int32 CDNUploadMsgImgPrepareRequest::hdwidth() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.HDWidth)
  return hdwidth_;
}
inline void CDNUploadMsgImgPrepareRequest::set_hdwidth(::google::protobuf::int32 value) {
  set_has_hdwidth();
  hdwidth_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.HDWidth)
}

// optional string AESKey = 16;
inline bool CDNUploadMsgImgPrepareRequest::has_aeskey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDNUploadMsgImgPrepareRequest::set_has_aeskey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
inline const ::std::string& CDNUploadMsgImgPrepareRequest::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.AESKey)
  return aeskey_.GetNoArena();
}
inline void CDNUploadMsgImgPrepareRequest::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.AESKey)
}
#if LANG_CXX11
inline void CDNUploadMsgImgPrepareRequest::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareRequest.AESKey)
}
#endif
inline void CDNUploadMsgImgPrepareRequest::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareRequest.AESKey)
}
inline void CDNUploadMsgImgPrepareRequest::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareRequest.AESKey)
}
inline ::std::string* CDNUploadMsgImgPrepareRequest::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareRequest.AESKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDNUploadMsgImgPrepareRequest::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareRequest.AESKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDNUploadMsgImgPrepareRequest::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareRequest.AESKey)
}

// optional int32 EncryVer = 17;
inline bool CDNUploadMsgImgPrepareRequest::has_encryver() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CDNUploadMsgImgPrepareRequest::set_has_encryver() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_has_encryver() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_encryver() {
  encryver_ = 0;
  clear_has_encryver();
}
inline ::google::protobuf::int32 CDNUploadMsgImgPrepareRequest::encryver() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.EncryVer)
  return encryver_;
}
inline void CDNUploadMsgImgPrepareRequest::set_encryver(::google::protobuf::int32 value) {
  set_has_encryver();
  encryver_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.EncryVer)
}

// optional uint32 CRC32 = 18;
inline bool CDNUploadMsgImgPrepareRequest::has_crc32() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CDNUploadMsgImgPrepareRequest::set_has_crc32() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_has_crc32() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_crc32() {
  crc32_ = 0u;
  clear_has_crc32();
}
inline ::google::protobuf::uint32 CDNUploadMsgImgPrepareRequest::crc32() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.CRC32)
  return crc32_;
}
inline void CDNUploadMsgImgPrepareRequest::set_crc32(::google::protobuf::uint32 value) {
  set_has_crc32();
  crc32_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.CRC32)
}

// optional uint32 MsgForwardType = 19;
inline bool CDNUploadMsgImgPrepareRequest::has_msgforwardtype() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CDNUploadMsgImgPrepareRequest::set_has_msgforwardtype() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_has_msgforwardtype() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CDNUploadMsgImgPrepareRequest::clear_msgforwardtype() {
  msgforwardtype_ = 0u;
  clear_has_msgforwardtype();
}
inline ::google::protobuf::uint32 CDNUploadMsgImgPrepareRequest::msgforwardtype() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareRequest.MsgForwardType)
  return msgforwardtype_;
}
inline void CDNUploadMsgImgPrepareRequest::set_msgforwardtype(::google::protobuf::uint32 value) {
  set_has_msgforwardtype();
  msgforwardtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareRequest.MsgForwardType)
}

// -------------------------------------------------------------------

// CDNUploadMsgImgPrepareResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool CDNUploadMsgImgPrepareResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDNUploadMsgImgPrepareResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDNUploadMsgImgPrepareResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDNUploadMsgImgPrepareResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& CDNUploadMsgImgPrepareResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* CDNUploadMsgImgPrepareResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* CDNUploadMsgImgPrepareResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void CDNUploadMsgImgPrepareResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareResponse.BaseResponse)
}

// optional string ClientImgId = 3;
inline bool CDNUploadMsgImgPrepareResponse::has_clientimgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDNUploadMsgImgPrepareResponse::set_has_clientimgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDNUploadMsgImgPrepareResponse::clear_has_clientimgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDNUploadMsgImgPrepareResponse::clear_clientimgid() {
  clientimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientimgid();
}
inline const ::std::string& CDNUploadMsgImgPrepareResponse::clientimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareResponse.ClientImgId)
  return clientimgid_.GetNoArena();
}
inline void CDNUploadMsgImgPrepareResponse::set_clientimgid(const ::std::string& value) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareResponse.ClientImgId)
}
#if LANG_CXX11
inline void CDNUploadMsgImgPrepareResponse::set_clientimgid(::std::string&& value) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareResponse.ClientImgId)
}
#endif
inline void CDNUploadMsgImgPrepareResponse::set_clientimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareResponse.ClientImgId)
}
inline void CDNUploadMsgImgPrepareResponse::set_clientimgid(const char* value, size_t size) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareResponse.ClientImgId)
}
inline ::std::string* CDNUploadMsgImgPrepareResponse::mutable_clientimgid() {
  set_has_clientimgid();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareResponse.ClientImgId)
  return clientimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDNUploadMsgImgPrepareResponse::release_clientimgid() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareResponse.ClientImgId)
  clear_has_clientimgid();
  return clientimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDNUploadMsgImgPrepareResponse::set_allocated_clientimgid(::std::string* clientimgid) {
  if (clientimgid != NULL) {
    set_has_clientimgid();
  } else {
    clear_has_clientimgid();
  }
  clientimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientimgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareResponse.ClientImgId)
}

// optional string FromUserName = 4;
inline bool CDNUploadMsgImgPrepareResponse::has_fromusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDNUploadMsgImgPrepareResponse::set_has_fromusername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDNUploadMsgImgPrepareResponse::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDNUploadMsgImgPrepareResponse::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
inline const ::std::string& CDNUploadMsgImgPrepareResponse::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareResponse.FromUserName)
  return fromusername_.GetNoArena();
}
inline void CDNUploadMsgImgPrepareResponse::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareResponse.FromUserName)
}
#if LANG_CXX11
inline void CDNUploadMsgImgPrepareResponse::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareResponse.FromUserName)
}
#endif
inline void CDNUploadMsgImgPrepareResponse::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareResponse.FromUserName)
}
inline void CDNUploadMsgImgPrepareResponse::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareResponse.FromUserName)
}
inline ::std::string* CDNUploadMsgImgPrepareResponse::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareResponse.FromUserName)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDNUploadMsgImgPrepareResponse::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareResponse.FromUserName)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDNUploadMsgImgPrepareResponse::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareResponse.FromUserName)
}

// optional string ToUserName = 5;
inline bool CDNUploadMsgImgPrepareResponse::has_tousername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDNUploadMsgImgPrepareResponse::set_has_tousername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDNUploadMsgImgPrepareResponse::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDNUploadMsgImgPrepareResponse::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
inline const ::std::string& CDNUploadMsgImgPrepareResponse::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareResponse.ToUserName)
  return tousername_.GetNoArena();
}
inline void CDNUploadMsgImgPrepareResponse::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareResponse.ToUserName)
}
#if LANG_CXX11
inline void CDNUploadMsgImgPrepareResponse::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareResponse.ToUserName)
}
#endif
inline void CDNUploadMsgImgPrepareResponse::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareResponse.ToUserName)
}
inline void CDNUploadMsgImgPrepareResponse::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareResponse.ToUserName)
}
inline ::std::string* CDNUploadMsgImgPrepareResponse::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareResponse.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDNUploadMsgImgPrepareResponse::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareResponse.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDNUploadMsgImgPrepareResponse::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareResponse.ToUserName)
}

// required uint32 CreateTime = 9;
inline bool CDNUploadMsgImgPrepareResponse::has_createtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDNUploadMsgImgPrepareResponse::set_has_createtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDNUploadMsgImgPrepareResponse::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDNUploadMsgImgPrepareResponse::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 CDNUploadMsgImgPrepareResponse::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareResponse.CreateTime)
  return createtime_;
}
inline void CDNUploadMsgImgPrepareResponse::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareResponse.CreateTime)
}

// optional uint64 NewMsgId = 10;
inline bool CDNUploadMsgImgPrepareResponse::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDNUploadMsgImgPrepareResponse::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDNUploadMsgImgPrepareResponse::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDNUploadMsgImgPrepareResponse::clear_newmsgid() {
  newmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_newmsgid();
}
inline ::google::protobuf::uint64 CDNUploadMsgImgPrepareResponse::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareResponse.NewMsgId)
  return newmsgid_;
}
inline void CDNUploadMsgImgPrepareResponse::set_newmsgid(::google::protobuf::uint64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareResponse.NewMsgId)
}

// optional string AESKey = 11;
inline bool CDNUploadMsgImgPrepareResponse::has_aeskey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDNUploadMsgImgPrepareResponse::set_has_aeskey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDNUploadMsgImgPrepareResponse::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDNUploadMsgImgPrepareResponse::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
inline const ::std::string& CDNUploadMsgImgPrepareResponse::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareResponse.AESKey)
  return aeskey_.GetNoArena();
}
inline void CDNUploadMsgImgPrepareResponse::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareResponse.AESKey)
}
#if LANG_CXX11
inline void CDNUploadMsgImgPrepareResponse::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareResponse.AESKey)
}
#endif
inline void CDNUploadMsgImgPrepareResponse::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareResponse.AESKey)
}
inline void CDNUploadMsgImgPrepareResponse::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareResponse.AESKey)
}
inline ::std::string* CDNUploadMsgImgPrepareResponse::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareResponse.AESKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDNUploadMsgImgPrepareResponse::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareResponse.AESKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDNUploadMsgImgPrepareResponse::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareResponse.AESKey)
}

// optional string FileId = 12;
inline bool CDNUploadMsgImgPrepareResponse::has_fileid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDNUploadMsgImgPrepareResponse::set_has_fileid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDNUploadMsgImgPrepareResponse::clear_has_fileid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDNUploadMsgImgPrepareResponse::clear_fileid() {
  fileid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fileid();
}
inline const ::std::string& CDNUploadMsgImgPrepareResponse::fileid() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgPrepareResponse.FileId)
  return fileid_.GetNoArena();
}
inline void CDNUploadMsgImgPrepareResponse::set_fileid(const ::std::string& value) {
  set_has_fileid();
  fileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgPrepareResponse.FileId)
}
#if LANG_CXX11
inline void CDNUploadMsgImgPrepareResponse::set_fileid(::std::string&& value) {
  set_has_fileid();
  fileid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgPrepareResponse.FileId)
}
#endif
inline void CDNUploadMsgImgPrepareResponse::set_fileid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fileid();
  fileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgPrepareResponse.FileId)
}
inline void CDNUploadMsgImgPrepareResponse::set_fileid(const char* value, size_t size) {
  set_has_fileid();
  fileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgPrepareResponse.FileId)
}
inline ::std::string* CDNUploadMsgImgPrepareResponse::mutable_fileid() {
  set_has_fileid();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgPrepareResponse.FileId)
  return fileid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDNUploadMsgImgPrepareResponse::release_fileid() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgPrepareResponse.FileId)
  clear_has_fileid();
  return fileid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDNUploadMsgImgPrepareResponse::set_allocated_fileid(::std::string* fileid) {
  if (fileid != NULL) {
    set_has_fileid();
  } else {
    clear_has_fileid();
  }
  fileid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fileid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgPrepareResponse.FileId)
}

// -------------------------------------------------------------------

// CDNUploadMsgImgCommitRequest

// optional string Ticket = 1;
inline bool CDNUploadMsgImgCommitRequest::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDNUploadMsgImgCommitRequest::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDNUploadMsgImgCommitRequest::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDNUploadMsgImgCommitRequest::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
inline const ::std::string& CDNUploadMsgImgCommitRequest::ticket() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.Ticket)
  return ticket_.GetNoArena();
}
inline void CDNUploadMsgImgCommitRequest::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.Ticket)
}
#if LANG_CXX11
inline void CDNUploadMsgImgCommitRequest::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgCommitRequest.Ticket)
}
#endif
inline void CDNUploadMsgImgCommitRequest::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgCommitRequest.Ticket)
}
inline void CDNUploadMsgImgCommitRequest::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgCommitRequest.Ticket)
}
inline ::std::string* CDNUploadMsgImgCommitRequest::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgCommitRequest.Ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDNUploadMsgImgCommitRequest::release_ticket() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgCommitRequest.Ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDNUploadMsgImgCommitRequest::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgCommitRequest.Ticket)
}

// optional string ImgUrl = 2;
inline bool CDNUploadMsgImgCommitRequest::has_imgurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDNUploadMsgImgCommitRequest::set_has_imgurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDNUploadMsgImgCommitRequest::clear_has_imgurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDNUploadMsgImgCommitRequest::clear_imgurl() {
  imgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgurl();
}
inline const ::std::string& CDNUploadMsgImgCommitRequest::imgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.ImgUrl)
  return imgurl_.GetNoArena();
}
inline void CDNUploadMsgImgCommitRequest::set_imgurl(const ::std::string& value) {
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.ImgUrl)
}
#if LANG_CXX11
inline void CDNUploadMsgImgCommitRequest::set_imgurl(::std::string&& value) {
  set_has_imgurl();
  imgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgCommitRequest.ImgUrl)
}
#endif
inline void CDNUploadMsgImgCommitRequest::set_imgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgCommitRequest.ImgUrl)
}
inline void CDNUploadMsgImgCommitRequest::set_imgurl(const char* value, size_t size) {
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgCommitRequest.ImgUrl)
}
inline ::std::string* CDNUploadMsgImgCommitRequest::mutable_imgurl() {
  set_has_imgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgCommitRequest.ImgUrl)
  return imgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDNUploadMsgImgCommitRequest::release_imgurl() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgCommitRequest.ImgUrl)
  clear_has_imgurl();
  return imgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDNUploadMsgImgCommitRequest::set_allocated_imgurl(::std::string* imgurl) {
  if (imgurl != NULL) {
    set_has_imgurl();
  } else {
    clear_has_imgurl();
  }
  imgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgCommitRequest.ImgUrl)
}

// optional string AESKey = 3;
inline bool CDNUploadMsgImgCommitRequest::has_aeskey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDNUploadMsgImgCommitRequest::set_has_aeskey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDNUploadMsgImgCommitRequest::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDNUploadMsgImgCommitRequest::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
inline const ::std::string& CDNUploadMsgImgCommitRequest::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.AESKey)
  return aeskey_.GetNoArena();
}
inline void CDNUploadMsgImgCommitRequest::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.AESKey)
}
#if LANG_CXX11
inline void CDNUploadMsgImgCommitRequest::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgCommitRequest.AESKey)
}
#endif
inline void CDNUploadMsgImgCommitRequest::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgCommitRequest.AESKey)
}
inline void CDNUploadMsgImgCommitRequest::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgCommitRequest.AESKey)
}
inline ::std::string* CDNUploadMsgImgCommitRequest::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgCommitRequest.AESKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDNUploadMsgImgCommitRequest::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgCommitRequest.AESKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDNUploadMsgImgCommitRequest::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgCommitRequest.AESKey)
}

// required int32 EncryVer = 4;
inline bool CDNUploadMsgImgCommitRequest::has_encryver() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDNUploadMsgImgCommitRequest::set_has_encryver() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDNUploadMsgImgCommitRequest::clear_has_encryver() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDNUploadMsgImgCommitRequest::clear_encryver() {
  encryver_ = 0;
  clear_has_encryver();
}
inline ::google::protobuf::int32 CDNUploadMsgImgCommitRequest::encryver() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.EncryVer)
  return encryver_;
}
inline void CDNUploadMsgImgCommitRequest::set_encryver(::google::protobuf::int32 value) {
  set_has_encryver();
  encryver_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.EncryVer)
}

// required int32 MidSize = 5;
inline bool CDNUploadMsgImgCommitRequest::has_midsize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDNUploadMsgImgCommitRequest::set_has_midsize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDNUploadMsgImgCommitRequest::clear_has_midsize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDNUploadMsgImgCommitRequest::clear_midsize() {
  midsize_ = 0;
  clear_has_midsize();
}
inline ::google::protobuf::int32 CDNUploadMsgImgCommitRequest::midsize() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.MidSize)
  return midsize_;
}
inline void CDNUploadMsgImgCommitRequest::set_midsize(::google::protobuf::int32 value) {
  set_has_midsize();
  midsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.MidSize)
}

// required int32 ThumbSize = 6;
inline bool CDNUploadMsgImgCommitRequest::has_thumbsize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDNUploadMsgImgCommitRequest::set_has_thumbsize() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDNUploadMsgImgCommitRequest::clear_has_thumbsize() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDNUploadMsgImgCommitRequest::clear_thumbsize() {
  thumbsize_ = 0;
  clear_has_thumbsize();
}
inline ::google::protobuf::int32 CDNUploadMsgImgCommitRequest::thumbsize() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.ThumbSize)
  return thumbsize_;
}
inline void CDNUploadMsgImgCommitRequest::set_thumbsize(::google::protobuf::int32 value) {
  set_has_thumbsize();
  thumbsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.ThumbSize)
}

// optional int32 BigSize = 9;
inline bool CDNUploadMsgImgCommitRequest::has_bigsize() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDNUploadMsgImgCommitRequest::set_has_bigsize() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CDNUploadMsgImgCommitRequest::clear_has_bigsize() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CDNUploadMsgImgCommitRequest::clear_bigsize() {
  bigsize_ = 0;
  clear_has_bigsize();
}
inline ::google::protobuf::int32 CDNUploadMsgImgCommitRequest::bigsize() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.BigSize)
  return bigsize_;
}
inline void CDNUploadMsgImgCommitRequest::set_bigsize(::google::protobuf::int32 value) {
  set_has_bigsize();
  bigsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.BigSize)
}

// optional string Md5Sum = 10;
inline bool CDNUploadMsgImgCommitRequest::has_md5sum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDNUploadMsgImgCommitRequest::set_has_md5sum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDNUploadMsgImgCommitRequest::clear_has_md5sum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDNUploadMsgImgCommitRequest::clear_md5sum() {
  md5sum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5sum();
}
inline const ::std::string& CDNUploadMsgImgCommitRequest::md5sum() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.Md5Sum)
  return md5sum_.GetNoArena();
}
inline void CDNUploadMsgImgCommitRequest::set_md5sum(const ::std::string& value) {
  set_has_md5sum();
  md5sum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.Md5Sum)
}
#if LANG_CXX11
inline void CDNUploadMsgImgCommitRequest::set_md5sum(::std::string&& value) {
  set_has_md5sum();
  md5sum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgCommitRequest.Md5Sum)
}
#endif
inline void CDNUploadMsgImgCommitRequest::set_md5sum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5sum();
  md5sum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgCommitRequest.Md5Sum)
}
inline void CDNUploadMsgImgCommitRequest::set_md5sum(const char* value, size_t size) {
  set_has_md5sum();
  md5sum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgCommitRequest.Md5Sum)
}
inline ::std::string* CDNUploadMsgImgCommitRequest::mutable_md5sum() {
  set_has_md5sum();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgCommitRequest.Md5Sum)
  return md5sum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDNUploadMsgImgCommitRequest::release_md5sum() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgCommitRequest.Md5Sum)
  clear_has_md5sum();
  return md5sum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDNUploadMsgImgCommitRequest::set_allocated_md5sum(::std::string* md5sum) {
  if (md5sum != NULL) {
    set_has_md5sum();
  } else {
    clear_has_md5sum();
  }
  md5sum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5sum);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgCommitRequest.Md5Sum)
}

// optional int32 SafeProto = 11;
inline bool CDNUploadMsgImgCommitRequest::has_safeproto() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CDNUploadMsgImgCommitRequest::set_has_safeproto() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CDNUploadMsgImgCommitRequest::clear_has_safeproto() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CDNUploadMsgImgCommitRequest::clear_safeproto() {
  safeproto_ = 0;
  clear_has_safeproto();
}
inline ::google::protobuf::int32 CDNUploadMsgImgCommitRequest::safeproto() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.SafeProto)
  return safeproto_;
}
inline void CDNUploadMsgImgCommitRequest::set_safeproto(::google::protobuf::int32 value) {
  set_has_safeproto();
  safeproto_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.SafeProto)
}

// optional int32 Hit = 12;
inline bool CDNUploadMsgImgCommitRequest::has_hit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CDNUploadMsgImgCommitRequest::set_has_hit() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CDNUploadMsgImgCommitRequest::clear_has_hit() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CDNUploadMsgImgCommitRequest::clear_hit() {
  hit_ = 0;
  clear_has_hit();
}
inline ::google::protobuf::int32 CDNUploadMsgImgCommitRequest::hit() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.Hit)
  return hit_;
}
inline void CDNUploadMsgImgCommitRequest::set_hit(::google::protobuf::int32 value) {
  set_has_hit();
  hit_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.Hit)
}

// optional string FileInfo = 13;
inline bool CDNUploadMsgImgCommitRequest::has_fileinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDNUploadMsgImgCommitRequest::set_has_fileinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDNUploadMsgImgCommitRequest::clear_has_fileinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDNUploadMsgImgCommitRequest::clear_fileinfo() {
  fileinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fileinfo();
}
inline const ::std::string& CDNUploadMsgImgCommitRequest::fileinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitRequest.FileInfo)
  return fileinfo_.GetNoArena();
}
inline void CDNUploadMsgImgCommitRequest::set_fileinfo(const ::std::string& value) {
  set_has_fileinfo();
  fileinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNUploadMsgImgCommitRequest.FileInfo)
}
#if LANG_CXX11
inline void CDNUploadMsgImgCommitRequest::set_fileinfo(::std::string&& value) {
  set_has_fileinfo();
  fileinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNUploadMsgImgCommitRequest.FileInfo)
}
#endif
inline void CDNUploadMsgImgCommitRequest::set_fileinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fileinfo();
  fileinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNUploadMsgImgCommitRequest.FileInfo)
}
inline void CDNUploadMsgImgCommitRequest::set_fileinfo(const char* value, size_t size) {
  set_has_fileinfo();
  fileinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNUploadMsgImgCommitRequest.FileInfo)
}
inline ::std::string* CDNUploadMsgImgCommitRequest::mutable_fileinfo() {
  set_has_fileinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgCommitRequest.FileInfo)
  return fileinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDNUploadMsgImgCommitRequest::release_fileinfo() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgCommitRequest.FileInfo)
  clear_has_fileinfo();
  return fileinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDNUploadMsgImgCommitRequest::set_allocated_fileinfo(::std::string* fileinfo) {
  if (fileinfo != NULL) {
    set_has_fileinfo();
  } else {
    clear_has_fileinfo();
  }
  fileinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fileinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgCommitRequest.FileInfo)
}

// -------------------------------------------------------------------

// CDNUploadMsgImgCommitResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool CDNUploadMsgImgCommitResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDNUploadMsgImgCommitResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDNUploadMsgImgCommitResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDNUploadMsgImgCommitResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& CDNUploadMsgImgCommitResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNUploadMsgImgCommitResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* CDNUploadMsgImgCommitResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CDNUploadMsgImgCommitResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* CDNUploadMsgImgCommitResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.CDNUploadMsgImgCommitResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void CDNUploadMsgImgCommitResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNUploadMsgImgCommitResponse.BaseResponse)
}

// -------------------------------------------------------------------

// UploadWeiboImgRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool UploadWeiboImgRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadWeiboImgRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadWeiboImgRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadWeiboImgRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& UploadWeiboImgRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* UploadWeiboImgRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadWeiboImgRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* UploadWeiboImgRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.UploadWeiboImgRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void UploadWeiboImgRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadWeiboImgRequest.BaseRequest)
}

// optional string ClientImgId = 2;
inline bool UploadWeiboImgRequest::has_clientimgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadWeiboImgRequest::set_has_clientimgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadWeiboImgRequest::clear_has_clientimgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadWeiboImgRequest::clear_clientimgid() {
  clientimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientimgid();
}
inline const ::std::string& UploadWeiboImgRequest::clientimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgRequest.ClientImgId)
  return clientimgid_.GetNoArena();
}
inline void UploadWeiboImgRequest::set_clientimgid(const ::std::string& value) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgRequest.ClientImgId)
}
#if LANG_CXX11
inline void UploadWeiboImgRequest::set_clientimgid(::std::string&& value) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadWeiboImgRequest.ClientImgId)
}
#endif
inline void UploadWeiboImgRequest::set_clientimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadWeiboImgRequest.ClientImgId)
}
inline void UploadWeiboImgRequest::set_clientimgid(const char* value, size_t size) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadWeiboImgRequest.ClientImgId)
}
inline ::std::string* UploadWeiboImgRequest::mutable_clientimgid() {
  set_has_clientimgid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadWeiboImgRequest.ClientImgId)
  return clientimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadWeiboImgRequest::release_clientimgid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadWeiboImgRequest.ClientImgId)
  clear_has_clientimgid();
  return clientimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadWeiboImgRequest::set_allocated_clientimgid(::std::string* clientimgid) {
  if (clientimgid != NULL) {
    set_has_clientimgid();
  } else {
    clear_has_clientimgid();
  }
  clientimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientimgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadWeiboImgRequest.ClientImgId)
}

// required uint32 TotalLen = 3;
inline bool UploadWeiboImgRequest::has_totallen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UploadWeiboImgRequest::set_has_totallen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UploadWeiboImgRequest::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UploadWeiboImgRequest::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
inline ::google::protobuf::uint32 UploadWeiboImgRequest::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgRequest.TotalLen)
  return totallen_;
}
inline void UploadWeiboImgRequest::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgRequest.TotalLen)
}

// required uint32 StartPos = 4;
inline bool UploadWeiboImgRequest::has_startpos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UploadWeiboImgRequest::set_has_startpos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UploadWeiboImgRequest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UploadWeiboImgRequest::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
inline ::google::protobuf::uint32 UploadWeiboImgRequest::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgRequest.StartPos)
  return startpos_;
}
inline void UploadWeiboImgRequest::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgRequest.StartPos)
}

// required uint32 DataLen = 5;
inline bool UploadWeiboImgRequest::has_datalen() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UploadWeiboImgRequest::set_has_datalen() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UploadWeiboImgRequest::clear_has_datalen() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UploadWeiboImgRequest::clear_datalen() {
  datalen_ = 0u;
  clear_has_datalen();
}
inline ::google::protobuf::uint32 UploadWeiboImgRequest::datalen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgRequest.DataLen)
  return datalen_;
}
inline void UploadWeiboImgRequest::set_datalen(::google::protobuf::uint32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgRequest.DataLen)
}

// optional bytes Data = 6;
inline bool UploadWeiboImgRequest::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadWeiboImgRequest::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadWeiboImgRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadWeiboImgRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& UploadWeiboImgRequest::data() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgRequest.Data)
  return data_.GetNoArena();
}
inline void UploadWeiboImgRequest::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgRequest.Data)
}
#if LANG_CXX11
inline void UploadWeiboImgRequest::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadWeiboImgRequest.Data)
}
#endif
inline void UploadWeiboImgRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadWeiboImgRequest.Data)
}
inline void UploadWeiboImgRequest::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadWeiboImgRequest.Data)
}
inline ::std::string* UploadWeiboImgRequest::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadWeiboImgRequest.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadWeiboImgRequest::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.UploadWeiboImgRequest.Data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadWeiboImgRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadWeiboImgRequest.Data)
}

// optional string Content = 7;
inline bool UploadWeiboImgRequest::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadWeiboImgRequest::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadWeiboImgRequest::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadWeiboImgRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& UploadWeiboImgRequest::content() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgRequest.Content)
  return content_.GetNoArena();
}
inline void UploadWeiboImgRequest::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgRequest.Content)
}
#if LANG_CXX11
inline void UploadWeiboImgRequest::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadWeiboImgRequest.Content)
}
#endif
inline void UploadWeiboImgRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadWeiboImgRequest.Content)
}
inline void UploadWeiboImgRequest::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadWeiboImgRequest.Content)
}
inline ::std::string* UploadWeiboImgRequest::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadWeiboImgRequest.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadWeiboImgRequest::release_content() {
  // @@protoc_insertion_point(field_release:micromsg.UploadWeiboImgRequest.Content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadWeiboImgRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadWeiboImgRequest.Content)
}

// required uint32 FilterType = 8;
inline bool UploadWeiboImgRequest::has_filtertype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UploadWeiboImgRequest::set_has_filtertype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UploadWeiboImgRequest::clear_has_filtertype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UploadWeiboImgRequest::clear_filtertype() {
  filtertype_ = 0u;
  clear_has_filtertype();
}
inline ::google::protobuf::uint32 UploadWeiboImgRequest::filtertype() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgRequest.FilterType)
  return filtertype_;
}
inline void UploadWeiboImgRequest::set_filtertype(::google::protobuf::uint32 value) {
  set_has_filtertype();
  filtertype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgRequest.FilterType)
}

// optional uint32 Flag = 9;
inline bool UploadWeiboImgRequest::has_flag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UploadWeiboImgRequest::set_has_flag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UploadWeiboImgRequest::clear_has_flag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UploadWeiboImgRequest::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 UploadWeiboImgRequest::flag() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgRequest.Flag)
  return flag_;
}
inline void UploadWeiboImgRequest::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgRequest.Flag)
}

// -------------------------------------------------------------------

// UploadWeiboImgResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool UploadWeiboImgResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadWeiboImgResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadWeiboImgResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadWeiboImgResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& UploadWeiboImgResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* UploadWeiboImgResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadWeiboImgResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* UploadWeiboImgResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UploadWeiboImgResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void UploadWeiboImgResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadWeiboImgResponse.BaseResponse)
}

// optional string ClientImgId = 2;
inline bool UploadWeiboImgResponse::has_clientimgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadWeiboImgResponse::set_has_clientimgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadWeiboImgResponse::clear_has_clientimgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadWeiboImgResponse::clear_clientimgid() {
  clientimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientimgid();
}
inline const ::std::string& UploadWeiboImgResponse::clientimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgResponse.ClientImgId)
  return clientimgid_.GetNoArena();
}
inline void UploadWeiboImgResponse::set_clientimgid(const ::std::string& value) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgResponse.ClientImgId)
}
#if LANG_CXX11
inline void UploadWeiboImgResponse::set_clientimgid(::std::string&& value) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadWeiboImgResponse.ClientImgId)
}
#endif
inline void UploadWeiboImgResponse::set_clientimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadWeiboImgResponse.ClientImgId)
}
inline void UploadWeiboImgResponse::set_clientimgid(const char* value, size_t size) {
  set_has_clientimgid();
  clientimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadWeiboImgResponse.ClientImgId)
}
inline ::std::string* UploadWeiboImgResponse::mutable_clientimgid() {
  set_has_clientimgid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadWeiboImgResponse.ClientImgId)
  return clientimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadWeiboImgResponse::release_clientimgid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadWeiboImgResponse.ClientImgId)
  clear_has_clientimgid();
  return clientimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadWeiboImgResponse::set_allocated_clientimgid(::std::string* clientimgid) {
  if (clientimgid != NULL) {
    set_has_clientimgid();
  } else {
    clear_has_clientimgid();
  }
  clientimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientimgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadWeiboImgResponse.ClientImgId)
}

// required uint32 TotalLen = 3;
inline bool UploadWeiboImgResponse::has_totallen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadWeiboImgResponse::set_has_totallen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadWeiboImgResponse::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadWeiboImgResponse::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
inline ::google::protobuf::uint32 UploadWeiboImgResponse::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgResponse.TotalLen)
  return totallen_;
}
inline void UploadWeiboImgResponse::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgResponse.TotalLen)
}

// required uint32 StartPos = 4;
inline bool UploadWeiboImgResponse::has_startpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadWeiboImgResponse::set_has_startpos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadWeiboImgResponse::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadWeiboImgResponse::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
inline ::google::protobuf::uint32 UploadWeiboImgResponse::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgResponse.StartPos)
  return startpos_;
}
inline void UploadWeiboImgResponse::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgResponse.StartPos)
}

// required uint32 DataLen = 5;
inline bool UploadWeiboImgResponse::has_datalen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UploadWeiboImgResponse::set_has_datalen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UploadWeiboImgResponse::clear_has_datalen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UploadWeiboImgResponse::clear_datalen() {
  datalen_ = 0u;
  clear_has_datalen();
}
inline ::google::protobuf::uint32 UploadWeiboImgResponse::datalen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadWeiboImgResponse.DataLen)
  return datalen_;
}
inline void UploadWeiboImgResponse::set_datalen(::google::protobuf::uint32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadWeiboImgResponse.DataLen)
}

// -------------------------------------------------------------------

// UploadToWeiboRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool UploadToWeiboRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadToWeiboRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadToWeiboRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadToWeiboRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& UploadToWeiboRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* UploadToWeiboRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadToWeiboRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* UploadToWeiboRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.UploadToWeiboRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void UploadToWeiboRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadToWeiboRequest.BaseRequest)
}

// optional string ClientMsgId = 2;
inline bool UploadToWeiboRequest::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadToWeiboRequest::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadToWeiboRequest::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadToWeiboRequest::clear_clientmsgid() {
  clientmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientmsgid();
}
inline const ::std::string& UploadToWeiboRequest::clientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboRequest.ClientMsgId)
  return clientmsgid_.GetNoArena();
}
inline void UploadToWeiboRequest::set_clientmsgid(const ::std::string& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboRequest.ClientMsgId)
}
#if LANG_CXX11
inline void UploadToWeiboRequest::set_clientmsgid(::std::string&& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadToWeiboRequest.ClientMsgId)
}
#endif
inline void UploadToWeiboRequest::set_clientmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadToWeiboRequest.ClientMsgId)
}
inline void UploadToWeiboRequest::set_clientmsgid(const char* value, size_t size) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadToWeiboRequest.ClientMsgId)
}
inline ::std::string* UploadToWeiboRequest::mutable_clientmsgid() {
  set_has_clientmsgid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadToWeiboRequest.ClientMsgId)
  return clientmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadToWeiboRequest::release_clientmsgid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadToWeiboRequest.ClientMsgId)
  clear_has_clientmsgid();
  return clientmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadToWeiboRequest::set_allocated_clientmsgid(::std::string* clientmsgid) {
  if (clientmsgid != NULL) {
    set_has_clientmsgid();
  } else {
    clear_has_clientmsgid();
  }
  clientmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientmsgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadToWeiboRequest.ClientMsgId)
}

// required uint32 Type = 3;
inline bool UploadToWeiboRequest::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UploadToWeiboRequest::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UploadToWeiboRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UploadToWeiboRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 UploadToWeiboRequest::type() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboRequest.Type)
  return type_;
}
inline void UploadToWeiboRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboRequest.Type)
}

// required uint32 TotalLen = 4;
inline bool UploadToWeiboRequest::has_totallen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UploadToWeiboRequest::set_has_totallen() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UploadToWeiboRequest::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UploadToWeiboRequest::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
inline ::google::protobuf::uint32 UploadToWeiboRequest::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboRequest.TotalLen)
  return totallen_;
}
inline void UploadToWeiboRequest::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboRequest.TotalLen)
}

// required uint32 StartPos = 5;
inline bool UploadToWeiboRequest::has_startpos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UploadToWeiboRequest::set_has_startpos() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UploadToWeiboRequest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UploadToWeiboRequest::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
inline ::google::protobuf::uint32 UploadToWeiboRequest::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboRequest.StartPos)
  return startpos_;
}
inline void UploadToWeiboRequest::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboRequest.StartPos)
}

// required uint32 DataLen = 6;
inline bool UploadToWeiboRequest::has_datalen() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UploadToWeiboRequest::set_has_datalen() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UploadToWeiboRequest::clear_has_datalen() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UploadToWeiboRequest::clear_datalen() {
  datalen_ = 0u;
  clear_has_datalen();
}
inline ::google::protobuf::uint32 UploadToWeiboRequest::datalen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboRequest.DataLen)
  return datalen_;
}
inline void UploadToWeiboRequest::set_datalen(::google::protobuf::uint32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboRequest.DataLen)
}

// optional bytes Data = 7;
inline bool UploadToWeiboRequest::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadToWeiboRequest::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadToWeiboRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadToWeiboRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& UploadToWeiboRequest::data() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboRequest.Data)
  return data_.GetNoArena();
}
inline void UploadToWeiboRequest::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboRequest.Data)
}
#if LANG_CXX11
inline void UploadToWeiboRequest::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadToWeiboRequest.Data)
}
#endif
inline void UploadToWeiboRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadToWeiboRequest.Data)
}
inline void UploadToWeiboRequest::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadToWeiboRequest.Data)
}
inline ::std::string* UploadToWeiboRequest::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadToWeiboRequest.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadToWeiboRequest::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.UploadToWeiboRequest.Data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadToWeiboRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadToWeiboRequest.Data)
}

// optional string Content = 8;
inline bool UploadToWeiboRequest::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadToWeiboRequest::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadToWeiboRequest::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadToWeiboRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& UploadToWeiboRequest::content() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboRequest.Content)
  return content_.GetNoArena();
}
inline void UploadToWeiboRequest::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboRequest.Content)
}
#if LANG_CXX11
inline void UploadToWeiboRequest::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadToWeiboRequest.Content)
}
#endif
inline void UploadToWeiboRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadToWeiboRequest.Content)
}
inline void UploadToWeiboRequest::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadToWeiboRequest.Content)
}
inline ::std::string* UploadToWeiboRequest::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadToWeiboRequest.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadToWeiboRequest::release_content() {
  // @@protoc_insertion_point(field_release:micromsg.UploadToWeiboRequest.Content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadToWeiboRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadToWeiboRequest.Content)
}

// required uint32 FilterType = 9;
inline bool UploadToWeiboRequest::has_filtertype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UploadToWeiboRequest::set_has_filtertype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UploadToWeiboRequest::clear_has_filtertype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UploadToWeiboRequest::clear_filtertype() {
  filtertype_ = 0u;
  clear_has_filtertype();
}
inline ::google::protobuf::uint32 UploadToWeiboRequest::filtertype() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboRequest.FilterType)
  return filtertype_;
}
inline void UploadToWeiboRequest::set_filtertype(::google::protobuf::uint32 value) {
  set_has_filtertype();
  filtertype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboRequest.FilterType)
}

// -------------------------------------------------------------------

// UploadToWeiboResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool UploadToWeiboResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadToWeiboResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadToWeiboResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadToWeiboResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& UploadToWeiboResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* UploadToWeiboResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadToWeiboResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* UploadToWeiboResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UploadToWeiboResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void UploadToWeiboResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadToWeiboResponse.BaseResponse)
}

// optional string ClientMsgId = 2;
inline bool UploadToWeiboResponse::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadToWeiboResponse::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadToWeiboResponse::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadToWeiboResponse::clear_clientmsgid() {
  clientmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientmsgid();
}
inline const ::std::string& UploadToWeiboResponse::clientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboResponse.ClientMsgId)
  return clientmsgid_.GetNoArena();
}
inline void UploadToWeiboResponse::set_clientmsgid(const ::std::string& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboResponse.ClientMsgId)
}
#if LANG_CXX11
inline void UploadToWeiboResponse::set_clientmsgid(::std::string&& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadToWeiboResponse.ClientMsgId)
}
#endif
inline void UploadToWeiboResponse::set_clientmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadToWeiboResponse.ClientMsgId)
}
inline void UploadToWeiboResponse::set_clientmsgid(const char* value, size_t size) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadToWeiboResponse.ClientMsgId)
}
inline ::std::string* UploadToWeiboResponse::mutable_clientmsgid() {
  set_has_clientmsgid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadToWeiboResponse.ClientMsgId)
  return clientmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadToWeiboResponse::release_clientmsgid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadToWeiboResponse.ClientMsgId)
  clear_has_clientmsgid();
  return clientmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadToWeiboResponse::set_allocated_clientmsgid(::std::string* clientmsgid) {
  if (clientmsgid != NULL) {
    set_has_clientmsgid();
  } else {
    clear_has_clientmsgid();
  }
  clientmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientmsgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadToWeiboResponse.ClientMsgId)
}

// required uint32 Type = 3;
inline bool UploadToWeiboResponse::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadToWeiboResponse::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadToWeiboResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadToWeiboResponse::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 UploadToWeiboResponse::type() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboResponse.Type)
  return type_;
}
inline void UploadToWeiboResponse::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboResponse.Type)
}

// required uint32 TotalLen = 4;
inline bool UploadToWeiboResponse::has_totallen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadToWeiboResponse::set_has_totallen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadToWeiboResponse::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadToWeiboResponse::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
inline ::google::protobuf::uint32 UploadToWeiboResponse::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboResponse.TotalLen)
  return totallen_;
}
inline void UploadToWeiboResponse::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboResponse.TotalLen)
}

// required uint32 StartPos = 5;
inline bool UploadToWeiboResponse::has_startpos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UploadToWeiboResponse::set_has_startpos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UploadToWeiboResponse::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UploadToWeiboResponse::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
inline ::google::protobuf::uint32 UploadToWeiboResponse::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboResponse.StartPos)
  return startpos_;
}
inline void UploadToWeiboResponse::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboResponse.StartPos)
}

// required uint32 DataLen = 6;
inline bool UploadToWeiboResponse::has_datalen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UploadToWeiboResponse::set_has_datalen() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UploadToWeiboResponse::clear_has_datalen() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UploadToWeiboResponse::clear_datalen() {
  datalen_ = 0u;
  clear_has_datalen();
}
inline ::google::protobuf::uint32 UploadToWeiboResponse::datalen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadToWeiboResponse.DataLen)
  return datalen_;
}
inline void UploadToWeiboResponse::set_datalen(::google::protobuf::uint32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadToWeiboResponse.DataLen)
}

// -------------------------------------------------------------------

// GetMsgImgRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GetMsgImgRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMsgImgRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMsgImgRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMsgImgRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GetMsgImgRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GetMsgImgRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetMsgImgRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GetMsgImgRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetMsgImgRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GetMsgImgRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetMsgImgRequest.BaseRequest)
}

// required uint32 MsgId = 2;
inline bool GetMsgImgRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetMsgImgRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetMsgImgRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetMsgImgRequest::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 GetMsgImgRequest::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgRequest.MsgId)
  return msgid_;
}
inline void GetMsgImgRequest::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgRequest.MsgId)
}

// required .micromsg.SKBuiltinString_t FromUserName = 3;
inline bool GetMsgImgRequest::has_fromusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetMsgImgRequest::set_has_fromusername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetMsgImgRequest::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetMsgImgRequest::clear_fromusername() {
  if (fromusername_ != NULL) fromusername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_fromusername();
}
inline const ::micromsg::SKBuiltinString_t& GetMsgImgRequest::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgRequest.FromUserName)
  return fromusername_ != NULL ? *fromusername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* GetMsgImgRequest::mutable_fromusername() {
  set_has_fromusername();
  if (fromusername_ == NULL) {
    fromusername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetMsgImgRequest.FromUserName)
  return fromusername_;
}
inline ::micromsg::SKBuiltinString_t* GetMsgImgRequest::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.GetMsgImgRequest.FromUserName)
  clear_has_fromusername();
  ::micromsg::SKBuiltinString_t* temp = fromusername_;
  fromusername_ = NULL;
  return temp;
}
inline void GetMsgImgRequest::set_allocated_fromusername(::micromsg::SKBuiltinString_t* fromusername) {
  delete fromusername_;
  fromusername_ = fromusername;
  if (fromusername) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetMsgImgRequest.FromUserName)
}

// required .micromsg.SKBuiltinString_t ToUserName = 4;
inline bool GetMsgImgRequest::has_tousername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetMsgImgRequest::set_has_tousername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetMsgImgRequest::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetMsgImgRequest::clear_tousername() {
  if (tousername_ != NULL) tousername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_tousername();
}
inline const ::micromsg::SKBuiltinString_t& GetMsgImgRequest::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgRequest.ToUserName)
  return tousername_ != NULL ? *tousername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* GetMsgImgRequest::mutable_tousername() {
  set_has_tousername();
  if (tousername_ == NULL) {
    tousername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetMsgImgRequest.ToUserName)
  return tousername_;
}
inline ::micromsg::SKBuiltinString_t* GetMsgImgRequest::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.GetMsgImgRequest.ToUserName)
  clear_has_tousername();
  ::micromsg::SKBuiltinString_t* temp = tousername_;
  tousername_ = NULL;
  return temp;
}
inline void GetMsgImgRequest::set_allocated_tousername(::micromsg::SKBuiltinString_t* tousername) {
  delete tousername_;
  tousername_ = tousername;
  if (tousername) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetMsgImgRequest.ToUserName)
}

// required uint32 TotalLen = 5;
inline bool GetMsgImgRequest::has_totallen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetMsgImgRequest::set_has_totallen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetMsgImgRequest::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetMsgImgRequest::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
inline ::google::protobuf::uint32 GetMsgImgRequest::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgRequest.TotalLen)
  return totallen_;
}
inline void GetMsgImgRequest::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgRequest.TotalLen)
}

// required uint32 StartPos = 6;
inline bool GetMsgImgRequest::has_startpos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetMsgImgRequest::set_has_startpos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetMsgImgRequest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetMsgImgRequest::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
inline ::google::protobuf::uint32 GetMsgImgRequest::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgRequest.StartPos)
  return startpos_;
}
inline void GetMsgImgRequest::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgRequest.StartPos)
}

// required uint32 DataLen = 7;
inline bool GetMsgImgRequest::has_datalen() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetMsgImgRequest::set_has_datalen() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetMsgImgRequest::clear_has_datalen() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetMsgImgRequest::clear_datalen() {
  datalen_ = 0u;
  clear_has_datalen();
}
inline ::google::protobuf::uint32 GetMsgImgRequest::datalen() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgRequest.DataLen)
  return datalen_;
}
inline void GetMsgImgRequest::set_datalen(::google::protobuf::uint32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgRequest.DataLen)
}

// optional uint32 CompressType = 8;
inline bool GetMsgImgRequest::has_compresstype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GetMsgImgRequest::set_has_compresstype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GetMsgImgRequest::clear_has_compresstype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GetMsgImgRequest::clear_compresstype() {
  compresstype_ = 0u;
  clear_has_compresstype();
}
inline ::google::protobuf::uint32 GetMsgImgRequest::compresstype() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgRequest.CompressType)
  return compresstype_;
}
inline void GetMsgImgRequest::set_compresstype(::google::protobuf::uint32 value) {
  set_has_compresstype();
  compresstype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgRequest.CompressType)
}

// optional uint64 NewMsgId = 9;
inline bool GetMsgImgRequest::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GetMsgImgRequest::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GetMsgImgRequest::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GetMsgImgRequest::clear_newmsgid() {
  newmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_newmsgid();
}
inline ::google::protobuf::uint64 GetMsgImgRequest::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgRequest.NewMsgId)
  return newmsgid_;
}
inline void GetMsgImgRequest::set_newmsgid(::google::protobuf::uint64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgRequest.NewMsgId)
}

// -------------------------------------------------------------------

// GetMsgImgResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GetMsgImgResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMsgImgResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMsgImgResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMsgImgResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GetMsgImgResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GetMsgImgResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetMsgImgResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GetMsgImgResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetMsgImgResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GetMsgImgResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetMsgImgResponse.BaseResponse)
}

// required uint32 MsgId = 2;
inline bool GetMsgImgResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetMsgImgResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetMsgImgResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetMsgImgResponse::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 GetMsgImgResponse::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgResponse.MsgId)
  return msgid_;
}
inline void GetMsgImgResponse::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgResponse.MsgId)
}

// required .micromsg.SKBuiltinString_t FromUserName = 3;
inline bool GetMsgImgResponse::has_fromusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetMsgImgResponse::set_has_fromusername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetMsgImgResponse::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetMsgImgResponse::clear_fromusername() {
  if (fromusername_ != NULL) fromusername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_fromusername();
}
inline const ::micromsg::SKBuiltinString_t& GetMsgImgResponse::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgResponse.FromUserName)
  return fromusername_ != NULL ? *fromusername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* GetMsgImgResponse::mutable_fromusername() {
  set_has_fromusername();
  if (fromusername_ == NULL) {
    fromusername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetMsgImgResponse.FromUserName)
  return fromusername_;
}
inline ::micromsg::SKBuiltinString_t* GetMsgImgResponse::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.GetMsgImgResponse.FromUserName)
  clear_has_fromusername();
  ::micromsg::SKBuiltinString_t* temp = fromusername_;
  fromusername_ = NULL;
  return temp;
}
inline void GetMsgImgResponse::set_allocated_fromusername(::micromsg::SKBuiltinString_t* fromusername) {
  delete fromusername_;
  fromusername_ = fromusername;
  if (fromusername) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetMsgImgResponse.FromUserName)
}

// required .micromsg.SKBuiltinString_t ToUserName = 4;
inline bool GetMsgImgResponse::has_tousername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetMsgImgResponse::set_has_tousername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetMsgImgResponse::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetMsgImgResponse::clear_tousername() {
  if (tousername_ != NULL) tousername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_tousername();
}
inline const ::micromsg::SKBuiltinString_t& GetMsgImgResponse::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgResponse.ToUserName)
  return tousername_ != NULL ? *tousername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* GetMsgImgResponse::mutable_tousername() {
  set_has_tousername();
  if (tousername_ == NULL) {
    tousername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetMsgImgResponse.ToUserName)
  return tousername_;
}
inline ::micromsg::SKBuiltinString_t* GetMsgImgResponse::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.GetMsgImgResponse.ToUserName)
  clear_has_tousername();
  ::micromsg::SKBuiltinString_t* temp = tousername_;
  tousername_ = NULL;
  return temp;
}
inline void GetMsgImgResponse::set_allocated_tousername(::micromsg::SKBuiltinString_t* tousername) {
  delete tousername_;
  tousername_ = tousername;
  if (tousername) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetMsgImgResponse.ToUserName)
}

// required uint32 TotalLen = 5;
inline bool GetMsgImgResponse::has_totallen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetMsgImgResponse::set_has_totallen() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetMsgImgResponse::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetMsgImgResponse::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
inline ::google::protobuf::uint32 GetMsgImgResponse::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgResponse.TotalLen)
  return totallen_;
}
inline void GetMsgImgResponse::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgResponse.TotalLen)
}

// required uint32 StartPos = 6;
inline bool GetMsgImgResponse::has_startpos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetMsgImgResponse::set_has_startpos() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetMsgImgResponse::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetMsgImgResponse::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
inline ::google::protobuf::uint32 GetMsgImgResponse::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgResponse.StartPos)
  return startpos_;
}
inline void GetMsgImgResponse::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgResponse.StartPos)
}

// required uint32 DataLen = 7;
inline bool GetMsgImgResponse::has_datalen() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GetMsgImgResponse::set_has_datalen() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GetMsgImgResponse::clear_has_datalen() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GetMsgImgResponse::clear_datalen() {
  datalen_ = 0u;
  clear_has_datalen();
}
inline ::google::protobuf::uint32 GetMsgImgResponse::datalen() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgResponse.DataLen)
  return datalen_;
}
inline void GetMsgImgResponse::set_datalen(::google::protobuf::uint32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgResponse.DataLen)
}

// required .micromsg.SKBuiltinBuffer_t Data = 8;
inline bool GetMsgImgResponse::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetMsgImgResponse::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetMsgImgResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetMsgImgResponse::clear_data() {
  if (data_ != NULL) data_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_data();
}
inline const ::micromsg::SKBuiltinBuffer_t& GetMsgImgResponse::data() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgResponse.Data)
  return data_ != NULL ? *data_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* GetMsgImgResponse::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetMsgImgResponse.Data)
  return data_;
}
inline ::micromsg::SKBuiltinBuffer_t* GetMsgImgResponse::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.GetMsgImgResponse.Data)
  clear_has_data();
  ::micromsg::SKBuiltinBuffer_t* temp = data_;
  data_ = NULL;
  return temp;
}
inline void GetMsgImgResponse::set_allocated_data(::micromsg::SKBuiltinBuffer_t* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetMsgImgResponse.Data)
}

// optional uint64 NewMsgId = 9;
inline bool GetMsgImgResponse::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GetMsgImgResponse::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GetMsgImgResponse::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GetMsgImgResponse::clear_newmsgid() {
  newmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_newmsgid();
}
inline ::google::protobuf::uint64 GetMsgImgResponse::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetMsgImgResponse.NewMsgId)
  return newmsgid_;
}
inline void GetMsgImgResponse::set_newmsgid(::google::protobuf::uint64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetMsgImgResponse.NewMsgId)
}

// -------------------------------------------------------------------

// UploadVideoRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool UploadVideoRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UploadVideoRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UploadVideoRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UploadVideoRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& UploadVideoRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* UploadVideoRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* UploadVideoRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void UploadVideoRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.BaseRequest)
}

// optional string ClientMsgId = 2;
inline bool UploadVideoRequest::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadVideoRequest::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadVideoRequest::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadVideoRequest::clear_clientmsgid() {
  clientmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientmsgid();
}
inline const ::std::string& UploadVideoRequest::clientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.ClientMsgId)
  return clientmsgid_.GetNoArena();
}
inline void UploadVideoRequest::set_clientmsgid(const ::std::string& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.ClientMsgId)
}
#if LANG_CXX11
inline void UploadVideoRequest::set_clientmsgid(::std::string&& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.ClientMsgId)
}
#endif
inline void UploadVideoRequest::set_clientmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.ClientMsgId)
}
inline void UploadVideoRequest::set_clientmsgid(const char* value, size_t size) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.ClientMsgId)
}
inline ::std::string* UploadVideoRequest::mutable_clientmsgid() {
  set_has_clientmsgid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.ClientMsgId)
  return clientmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadVideoRequest::release_clientmsgid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.ClientMsgId)
  clear_has_clientmsgid();
  return clientmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadVideoRequest::set_allocated_clientmsgid(::std::string* clientmsgid) {
  if (clientmsgid != NULL) {
    set_has_clientmsgid();
  } else {
    clear_has_clientmsgid();
  }
  clientmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientmsgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.ClientMsgId)
}

// optional string FromUserName = 3;
inline bool UploadVideoRequest::has_fromusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadVideoRequest::set_has_fromusername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadVideoRequest::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadVideoRequest::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
inline const ::std::string& UploadVideoRequest::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.FromUserName)
  return fromusername_.GetNoArena();
}
inline void UploadVideoRequest::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.FromUserName)
}
#if LANG_CXX11
inline void UploadVideoRequest::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.FromUserName)
}
#endif
inline void UploadVideoRequest::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.FromUserName)
}
inline void UploadVideoRequest::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.FromUserName)
}
inline ::std::string* UploadVideoRequest::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.FromUserName)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadVideoRequest::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.FromUserName)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadVideoRequest::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.FromUserName)
}

// optional string ToUserName = 4;
inline bool UploadVideoRequest::has_tousername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadVideoRequest::set_has_tousername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadVideoRequest::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadVideoRequest::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
inline const ::std::string& UploadVideoRequest::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.ToUserName)
  return tousername_.GetNoArena();
}
inline void UploadVideoRequest::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.ToUserName)
}
#if LANG_CXX11
inline void UploadVideoRequest::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.ToUserName)
}
#endif
inline void UploadVideoRequest::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.ToUserName)
}
inline void UploadVideoRequest::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.ToUserName)
}
inline ::std::string* UploadVideoRequest::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadVideoRequest::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadVideoRequest::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.ToUserName)
}

// required uint32 ThumbTotalLen = 5;
inline bool UploadVideoRequest::has_thumbtotallen() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void UploadVideoRequest::set_has_thumbtotallen() {
  _has_bits_[0] |= 0x00200000u;
}
inline void UploadVideoRequest::clear_has_thumbtotallen() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void UploadVideoRequest::clear_thumbtotallen() {
  thumbtotallen_ = 0u;
  clear_has_thumbtotallen();
}
inline ::google::protobuf::uint32 UploadVideoRequest::thumbtotallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.ThumbTotalLen)
  return thumbtotallen_;
}
inline void UploadVideoRequest::set_thumbtotallen(::google::protobuf::uint32 value) {
  set_has_thumbtotallen();
  thumbtotallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.ThumbTotalLen)
}

// required uint32 ThumbStartPos = 6;
inline bool UploadVideoRequest::has_thumbstartpos() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void UploadVideoRequest::set_has_thumbstartpos() {
  _has_bits_[0] |= 0x00400000u;
}
inline void UploadVideoRequest::clear_has_thumbstartpos() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void UploadVideoRequest::clear_thumbstartpos() {
  thumbstartpos_ = 0u;
  clear_has_thumbstartpos();
}
inline ::google::protobuf::uint32 UploadVideoRequest::thumbstartpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.ThumbStartPos)
  return thumbstartpos_;
}
inline void UploadVideoRequest::set_thumbstartpos(::google::protobuf::uint32 value) {
  set_has_thumbstartpos();
  thumbstartpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.ThumbStartPos)
}

// required .micromsg.SKBuiltinBuffer_t ThumbData = 7;
inline bool UploadVideoRequest::has_thumbdata() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void UploadVideoRequest::set_has_thumbdata() {
  _has_bits_[0] |= 0x00080000u;
}
inline void UploadVideoRequest::clear_has_thumbdata() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void UploadVideoRequest::clear_thumbdata() {
  if (thumbdata_ != NULL) thumbdata_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_thumbdata();
}
inline const ::micromsg::SKBuiltinBuffer_t& UploadVideoRequest::thumbdata() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.ThumbData)
  return thumbdata_ != NULL ? *thumbdata_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* UploadVideoRequest::mutable_thumbdata() {
  set_has_thumbdata();
  if (thumbdata_ == NULL) {
    thumbdata_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.ThumbData)
  return thumbdata_;
}
inline ::micromsg::SKBuiltinBuffer_t* UploadVideoRequest::release_thumbdata() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.ThumbData)
  clear_has_thumbdata();
  ::micromsg::SKBuiltinBuffer_t* temp = thumbdata_;
  thumbdata_ = NULL;
  return temp;
}
inline void UploadVideoRequest::set_allocated_thumbdata(::micromsg::SKBuiltinBuffer_t* thumbdata) {
  delete thumbdata_;
  thumbdata_ = thumbdata;
  if (thumbdata) {
    set_has_thumbdata();
  } else {
    clear_has_thumbdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.ThumbData)
}

// required uint32 VideoTotalLen = 8;
inline bool UploadVideoRequest::has_videototallen() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void UploadVideoRequest::set_has_videototallen() {
  _has_bits_[0] |= 0x00800000u;
}
inline void UploadVideoRequest::clear_has_videototallen() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void UploadVideoRequest::clear_videototallen() {
  videototallen_ = 0u;
  clear_has_videototallen();
}
inline ::google::protobuf::uint32 UploadVideoRequest::videototallen() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.VideoTotalLen)
  return videototallen_;
}
inline void UploadVideoRequest::set_videototallen(::google::protobuf::uint32 value) {
  set_has_videototallen();
  videototallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.VideoTotalLen)
}

// required uint32 VideoStartPos = 9;
inline bool UploadVideoRequest::has_videostartpos() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void UploadVideoRequest::set_has_videostartpos() {
  _has_bits_[0] |= 0x01000000u;
}
inline void UploadVideoRequest::clear_has_videostartpos() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void UploadVideoRequest::clear_videostartpos() {
  videostartpos_ = 0u;
  clear_has_videostartpos();
}
inline ::google::protobuf::uint32 UploadVideoRequest::videostartpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.VideoStartPos)
  return videostartpos_;
}
inline void UploadVideoRequest::set_videostartpos(::google::protobuf::uint32 value) {
  set_has_videostartpos();
  videostartpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.VideoStartPos)
}

// required .micromsg.SKBuiltinBuffer_t VideoData = 10;
inline bool UploadVideoRequest::has_videodata() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void UploadVideoRequest::set_has_videodata() {
  _has_bits_[0] |= 0x00100000u;
}
inline void UploadVideoRequest::clear_has_videodata() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void UploadVideoRequest::clear_videodata() {
  if (videodata_ != NULL) videodata_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_videodata();
}
inline const ::micromsg::SKBuiltinBuffer_t& UploadVideoRequest::videodata() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.VideoData)
  return videodata_ != NULL ? *videodata_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* UploadVideoRequest::mutable_videodata() {
  set_has_videodata();
  if (videodata_ == NULL) {
    videodata_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.VideoData)
  return videodata_;
}
inline ::micromsg::SKBuiltinBuffer_t* UploadVideoRequest::release_videodata() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.VideoData)
  clear_has_videodata();
  ::micromsg::SKBuiltinBuffer_t* temp = videodata_;
  videodata_ = NULL;
  return temp;
}
inline void UploadVideoRequest::set_allocated_videodata(::micromsg::SKBuiltinBuffer_t* videodata) {
  delete videodata_;
  videodata_ = videodata;
  if (videodata) {
    set_has_videodata();
  } else {
    clear_has_videodata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.VideoData)
}

// required uint32 PlayLength = 11;
inline bool UploadVideoRequest::has_playlength() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void UploadVideoRequest::set_has_playlength() {
  _has_bits_[0] |= 0x02000000u;
}
inline void UploadVideoRequest::clear_has_playlength() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void UploadVideoRequest::clear_playlength() {
  playlength_ = 0u;
  clear_has_playlength();
}
inline ::google::protobuf::uint32 UploadVideoRequest::playlength() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.PlayLength)
  return playlength_;
}
inline void UploadVideoRequest::set_playlength(::google::protobuf::uint32 value) {
  set_has_playlength();
  playlength_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.PlayLength)
}

// optional uint32 NetworkEnv = 12;
inline bool UploadVideoRequest::has_networkenv() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void UploadVideoRequest::set_has_networkenv() {
  _has_bits_[0] |= 0x04000000u;
}
inline void UploadVideoRequest::clear_has_networkenv() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void UploadVideoRequest::clear_networkenv() {
  networkenv_ = 0u;
  clear_has_networkenv();
}
inline ::google::protobuf::uint32 UploadVideoRequest::networkenv() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.NetworkEnv)
  return networkenv_;
}
inline void UploadVideoRequest::set_networkenv(::google::protobuf::uint32 value) {
  set_has_networkenv();
  networkenv_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.NetworkEnv)
}

// optional uint32 CameraType = 13;
inline bool UploadVideoRequest::has_cameratype() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void UploadVideoRequest::set_has_cameratype() {
  _has_bits_[0] |= 0x08000000u;
}
inline void UploadVideoRequest::clear_has_cameratype() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void UploadVideoRequest::clear_cameratype() {
  cameratype_ = 0u;
  clear_has_cameratype();
}
inline ::google::protobuf::uint32 UploadVideoRequest::cameratype() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.CameraType)
  return cameratype_;
}
inline void UploadVideoRequest::set_cameratype(::google::protobuf::uint32 value) {
  set_has_cameratype();
  cameratype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.CameraType)
}

// optional uint32 FuncFlag = 14;
inline bool UploadVideoRequest::has_funcflag() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void UploadVideoRequest::set_has_funcflag() {
  _has_bits_[0] |= 0x10000000u;
}
inline void UploadVideoRequest::clear_has_funcflag() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void UploadVideoRequest::clear_funcflag() {
  funcflag_ = 0u;
  clear_has_funcflag();
}
inline ::google::protobuf::uint32 UploadVideoRequest::funcflag() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.FuncFlag)
  return funcflag_;
}
inline void UploadVideoRequest::set_funcflag(::google::protobuf::uint32 value) {
  set_has_funcflag();
  funcflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.FuncFlag)
}

// optional string MsgSource = 15;
inline bool UploadVideoRequest::has_msgsource() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadVideoRequest::set_has_msgsource() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadVideoRequest::clear_has_msgsource() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadVideoRequest::clear_msgsource() {
  msgsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgsource();
}
inline const ::std::string& UploadVideoRequest::msgsource() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.MsgSource)
  return msgsource_.GetNoArena();
}
inline void UploadVideoRequest::set_msgsource(const ::std::string& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.MsgSource)
}
#if LANG_CXX11
inline void UploadVideoRequest::set_msgsource(::std::string&& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.MsgSource)
}
#endif
inline void UploadVideoRequest::set_msgsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.MsgSource)
}
inline void UploadVideoRequest::set_msgsource(const char* value, size_t size) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.MsgSource)
}
inline ::std::string* UploadVideoRequest::mutable_msgsource() {
  set_has_msgsource();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.MsgSource)
  return msgsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadVideoRequest::release_msgsource() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.MsgSource)
  clear_has_msgsource();
  return msgsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadVideoRequest::set_allocated_msgsource(::std::string* msgsource) {
  if (msgsource != NULL) {
    set_has_msgsource();
  } else {
    clear_has_msgsource();
  }
  msgsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgsource);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.MsgSource)
}

// optional string CDNVideoUrl = 16;
inline bool UploadVideoRequest::has_cdnvideourl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UploadVideoRequest::set_has_cdnvideourl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UploadVideoRequest::clear_has_cdnvideourl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UploadVideoRequest::clear_cdnvideourl() {
  cdnvideourl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdnvideourl();
}
inline const ::std::string& UploadVideoRequest::cdnvideourl() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.CDNVideoUrl)
  return cdnvideourl_.GetNoArena();
}
inline void UploadVideoRequest::set_cdnvideourl(const ::std::string& value) {
  set_has_cdnvideourl();
  cdnvideourl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.CDNVideoUrl)
}
#if LANG_CXX11
inline void UploadVideoRequest::set_cdnvideourl(::std::string&& value) {
  set_has_cdnvideourl();
  cdnvideourl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.CDNVideoUrl)
}
#endif
inline void UploadVideoRequest::set_cdnvideourl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdnvideourl();
  cdnvideourl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.CDNVideoUrl)
}
inline void UploadVideoRequest::set_cdnvideourl(const char* value, size_t size) {
  set_has_cdnvideourl();
  cdnvideourl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.CDNVideoUrl)
}
inline ::std::string* UploadVideoRequest::mutable_cdnvideourl() {
  set_has_cdnvideourl();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.CDNVideoUrl)
  return cdnvideourl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadVideoRequest::release_cdnvideourl() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.CDNVideoUrl)
  clear_has_cdnvideourl();
  return cdnvideourl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadVideoRequest::set_allocated_cdnvideourl(::std::string* cdnvideourl) {
  if (cdnvideourl != NULL) {
    set_has_cdnvideourl();
  } else {
    clear_has_cdnvideourl();
  }
  cdnvideourl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdnvideourl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.CDNVideoUrl)
}

// optional string AESKey = 17;
inline bool UploadVideoRequest::has_aeskey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UploadVideoRequest::set_has_aeskey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UploadVideoRequest::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UploadVideoRequest::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
inline const ::std::string& UploadVideoRequest::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.AESKey)
  return aeskey_.GetNoArena();
}
inline void UploadVideoRequest::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.AESKey)
}
#if LANG_CXX11
inline void UploadVideoRequest::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.AESKey)
}
#endif
inline void UploadVideoRequest::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.AESKey)
}
inline void UploadVideoRequest::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.AESKey)
}
inline ::std::string* UploadVideoRequest::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.AESKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadVideoRequest::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.AESKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadVideoRequest::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.AESKey)
}

// optional int32 EncryVer = 18;
inline bool UploadVideoRequest::has_encryver() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void UploadVideoRequest::set_has_encryver() {
  _has_bits_[0] |= 0x20000000u;
}
inline void UploadVideoRequest::clear_has_encryver() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void UploadVideoRequest::clear_encryver() {
  encryver_ = 0;
  clear_has_encryver();
}
inline ::google::protobuf::int32 UploadVideoRequest::encryver() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.EncryVer)
  return encryver_;
}
inline void UploadVideoRequest::set_encryver(::google::protobuf::int32 value) {
  set_has_encryver();
  encryver_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.EncryVer)
}

// optional string CDNThumbUrl = 19;
inline bool UploadVideoRequest::has_cdnthumburl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UploadVideoRequest::set_has_cdnthumburl() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UploadVideoRequest::clear_has_cdnthumburl() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UploadVideoRequest::clear_cdnthumburl() {
  cdnthumburl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdnthumburl();
}
inline const ::std::string& UploadVideoRequest::cdnthumburl() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.CDNThumbUrl)
  return cdnthumburl_.GetNoArena();
}
inline void UploadVideoRequest::set_cdnthumburl(const ::std::string& value) {
  set_has_cdnthumburl();
  cdnthumburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.CDNThumbUrl)
}
#if LANG_CXX11
inline void UploadVideoRequest::set_cdnthumburl(::std::string&& value) {
  set_has_cdnthumburl();
  cdnthumburl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.CDNThumbUrl)
}
#endif
inline void UploadVideoRequest::set_cdnthumburl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdnthumburl();
  cdnthumburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.CDNThumbUrl)
}
inline void UploadVideoRequest::set_cdnthumburl(const char* value, size_t size) {
  set_has_cdnthumburl();
  cdnthumburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.CDNThumbUrl)
}
inline ::std::string* UploadVideoRequest::mutable_cdnthumburl() {
  set_has_cdnthumburl();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.CDNThumbUrl)
  return cdnthumburl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadVideoRequest::release_cdnthumburl() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.CDNThumbUrl)
  clear_has_cdnthumburl();
  return cdnthumburl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadVideoRequest::set_allocated_cdnthumburl(::std::string* cdnthumburl) {
  if (cdnthumburl != NULL) {
    set_has_cdnthumburl();
  } else {
    clear_has_cdnthumburl();
  }
  cdnthumburl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdnthumburl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.CDNThumbUrl)
}

// optional int32 CDNThumbImgSize = 20;
inline bool UploadVideoRequest::has_cdnthumbimgsize() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void UploadVideoRequest::set_has_cdnthumbimgsize() {
  _has_bits_[0] |= 0x40000000u;
}
inline void UploadVideoRequest::clear_has_cdnthumbimgsize() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void UploadVideoRequest::clear_cdnthumbimgsize() {
  cdnthumbimgsize_ = 0;
  clear_has_cdnthumbimgsize();
}
inline ::google::protobuf::int32 UploadVideoRequest::cdnthumbimgsize() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.CDNThumbImgSize)
  return cdnthumbimgsize_;
}
inline void UploadVideoRequest::set_cdnthumbimgsize(::google::protobuf::int32 value) {
  set_has_cdnthumbimgsize();
  cdnthumbimgsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.CDNThumbImgSize)
}

// optional int32 CDNThumbImgHeight = 21;
inline bool UploadVideoRequest::has_cdnthumbimgheight() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void UploadVideoRequest::set_has_cdnthumbimgheight() {
  _has_bits_[0] |= 0x80000000u;
}
inline void UploadVideoRequest::clear_has_cdnthumbimgheight() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void UploadVideoRequest::clear_cdnthumbimgheight() {
  cdnthumbimgheight_ = 0;
  clear_has_cdnthumbimgheight();
}
inline ::google::protobuf::int32 UploadVideoRequest::cdnthumbimgheight() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.CDNThumbImgHeight)
  return cdnthumbimgheight_;
}
inline void UploadVideoRequest::set_cdnthumbimgheight(::google::protobuf::int32 value) {
  set_has_cdnthumbimgheight();
  cdnthumbimgheight_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.CDNThumbImgHeight)
}

// optional int32 CDNThumbImgWidth = 22;
inline bool UploadVideoRequest::has_cdnthumbimgwidth() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void UploadVideoRequest::set_has_cdnthumbimgwidth() {
  _has_bits_[1] |= 0x00000001u;
}
inline void UploadVideoRequest::clear_has_cdnthumbimgwidth() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void UploadVideoRequest::clear_cdnthumbimgwidth() {
  cdnthumbimgwidth_ = 0;
  clear_has_cdnthumbimgwidth();
}
inline ::google::protobuf::int32 UploadVideoRequest::cdnthumbimgwidth() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.CDNThumbImgWidth)
  return cdnthumbimgwidth_;
}
inline void UploadVideoRequest::set_cdnthumbimgwidth(::google::protobuf::int32 value) {
  set_has_cdnthumbimgwidth();
  cdnthumbimgwidth_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.CDNThumbImgWidth)
}

// optional string CDNThumbAESKey = 23;
inline bool UploadVideoRequest::has_cdnthumbaeskey() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UploadVideoRequest::set_has_cdnthumbaeskey() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UploadVideoRequest::clear_has_cdnthumbaeskey() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UploadVideoRequest::clear_cdnthumbaeskey() {
  cdnthumbaeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdnthumbaeskey();
}
inline const ::std::string& UploadVideoRequest::cdnthumbaeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.CDNThumbAESKey)
  return cdnthumbaeskey_.GetNoArena();
}
inline void UploadVideoRequest::set_cdnthumbaeskey(const ::std::string& value) {
  set_has_cdnthumbaeskey();
  cdnthumbaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.CDNThumbAESKey)
}
#if LANG_CXX11
inline void UploadVideoRequest::set_cdnthumbaeskey(::std::string&& value) {
  set_has_cdnthumbaeskey();
  cdnthumbaeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.CDNThumbAESKey)
}
#endif
inline void UploadVideoRequest::set_cdnthumbaeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdnthumbaeskey();
  cdnthumbaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.CDNThumbAESKey)
}
inline void UploadVideoRequest::set_cdnthumbaeskey(const char* value, size_t size) {
  set_has_cdnthumbaeskey();
  cdnthumbaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.CDNThumbAESKey)
}
inline ::std::string* UploadVideoRequest::mutable_cdnthumbaeskey() {
  set_has_cdnthumbaeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.CDNThumbAESKey)
  return cdnthumbaeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadVideoRequest::release_cdnthumbaeskey() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.CDNThumbAESKey)
  clear_has_cdnthumbaeskey();
  return cdnthumbaeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadVideoRequest::set_allocated_cdnthumbaeskey(::std::string* cdnthumbaeskey) {
  if (cdnthumbaeskey != NULL) {
    set_has_cdnthumbaeskey();
  } else {
    clear_has_cdnthumbaeskey();
  }
  cdnthumbaeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdnthumbaeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.CDNThumbAESKey)
}

// optional int32 VideoFrom = 24;
inline bool UploadVideoRequest::has_videofrom() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void UploadVideoRequest::set_has_videofrom() {
  _has_bits_[1] |= 0x00000002u;
}
inline void UploadVideoRequest::clear_has_videofrom() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void UploadVideoRequest::clear_videofrom() {
  videofrom_ = 0;
  clear_has_videofrom();
}
inline ::google::protobuf::int32 UploadVideoRequest::videofrom() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.VideoFrom)
  return videofrom_;
}
inline void UploadVideoRequest::set_videofrom(::google::protobuf::int32 value) {
  set_has_videofrom();
  videofrom_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.VideoFrom)
}

// optional uint32 ReqTime = 25;
inline bool UploadVideoRequest::has_reqtime() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void UploadVideoRequest::set_has_reqtime() {
  _has_bits_[1] |= 0x00000004u;
}
inline void UploadVideoRequest::clear_has_reqtime() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void UploadVideoRequest::clear_reqtime() {
  reqtime_ = 0u;
  clear_has_reqtime();
}
inline ::google::protobuf::uint32 UploadVideoRequest::reqtime() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.ReqTime)
  return reqtime_;
}
inline void UploadVideoRequest::set_reqtime(::google::protobuf::uint32 value) {
  set_has_reqtime();
  reqtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.ReqTime)
}

// optional string VideoMd5 = 26;
inline bool UploadVideoRequest::has_videomd5() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UploadVideoRequest::set_has_videomd5() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UploadVideoRequest::clear_has_videomd5() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UploadVideoRequest::clear_videomd5() {
  videomd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_videomd5();
}
inline const ::std::string& UploadVideoRequest::videomd5() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.VideoMd5)
  return videomd5_.GetNoArena();
}
inline void UploadVideoRequest::set_videomd5(const ::std::string& value) {
  set_has_videomd5();
  videomd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.VideoMd5)
}
#if LANG_CXX11
inline void UploadVideoRequest::set_videomd5(::std::string&& value) {
  set_has_videomd5();
  videomd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.VideoMd5)
}
#endif
inline void UploadVideoRequest::set_videomd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_videomd5();
  videomd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.VideoMd5)
}
inline void UploadVideoRequest::set_videomd5(const char* value, size_t size) {
  set_has_videomd5();
  videomd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.VideoMd5)
}
inline ::std::string* UploadVideoRequest::mutable_videomd5() {
  set_has_videomd5();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.VideoMd5)
  return videomd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadVideoRequest::release_videomd5() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.VideoMd5)
  clear_has_videomd5();
  return videomd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadVideoRequest::set_allocated_videomd5(::std::string* videomd5) {
  if (videomd5 != NULL) {
    set_has_videomd5();
  } else {
    clear_has_videomd5();
  }
  videomd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videomd5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.VideoMd5)
}

// optional string StreamVideoUrl = 27;
inline bool UploadVideoRequest::has_streamvideourl() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UploadVideoRequest::set_has_streamvideourl() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UploadVideoRequest::clear_has_streamvideourl() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UploadVideoRequest::clear_streamvideourl() {
  streamvideourl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamvideourl();
}
inline const ::std::string& UploadVideoRequest::streamvideourl() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.StreamVideoUrl)
  return streamvideourl_.GetNoArena();
}
inline void UploadVideoRequest::set_streamvideourl(const ::std::string& value) {
  set_has_streamvideourl();
  streamvideourl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.StreamVideoUrl)
}
#if LANG_CXX11
inline void UploadVideoRequest::set_streamvideourl(::std::string&& value) {
  set_has_streamvideourl();
  streamvideourl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.StreamVideoUrl)
}
#endif
inline void UploadVideoRequest::set_streamvideourl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_streamvideourl();
  streamvideourl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.StreamVideoUrl)
}
inline void UploadVideoRequest::set_streamvideourl(const char* value, size_t size) {
  set_has_streamvideourl();
  streamvideourl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.StreamVideoUrl)
}
inline ::std::string* UploadVideoRequest::mutable_streamvideourl() {
  set_has_streamvideourl();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.StreamVideoUrl)
  return streamvideourl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadVideoRequest::release_streamvideourl() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.StreamVideoUrl)
  clear_has_streamvideourl();
  return streamvideourl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadVideoRequest::set_allocated_streamvideourl(::std::string* streamvideourl) {
  if (streamvideourl != NULL) {
    set_has_streamvideourl();
  } else {
    clear_has_streamvideourl();
  }
  streamvideourl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamvideourl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.StreamVideoUrl)
}

// optional uint32 StreamVideoTotalTime = 28;
inline bool UploadVideoRequest::has_streamvideototaltime() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void UploadVideoRequest::set_has_streamvideototaltime() {
  _has_bits_[1] |= 0x00000008u;
}
inline void UploadVideoRequest::clear_has_streamvideototaltime() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void UploadVideoRequest::clear_streamvideototaltime() {
  streamvideototaltime_ = 0u;
  clear_has_streamvideototaltime();
}
inline ::google::protobuf::uint32 UploadVideoRequest::streamvideototaltime() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.StreamVideoTotalTime)
  return streamvideototaltime_;
}
inline void UploadVideoRequest::set_streamvideototaltime(::google::protobuf::uint32 value) {
  set_has_streamvideototaltime();
  streamvideototaltime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.StreamVideoTotalTime)
}

// optional string StreamVideoTitle = 29;
inline bool UploadVideoRequest::has_streamvideotitle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UploadVideoRequest::set_has_streamvideotitle() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UploadVideoRequest::clear_has_streamvideotitle() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UploadVideoRequest::clear_streamvideotitle() {
  streamvideotitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamvideotitle();
}
inline const ::std::string& UploadVideoRequest::streamvideotitle() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.StreamVideoTitle)
  return streamvideotitle_.GetNoArena();
}
inline void UploadVideoRequest::set_streamvideotitle(const ::std::string& value) {
  set_has_streamvideotitle();
  streamvideotitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.StreamVideoTitle)
}
#if LANG_CXX11
inline void UploadVideoRequest::set_streamvideotitle(::std::string&& value) {
  set_has_streamvideotitle();
  streamvideotitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.StreamVideoTitle)
}
#endif
inline void UploadVideoRequest::set_streamvideotitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_streamvideotitle();
  streamvideotitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.StreamVideoTitle)
}
inline void UploadVideoRequest::set_streamvideotitle(const char* value, size_t size) {
  set_has_streamvideotitle();
  streamvideotitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.StreamVideoTitle)
}
inline ::std::string* UploadVideoRequest::mutable_streamvideotitle() {
  set_has_streamvideotitle();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.StreamVideoTitle)
  return streamvideotitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadVideoRequest::release_streamvideotitle() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.StreamVideoTitle)
  clear_has_streamvideotitle();
  return streamvideotitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadVideoRequest::set_allocated_streamvideotitle(::std::string* streamvideotitle) {
  if (streamvideotitle != NULL) {
    set_has_streamvideotitle();
  } else {
    clear_has_streamvideotitle();
  }
  streamvideotitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamvideotitle);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.StreamVideoTitle)
}

// optional string StreamVideoWording = 30;
inline bool UploadVideoRequest::has_streamvideowording() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UploadVideoRequest::set_has_streamvideowording() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UploadVideoRequest::clear_has_streamvideowording() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UploadVideoRequest::clear_streamvideowording() {
  streamvideowording_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamvideowording();
}
inline const ::std::string& UploadVideoRequest::streamvideowording() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.StreamVideoWording)
  return streamvideowording_.GetNoArena();
}
inline void UploadVideoRequest::set_streamvideowording(const ::std::string& value) {
  set_has_streamvideowording();
  streamvideowording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.StreamVideoWording)
}
#if LANG_CXX11
inline void UploadVideoRequest::set_streamvideowording(::std::string&& value) {
  set_has_streamvideowording();
  streamvideowording_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.StreamVideoWording)
}
#endif
inline void UploadVideoRequest::set_streamvideowording(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_streamvideowording();
  streamvideowording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.StreamVideoWording)
}
inline void UploadVideoRequest::set_streamvideowording(const char* value, size_t size) {
  set_has_streamvideowording();
  streamvideowording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.StreamVideoWording)
}
inline ::std::string* UploadVideoRequest::mutable_streamvideowording() {
  set_has_streamvideowording();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.StreamVideoWording)
  return streamvideowording_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadVideoRequest::release_streamvideowording() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.StreamVideoWording)
  clear_has_streamvideowording();
  return streamvideowording_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadVideoRequest::set_allocated_streamvideowording(::std::string* streamvideowording) {
  if (streamvideowording != NULL) {
    set_has_streamvideowording();
  } else {
    clear_has_streamvideowording();
  }
  streamvideowording_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamvideowording);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.StreamVideoWording)
}

// optional string StreamVideoWebUrl = 31;
inline bool UploadVideoRequest::has_streamvideoweburl() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UploadVideoRequest::set_has_streamvideoweburl() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UploadVideoRequest::clear_has_streamvideoweburl() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UploadVideoRequest::clear_streamvideoweburl() {
  streamvideoweburl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamvideoweburl();
}
inline const ::std::string& UploadVideoRequest::streamvideoweburl() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.StreamVideoWebUrl)
  return streamvideoweburl_.GetNoArena();
}
inline void UploadVideoRequest::set_streamvideoweburl(const ::std::string& value) {
  set_has_streamvideoweburl();
  streamvideoweburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.StreamVideoWebUrl)
}
#if LANG_CXX11
inline void UploadVideoRequest::set_streamvideoweburl(::std::string&& value) {
  set_has_streamvideoweburl();
  streamvideoweburl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.StreamVideoWebUrl)
}
#endif
inline void UploadVideoRequest::set_streamvideoweburl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_streamvideoweburl();
  streamvideoweburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.StreamVideoWebUrl)
}
inline void UploadVideoRequest::set_streamvideoweburl(const char* value, size_t size) {
  set_has_streamvideoweburl();
  streamvideoweburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.StreamVideoWebUrl)
}
inline ::std::string* UploadVideoRequest::mutable_streamvideoweburl() {
  set_has_streamvideoweburl();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.StreamVideoWebUrl)
  return streamvideoweburl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadVideoRequest::release_streamvideoweburl() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.StreamVideoWebUrl)
  clear_has_streamvideoweburl();
  return streamvideoweburl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadVideoRequest::set_allocated_streamvideoweburl(::std::string* streamvideoweburl) {
  if (streamvideoweburl != NULL) {
    set_has_streamvideoweburl();
  } else {
    clear_has_streamvideoweburl();
  }
  streamvideoweburl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamvideoweburl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.StreamVideoWebUrl)
}

// optional string StreamVideoThumbUrl = 32;
inline bool UploadVideoRequest::has_streamvideothumburl() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UploadVideoRequest::set_has_streamvideothumburl() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UploadVideoRequest::clear_has_streamvideothumburl() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UploadVideoRequest::clear_streamvideothumburl() {
  streamvideothumburl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamvideothumburl();
}
inline const ::std::string& UploadVideoRequest::streamvideothumburl() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.StreamVideoThumbUrl)
  return streamvideothumburl_.GetNoArena();
}
inline void UploadVideoRequest::set_streamvideothumburl(const ::std::string& value) {
  set_has_streamvideothumburl();
  streamvideothumburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.StreamVideoThumbUrl)
}
#if LANG_CXX11
inline void UploadVideoRequest::set_streamvideothumburl(::std::string&& value) {
  set_has_streamvideothumburl();
  streamvideothumburl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.StreamVideoThumbUrl)
}
#endif
inline void UploadVideoRequest::set_streamvideothumburl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_streamvideothumburl();
  streamvideothumburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.StreamVideoThumbUrl)
}
inline void UploadVideoRequest::set_streamvideothumburl(const char* value, size_t size) {
  set_has_streamvideothumburl();
  streamvideothumburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.StreamVideoThumbUrl)
}
inline ::std::string* UploadVideoRequest::mutable_streamvideothumburl() {
  set_has_streamvideothumburl();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.StreamVideoThumbUrl)
  return streamvideothumburl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadVideoRequest::release_streamvideothumburl() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.StreamVideoThumbUrl)
  clear_has_streamvideothumburl();
  return streamvideothumburl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadVideoRequest::set_allocated_streamvideothumburl(::std::string* streamvideothumburl) {
  if (streamvideothumburl != NULL) {
    set_has_streamvideothumburl();
  } else {
    clear_has_streamvideothumburl();
  }
  streamvideothumburl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamvideothumburl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.StreamVideoThumbUrl)
}

// optional string StreamVideoPublishId = 33;
inline bool UploadVideoRequest::has_streamvideopublishid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UploadVideoRequest::set_has_streamvideopublishid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UploadVideoRequest::clear_has_streamvideopublishid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UploadVideoRequest::clear_streamvideopublishid() {
  streamvideopublishid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamvideopublishid();
}
inline const ::std::string& UploadVideoRequest::streamvideopublishid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.StreamVideoPublishId)
  return streamvideopublishid_.GetNoArena();
}
inline void UploadVideoRequest::set_streamvideopublishid(const ::std::string& value) {
  set_has_streamvideopublishid();
  streamvideopublishid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.StreamVideoPublishId)
}
#if LANG_CXX11
inline void UploadVideoRequest::set_streamvideopublishid(::std::string&& value) {
  set_has_streamvideopublishid();
  streamvideopublishid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.StreamVideoPublishId)
}
#endif
inline void UploadVideoRequest::set_streamvideopublishid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_streamvideopublishid();
  streamvideopublishid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.StreamVideoPublishId)
}
inline void UploadVideoRequest::set_streamvideopublishid(const char* value, size_t size) {
  set_has_streamvideopublishid();
  streamvideopublishid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.StreamVideoPublishId)
}
inline ::std::string* UploadVideoRequest::mutable_streamvideopublishid() {
  set_has_streamvideopublishid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.StreamVideoPublishId)
  return streamvideopublishid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadVideoRequest::release_streamvideopublishid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.StreamVideoPublishId)
  clear_has_streamvideopublishid();
  return streamvideopublishid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadVideoRequest::set_allocated_streamvideopublishid(::std::string* streamvideopublishid) {
  if (streamvideopublishid != NULL) {
    set_has_streamvideopublishid();
  } else {
    clear_has_streamvideopublishid();
  }
  streamvideopublishid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamvideopublishid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.StreamVideoPublishId)
}

// optional string StreamVideoAdUxInfo = 34;
inline bool UploadVideoRequest::has_streamvideoaduxinfo() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UploadVideoRequest::set_has_streamvideoaduxinfo() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UploadVideoRequest::clear_has_streamvideoaduxinfo() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UploadVideoRequest::clear_streamvideoaduxinfo() {
  streamvideoaduxinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamvideoaduxinfo();
}
inline const ::std::string& UploadVideoRequest::streamvideoaduxinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.StreamVideoAdUxInfo)
  return streamvideoaduxinfo_.GetNoArena();
}
inline void UploadVideoRequest::set_streamvideoaduxinfo(const ::std::string& value) {
  set_has_streamvideoaduxinfo();
  streamvideoaduxinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.StreamVideoAdUxInfo)
}
#if LANG_CXX11
inline void UploadVideoRequest::set_streamvideoaduxinfo(::std::string&& value) {
  set_has_streamvideoaduxinfo();
  streamvideoaduxinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.StreamVideoAdUxInfo)
}
#endif
inline void UploadVideoRequest::set_streamvideoaduxinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_streamvideoaduxinfo();
  streamvideoaduxinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.StreamVideoAdUxInfo)
}
inline void UploadVideoRequest::set_streamvideoaduxinfo(const char* value, size_t size) {
  set_has_streamvideoaduxinfo();
  streamvideoaduxinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.StreamVideoAdUxInfo)
}
inline ::std::string* UploadVideoRequest::mutable_streamvideoaduxinfo() {
  set_has_streamvideoaduxinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.StreamVideoAdUxInfo)
  return streamvideoaduxinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadVideoRequest::release_streamvideoaduxinfo() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.StreamVideoAdUxInfo)
  clear_has_streamvideoaduxinfo();
  return streamvideoaduxinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadVideoRequest::set_allocated_streamvideoaduxinfo(::std::string* streamvideoaduxinfo) {
  if (streamvideoaduxinfo != NULL) {
    set_has_streamvideoaduxinfo();
  } else {
    clear_has_streamvideoaduxinfo();
  }
  streamvideoaduxinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamvideoaduxinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.StreamVideoAdUxInfo)
}

// optional string StatExtStr = 35;
inline bool UploadVideoRequest::has_statextstr() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UploadVideoRequest::set_has_statextstr() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UploadVideoRequest::clear_has_statextstr() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UploadVideoRequest::clear_statextstr() {
  statextstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_statextstr();
}
inline const ::std::string& UploadVideoRequest::statextstr() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.StatExtStr)
  return statextstr_.GetNoArena();
}
inline void UploadVideoRequest::set_statextstr(const ::std::string& value) {
  set_has_statextstr();
  statextstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.StatExtStr)
}
#if LANG_CXX11
inline void UploadVideoRequest::set_statextstr(::std::string&& value) {
  set_has_statextstr();
  statextstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.StatExtStr)
}
#endif
inline void UploadVideoRequest::set_statextstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_statextstr();
  statextstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.StatExtStr)
}
inline void UploadVideoRequest::set_statextstr(const char* value, size_t size) {
  set_has_statextstr();
  statextstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.StatExtStr)
}
inline ::std::string* UploadVideoRequest::mutable_statextstr() {
  set_has_statextstr();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.StatExtStr)
  return statextstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadVideoRequest::release_statextstr() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.StatExtStr)
  clear_has_statextstr();
  return statextstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadVideoRequest::set_allocated_statextstr(::std::string* statextstr) {
  if (statextstr != NULL) {
    set_has_statextstr();
  } else {
    clear_has_statextstr();
  }
  statextstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), statextstr);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.StatExtStr)
}

// optional uint32 HitMd5 = 36;
inline bool UploadVideoRequest::has_hitmd5() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void UploadVideoRequest::set_has_hitmd5() {
  _has_bits_[1] |= 0x00000010u;
}
inline void UploadVideoRequest::clear_has_hitmd5() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void UploadVideoRequest::clear_hitmd5() {
  hitmd5_ = 0u;
  clear_has_hitmd5();
}
inline ::google::protobuf::uint32 UploadVideoRequest::hitmd5() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.HitMd5)
  return hitmd5_;
}
inline void UploadVideoRequest::set_hitmd5(::google::protobuf::uint32 value) {
  set_has_hitmd5();
  hitmd5_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.HitMd5)
}

// optional string VideoNewMd5 = 37;
inline bool UploadVideoRequest::has_videonewmd5() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UploadVideoRequest::set_has_videonewmd5() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UploadVideoRequest::clear_has_videonewmd5() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UploadVideoRequest::clear_videonewmd5() {
  videonewmd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_videonewmd5();
}
inline const ::std::string& UploadVideoRequest::videonewmd5() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.VideoNewMd5)
  return videonewmd5_.GetNoArena();
}
inline void UploadVideoRequest::set_videonewmd5(const ::std::string& value) {
  set_has_videonewmd5();
  videonewmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.VideoNewMd5)
}
#if LANG_CXX11
inline void UploadVideoRequest::set_videonewmd5(::std::string&& value) {
  set_has_videonewmd5();
  videonewmd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoRequest.VideoNewMd5)
}
#endif
inline void UploadVideoRequest::set_videonewmd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_videonewmd5();
  videonewmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoRequest.VideoNewMd5)
}
inline void UploadVideoRequest::set_videonewmd5(const char* value, size_t size) {
  set_has_videonewmd5();
  videonewmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoRequest.VideoNewMd5)
}
inline ::std::string* UploadVideoRequest::mutable_videonewmd5() {
  set_has_videonewmd5();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoRequest.VideoNewMd5)
  return videonewmd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadVideoRequest::release_videonewmd5() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoRequest.VideoNewMd5)
  clear_has_videonewmd5();
  return videonewmd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadVideoRequest::set_allocated_videonewmd5(::std::string* videonewmd5) {
  if (videonewmd5 != NULL) {
    set_has_videonewmd5();
  } else {
    clear_has_videonewmd5();
  }
  videonewmd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videonewmd5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoRequest.VideoNewMd5)
}

// optional uint32 CRC32 = 38;
inline bool UploadVideoRequest::has_crc32() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void UploadVideoRequest::set_has_crc32() {
  _has_bits_[1] |= 0x00000020u;
}
inline void UploadVideoRequest::clear_has_crc32() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void UploadVideoRequest::clear_crc32() {
  crc32_ = 0u;
  clear_has_crc32();
}
inline ::google::protobuf::uint32 UploadVideoRequest::crc32() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.CRC32)
  return crc32_;
}
inline void UploadVideoRequest::set_crc32(::google::protobuf::uint32 value) {
  set_has_crc32();
  crc32_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.CRC32)
}

// optional uint32 MsgForwardType = 39;
inline bool UploadVideoRequest::has_msgforwardtype() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void UploadVideoRequest::set_has_msgforwardtype() {
  _has_bits_[1] |= 0x00000040u;
}
inline void UploadVideoRequest::clear_has_msgforwardtype() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void UploadVideoRequest::clear_msgforwardtype() {
  msgforwardtype_ = 0u;
  clear_has_msgforwardtype();
}
inline ::google::protobuf::uint32 UploadVideoRequest::msgforwardtype() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoRequest.MsgForwardType)
  return msgforwardtype_;
}
inline void UploadVideoRequest::set_msgforwardtype(::google::protobuf::uint32 value) {
  set_has_msgforwardtype();
  msgforwardtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoRequest.MsgForwardType)
}

// -------------------------------------------------------------------

// UploadVideoResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool UploadVideoResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadVideoResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadVideoResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadVideoResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& UploadVideoResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* UploadVideoResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* UploadVideoResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void UploadVideoResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoResponse.BaseResponse)
}

// optional string ClientMsgId = 2;
inline bool UploadVideoResponse::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadVideoResponse::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadVideoResponse::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadVideoResponse::clear_clientmsgid() {
  clientmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientmsgid();
}
inline const ::std::string& UploadVideoResponse::clientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoResponse.ClientMsgId)
  return clientmsgid_.GetNoArena();
}
inline void UploadVideoResponse::set_clientmsgid(const ::std::string& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoResponse.ClientMsgId)
}
#if LANG_CXX11
inline void UploadVideoResponse::set_clientmsgid(::std::string&& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoResponse.ClientMsgId)
}
#endif
inline void UploadVideoResponse::set_clientmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoResponse.ClientMsgId)
}
inline void UploadVideoResponse::set_clientmsgid(const char* value, size_t size) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoResponse.ClientMsgId)
}
inline ::std::string* UploadVideoResponse::mutable_clientmsgid() {
  set_has_clientmsgid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoResponse.ClientMsgId)
  return clientmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadVideoResponse::release_clientmsgid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoResponse.ClientMsgId)
  clear_has_clientmsgid();
  return clientmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadVideoResponse::set_allocated_clientmsgid(::std::string* clientmsgid) {
  if (clientmsgid != NULL) {
    set_has_clientmsgid();
  } else {
    clear_has_clientmsgid();
  }
  clientmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientmsgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoResponse.ClientMsgId)
}

// required uint32 MsgId = 3;
inline bool UploadVideoResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadVideoResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadVideoResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadVideoResponse::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 UploadVideoResponse::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoResponse.MsgId)
  return msgid_;
}
inline void UploadVideoResponse::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoResponse.MsgId)
}

// required uint32 ThumbStartPos = 4;
inline bool UploadVideoResponse::has_thumbstartpos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UploadVideoResponse::set_has_thumbstartpos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UploadVideoResponse::clear_has_thumbstartpos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UploadVideoResponse::clear_thumbstartpos() {
  thumbstartpos_ = 0u;
  clear_has_thumbstartpos();
}
inline ::google::protobuf::uint32 UploadVideoResponse::thumbstartpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoResponse.ThumbStartPos)
  return thumbstartpos_;
}
inline void UploadVideoResponse::set_thumbstartpos(::google::protobuf::uint32 value) {
  set_has_thumbstartpos();
  thumbstartpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoResponse.ThumbStartPos)
}

// required uint32 VideoStartPos = 5;
inline bool UploadVideoResponse::has_videostartpos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UploadVideoResponse::set_has_videostartpos() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UploadVideoResponse::clear_has_videostartpos() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UploadVideoResponse::clear_videostartpos() {
  videostartpos_ = 0u;
  clear_has_videostartpos();
}
inline ::google::protobuf::uint32 UploadVideoResponse::videostartpos() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoResponse.VideoStartPos)
  return videostartpos_;
}
inline void UploadVideoResponse::set_videostartpos(::google::protobuf::uint32 value) {
  set_has_videostartpos();
  videostartpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoResponse.VideoStartPos)
}

// optional uint64 NewMsgId = 6;
inline bool UploadVideoResponse::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UploadVideoResponse::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UploadVideoResponse::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UploadVideoResponse::clear_newmsgid() {
  newmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_newmsgid();
}
inline ::google::protobuf::uint64 UploadVideoResponse::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoResponse.NewMsgId)
  return newmsgid_;
}
inline void UploadVideoResponse::set_newmsgid(::google::protobuf::uint64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoResponse.NewMsgId)
}

// optional string AESKey = 7;
inline bool UploadVideoResponse::has_aeskey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadVideoResponse::set_has_aeskey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadVideoResponse::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadVideoResponse::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
inline const ::std::string& UploadVideoResponse::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadVideoResponse.AESKey)
  return aeskey_.GetNoArena();
}
inline void UploadVideoResponse::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadVideoResponse.AESKey)
}
#if LANG_CXX11
inline void UploadVideoResponse::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadVideoResponse.AESKey)
}
#endif
inline void UploadVideoResponse::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadVideoResponse.AESKey)
}
inline void UploadVideoResponse::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadVideoResponse.AESKey)
}
inline ::std::string* UploadVideoResponse::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadVideoResponse.AESKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadVideoResponse::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.UploadVideoResponse.AESKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadVideoResponse::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadVideoResponse.AESKey)
}

// -------------------------------------------------------------------

// DownloadVideoRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool DownloadVideoRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadVideoRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadVideoRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadVideoRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& DownloadVideoRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* DownloadVideoRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadVideoRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* DownloadVideoRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadVideoRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void DownloadVideoRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadVideoRequest.BaseRequest)
}

// required uint32 MsgId = 2;
inline bool DownloadVideoRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadVideoRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadVideoRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadVideoRequest::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 DownloadVideoRequest::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoRequest.MsgId)
  return msgid_;
}
inline void DownloadVideoRequest::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVideoRequest.MsgId)
}

// required uint32 TotalLen = 3;
inline bool DownloadVideoRequest::has_totallen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DownloadVideoRequest::set_has_totallen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DownloadVideoRequest::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DownloadVideoRequest::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
inline ::google::protobuf::uint32 DownloadVideoRequest::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoRequest.TotalLen)
  return totallen_;
}
inline void DownloadVideoRequest::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVideoRequest.TotalLen)
}

// required uint32 StartPos = 4;
inline bool DownloadVideoRequest::has_startpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DownloadVideoRequest::set_has_startpos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DownloadVideoRequest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DownloadVideoRequest::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
inline ::google::protobuf::uint32 DownloadVideoRequest::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoRequest.StartPos)
  return startpos_;
}
inline void DownloadVideoRequest::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVideoRequest.StartPos)
}

// optional uint32 NetworkEnv = 5;
inline bool DownloadVideoRequest::has_networkenv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DownloadVideoRequest::set_has_networkenv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DownloadVideoRequest::clear_has_networkenv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DownloadVideoRequest::clear_networkenv() {
  networkenv_ = 0u;
  clear_has_networkenv();
}
inline ::google::protobuf::uint32 DownloadVideoRequest::networkenv() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoRequest.NetworkEnv)
  return networkenv_;
}
inline void DownloadVideoRequest::set_networkenv(::google::protobuf::uint32 value) {
  set_has_networkenv();
  networkenv_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVideoRequest.NetworkEnv)
}

// optional uint32 MxPackSize = 6;
inline bool DownloadVideoRequest::has_mxpacksize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DownloadVideoRequest::set_has_mxpacksize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DownloadVideoRequest::clear_has_mxpacksize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DownloadVideoRequest::clear_mxpacksize() {
  mxpacksize_ = 0u;
  clear_has_mxpacksize();
}
inline ::google::protobuf::uint32 DownloadVideoRequest::mxpacksize() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoRequest.MxPackSize)
  return mxpacksize_;
}
inline void DownloadVideoRequest::set_mxpacksize(::google::protobuf::uint32 value) {
  set_has_mxpacksize();
  mxpacksize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVideoRequest.MxPackSize)
}

// optional uint64 NewMsgId = 7;
inline bool DownloadVideoRequest::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DownloadVideoRequest::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DownloadVideoRequest::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DownloadVideoRequest::clear_newmsgid() {
  newmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_newmsgid();
}
inline ::google::protobuf::uint64 DownloadVideoRequest::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoRequest.NewMsgId)
  return newmsgid_;
}
inline void DownloadVideoRequest::set_newmsgid(::google::protobuf::uint64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVideoRequest.NewMsgId)
}

// -------------------------------------------------------------------

// DownloadVideoResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool DownloadVideoResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadVideoResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadVideoResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadVideoResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& DownloadVideoResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* DownloadVideoResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadVideoResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* DownloadVideoResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadVideoResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void DownloadVideoResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadVideoResponse.BaseResponse)
}

// required uint32 MsgId = 2;
inline bool DownloadVideoResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DownloadVideoResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DownloadVideoResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DownloadVideoResponse::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 DownloadVideoResponse::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoResponse.MsgId)
  return msgid_;
}
inline void DownloadVideoResponse::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVideoResponse.MsgId)
}

// required uint32 TotalLen = 3;
inline bool DownloadVideoResponse::has_totallen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DownloadVideoResponse::set_has_totallen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DownloadVideoResponse::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DownloadVideoResponse::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
inline ::google::protobuf::uint32 DownloadVideoResponse::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoResponse.TotalLen)
  return totallen_;
}
inline void DownloadVideoResponse::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVideoResponse.TotalLen)
}

// required uint32 StartPos = 4;
inline bool DownloadVideoResponse::has_startpos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DownloadVideoResponse::set_has_startpos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DownloadVideoResponse::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DownloadVideoResponse::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
inline ::google::protobuf::uint32 DownloadVideoResponse::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoResponse.StartPos)
  return startpos_;
}
inline void DownloadVideoResponse::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVideoResponse.StartPos)
}

// required .micromsg.SKBuiltinBuffer_t Data = 5;
inline bool DownloadVideoResponse::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadVideoResponse::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadVideoResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadVideoResponse::clear_data() {
  if (data_ != NULL) data_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_data();
}
inline const ::micromsg::SKBuiltinBuffer_t& DownloadVideoResponse::data() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoResponse.Data)
  return data_ != NULL ? *data_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* DownloadVideoResponse::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DownloadVideoResponse.Data)
  return data_;
}
inline ::micromsg::SKBuiltinBuffer_t* DownloadVideoResponse::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.DownloadVideoResponse.Data)
  clear_has_data();
  ::micromsg::SKBuiltinBuffer_t* temp = data_;
  data_ = NULL;
  return temp;
}
inline void DownloadVideoResponse::set_allocated_data(::micromsg::SKBuiltinBuffer_t* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DownloadVideoResponse.Data)
}

// optional uint64 NewMsgId = 6;
inline bool DownloadVideoResponse::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DownloadVideoResponse::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DownloadVideoResponse::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DownloadVideoResponse::clear_newmsgid() {
  newmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_newmsgid();
}
inline ::google::protobuf::uint64 DownloadVideoResponse::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DownloadVideoResponse.NewMsgId)
  return newmsgid_;
}
inline void DownloadVideoResponse::set_newmsgid(::google::protobuf::uint64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DownloadVideoResponse.NewMsgId)
}

// -------------------------------------------------------------------

// RevokeMsgRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool RevokeMsgRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RevokeMsgRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RevokeMsgRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RevokeMsgRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& RevokeMsgRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* RevokeMsgRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RevokeMsgRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* RevokeMsgRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.RevokeMsgRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void RevokeMsgRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RevokeMsgRequest.BaseRequest)
}

// optional string ClientMsgId = 2;
inline bool RevokeMsgRequest::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RevokeMsgRequest::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RevokeMsgRequest::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RevokeMsgRequest::clear_clientmsgid() {
  clientmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientmsgid();
}
inline const ::std::string& RevokeMsgRequest::clientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgRequest.ClientMsgId)
  return clientmsgid_.GetNoArena();
}
inline void RevokeMsgRequest::set_clientmsgid(const ::std::string& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RevokeMsgRequest.ClientMsgId)
}
#if LANG_CXX11
inline void RevokeMsgRequest::set_clientmsgid(::std::string&& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RevokeMsgRequest.ClientMsgId)
}
#endif
inline void RevokeMsgRequest::set_clientmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RevokeMsgRequest.ClientMsgId)
}
inline void RevokeMsgRequest::set_clientmsgid(const char* value, size_t size) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RevokeMsgRequest.ClientMsgId)
}
inline ::std::string* RevokeMsgRequest::mutable_clientmsgid() {
  set_has_clientmsgid();
  // @@protoc_insertion_point(field_mutable:micromsg.RevokeMsgRequest.ClientMsgId)
  return clientmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RevokeMsgRequest::release_clientmsgid() {
  // @@protoc_insertion_point(field_release:micromsg.RevokeMsgRequest.ClientMsgId)
  clear_has_clientmsgid();
  return clientmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RevokeMsgRequest::set_allocated_clientmsgid(::std::string* clientmsgid) {
  if (clientmsgid != NULL) {
    set_has_clientmsgid();
  } else {
    clear_has_clientmsgid();
  }
  clientmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientmsgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RevokeMsgRequest.ClientMsgId)
}

// required uint32 NewClientMsgId = 3;
inline bool RevokeMsgRequest::has_newclientmsgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RevokeMsgRequest::set_has_newclientmsgid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RevokeMsgRequest::clear_has_newclientmsgid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RevokeMsgRequest::clear_newclientmsgid() {
  newclientmsgid_ = 0u;
  clear_has_newclientmsgid();
}
inline ::google::protobuf::uint32 RevokeMsgRequest::newclientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgRequest.NewClientMsgId)
  return newclientmsgid_;
}
inline void RevokeMsgRequest::set_newclientmsgid(::google::protobuf::uint32 value) {
  set_has_newclientmsgid();
  newclientmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RevokeMsgRequest.NewClientMsgId)
}

// required uint32 CreateTime = 4;
inline bool RevokeMsgRequest::has_createtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RevokeMsgRequest::set_has_createtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RevokeMsgRequest::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RevokeMsgRequest::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 RevokeMsgRequest::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgRequest.CreateTime)
  return createtime_;
}
inline void RevokeMsgRequest::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RevokeMsgRequest.CreateTime)
}

// required uint32 SvrMsgId = 5;
inline bool RevokeMsgRequest::has_svrmsgid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RevokeMsgRequest::set_has_svrmsgid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RevokeMsgRequest::clear_has_svrmsgid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RevokeMsgRequest::clear_svrmsgid() {
  svrmsgid_ = 0u;
  clear_has_svrmsgid();
}
inline ::google::protobuf::uint32 RevokeMsgRequest::svrmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgRequest.SvrMsgId)
  return svrmsgid_;
}
inline void RevokeMsgRequest::set_svrmsgid(::google::protobuf::uint32 value) {
  set_has_svrmsgid();
  svrmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RevokeMsgRequest.SvrMsgId)
}

// optional string FromUserName = 6;
inline bool RevokeMsgRequest::has_fromusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RevokeMsgRequest::set_has_fromusername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RevokeMsgRequest::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RevokeMsgRequest::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
inline const ::std::string& RevokeMsgRequest::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgRequest.FromUserName)
  return fromusername_.GetNoArena();
}
inline void RevokeMsgRequest::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RevokeMsgRequest.FromUserName)
}
#if LANG_CXX11
inline void RevokeMsgRequest::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RevokeMsgRequest.FromUserName)
}
#endif
inline void RevokeMsgRequest::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RevokeMsgRequest.FromUserName)
}
inline void RevokeMsgRequest::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RevokeMsgRequest.FromUserName)
}
inline ::std::string* RevokeMsgRequest::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.RevokeMsgRequest.FromUserName)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RevokeMsgRequest::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.RevokeMsgRequest.FromUserName)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RevokeMsgRequest::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RevokeMsgRequest.FromUserName)
}

// optional string ToUserName = 7;
inline bool RevokeMsgRequest::has_tousername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RevokeMsgRequest::set_has_tousername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RevokeMsgRequest::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RevokeMsgRequest::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
inline const ::std::string& RevokeMsgRequest::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgRequest.ToUserName)
  return tousername_.GetNoArena();
}
inline void RevokeMsgRequest::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RevokeMsgRequest.ToUserName)
}
#if LANG_CXX11
inline void RevokeMsgRequest::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RevokeMsgRequest.ToUserName)
}
#endif
inline void RevokeMsgRequest::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RevokeMsgRequest.ToUserName)
}
inline void RevokeMsgRequest::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RevokeMsgRequest.ToUserName)
}
inline ::std::string* RevokeMsgRequest::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.RevokeMsgRequest.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RevokeMsgRequest::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.RevokeMsgRequest.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RevokeMsgRequest::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RevokeMsgRequest.ToUserName)
}

// required uint32 IndexOfRequest = 8;
inline bool RevokeMsgRequest::has_indexofrequest() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RevokeMsgRequest::set_has_indexofrequest() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RevokeMsgRequest::clear_has_indexofrequest() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RevokeMsgRequest::clear_indexofrequest() {
  indexofrequest_ = 0u;
  clear_has_indexofrequest();
}
inline ::google::protobuf::uint32 RevokeMsgRequest::indexofrequest() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgRequest.IndexOfRequest)
  return indexofrequest_;
}
inline void RevokeMsgRequest::set_indexofrequest(::google::protobuf::uint32 value) {
  set_has_indexofrequest();
  indexofrequest_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RevokeMsgRequest.IndexOfRequest)
}

// optional uint64 SvrNewMsgId = 9;
inline bool RevokeMsgRequest::has_svrnewmsgid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RevokeMsgRequest::set_has_svrnewmsgid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RevokeMsgRequest::clear_has_svrnewmsgid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RevokeMsgRequest::clear_svrnewmsgid() {
  svrnewmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_svrnewmsgid();
}
inline ::google::protobuf::uint64 RevokeMsgRequest::svrnewmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgRequest.SvrNewMsgId)
  return svrnewmsgid_;
}
inline void RevokeMsgRequest::set_svrnewmsgid(::google::protobuf::uint64 value) {
  set_has_svrnewmsgid();
  svrnewmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RevokeMsgRequest.SvrNewMsgId)
}

// -------------------------------------------------------------------

// RevokeMsgResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool RevokeMsgResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RevokeMsgResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RevokeMsgResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RevokeMsgResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& RevokeMsgResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* RevokeMsgResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RevokeMsgResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* RevokeMsgResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.RevokeMsgResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void RevokeMsgResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RevokeMsgResponse.BaseResponse)
}

// optional string Introduction = 2;
inline bool RevokeMsgResponse::has_introduction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RevokeMsgResponse::set_has_introduction() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RevokeMsgResponse::clear_has_introduction() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RevokeMsgResponse::clear_introduction() {
  introduction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_introduction();
}
inline const ::std::string& RevokeMsgResponse::introduction() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgResponse.Introduction)
  return introduction_.GetNoArena();
}
inline void RevokeMsgResponse::set_introduction(const ::std::string& value) {
  set_has_introduction();
  introduction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RevokeMsgResponse.Introduction)
}
#if LANG_CXX11
inline void RevokeMsgResponse::set_introduction(::std::string&& value) {
  set_has_introduction();
  introduction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RevokeMsgResponse.Introduction)
}
#endif
inline void RevokeMsgResponse::set_introduction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_introduction();
  introduction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RevokeMsgResponse.Introduction)
}
inline void RevokeMsgResponse::set_introduction(const char* value, size_t size) {
  set_has_introduction();
  introduction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RevokeMsgResponse.Introduction)
}
inline ::std::string* RevokeMsgResponse::mutable_introduction() {
  set_has_introduction();
  // @@protoc_insertion_point(field_mutable:micromsg.RevokeMsgResponse.Introduction)
  return introduction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RevokeMsgResponse::release_introduction() {
  // @@protoc_insertion_point(field_release:micromsg.RevokeMsgResponse.Introduction)
  clear_has_introduction();
  return introduction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RevokeMsgResponse::set_allocated_introduction(::std::string* introduction) {
  if (introduction != NULL) {
    set_has_introduction();
  } else {
    clear_has_introduction();
  }
  introduction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), introduction);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RevokeMsgResponse.Introduction)
}

// optional string SysWording = 3;
inline bool RevokeMsgResponse::has_syswording() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RevokeMsgResponse::set_has_syswording() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RevokeMsgResponse::clear_has_syswording() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RevokeMsgResponse::clear_syswording() {
  syswording_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_syswording();
}
inline const ::std::string& RevokeMsgResponse::syswording() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeMsgResponse.SysWording)
  return syswording_.GetNoArena();
}
inline void RevokeMsgResponse::set_syswording(const ::std::string& value) {
  set_has_syswording();
  syswording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RevokeMsgResponse.SysWording)
}
#if LANG_CXX11
inline void RevokeMsgResponse::set_syswording(::std::string&& value) {
  set_has_syswording();
  syswording_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RevokeMsgResponse.SysWording)
}
#endif
inline void RevokeMsgResponse::set_syswording(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_syswording();
  syswording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RevokeMsgResponse.SysWording)
}
inline void RevokeMsgResponse::set_syswording(const char* value, size_t size) {
  set_has_syswording();
  syswording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RevokeMsgResponse.SysWording)
}
inline ::std::string* RevokeMsgResponse::mutable_syswording() {
  set_has_syswording();
  // @@protoc_insertion_point(field_mutable:micromsg.RevokeMsgResponse.SysWording)
  return syswording_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RevokeMsgResponse::release_syswording() {
  // @@protoc_insertion_point(field_release:micromsg.RevokeMsgResponse.SysWording)
  clear_has_syswording();
  return syswording_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RevokeMsgResponse::set_allocated_syswording(::std::string* syswording) {
  if (syswording != NULL) {
    set_has_syswording();
  } else {
    clear_has_syswording();
  }
  syswording_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), syswording);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RevokeMsgResponse.SysWording)
}

// -------------------------------------------------------------------

// SendYoRequest

// optional string ToUserName = 1;
inline bool SendYoRequest::has_tousername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendYoRequest::set_has_tousername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendYoRequest::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendYoRequest::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
inline const ::std::string& SendYoRequest::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.SendYoRequest.ToUserName)
  return tousername_.GetNoArena();
}
inline void SendYoRequest::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SendYoRequest.ToUserName)
}
#if LANG_CXX11
inline void SendYoRequest::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SendYoRequest.ToUserName)
}
#endif
inline void SendYoRequest::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SendYoRequest.ToUserName)
}
inline void SendYoRequest::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SendYoRequest.ToUserName)
}
inline ::std::string* SendYoRequest::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.SendYoRequest.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendYoRequest::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.SendYoRequest.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendYoRequest::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SendYoRequest.ToUserName)
}

// required uint32 Type = 2;
inline bool SendYoRequest::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendYoRequest::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendYoRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendYoRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 SendYoRequest::type() const {
  // @@protoc_insertion_point(field_get:micromsg.SendYoRequest.Type)
  return type_;
}
inline void SendYoRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SendYoRequest.Type)
}

// required uint32 Count = 3;
inline bool SendYoRequest::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SendYoRequest::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SendYoRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SendYoRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 SendYoRequest::count() const {
  // @@protoc_insertion_point(field_get:micromsg.SendYoRequest.Count)
  return count_;
}
inline void SendYoRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SendYoRequest.Count)
}

// required uint32 CreateTime = 4;
inline bool SendYoRequest::has_createtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SendYoRequest::set_has_createtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SendYoRequest::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SendYoRequest::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 SendYoRequest::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.SendYoRequest.CreateTime)
  return createtime_;
}
inline void SendYoRequest::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SendYoRequest.CreateTime)
}

// required uint32 ClientMsgId = 5;
inline bool SendYoRequest::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SendYoRequest::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SendYoRequest::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SendYoRequest::clear_clientmsgid() {
  clientmsgid_ = 0u;
  clear_has_clientmsgid();
}
inline ::google::protobuf::uint32 SendYoRequest::clientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.SendYoRequest.ClientMsgId)
  return clientmsgid_;
}
inline void SendYoRequest::set_clientmsgid(::google::protobuf::uint32 value) {
  set_has_clientmsgid();
  clientmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SendYoRequest.ClientMsgId)
}

// optional string MsgSource = 6;
inline bool SendYoRequest::has_msgsource() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendYoRequest::set_has_msgsource() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendYoRequest::clear_has_msgsource() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendYoRequest::clear_msgsource() {
  msgsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgsource();
}
inline const ::std::string& SendYoRequest::msgsource() const {
  // @@protoc_insertion_point(field_get:micromsg.SendYoRequest.MsgSource)
  return msgsource_.GetNoArena();
}
inline void SendYoRequest::set_msgsource(const ::std::string& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SendYoRequest.MsgSource)
}
#if LANG_CXX11
inline void SendYoRequest::set_msgsource(::std::string&& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SendYoRequest.MsgSource)
}
#endif
inline void SendYoRequest::set_msgsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SendYoRequest.MsgSource)
}
inline void SendYoRequest::set_msgsource(const char* value, size_t size) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SendYoRequest.MsgSource)
}
inline ::std::string* SendYoRequest::mutable_msgsource() {
  set_has_msgsource();
  // @@protoc_insertion_point(field_mutable:micromsg.SendYoRequest.MsgSource)
  return msgsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendYoRequest::release_msgsource() {
  // @@protoc_insertion_point(field_release:micromsg.SendYoRequest.MsgSource)
  clear_has_msgsource();
  return msgsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendYoRequest::set_allocated_msgsource(::std::string* msgsource) {
  if (msgsource != NULL) {
    set_has_msgsource();
  } else {
    clear_has_msgsource();
  }
  msgsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgsource);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SendYoRequest.MsgSource)
}

// optional uint32 YoType = 7;
inline bool SendYoRequest::has_yotype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SendYoRequest::set_has_yotype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SendYoRequest::clear_has_yotype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SendYoRequest::clear_yotype() {
  yotype_ = 0u;
  clear_has_yotype();
}
inline ::google::protobuf::uint32 SendYoRequest::yotype() const {
  // @@protoc_insertion_point(field_get:micromsg.SendYoRequest.YoType)
  return yotype_;
}
inline void SendYoRequest::set_yotype(::google::protobuf::uint32 value) {
  set_has_yotype();
  yotype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SendYoRequest.YoType)
}

// -------------------------------------------------------------------

// SendYoResponse

// required int32 Ret = 1;
inline bool SendYoResponse::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendYoResponse::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendYoResponse::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendYoResponse::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 SendYoResponse::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.SendYoResponse.Ret)
  return ret_;
}
inline void SendYoResponse::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SendYoResponse.Ret)
}

// required uint32 ServerTime = 2;
inline bool SendYoResponse::has_servertime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendYoResponse::set_has_servertime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendYoResponse::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendYoResponse::clear_servertime() {
  servertime_ = 0u;
  clear_has_servertime();
}
inline ::google::protobuf::uint32 SendYoResponse::servertime() const {
  // @@protoc_insertion_point(field_get:micromsg.SendYoResponse.ServerTime)
  return servertime_;
}
inline void SendYoResponse::set_servertime(::google::protobuf::uint32 value) {
  set_has_servertime();
  servertime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SendYoResponse.ServerTime)
}

// required uint64 MsgId = 3;
inline bool SendYoResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendYoResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendYoResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendYoResponse::clear_msgid() {
  msgid_ = GOOGLE_ULONGLONG(0);
  clear_has_msgid();
}
inline ::google::protobuf::uint64 SendYoResponse::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.SendYoResponse.MsgId)
  return msgid_;
}
inline void SendYoResponse::set_msgid(::google::protobuf::uint64 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SendYoResponse.MsgId)
}

// -------------------------------------------------------------------

// CheckBigFileUploadRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool CheckBigFileUploadRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CheckBigFileUploadRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CheckBigFileUploadRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CheckBigFileUploadRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& CheckBigFileUploadRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* CheckBigFileUploadRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* CheckBigFileUploadRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void CheckBigFileUploadRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadRequest.BaseRequest)
}

// optional string FromUserName = 2;
inline bool CheckBigFileUploadRequest::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckBigFileUploadRequest::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckBigFileUploadRequest::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckBigFileUploadRequest::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
inline const ::std::string& CheckBigFileUploadRequest::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadRequest.FromUserName)
  return fromusername_.GetNoArena();
}
inline void CheckBigFileUploadRequest::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadRequest.FromUserName)
}
#if LANG_CXX11
inline void CheckBigFileUploadRequest::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileUploadRequest.FromUserName)
}
#endif
inline void CheckBigFileUploadRequest::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileUploadRequest.FromUserName)
}
inline void CheckBigFileUploadRequest::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileUploadRequest.FromUserName)
}
inline ::std::string* CheckBigFileUploadRequest::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadRequest.FromUserName)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckBigFileUploadRequest::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadRequest.FromUserName)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckBigFileUploadRequest::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadRequest.FromUserName)
}

// optional string ToUserName = 3;
inline bool CheckBigFileUploadRequest::has_tousername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckBigFileUploadRequest::set_has_tousername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckBigFileUploadRequest::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckBigFileUploadRequest::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
inline const ::std::string& CheckBigFileUploadRequest::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadRequest.ToUserName)
  return tousername_.GetNoArena();
}
inline void CheckBigFileUploadRequest::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadRequest.ToUserName)
}
#if LANG_CXX11
inline void CheckBigFileUploadRequest::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileUploadRequest.ToUserName)
}
#endif
inline void CheckBigFileUploadRequest::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileUploadRequest.ToUserName)
}
inline void CheckBigFileUploadRequest::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileUploadRequest.ToUserName)
}
inline ::std::string* CheckBigFileUploadRequest::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadRequest.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckBigFileUploadRequest::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadRequest.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckBigFileUploadRequest::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadRequest.ToUserName)
}

// required uint64 FileSize = 4;
inline bool CheckBigFileUploadRequest::has_filesize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CheckBigFileUploadRequest::set_has_filesize() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CheckBigFileUploadRequest::clear_has_filesize() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CheckBigFileUploadRequest::clear_filesize() {
  filesize_ = GOOGLE_ULONGLONG(0);
  clear_has_filesize();
}
inline ::google::protobuf::uint64 CheckBigFileUploadRequest::filesize() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadRequest.FileSize)
  return filesize_;
}
inline void CheckBigFileUploadRequest::set_filesize(::google::protobuf::uint64 value) {
  set_has_filesize();
  filesize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadRequest.FileSize)
}

// optional string AESKey = 5;
inline bool CheckBigFileUploadRequest::has_aeskey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheckBigFileUploadRequest::set_has_aeskey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheckBigFileUploadRequest::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheckBigFileUploadRequest::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
inline const ::std::string& CheckBigFileUploadRequest::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadRequest.AESKey)
  return aeskey_.GetNoArena();
}
inline void CheckBigFileUploadRequest::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadRequest.AESKey)
}
#if LANG_CXX11
inline void CheckBigFileUploadRequest::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileUploadRequest.AESKey)
}
#endif
inline void CheckBigFileUploadRequest::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileUploadRequest.AESKey)
}
inline void CheckBigFileUploadRequest::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileUploadRequest.AESKey)
}
inline ::std::string* CheckBigFileUploadRequest::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadRequest.AESKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckBigFileUploadRequest::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadRequest.AESKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckBigFileUploadRequest::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadRequest.AESKey)
}

// optional string FileMd5 = 6;
inline bool CheckBigFileUploadRequest::has_filemd5() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheckBigFileUploadRequest::set_has_filemd5() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheckBigFileUploadRequest::clear_has_filemd5() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheckBigFileUploadRequest::clear_filemd5() {
  filemd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filemd5();
}
inline const ::std::string& CheckBigFileUploadRequest::filemd5() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadRequest.FileMd5)
  return filemd5_.GetNoArena();
}
inline void CheckBigFileUploadRequest::set_filemd5(const ::std::string& value) {
  set_has_filemd5();
  filemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadRequest.FileMd5)
}
#if LANG_CXX11
inline void CheckBigFileUploadRequest::set_filemd5(::std::string&& value) {
  set_has_filemd5();
  filemd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileUploadRequest.FileMd5)
}
#endif
inline void CheckBigFileUploadRequest::set_filemd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filemd5();
  filemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileUploadRequest.FileMd5)
}
inline void CheckBigFileUploadRequest::set_filemd5(const char* value, size_t size) {
  set_has_filemd5();
  filemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileUploadRequest.FileMd5)
}
inline ::std::string* CheckBigFileUploadRequest::mutable_filemd5() {
  set_has_filemd5();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadRequest.FileMd5)
  return filemd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckBigFileUploadRequest::release_filemd5() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadRequest.FileMd5)
  clear_has_filemd5();
  return filemd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckBigFileUploadRequest::set_allocated_filemd5(::std::string* filemd5) {
  if (filemd5 != NULL) {
    set_has_filemd5();
  } else {
    clear_has_filemd5();
  }
  filemd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filemd5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadRequest.FileMd5)
}

// required uint32 FileType = 7;
inline bool CheckBigFileUploadRequest::has_filetype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CheckBigFileUploadRequest::set_has_filetype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CheckBigFileUploadRequest::clear_has_filetype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CheckBigFileUploadRequest::clear_filetype() {
  filetype_ = 0u;
  clear_has_filetype();
}
inline ::google::protobuf::uint32 CheckBigFileUploadRequest::filetype() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadRequest.FileType)
  return filetype_;
}
inline void CheckBigFileUploadRequest::set_filetype(::google::protobuf::uint32 value) {
  set_has_filetype();
  filetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadRequest.FileType)
}

// optional string FileExt = 8;
inline bool CheckBigFileUploadRequest::has_fileext() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CheckBigFileUploadRequest::set_has_fileext() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CheckBigFileUploadRequest::clear_has_fileext() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CheckBigFileUploadRequest::clear_fileext() {
  fileext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fileext();
}
inline const ::std::string& CheckBigFileUploadRequest::fileext() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadRequest.FileExt)
  return fileext_.GetNoArena();
}
inline void CheckBigFileUploadRequest::set_fileext(const ::std::string& value) {
  set_has_fileext();
  fileext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadRequest.FileExt)
}
#if LANG_CXX11
inline void CheckBigFileUploadRequest::set_fileext(::std::string&& value) {
  set_has_fileext();
  fileext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileUploadRequest.FileExt)
}
#endif
inline void CheckBigFileUploadRequest::set_fileext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fileext();
  fileext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileUploadRequest.FileExt)
}
inline void CheckBigFileUploadRequest::set_fileext(const char* value, size_t size) {
  set_has_fileext();
  fileext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileUploadRequest.FileExt)
}
inline ::std::string* CheckBigFileUploadRequest::mutable_fileext() {
  set_has_fileext();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadRequest.FileExt)
  return fileext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckBigFileUploadRequest::release_fileext() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadRequest.FileExt)
  clear_has_fileext();
  return fileext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckBigFileUploadRequest::set_allocated_fileext(::std::string* fileext) {
  if (fileext != NULL) {
    set_has_fileext();
  } else {
    clear_has_fileext();
  }
  fileext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fileext);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadRequest.FileExt)
}

// optional string FileName = 9;
inline bool CheckBigFileUploadRequest::has_filename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CheckBigFileUploadRequest::set_has_filename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CheckBigFileUploadRequest::clear_has_filename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CheckBigFileUploadRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& CheckBigFileUploadRequest::filename() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadRequest.FileName)
  return filename_.GetNoArena();
}
inline void CheckBigFileUploadRequest::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadRequest.FileName)
}
#if LANG_CXX11
inline void CheckBigFileUploadRequest::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileUploadRequest.FileName)
}
#endif
inline void CheckBigFileUploadRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileUploadRequest.FileName)
}
inline void CheckBigFileUploadRequest::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileUploadRequest.FileName)
}
inline ::std::string* CheckBigFileUploadRequest::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadRequest.FileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckBigFileUploadRequest::release_filename() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadRequest.FileName)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckBigFileUploadRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadRequest.FileName)
}

// -------------------------------------------------------------------

// CheckBigFileUploadResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool CheckBigFileUploadResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheckBigFileUploadResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheckBigFileUploadResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheckBigFileUploadResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& CheckBigFileUploadResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* CheckBigFileUploadResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* CheckBigFileUploadResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void CheckBigFileUploadResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadResponse.BaseResponse)
}

// optional string Signature = 2;
inline bool CheckBigFileUploadResponse::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckBigFileUploadResponse::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckBigFileUploadResponse::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckBigFileUploadResponse::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& CheckBigFileUploadResponse::signature() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadResponse.Signature)
  return signature_.GetNoArena();
}
inline void CheckBigFileUploadResponse::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadResponse.Signature)
}
#if LANG_CXX11
inline void CheckBigFileUploadResponse::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileUploadResponse.Signature)
}
#endif
inline void CheckBigFileUploadResponse::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileUploadResponse.Signature)
}
inline void CheckBigFileUploadResponse::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileUploadResponse.Signature)
}
inline ::std::string* CheckBigFileUploadResponse::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadResponse.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckBigFileUploadResponse::release_signature() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadResponse.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckBigFileUploadResponse::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadResponse.Signature)
}

// optional uint32 Fakeuin = 3;
inline bool CheckBigFileUploadResponse::has_fakeuin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CheckBigFileUploadResponse::set_has_fakeuin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CheckBigFileUploadResponse::clear_has_fakeuin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CheckBigFileUploadResponse::clear_fakeuin() {
  fakeuin_ = 0u;
  clear_has_fakeuin();
}
inline ::google::protobuf::uint32 CheckBigFileUploadResponse::fakeuin() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadResponse.Fakeuin)
  return fakeuin_;
}
inline void CheckBigFileUploadResponse::set_fakeuin(::google::protobuf::uint32 value) {
  set_has_fakeuin();
  fakeuin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadResponse.Fakeuin)
}

// optional string FakeAESKey = 4;
inline bool CheckBigFileUploadResponse::has_fakeaeskey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckBigFileUploadResponse::set_has_fakeaeskey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckBigFileUploadResponse::clear_has_fakeaeskey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckBigFileUploadResponse::clear_fakeaeskey() {
  fakeaeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fakeaeskey();
}
inline const ::std::string& CheckBigFileUploadResponse::fakeaeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadResponse.FakeAESKey)
  return fakeaeskey_.GetNoArena();
}
inline void CheckBigFileUploadResponse::set_fakeaeskey(const ::std::string& value) {
  set_has_fakeaeskey();
  fakeaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadResponse.FakeAESKey)
}
#if LANG_CXX11
inline void CheckBigFileUploadResponse::set_fakeaeskey(::std::string&& value) {
  set_has_fakeaeskey();
  fakeaeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileUploadResponse.FakeAESKey)
}
#endif
inline void CheckBigFileUploadResponse::set_fakeaeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fakeaeskey();
  fakeaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileUploadResponse.FakeAESKey)
}
inline void CheckBigFileUploadResponse::set_fakeaeskey(const char* value, size_t size) {
  set_has_fakeaeskey();
  fakeaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileUploadResponse.FakeAESKey)
}
inline ::std::string* CheckBigFileUploadResponse::mutable_fakeaeskey() {
  set_has_fakeaeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadResponse.FakeAESKey)
  return fakeaeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckBigFileUploadResponse::release_fakeaeskey() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadResponse.FakeAESKey)
  clear_has_fakeaeskey();
  return fakeaeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckBigFileUploadResponse::set_allocated_fakeaeskey(::std::string* fakeaeskey) {
  if (fakeaeskey != NULL) {
    set_has_fakeaeskey();
  } else {
    clear_has_fakeaeskey();
  }
  fakeaeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fakeaeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadResponse.FakeAESKey)
}

// optional string FakeSignature = 5;
inline bool CheckBigFileUploadResponse::has_fakesignature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheckBigFileUploadResponse::set_has_fakesignature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheckBigFileUploadResponse::clear_has_fakesignature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheckBigFileUploadResponse::clear_fakesignature() {
  fakesignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fakesignature();
}
inline const ::std::string& CheckBigFileUploadResponse::fakesignature() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileUploadResponse.FakeSignature)
  return fakesignature_.GetNoArena();
}
inline void CheckBigFileUploadResponse::set_fakesignature(const ::std::string& value) {
  set_has_fakesignature();
  fakesignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileUploadResponse.FakeSignature)
}
#if LANG_CXX11
inline void CheckBigFileUploadResponse::set_fakesignature(::std::string&& value) {
  set_has_fakesignature();
  fakesignature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileUploadResponse.FakeSignature)
}
#endif
inline void CheckBigFileUploadResponse::set_fakesignature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fakesignature();
  fakesignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileUploadResponse.FakeSignature)
}
inline void CheckBigFileUploadResponse::set_fakesignature(const char* value, size_t size) {
  set_has_fakesignature();
  fakesignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileUploadResponse.FakeSignature)
}
inline ::std::string* CheckBigFileUploadResponse::mutable_fakesignature() {
  set_has_fakesignature();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileUploadResponse.FakeSignature)
  return fakesignature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckBigFileUploadResponse::release_fakesignature() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileUploadResponse.FakeSignature)
  clear_has_fakesignature();
  return fakesignature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckBigFileUploadResponse::set_allocated_fakesignature(::std::string* fakesignature) {
  if (fakesignature != NULL) {
    set_has_fakesignature();
  } else {
    clear_has_fakesignature();
  }
  fakesignature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fakesignature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileUploadResponse.FakeSignature)
}

// -------------------------------------------------------------------

// CheckBigFileDownloadRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool CheckBigFileDownloadRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CheckBigFileDownloadRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CheckBigFileDownloadRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CheckBigFileDownloadRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& CheckBigFileDownloadRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* CheckBigFileDownloadRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* CheckBigFileDownloadRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void CheckBigFileDownloadRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadRequest.BaseRequest)
}

// optional string FromUserName = 2;
inline bool CheckBigFileDownloadRequest::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckBigFileDownloadRequest::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckBigFileDownloadRequest::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckBigFileDownloadRequest::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
inline const ::std::string& CheckBigFileDownloadRequest::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadRequest.FromUserName)
  return fromusername_.GetNoArena();
}
inline void CheckBigFileDownloadRequest::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadRequest.FromUserName)
}
#if LANG_CXX11
inline void CheckBigFileDownloadRequest::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileDownloadRequest.FromUserName)
}
#endif
inline void CheckBigFileDownloadRequest::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileDownloadRequest.FromUserName)
}
inline void CheckBigFileDownloadRequest::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileDownloadRequest.FromUserName)
}
inline ::std::string* CheckBigFileDownloadRequest::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadRequest.FromUserName)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckBigFileDownloadRequest::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadRequest.FromUserName)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckBigFileDownloadRequest::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadRequest.FromUserName)
}

// optional string ToUserName = 3;
inline bool CheckBigFileDownloadRequest::has_tousername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckBigFileDownloadRequest::set_has_tousername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckBigFileDownloadRequest::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckBigFileDownloadRequest::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
inline const ::std::string& CheckBigFileDownloadRequest::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadRequest.ToUserName)
  return tousername_.GetNoArena();
}
inline void CheckBigFileDownloadRequest::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadRequest.ToUserName)
}
#if LANG_CXX11
inline void CheckBigFileDownloadRequest::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileDownloadRequest.ToUserName)
}
#endif
inline void CheckBigFileDownloadRequest::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileDownloadRequest.ToUserName)
}
inline void CheckBigFileDownloadRequest::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileDownloadRequest.ToUserName)
}
inline ::std::string* CheckBigFileDownloadRequest::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadRequest.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckBigFileDownloadRequest::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadRequest.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckBigFileDownloadRequest::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadRequest.ToUserName)
}

// required uint64 FileSize = 4;
inline bool CheckBigFileDownloadRequest::has_filesize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CheckBigFileDownloadRequest::set_has_filesize() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CheckBigFileDownloadRequest::clear_has_filesize() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CheckBigFileDownloadRequest::clear_filesize() {
  filesize_ = GOOGLE_ULONGLONG(0);
  clear_has_filesize();
}
inline ::google::protobuf::uint64 CheckBigFileDownloadRequest::filesize() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadRequest.FileSize)
  return filesize_;
}
inline void CheckBigFileDownloadRequest::set_filesize(::google::protobuf::uint64 value) {
  set_has_filesize();
  filesize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadRequest.FileSize)
}

// optional string AESKey = 5;
inline bool CheckBigFileDownloadRequest::has_aeskey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheckBigFileDownloadRequest::set_has_aeskey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheckBigFileDownloadRequest::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheckBigFileDownloadRequest::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
inline const ::std::string& CheckBigFileDownloadRequest::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadRequest.AESKey)
  return aeskey_.GetNoArena();
}
inline void CheckBigFileDownloadRequest::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadRequest.AESKey)
}
#if LANG_CXX11
inline void CheckBigFileDownloadRequest::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileDownloadRequest.AESKey)
}
#endif
inline void CheckBigFileDownloadRequest::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileDownloadRequest.AESKey)
}
inline void CheckBigFileDownloadRequest::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileDownloadRequest.AESKey)
}
inline ::std::string* CheckBigFileDownloadRequest::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadRequest.AESKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckBigFileDownloadRequest::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadRequest.AESKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckBigFileDownloadRequest::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadRequest.AESKey)
}

// optional string FileMd5 = 6;
inline bool CheckBigFileDownloadRequest::has_filemd5() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheckBigFileDownloadRequest::set_has_filemd5() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheckBigFileDownloadRequest::clear_has_filemd5() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheckBigFileDownloadRequest::clear_filemd5() {
  filemd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filemd5();
}
inline const ::std::string& CheckBigFileDownloadRequest::filemd5() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadRequest.FileMd5)
  return filemd5_.GetNoArena();
}
inline void CheckBigFileDownloadRequest::set_filemd5(const ::std::string& value) {
  set_has_filemd5();
  filemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadRequest.FileMd5)
}
#if LANG_CXX11
inline void CheckBigFileDownloadRequest::set_filemd5(::std::string&& value) {
  set_has_filemd5();
  filemd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileDownloadRequest.FileMd5)
}
#endif
inline void CheckBigFileDownloadRequest::set_filemd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filemd5();
  filemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileDownloadRequest.FileMd5)
}
inline void CheckBigFileDownloadRequest::set_filemd5(const char* value, size_t size) {
  set_has_filemd5();
  filemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileDownloadRequest.FileMd5)
}
inline ::std::string* CheckBigFileDownloadRequest::mutable_filemd5() {
  set_has_filemd5();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadRequest.FileMd5)
  return filemd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckBigFileDownloadRequest::release_filemd5() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadRequest.FileMd5)
  clear_has_filemd5();
  return filemd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckBigFileDownloadRequest::set_allocated_filemd5(::std::string* filemd5) {
  if (filemd5 != NULL) {
    set_has_filemd5();
  } else {
    clear_has_filemd5();
  }
  filemd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filemd5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadRequest.FileMd5)
}

// required uint32 FileType = 7;
inline bool CheckBigFileDownloadRequest::has_filetype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CheckBigFileDownloadRequest::set_has_filetype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CheckBigFileDownloadRequest::clear_has_filetype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CheckBigFileDownloadRequest::clear_filetype() {
  filetype_ = 0u;
  clear_has_filetype();
}
inline ::google::protobuf::uint32 CheckBigFileDownloadRequest::filetype() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadRequest.FileType)
  return filetype_;
}
inline void CheckBigFileDownloadRequest::set_filetype(::google::protobuf::uint32 value) {
  set_has_filetype();
  filetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadRequest.FileType)
}

// optional string FileExt = 8;
inline bool CheckBigFileDownloadRequest::has_fileext() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CheckBigFileDownloadRequest::set_has_fileext() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CheckBigFileDownloadRequest::clear_has_fileext() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CheckBigFileDownloadRequest::clear_fileext() {
  fileext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fileext();
}
inline const ::std::string& CheckBigFileDownloadRequest::fileext() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadRequest.FileExt)
  return fileext_.GetNoArena();
}
inline void CheckBigFileDownloadRequest::set_fileext(const ::std::string& value) {
  set_has_fileext();
  fileext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadRequest.FileExt)
}
#if LANG_CXX11
inline void CheckBigFileDownloadRequest::set_fileext(::std::string&& value) {
  set_has_fileext();
  fileext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileDownloadRequest.FileExt)
}
#endif
inline void CheckBigFileDownloadRequest::set_fileext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fileext();
  fileext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileDownloadRequest.FileExt)
}
inline void CheckBigFileDownloadRequest::set_fileext(const char* value, size_t size) {
  set_has_fileext();
  fileext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileDownloadRequest.FileExt)
}
inline ::std::string* CheckBigFileDownloadRequest::mutable_fileext() {
  set_has_fileext();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadRequest.FileExt)
  return fileext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckBigFileDownloadRequest::release_fileext() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadRequest.FileExt)
  clear_has_fileext();
  return fileext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckBigFileDownloadRequest::set_allocated_fileext(::std::string* fileext) {
  if (fileext != NULL) {
    set_has_fileext();
  } else {
    clear_has_fileext();
  }
  fileext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fileext);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadRequest.FileExt)
}

// optional string FileName = 9;
inline bool CheckBigFileDownloadRequest::has_filename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CheckBigFileDownloadRequest::set_has_filename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CheckBigFileDownloadRequest::clear_has_filename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CheckBigFileDownloadRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& CheckBigFileDownloadRequest::filename() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadRequest.FileName)
  return filename_.GetNoArena();
}
inline void CheckBigFileDownloadRequest::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadRequest.FileName)
}
#if LANG_CXX11
inline void CheckBigFileDownloadRequest::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileDownloadRequest.FileName)
}
#endif
inline void CheckBigFileDownloadRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileDownloadRequest.FileName)
}
inline void CheckBigFileDownloadRequest::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileDownloadRequest.FileName)
}
inline ::std::string* CheckBigFileDownloadRequest::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadRequest.FileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckBigFileDownloadRequest::release_filename() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadRequest.FileName)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckBigFileDownloadRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadRequest.FileName)
}

// -------------------------------------------------------------------

// CheckBigFileDownloadResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool CheckBigFileDownloadResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheckBigFileDownloadResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheckBigFileDownloadResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheckBigFileDownloadResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& CheckBigFileDownloadResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* CheckBigFileDownloadResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* CheckBigFileDownloadResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void CheckBigFileDownloadResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadResponse.BaseResponse)
}

// optional string Signature = 2;
inline bool CheckBigFileDownloadResponse::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckBigFileDownloadResponse::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckBigFileDownloadResponse::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckBigFileDownloadResponse::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& CheckBigFileDownloadResponse::signature() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadResponse.Signature)
  return signature_.GetNoArena();
}
inline void CheckBigFileDownloadResponse::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadResponse.Signature)
}
#if LANG_CXX11
inline void CheckBigFileDownloadResponse::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileDownloadResponse.Signature)
}
#endif
inline void CheckBigFileDownloadResponse::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileDownloadResponse.Signature)
}
inline void CheckBigFileDownloadResponse::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileDownloadResponse.Signature)
}
inline ::std::string* CheckBigFileDownloadResponse::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadResponse.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckBigFileDownloadResponse::release_signature() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadResponse.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckBigFileDownloadResponse::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadResponse.Signature)
}

// optional uint32 Fakeuin = 3;
inline bool CheckBigFileDownloadResponse::has_fakeuin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CheckBigFileDownloadResponse::set_has_fakeuin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CheckBigFileDownloadResponse::clear_has_fakeuin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CheckBigFileDownloadResponse::clear_fakeuin() {
  fakeuin_ = 0u;
  clear_has_fakeuin();
}
inline ::google::protobuf::uint32 CheckBigFileDownloadResponse::fakeuin() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadResponse.Fakeuin)
  return fakeuin_;
}
inline void CheckBigFileDownloadResponse::set_fakeuin(::google::protobuf::uint32 value) {
  set_has_fakeuin();
  fakeuin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadResponse.Fakeuin)
}

// optional string FakeAESKey = 4;
inline bool CheckBigFileDownloadResponse::has_fakeaeskey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckBigFileDownloadResponse::set_has_fakeaeskey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckBigFileDownloadResponse::clear_has_fakeaeskey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckBigFileDownloadResponse::clear_fakeaeskey() {
  fakeaeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fakeaeskey();
}
inline const ::std::string& CheckBigFileDownloadResponse::fakeaeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadResponse.FakeAESKey)
  return fakeaeskey_.GetNoArena();
}
inline void CheckBigFileDownloadResponse::set_fakeaeskey(const ::std::string& value) {
  set_has_fakeaeskey();
  fakeaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadResponse.FakeAESKey)
}
#if LANG_CXX11
inline void CheckBigFileDownloadResponse::set_fakeaeskey(::std::string&& value) {
  set_has_fakeaeskey();
  fakeaeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileDownloadResponse.FakeAESKey)
}
#endif
inline void CheckBigFileDownloadResponse::set_fakeaeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fakeaeskey();
  fakeaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileDownloadResponse.FakeAESKey)
}
inline void CheckBigFileDownloadResponse::set_fakeaeskey(const char* value, size_t size) {
  set_has_fakeaeskey();
  fakeaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileDownloadResponse.FakeAESKey)
}
inline ::std::string* CheckBigFileDownloadResponse::mutable_fakeaeskey() {
  set_has_fakeaeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadResponse.FakeAESKey)
  return fakeaeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckBigFileDownloadResponse::release_fakeaeskey() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadResponse.FakeAESKey)
  clear_has_fakeaeskey();
  return fakeaeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckBigFileDownloadResponse::set_allocated_fakeaeskey(::std::string* fakeaeskey) {
  if (fakeaeskey != NULL) {
    set_has_fakeaeskey();
  } else {
    clear_has_fakeaeskey();
  }
  fakeaeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fakeaeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadResponse.FakeAESKey)
}

// optional string FakeSignature = 5;
inline bool CheckBigFileDownloadResponse::has_fakesignature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheckBigFileDownloadResponse::set_has_fakesignature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheckBigFileDownloadResponse::clear_has_fakesignature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheckBigFileDownloadResponse::clear_fakesignature() {
  fakesignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fakesignature();
}
inline const ::std::string& CheckBigFileDownloadResponse::fakesignature() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckBigFileDownloadResponse.FakeSignature)
  return fakesignature_.GetNoArena();
}
inline void CheckBigFileDownloadResponse::set_fakesignature(const ::std::string& value) {
  set_has_fakesignature();
  fakesignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckBigFileDownloadResponse.FakeSignature)
}
#if LANG_CXX11
inline void CheckBigFileDownloadResponse::set_fakesignature(::std::string&& value) {
  set_has_fakesignature();
  fakesignature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckBigFileDownloadResponse.FakeSignature)
}
#endif
inline void CheckBigFileDownloadResponse::set_fakesignature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fakesignature();
  fakesignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckBigFileDownloadResponse.FakeSignature)
}
inline void CheckBigFileDownloadResponse::set_fakesignature(const char* value, size_t size) {
  set_has_fakesignature();
  fakesignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckBigFileDownloadResponse.FakeSignature)
}
inline ::std::string* CheckBigFileDownloadResponse::mutable_fakesignature() {
  set_has_fakesignature();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckBigFileDownloadResponse.FakeSignature)
  return fakesignature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckBigFileDownloadResponse::release_fakesignature() {
  // @@protoc_insertion_point(field_release:micromsg.CheckBigFileDownloadResponse.FakeSignature)
  clear_has_fakesignature();
  return fakesignature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckBigFileDownloadResponse::set_allocated_fakesignature(::std::string* fakesignature) {
  if (fakesignature != NULL) {
    set_has_fakesignature();
  } else {
    clear_has_fakesignature();
  }
  fakesignature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fakesignature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckBigFileDownloadResponse.FakeSignature)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace micromsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mmextsend_2eproto__INCLUDED
