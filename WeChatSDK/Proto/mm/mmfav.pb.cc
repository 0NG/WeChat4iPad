// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmfav.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mmfav.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micromsg {
class AddFavItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddFavItem> {
} _AddFavItem_default_instance_;
class CheckFavItemRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckFavItemRequest> {
} _CheckFavItemRequest_default_instance_;
class FavVideoInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FavVideoInfo> {
} _FavVideoInfo_default_instance_;
class ShareFavKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShareFavKey> {
} _ShareFavKey_default_instance_;
class CheckFavItemResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckFavItemResponse> {
} _CheckFavItemResponse_default_instance_;
class ModFavIndexDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModFavIndex> {
} _ModFavIndex_default_instance_;
class ModFavObjectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModFavObject> {
} _ModFavObject_default_instance_;
class ModFavItemRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModFavItemRequest> {
} _ModFavItemRequest_default_instance_;
class ModFavItemResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModFavItemResponse> {
} _ModFavItemResponse_default_instance_;
class ShareFavRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShareFavRequest> {
} _ShareFavRequest_default_instance_;
class ShareFavResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShareFavResponse> {
} _ShareFavResponse_default_instance_;
class AddFavItemRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddFavItemRequest> {
} _AddFavItemRequest_default_instance_;
class AddFavItemResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddFavItemResponse> {
} _AddFavItemResponse_default_instance_;
class DelFavItemRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelFavItemRsp> {
} _DelFavItemRsp_default_instance_;
class BatchDelFavItemRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchDelFavItemRequest> {
} _BatchDelFavItemRequest_default_instance_;
class BatchDelFavItemResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchDelFavItemResponse> {
} _BatchDelFavItemResponse_default_instance_;
class FavObjectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FavObject> {
} _FavObject_default_instance_;
class BatchGetFavItemRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchGetFavItemRequest> {
} _BatchGetFavItemRequest_default_instance_;
class BatchGetFavItemResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchGetFavItemResponse> {
} _BatchGetFavItemResponse_default_instance_;
class CheckCDNDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckCDN> {
} _CheckCDN_default_instance_;
class FavCDNItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FavCDNItem> {
} _FavCDNItem_default_instance_;
class GetFavInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetFavInfoRequest> {
} _GetFavInfoRequest_default_instance_;
class GetFavInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetFavInfoResponse> {
} _GetFavInfoResponse_default_instance_;
class CheckCDNRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckCDNRequest> {
} _CheckCDNRequest_default_instance_;
class CheckCDNResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckCDNResponse> {
} _CheckCDNResponse_default_instance_;
class FavSyncRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FavSyncRequest> {
} _FavSyncRequest_default_instance_;
class FavSyncResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FavSyncResponse> {
} _FavSyncResponse_default_instance_;
class TransCDNItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransCDNItem> {
} _TransCDNItem_default_instance_;
class BatchTransCDNRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchTransCDNRequest> {
} _BatchTransCDNRequest_default_instance_;
class BatchTransCDNResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchTransCDNResponse> {
} _BatchTransCDNResponse_default_instance_;

namespace protobuf_mmfav_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[30];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavItem, favid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavItem, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavItem, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavItem, updatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavItem, updateseq_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFavItemRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFavItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFavItemRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFavItemRequest, sourcetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFavItemRequest, sourceid_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavVideoInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavVideoInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavVideoInfo, fileid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavVideoInfo, aeskey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavVideoInfo, videoid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFavKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFavKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFavKey, fromuin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFavKey, touser_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFavKey, sharetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFavKey, scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFavKey, favid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFavKey, paramcheck_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFavKey, favitemcheck_),
  3,
  0,
  4,
  5,
  6,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFavItemResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFavItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFavItemResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModFavIndex, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModFavIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModFavIndex, modfield_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModFavIndex, modvalue_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModFavObject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModFavObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModFavObject, tagname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModFavObject, attrname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModFavObject, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModFavObject, type_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModFavItemRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModFavItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModFavItemRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModFavItemRequest, favid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModFavItemRequest, indexcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModFavItemRequest, indexlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModFavItemRequest, objectcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModFavItemRequest, objectlist_),
  0,
  1,
  2,
  ~0u,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModFavItemResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModFavItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModFavItemResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFavRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFavRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFavRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFavRequest, touser_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFavRequest, scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFavRequest, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFavRequest, favidlist_),
  1,
  0,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFavResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFavResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFavResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFavResponse, urlcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFavResponse, urllist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavItemRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavItemRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavItemRequest, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavItemRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavItemRequest, sourcetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavItemRequest, sourceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavItemRequest, object_),
  3,
  0,
  4,
  5,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavItemResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavItemResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavItemResponse, favid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavItemResponse, updateseq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavItemResponse, usedsize_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFavItemRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFavItemRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFavItemRsp, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFavItemRsp, favid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelFavItemRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelFavItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelFavItemRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelFavItemRequest, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelFavItemRequest, favidlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelFavItemResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelFavItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelFavItemResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelFavItemResponse, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelFavItemResponse, list_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavObject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavObject, favid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavObject, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavObject, object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavObject, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavObject, updatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavObject, updateseq_),
  1,
  2,
  0,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetFavItemRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetFavItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetFavItemRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetFavItemRequest, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetFavItemRequest, favidlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetFavItemResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetFavItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetFavItemResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetFavItemResponse, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetFavItemResponse, objectlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCDN, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCDN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCDN, dataid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCDN, fullmd5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCDN, head256md5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCDN, fullsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCDN, datasourcetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCDN, datasourceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCDN, isthumb_),
  0,
  1,
  2,
  4,
  5,
  3,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavCDNItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavCDNItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavCDNItem, dataid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavCDNItem, fullmd5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavCDNItem, head256md5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavCDNItem, fullsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavCDNItem, cdnurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavCDNItem, aeskey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavCDNItem, encryver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavCDNItem, videoid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavCDNItem, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavCDNItem, datastatus_),
  0,
  1,
  2,
  6,
  3,
  4,
  7,
  5,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFavInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFavInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFavInfoRequest, baserequest_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFavInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFavInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFavInfoResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFavInfoResponse, usedsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFavInfoResponse, totalsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFavInfoResponse, mxfavfilesize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFavInfoResponse, mxautouploadsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFavInfoResponse, mxautodownloadsize_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCDNRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCDNRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCDNRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCDNRequest, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCDNRequest, list_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCDNResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCDNResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCDNResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCDNResponse, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCDNResponse, list_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavSyncRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavSyncRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavSyncRequest, selector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavSyncRequest, keybuf_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavSyncResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavSyncResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavSyncResponse, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavSyncResponse, cmdlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavSyncResponse, keybuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavSyncResponse, continueflag_),
  2,
  0,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransCDNItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransCDNItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransCDNItem, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransCDNItem, fileid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransCDNItem, aeskey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransCDNItem, favdatatype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransCDNItem, size_),
  2,
  0,
  1,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTransCDNRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTransCDNRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTransCDNRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTransCDNRequest, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTransCDNRequest, list_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTransCDNResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTransCDNResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTransCDNResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTransCDNResponse, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTransCDNResponse, list_),
  0,
  1,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 10, sizeof(AddFavItem)},
  { 15, 23, sizeof(CheckFavItemRequest)},
  { 26, 34, sizeof(FavVideoInfo)},
  { 37, 49, sizeof(ShareFavKey)},
  { 56, 62, sizeof(CheckFavItemResponse)},
  { 63, 70, sizeof(ModFavIndex)},
  { 72, 81, sizeof(ModFavObject)},
  { 85, 96, sizeof(ModFavItemRequest)},
  { 102, 108, sizeof(ModFavItemResponse)},
  { 109, 119, sizeof(ShareFavRequest)},
  { 124, 132, sizeof(ShareFavResponse)},
  { 135, 146, sizeof(AddFavItemRequest)},
  { 152, 161, sizeof(AddFavItemResponse)},
  { 165, 172, sizeof(DelFavItemRsp)},
  { 174, 182, sizeof(BatchDelFavItemRequest)},
  { 185, 193, sizeof(BatchDelFavItemResponse)},
  { 196, 207, sizeof(FavObject)},
  { 213, 221, sizeof(BatchGetFavItemRequest)},
  { 224, 232, sizeof(BatchGetFavItemResponse)},
  { 235, 247, sizeof(CheckCDN)},
  { 254, 269, sizeof(FavCDNItem)},
  { 279, 285, sizeof(GetFavInfoRequest)},
  { 286, 297, sizeof(GetFavInfoResponse)},
  { 303, 311, sizeof(CheckCDNRequest)},
  { 314, 322, sizeof(CheckCDNResponse)},
  { 325, 332, sizeof(FavSyncRequest)},
  { 334, 343, sizeof(FavSyncResponse)},
  { 347, 357, sizeof(TransCDNItem)},
  { 362, 370, sizeof(BatchTransCDNRequest)},
  { 373, 381, sizeof(BatchTransCDNResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddFavItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckFavItemRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FavVideoInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShareFavKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckFavItemResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModFavIndex_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModFavObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModFavItemRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModFavItemResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShareFavRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShareFavResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddFavItemRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddFavItemResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelFavItemRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchDelFavItemRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchDelFavItemResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FavObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchGetFavItemRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchGetFavItemResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckCDN_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FavCDNItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetFavInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetFavInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckCDNRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckCDNResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FavSyncRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FavSyncResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransCDNItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchTransCDNRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchTransCDNResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mmfav.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 30);
}

}  // namespace

void TableStruct::Shutdown() {
  _AddFavItem_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CheckFavItemRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _FavVideoInfo_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ShareFavKey_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CheckFavItemResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ModFavIndex_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ModFavObject_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ModFavItemRequest_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ModFavItemResponse_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _ShareFavRequest_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _ShareFavResponse_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _AddFavItemRequest_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _AddFavItemResponse_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _DelFavItemRsp_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _BatchDelFavItemRequest_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _BatchDelFavItemResponse_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _FavObject_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _BatchGetFavItemRequest_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _BatchGetFavItemResponse_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CheckCDN_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _FavCDNItem_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _GetFavInfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _GetFavInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CheckCDNRequest_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CheckCDNResponse_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _FavSyncRequest_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _FavSyncResponse_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _TransCDNItem_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _BatchTransCDNRequest_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _BatchTransCDNResponse_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::micromsg::protobuf_mmbuiltintype_2eproto::InitDefaults();
  ::micromsg::protobuf_mmbase_2eproto::InitDefaults();
  _AddFavItem_default_instance_.DefaultConstruct();
  _CheckFavItemRequest_default_instance_.DefaultConstruct();
  _FavVideoInfo_default_instance_.DefaultConstruct();
  _ShareFavKey_default_instance_.DefaultConstruct();
  _CheckFavItemResponse_default_instance_.DefaultConstruct();
  _ModFavIndex_default_instance_.DefaultConstruct();
  _ModFavObject_default_instance_.DefaultConstruct();
  _ModFavItemRequest_default_instance_.DefaultConstruct();
  _ModFavItemResponse_default_instance_.DefaultConstruct();
  _ShareFavRequest_default_instance_.DefaultConstruct();
  _ShareFavResponse_default_instance_.DefaultConstruct();
  _AddFavItemRequest_default_instance_.DefaultConstruct();
  _AddFavItemResponse_default_instance_.DefaultConstruct();
  _DelFavItemRsp_default_instance_.DefaultConstruct();
  _BatchDelFavItemRequest_default_instance_.DefaultConstruct();
  _BatchDelFavItemResponse_default_instance_.DefaultConstruct();
  _FavObject_default_instance_.DefaultConstruct();
  _BatchGetFavItemRequest_default_instance_.DefaultConstruct();
  _BatchGetFavItemResponse_default_instance_.DefaultConstruct();
  _CheckCDN_default_instance_.DefaultConstruct();
  _FavCDNItem_default_instance_.DefaultConstruct();
  _GetFavInfoRequest_default_instance_.DefaultConstruct();
  _GetFavInfoResponse_default_instance_.DefaultConstruct();
  _CheckCDNRequest_default_instance_.DefaultConstruct();
  _CheckCDNResponse_default_instance_.DefaultConstruct();
  _FavSyncRequest_default_instance_.DefaultConstruct();
  _FavSyncResponse_default_instance_.DefaultConstruct();
  _TransCDNItem_default_instance_.DefaultConstruct();
  _BatchTransCDNRequest_default_instance_.DefaultConstruct();
  _BatchTransCDNResponse_default_instance_.DefaultConstruct();
  _CheckFavItemRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _CheckFavItemResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _ModFavItemRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _ModFavItemResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _ShareFavRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _ShareFavResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _AddFavItemRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _AddFavItemResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _BatchDelFavItemRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _BatchDelFavItemResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _BatchGetFavItemRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _BatchGetFavItemResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetFavInfoRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetFavInfoResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _CheckCDNRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _CheckCDNResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _FavSyncRequest_default_instance_.get_mutable()->keybuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _FavSyncResponse_default_instance_.get_mutable()->cmdlist_ = const_cast< ::micromsg::CmdList*>(
      ::micromsg::CmdList::internal_default_instance());
  _FavSyncResponse_default_instance_.get_mutable()->keybuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BatchTransCDNRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _BatchTransCDNResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013mmfav.proto\022\010micromsg\032\023mmbuiltintype.p"
      "roto\032\014mmbase.proto\"^\n\nAddFavItem\022\r\n\005FavI"
      "d\030\001 \002(\005\022\014\n\004Type\030\002 \002(\005\022\014\n\004Flag\030\003 \002(\r\022\022\n\nU"
      "pdateTime\030\004 \002(\r\022\021\n\tUpdateSeq\030\005 \002(\r\"g\n\023Ch"
      "eckFavItemRequest\022*\n\013BaseRequest\030\001 \002(\0132\025"
      ".micromsg.BaseRequest\022\022\n\nSourceType\030\002 \002("
      "\r\022\020\n\010SourceId\030\003 \001(\t\"\?\n\014FavVideoInfo\022\016\n\006F"
      "ileId\030\001 \001(\t\022\016\n\006AesKey\030\002 \001(\t\022\017\n\007VideoId\030\003"
      " \001(\t\"\211\001\n\013ShareFavKey\022\017\n\007FromUin\030\001 \002(\r\022\016\n"
      "\006ToUser\030\002 \001(\t\022\021\n\tShareTime\030\003 \002(\r\022\r\n\005Scen"
      "e\030\004 \002(\r\022\r\n\005FavId\030\005 \002(\r\022\022\n\nParamCheck\030\006 \001"
      "(\t\022\024\n\014FavItemCheck\030\007 \001(\t\"D\n\024CheckFavItem"
      "Response\022,\n\014BaseResponse\030\001 \002(\0132\026.microms"
      "g.BaseResponse\"1\n\013ModFavIndex\022\020\n\010ModFiel"
      "d\030\001 \002(\r\022\020\n\010ModValue\030\002 \002(\r\"N\n\014ModFavObjec"
      "t\022\017\n\007TagName\030\001 \001(\t\022\020\n\010AttrName\030\002 \001(\t\022\r\n\005"
      "Value\030\003 \001(\t\022\014\n\004Type\030\004 \001(\r\"\315\001\n\021ModFavItem"
      "Request\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg."
      "BaseRequest\022\r\n\005FavId\030\002 \002(\r\022\022\n\nIndexCount"
      "\030\003 \002(\r\022(\n\tIndexList\030\004 \003(\0132\025.micromsg.Mod"
      "FavIndex\022\023\n\013ObjectCount\030\005 \002(\r\022*\n\nObjectL"
      "ist\030\006 \003(\0132\026.micromsg.ModFavObject\"B\n\022Mod"
      "FavItemResponse\022,\n\014BaseResponse\030\001 \002(\0132\026."
      "micromsg.BaseResponse\"\202\001\n\017ShareFavReques"
      "t\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseRe"
      "quest\022\016\n\006ToUser\030\002 \001(\t\022\r\n\005Scene\030\003 \002(\r\022\r\n\005"
      "Count\030\004 \002(\r\022\025\n\tFavIdList\030\005 \003(\rB\002\020\001\"\200\001\n\020S"
      "hareFavResponse\022,\n\014BaseResponse\030\001 \002(\0132\026."
      "micromsg.BaseResponse\022\020\n\010UrlCount\030\002 \002(\r\022"
      ",\n\007UrlList\030\003 \003(\0132\033.micromsg.SKBuiltinStr"
      "ing_t\"\225\001\n\021AddFavItemRequest\022*\n\013BaseReque"
      "st\030\001 \002(\0132\025.micromsg.BaseRequest\022\020\n\010Clien"
      "tId\030\002 \001(\t\022\014\n\004Type\030\003 \002(\r\022\022\n\nSourceType\030\004 "
      "\002(\r\022\020\n\010SourceId\030\005 \001(\t\022\016\n\006Object\030\006 \001(\t\"v\n"
      "\022AddFavItemResponse\022,\n\014BaseResponse\030\001 \002("
      "\0132\026.micromsg.BaseResponse\022\r\n\005FavId\030\002 \002(\r"
      "\022\021\n\tUpdateSeq\030\003 \002(\r\022\020\n\010UsedSize\030\004 \001(\004\"+\n"
      "\rDelFavItemRsp\022\013\n\003Ret\030\001 \002(\005\022\r\n\005FavId\030\002 \002"
      "(\r\"j\n\026BatchDelFavItemRequest\022*\n\013BaseRequ"
      "est\030\001 \002(\0132\025.micromsg.BaseRequest\022\r\n\005Coun"
      "t\030\002 \002(\r\022\025\n\tFavIdList\030\003 \003(\rB\002\020\001\"}\n\027BatchD"
      "elFavItemResponse\022,\n\014BaseResponse\030\001 \002(\0132"
      "\026.micromsg.BaseResponse\022\r\n\005Count\030\002 \002(\r\022%"
      "\n\004List\030\003 \003(\0132\027.micromsg.DelFavItemRsp\"o\n"
      "\tFavObject\022\r\n\005FavId\030\001 \002(\r\022\016\n\006Status\030\002 \002("
      "\005\022\016\n\006Object\030\003 \001(\t\022\014\n\004Flag\030\004 \002(\r\022\022\n\nUpdat"
      "eTime\030\005 \002(\r\022\021\n\tUpdateSeq\030\006 \002(\r\"j\n\026BatchG"
      "etFavItemRequest\022*\n\013BaseRequest\030\001 \002(\0132\025."
      "micromsg.BaseRequest\022\r\n\005Count\030\002 \002(\r\022\025\n\tF"
      "avIdList\030\003 \003(\rB\002\020\001\"\177\n\027BatchGetFavItemRes"
      "ponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.B"
      "aseResponse\022\r\n\005Count\030\002 \002(\r\022\'\n\nObjectList"
      "\030\003 \003(\0132\023.micromsg.FavObject\"\220\001\n\010CheckCDN"
      "\022\016\n\006DataId\030\001 \001(\t\022\017\n\007FullMd5\030\002 \001(\t\022\022\n\nHea"
      "d256Md5\030\003 \001(\t\022\020\n\010FullSize\030\004 \002(\r\022\026\n\016DataS"
      "ourceType\030\005 \002(\r\022\024\n\014DataSourceId\030\006 \001(\t\022\017\n"
      "\007IsThumb\030\007 \002(\r\"\272\001\n\nFavCDNItem\022\016\n\006DataId\030"
      "\001 \001(\t\022\017\n\007FullMd5\030\002 \001(\t\022\022\n\nHead256Md5\030\003 \001"
      "(\t\022\020\n\010FullSize\030\004 \002(\r\022\016\n\006CDNURL\030\005 \001(\t\022\016\n\006"
      "AESKey\030\006 \001(\t\022\020\n\010EncryVer\030\007 \002(\005\022\017\n\007VideoI"
      "d\030\010 \001(\t\022\016\n\006Status\030\t \002(\005\022\022\n\nDataStatus\030\n "
      "\002(\005\"\?\n\021GetFavInfoRequest\022*\n\013BaseRequest\030"
      "\001 \002(\0132\025.micromsg.BaseRequest\"\264\001\n\022GetFavI"
      "nfoResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micr"
      "omsg.BaseResponse\022\020\n\010UsedSize\030\002 \002(\004\022\021\n\tT"
      "otalSize\030\003 \002(\004\022\025\n\rMxFavFileSize\030\004 \002(\r\022\030\n"
      "\020MxAutoUploadSize\030\005 \002(\r\022\032\n\022MxAutoDownloa"
      "dSize\030\006 \002(\r\"n\n\017CheckCDNRequest\022*\n\013BaseRe"
      "quest\030\001 \002(\0132\025.micromsg.BaseRequest\022\r\n\005Co"
      "unt\030\002 \002(\r\022 \n\004List\030\003 \003(\0132\022.micromsg.Check"
      "CDN\"s\n\020CheckCDNResponse\022,\n\014BaseResponse\030"
      "\001 \002(\0132\026.micromsg.BaseResponse\022\r\n\005Count\030\002"
      " \002(\r\022\"\n\004List\030\003 \003(\0132\024.micromsg.FavCDNItem"
      "\"O\n\016FavSyncRequest\022\020\n\010Selector\030\001 \002(\r\022+\n\006"
      "KeyBuf\030\003 \002(\0132\033.micromsg.SKBuiltinBuffer_"
      "t\"\205\001\n\017FavSyncResponse\022\013\n\003Ret\030\001 \002(\005\022\"\n\007Cm"
      "dList\030\002 \002(\0132\021.micromsg.CmdList\022+\n\006KeyBuf"
      "\030\003 \002(\0132\033.micromsg.SKBuiltinBuffer_t\022\024\n\014C"
      "ontinueFlag\030\004 \002(\r\"c\n\014TransCDNItem\022\020\n\010Cli"
      "entId\030\001 \002(\r\022\016\n\006FileId\030\002 \001(\t\022\016\n\006AesKey\030\003 "
      "\001(\t\022\023\n\013FavDataType\030\004 \002(\r\022\014\n\004Size\030\005 \002(\004\"w"
      "\n\024BatchTransCDNRequest\022*\n\013BaseRequest\030\001 "
      "\002(\0132\025.micromsg.BaseRequest\022\r\n\005Count\030\002 \002("
      "\r\022$\n\004List\030\003 \003(\0132\026.micromsg.TransCDNItem\""
      "z\n\025BatchTransCDNResponse\022,\n\014BaseResponse"
      "\030\001 \002(\0132\026.micromsg.BaseResponse\022\r\n\005Count\030"
      "\002 \002(\r\022$\n\004List\030\003 \003(\0132\026.micromsg.TransCDNI"
      "tem"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3483);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mmfav.proto", &protobuf_RegisterTypes);
  ::micromsg::protobuf_mmbuiltintype_2eproto::AddDescriptors();
  ::micromsg::protobuf_mmbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mmfav_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFavItem::kFavIdFieldNumber;
const int AddFavItem::kTypeFieldNumber;
const int AddFavItem::kFlagFieldNumber;
const int AddFavItem::kUpdateTimeFieldNumber;
const int AddFavItem::kUpdateSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFavItem::AddFavItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AddFavItem)
}
AddFavItem::AddFavItem(const AddFavItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&favid_, &from.favid_,
    reinterpret_cast<char*>(&updateseq_) -
    reinterpret_cast<char*>(&favid_) + sizeof(updateseq_));
  // @@protoc_insertion_point(copy_constructor:micromsg.AddFavItem)
}

void AddFavItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&favid_, 0, reinterpret_cast<char*>(&updateseq_) -
    reinterpret_cast<char*>(&favid_) + sizeof(updateseq_));
}

AddFavItem::~AddFavItem() {
  // @@protoc_insertion_point(destructor:micromsg.AddFavItem)
  SharedDtor();
}

void AddFavItem::SharedDtor() {
}

void AddFavItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFavItem::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddFavItem& AddFavItem::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddFavItem* AddFavItem::New(::google::protobuf::Arena* arena) const {
  AddFavItem* n = new AddFavItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddFavItem::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AddFavItem)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&favid_, 0, reinterpret_cast<char*>(&updateseq_) -
      reinterpret_cast<char*>(&favid_) + sizeof(updateseq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddFavItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AddFavItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 FavId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_favid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &favid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Flag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 UpdateTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_updatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 UpdateSeq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_updateseq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updateseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AddFavItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AddFavItem)
  return false;
#undef DO_
}

void AddFavItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AddFavItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 FavId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->favid(), output);
  }

  // required int32 Type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required uint32 Flag = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flag(), output);
  }

  // required uint32 UpdateTime = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->updatetime(), output);
  }

  // required uint32 UpdateSeq = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->updateseq(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AddFavItem)
}

::google::protobuf::uint8* AddFavItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AddFavItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 FavId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->favid(), target);
  }

  // required int32 Type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required uint32 Flag = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flag(), target);
  }

  // required uint32 UpdateTime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->updatetime(), target);
  }

  // required uint32 UpdateSeq = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->updateseq(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AddFavItem)
  return target;
}

size_t AddFavItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.AddFavItem)
  size_t total_size = 0;

  if (has_favid()) {
    // required int32 FavId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->favid());
  }

  if (has_type()) {
    // required int32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_flag()) {
    // required uint32 Flag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag());
  }

  if (has_updatetime()) {
    // required uint32 UpdateTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updatetime());
  }

  if (has_updateseq()) {
    // required uint32 UpdateSeq = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updateseq());
  }

  return total_size;
}
size_t AddFavItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AddFavItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 FavId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->favid());

    // required int32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required uint32 Flag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag());

    // required uint32 UpdateTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updatetime());

    // required uint32 UpdateSeq = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updateseq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFavItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AddFavItem)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFavItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddFavItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AddFavItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AddFavItem)
    MergeFrom(*source);
  }
}

void AddFavItem::MergeFrom(const AddFavItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AddFavItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      favid_ = from.favid_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000008u) {
      updatetime_ = from.updatetime_;
    }
    if (cached_has_bits & 0x00000010u) {
      updateseq_ = from.updateseq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddFavItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AddFavItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFavItem::CopyFrom(const AddFavItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AddFavItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFavItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void AddFavItem::Swap(AddFavItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFavItem::InternalSwap(AddFavItem* other) {
  std::swap(favid_, other->favid_);
  std::swap(type_, other->type_);
  std::swap(flag_, other->flag_);
  std::swap(updatetime_, other->updatetime_);
  std::swap(updateseq_, other->updateseq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddFavItem::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddFavItem

// required int32 FavId = 1;
bool AddFavItem::has_favid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddFavItem::set_has_favid() {
  _has_bits_[0] |= 0x00000001u;
}
void AddFavItem::clear_has_favid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddFavItem::clear_favid() {
  favid_ = 0;
  clear_has_favid();
}
::google::protobuf::int32 AddFavItem::favid() const {
  // @@protoc_insertion_point(field_get:micromsg.AddFavItem.FavId)
  return favid_;
}
void AddFavItem::set_favid(::google::protobuf::int32 value) {
  set_has_favid();
  favid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddFavItem.FavId)
}

// required int32 Type = 2;
bool AddFavItem::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddFavItem::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void AddFavItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddFavItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 AddFavItem::type() const {
  // @@protoc_insertion_point(field_get:micromsg.AddFavItem.Type)
  return type_;
}
void AddFavItem::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddFavItem.Type)
}

// required uint32 Flag = 3;
bool AddFavItem::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AddFavItem::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
void AddFavItem::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
void AddFavItem::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
::google::protobuf::uint32 AddFavItem::flag() const {
  // @@protoc_insertion_point(field_get:micromsg.AddFavItem.Flag)
  return flag_;
}
void AddFavItem::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddFavItem.Flag)
}

// required uint32 UpdateTime = 4;
bool AddFavItem::has_updatetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AddFavItem::set_has_updatetime() {
  _has_bits_[0] |= 0x00000008u;
}
void AddFavItem::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000008u;
}
void AddFavItem::clear_updatetime() {
  updatetime_ = 0u;
  clear_has_updatetime();
}
::google::protobuf::uint32 AddFavItem::updatetime() const {
  // @@protoc_insertion_point(field_get:micromsg.AddFavItem.UpdateTime)
  return updatetime_;
}
void AddFavItem::set_updatetime(::google::protobuf::uint32 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddFavItem.UpdateTime)
}

// required uint32 UpdateSeq = 5;
bool AddFavItem::has_updateseq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AddFavItem::set_has_updateseq() {
  _has_bits_[0] |= 0x00000010u;
}
void AddFavItem::clear_has_updateseq() {
  _has_bits_[0] &= ~0x00000010u;
}
void AddFavItem::clear_updateseq() {
  updateseq_ = 0u;
  clear_has_updateseq();
}
::google::protobuf::uint32 AddFavItem::updateseq() const {
  // @@protoc_insertion_point(field_get:micromsg.AddFavItem.UpdateSeq)
  return updateseq_;
}
void AddFavItem::set_updateseq(::google::protobuf::uint32 value) {
  set_has_updateseq();
  updateseq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddFavItem.UpdateSeq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckFavItemRequest::kBaseRequestFieldNumber;
const int CheckFavItemRequest::kSourceTypeFieldNumber;
const int CheckFavItemRequest::kSourceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckFavItemRequest::CheckFavItemRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CheckFavItemRequest)
}
CheckFavItemRequest::CheckFavItemRequest(const CheckFavItemRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sourceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sourceid()) {
    sourceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourceid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  sourcetype_ = from.sourcetype_;
  // @@protoc_insertion_point(copy_constructor:micromsg.CheckFavItemRequest)
}

void CheckFavItemRequest::SharedCtor() {
  _cached_size_ = 0;
  sourceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&sourcetype_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(sourcetype_));
}

CheckFavItemRequest::~CheckFavItemRequest() {
  // @@protoc_insertion_point(destructor:micromsg.CheckFavItemRequest)
  SharedDtor();
}

void CheckFavItemRequest::SharedDtor() {
  sourceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void CheckFavItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckFavItemRequest::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckFavItemRequest& CheckFavItemRequest::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckFavItemRequest* CheckFavItemRequest::New(::google::protobuf::Arena* arena) const {
  CheckFavItemRequest* n = new CheckFavItemRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckFavItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CheckFavItemRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_sourceid()) {
      GOOGLE_DCHECK(!sourceid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sourceid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  sourcetype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckFavItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CheckFavItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SourceType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sourcetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourcetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SourceId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sourceid().data(), this->sourceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckFavItemRequest.SourceId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CheckFavItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CheckFavItemRequest)
  return false;
#undef DO_
}

void CheckFavItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CheckFavItemRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 SourceType = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sourcetype(), output);
  }

  // optional string SourceId = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceid().data(), this->sourceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckFavItemRequest.SourceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sourceid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CheckFavItemRequest)
}

::google::protobuf::uint8* CheckFavItemRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CheckFavItemRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 SourceType = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sourcetype(), target);
  }

  // optional string SourceId = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceid().data(), this->sourceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckFavItemRequest.SourceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sourceid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CheckFavItemRequest)
  return target;
}

size_t CheckFavItemRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CheckFavItemRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_sourcetype()) {
    // required uint32 SourceType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sourcetype());
  }

  return total_size;
}
size_t CheckFavItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CheckFavItemRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 SourceType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sourcetype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string SourceId = 3;
  if (has_sourceid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sourceid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckFavItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CheckFavItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckFavItemRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckFavItemRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CheckFavItemRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CheckFavItemRequest)
    MergeFrom(*source);
  }
}

void CheckFavItemRequest::MergeFrom(const CheckFavItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CheckFavItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sourceid();
      sourceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourceid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      sourcetype_ = from.sourcetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CheckFavItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CheckFavItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckFavItemRequest::CopyFrom(const CheckFavItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CheckFavItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckFavItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void CheckFavItemRequest::Swap(CheckFavItemRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckFavItemRequest::InternalSwap(CheckFavItemRequest* other) {
  sourceid_.Swap(&other->sourceid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(sourcetype_, other->sourcetype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckFavItemRequest::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckFavItemRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool CheckFavItemRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckFavItemRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckFavItemRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckFavItemRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& CheckFavItemRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckFavItemRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* CheckFavItemRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CheckFavItemRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* CheckFavItemRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.CheckFavItemRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void CheckFavItemRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckFavItemRequest.BaseRequest)
}

// required uint32 SourceType = 2;
bool CheckFavItemRequest::has_sourcetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CheckFavItemRequest::set_has_sourcetype() {
  _has_bits_[0] |= 0x00000004u;
}
void CheckFavItemRequest::clear_has_sourcetype() {
  _has_bits_[0] &= ~0x00000004u;
}
void CheckFavItemRequest::clear_sourcetype() {
  sourcetype_ = 0u;
  clear_has_sourcetype();
}
::google::protobuf::uint32 CheckFavItemRequest::sourcetype() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckFavItemRequest.SourceType)
  return sourcetype_;
}
void CheckFavItemRequest::set_sourcetype(::google::protobuf::uint32 value) {
  set_has_sourcetype();
  sourcetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CheckFavItemRequest.SourceType)
}

// optional string SourceId = 3;
bool CheckFavItemRequest::has_sourceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckFavItemRequest::set_has_sourceid() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckFavItemRequest::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckFavItemRequest::clear_sourceid() {
  sourceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sourceid();
}
const ::std::string& CheckFavItemRequest::sourceid() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckFavItemRequest.SourceId)
  return sourceid_.GetNoArena();
}
void CheckFavItemRequest::set_sourceid(const ::std::string& value) {
  set_has_sourceid();
  sourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckFavItemRequest.SourceId)
}
#if LANG_CXX11
void CheckFavItemRequest::set_sourceid(::std::string&& value) {
  set_has_sourceid();
  sourceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckFavItemRequest.SourceId)
}
#endif
void CheckFavItemRequest::set_sourceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sourceid();
  sourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckFavItemRequest.SourceId)
}
void CheckFavItemRequest::set_sourceid(const char* value, size_t size) {
  set_has_sourceid();
  sourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckFavItemRequest.SourceId)
}
::std::string* CheckFavItemRequest::mutable_sourceid() {
  set_has_sourceid();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckFavItemRequest.SourceId)
  return sourceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckFavItemRequest::release_sourceid() {
  // @@protoc_insertion_point(field_release:micromsg.CheckFavItemRequest.SourceId)
  clear_has_sourceid();
  return sourceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckFavItemRequest::set_allocated_sourceid(::std::string* sourceid) {
  if (sourceid != NULL) {
    set_has_sourceid();
  } else {
    clear_has_sourceid();
  }
  sourceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourceid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckFavItemRequest.SourceId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FavVideoInfo::kFileIdFieldNumber;
const int FavVideoInfo::kAesKeyFieldNumber;
const int FavVideoInfo::kVideoIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FavVideoInfo::FavVideoInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.FavVideoInfo)
}
FavVideoInfo::FavVideoInfo(const FavVideoInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fileid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fileid()) {
    fileid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fileid_);
  }
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_aeskey()) {
    aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
  }
  videoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_videoid()) {
    videoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.videoid_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.FavVideoInfo)
}

void FavVideoInfo::SharedCtor() {
  _cached_size_ = 0;
  fileid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FavVideoInfo::~FavVideoInfo() {
  // @@protoc_insertion_point(destructor:micromsg.FavVideoInfo)
  SharedDtor();
}

void FavVideoInfo::SharedDtor() {
  fileid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FavVideoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FavVideoInfo::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FavVideoInfo& FavVideoInfo::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

FavVideoInfo* FavVideoInfo::New(::google::protobuf::Arena* arena) const {
  FavVideoInfo* n = new FavVideoInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FavVideoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.FavVideoInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_fileid()) {
      GOOGLE_DCHECK(!fileid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fileid_.UnsafeRawStringPointer())->clear();
    }
    if (has_aeskey()) {
      GOOGLE_DCHECK(!aeskey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*aeskey_.UnsafeRawStringPointer())->clear();
    }
    if (has_videoid()) {
      GOOGLE_DCHECK(!videoid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*videoid_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FavVideoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.FavVideoInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string FileId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fileid().data(), this->fileid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FavVideoInfo.FileId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AesKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aeskey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aeskey().data(), this->aeskey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FavVideoInfo.AesKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VideoId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videoid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->videoid().data(), this->videoid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FavVideoInfo.VideoId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.FavVideoInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.FavVideoInfo)
  return false;
#undef DO_
}

void FavVideoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.FavVideoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string FileId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FavVideoInfo.FileId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fileid(), output);
  }

  // optional string AesKey = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FavVideoInfo.AesKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->aeskey(), output);
  }

  // optional string VideoId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->videoid().data(), this->videoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FavVideoInfo.VideoId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->videoid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.FavVideoInfo)
}

::google::protobuf::uint8* FavVideoInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.FavVideoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string FileId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FavVideoInfo.FileId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fileid(), target);
  }

  // optional string AesKey = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FavVideoInfo.AesKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->aeskey(), target);
  }

  // optional string VideoId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->videoid().data(), this->videoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FavVideoInfo.VideoId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->videoid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.FavVideoInfo)
  return target;
}

size_t FavVideoInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.FavVideoInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string FileId = 1;
    if (has_fileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fileid());
    }

    // optional string AesKey = 2;
    if (has_aeskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aeskey());
    }

    // optional string VideoId = 3;
    if (has_videoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->videoid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FavVideoInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.FavVideoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FavVideoInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FavVideoInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.FavVideoInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.FavVideoInfo)
    MergeFrom(*source);
  }
}

void FavVideoInfo::MergeFrom(const FavVideoInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.FavVideoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fileid();
      fileid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fileid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_aeskey();
      aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_videoid();
      videoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.videoid_);
    }
  }
}

void FavVideoInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.FavVideoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FavVideoInfo::CopyFrom(const FavVideoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.FavVideoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FavVideoInfo::IsInitialized() const {
  return true;
}

void FavVideoInfo::Swap(FavVideoInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FavVideoInfo::InternalSwap(FavVideoInfo* other) {
  fileid_.Swap(&other->fileid_);
  aeskey_.Swap(&other->aeskey_);
  videoid_.Swap(&other->videoid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FavVideoInfo::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FavVideoInfo

// optional string FileId = 1;
bool FavVideoInfo::has_fileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FavVideoInfo::set_has_fileid() {
  _has_bits_[0] |= 0x00000001u;
}
void FavVideoInfo::clear_has_fileid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FavVideoInfo::clear_fileid() {
  fileid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fileid();
}
const ::std::string& FavVideoInfo::fileid() const {
  // @@protoc_insertion_point(field_get:micromsg.FavVideoInfo.FileId)
  return fileid_.GetNoArena();
}
void FavVideoInfo::set_fileid(const ::std::string& value) {
  set_has_fileid();
  fileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FavVideoInfo.FileId)
}
#if LANG_CXX11
void FavVideoInfo::set_fileid(::std::string&& value) {
  set_has_fileid();
  fileid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FavVideoInfo.FileId)
}
#endif
void FavVideoInfo::set_fileid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fileid();
  fileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FavVideoInfo.FileId)
}
void FavVideoInfo::set_fileid(const char* value, size_t size) {
  set_has_fileid();
  fileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FavVideoInfo.FileId)
}
::std::string* FavVideoInfo::mutable_fileid() {
  set_has_fileid();
  // @@protoc_insertion_point(field_mutable:micromsg.FavVideoInfo.FileId)
  return fileid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FavVideoInfo::release_fileid() {
  // @@protoc_insertion_point(field_release:micromsg.FavVideoInfo.FileId)
  clear_has_fileid();
  return fileid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FavVideoInfo::set_allocated_fileid(::std::string* fileid) {
  if (fileid != NULL) {
    set_has_fileid();
  } else {
    clear_has_fileid();
  }
  fileid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fileid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FavVideoInfo.FileId)
}

// optional string AesKey = 2;
bool FavVideoInfo::has_aeskey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FavVideoInfo::set_has_aeskey() {
  _has_bits_[0] |= 0x00000002u;
}
void FavVideoInfo::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000002u;
}
void FavVideoInfo::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
const ::std::string& FavVideoInfo::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.FavVideoInfo.AesKey)
  return aeskey_.GetNoArena();
}
void FavVideoInfo::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FavVideoInfo.AesKey)
}
#if LANG_CXX11
void FavVideoInfo::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FavVideoInfo.AesKey)
}
#endif
void FavVideoInfo::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FavVideoInfo.AesKey)
}
void FavVideoInfo::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FavVideoInfo.AesKey)
}
::std::string* FavVideoInfo::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.FavVideoInfo.AesKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FavVideoInfo::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.FavVideoInfo.AesKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FavVideoInfo::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FavVideoInfo.AesKey)
}

// optional string VideoId = 3;
bool FavVideoInfo::has_videoid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FavVideoInfo::set_has_videoid() {
  _has_bits_[0] |= 0x00000004u;
}
void FavVideoInfo::clear_has_videoid() {
  _has_bits_[0] &= ~0x00000004u;
}
void FavVideoInfo::clear_videoid() {
  videoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_videoid();
}
const ::std::string& FavVideoInfo::videoid() const {
  // @@protoc_insertion_point(field_get:micromsg.FavVideoInfo.VideoId)
  return videoid_.GetNoArena();
}
void FavVideoInfo::set_videoid(const ::std::string& value) {
  set_has_videoid();
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FavVideoInfo.VideoId)
}
#if LANG_CXX11
void FavVideoInfo::set_videoid(::std::string&& value) {
  set_has_videoid();
  videoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FavVideoInfo.VideoId)
}
#endif
void FavVideoInfo::set_videoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_videoid();
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FavVideoInfo.VideoId)
}
void FavVideoInfo::set_videoid(const char* value, size_t size) {
  set_has_videoid();
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FavVideoInfo.VideoId)
}
::std::string* FavVideoInfo::mutable_videoid() {
  set_has_videoid();
  // @@protoc_insertion_point(field_mutable:micromsg.FavVideoInfo.VideoId)
  return videoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FavVideoInfo::release_videoid() {
  // @@protoc_insertion_point(field_release:micromsg.FavVideoInfo.VideoId)
  clear_has_videoid();
  return videoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FavVideoInfo::set_allocated_videoid(::std::string* videoid) {
  if (videoid != NULL) {
    set_has_videoid();
  } else {
    clear_has_videoid();
  }
  videoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videoid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FavVideoInfo.VideoId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShareFavKey::kFromUinFieldNumber;
const int ShareFavKey::kToUserFieldNumber;
const int ShareFavKey::kShareTimeFieldNumber;
const int ShareFavKey::kSceneFieldNumber;
const int ShareFavKey::kFavIdFieldNumber;
const int ShareFavKey::kParamCheckFieldNumber;
const int ShareFavKey::kFavItemCheckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShareFavKey::ShareFavKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ShareFavKey)
}
ShareFavKey::ShareFavKey(const ShareFavKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  touser_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_touser()) {
    touser_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.touser_);
  }
  paramcheck_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_paramcheck()) {
    paramcheck_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paramcheck_);
  }
  favitemcheck_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_favitemcheck()) {
    favitemcheck_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.favitemcheck_);
  }
  ::memcpy(&fromuin_, &from.fromuin_,
    reinterpret_cast<char*>(&favid_) -
    reinterpret_cast<char*>(&fromuin_) + sizeof(favid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ShareFavKey)
}

void ShareFavKey::SharedCtor() {
  _cached_size_ = 0;
  touser_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paramcheck_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  favitemcheck_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fromuin_, 0, reinterpret_cast<char*>(&favid_) -
    reinterpret_cast<char*>(&fromuin_) + sizeof(favid_));
}

ShareFavKey::~ShareFavKey() {
  // @@protoc_insertion_point(destructor:micromsg.ShareFavKey)
  SharedDtor();
}

void ShareFavKey::SharedDtor() {
  touser_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paramcheck_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  favitemcheck_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ShareFavKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShareFavKey::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShareFavKey& ShareFavKey::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShareFavKey* ShareFavKey::New(::google::protobuf::Arena* arena) const {
  ShareFavKey* n = new ShareFavKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShareFavKey::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ShareFavKey)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_touser()) {
      GOOGLE_DCHECK(!touser_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*touser_.UnsafeRawStringPointer())->clear();
    }
    if (has_paramcheck()) {
      GOOGLE_DCHECK(!paramcheck_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*paramcheck_.UnsafeRawStringPointer())->clear();
    }
    if (has_favitemcheck()) {
      GOOGLE_DCHECK(!favitemcheck_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*favitemcheck_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 120u) {
    ::memset(&fromuin_, 0, reinterpret_cast<char*>(&favid_) -
      reinterpret_cast<char*>(&fromuin_) + sizeof(favid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShareFavKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ShareFavKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 FromUin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fromuin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromuin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ToUser = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_touser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->touser().data(), this->touser().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ShareFavKey.ToUser");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ShareTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_sharetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sharetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Scene = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 FavId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_favid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ParamCheck = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paramcheck()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->paramcheck().data(), this->paramcheck().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ShareFavKey.ParamCheck");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FavItemCheck = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_favitemcheck()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->favitemcheck().data(), this->favitemcheck().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ShareFavKey.FavItemCheck");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ShareFavKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ShareFavKey)
  return false;
#undef DO_
}

void ShareFavKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ShareFavKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 FromUin = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fromuin(), output);
  }

  // optional string ToUser = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->touser().data(), this->touser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ShareFavKey.ToUser");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->touser(), output);
  }

  // required uint32 ShareTime = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sharetime(), output);
  }

  // required uint32 Scene = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene(), output);
  }

  // required uint32 FavId = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->favid(), output);
  }

  // optional string ParamCheck = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->paramcheck().data(), this->paramcheck().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ShareFavKey.ParamCheck");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->paramcheck(), output);
  }

  // optional string FavItemCheck = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->favitemcheck().data(), this->favitemcheck().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ShareFavKey.FavItemCheck");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->favitemcheck(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ShareFavKey)
}

::google::protobuf::uint8* ShareFavKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ShareFavKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 FromUin = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fromuin(), target);
  }

  // optional string ToUser = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->touser().data(), this->touser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ShareFavKey.ToUser");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->touser(), target);
  }

  // required uint32 ShareTime = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sharetime(), target);
  }

  // required uint32 Scene = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene(), target);
  }

  // required uint32 FavId = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->favid(), target);
  }

  // optional string ParamCheck = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->paramcheck().data(), this->paramcheck().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ShareFavKey.ParamCheck");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->paramcheck(), target);
  }

  // optional string FavItemCheck = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->favitemcheck().data(), this->favitemcheck().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ShareFavKey.FavItemCheck");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->favitemcheck(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ShareFavKey)
  return target;
}

size_t ShareFavKey::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ShareFavKey)
  size_t total_size = 0;

  if (has_fromuin()) {
    // required uint32 FromUin = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fromuin());
  }

  if (has_sharetime()) {
    // required uint32 ShareTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sharetime());
  }

  if (has_scene()) {
    // required uint32 Scene = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  if (has_favid()) {
    // required uint32 FavId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->favid());
  }

  return total_size;
}
size_t ShareFavKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ShareFavKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000078) ^ 0x00000078) == 0) {  // All required fields are present.
    // required uint32 FromUin = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fromuin());

    // required uint32 ShareTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sharetime());

    // required uint32 Scene = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());

    // required uint32 FavId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->favid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string ToUser = 2;
    if (has_touser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->touser());
    }

    // optional string ParamCheck = 6;
    if (has_paramcheck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paramcheck());
    }

    // optional string FavItemCheck = 7;
    if (has_favitemcheck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->favitemcheck());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareFavKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ShareFavKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ShareFavKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShareFavKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ShareFavKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ShareFavKey)
    MergeFrom(*source);
  }
}

void ShareFavKey::MergeFrom(const ShareFavKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ShareFavKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_touser();
      touser_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.touser_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_paramcheck();
      paramcheck_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paramcheck_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_favitemcheck();
      favitemcheck_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.favitemcheck_);
    }
    if (cached_has_bits & 0x00000008u) {
      fromuin_ = from.fromuin_;
    }
    if (cached_has_bits & 0x00000010u) {
      sharetime_ = from.sharetime_;
    }
    if (cached_has_bits & 0x00000020u) {
      scene_ = from.scene_;
    }
    if (cached_has_bits & 0x00000040u) {
      favid_ = from.favid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShareFavKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ShareFavKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShareFavKey::CopyFrom(const ShareFavKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ShareFavKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareFavKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000078) != 0x00000078) return false;
  return true;
}

void ShareFavKey::Swap(ShareFavKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShareFavKey::InternalSwap(ShareFavKey* other) {
  touser_.Swap(&other->touser_);
  paramcheck_.Swap(&other->paramcheck_);
  favitemcheck_.Swap(&other->favitemcheck_);
  std::swap(fromuin_, other->fromuin_);
  std::swap(sharetime_, other->sharetime_);
  std::swap(scene_, other->scene_);
  std::swap(favid_, other->favid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShareFavKey::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShareFavKey

// required uint32 FromUin = 1;
bool ShareFavKey::has_fromuin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ShareFavKey::set_has_fromuin() {
  _has_bits_[0] |= 0x00000008u;
}
void ShareFavKey::clear_has_fromuin() {
  _has_bits_[0] &= ~0x00000008u;
}
void ShareFavKey::clear_fromuin() {
  fromuin_ = 0u;
  clear_has_fromuin();
}
::google::protobuf::uint32 ShareFavKey::fromuin() const {
  // @@protoc_insertion_point(field_get:micromsg.ShareFavKey.FromUin)
  return fromuin_;
}
void ShareFavKey::set_fromuin(::google::protobuf::uint32 value) {
  set_has_fromuin();
  fromuin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShareFavKey.FromUin)
}

// optional string ToUser = 2;
bool ShareFavKey::has_touser() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShareFavKey::set_has_touser() {
  _has_bits_[0] |= 0x00000001u;
}
void ShareFavKey::clear_has_touser() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShareFavKey::clear_touser() {
  touser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_touser();
}
const ::std::string& ShareFavKey::touser() const {
  // @@protoc_insertion_point(field_get:micromsg.ShareFavKey.ToUser)
  return touser_.GetNoArena();
}
void ShareFavKey::set_touser(const ::std::string& value) {
  set_has_touser();
  touser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ShareFavKey.ToUser)
}
#if LANG_CXX11
void ShareFavKey::set_touser(::std::string&& value) {
  set_has_touser();
  touser_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ShareFavKey.ToUser)
}
#endif
void ShareFavKey::set_touser(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_touser();
  touser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ShareFavKey.ToUser)
}
void ShareFavKey::set_touser(const char* value, size_t size) {
  set_has_touser();
  touser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ShareFavKey.ToUser)
}
::std::string* ShareFavKey::mutable_touser() {
  set_has_touser();
  // @@protoc_insertion_point(field_mutable:micromsg.ShareFavKey.ToUser)
  return touser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShareFavKey::release_touser() {
  // @@protoc_insertion_point(field_release:micromsg.ShareFavKey.ToUser)
  clear_has_touser();
  return touser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShareFavKey::set_allocated_touser(::std::string* touser) {
  if (touser != NULL) {
    set_has_touser();
  } else {
    clear_has_touser();
  }
  touser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touser);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShareFavKey.ToUser)
}

// required uint32 ShareTime = 3;
bool ShareFavKey::has_sharetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ShareFavKey::set_has_sharetime() {
  _has_bits_[0] |= 0x00000010u;
}
void ShareFavKey::clear_has_sharetime() {
  _has_bits_[0] &= ~0x00000010u;
}
void ShareFavKey::clear_sharetime() {
  sharetime_ = 0u;
  clear_has_sharetime();
}
::google::protobuf::uint32 ShareFavKey::sharetime() const {
  // @@protoc_insertion_point(field_get:micromsg.ShareFavKey.ShareTime)
  return sharetime_;
}
void ShareFavKey::set_sharetime(::google::protobuf::uint32 value) {
  set_has_sharetime();
  sharetime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShareFavKey.ShareTime)
}

// required uint32 Scene = 4;
bool ShareFavKey::has_scene() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ShareFavKey::set_has_scene() {
  _has_bits_[0] |= 0x00000020u;
}
void ShareFavKey::clear_has_scene() {
  _has_bits_[0] &= ~0x00000020u;
}
void ShareFavKey::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 ShareFavKey::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.ShareFavKey.Scene)
  return scene_;
}
void ShareFavKey::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShareFavKey.Scene)
}

// required uint32 FavId = 5;
bool ShareFavKey::has_favid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ShareFavKey::set_has_favid() {
  _has_bits_[0] |= 0x00000040u;
}
void ShareFavKey::clear_has_favid() {
  _has_bits_[0] &= ~0x00000040u;
}
void ShareFavKey::clear_favid() {
  favid_ = 0u;
  clear_has_favid();
}
::google::protobuf::uint32 ShareFavKey::favid() const {
  // @@protoc_insertion_point(field_get:micromsg.ShareFavKey.FavId)
  return favid_;
}
void ShareFavKey::set_favid(::google::protobuf::uint32 value) {
  set_has_favid();
  favid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShareFavKey.FavId)
}

// optional string ParamCheck = 6;
bool ShareFavKey::has_paramcheck() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShareFavKey::set_has_paramcheck() {
  _has_bits_[0] |= 0x00000002u;
}
void ShareFavKey::clear_has_paramcheck() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShareFavKey::clear_paramcheck() {
  paramcheck_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_paramcheck();
}
const ::std::string& ShareFavKey::paramcheck() const {
  // @@protoc_insertion_point(field_get:micromsg.ShareFavKey.ParamCheck)
  return paramcheck_.GetNoArena();
}
void ShareFavKey::set_paramcheck(const ::std::string& value) {
  set_has_paramcheck();
  paramcheck_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ShareFavKey.ParamCheck)
}
#if LANG_CXX11
void ShareFavKey::set_paramcheck(::std::string&& value) {
  set_has_paramcheck();
  paramcheck_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ShareFavKey.ParamCheck)
}
#endif
void ShareFavKey::set_paramcheck(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_paramcheck();
  paramcheck_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ShareFavKey.ParamCheck)
}
void ShareFavKey::set_paramcheck(const char* value, size_t size) {
  set_has_paramcheck();
  paramcheck_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ShareFavKey.ParamCheck)
}
::std::string* ShareFavKey::mutable_paramcheck() {
  set_has_paramcheck();
  // @@protoc_insertion_point(field_mutable:micromsg.ShareFavKey.ParamCheck)
  return paramcheck_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShareFavKey::release_paramcheck() {
  // @@protoc_insertion_point(field_release:micromsg.ShareFavKey.ParamCheck)
  clear_has_paramcheck();
  return paramcheck_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShareFavKey::set_allocated_paramcheck(::std::string* paramcheck) {
  if (paramcheck != NULL) {
    set_has_paramcheck();
  } else {
    clear_has_paramcheck();
  }
  paramcheck_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paramcheck);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShareFavKey.ParamCheck)
}

// optional string FavItemCheck = 7;
bool ShareFavKey::has_favitemcheck() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ShareFavKey::set_has_favitemcheck() {
  _has_bits_[0] |= 0x00000004u;
}
void ShareFavKey::clear_has_favitemcheck() {
  _has_bits_[0] &= ~0x00000004u;
}
void ShareFavKey::clear_favitemcheck() {
  favitemcheck_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_favitemcheck();
}
const ::std::string& ShareFavKey::favitemcheck() const {
  // @@protoc_insertion_point(field_get:micromsg.ShareFavKey.FavItemCheck)
  return favitemcheck_.GetNoArena();
}
void ShareFavKey::set_favitemcheck(const ::std::string& value) {
  set_has_favitemcheck();
  favitemcheck_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ShareFavKey.FavItemCheck)
}
#if LANG_CXX11
void ShareFavKey::set_favitemcheck(::std::string&& value) {
  set_has_favitemcheck();
  favitemcheck_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ShareFavKey.FavItemCheck)
}
#endif
void ShareFavKey::set_favitemcheck(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_favitemcheck();
  favitemcheck_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ShareFavKey.FavItemCheck)
}
void ShareFavKey::set_favitemcheck(const char* value, size_t size) {
  set_has_favitemcheck();
  favitemcheck_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ShareFavKey.FavItemCheck)
}
::std::string* ShareFavKey::mutable_favitemcheck() {
  set_has_favitemcheck();
  // @@protoc_insertion_point(field_mutable:micromsg.ShareFavKey.FavItemCheck)
  return favitemcheck_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShareFavKey::release_favitemcheck() {
  // @@protoc_insertion_point(field_release:micromsg.ShareFavKey.FavItemCheck)
  clear_has_favitemcheck();
  return favitemcheck_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShareFavKey::set_allocated_favitemcheck(::std::string* favitemcheck) {
  if (favitemcheck != NULL) {
    set_has_favitemcheck();
  } else {
    clear_has_favitemcheck();
  }
  favitemcheck_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), favitemcheck);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShareFavKey.FavItemCheck)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckFavItemResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckFavItemResponse::CheckFavItemResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CheckFavItemResponse)
}
CheckFavItemResponse::CheckFavItemResponse(const CheckFavItemResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.CheckFavItemResponse)
}

void CheckFavItemResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

CheckFavItemResponse::~CheckFavItemResponse() {
  // @@protoc_insertion_point(destructor:micromsg.CheckFavItemResponse)
  SharedDtor();
}

void CheckFavItemResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void CheckFavItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckFavItemResponse::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckFavItemResponse& CheckFavItemResponse::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckFavItemResponse* CheckFavItemResponse::New(::google::protobuf::Arena* arena) const {
  CheckFavItemResponse* n = new CheckFavItemResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckFavItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CheckFavItemResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckFavItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CheckFavItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CheckFavItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CheckFavItemResponse)
  return false;
#undef DO_
}

void CheckFavItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CheckFavItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CheckFavItemResponse)
}

::google::protobuf::uint8* CheckFavItemResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CheckFavItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CheckFavItemResponse)
  return target;
}

size_t CheckFavItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CheckFavItemResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckFavItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CheckFavItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckFavItemResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckFavItemResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CheckFavItemResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CheckFavItemResponse)
    MergeFrom(*source);
  }
}

void CheckFavItemResponse::MergeFrom(const CheckFavItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CheckFavItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void CheckFavItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CheckFavItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckFavItemResponse::CopyFrom(const CheckFavItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CheckFavItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckFavItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void CheckFavItemResponse::Swap(CheckFavItemResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckFavItemResponse::InternalSwap(CheckFavItemResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckFavItemResponse::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckFavItemResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool CheckFavItemResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckFavItemResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckFavItemResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckFavItemResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& CheckFavItemResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckFavItemResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* CheckFavItemResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CheckFavItemResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* CheckFavItemResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.CheckFavItemResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void CheckFavItemResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckFavItemResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModFavIndex::kModFieldFieldNumber;
const int ModFavIndex::kModValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModFavIndex::ModFavIndex()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModFavIndex)
}
ModFavIndex::ModFavIndex(const ModFavIndex& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&modfield_, &from.modfield_,
    reinterpret_cast<char*>(&modvalue_) -
    reinterpret_cast<char*>(&modfield_) + sizeof(modvalue_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ModFavIndex)
}

void ModFavIndex::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&modfield_, 0, reinterpret_cast<char*>(&modvalue_) -
    reinterpret_cast<char*>(&modfield_) + sizeof(modvalue_));
}

ModFavIndex::~ModFavIndex() {
  // @@protoc_insertion_point(destructor:micromsg.ModFavIndex)
  SharedDtor();
}

void ModFavIndex::SharedDtor() {
}

void ModFavIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModFavIndex::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModFavIndex& ModFavIndex::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModFavIndex* ModFavIndex::New(::google::protobuf::Arena* arena) const {
  ModFavIndex* n = new ModFavIndex;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModFavIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModFavIndex)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&modfield_, 0, reinterpret_cast<char*>(&modvalue_) -
      reinterpret_cast<char*>(&modfield_) + sizeof(modvalue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModFavIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModFavIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ModField = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_modfield();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modfield_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ModValue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_modvalue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModFavIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModFavIndex)
  return false;
#undef DO_
}

void ModFavIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModFavIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ModField = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->modfield(), output);
  }

  // required uint32 ModValue = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->modvalue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModFavIndex)
}

::google::protobuf::uint8* ModFavIndex::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModFavIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ModField = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->modfield(), target);
  }

  // required uint32 ModValue = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->modvalue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModFavIndex)
  return target;
}

size_t ModFavIndex::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ModFavIndex)
  size_t total_size = 0;

  if (has_modfield()) {
    // required uint32 ModField = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->modfield());
  }

  if (has_modvalue()) {
    // required uint32 ModValue = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->modvalue());
  }

  return total_size;
}
size_t ModFavIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModFavIndex)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 ModField = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->modfield());

    // required uint32 ModValue = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->modvalue());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModFavIndex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModFavIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const ModFavIndex* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModFavIndex>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModFavIndex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModFavIndex)
    MergeFrom(*source);
  }
}

void ModFavIndex::MergeFrom(const ModFavIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModFavIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      modfield_ = from.modfield_;
    }
    if (cached_has_bits & 0x00000002u) {
      modvalue_ = from.modvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModFavIndex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModFavIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModFavIndex::CopyFrom(const ModFavIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModFavIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModFavIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ModFavIndex::Swap(ModFavIndex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModFavIndex::InternalSwap(ModFavIndex* other) {
  std::swap(modfield_, other->modfield_);
  std::swap(modvalue_, other->modvalue_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModFavIndex::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModFavIndex

// required uint32 ModField = 1;
bool ModFavIndex::has_modfield() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModFavIndex::set_has_modfield() {
  _has_bits_[0] |= 0x00000001u;
}
void ModFavIndex::clear_has_modfield() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModFavIndex::clear_modfield() {
  modfield_ = 0u;
  clear_has_modfield();
}
::google::protobuf::uint32 ModFavIndex::modfield() const {
  // @@protoc_insertion_point(field_get:micromsg.ModFavIndex.ModField)
  return modfield_;
}
void ModFavIndex::set_modfield(::google::protobuf::uint32 value) {
  set_has_modfield();
  modfield_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModFavIndex.ModField)
}

// required uint32 ModValue = 2;
bool ModFavIndex::has_modvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModFavIndex::set_has_modvalue() {
  _has_bits_[0] |= 0x00000002u;
}
void ModFavIndex::clear_has_modvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModFavIndex::clear_modvalue() {
  modvalue_ = 0u;
  clear_has_modvalue();
}
::google::protobuf::uint32 ModFavIndex::modvalue() const {
  // @@protoc_insertion_point(field_get:micromsg.ModFavIndex.ModValue)
  return modvalue_;
}
void ModFavIndex::set_modvalue(::google::protobuf::uint32 value) {
  set_has_modvalue();
  modvalue_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModFavIndex.ModValue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModFavObject::kTagNameFieldNumber;
const int ModFavObject::kAttrNameFieldNumber;
const int ModFavObject::kValueFieldNumber;
const int ModFavObject::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModFavObject::ModFavObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModFavObject)
}
ModFavObject::ModFavObject(const ModFavObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tagname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tagname()) {
    tagname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tagname_);
  }
  attrname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attrname()) {
    attrname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attrname_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:micromsg.ModFavObject)
}

void ModFavObject::SharedCtor() {
  _cached_size_ = 0;
  tagname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attrname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

ModFavObject::~ModFavObject() {
  // @@protoc_insertion_point(destructor:micromsg.ModFavObject)
  SharedDtor();
}

void ModFavObject::SharedDtor() {
  tagname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attrname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ModFavObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModFavObject::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModFavObject& ModFavObject::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModFavObject* ModFavObject::New(::google::protobuf::Arena* arena) const {
  ModFavObject* n = new ModFavObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModFavObject::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModFavObject)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_tagname()) {
      GOOGLE_DCHECK(!tagname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tagname_.UnsafeRawStringPointer())->clear();
    }
    if (has_attrname()) {
      GOOGLE_DCHECK(!attrname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*attrname_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModFavObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModFavObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string TagName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tagname().data(), this->tagname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModFavObject.TagName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AttrName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attrname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attrname().data(), this->attrname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModFavObject.AttrName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModFavObject.Value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModFavObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModFavObject)
  return false;
#undef DO_
}

void ModFavObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModFavObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string TagName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagname().data(), this->tagname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModFavObject.TagName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tagname(), output);
  }

  // optional string AttrName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attrname().data(), this->attrname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModFavObject.AttrName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->attrname(), output);
  }

  // optional string Value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModFavObject.Value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // optional uint32 Type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModFavObject)
}

::google::protobuf::uint8* ModFavObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModFavObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string TagName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagname().data(), this->tagname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModFavObject.TagName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tagname(), target);
  }

  // optional string AttrName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attrname().data(), this->attrname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModFavObject.AttrName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->attrname(), target);
  }

  // optional string Value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModFavObject.Value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // optional uint32 Type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModFavObject)
  return target;
}

size_t ModFavObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModFavObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string TagName = 1;
    if (has_tagname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tagname());
    }

    // optional string AttrName = 2;
    if (has_attrname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attrname());
    }

    // optional string Value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional uint32 Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModFavObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModFavObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ModFavObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModFavObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModFavObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModFavObject)
    MergeFrom(*source);
  }
}

void ModFavObject::MergeFrom(const ModFavObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModFavObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tagname();
      tagname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tagname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_attrname();
      attrname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attrname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModFavObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModFavObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModFavObject::CopyFrom(const ModFavObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModFavObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModFavObject::IsInitialized() const {
  return true;
}

void ModFavObject::Swap(ModFavObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModFavObject::InternalSwap(ModFavObject* other) {
  tagname_.Swap(&other->tagname_);
  attrname_.Swap(&other->attrname_);
  value_.Swap(&other->value_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModFavObject::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModFavObject

// optional string TagName = 1;
bool ModFavObject::has_tagname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModFavObject::set_has_tagname() {
  _has_bits_[0] |= 0x00000001u;
}
void ModFavObject::clear_has_tagname() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModFavObject::clear_tagname() {
  tagname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tagname();
}
const ::std::string& ModFavObject::tagname() const {
  // @@protoc_insertion_point(field_get:micromsg.ModFavObject.TagName)
  return tagname_.GetNoArena();
}
void ModFavObject::set_tagname(const ::std::string& value) {
  set_has_tagname();
  tagname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModFavObject.TagName)
}
#if LANG_CXX11
void ModFavObject::set_tagname(::std::string&& value) {
  set_has_tagname();
  tagname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModFavObject.TagName)
}
#endif
void ModFavObject::set_tagname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tagname();
  tagname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModFavObject.TagName)
}
void ModFavObject::set_tagname(const char* value, size_t size) {
  set_has_tagname();
  tagname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModFavObject.TagName)
}
::std::string* ModFavObject::mutable_tagname() {
  set_has_tagname();
  // @@protoc_insertion_point(field_mutable:micromsg.ModFavObject.TagName)
  return tagname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModFavObject::release_tagname() {
  // @@protoc_insertion_point(field_release:micromsg.ModFavObject.TagName)
  clear_has_tagname();
  return tagname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModFavObject::set_allocated_tagname(::std::string* tagname) {
  if (tagname != NULL) {
    set_has_tagname();
  } else {
    clear_has_tagname();
  }
  tagname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tagname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModFavObject.TagName)
}

// optional string AttrName = 2;
bool ModFavObject::has_attrname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModFavObject::set_has_attrname() {
  _has_bits_[0] |= 0x00000002u;
}
void ModFavObject::clear_has_attrname() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModFavObject::clear_attrname() {
  attrname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attrname();
}
const ::std::string& ModFavObject::attrname() const {
  // @@protoc_insertion_point(field_get:micromsg.ModFavObject.AttrName)
  return attrname_.GetNoArena();
}
void ModFavObject::set_attrname(const ::std::string& value) {
  set_has_attrname();
  attrname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModFavObject.AttrName)
}
#if LANG_CXX11
void ModFavObject::set_attrname(::std::string&& value) {
  set_has_attrname();
  attrname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModFavObject.AttrName)
}
#endif
void ModFavObject::set_attrname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attrname();
  attrname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModFavObject.AttrName)
}
void ModFavObject::set_attrname(const char* value, size_t size) {
  set_has_attrname();
  attrname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModFavObject.AttrName)
}
::std::string* ModFavObject::mutable_attrname() {
  set_has_attrname();
  // @@protoc_insertion_point(field_mutable:micromsg.ModFavObject.AttrName)
  return attrname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModFavObject::release_attrname() {
  // @@protoc_insertion_point(field_release:micromsg.ModFavObject.AttrName)
  clear_has_attrname();
  return attrname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModFavObject::set_allocated_attrname(::std::string* attrname) {
  if (attrname != NULL) {
    set_has_attrname();
  } else {
    clear_has_attrname();
  }
  attrname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attrname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModFavObject.AttrName)
}

// optional string Value = 3;
bool ModFavObject::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModFavObject::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
void ModFavObject::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModFavObject::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& ModFavObject::value() const {
  // @@protoc_insertion_point(field_get:micromsg.ModFavObject.Value)
  return value_.GetNoArena();
}
void ModFavObject::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModFavObject.Value)
}
#if LANG_CXX11
void ModFavObject::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModFavObject.Value)
}
#endif
void ModFavObject::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModFavObject.Value)
}
void ModFavObject::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModFavObject.Value)
}
::std::string* ModFavObject::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:micromsg.ModFavObject.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModFavObject::release_value() {
  // @@protoc_insertion_point(field_release:micromsg.ModFavObject.Value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModFavObject::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModFavObject.Value)
}

// optional uint32 Type = 4;
bool ModFavObject::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModFavObject::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void ModFavObject::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModFavObject::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 ModFavObject::type() const {
  // @@protoc_insertion_point(field_get:micromsg.ModFavObject.Type)
  return type_;
}
void ModFavObject::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModFavObject.Type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModFavItemRequest::kBaseRequestFieldNumber;
const int ModFavItemRequest::kFavIdFieldNumber;
const int ModFavItemRequest::kIndexCountFieldNumber;
const int ModFavItemRequest::kIndexListFieldNumber;
const int ModFavItemRequest::kObjectCountFieldNumber;
const int ModFavItemRequest::kObjectListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModFavItemRequest::ModFavItemRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModFavItemRequest)
}
ModFavItemRequest::ModFavItemRequest(const ModFavItemRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      indexlist_(from.indexlist_),
      objectlist_(from.objectlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&favid_, &from.favid_,
    reinterpret_cast<char*>(&objectcount_) -
    reinterpret_cast<char*>(&favid_) + sizeof(objectcount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ModFavItemRequest)
}

void ModFavItemRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&objectcount_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(objectcount_));
}

ModFavItemRequest::~ModFavItemRequest() {
  // @@protoc_insertion_point(destructor:micromsg.ModFavItemRequest)
  SharedDtor();
}

void ModFavItemRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void ModFavItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModFavItemRequest::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModFavItemRequest& ModFavItemRequest::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModFavItemRequest* ModFavItemRequest::New(::google::protobuf::Arena* arena) const {
  ModFavItemRequest* n = new ModFavItemRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModFavItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModFavItemRequest)
  indexlist_.Clear();
  objectlist_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&favid_, 0, reinterpret_cast<char*>(&objectcount_) -
      reinterpret_cast<char*>(&favid_) + sizeof(objectcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModFavItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModFavItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 FavId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_favid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 IndexCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_indexcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &indexcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.ModFavIndex IndexList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_indexlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ObjectCount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_objectcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objectcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.ModFavObject ObjectList = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objectlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModFavItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModFavItemRequest)
  return false;
#undef DO_
}

void ModFavItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModFavItemRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 FavId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->favid(), output);
  }

  // required uint32 IndexCount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->indexcount(), output);
  }

  // repeated .micromsg.ModFavIndex IndexList = 4;
  for (unsigned int i = 0, n = this->indexlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->indexlist(i), output);
  }

  // required uint32 ObjectCount = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->objectcount(), output);
  }

  // repeated .micromsg.ModFavObject ObjectList = 6;
  for (unsigned int i = 0, n = this->objectlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->objectlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModFavItemRequest)
}

::google::protobuf::uint8* ModFavItemRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModFavItemRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 FavId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->favid(), target);
  }

  // required uint32 IndexCount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->indexcount(), target);
  }

  // repeated .micromsg.ModFavIndex IndexList = 4;
  for (unsigned int i = 0, n = this->indexlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->indexlist(i), deterministic, target);
  }

  // required uint32 ObjectCount = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->objectcount(), target);
  }

  // repeated .micromsg.ModFavObject ObjectList = 6;
  for (unsigned int i = 0, n = this->objectlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->objectlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModFavItemRequest)
  return target;
}

size_t ModFavItemRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ModFavItemRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_favid()) {
    // required uint32 FavId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->favid());
  }

  if (has_indexcount()) {
    // required uint32 IndexCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->indexcount());
  }

  if (has_objectcount()) {
    // required uint32 ObjectCount = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->objectcount());
  }

  return total_size;
}
size_t ModFavItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModFavItemRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 FavId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->favid());

    // required uint32 IndexCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->indexcount());

    // required uint32 ObjectCount = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->objectcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.ModFavIndex IndexList = 4;
  {
    unsigned int count = this->indexlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->indexlist(i));
    }
  }

  // repeated .micromsg.ModFavObject ObjectList = 6;
  {
    unsigned int count = this->objectlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objectlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModFavItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModFavItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ModFavItemRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModFavItemRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModFavItemRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModFavItemRequest)
    MergeFrom(*source);
  }
}

void ModFavItemRequest::MergeFrom(const ModFavItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModFavItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  indexlist_.MergeFrom(from.indexlist_);
  objectlist_.MergeFrom(from.objectlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      favid_ = from.favid_;
    }
    if (cached_has_bits & 0x00000004u) {
      indexcount_ = from.indexcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      objectcount_ = from.objectcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModFavItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModFavItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModFavItemRequest::CopyFrom(const ModFavItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModFavItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModFavItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->indexlist())) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void ModFavItemRequest::Swap(ModFavItemRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModFavItemRequest::InternalSwap(ModFavItemRequest* other) {
  indexlist_.InternalSwap(&other->indexlist_);
  objectlist_.InternalSwap(&other->objectlist_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(favid_, other->favid_);
  std::swap(indexcount_, other->indexcount_);
  std::swap(objectcount_, other->objectcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModFavItemRequest::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModFavItemRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool ModFavItemRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModFavItemRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void ModFavItemRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModFavItemRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& ModFavItemRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ModFavItemRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* ModFavItemRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModFavItemRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* ModFavItemRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ModFavItemRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void ModFavItemRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModFavItemRequest.BaseRequest)
}

// required uint32 FavId = 2;
bool ModFavItemRequest::has_favid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModFavItemRequest::set_has_favid() {
  _has_bits_[0] |= 0x00000002u;
}
void ModFavItemRequest::clear_has_favid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModFavItemRequest::clear_favid() {
  favid_ = 0u;
  clear_has_favid();
}
::google::protobuf::uint32 ModFavItemRequest::favid() const {
  // @@protoc_insertion_point(field_get:micromsg.ModFavItemRequest.FavId)
  return favid_;
}
void ModFavItemRequest::set_favid(::google::protobuf::uint32 value) {
  set_has_favid();
  favid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModFavItemRequest.FavId)
}

// required uint32 IndexCount = 3;
bool ModFavItemRequest::has_indexcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModFavItemRequest::set_has_indexcount() {
  _has_bits_[0] |= 0x00000004u;
}
void ModFavItemRequest::clear_has_indexcount() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModFavItemRequest::clear_indexcount() {
  indexcount_ = 0u;
  clear_has_indexcount();
}
::google::protobuf::uint32 ModFavItemRequest::indexcount() const {
  // @@protoc_insertion_point(field_get:micromsg.ModFavItemRequest.IndexCount)
  return indexcount_;
}
void ModFavItemRequest::set_indexcount(::google::protobuf::uint32 value) {
  set_has_indexcount();
  indexcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModFavItemRequest.IndexCount)
}

// repeated .micromsg.ModFavIndex IndexList = 4;
int ModFavItemRequest::indexlist_size() const {
  return indexlist_.size();
}
void ModFavItemRequest::clear_indexlist() {
  indexlist_.Clear();
}
const ::micromsg::ModFavIndex& ModFavItemRequest::indexlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ModFavItemRequest.IndexList)
  return indexlist_.Get(index);
}
::micromsg::ModFavIndex* ModFavItemRequest::mutable_indexlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.ModFavItemRequest.IndexList)
  return indexlist_.Mutable(index);
}
::micromsg::ModFavIndex* ModFavItemRequest::add_indexlist() {
  // @@protoc_insertion_point(field_add:micromsg.ModFavItemRequest.IndexList)
  return indexlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::ModFavIndex >*
ModFavItemRequest::mutable_indexlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ModFavItemRequest.IndexList)
  return &indexlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::ModFavIndex >&
ModFavItemRequest::indexlist() const {
  // @@protoc_insertion_point(field_list:micromsg.ModFavItemRequest.IndexList)
  return indexlist_;
}

// required uint32 ObjectCount = 5;
bool ModFavItemRequest::has_objectcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModFavItemRequest::set_has_objectcount() {
  _has_bits_[0] |= 0x00000008u;
}
void ModFavItemRequest::clear_has_objectcount() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModFavItemRequest::clear_objectcount() {
  objectcount_ = 0u;
  clear_has_objectcount();
}
::google::protobuf::uint32 ModFavItemRequest::objectcount() const {
  // @@protoc_insertion_point(field_get:micromsg.ModFavItemRequest.ObjectCount)
  return objectcount_;
}
void ModFavItemRequest::set_objectcount(::google::protobuf::uint32 value) {
  set_has_objectcount();
  objectcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModFavItemRequest.ObjectCount)
}

// repeated .micromsg.ModFavObject ObjectList = 6;
int ModFavItemRequest::objectlist_size() const {
  return objectlist_.size();
}
void ModFavItemRequest::clear_objectlist() {
  objectlist_.Clear();
}
const ::micromsg::ModFavObject& ModFavItemRequest::objectlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ModFavItemRequest.ObjectList)
  return objectlist_.Get(index);
}
::micromsg::ModFavObject* ModFavItemRequest::mutable_objectlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.ModFavItemRequest.ObjectList)
  return objectlist_.Mutable(index);
}
::micromsg::ModFavObject* ModFavItemRequest::add_objectlist() {
  // @@protoc_insertion_point(field_add:micromsg.ModFavItemRequest.ObjectList)
  return objectlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::ModFavObject >*
ModFavItemRequest::mutable_objectlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ModFavItemRequest.ObjectList)
  return &objectlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::ModFavObject >&
ModFavItemRequest::objectlist() const {
  // @@protoc_insertion_point(field_list:micromsg.ModFavItemRequest.ObjectList)
  return objectlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModFavItemResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModFavItemResponse::ModFavItemResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModFavItemResponse)
}
ModFavItemResponse::ModFavItemResponse(const ModFavItemResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.ModFavItemResponse)
}

void ModFavItemResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

ModFavItemResponse::~ModFavItemResponse() {
  // @@protoc_insertion_point(destructor:micromsg.ModFavItemResponse)
  SharedDtor();
}

void ModFavItemResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void ModFavItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModFavItemResponse::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModFavItemResponse& ModFavItemResponse::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModFavItemResponse* ModFavItemResponse::New(::google::protobuf::Arena* arena) const {
  ModFavItemResponse* n = new ModFavItemResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModFavItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModFavItemResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModFavItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModFavItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModFavItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModFavItemResponse)
  return false;
#undef DO_
}

void ModFavItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModFavItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModFavItemResponse)
}

::google::protobuf::uint8* ModFavItemResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModFavItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModFavItemResponse)
  return target;
}

size_t ModFavItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModFavItemResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModFavItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModFavItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ModFavItemResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModFavItemResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModFavItemResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModFavItemResponse)
    MergeFrom(*source);
  }
}

void ModFavItemResponse::MergeFrom(const ModFavItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModFavItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void ModFavItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModFavItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModFavItemResponse::CopyFrom(const ModFavItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModFavItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModFavItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void ModFavItemResponse::Swap(ModFavItemResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModFavItemResponse::InternalSwap(ModFavItemResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModFavItemResponse::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModFavItemResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool ModFavItemResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModFavItemResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void ModFavItemResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModFavItemResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& ModFavItemResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ModFavItemResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* ModFavItemResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModFavItemResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* ModFavItemResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ModFavItemResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void ModFavItemResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModFavItemResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShareFavRequest::kBaseRequestFieldNumber;
const int ShareFavRequest::kToUserFieldNumber;
const int ShareFavRequest::kSceneFieldNumber;
const int ShareFavRequest::kCountFieldNumber;
const int ShareFavRequest::kFavIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShareFavRequest::ShareFavRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ShareFavRequest)
}
ShareFavRequest::ShareFavRequest(const ShareFavRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      favidlist_(from.favidlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  touser_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_touser()) {
    touser_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.touser_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&scene_, &from.scene_,
    reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&scene_) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ShareFavRequest)
}

void ShareFavRequest::SharedCtor() {
  _cached_size_ = 0;
  touser_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(count_));
}

ShareFavRequest::~ShareFavRequest() {
  // @@protoc_insertion_point(destructor:micromsg.ShareFavRequest)
  SharedDtor();
}

void ShareFavRequest::SharedDtor() {
  touser_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void ShareFavRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShareFavRequest::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShareFavRequest& ShareFavRequest::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShareFavRequest* ShareFavRequest::New(::google::protobuf::Arena* arena) const {
  ShareFavRequest* n = new ShareFavRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShareFavRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ShareFavRequest)
  favidlist_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_touser()) {
      GOOGLE_DCHECK(!touser_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*touser_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&scene_, 0, reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&scene_) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShareFavRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ShareFavRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ToUser = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_touser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->touser().data(), this->touser().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ShareFavRequest.ToUser");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Scene = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 FavIdList = 5 [packed = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_favidlist())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_favidlist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ShareFavRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ShareFavRequest)
  return false;
#undef DO_
}

void ShareFavRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ShareFavRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ToUser = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->touser().data(), this->touser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ShareFavRequest.ToUser");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->touser(), output);
  }

  // required uint32 Scene = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene(), output);
  }

  // required uint32 Count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  // repeated uint32 FavIdList = 5 [packed = true];
  if (this->favidlist_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_favidlist_cached_byte_size_);
  }
  for (int i = 0, n = this->favidlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->favidlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ShareFavRequest)
}

::google::protobuf::uint8* ShareFavRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ShareFavRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ToUser = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->touser().data(), this->touser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ShareFavRequest.ToUser");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->touser(), target);
  }

  // required uint32 Scene = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene(), target);
  }

  // required uint32 Count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  // repeated uint32 FavIdList = 5 [packed = true];
  if (this->favidlist_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _favidlist_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->favidlist_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ShareFavRequest)
  return target;
}

size_t ShareFavRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ShareFavRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_scene()) {
    // required uint32 Scene = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  if (has_count()) {
    // required uint32 Count = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t ShareFavRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ShareFavRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Scene = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());

    // required uint32 Count = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 FavIdList = 5 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->favidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _favidlist_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // optional string ToUser = 2;
  if (has_touser()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->touser());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareFavRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ShareFavRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShareFavRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShareFavRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ShareFavRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ShareFavRequest)
    MergeFrom(*source);
  }
}

void ShareFavRequest::MergeFrom(const ShareFavRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ShareFavRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  favidlist_.MergeFrom(from.favidlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_touser();
      touser_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.touser_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      scene_ = from.scene_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShareFavRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ShareFavRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShareFavRequest::CopyFrom(const ShareFavRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ShareFavRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareFavRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void ShareFavRequest::Swap(ShareFavRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShareFavRequest::InternalSwap(ShareFavRequest* other) {
  favidlist_.InternalSwap(&other->favidlist_);
  touser_.Swap(&other->touser_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(scene_, other->scene_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShareFavRequest::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShareFavRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool ShareFavRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShareFavRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void ShareFavRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShareFavRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& ShareFavRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ShareFavRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* ShareFavRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShareFavRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* ShareFavRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ShareFavRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void ShareFavRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShareFavRequest.BaseRequest)
}

// optional string ToUser = 2;
bool ShareFavRequest::has_touser() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShareFavRequest::set_has_touser() {
  _has_bits_[0] |= 0x00000001u;
}
void ShareFavRequest::clear_has_touser() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShareFavRequest::clear_touser() {
  touser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_touser();
}
const ::std::string& ShareFavRequest::touser() const {
  // @@protoc_insertion_point(field_get:micromsg.ShareFavRequest.ToUser)
  return touser_.GetNoArena();
}
void ShareFavRequest::set_touser(const ::std::string& value) {
  set_has_touser();
  touser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ShareFavRequest.ToUser)
}
#if LANG_CXX11
void ShareFavRequest::set_touser(::std::string&& value) {
  set_has_touser();
  touser_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ShareFavRequest.ToUser)
}
#endif
void ShareFavRequest::set_touser(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_touser();
  touser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ShareFavRequest.ToUser)
}
void ShareFavRequest::set_touser(const char* value, size_t size) {
  set_has_touser();
  touser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ShareFavRequest.ToUser)
}
::std::string* ShareFavRequest::mutable_touser() {
  set_has_touser();
  // @@protoc_insertion_point(field_mutable:micromsg.ShareFavRequest.ToUser)
  return touser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShareFavRequest::release_touser() {
  // @@protoc_insertion_point(field_release:micromsg.ShareFavRequest.ToUser)
  clear_has_touser();
  return touser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShareFavRequest::set_allocated_touser(::std::string* touser) {
  if (touser != NULL) {
    set_has_touser();
  } else {
    clear_has_touser();
  }
  touser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touser);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShareFavRequest.ToUser)
}

// required uint32 Scene = 3;
bool ShareFavRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ShareFavRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000004u;
}
void ShareFavRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000004u;
}
void ShareFavRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 ShareFavRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.ShareFavRequest.Scene)
  return scene_;
}
void ShareFavRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShareFavRequest.Scene)
}

// required uint32 Count = 4;
bool ShareFavRequest::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ShareFavRequest::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
void ShareFavRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void ShareFavRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 ShareFavRequest::count() const {
  // @@protoc_insertion_point(field_get:micromsg.ShareFavRequest.Count)
  return count_;
}
void ShareFavRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShareFavRequest.Count)
}

// repeated uint32 FavIdList = 5 [packed = true];
int ShareFavRequest::favidlist_size() const {
  return favidlist_.size();
}
void ShareFavRequest::clear_favidlist() {
  favidlist_.Clear();
}
::google::protobuf::uint32 ShareFavRequest::favidlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ShareFavRequest.FavIdList)
  return favidlist_.Get(index);
}
void ShareFavRequest::set_favidlist(int index, ::google::protobuf::uint32 value) {
  favidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.ShareFavRequest.FavIdList)
}
void ShareFavRequest::add_favidlist(::google::protobuf::uint32 value) {
  favidlist_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.ShareFavRequest.FavIdList)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ShareFavRequest::favidlist() const {
  // @@protoc_insertion_point(field_list:micromsg.ShareFavRequest.FavIdList)
  return favidlist_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ShareFavRequest::mutable_favidlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ShareFavRequest.FavIdList)
  return &favidlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShareFavResponse::kBaseResponseFieldNumber;
const int ShareFavResponse::kUrlCountFieldNumber;
const int ShareFavResponse::kUrlListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShareFavResponse::ShareFavResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ShareFavResponse)
}
ShareFavResponse::ShareFavResponse(const ShareFavResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      urllist_(from.urllist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  urlcount_ = from.urlcount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.ShareFavResponse)
}

void ShareFavResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&urlcount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(urlcount_));
}

ShareFavResponse::~ShareFavResponse() {
  // @@protoc_insertion_point(destructor:micromsg.ShareFavResponse)
  SharedDtor();
}

void ShareFavResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void ShareFavResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShareFavResponse::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShareFavResponse& ShareFavResponse::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShareFavResponse* ShareFavResponse::New(::google::protobuf::Arena* arena) const {
  ShareFavResponse* n = new ShareFavResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShareFavResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ShareFavResponse)
  urllist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  urlcount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShareFavResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ShareFavResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 UrlCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_urlcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &urlcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t UrlList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_urllist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ShareFavResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ShareFavResponse)
  return false;
#undef DO_
}

void ShareFavResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ShareFavResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 UrlCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->urlcount(), output);
  }

  // repeated .micromsg.SKBuiltinString_t UrlList = 3;
  for (unsigned int i = 0, n = this->urllist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->urllist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ShareFavResponse)
}

::google::protobuf::uint8* ShareFavResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ShareFavResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 UrlCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->urlcount(), target);
  }

  // repeated .micromsg.SKBuiltinString_t UrlList = 3;
  for (unsigned int i = 0, n = this->urllist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->urllist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ShareFavResponse)
  return target;
}

size_t ShareFavResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ShareFavResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_urlcount()) {
    // required uint32 UrlCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->urlcount());
  }

  return total_size;
}
size_t ShareFavResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ShareFavResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 UrlCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->urlcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SKBuiltinString_t UrlList = 3;
  {
    unsigned int count = this->urllist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->urllist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareFavResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ShareFavResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ShareFavResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShareFavResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ShareFavResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ShareFavResponse)
    MergeFrom(*source);
  }
}

void ShareFavResponse::MergeFrom(const ShareFavResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ShareFavResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  urllist_.MergeFrom(from.urllist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      urlcount_ = from.urlcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShareFavResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ShareFavResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShareFavResponse::CopyFrom(const ShareFavResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ShareFavResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareFavResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void ShareFavResponse::Swap(ShareFavResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShareFavResponse::InternalSwap(ShareFavResponse* other) {
  urllist_.InternalSwap(&other->urllist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(urlcount_, other->urlcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShareFavResponse::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShareFavResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool ShareFavResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShareFavResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void ShareFavResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShareFavResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& ShareFavResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ShareFavResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* ShareFavResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShareFavResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* ShareFavResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ShareFavResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void ShareFavResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShareFavResponse.BaseResponse)
}

// required uint32 UrlCount = 2;
bool ShareFavResponse::has_urlcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShareFavResponse::set_has_urlcount() {
  _has_bits_[0] |= 0x00000002u;
}
void ShareFavResponse::clear_has_urlcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShareFavResponse::clear_urlcount() {
  urlcount_ = 0u;
  clear_has_urlcount();
}
::google::protobuf::uint32 ShareFavResponse::urlcount() const {
  // @@protoc_insertion_point(field_get:micromsg.ShareFavResponse.UrlCount)
  return urlcount_;
}
void ShareFavResponse::set_urlcount(::google::protobuf::uint32 value) {
  set_has_urlcount();
  urlcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShareFavResponse.UrlCount)
}

// repeated .micromsg.SKBuiltinString_t UrlList = 3;
int ShareFavResponse::urllist_size() const {
  return urllist_.size();
}
void ShareFavResponse::clear_urllist() {
  urllist_.Clear();
}
const ::micromsg::SKBuiltinString_t& ShareFavResponse::urllist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ShareFavResponse.UrlList)
  return urllist_.Get(index);
}
::micromsg::SKBuiltinString_t* ShareFavResponse::mutable_urllist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.ShareFavResponse.UrlList)
  return urllist_.Mutable(index);
}
::micromsg::SKBuiltinString_t* ShareFavResponse::add_urllist() {
  // @@protoc_insertion_point(field_add:micromsg.ShareFavResponse.UrlList)
  return urllist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
ShareFavResponse::mutable_urllist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ShareFavResponse.UrlList)
  return &urllist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
ShareFavResponse::urllist() const {
  // @@protoc_insertion_point(field_list:micromsg.ShareFavResponse.UrlList)
  return urllist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFavItemRequest::kBaseRequestFieldNumber;
const int AddFavItemRequest::kClientIdFieldNumber;
const int AddFavItemRequest::kTypeFieldNumber;
const int AddFavItemRequest::kSourceTypeFieldNumber;
const int AddFavItemRequest::kSourceIdFieldNumber;
const int AddFavItemRequest::kObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFavItemRequest::AddFavItemRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AddFavItemRequest)
}
AddFavItemRequest::AddFavItemRequest(const AddFavItemRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  sourceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sourceid()) {
    sourceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourceid_);
  }
  object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_object()) {
    object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&sourcetype_) -
    reinterpret_cast<char*>(&type_) + sizeof(sourcetype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.AddFavItemRequest)
}

void AddFavItemRequest::SharedCtor() {
  _cached_size_ = 0;
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&sourcetype_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(sourcetype_));
}

AddFavItemRequest::~AddFavItemRequest() {
  // @@protoc_insertion_point(destructor:micromsg.AddFavItemRequest)
  SharedDtor();
}

void AddFavItemRequest::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void AddFavItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFavItemRequest::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddFavItemRequest& AddFavItemRequest::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddFavItemRequest* AddFavItemRequest::New(::google::protobuf::Arena* arena) const {
  AddFavItemRequest* n = new AddFavItemRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddFavItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AddFavItemRequest)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_clientid()) {
      GOOGLE_DCHECK(!clientid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientid_.UnsafeRawStringPointer())->clear();
    }
    if (has_sourceid()) {
      GOOGLE_DCHECK(!sourceid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sourceid_.UnsafeRawStringPointer())->clear();
    }
    if (has_object()) {
      GOOGLE_DCHECK(!object_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*object_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 48u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&sourcetype_) -
      reinterpret_cast<char*>(&type_) + sizeof(sourcetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddFavItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AddFavItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AddFavItemRequest.ClientId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SourceType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_sourcetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourcetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SourceId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sourceid().data(), this->sourceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AddFavItemRequest.SourceId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Object = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->object().data(), this->object().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AddFavItemRequest.Object");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AddFavItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AddFavItemRequest)
  return false;
#undef DO_
}

void AddFavItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AddFavItemRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ClientId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddFavItemRequest.ClientId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientid(), output);
  }

  // required uint32 Type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required uint32 SourceType = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sourcetype(), output);
  }

  // optional string SourceId = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceid().data(), this->sourceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddFavItemRequest.SourceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sourceid(), output);
  }

  // optional string Object = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->object().data(), this->object().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddFavItemRequest.Object");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->object(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AddFavItemRequest)
}

::google::protobuf::uint8* AddFavItemRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AddFavItemRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ClientId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddFavItemRequest.ClientId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientid(), target);
  }

  // required uint32 Type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required uint32 SourceType = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sourcetype(), target);
  }

  // optional string SourceId = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceid().data(), this->sourceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddFavItemRequest.SourceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sourceid(), target);
  }

  // optional string Object = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->object().data(), this->object().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddFavItemRequest.Object");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->object(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AddFavItemRequest)
  return target;
}

size_t AddFavItemRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.AddFavItemRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_type()) {
    // required uint32 Type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_sourcetype()) {
    // required uint32 SourceType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sourcetype());
  }

  return total_size;
}
size_t AddFavItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AddFavItemRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000038) ^ 0x00000038) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 SourceType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sourcetype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string ClientId = 2;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientid());
    }

    // optional string SourceId = 5;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourceid());
    }

    // optional string Object = 6;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFavItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AddFavItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFavItemRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddFavItemRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AddFavItemRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AddFavItemRequest)
    MergeFrom(*source);
  }
}

void AddFavItemRequest::MergeFrom(const AddFavItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AddFavItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sourceid();
      sourceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourceid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_object();
      object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      sourcetype_ = from.sourcetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddFavItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AddFavItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFavItemRequest::CopyFrom(const AddFavItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AddFavItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFavItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000038) != 0x00000038) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void AddFavItemRequest::Swap(AddFavItemRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFavItemRequest::InternalSwap(AddFavItemRequest* other) {
  clientid_.Swap(&other->clientid_);
  sourceid_.Swap(&other->sourceid_);
  object_.Swap(&other->object_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(type_, other->type_);
  std::swap(sourcetype_, other->sourcetype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddFavItemRequest::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddFavItemRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool AddFavItemRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AddFavItemRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000008u;
}
void AddFavItemRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000008u;
}
void AddFavItemRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& AddFavItemRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.AddFavItemRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* AddFavItemRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddFavItemRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* AddFavItemRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.AddFavItemRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void AddFavItemRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddFavItemRequest.BaseRequest)
}

// optional string ClientId = 2;
bool AddFavItemRequest::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddFavItemRequest::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
void AddFavItemRequest::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddFavItemRequest::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
const ::std::string& AddFavItemRequest::clientid() const {
  // @@protoc_insertion_point(field_get:micromsg.AddFavItemRequest.ClientId)
  return clientid_.GetNoArena();
}
void AddFavItemRequest::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AddFavItemRequest.ClientId)
}
#if LANG_CXX11
void AddFavItemRequest::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AddFavItemRequest.ClientId)
}
#endif
void AddFavItemRequest::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AddFavItemRequest.ClientId)
}
void AddFavItemRequest::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AddFavItemRequest.ClientId)
}
::std::string* AddFavItemRequest::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:micromsg.AddFavItemRequest.ClientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddFavItemRequest::release_clientid() {
  // @@protoc_insertion_point(field_release:micromsg.AddFavItemRequest.ClientId)
  clear_has_clientid();
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFavItemRequest::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddFavItemRequest.ClientId)
}

// required uint32 Type = 3;
bool AddFavItemRequest::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AddFavItemRequest::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void AddFavItemRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void AddFavItemRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 AddFavItemRequest::type() const {
  // @@protoc_insertion_point(field_get:micromsg.AddFavItemRequest.Type)
  return type_;
}
void AddFavItemRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddFavItemRequest.Type)
}

// required uint32 SourceType = 4;
bool AddFavItemRequest::has_sourcetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AddFavItemRequest::set_has_sourcetype() {
  _has_bits_[0] |= 0x00000020u;
}
void AddFavItemRequest::clear_has_sourcetype() {
  _has_bits_[0] &= ~0x00000020u;
}
void AddFavItemRequest::clear_sourcetype() {
  sourcetype_ = 0u;
  clear_has_sourcetype();
}
::google::protobuf::uint32 AddFavItemRequest::sourcetype() const {
  // @@protoc_insertion_point(field_get:micromsg.AddFavItemRequest.SourceType)
  return sourcetype_;
}
void AddFavItemRequest::set_sourcetype(::google::protobuf::uint32 value) {
  set_has_sourcetype();
  sourcetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddFavItemRequest.SourceType)
}

// optional string SourceId = 5;
bool AddFavItemRequest::has_sourceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddFavItemRequest::set_has_sourceid() {
  _has_bits_[0] |= 0x00000002u;
}
void AddFavItemRequest::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddFavItemRequest::clear_sourceid() {
  sourceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sourceid();
}
const ::std::string& AddFavItemRequest::sourceid() const {
  // @@protoc_insertion_point(field_get:micromsg.AddFavItemRequest.SourceId)
  return sourceid_.GetNoArena();
}
void AddFavItemRequest::set_sourceid(const ::std::string& value) {
  set_has_sourceid();
  sourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AddFavItemRequest.SourceId)
}
#if LANG_CXX11
void AddFavItemRequest::set_sourceid(::std::string&& value) {
  set_has_sourceid();
  sourceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AddFavItemRequest.SourceId)
}
#endif
void AddFavItemRequest::set_sourceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sourceid();
  sourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AddFavItemRequest.SourceId)
}
void AddFavItemRequest::set_sourceid(const char* value, size_t size) {
  set_has_sourceid();
  sourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AddFavItemRequest.SourceId)
}
::std::string* AddFavItemRequest::mutable_sourceid() {
  set_has_sourceid();
  // @@protoc_insertion_point(field_mutable:micromsg.AddFavItemRequest.SourceId)
  return sourceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddFavItemRequest::release_sourceid() {
  // @@protoc_insertion_point(field_release:micromsg.AddFavItemRequest.SourceId)
  clear_has_sourceid();
  return sourceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFavItemRequest::set_allocated_sourceid(::std::string* sourceid) {
  if (sourceid != NULL) {
    set_has_sourceid();
  } else {
    clear_has_sourceid();
  }
  sourceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourceid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddFavItemRequest.SourceId)
}

// optional string Object = 6;
bool AddFavItemRequest::has_object() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AddFavItemRequest::set_has_object() {
  _has_bits_[0] |= 0x00000004u;
}
void AddFavItemRequest::clear_has_object() {
  _has_bits_[0] &= ~0x00000004u;
}
void AddFavItemRequest::clear_object() {
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object();
}
const ::std::string& AddFavItemRequest::object() const {
  // @@protoc_insertion_point(field_get:micromsg.AddFavItemRequest.Object)
  return object_.GetNoArena();
}
void AddFavItemRequest::set_object(const ::std::string& value) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AddFavItemRequest.Object)
}
#if LANG_CXX11
void AddFavItemRequest::set_object(::std::string&& value) {
  set_has_object();
  object_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AddFavItemRequest.Object)
}
#endif
void AddFavItemRequest::set_object(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AddFavItemRequest.Object)
}
void AddFavItemRequest::set_object(const char* value, size_t size) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AddFavItemRequest.Object)
}
::std::string* AddFavItemRequest::mutable_object() {
  set_has_object();
  // @@protoc_insertion_point(field_mutable:micromsg.AddFavItemRequest.Object)
  return object_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddFavItemRequest::release_object() {
  // @@protoc_insertion_point(field_release:micromsg.AddFavItemRequest.Object)
  clear_has_object();
  return object_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFavItemRequest::set_allocated_object(::std::string* object) {
  if (object != NULL) {
    set_has_object();
  } else {
    clear_has_object();
  }
  object_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddFavItemRequest.Object)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFavItemResponse::kBaseResponseFieldNumber;
const int AddFavItemResponse::kFavIdFieldNumber;
const int AddFavItemResponse::kUpdateSeqFieldNumber;
const int AddFavItemResponse::kUsedSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFavItemResponse::AddFavItemResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AddFavItemResponse)
}
AddFavItemResponse::AddFavItemResponse(const AddFavItemResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&favid_, &from.favid_,
    reinterpret_cast<char*>(&usedsize_) -
    reinterpret_cast<char*>(&favid_) + sizeof(usedsize_));
  // @@protoc_insertion_point(copy_constructor:micromsg.AddFavItemResponse)
}

void AddFavItemResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&usedsize_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(usedsize_));
}

AddFavItemResponse::~AddFavItemResponse() {
  // @@protoc_insertion_point(destructor:micromsg.AddFavItemResponse)
  SharedDtor();
}

void AddFavItemResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void AddFavItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFavItemResponse::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddFavItemResponse& AddFavItemResponse::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddFavItemResponse* AddFavItemResponse::New(::google::protobuf::Arena* arena) const {
  AddFavItemResponse* n = new AddFavItemResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddFavItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AddFavItemResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&favid_, 0, reinterpret_cast<char*>(&usedsize_) -
      reinterpret_cast<char*>(&favid_) + sizeof(usedsize_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddFavItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AddFavItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 FavId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_favid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 UpdateSeq = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_updateseq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updateseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 UsedSize = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_usedsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &usedsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AddFavItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AddFavItemResponse)
  return false;
#undef DO_
}

void AddFavItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AddFavItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 FavId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->favid(), output);
  }

  // required uint32 UpdateSeq = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->updateseq(), output);
  }

  // optional uint64 UsedSize = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->usedsize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AddFavItemResponse)
}

::google::protobuf::uint8* AddFavItemResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AddFavItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 FavId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->favid(), target);
  }

  // required uint32 UpdateSeq = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->updateseq(), target);
  }

  // optional uint64 UsedSize = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->usedsize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AddFavItemResponse)
  return target;
}

size_t AddFavItemResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.AddFavItemResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_favid()) {
    // required uint32 FavId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->favid());
  }

  if (has_updateseq()) {
    // required uint32 UpdateSeq = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updateseq());
  }

  return total_size;
}
size_t AddFavItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AddFavItemResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 FavId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->favid());

    // required uint32 UpdateSeq = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updateseq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint64 UsedSize = 4;
  if (has_usedsize()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->usedsize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFavItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AddFavItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFavItemResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddFavItemResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AddFavItemResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AddFavItemResponse)
    MergeFrom(*source);
  }
}

void AddFavItemResponse::MergeFrom(const AddFavItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AddFavItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      favid_ = from.favid_;
    }
    if (cached_has_bits & 0x00000004u) {
      updateseq_ = from.updateseq_;
    }
    if (cached_has_bits & 0x00000008u) {
      usedsize_ = from.usedsize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddFavItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AddFavItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFavItemResponse::CopyFrom(const AddFavItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AddFavItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFavItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void AddFavItemResponse::Swap(AddFavItemResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFavItemResponse::InternalSwap(AddFavItemResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(favid_, other->favid_);
  std::swap(updateseq_, other->updateseq_);
  std::swap(usedsize_, other->usedsize_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddFavItemResponse::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddFavItemResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool AddFavItemResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddFavItemResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void AddFavItemResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddFavItemResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& AddFavItemResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.AddFavItemResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* AddFavItemResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddFavItemResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* AddFavItemResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.AddFavItemResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void AddFavItemResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddFavItemResponse.BaseResponse)
}

// required uint32 FavId = 2;
bool AddFavItemResponse::has_favid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddFavItemResponse::set_has_favid() {
  _has_bits_[0] |= 0x00000002u;
}
void AddFavItemResponse::clear_has_favid() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddFavItemResponse::clear_favid() {
  favid_ = 0u;
  clear_has_favid();
}
::google::protobuf::uint32 AddFavItemResponse::favid() const {
  // @@protoc_insertion_point(field_get:micromsg.AddFavItemResponse.FavId)
  return favid_;
}
void AddFavItemResponse::set_favid(::google::protobuf::uint32 value) {
  set_has_favid();
  favid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddFavItemResponse.FavId)
}

// required uint32 UpdateSeq = 3;
bool AddFavItemResponse::has_updateseq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AddFavItemResponse::set_has_updateseq() {
  _has_bits_[0] |= 0x00000004u;
}
void AddFavItemResponse::clear_has_updateseq() {
  _has_bits_[0] &= ~0x00000004u;
}
void AddFavItemResponse::clear_updateseq() {
  updateseq_ = 0u;
  clear_has_updateseq();
}
::google::protobuf::uint32 AddFavItemResponse::updateseq() const {
  // @@protoc_insertion_point(field_get:micromsg.AddFavItemResponse.UpdateSeq)
  return updateseq_;
}
void AddFavItemResponse::set_updateseq(::google::protobuf::uint32 value) {
  set_has_updateseq();
  updateseq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddFavItemResponse.UpdateSeq)
}

// optional uint64 UsedSize = 4;
bool AddFavItemResponse::has_usedsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AddFavItemResponse::set_has_usedsize() {
  _has_bits_[0] |= 0x00000008u;
}
void AddFavItemResponse::clear_has_usedsize() {
  _has_bits_[0] &= ~0x00000008u;
}
void AddFavItemResponse::clear_usedsize() {
  usedsize_ = GOOGLE_ULONGLONG(0);
  clear_has_usedsize();
}
::google::protobuf::uint64 AddFavItemResponse::usedsize() const {
  // @@protoc_insertion_point(field_get:micromsg.AddFavItemResponse.UsedSize)
  return usedsize_;
}
void AddFavItemResponse::set_usedsize(::google::protobuf::uint64 value) {
  set_has_usedsize();
  usedsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddFavItemResponse.UsedSize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelFavItemRsp::kRetFieldNumber;
const int DelFavItemRsp::kFavIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelFavItemRsp::DelFavItemRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DelFavItemRsp)
}
DelFavItemRsp::DelFavItemRsp(const DelFavItemRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ret_, &from.ret_,
    reinterpret_cast<char*>(&favid_) -
    reinterpret_cast<char*>(&ret_) + sizeof(favid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.DelFavItemRsp)
}

void DelFavItemRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ret_, 0, reinterpret_cast<char*>(&favid_) -
    reinterpret_cast<char*>(&ret_) + sizeof(favid_));
}

DelFavItemRsp::~DelFavItemRsp() {
  // @@protoc_insertion_point(destructor:micromsg.DelFavItemRsp)
  SharedDtor();
}

void DelFavItemRsp::SharedDtor() {
}

void DelFavItemRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelFavItemRsp::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelFavItemRsp& DelFavItemRsp::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelFavItemRsp* DelFavItemRsp::New(::google::protobuf::Arena* arena) const {
  DelFavItemRsp* n = new DelFavItemRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelFavItemRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DelFavItemRsp)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&ret_, 0, reinterpret_cast<char*>(&favid_) -
      reinterpret_cast<char*>(&ret_) + sizeof(favid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelFavItemRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DelFavItemRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 FavId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_favid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DelFavItemRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DelFavItemRsp)
  return false;
#undef DO_
}

void DelFavItemRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DelFavItemRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required uint32 FavId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->favid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DelFavItemRsp)
}

::google::protobuf::uint8* DelFavItemRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DelFavItemRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required uint32 FavId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->favid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DelFavItemRsp)
  return target;
}

size_t DelFavItemRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.DelFavItemRsp)
  size_t total_size = 0;

  if (has_ret()) {
    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_favid()) {
    // required uint32 FavId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->favid());
  }

  return total_size;
}
size_t DelFavItemRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DelFavItemRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required uint32 FavId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->favid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelFavItemRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DelFavItemRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DelFavItemRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelFavItemRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DelFavItemRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DelFavItemRsp)
    MergeFrom(*source);
  }
}

void DelFavItemRsp::MergeFrom(const DelFavItemRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DelFavItemRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000002u) {
      favid_ = from.favid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelFavItemRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DelFavItemRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelFavItemRsp::CopyFrom(const DelFavItemRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DelFavItemRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelFavItemRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DelFavItemRsp::Swap(DelFavItemRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelFavItemRsp::InternalSwap(DelFavItemRsp* other) {
  std::swap(ret_, other->ret_);
  std::swap(favid_, other->favid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelFavItemRsp::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelFavItemRsp

// required int32 Ret = 1;
bool DelFavItemRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelFavItemRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void DelFavItemRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelFavItemRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::google::protobuf::int32 DelFavItemRsp::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.DelFavItemRsp.Ret)
  return ret_;
}
void DelFavItemRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelFavItemRsp.Ret)
}

// required uint32 FavId = 2;
bool DelFavItemRsp::has_favid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DelFavItemRsp::set_has_favid() {
  _has_bits_[0] |= 0x00000002u;
}
void DelFavItemRsp::clear_has_favid() {
  _has_bits_[0] &= ~0x00000002u;
}
void DelFavItemRsp::clear_favid() {
  favid_ = 0u;
  clear_has_favid();
}
::google::protobuf::uint32 DelFavItemRsp::favid() const {
  // @@protoc_insertion_point(field_get:micromsg.DelFavItemRsp.FavId)
  return favid_;
}
void DelFavItemRsp::set_favid(::google::protobuf::uint32 value) {
  set_has_favid();
  favid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelFavItemRsp.FavId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchDelFavItemRequest::kBaseRequestFieldNumber;
const int BatchDelFavItemRequest::kCountFieldNumber;
const int BatchDelFavItemRequest::kFavIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchDelFavItemRequest::BatchDelFavItemRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchDelFavItemRequest)
}
BatchDelFavItemRequest::BatchDelFavItemRequest(const BatchDelFavItemRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      favidlist_(from.favidlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchDelFavItemRequest)
}

void BatchDelFavItemRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(count_));
}

BatchDelFavItemRequest::~BatchDelFavItemRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BatchDelFavItemRequest)
  SharedDtor();
}

void BatchDelFavItemRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void BatchDelFavItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchDelFavItemRequest::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchDelFavItemRequest& BatchDelFavItemRequest::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchDelFavItemRequest* BatchDelFavItemRequest::New(::google::protobuf::Arena* arena) const {
  BatchDelFavItemRequest* n = new BatchDelFavItemRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchDelFavItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchDelFavItemRequest)
  favidlist_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchDelFavItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchDelFavItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 FavIdList = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_favidlist())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_favidlist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchDelFavItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchDelFavItemRequest)
  return false;
#undef DO_
}

void BatchDelFavItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchDelFavItemRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated uint32 FavIdList = 3 [packed = true];
  if (this->favidlist_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_favidlist_cached_byte_size_);
  }
  for (int i = 0, n = this->favidlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->favidlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchDelFavItemRequest)
}

::google::protobuf::uint8* BatchDelFavItemRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchDelFavItemRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated uint32 FavIdList = 3 [packed = true];
  if (this->favidlist_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _favidlist_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->favidlist_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchDelFavItemRequest)
  return target;
}

size_t BatchDelFavItemRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BatchDelFavItemRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t BatchDelFavItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchDelFavItemRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 FavIdList = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->favidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _favidlist_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchDelFavItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchDelFavItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchDelFavItemRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchDelFavItemRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchDelFavItemRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchDelFavItemRequest)
    MergeFrom(*source);
  }
}

void BatchDelFavItemRequest::MergeFrom(const BatchDelFavItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchDelFavItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  favidlist_.MergeFrom(from.favidlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchDelFavItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchDelFavItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchDelFavItemRequest::CopyFrom(const BatchDelFavItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchDelFavItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchDelFavItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void BatchDelFavItemRequest::Swap(BatchDelFavItemRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchDelFavItemRequest::InternalSwap(BatchDelFavItemRequest* other) {
  favidlist_.InternalSwap(&other->favidlist_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchDelFavItemRequest::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchDelFavItemRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BatchDelFavItemRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchDelFavItemRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchDelFavItemRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchDelFavItemRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BatchDelFavItemRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelFavItemRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BatchDelFavItemRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchDelFavItemRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BatchDelFavItemRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BatchDelFavItemRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BatchDelFavItemRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchDelFavItemRequest.BaseRequest)
}

// required uint32 Count = 2;
bool BatchDelFavItemRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchDelFavItemRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchDelFavItemRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchDelFavItemRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 BatchDelFavItemRequest::count() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelFavItemRequest.Count)
  return count_;
}
void BatchDelFavItemRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchDelFavItemRequest.Count)
}

// repeated uint32 FavIdList = 3 [packed = true];
int BatchDelFavItemRequest::favidlist_size() const {
  return favidlist_.size();
}
void BatchDelFavItemRequest::clear_favidlist() {
  favidlist_.Clear();
}
::google::protobuf::uint32 BatchDelFavItemRequest::favidlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelFavItemRequest.FavIdList)
  return favidlist_.Get(index);
}
void BatchDelFavItemRequest::set_favidlist(int index, ::google::protobuf::uint32 value) {
  favidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.BatchDelFavItemRequest.FavIdList)
}
void BatchDelFavItemRequest::add_favidlist(::google::protobuf::uint32 value) {
  favidlist_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.BatchDelFavItemRequest.FavIdList)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BatchDelFavItemRequest::favidlist() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchDelFavItemRequest.FavIdList)
  return favidlist_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BatchDelFavItemRequest::mutable_favidlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchDelFavItemRequest.FavIdList)
  return &favidlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchDelFavItemResponse::kBaseResponseFieldNumber;
const int BatchDelFavItemResponse::kCountFieldNumber;
const int BatchDelFavItemResponse::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchDelFavItemResponse::BatchDelFavItemResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchDelFavItemResponse)
}
BatchDelFavItemResponse::BatchDelFavItemResponse(const BatchDelFavItemResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchDelFavItemResponse)
}

void BatchDelFavItemResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(count_));
}

BatchDelFavItemResponse::~BatchDelFavItemResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BatchDelFavItemResponse)
  SharedDtor();
}

void BatchDelFavItemResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BatchDelFavItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchDelFavItemResponse::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchDelFavItemResponse& BatchDelFavItemResponse::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchDelFavItemResponse* BatchDelFavItemResponse::New(::google::protobuf::Arena* arena) const {
  BatchDelFavItemResponse* n = new BatchDelFavItemResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchDelFavItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchDelFavItemResponse)
  list_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchDelFavItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchDelFavItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.DelFavItemRsp List = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchDelFavItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchDelFavItemResponse)
  return false;
#undef DO_
}

void BatchDelFavItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchDelFavItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .micromsg.DelFavItemRsp List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchDelFavItemResponse)
}

::google::protobuf::uint8* BatchDelFavItemResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchDelFavItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.DelFavItemRsp List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchDelFavItemResponse)
  return target;
}

size_t BatchDelFavItemResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BatchDelFavItemResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t BatchDelFavItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchDelFavItemResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.DelFavItemRsp List = 3;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchDelFavItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchDelFavItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchDelFavItemResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchDelFavItemResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchDelFavItemResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchDelFavItemResponse)
    MergeFrom(*source);
  }
}

void BatchDelFavItemResponse::MergeFrom(const BatchDelFavItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchDelFavItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchDelFavItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchDelFavItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchDelFavItemResponse::CopyFrom(const BatchDelFavItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchDelFavItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchDelFavItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BatchDelFavItemResponse::Swap(BatchDelFavItemResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchDelFavItemResponse::InternalSwap(BatchDelFavItemResponse* other) {
  list_.InternalSwap(&other->list_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchDelFavItemResponse::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchDelFavItemResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BatchDelFavItemResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchDelFavItemResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchDelFavItemResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchDelFavItemResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BatchDelFavItemResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelFavItemResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BatchDelFavItemResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchDelFavItemResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BatchDelFavItemResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BatchDelFavItemResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BatchDelFavItemResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchDelFavItemResponse.BaseResponse)
}

// required uint32 Count = 2;
bool BatchDelFavItemResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchDelFavItemResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchDelFavItemResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchDelFavItemResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 BatchDelFavItemResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelFavItemResponse.Count)
  return count_;
}
void BatchDelFavItemResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchDelFavItemResponse.Count)
}

// repeated .micromsg.DelFavItemRsp List = 3;
int BatchDelFavItemResponse::list_size() const {
  return list_.size();
}
void BatchDelFavItemResponse::clear_list() {
  list_.Clear();
}
const ::micromsg::DelFavItemRsp& BatchDelFavItemResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelFavItemResponse.List)
  return list_.Get(index);
}
::micromsg::DelFavItemRsp* BatchDelFavItemResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchDelFavItemResponse.List)
  return list_.Mutable(index);
}
::micromsg::DelFavItemRsp* BatchDelFavItemResponse::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.BatchDelFavItemResponse.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::DelFavItemRsp >*
BatchDelFavItemResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchDelFavItemResponse.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::DelFavItemRsp >&
BatchDelFavItemResponse::list() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchDelFavItemResponse.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FavObject::kFavIdFieldNumber;
const int FavObject::kStatusFieldNumber;
const int FavObject::kObjectFieldNumber;
const int FavObject::kFlagFieldNumber;
const int FavObject::kUpdateTimeFieldNumber;
const int FavObject::kUpdateSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FavObject::FavObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.FavObject)
}
FavObject::FavObject(const FavObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_object()) {
    object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_);
  }
  ::memcpy(&favid_, &from.favid_,
    reinterpret_cast<char*>(&updateseq_) -
    reinterpret_cast<char*>(&favid_) + sizeof(updateseq_));
  // @@protoc_insertion_point(copy_constructor:micromsg.FavObject)
}

void FavObject::SharedCtor() {
  _cached_size_ = 0;
  object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&favid_, 0, reinterpret_cast<char*>(&updateseq_) -
    reinterpret_cast<char*>(&favid_) + sizeof(updateseq_));
}

FavObject::~FavObject() {
  // @@protoc_insertion_point(destructor:micromsg.FavObject)
  SharedDtor();
}

void FavObject::SharedDtor() {
  object_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FavObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FavObject::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FavObject& FavObject::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

FavObject* FavObject::New(::google::protobuf::Arena* arena) const {
  FavObject* n = new FavObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FavObject::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.FavObject)
  if (has_object()) {
    GOOGLE_DCHECK(!object_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*object_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&favid_, 0, reinterpret_cast<char*>(&updateseq_) -
      reinterpret_cast<char*>(&favid_) + sizeof(updateseq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FavObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.FavObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 FavId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_favid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Object = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->object().data(), this->object().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FavObject.Object");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Flag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 UpdateTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_updatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 UpdateSeq = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_updateseq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updateseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.FavObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.FavObject)
  return false;
#undef DO_
}

void FavObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.FavObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 FavId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->favid(), output);
  }

  // required int32 Status = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional string Object = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->object().data(), this->object().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FavObject.Object");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->object(), output);
  }

  // required uint32 Flag = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flag(), output);
  }

  // required uint32 UpdateTime = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->updatetime(), output);
  }

  // required uint32 UpdateSeq = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->updateseq(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.FavObject)
}

::google::protobuf::uint8* FavObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.FavObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 FavId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->favid(), target);
  }

  // required int32 Status = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // optional string Object = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->object().data(), this->object().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FavObject.Object");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->object(), target);
  }

  // required uint32 Flag = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flag(), target);
  }

  // required uint32 UpdateTime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->updatetime(), target);
  }

  // required uint32 UpdateSeq = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->updateseq(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.FavObject)
  return target;
}

size_t FavObject::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.FavObject)
  size_t total_size = 0;

  if (has_favid()) {
    // required uint32 FavId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->favid());
  }

  if (has_status()) {
    // required int32 Status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  if (has_flag()) {
    // required uint32 Flag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag());
  }

  if (has_updatetime()) {
    // required uint32 UpdateTime = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updatetime());
  }

  if (has_updateseq()) {
    // required uint32 UpdateSeq = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updateseq());
  }

  return total_size;
}
size_t FavObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.FavObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003e) ^ 0x0000003e) == 0) {  // All required fields are present.
    // required uint32 FavId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->favid());

    // required int32 Status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

    // required uint32 Flag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag());

    // required uint32 UpdateTime = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updatetime());

    // required uint32 UpdateSeq = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updateseq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string Object = 3;
  if (has_object()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FavObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.FavObject)
  GOOGLE_DCHECK_NE(&from, this);
  const FavObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FavObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.FavObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.FavObject)
    MergeFrom(*source);
  }
}

void FavObject::MergeFrom(const FavObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.FavObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_object();
      object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_);
    }
    if (cached_has_bits & 0x00000002u) {
      favid_ = from.favid_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000010u) {
      updatetime_ = from.updatetime_;
    }
    if (cached_has_bits & 0x00000020u) {
      updateseq_ = from.updateseq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FavObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.FavObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FavObject::CopyFrom(const FavObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.FavObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FavObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;
  return true;
}

void FavObject::Swap(FavObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FavObject::InternalSwap(FavObject* other) {
  object_.Swap(&other->object_);
  std::swap(favid_, other->favid_);
  std::swap(status_, other->status_);
  std::swap(flag_, other->flag_);
  std::swap(updatetime_, other->updatetime_);
  std::swap(updateseq_, other->updateseq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FavObject::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FavObject

// required uint32 FavId = 1;
bool FavObject::has_favid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FavObject::set_has_favid() {
  _has_bits_[0] |= 0x00000002u;
}
void FavObject::clear_has_favid() {
  _has_bits_[0] &= ~0x00000002u;
}
void FavObject::clear_favid() {
  favid_ = 0u;
  clear_has_favid();
}
::google::protobuf::uint32 FavObject::favid() const {
  // @@protoc_insertion_point(field_get:micromsg.FavObject.FavId)
  return favid_;
}
void FavObject::set_favid(::google::protobuf::uint32 value) {
  set_has_favid();
  favid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FavObject.FavId)
}

// required int32 Status = 2;
bool FavObject::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FavObject::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void FavObject::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void FavObject::clear_status() {
  status_ = 0;
  clear_has_status();
}
::google::protobuf::int32 FavObject::status() const {
  // @@protoc_insertion_point(field_get:micromsg.FavObject.Status)
  return status_;
}
void FavObject::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FavObject.Status)
}

// optional string Object = 3;
bool FavObject::has_object() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FavObject::set_has_object() {
  _has_bits_[0] |= 0x00000001u;
}
void FavObject::clear_has_object() {
  _has_bits_[0] &= ~0x00000001u;
}
void FavObject::clear_object() {
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object();
}
const ::std::string& FavObject::object() const {
  // @@protoc_insertion_point(field_get:micromsg.FavObject.Object)
  return object_.GetNoArena();
}
void FavObject::set_object(const ::std::string& value) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FavObject.Object)
}
#if LANG_CXX11
void FavObject::set_object(::std::string&& value) {
  set_has_object();
  object_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FavObject.Object)
}
#endif
void FavObject::set_object(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FavObject.Object)
}
void FavObject::set_object(const char* value, size_t size) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FavObject.Object)
}
::std::string* FavObject::mutable_object() {
  set_has_object();
  // @@protoc_insertion_point(field_mutable:micromsg.FavObject.Object)
  return object_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FavObject::release_object() {
  // @@protoc_insertion_point(field_release:micromsg.FavObject.Object)
  clear_has_object();
  return object_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FavObject::set_allocated_object(::std::string* object) {
  if (object != NULL) {
    set_has_object();
  } else {
    clear_has_object();
  }
  object_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FavObject.Object)
}

// required uint32 Flag = 4;
bool FavObject::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FavObject::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
void FavObject::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
void FavObject::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
::google::protobuf::uint32 FavObject::flag() const {
  // @@protoc_insertion_point(field_get:micromsg.FavObject.Flag)
  return flag_;
}
void FavObject::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FavObject.Flag)
}

// required uint32 UpdateTime = 5;
bool FavObject::has_updatetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FavObject::set_has_updatetime() {
  _has_bits_[0] |= 0x00000010u;
}
void FavObject::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000010u;
}
void FavObject::clear_updatetime() {
  updatetime_ = 0u;
  clear_has_updatetime();
}
::google::protobuf::uint32 FavObject::updatetime() const {
  // @@protoc_insertion_point(field_get:micromsg.FavObject.UpdateTime)
  return updatetime_;
}
void FavObject::set_updatetime(::google::protobuf::uint32 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FavObject.UpdateTime)
}

// required uint32 UpdateSeq = 6;
bool FavObject::has_updateseq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FavObject::set_has_updateseq() {
  _has_bits_[0] |= 0x00000020u;
}
void FavObject::clear_has_updateseq() {
  _has_bits_[0] &= ~0x00000020u;
}
void FavObject::clear_updateseq() {
  updateseq_ = 0u;
  clear_has_updateseq();
}
::google::protobuf::uint32 FavObject::updateseq() const {
  // @@protoc_insertion_point(field_get:micromsg.FavObject.UpdateSeq)
  return updateseq_;
}
void FavObject::set_updateseq(::google::protobuf::uint32 value) {
  set_has_updateseq();
  updateseq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FavObject.UpdateSeq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetFavItemRequest::kBaseRequestFieldNumber;
const int BatchGetFavItemRequest::kCountFieldNumber;
const int BatchGetFavItemRequest::kFavIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetFavItemRequest::BatchGetFavItemRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchGetFavItemRequest)
}
BatchGetFavItemRequest::BatchGetFavItemRequest(const BatchGetFavItemRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      favidlist_(from.favidlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchGetFavItemRequest)
}

void BatchGetFavItemRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(count_));
}

BatchGetFavItemRequest::~BatchGetFavItemRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BatchGetFavItemRequest)
  SharedDtor();
}

void BatchGetFavItemRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void BatchGetFavItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetFavItemRequest::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchGetFavItemRequest& BatchGetFavItemRequest::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchGetFavItemRequest* BatchGetFavItemRequest::New(::google::protobuf::Arena* arena) const {
  BatchGetFavItemRequest* n = new BatchGetFavItemRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchGetFavItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchGetFavItemRequest)
  favidlist_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchGetFavItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchGetFavItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 FavIdList = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_favidlist())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_favidlist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchGetFavItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchGetFavItemRequest)
  return false;
#undef DO_
}

void BatchGetFavItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchGetFavItemRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated uint32 FavIdList = 3 [packed = true];
  if (this->favidlist_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_favidlist_cached_byte_size_);
  }
  for (int i = 0, n = this->favidlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->favidlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchGetFavItemRequest)
}

::google::protobuf::uint8* BatchGetFavItemRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchGetFavItemRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated uint32 FavIdList = 3 [packed = true];
  if (this->favidlist_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _favidlist_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->favidlist_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchGetFavItemRequest)
  return target;
}

size_t BatchGetFavItemRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BatchGetFavItemRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t BatchGetFavItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchGetFavItemRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 FavIdList = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->favidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _favidlist_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetFavItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchGetFavItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchGetFavItemRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchGetFavItemRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchGetFavItemRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchGetFavItemRequest)
    MergeFrom(*source);
  }
}

void BatchGetFavItemRequest::MergeFrom(const BatchGetFavItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchGetFavItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  favidlist_.MergeFrom(from.favidlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchGetFavItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchGetFavItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetFavItemRequest::CopyFrom(const BatchGetFavItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchGetFavItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetFavItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void BatchGetFavItemRequest::Swap(BatchGetFavItemRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetFavItemRequest::InternalSwap(BatchGetFavItemRequest* other) {
  favidlist_.InternalSwap(&other->favidlist_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchGetFavItemRequest::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchGetFavItemRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BatchGetFavItemRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchGetFavItemRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchGetFavItemRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchGetFavItemRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BatchGetFavItemRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetFavItemRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BatchGetFavItemRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetFavItemRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BatchGetFavItemRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BatchGetFavItemRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BatchGetFavItemRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchGetFavItemRequest.BaseRequest)
}

// required uint32 Count = 2;
bool BatchGetFavItemRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchGetFavItemRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchGetFavItemRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchGetFavItemRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 BatchGetFavItemRequest::count() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetFavItemRequest.Count)
  return count_;
}
void BatchGetFavItemRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchGetFavItemRequest.Count)
}

// repeated uint32 FavIdList = 3 [packed = true];
int BatchGetFavItemRequest::favidlist_size() const {
  return favidlist_.size();
}
void BatchGetFavItemRequest::clear_favidlist() {
  favidlist_.Clear();
}
::google::protobuf::uint32 BatchGetFavItemRequest::favidlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetFavItemRequest.FavIdList)
  return favidlist_.Get(index);
}
void BatchGetFavItemRequest::set_favidlist(int index, ::google::protobuf::uint32 value) {
  favidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.BatchGetFavItemRequest.FavIdList)
}
void BatchGetFavItemRequest::add_favidlist(::google::protobuf::uint32 value) {
  favidlist_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.BatchGetFavItemRequest.FavIdList)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BatchGetFavItemRequest::favidlist() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchGetFavItemRequest.FavIdList)
  return favidlist_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BatchGetFavItemRequest::mutable_favidlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchGetFavItemRequest.FavIdList)
  return &favidlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetFavItemResponse::kBaseResponseFieldNumber;
const int BatchGetFavItemResponse::kCountFieldNumber;
const int BatchGetFavItemResponse::kObjectListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetFavItemResponse::BatchGetFavItemResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchGetFavItemResponse)
}
BatchGetFavItemResponse::BatchGetFavItemResponse(const BatchGetFavItemResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      objectlist_(from.objectlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchGetFavItemResponse)
}

void BatchGetFavItemResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(count_));
}

BatchGetFavItemResponse::~BatchGetFavItemResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BatchGetFavItemResponse)
  SharedDtor();
}

void BatchGetFavItemResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BatchGetFavItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetFavItemResponse::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchGetFavItemResponse& BatchGetFavItemResponse::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchGetFavItemResponse* BatchGetFavItemResponse::New(::google::protobuf::Arena* arena) const {
  BatchGetFavItemResponse* n = new BatchGetFavItemResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchGetFavItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchGetFavItemResponse)
  objectlist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchGetFavItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchGetFavItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.FavObject ObjectList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objectlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchGetFavItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchGetFavItemResponse)
  return false;
#undef DO_
}

void BatchGetFavItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchGetFavItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .micromsg.FavObject ObjectList = 3;
  for (unsigned int i = 0, n = this->objectlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->objectlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchGetFavItemResponse)
}

::google::protobuf::uint8* BatchGetFavItemResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchGetFavItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.FavObject ObjectList = 3;
  for (unsigned int i = 0, n = this->objectlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->objectlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchGetFavItemResponse)
  return target;
}

size_t BatchGetFavItemResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BatchGetFavItemResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t BatchGetFavItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchGetFavItemResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.FavObject ObjectList = 3;
  {
    unsigned int count = this->objectlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objectlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetFavItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchGetFavItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchGetFavItemResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchGetFavItemResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchGetFavItemResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchGetFavItemResponse)
    MergeFrom(*source);
  }
}

void BatchGetFavItemResponse::MergeFrom(const BatchGetFavItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchGetFavItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objectlist_.MergeFrom(from.objectlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchGetFavItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchGetFavItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetFavItemResponse::CopyFrom(const BatchGetFavItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchGetFavItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetFavItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->objectlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BatchGetFavItemResponse::Swap(BatchGetFavItemResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetFavItemResponse::InternalSwap(BatchGetFavItemResponse* other) {
  objectlist_.InternalSwap(&other->objectlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchGetFavItemResponse::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchGetFavItemResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BatchGetFavItemResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchGetFavItemResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchGetFavItemResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchGetFavItemResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BatchGetFavItemResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetFavItemResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BatchGetFavItemResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetFavItemResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BatchGetFavItemResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BatchGetFavItemResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BatchGetFavItemResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchGetFavItemResponse.BaseResponse)
}

// required uint32 Count = 2;
bool BatchGetFavItemResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchGetFavItemResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchGetFavItemResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchGetFavItemResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 BatchGetFavItemResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetFavItemResponse.Count)
  return count_;
}
void BatchGetFavItemResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchGetFavItemResponse.Count)
}

// repeated .micromsg.FavObject ObjectList = 3;
int BatchGetFavItemResponse::objectlist_size() const {
  return objectlist_.size();
}
void BatchGetFavItemResponse::clear_objectlist() {
  objectlist_.Clear();
}
const ::micromsg::FavObject& BatchGetFavItemResponse::objectlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetFavItemResponse.ObjectList)
  return objectlist_.Get(index);
}
::micromsg::FavObject* BatchGetFavItemResponse::mutable_objectlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetFavItemResponse.ObjectList)
  return objectlist_.Mutable(index);
}
::micromsg::FavObject* BatchGetFavItemResponse::add_objectlist() {
  // @@protoc_insertion_point(field_add:micromsg.BatchGetFavItemResponse.ObjectList)
  return objectlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::FavObject >*
BatchGetFavItemResponse::mutable_objectlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchGetFavItemResponse.ObjectList)
  return &objectlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::FavObject >&
BatchGetFavItemResponse::objectlist() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchGetFavItemResponse.ObjectList)
  return objectlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckCDN::kDataIdFieldNumber;
const int CheckCDN::kFullMd5FieldNumber;
const int CheckCDN::kHead256Md5FieldNumber;
const int CheckCDN::kFullSizeFieldNumber;
const int CheckCDN::kDataSourceTypeFieldNumber;
const int CheckCDN::kDataSourceIdFieldNumber;
const int CheckCDN::kIsThumbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckCDN::CheckCDN()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CheckCDN)
}
CheckCDN::CheckCDN(const CheckCDN& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dataid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dataid()) {
    dataid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataid_);
  }
  fullmd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fullmd5()) {
    fullmd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fullmd5_);
  }
  head256md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_head256md5()) {
    head256md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.head256md5_);
  }
  datasourceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_datasourceid()) {
    datasourceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datasourceid_);
  }
  ::memcpy(&fullsize_, &from.fullsize_,
    reinterpret_cast<char*>(&isthumb_) -
    reinterpret_cast<char*>(&fullsize_) + sizeof(isthumb_));
  // @@protoc_insertion_point(copy_constructor:micromsg.CheckCDN)
}

void CheckCDN::SharedCtor() {
  _cached_size_ = 0;
  dataid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullmd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head256md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datasourceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fullsize_, 0, reinterpret_cast<char*>(&isthumb_) -
    reinterpret_cast<char*>(&fullsize_) + sizeof(isthumb_));
}

CheckCDN::~CheckCDN() {
  // @@protoc_insertion_point(destructor:micromsg.CheckCDN)
  SharedDtor();
}

void CheckCDN::SharedDtor() {
  dataid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullmd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head256md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datasourceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CheckCDN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckCDN::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckCDN& CheckCDN::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckCDN* CheckCDN::New(::google::protobuf::Arena* arena) const {
  CheckCDN* n = new CheckCDN;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckCDN::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CheckCDN)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_dataid()) {
      GOOGLE_DCHECK(!dataid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dataid_.UnsafeRawStringPointer())->clear();
    }
    if (has_fullmd5()) {
      GOOGLE_DCHECK(!fullmd5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fullmd5_.UnsafeRawStringPointer())->clear();
    }
    if (has_head256md5()) {
      GOOGLE_DCHECK(!head256md5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*head256md5_.UnsafeRawStringPointer())->clear();
    }
    if (has_datasourceid()) {
      GOOGLE_DCHECK(!datasourceid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*datasourceid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 112u) {
    ::memset(&fullsize_, 0, reinterpret_cast<char*>(&isthumb_) -
      reinterpret_cast<char*>(&fullsize_) + sizeof(isthumb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckCDN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CheckCDN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DataId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dataid().data(), this->dataid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckCDN.DataId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FullMd5 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fullmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fullmd5().data(), this->fullmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckCDN.FullMd5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Head256Md5 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head256md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->head256md5().data(), this->head256md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckCDN.Head256Md5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 FullSize = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_fullsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fullsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DataSourceType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_datasourcetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datasourcetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DataSourceId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datasourceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->datasourceid().data(), this->datasourceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckCDN.DataSourceId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 IsThumb = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_isthumb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isthumb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CheckCDN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CheckCDN)
  return false;
#undef DO_
}

void CheckCDN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CheckCDN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string DataId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataid().data(), this->dataid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckCDN.DataId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dataid(), output);
  }

  // optional string FullMd5 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fullmd5().data(), this->fullmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckCDN.FullMd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fullmd5(), output);
  }

  // optional string Head256Md5 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->head256md5().data(), this->head256md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckCDN.Head256Md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->head256md5(), output);
  }

  // required uint32 FullSize = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fullsize(), output);
  }

  // required uint32 DataSourceType = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->datasourcetype(), output);
  }

  // optional string DataSourceId = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->datasourceid().data(), this->datasourceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckCDN.DataSourceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->datasourceid(), output);
  }

  // required uint32 IsThumb = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->isthumb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CheckCDN)
}

::google::protobuf::uint8* CheckCDN::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CheckCDN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string DataId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataid().data(), this->dataid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckCDN.DataId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dataid(), target);
  }

  // optional string FullMd5 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fullmd5().data(), this->fullmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckCDN.FullMd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fullmd5(), target);
  }

  // optional string Head256Md5 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->head256md5().data(), this->head256md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckCDN.Head256Md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->head256md5(), target);
  }

  // required uint32 FullSize = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fullsize(), target);
  }

  // required uint32 DataSourceType = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->datasourcetype(), target);
  }

  // optional string DataSourceId = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->datasourceid().data(), this->datasourceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckCDN.DataSourceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->datasourceid(), target);
  }

  // required uint32 IsThumb = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->isthumb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CheckCDN)
  return target;
}

size_t CheckCDN::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CheckCDN)
  size_t total_size = 0;

  if (has_fullsize()) {
    // required uint32 FullSize = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fullsize());
  }

  if (has_datasourcetype()) {
    // required uint32 DataSourceType = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datasourcetype());
  }

  if (has_isthumb()) {
    // required uint32 IsThumb = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isthumb());
  }

  return total_size;
}
size_t CheckCDN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CheckCDN)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000070) ^ 0x00000070) == 0) {  // All required fields are present.
    // required uint32 FullSize = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fullsize());

    // required uint32 DataSourceType = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datasourcetype());

    // required uint32 IsThumb = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isthumb());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string DataId = 1;
    if (has_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataid());
    }

    // optional string FullMd5 = 2;
    if (has_fullmd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fullmd5());
    }

    // optional string Head256Md5 = 3;
    if (has_head256md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head256md5());
    }

    // optional string DataSourceId = 6;
    if (has_datasourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datasourceid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckCDN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CheckCDN)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckCDN* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckCDN>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CheckCDN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CheckCDN)
    MergeFrom(*source);
  }
}

void CheckCDN::MergeFrom(const CheckCDN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CheckCDN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_dataid();
      dataid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fullmd5();
      fullmd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fullmd5_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_head256md5();
      head256md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.head256md5_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_datasourceid();
      datasourceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datasourceid_);
    }
    if (cached_has_bits & 0x00000010u) {
      fullsize_ = from.fullsize_;
    }
    if (cached_has_bits & 0x00000020u) {
      datasourcetype_ = from.datasourcetype_;
    }
    if (cached_has_bits & 0x00000040u) {
      isthumb_ = from.isthumb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CheckCDN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CheckCDN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckCDN::CopyFrom(const CheckCDN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CheckCDN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckCDN::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000070) != 0x00000070) return false;
  return true;
}

void CheckCDN::Swap(CheckCDN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckCDN::InternalSwap(CheckCDN* other) {
  dataid_.Swap(&other->dataid_);
  fullmd5_.Swap(&other->fullmd5_);
  head256md5_.Swap(&other->head256md5_);
  datasourceid_.Swap(&other->datasourceid_);
  std::swap(fullsize_, other->fullsize_);
  std::swap(datasourcetype_, other->datasourcetype_);
  std::swap(isthumb_, other->isthumb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckCDN::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckCDN

// optional string DataId = 1;
bool CheckCDN::has_dataid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckCDN::set_has_dataid() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckCDN::clear_has_dataid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckCDN::clear_dataid() {
  dataid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dataid();
}
const ::std::string& CheckCDN::dataid() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckCDN.DataId)
  return dataid_.GetNoArena();
}
void CheckCDN::set_dataid(const ::std::string& value) {
  set_has_dataid();
  dataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckCDN.DataId)
}
#if LANG_CXX11
void CheckCDN::set_dataid(::std::string&& value) {
  set_has_dataid();
  dataid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckCDN.DataId)
}
#endif
void CheckCDN::set_dataid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dataid();
  dataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckCDN.DataId)
}
void CheckCDN::set_dataid(const char* value, size_t size) {
  set_has_dataid();
  dataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckCDN.DataId)
}
::std::string* CheckCDN::mutable_dataid() {
  set_has_dataid();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckCDN.DataId)
  return dataid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckCDN::release_dataid() {
  // @@protoc_insertion_point(field_release:micromsg.CheckCDN.DataId)
  clear_has_dataid();
  return dataid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckCDN::set_allocated_dataid(::std::string* dataid) {
  if (dataid != NULL) {
    set_has_dataid();
  } else {
    clear_has_dataid();
  }
  dataid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckCDN.DataId)
}

// optional string FullMd5 = 2;
bool CheckCDN::has_fullmd5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckCDN::set_has_fullmd5() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckCDN::clear_has_fullmd5() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckCDN::clear_fullmd5() {
  fullmd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fullmd5();
}
const ::std::string& CheckCDN::fullmd5() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckCDN.FullMd5)
  return fullmd5_.GetNoArena();
}
void CheckCDN::set_fullmd5(const ::std::string& value) {
  set_has_fullmd5();
  fullmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckCDN.FullMd5)
}
#if LANG_CXX11
void CheckCDN::set_fullmd5(::std::string&& value) {
  set_has_fullmd5();
  fullmd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckCDN.FullMd5)
}
#endif
void CheckCDN::set_fullmd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fullmd5();
  fullmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckCDN.FullMd5)
}
void CheckCDN::set_fullmd5(const char* value, size_t size) {
  set_has_fullmd5();
  fullmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckCDN.FullMd5)
}
::std::string* CheckCDN::mutable_fullmd5() {
  set_has_fullmd5();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckCDN.FullMd5)
  return fullmd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckCDN::release_fullmd5() {
  // @@protoc_insertion_point(field_release:micromsg.CheckCDN.FullMd5)
  clear_has_fullmd5();
  return fullmd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckCDN::set_allocated_fullmd5(::std::string* fullmd5) {
  if (fullmd5 != NULL) {
    set_has_fullmd5();
  } else {
    clear_has_fullmd5();
  }
  fullmd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fullmd5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckCDN.FullMd5)
}

// optional string Head256Md5 = 3;
bool CheckCDN::has_head256md5() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CheckCDN::set_has_head256md5() {
  _has_bits_[0] |= 0x00000004u;
}
void CheckCDN::clear_has_head256md5() {
  _has_bits_[0] &= ~0x00000004u;
}
void CheckCDN::clear_head256md5() {
  head256md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_head256md5();
}
const ::std::string& CheckCDN::head256md5() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckCDN.Head256Md5)
  return head256md5_.GetNoArena();
}
void CheckCDN::set_head256md5(const ::std::string& value) {
  set_has_head256md5();
  head256md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckCDN.Head256Md5)
}
#if LANG_CXX11
void CheckCDN::set_head256md5(::std::string&& value) {
  set_has_head256md5();
  head256md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckCDN.Head256Md5)
}
#endif
void CheckCDN::set_head256md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_head256md5();
  head256md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckCDN.Head256Md5)
}
void CheckCDN::set_head256md5(const char* value, size_t size) {
  set_has_head256md5();
  head256md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckCDN.Head256Md5)
}
::std::string* CheckCDN::mutable_head256md5() {
  set_has_head256md5();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckCDN.Head256Md5)
  return head256md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckCDN::release_head256md5() {
  // @@protoc_insertion_point(field_release:micromsg.CheckCDN.Head256Md5)
  clear_has_head256md5();
  return head256md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckCDN::set_allocated_head256md5(::std::string* head256md5) {
  if (head256md5 != NULL) {
    set_has_head256md5();
  } else {
    clear_has_head256md5();
  }
  head256md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), head256md5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckCDN.Head256Md5)
}

// required uint32 FullSize = 4;
bool CheckCDN::has_fullsize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CheckCDN::set_has_fullsize() {
  _has_bits_[0] |= 0x00000010u;
}
void CheckCDN::clear_has_fullsize() {
  _has_bits_[0] &= ~0x00000010u;
}
void CheckCDN::clear_fullsize() {
  fullsize_ = 0u;
  clear_has_fullsize();
}
::google::protobuf::uint32 CheckCDN::fullsize() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckCDN.FullSize)
  return fullsize_;
}
void CheckCDN::set_fullsize(::google::protobuf::uint32 value) {
  set_has_fullsize();
  fullsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CheckCDN.FullSize)
}

// required uint32 DataSourceType = 5;
bool CheckCDN::has_datasourcetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CheckCDN::set_has_datasourcetype() {
  _has_bits_[0] |= 0x00000020u;
}
void CheckCDN::clear_has_datasourcetype() {
  _has_bits_[0] &= ~0x00000020u;
}
void CheckCDN::clear_datasourcetype() {
  datasourcetype_ = 0u;
  clear_has_datasourcetype();
}
::google::protobuf::uint32 CheckCDN::datasourcetype() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckCDN.DataSourceType)
  return datasourcetype_;
}
void CheckCDN::set_datasourcetype(::google::protobuf::uint32 value) {
  set_has_datasourcetype();
  datasourcetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CheckCDN.DataSourceType)
}

// optional string DataSourceId = 6;
bool CheckCDN::has_datasourceid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CheckCDN::set_has_datasourceid() {
  _has_bits_[0] |= 0x00000008u;
}
void CheckCDN::clear_has_datasourceid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CheckCDN::clear_datasourceid() {
  datasourceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_datasourceid();
}
const ::std::string& CheckCDN::datasourceid() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckCDN.DataSourceId)
  return datasourceid_.GetNoArena();
}
void CheckCDN::set_datasourceid(const ::std::string& value) {
  set_has_datasourceid();
  datasourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckCDN.DataSourceId)
}
#if LANG_CXX11
void CheckCDN::set_datasourceid(::std::string&& value) {
  set_has_datasourceid();
  datasourceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckCDN.DataSourceId)
}
#endif
void CheckCDN::set_datasourceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_datasourceid();
  datasourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckCDN.DataSourceId)
}
void CheckCDN::set_datasourceid(const char* value, size_t size) {
  set_has_datasourceid();
  datasourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckCDN.DataSourceId)
}
::std::string* CheckCDN::mutable_datasourceid() {
  set_has_datasourceid();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckCDN.DataSourceId)
  return datasourceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckCDN::release_datasourceid() {
  // @@protoc_insertion_point(field_release:micromsg.CheckCDN.DataSourceId)
  clear_has_datasourceid();
  return datasourceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckCDN::set_allocated_datasourceid(::std::string* datasourceid) {
  if (datasourceid != NULL) {
    set_has_datasourceid();
  } else {
    clear_has_datasourceid();
  }
  datasourceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datasourceid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckCDN.DataSourceId)
}

// required uint32 IsThumb = 7;
bool CheckCDN::has_isthumb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CheckCDN::set_has_isthumb() {
  _has_bits_[0] |= 0x00000040u;
}
void CheckCDN::clear_has_isthumb() {
  _has_bits_[0] &= ~0x00000040u;
}
void CheckCDN::clear_isthumb() {
  isthumb_ = 0u;
  clear_has_isthumb();
}
::google::protobuf::uint32 CheckCDN::isthumb() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckCDN.IsThumb)
  return isthumb_;
}
void CheckCDN::set_isthumb(::google::protobuf::uint32 value) {
  set_has_isthumb();
  isthumb_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CheckCDN.IsThumb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FavCDNItem::kDataIdFieldNumber;
const int FavCDNItem::kFullMd5FieldNumber;
const int FavCDNItem::kHead256Md5FieldNumber;
const int FavCDNItem::kFullSizeFieldNumber;
const int FavCDNItem::kCDNURLFieldNumber;
const int FavCDNItem::kAESKeyFieldNumber;
const int FavCDNItem::kEncryVerFieldNumber;
const int FavCDNItem::kVideoIdFieldNumber;
const int FavCDNItem::kStatusFieldNumber;
const int FavCDNItem::kDataStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FavCDNItem::FavCDNItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.FavCDNItem)
}
FavCDNItem::FavCDNItem(const FavCDNItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dataid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dataid()) {
    dataid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataid_);
  }
  fullmd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fullmd5()) {
    fullmd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fullmd5_);
  }
  head256md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_head256md5()) {
    head256md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.head256md5_);
  }
  cdnurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cdnurl()) {
    cdnurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdnurl_);
  }
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_aeskey()) {
    aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
  }
  videoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_videoid()) {
    videoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.videoid_);
  }
  ::memcpy(&fullsize_, &from.fullsize_,
    reinterpret_cast<char*>(&datastatus_) -
    reinterpret_cast<char*>(&fullsize_) + sizeof(datastatus_));
  // @@protoc_insertion_point(copy_constructor:micromsg.FavCDNItem)
}

void FavCDNItem::SharedCtor() {
  _cached_size_ = 0;
  dataid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullmd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head256md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdnurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fullsize_, 0, reinterpret_cast<char*>(&datastatus_) -
    reinterpret_cast<char*>(&fullsize_) + sizeof(datastatus_));
}

FavCDNItem::~FavCDNItem() {
  // @@protoc_insertion_point(destructor:micromsg.FavCDNItem)
  SharedDtor();
}

void FavCDNItem::SharedDtor() {
  dataid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullmd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head256md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdnurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FavCDNItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FavCDNItem::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FavCDNItem& FavCDNItem::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

FavCDNItem* FavCDNItem::New(::google::protobuf::Arena* arena) const {
  FavCDNItem* n = new FavCDNItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FavCDNItem::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.FavCDNItem)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_dataid()) {
      GOOGLE_DCHECK(!dataid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dataid_.UnsafeRawStringPointer())->clear();
    }
    if (has_fullmd5()) {
      GOOGLE_DCHECK(!fullmd5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fullmd5_.UnsafeRawStringPointer())->clear();
    }
    if (has_head256md5()) {
      GOOGLE_DCHECK(!head256md5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*head256md5_.UnsafeRawStringPointer())->clear();
    }
    if (has_cdnurl()) {
      GOOGLE_DCHECK(!cdnurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cdnurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_aeskey()) {
      GOOGLE_DCHECK(!aeskey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*aeskey_.UnsafeRawStringPointer())->clear();
    }
    if (has_videoid()) {
      GOOGLE_DCHECK(!videoid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*videoid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&fullsize_, 0, reinterpret_cast<char*>(&encryver_) -
      reinterpret_cast<char*>(&fullsize_) + sizeof(encryver_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&status_, 0, reinterpret_cast<char*>(&datastatus_) -
      reinterpret_cast<char*>(&status_) + sizeof(datastatus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FavCDNItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.FavCDNItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DataId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dataid().data(), this->dataid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FavCDNItem.DataId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FullMd5 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fullmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fullmd5().data(), this->fullmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FavCDNItem.FullMd5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Head256Md5 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head256md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->head256md5().data(), this->head256md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FavCDNItem.Head256Md5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 FullSize = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_fullsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fullsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CDNURL = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdnurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cdnurl().data(), this->cdnurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FavCDNItem.CDNURL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AESKey = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aeskey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aeskey().data(), this->aeskey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FavCDNItem.AESKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 EncryVer = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_encryver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encryver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VideoId = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videoid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->videoid().data(), this->videoid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FavCDNItem.VideoId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 DataStatus = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_datastatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datastatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.FavCDNItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.FavCDNItem)
  return false;
#undef DO_
}

void FavCDNItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.FavCDNItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string DataId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataid().data(), this->dataid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FavCDNItem.DataId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dataid(), output);
  }

  // optional string FullMd5 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fullmd5().data(), this->fullmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FavCDNItem.FullMd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fullmd5(), output);
  }

  // optional string Head256Md5 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->head256md5().data(), this->head256md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FavCDNItem.Head256Md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->head256md5(), output);
  }

  // required uint32 FullSize = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fullsize(), output);
  }

  // optional string CDNURL = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdnurl().data(), this->cdnurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FavCDNItem.CDNURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cdnurl(), output);
  }

  // optional string AESKey = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FavCDNItem.AESKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->aeskey(), output);
  }

  // required int32 EncryVer = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->encryver(), output);
  }

  // optional string VideoId = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->videoid().data(), this->videoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FavCDNItem.VideoId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->videoid(), output);
  }

  // required int32 Status = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->status(), output);
  }

  // required int32 DataStatus = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->datastatus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.FavCDNItem)
}

::google::protobuf::uint8* FavCDNItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.FavCDNItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string DataId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataid().data(), this->dataid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FavCDNItem.DataId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dataid(), target);
  }

  // optional string FullMd5 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fullmd5().data(), this->fullmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FavCDNItem.FullMd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fullmd5(), target);
  }

  // optional string Head256Md5 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->head256md5().data(), this->head256md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FavCDNItem.Head256Md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->head256md5(), target);
  }

  // required uint32 FullSize = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fullsize(), target);
  }

  // optional string CDNURL = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdnurl().data(), this->cdnurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FavCDNItem.CDNURL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cdnurl(), target);
  }

  // optional string AESKey = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FavCDNItem.AESKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->aeskey(), target);
  }

  // required int32 EncryVer = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->encryver(), target);
  }

  // optional string VideoId = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->videoid().data(), this->videoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FavCDNItem.VideoId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->videoid(), target);
  }

  // required int32 Status = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->status(), target);
  }

  // required int32 DataStatus = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->datastatus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.FavCDNItem)
  return target;
}

size_t FavCDNItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.FavCDNItem)
  size_t total_size = 0;

  if (has_fullsize()) {
    // required uint32 FullSize = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fullsize());
  }

  if (has_encryver()) {
    // required int32 EncryVer = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->encryver());
  }

  if (has_status()) {
    // required int32 Status = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  if (has_datastatus()) {
    // required int32 DataStatus = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datastatus());
  }

  return total_size;
}
size_t FavCDNItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.FavCDNItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003c0) ^ 0x000003c0) == 0) {  // All required fields are present.
    // required uint32 FullSize = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fullsize());

    // required int32 EncryVer = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->encryver());

    // required int32 Status = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

    // required int32 DataStatus = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datastatus());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string DataId = 1;
    if (has_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataid());
    }

    // optional string FullMd5 = 2;
    if (has_fullmd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fullmd5());
    }

    // optional string Head256Md5 = 3;
    if (has_head256md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head256md5());
    }

    // optional string CDNURL = 5;
    if (has_cdnurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cdnurl());
    }

    // optional string AESKey = 6;
    if (has_aeskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aeskey());
    }

    // optional string VideoId = 8;
    if (has_videoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->videoid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FavCDNItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.FavCDNItem)
  GOOGLE_DCHECK_NE(&from, this);
  const FavCDNItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FavCDNItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.FavCDNItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.FavCDNItem)
    MergeFrom(*source);
  }
}

void FavCDNItem::MergeFrom(const FavCDNItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.FavCDNItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_dataid();
      dataid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fullmd5();
      fullmd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fullmd5_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_head256md5();
      head256md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.head256md5_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_cdnurl();
      cdnurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdnurl_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_aeskey();
      aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_videoid();
      videoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.videoid_);
    }
    if (cached_has_bits & 0x00000040u) {
      fullsize_ = from.fullsize_;
    }
    if (cached_has_bits & 0x00000080u) {
      encryver_ = from.encryver_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000200u) {
      datastatus_ = from.datastatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FavCDNItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.FavCDNItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FavCDNItem::CopyFrom(const FavCDNItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.FavCDNItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FavCDNItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003c0) != 0x000003c0) return false;
  return true;
}

void FavCDNItem::Swap(FavCDNItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FavCDNItem::InternalSwap(FavCDNItem* other) {
  dataid_.Swap(&other->dataid_);
  fullmd5_.Swap(&other->fullmd5_);
  head256md5_.Swap(&other->head256md5_);
  cdnurl_.Swap(&other->cdnurl_);
  aeskey_.Swap(&other->aeskey_);
  videoid_.Swap(&other->videoid_);
  std::swap(fullsize_, other->fullsize_);
  std::swap(encryver_, other->encryver_);
  std::swap(status_, other->status_);
  std::swap(datastatus_, other->datastatus_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FavCDNItem::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FavCDNItem

// optional string DataId = 1;
bool FavCDNItem::has_dataid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FavCDNItem::set_has_dataid() {
  _has_bits_[0] |= 0x00000001u;
}
void FavCDNItem::clear_has_dataid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FavCDNItem::clear_dataid() {
  dataid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dataid();
}
const ::std::string& FavCDNItem::dataid() const {
  // @@protoc_insertion_point(field_get:micromsg.FavCDNItem.DataId)
  return dataid_.GetNoArena();
}
void FavCDNItem::set_dataid(const ::std::string& value) {
  set_has_dataid();
  dataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FavCDNItem.DataId)
}
#if LANG_CXX11
void FavCDNItem::set_dataid(::std::string&& value) {
  set_has_dataid();
  dataid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FavCDNItem.DataId)
}
#endif
void FavCDNItem::set_dataid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dataid();
  dataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FavCDNItem.DataId)
}
void FavCDNItem::set_dataid(const char* value, size_t size) {
  set_has_dataid();
  dataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FavCDNItem.DataId)
}
::std::string* FavCDNItem::mutable_dataid() {
  set_has_dataid();
  // @@protoc_insertion_point(field_mutable:micromsg.FavCDNItem.DataId)
  return dataid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FavCDNItem::release_dataid() {
  // @@protoc_insertion_point(field_release:micromsg.FavCDNItem.DataId)
  clear_has_dataid();
  return dataid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FavCDNItem::set_allocated_dataid(::std::string* dataid) {
  if (dataid != NULL) {
    set_has_dataid();
  } else {
    clear_has_dataid();
  }
  dataid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FavCDNItem.DataId)
}

// optional string FullMd5 = 2;
bool FavCDNItem::has_fullmd5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FavCDNItem::set_has_fullmd5() {
  _has_bits_[0] |= 0x00000002u;
}
void FavCDNItem::clear_has_fullmd5() {
  _has_bits_[0] &= ~0x00000002u;
}
void FavCDNItem::clear_fullmd5() {
  fullmd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fullmd5();
}
const ::std::string& FavCDNItem::fullmd5() const {
  // @@protoc_insertion_point(field_get:micromsg.FavCDNItem.FullMd5)
  return fullmd5_.GetNoArena();
}
void FavCDNItem::set_fullmd5(const ::std::string& value) {
  set_has_fullmd5();
  fullmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FavCDNItem.FullMd5)
}
#if LANG_CXX11
void FavCDNItem::set_fullmd5(::std::string&& value) {
  set_has_fullmd5();
  fullmd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FavCDNItem.FullMd5)
}
#endif
void FavCDNItem::set_fullmd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fullmd5();
  fullmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FavCDNItem.FullMd5)
}
void FavCDNItem::set_fullmd5(const char* value, size_t size) {
  set_has_fullmd5();
  fullmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FavCDNItem.FullMd5)
}
::std::string* FavCDNItem::mutable_fullmd5() {
  set_has_fullmd5();
  // @@protoc_insertion_point(field_mutable:micromsg.FavCDNItem.FullMd5)
  return fullmd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FavCDNItem::release_fullmd5() {
  // @@protoc_insertion_point(field_release:micromsg.FavCDNItem.FullMd5)
  clear_has_fullmd5();
  return fullmd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FavCDNItem::set_allocated_fullmd5(::std::string* fullmd5) {
  if (fullmd5 != NULL) {
    set_has_fullmd5();
  } else {
    clear_has_fullmd5();
  }
  fullmd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fullmd5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FavCDNItem.FullMd5)
}

// optional string Head256Md5 = 3;
bool FavCDNItem::has_head256md5() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FavCDNItem::set_has_head256md5() {
  _has_bits_[0] |= 0x00000004u;
}
void FavCDNItem::clear_has_head256md5() {
  _has_bits_[0] &= ~0x00000004u;
}
void FavCDNItem::clear_head256md5() {
  head256md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_head256md5();
}
const ::std::string& FavCDNItem::head256md5() const {
  // @@protoc_insertion_point(field_get:micromsg.FavCDNItem.Head256Md5)
  return head256md5_.GetNoArena();
}
void FavCDNItem::set_head256md5(const ::std::string& value) {
  set_has_head256md5();
  head256md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FavCDNItem.Head256Md5)
}
#if LANG_CXX11
void FavCDNItem::set_head256md5(::std::string&& value) {
  set_has_head256md5();
  head256md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FavCDNItem.Head256Md5)
}
#endif
void FavCDNItem::set_head256md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_head256md5();
  head256md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FavCDNItem.Head256Md5)
}
void FavCDNItem::set_head256md5(const char* value, size_t size) {
  set_has_head256md5();
  head256md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FavCDNItem.Head256Md5)
}
::std::string* FavCDNItem::mutable_head256md5() {
  set_has_head256md5();
  // @@protoc_insertion_point(field_mutable:micromsg.FavCDNItem.Head256Md5)
  return head256md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FavCDNItem::release_head256md5() {
  // @@protoc_insertion_point(field_release:micromsg.FavCDNItem.Head256Md5)
  clear_has_head256md5();
  return head256md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FavCDNItem::set_allocated_head256md5(::std::string* head256md5) {
  if (head256md5 != NULL) {
    set_has_head256md5();
  } else {
    clear_has_head256md5();
  }
  head256md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), head256md5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FavCDNItem.Head256Md5)
}

// required uint32 FullSize = 4;
bool FavCDNItem::has_fullsize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FavCDNItem::set_has_fullsize() {
  _has_bits_[0] |= 0x00000040u;
}
void FavCDNItem::clear_has_fullsize() {
  _has_bits_[0] &= ~0x00000040u;
}
void FavCDNItem::clear_fullsize() {
  fullsize_ = 0u;
  clear_has_fullsize();
}
::google::protobuf::uint32 FavCDNItem::fullsize() const {
  // @@protoc_insertion_point(field_get:micromsg.FavCDNItem.FullSize)
  return fullsize_;
}
void FavCDNItem::set_fullsize(::google::protobuf::uint32 value) {
  set_has_fullsize();
  fullsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FavCDNItem.FullSize)
}

// optional string CDNURL = 5;
bool FavCDNItem::has_cdnurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FavCDNItem::set_has_cdnurl() {
  _has_bits_[0] |= 0x00000008u;
}
void FavCDNItem::clear_has_cdnurl() {
  _has_bits_[0] &= ~0x00000008u;
}
void FavCDNItem::clear_cdnurl() {
  cdnurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdnurl();
}
const ::std::string& FavCDNItem::cdnurl() const {
  // @@protoc_insertion_point(field_get:micromsg.FavCDNItem.CDNURL)
  return cdnurl_.GetNoArena();
}
void FavCDNItem::set_cdnurl(const ::std::string& value) {
  set_has_cdnurl();
  cdnurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FavCDNItem.CDNURL)
}
#if LANG_CXX11
void FavCDNItem::set_cdnurl(::std::string&& value) {
  set_has_cdnurl();
  cdnurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FavCDNItem.CDNURL)
}
#endif
void FavCDNItem::set_cdnurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdnurl();
  cdnurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FavCDNItem.CDNURL)
}
void FavCDNItem::set_cdnurl(const char* value, size_t size) {
  set_has_cdnurl();
  cdnurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FavCDNItem.CDNURL)
}
::std::string* FavCDNItem::mutable_cdnurl() {
  set_has_cdnurl();
  // @@protoc_insertion_point(field_mutable:micromsg.FavCDNItem.CDNURL)
  return cdnurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FavCDNItem::release_cdnurl() {
  // @@protoc_insertion_point(field_release:micromsg.FavCDNItem.CDNURL)
  clear_has_cdnurl();
  return cdnurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FavCDNItem::set_allocated_cdnurl(::std::string* cdnurl) {
  if (cdnurl != NULL) {
    set_has_cdnurl();
  } else {
    clear_has_cdnurl();
  }
  cdnurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdnurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FavCDNItem.CDNURL)
}

// optional string AESKey = 6;
bool FavCDNItem::has_aeskey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FavCDNItem::set_has_aeskey() {
  _has_bits_[0] |= 0x00000010u;
}
void FavCDNItem::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000010u;
}
void FavCDNItem::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
const ::std::string& FavCDNItem::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.FavCDNItem.AESKey)
  return aeskey_.GetNoArena();
}
void FavCDNItem::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FavCDNItem.AESKey)
}
#if LANG_CXX11
void FavCDNItem::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FavCDNItem.AESKey)
}
#endif
void FavCDNItem::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FavCDNItem.AESKey)
}
void FavCDNItem::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FavCDNItem.AESKey)
}
::std::string* FavCDNItem::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.FavCDNItem.AESKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FavCDNItem::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.FavCDNItem.AESKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FavCDNItem::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FavCDNItem.AESKey)
}

// required int32 EncryVer = 7;
bool FavCDNItem::has_encryver() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FavCDNItem::set_has_encryver() {
  _has_bits_[0] |= 0x00000080u;
}
void FavCDNItem::clear_has_encryver() {
  _has_bits_[0] &= ~0x00000080u;
}
void FavCDNItem::clear_encryver() {
  encryver_ = 0;
  clear_has_encryver();
}
::google::protobuf::int32 FavCDNItem::encryver() const {
  // @@protoc_insertion_point(field_get:micromsg.FavCDNItem.EncryVer)
  return encryver_;
}
void FavCDNItem::set_encryver(::google::protobuf::int32 value) {
  set_has_encryver();
  encryver_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FavCDNItem.EncryVer)
}

// optional string VideoId = 8;
bool FavCDNItem::has_videoid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FavCDNItem::set_has_videoid() {
  _has_bits_[0] |= 0x00000020u;
}
void FavCDNItem::clear_has_videoid() {
  _has_bits_[0] &= ~0x00000020u;
}
void FavCDNItem::clear_videoid() {
  videoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_videoid();
}
const ::std::string& FavCDNItem::videoid() const {
  // @@protoc_insertion_point(field_get:micromsg.FavCDNItem.VideoId)
  return videoid_.GetNoArena();
}
void FavCDNItem::set_videoid(const ::std::string& value) {
  set_has_videoid();
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FavCDNItem.VideoId)
}
#if LANG_CXX11
void FavCDNItem::set_videoid(::std::string&& value) {
  set_has_videoid();
  videoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FavCDNItem.VideoId)
}
#endif
void FavCDNItem::set_videoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_videoid();
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FavCDNItem.VideoId)
}
void FavCDNItem::set_videoid(const char* value, size_t size) {
  set_has_videoid();
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FavCDNItem.VideoId)
}
::std::string* FavCDNItem::mutable_videoid() {
  set_has_videoid();
  // @@protoc_insertion_point(field_mutable:micromsg.FavCDNItem.VideoId)
  return videoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FavCDNItem::release_videoid() {
  // @@protoc_insertion_point(field_release:micromsg.FavCDNItem.VideoId)
  clear_has_videoid();
  return videoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FavCDNItem::set_allocated_videoid(::std::string* videoid) {
  if (videoid != NULL) {
    set_has_videoid();
  } else {
    clear_has_videoid();
  }
  videoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videoid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FavCDNItem.VideoId)
}

// required int32 Status = 9;
bool FavCDNItem::has_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FavCDNItem::set_has_status() {
  _has_bits_[0] |= 0x00000100u;
}
void FavCDNItem::clear_has_status() {
  _has_bits_[0] &= ~0x00000100u;
}
void FavCDNItem::clear_status() {
  status_ = 0;
  clear_has_status();
}
::google::protobuf::int32 FavCDNItem::status() const {
  // @@protoc_insertion_point(field_get:micromsg.FavCDNItem.Status)
  return status_;
}
void FavCDNItem::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FavCDNItem.Status)
}

// required int32 DataStatus = 10;
bool FavCDNItem::has_datastatus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FavCDNItem::set_has_datastatus() {
  _has_bits_[0] |= 0x00000200u;
}
void FavCDNItem::clear_has_datastatus() {
  _has_bits_[0] &= ~0x00000200u;
}
void FavCDNItem::clear_datastatus() {
  datastatus_ = 0;
  clear_has_datastatus();
}
::google::protobuf::int32 FavCDNItem::datastatus() const {
  // @@protoc_insertion_point(field_get:micromsg.FavCDNItem.DataStatus)
  return datastatus_;
}
void FavCDNItem::set_datastatus(::google::protobuf::int32 value) {
  set_has_datastatus();
  datastatus_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FavCDNItem.DataStatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFavInfoRequest::kBaseRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFavInfoRequest::GetFavInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetFavInfoRequest)
}
GetFavInfoRequest::GetFavInfoRequest(const GetFavInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetFavInfoRequest)
}

void GetFavInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  baserequest_ = NULL;
}

GetFavInfoRequest::~GetFavInfoRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetFavInfoRequest)
  SharedDtor();
}

void GetFavInfoRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetFavInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFavInfoRequest::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetFavInfoRequest& GetFavInfoRequest::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetFavInfoRequest* GetFavInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetFavInfoRequest* n = new GetFavInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetFavInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetFavInfoRequest)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetFavInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetFavInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetFavInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetFavInfoRequest)
  return false;
#undef DO_
}

void GetFavInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetFavInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetFavInfoRequest)
}

::google::protobuf::uint8* GetFavInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetFavInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetFavInfoRequest)
  return target;
}

size_t GetFavInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetFavInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFavInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetFavInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFavInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetFavInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetFavInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetFavInfoRequest)
    MergeFrom(*source);
  }
}

void GetFavInfoRequest::MergeFrom(const GetFavInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetFavInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baserequest()) {
    mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
  }
}

void GetFavInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetFavInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFavInfoRequest::CopyFrom(const GetFavInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetFavInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFavInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetFavInfoRequest::Swap(GetFavInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFavInfoRequest::InternalSwap(GetFavInfoRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetFavInfoRequest::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetFavInfoRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetFavInfoRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetFavInfoRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void GetFavInfoRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetFavInfoRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetFavInfoRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetFavInfoRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetFavInfoRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetFavInfoRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetFavInfoRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetFavInfoRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetFavInfoRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetFavInfoRequest.BaseRequest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFavInfoResponse::kBaseResponseFieldNumber;
const int GetFavInfoResponse::kUsedSizeFieldNumber;
const int GetFavInfoResponse::kTotalSizeFieldNumber;
const int GetFavInfoResponse::kMxFavFileSizeFieldNumber;
const int GetFavInfoResponse::kMxAutoUploadSizeFieldNumber;
const int GetFavInfoResponse::kMxAutoDownloadSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFavInfoResponse::GetFavInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetFavInfoResponse)
}
GetFavInfoResponse::GetFavInfoResponse(const GetFavInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&usedsize_, &from.usedsize_,
    reinterpret_cast<char*>(&mxautodownloadsize_) -
    reinterpret_cast<char*>(&usedsize_) + sizeof(mxautodownloadsize_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetFavInfoResponse)
}

void GetFavInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&mxautodownloadsize_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(mxautodownloadsize_));
}

GetFavInfoResponse::~GetFavInfoResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetFavInfoResponse)
  SharedDtor();
}

void GetFavInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetFavInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFavInfoResponse::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetFavInfoResponse& GetFavInfoResponse::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetFavInfoResponse* GetFavInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetFavInfoResponse* n = new GetFavInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetFavInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetFavInfoResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&usedsize_, 0, reinterpret_cast<char*>(&mxautodownloadsize_) -
      reinterpret_cast<char*>(&usedsize_) + sizeof(mxautodownloadsize_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetFavInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetFavInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 UsedSize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_usedsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &usedsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 TotalSize = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_totalsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MxFavFileSize = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_mxfavfilesize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mxfavfilesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MxAutoUploadSize = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_mxautouploadsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mxautouploadsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MxAutoDownloadSize = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_mxautodownloadsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mxautodownloadsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetFavInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetFavInfoResponse)
  return false;
#undef DO_
}

void GetFavInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetFavInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint64 UsedSize = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->usedsize(), output);
  }

  // required uint64 TotalSize = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->totalsize(), output);
  }

  // required uint32 MxFavFileSize = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mxfavfilesize(), output);
  }

  // required uint32 MxAutoUploadSize = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mxautouploadsize(), output);
  }

  // required uint32 MxAutoDownloadSize = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mxautodownloadsize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetFavInfoResponse)
}

::google::protobuf::uint8* GetFavInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetFavInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint64 UsedSize = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->usedsize(), target);
  }

  // required uint64 TotalSize = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->totalsize(), target);
  }

  // required uint32 MxFavFileSize = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mxfavfilesize(), target);
  }

  // required uint32 MxAutoUploadSize = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mxautouploadsize(), target);
  }

  // required uint32 MxAutoDownloadSize = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mxautodownloadsize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetFavInfoResponse)
  return target;
}

size_t GetFavInfoResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetFavInfoResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_usedsize()) {
    // required uint64 UsedSize = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->usedsize());
  }

  if (has_totalsize()) {
    // required uint64 TotalSize = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->totalsize());
  }

  if (has_mxfavfilesize()) {
    // required uint32 MxFavFileSize = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mxfavfilesize());
  }

  if (has_mxautouploadsize()) {
    // required uint32 MxAutoUploadSize = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mxautouploadsize());
  }

  if (has_mxautodownloadsize()) {
    // required uint32 MxAutoDownloadSize = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mxautodownloadsize());
  }

  return total_size;
}
size_t GetFavInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetFavInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint64 UsedSize = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->usedsize());

    // required uint64 TotalSize = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->totalsize());

    // required uint32 MxFavFileSize = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mxfavfilesize());

    // required uint32 MxAutoUploadSize = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mxautouploadsize());

    // required uint32 MxAutoDownloadSize = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mxautodownloadsize());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFavInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetFavInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFavInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetFavInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetFavInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetFavInfoResponse)
    MergeFrom(*source);
  }
}

void GetFavInfoResponse::MergeFrom(const GetFavInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetFavInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      usedsize_ = from.usedsize_;
    }
    if (cached_has_bits & 0x00000004u) {
      totalsize_ = from.totalsize_;
    }
    if (cached_has_bits & 0x00000008u) {
      mxfavfilesize_ = from.mxfavfilesize_;
    }
    if (cached_has_bits & 0x00000010u) {
      mxautouploadsize_ = from.mxautouploadsize_;
    }
    if (cached_has_bits & 0x00000020u) {
      mxautodownloadsize_ = from.mxautodownloadsize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetFavInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetFavInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFavInfoResponse::CopyFrom(const GetFavInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetFavInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFavInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetFavInfoResponse::Swap(GetFavInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFavInfoResponse::InternalSwap(GetFavInfoResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(usedsize_, other->usedsize_);
  std::swap(totalsize_, other->totalsize_);
  std::swap(mxfavfilesize_, other->mxfavfilesize_);
  std::swap(mxautouploadsize_, other->mxautouploadsize_);
  std::swap(mxautodownloadsize_, other->mxautodownloadsize_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetFavInfoResponse::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetFavInfoResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetFavInfoResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetFavInfoResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetFavInfoResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetFavInfoResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetFavInfoResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetFavInfoResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetFavInfoResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetFavInfoResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetFavInfoResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetFavInfoResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetFavInfoResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetFavInfoResponse.BaseResponse)
}

// required uint64 UsedSize = 2;
bool GetFavInfoResponse::has_usedsize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetFavInfoResponse::set_has_usedsize() {
  _has_bits_[0] |= 0x00000002u;
}
void GetFavInfoResponse::clear_has_usedsize() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetFavInfoResponse::clear_usedsize() {
  usedsize_ = GOOGLE_ULONGLONG(0);
  clear_has_usedsize();
}
::google::protobuf::uint64 GetFavInfoResponse::usedsize() const {
  // @@protoc_insertion_point(field_get:micromsg.GetFavInfoResponse.UsedSize)
  return usedsize_;
}
void GetFavInfoResponse::set_usedsize(::google::protobuf::uint64 value) {
  set_has_usedsize();
  usedsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetFavInfoResponse.UsedSize)
}

// required uint64 TotalSize = 3;
bool GetFavInfoResponse::has_totalsize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetFavInfoResponse::set_has_totalsize() {
  _has_bits_[0] |= 0x00000004u;
}
void GetFavInfoResponse::clear_has_totalsize() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetFavInfoResponse::clear_totalsize() {
  totalsize_ = GOOGLE_ULONGLONG(0);
  clear_has_totalsize();
}
::google::protobuf::uint64 GetFavInfoResponse::totalsize() const {
  // @@protoc_insertion_point(field_get:micromsg.GetFavInfoResponse.TotalSize)
  return totalsize_;
}
void GetFavInfoResponse::set_totalsize(::google::protobuf::uint64 value) {
  set_has_totalsize();
  totalsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetFavInfoResponse.TotalSize)
}

// required uint32 MxFavFileSize = 4;
bool GetFavInfoResponse::has_mxfavfilesize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetFavInfoResponse::set_has_mxfavfilesize() {
  _has_bits_[0] |= 0x00000008u;
}
void GetFavInfoResponse::clear_has_mxfavfilesize() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetFavInfoResponse::clear_mxfavfilesize() {
  mxfavfilesize_ = 0u;
  clear_has_mxfavfilesize();
}
::google::protobuf::uint32 GetFavInfoResponse::mxfavfilesize() const {
  // @@protoc_insertion_point(field_get:micromsg.GetFavInfoResponse.MxFavFileSize)
  return mxfavfilesize_;
}
void GetFavInfoResponse::set_mxfavfilesize(::google::protobuf::uint32 value) {
  set_has_mxfavfilesize();
  mxfavfilesize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetFavInfoResponse.MxFavFileSize)
}

// required uint32 MxAutoUploadSize = 5;
bool GetFavInfoResponse::has_mxautouploadsize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetFavInfoResponse::set_has_mxautouploadsize() {
  _has_bits_[0] |= 0x00000010u;
}
void GetFavInfoResponse::clear_has_mxautouploadsize() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetFavInfoResponse::clear_mxautouploadsize() {
  mxautouploadsize_ = 0u;
  clear_has_mxautouploadsize();
}
::google::protobuf::uint32 GetFavInfoResponse::mxautouploadsize() const {
  // @@protoc_insertion_point(field_get:micromsg.GetFavInfoResponse.MxAutoUploadSize)
  return mxautouploadsize_;
}
void GetFavInfoResponse::set_mxautouploadsize(::google::protobuf::uint32 value) {
  set_has_mxautouploadsize();
  mxautouploadsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetFavInfoResponse.MxAutoUploadSize)
}

// required uint32 MxAutoDownloadSize = 6;
bool GetFavInfoResponse::has_mxautodownloadsize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetFavInfoResponse::set_has_mxautodownloadsize() {
  _has_bits_[0] |= 0x00000020u;
}
void GetFavInfoResponse::clear_has_mxautodownloadsize() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetFavInfoResponse::clear_mxautodownloadsize() {
  mxautodownloadsize_ = 0u;
  clear_has_mxautodownloadsize();
}
::google::protobuf::uint32 GetFavInfoResponse::mxautodownloadsize() const {
  // @@protoc_insertion_point(field_get:micromsg.GetFavInfoResponse.MxAutoDownloadSize)
  return mxautodownloadsize_;
}
void GetFavInfoResponse::set_mxautodownloadsize(::google::protobuf::uint32 value) {
  set_has_mxautodownloadsize();
  mxautodownloadsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetFavInfoResponse.MxAutoDownloadSize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckCDNRequest::kBaseRequestFieldNumber;
const int CheckCDNRequest::kCountFieldNumber;
const int CheckCDNRequest::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckCDNRequest::CheckCDNRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CheckCDNRequest)
}
CheckCDNRequest::CheckCDNRequest(const CheckCDNRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.CheckCDNRequest)
}

void CheckCDNRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(count_));
}

CheckCDNRequest::~CheckCDNRequest() {
  // @@protoc_insertion_point(destructor:micromsg.CheckCDNRequest)
  SharedDtor();
}

void CheckCDNRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void CheckCDNRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckCDNRequest::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckCDNRequest& CheckCDNRequest::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckCDNRequest* CheckCDNRequest::New(::google::protobuf::Arena* arena) const {
  CheckCDNRequest* n = new CheckCDNRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckCDNRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CheckCDNRequest)
  list_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckCDNRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CheckCDNRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.CheckCDN List = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CheckCDNRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CheckCDNRequest)
  return false;
#undef DO_
}

void CheckCDNRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CheckCDNRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .micromsg.CheckCDN List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CheckCDNRequest)
}

::google::protobuf::uint8* CheckCDNRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CheckCDNRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.CheckCDN List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CheckCDNRequest)
  return target;
}

size_t CheckCDNRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CheckCDNRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t CheckCDNRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CheckCDNRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.CheckCDN List = 3;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckCDNRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CheckCDNRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckCDNRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckCDNRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CheckCDNRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CheckCDNRequest)
    MergeFrom(*source);
  }
}

void CheckCDNRequest::MergeFrom(const CheckCDNRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CheckCDNRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CheckCDNRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CheckCDNRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckCDNRequest::CopyFrom(const CheckCDNRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CheckCDNRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckCDNRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void CheckCDNRequest::Swap(CheckCDNRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckCDNRequest::InternalSwap(CheckCDNRequest* other) {
  list_.InternalSwap(&other->list_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckCDNRequest::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckCDNRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool CheckCDNRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckCDNRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckCDNRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckCDNRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& CheckCDNRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckCDNRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* CheckCDNRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CheckCDNRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* CheckCDNRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.CheckCDNRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void CheckCDNRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckCDNRequest.BaseRequest)
}

// required uint32 Count = 2;
bool CheckCDNRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckCDNRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckCDNRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckCDNRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 CheckCDNRequest::count() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckCDNRequest.Count)
  return count_;
}
void CheckCDNRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CheckCDNRequest.Count)
}

// repeated .micromsg.CheckCDN List = 3;
int CheckCDNRequest::list_size() const {
  return list_.size();
}
void CheckCDNRequest::clear_list() {
  list_.Clear();
}
const ::micromsg::CheckCDN& CheckCDNRequest::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.CheckCDNRequest.List)
  return list_.Get(index);
}
::micromsg::CheckCDN* CheckCDNRequest::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.CheckCDNRequest.List)
  return list_.Mutable(index);
}
::micromsg::CheckCDN* CheckCDNRequest::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.CheckCDNRequest.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::CheckCDN >*
CheckCDNRequest::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.CheckCDNRequest.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::CheckCDN >&
CheckCDNRequest::list() const {
  // @@protoc_insertion_point(field_list:micromsg.CheckCDNRequest.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckCDNResponse::kBaseResponseFieldNumber;
const int CheckCDNResponse::kCountFieldNumber;
const int CheckCDNResponse::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckCDNResponse::CheckCDNResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CheckCDNResponse)
}
CheckCDNResponse::CheckCDNResponse(const CheckCDNResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.CheckCDNResponse)
}

void CheckCDNResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(count_));
}

CheckCDNResponse::~CheckCDNResponse() {
  // @@protoc_insertion_point(destructor:micromsg.CheckCDNResponse)
  SharedDtor();
}

void CheckCDNResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void CheckCDNResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckCDNResponse::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckCDNResponse& CheckCDNResponse::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckCDNResponse* CheckCDNResponse::New(::google::protobuf::Arena* arena) const {
  CheckCDNResponse* n = new CheckCDNResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckCDNResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CheckCDNResponse)
  list_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckCDNResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CheckCDNResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.FavCDNItem List = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CheckCDNResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CheckCDNResponse)
  return false;
#undef DO_
}

void CheckCDNResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CheckCDNResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .micromsg.FavCDNItem List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CheckCDNResponse)
}

::google::protobuf::uint8* CheckCDNResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CheckCDNResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.FavCDNItem List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CheckCDNResponse)
  return target;
}

size_t CheckCDNResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CheckCDNResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t CheckCDNResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CheckCDNResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.FavCDNItem List = 3;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckCDNResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CheckCDNResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckCDNResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckCDNResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CheckCDNResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CheckCDNResponse)
    MergeFrom(*source);
  }
}

void CheckCDNResponse::MergeFrom(const CheckCDNResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CheckCDNResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CheckCDNResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CheckCDNResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckCDNResponse::CopyFrom(const CheckCDNResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CheckCDNResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckCDNResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void CheckCDNResponse::Swap(CheckCDNResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckCDNResponse::InternalSwap(CheckCDNResponse* other) {
  list_.InternalSwap(&other->list_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckCDNResponse::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckCDNResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool CheckCDNResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckCDNResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckCDNResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckCDNResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& CheckCDNResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckCDNResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* CheckCDNResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CheckCDNResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* CheckCDNResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.CheckCDNResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void CheckCDNResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckCDNResponse.BaseResponse)
}

// required uint32 Count = 2;
bool CheckCDNResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckCDNResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckCDNResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckCDNResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 CheckCDNResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckCDNResponse.Count)
  return count_;
}
void CheckCDNResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CheckCDNResponse.Count)
}

// repeated .micromsg.FavCDNItem List = 3;
int CheckCDNResponse::list_size() const {
  return list_.size();
}
void CheckCDNResponse::clear_list() {
  list_.Clear();
}
const ::micromsg::FavCDNItem& CheckCDNResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.CheckCDNResponse.List)
  return list_.Get(index);
}
::micromsg::FavCDNItem* CheckCDNResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.CheckCDNResponse.List)
  return list_.Mutable(index);
}
::micromsg::FavCDNItem* CheckCDNResponse::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.CheckCDNResponse.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::FavCDNItem >*
CheckCDNResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.CheckCDNResponse.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::FavCDNItem >&
CheckCDNResponse::list() const {
  // @@protoc_insertion_point(field_list:micromsg.CheckCDNResponse.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FavSyncRequest::kSelectorFieldNumber;
const int FavSyncRequest::kKeyBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FavSyncRequest::FavSyncRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.FavSyncRequest)
}
FavSyncRequest::FavSyncRequest(const FavSyncRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_keybuf()) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.keybuf_);
  } else {
    keybuf_ = NULL;
  }
  selector_ = from.selector_;
  // @@protoc_insertion_point(copy_constructor:micromsg.FavSyncRequest)
}

void FavSyncRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&keybuf_, 0, reinterpret_cast<char*>(&selector_) -
    reinterpret_cast<char*>(&keybuf_) + sizeof(selector_));
}

FavSyncRequest::~FavSyncRequest() {
  // @@protoc_insertion_point(destructor:micromsg.FavSyncRequest)
  SharedDtor();
}

void FavSyncRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete keybuf_;
  }
}

void FavSyncRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FavSyncRequest::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FavSyncRequest& FavSyncRequest::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

FavSyncRequest* FavSyncRequest::New(::google::protobuf::Arena* arena) const {
  FavSyncRequest* n = new FavSyncRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FavSyncRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.FavSyncRequest)
  if (has_keybuf()) {
    GOOGLE_DCHECK(keybuf_ != NULL);
    keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  }
  selector_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FavSyncRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.FavSyncRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Selector = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_selector();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selector_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keybuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.FavSyncRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.FavSyncRequest)
  return false;
#undef DO_
}

void FavSyncRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.FavSyncRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Selector = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->selector(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->keybuf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.FavSyncRequest)
}

::google::protobuf::uint8* FavSyncRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.FavSyncRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Selector = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->selector(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->keybuf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.FavSyncRequest)
  return target;
}

size_t FavSyncRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.FavSyncRequest)
  size_t total_size = 0;

  if (has_keybuf()) {
    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);
  }

  if (has_selector()) {
    // required uint32 Selector = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selector());
  }

  return total_size;
}
size_t FavSyncRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.FavSyncRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);

    // required uint32 Selector = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selector());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FavSyncRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.FavSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FavSyncRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FavSyncRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.FavSyncRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.FavSyncRequest)
    MergeFrom(*source);
  }
}

void FavSyncRequest::MergeFrom(const FavSyncRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.FavSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_keybuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.keybuf());
    }
    if (cached_has_bits & 0x00000002u) {
      selector_ = from.selector_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FavSyncRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.FavSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FavSyncRequest::CopyFrom(const FavSyncRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.FavSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FavSyncRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_keybuf()) {
    if (!this->keybuf_->IsInitialized()) return false;
  }
  return true;
}

void FavSyncRequest::Swap(FavSyncRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FavSyncRequest::InternalSwap(FavSyncRequest* other) {
  std::swap(keybuf_, other->keybuf_);
  std::swap(selector_, other->selector_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FavSyncRequest::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FavSyncRequest

// required uint32 Selector = 1;
bool FavSyncRequest::has_selector() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FavSyncRequest::set_has_selector() {
  _has_bits_[0] |= 0x00000002u;
}
void FavSyncRequest::clear_has_selector() {
  _has_bits_[0] &= ~0x00000002u;
}
void FavSyncRequest::clear_selector() {
  selector_ = 0u;
  clear_has_selector();
}
::google::protobuf::uint32 FavSyncRequest::selector() const {
  // @@protoc_insertion_point(field_get:micromsg.FavSyncRequest.Selector)
  return selector_;
}
void FavSyncRequest::set_selector(::google::protobuf::uint32 value) {
  set_has_selector();
  selector_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FavSyncRequest.Selector)
}

// required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
bool FavSyncRequest::has_keybuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FavSyncRequest::set_has_keybuf() {
  _has_bits_[0] |= 0x00000001u;
}
void FavSyncRequest::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000001u;
}
void FavSyncRequest::clear_keybuf() {
  if (keybuf_ != NULL) keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_keybuf();
}
const ::micromsg::SKBuiltinBuffer_t& FavSyncRequest::keybuf() const {
  // @@protoc_insertion_point(field_get:micromsg.FavSyncRequest.KeyBuf)
  return keybuf_ != NULL ? *keybuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* FavSyncRequest::mutable_keybuf() {
  set_has_keybuf();
  if (keybuf_ == NULL) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.FavSyncRequest.KeyBuf)
  return keybuf_;
}
::micromsg::SKBuiltinBuffer_t* FavSyncRequest::release_keybuf() {
  // @@protoc_insertion_point(field_release:micromsg.FavSyncRequest.KeyBuf)
  clear_has_keybuf();
  ::micromsg::SKBuiltinBuffer_t* temp = keybuf_;
  keybuf_ = NULL;
  return temp;
}
void FavSyncRequest::set_allocated_keybuf(::micromsg::SKBuiltinBuffer_t* keybuf) {
  delete keybuf_;
  keybuf_ = keybuf;
  if (keybuf) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.FavSyncRequest.KeyBuf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FavSyncResponse::kRetFieldNumber;
const int FavSyncResponse::kCmdListFieldNumber;
const int FavSyncResponse::kKeyBufFieldNumber;
const int FavSyncResponse::kContinueFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FavSyncResponse::FavSyncResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.FavSyncResponse)
}
FavSyncResponse::FavSyncResponse(const FavSyncResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cmdlist()) {
    cmdlist_ = new ::micromsg::CmdList(*from.cmdlist_);
  } else {
    cmdlist_ = NULL;
  }
  if (from.has_keybuf()) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.keybuf_);
  } else {
    keybuf_ = NULL;
  }
  ::memcpy(&ret_, &from.ret_,
    reinterpret_cast<char*>(&continueflag_) -
    reinterpret_cast<char*>(&ret_) + sizeof(continueflag_));
  // @@protoc_insertion_point(copy_constructor:micromsg.FavSyncResponse)
}

void FavSyncResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cmdlist_, 0, reinterpret_cast<char*>(&continueflag_) -
    reinterpret_cast<char*>(&cmdlist_) + sizeof(continueflag_));
}

FavSyncResponse::~FavSyncResponse() {
  // @@protoc_insertion_point(destructor:micromsg.FavSyncResponse)
  SharedDtor();
}

void FavSyncResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete cmdlist_;
  }
  if (this != internal_default_instance()) {
    delete keybuf_;
  }
}

void FavSyncResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FavSyncResponse::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FavSyncResponse& FavSyncResponse::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

FavSyncResponse* FavSyncResponse::New(::google::protobuf::Arena* arena) const {
  FavSyncResponse* n = new FavSyncResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FavSyncResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.FavSyncResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_cmdlist()) {
      GOOGLE_DCHECK(cmdlist_ != NULL);
      cmdlist_->::micromsg::CmdList::Clear();
    }
    if (has_keybuf()) {
      GOOGLE_DCHECK(keybuf_ != NULL);
      keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&ret_, 0, reinterpret_cast<char*>(&continueflag_) -
      reinterpret_cast<char*>(&ret_) + sizeof(continueflag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FavSyncResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.FavSyncResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.CmdList CmdList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmdlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keybuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ContinueFlag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_continueflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &continueflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.FavSyncResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.FavSyncResponse)
  return false;
#undef DO_
}

void FavSyncResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.FavSyncResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required .micromsg.CmdList CmdList = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cmdlist_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->keybuf_, output);
  }

  // required uint32 ContinueFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->continueflag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.FavSyncResponse)
}

::google::protobuf::uint8* FavSyncResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.FavSyncResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required .micromsg.CmdList CmdList = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cmdlist_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->keybuf_, deterministic, target);
  }

  // required uint32 ContinueFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->continueflag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.FavSyncResponse)
  return target;
}

size_t FavSyncResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.FavSyncResponse)
  size_t total_size = 0;

  if (has_cmdlist()) {
    // required .micromsg.CmdList CmdList = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmdlist_);
  }

  if (has_keybuf()) {
    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);
  }

  if (has_ret()) {
    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_continueflag()) {
    // required uint32 ContinueFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->continueflag());
  }

  return total_size;
}
size_t FavSyncResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.FavSyncResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .micromsg.CmdList CmdList = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmdlist_);

    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);

    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required uint32 ContinueFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->continueflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FavSyncResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.FavSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FavSyncResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FavSyncResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.FavSyncResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.FavSyncResponse)
    MergeFrom(*source);
  }
}

void FavSyncResponse::MergeFrom(const FavSyncResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.FavSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cmdlist()->::micromsg::CmdList::MergeFrom(from.cmdlist());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_keybuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.keybuf());
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000008u) {
      continueflag_ = from.continueflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FavSyncResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.FavSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FavSyncResponse::CopyFrom(const FavSyncResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.FavSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FavSyncResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_cmdlist()) {
    if (!this->cmdlist_->IsInitialized()) return false;
  }
  if (has_keybuf()) {
    if (!this->keybuf_->IsInitialized()) return false;
  }
  return true;
}

void FavSyncResponse::Swap(FavSyncResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FavSyncResponse::InternalSwap(FavSyncResponse* other) {
  std::swap(cmdlist_, other->cmdlist_);
  std::swap(keybuf_, other->keybuf_);
  std::swap(ret_, other->ret_);
  std::swap(continueflag_, other->continueflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FavSyncResponse::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FavSyncResponse

// required int32 Ret = 1;
bool FavSyncResponse::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FavSyncResponse::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
void FavSyncResponse::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
void FavSyncResponse::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::google::protobuf::int32 FavSyncResponse::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.FavSyncResponse.Ret)
  return ret_;
}
void FavSyncResponse::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FavSyncResponse.Ret)
}

// required .micromsg.CmdList CmdList = 2;
bool FavSyncResponse::has_cmdlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FavSyncResponse::set_has_cmdlist() {
  _has_bits_[0] |= 0x00000001u;
}
void FavSyncResponse::clear_has_cmdlist() {
  _has_bits_[0] &= ~0x00000001u;
}
void FavSyncResponse::clear_cmdlist() {
  if (cmdlist_ != NULL) cmdlist_->::micromsg::CmdList::Clear();
  clear_has_cmdlist();
}
const ::micromsg::CmdList& FavSyncResponse::cmdlist() const {
  // @@protoc_insertion_point(field_get:micromsg.FavSyncResponse.CmdList)
  return cmdlist_ != NULL ? *cmdlist_
                         : *::micromsg::CmdList::internal_default_instance();
}
::micromsg::CmdList* FavSyncResponse::mutable_cmdlist() {
  set_has_cmdlist();
  if (cmdlist_ == NULL) {
    cmdlist_ = new ::micromsg::CmdList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.FavSyncResponse.CmdList)
  return cmdlist_;
}
::micromsg::CmdList* FavSyncResponse::release_cmdlist() {
  // @@protoc_insertion_point(field_release:micromsg.FavSyncResponse.CmdList)
  clear_has_cmdlist();
  ::micromsg::CmdList* temp = cmdlist_;
  cmdlist_ = NULL;
  return temp;
}
void FavSyncResponse::set_allocated_cmdlist(::micromsg::CmdList* cmdlist) {
  delete cmdlist_;
  cmdlist_ = cmdlist;
  if (cmdlist) {
    set_has_cmdlist();
  } else {
    clear_has_cmdlist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.FavSyncResponse.CmdList)
}

// required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
bool FavSyncResponse::has_keybuf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FavSyncResponse::set_has_keybuf() {
  _has_bits_[0] |= 0x00000002u;
}
void FavSyncResponse::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000002u;
}
void FavSyncResponse::clear_keybuf() {
  if (keybuf_ != NULL) keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_keybuf();
}
const ::micromsg::SKBuiltinBuffer_t& FavSyncResponse::keybuf() const {
  // @@protoc_insertion_point(field_get:micromsg.FavSyncResponse.KeyBuf)
  return keybuf_ != NULL ? *keybuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* FavSyncResponse::mutable_keybuf() {
  set_has_keybuf();
  if (keybuf_ == NULL) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.FavSyncResponse.KeyBuf)
  return keybuf_;
}
::micromsg::SKBuiltinBuffer_t* FavSyncResponse::release_keybuf() {
  // @@protoc_insertion_point(field_release:micromsg.FavSyncResponse.KeyBuf)
  clear_has_keybuf();
  ::micromsg::SKBuiltinBuffer_t* temp = keybuf_;
  keybuf_ = NULL;
  return temp;
}
void FavSyncResponse::set_allocated_keybuf(::micromsg::SKBuiltinBuffer_t* keybuf) {
  delete keybuf_;
  keybuf_ = keybuf;
  if (keybuf) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.FavSyncResponse.KeyBuf)
}

// required uint32 ContinueFlag = 4;
bool FavSyncResponse::has_continueflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FavSyncResponse::set_has_continueflag() {
  _has_bits_[0] |= 0x00000008u;
}
void FavSyncResponse::clear_has_continueflag() {
  _has_bits_[0] &= ~0x00000008u;
}
void FavSyncResponse::clear_continueflag() {
  continueflag_ = 0u;
  clear_has_continueflag();
}
::google::protobuf::uint32 FavSyncResponse::continueflag() const {
  // @@protoc_insertion_point(field_get:micromsg.FavSyncResponse.ContinueFlag)
  return continueflag_;
}
void FavSyncResponse::set_continueflag(::google::protobuf::uint32 value) {
  set_has_continueflag();
  continueflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FavSyncResponse.ContinueFlag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransCDNItem::kClientIdFieldNumber;
const int TransCDNItem::kFileIdFieldNumber;
const int TransCDNItem::kAesKeyFieldNumber;
const int TransCDNItem::kFavDataTypeFieldNumber;
const int TransCDNItem::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransCDNItem::TransCDNItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.TransCDNItem)
}
TransCDNItem::TransCDNItem(const TransCDNItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fileid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fileid()) {
    fileid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fileid_);
  }
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_aeskey()) {
    aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
  }
  ::memcpy(&clientid_, &from.clientid_,
    reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&clientid_) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:micromsg.TransCDNItem)
}

void TransCDNItem::SharedCtor() {
  _cached_size_ = 0;
  fileid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clientid_, 0, reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&clientid_) + sizeof(size_));
}

TransCDNItem::~TransCDNItem() {
  // @@protoc_insertion_point(destructor:micromsg.TransCDNItem)
  SharedDtor();
}

void TransCDNItem::SharedDtor() {
  fileid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aeskey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransCDNItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransCDNItem::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransCDNItem& TransCDNItem::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransCDNItem* TransCDNItem::New(::google::protobuf::Arena* arena) const {
  TransCDNItem* n = new TransCDNItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransCDNItem::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.TransCDNItem)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_fileid()) {
      GOOGLE_DCHECK(!fileid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fileid_.UnsafeRawStringPointer())->clear();
    }
    if (has_aeskey()) {
      GOOGLE_DCHECK(!aeskey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*aeskey_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&clientid_, 0, reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&clientid_) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransCDNItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.TransCDNItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ClientId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_clientid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FileId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fileid().data(), this->fileid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.TransCDNItem.FileId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AesKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aeskey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aeskey().data(), this->aeskey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.TransCDNItem.AesKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 FavDataType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_favdatatype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favdatatype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 Size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.TransCDNItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.TransCDNItem)
  return false;
#undef DO_
}

void TransCDNItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.TransCDNItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ClientId = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clientid(), output);
  }

  // optional string FileId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.TransCDNItem.FileId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fileid(), output);
  }

  // optional string AesKey = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.TransCDNItem.AesKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->aeskey(), output);
  }

  // required uint32 FavDataType = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->favdatatype(), output);
  }

  // required uint64 Size = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.TransCDNItem)
}

::google::protobuf::uint8* TransCDNItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.TransCDNItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ClientId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clientid(), target);
  }

  // optional string FileId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.TransCDNItem.FileId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fileid(), target);
  }

  // optional string AesKey = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aeskey().data(), this->aeskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.TransCDNItem.AesKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->aeskey(), target);
  }

  // required uint32 FavDataType = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->favdatatype(), target);
  }

  // required uint64 Size = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.TransCDNItem)
  return target;
}

size_t TransCDNItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.TransCDNItem)
  size_t total_size = 0;

  if (has_clientid()) {
    // required uint32 ClientId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientid());
  }

  if (has_favdatatype()) {
    // required uint32 FavDataType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->favdatatype());
  }

  if (has_size()) {
    // required uint64 Size = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  return total_size;
}
size_t TransCDNItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.TransCDNItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required uint32 ClientId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientid());

    // required uint32 FavDataType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->favdatatype());

    // required uint64 Size = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string FileId = 2;
    if (has_fileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fileid());
    }

    // optional string AesKey = 3;
    if (has_aeskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aeskey());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransCDNItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.TransCDNItem)
  GOOGLE_DCHECK_NE(&from, this);
  const TransCDNItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransCDNItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.TransCDNItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.TransCDNItem)
    MergeFrom(*source);
  }
}

void TransCDNItem::MergeFrom(const TransCDNItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.TransCDNItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fileid();
      fileid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fileid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_aeskey();
      aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
    }
    if (cached_has_bits & 0x00000004u) {
      clientid_ = from.clientid_;
    }
    if (cached_has_bits & 0x00000008u) {
      favdatatype_ = from.favdatatype_;
    }
    if (cached_has_bits & 0x00000010u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransCDNItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.TransCDNItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransCDNItem::CopyFrom(const TransCDNItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.TransCDNItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransCDNItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  return true;
}

void TransCDNItem::Swap(TransCDNItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransCDNItem::InternalSwap(TransCDNItem* other) {
  fileid_.Swap(&other->fileid_);
  aeskey_.Swap(&other->aeskey_);
  std::swap(clientid_, other->clientid_);
  std::swap(favdatatype_, other->favdatatype_);
  std::swap(size_, other->size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransCDNItem::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransCDNItem

// required uint32 ClientId = 1;
bool TransCDNItem::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransCDNItem::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
void TransCDNItem::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransCDNItem::clear_clientid() {
  clientid_ = 0u;
  clear_has_clientid();
}
::google::protobuf::uint32 TransCDNItem::clientid() const {
  // @@protoc_insertion_point(field_get:micromsg.TransCDNItem.ClientId)
  return clientid_;
}
void TransCDNItem::set_clientid(::google::protobuf::uint32 value) {
  set_has_clientid();
  clientid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TransCDNItem.ClientId)
}

// optional string FileId = 2;
bool TransCDNItem::has_fileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransCDNItem::set_has_fileid() {
  _has_bits_[0] |= 0x00000001u;
}
void TransCDNItem::clear_has_fileid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransCDNItem::clear_fileid() {
  fileid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fileid();
}
const ::std::string& TransCDNItem::fileid() const {
  // @@protoc_insertion_point(field_get:micromsg.TransCDNItem.FileId)
  return fileid_.GetNoArena();
}
void TransCDNItem::set_fileid(const ::std::string& value) {
  set_has_fileid();
  fileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.TransCDNItem.FileId)
}
#if LANG_CXX11
void TransCDNItem::set_fileid(::std::string&& value) {
  set_has_fileid();
  fileid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.TransCDNItem.FileId)
}
#endif
void TransCDNItem::set_fileid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fileid();
  fileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.TransCDNItem.FileId)
}
void TransCDNItem::set_fileid(const char* value, size_t size) {
  set_has_fileid();
  fileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.TransCDNItem.FileId)
}
::std::string* TransCDNItem::mutable_fileid() {
  set_has_fileid();
  // @@protoc_insertion_point(field_mutable:micromsg.TransCDNItem.FileId)
  return fileid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransCDNItem::release_fileid() {
  // @@protoc_insertion_point(field_release:micromsg.TransCDNItem.FileId)
  clear_has_fileid();
  return fileid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransCDNItem::set_allocated_fileid(::std::string* fileid) {
  if (fileid != NULL) {
    set_has_fileid();
  } else {
    clear_has_fileid();
  }
  fileid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fileid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.TransCDNItem.FileId)
}

// optional string AesKey = 3;
bool TransCDNItem::has_aeskey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransCDNItem::set_has_aeskey() {
  _has_bits_[0] |= 0x00000002u;
}
void TransCDNItem::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransCDNItem::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
const ::std::string& TransCDNItem::aeskey() const {
  // @@protoc_insertion_point(field_get:micromsg.TransCDNItem.AesKey)
  return aeskey_.GetNoArena();
}
void TransCDNItem::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.TransCDNItem.AesKey)
}
#if LANG_CXX11
void TransCDNItem::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.TransCDNItem.AesKey)
}
#endif
void TransCDNItem::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.TransCDNItem.AesKey)
}
void TransCDNItem::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.TransCDNItem.AesKey)
}
::std::string* TransCDNItem::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:micromsg.TransCDNItem.AesKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransCDNItem::release_aeskey() {
  // @@protoc_insertion_point(field_release:micromsg.TransCDNItem.AesKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransCDNItem::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.TransCDNItem.AesKey)
}

// required uint32 FavDataType = 4;
bool TransCDNItem::has_favdatatype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransCDNItem::set_has_favdatatype() {
  _has_bits_[0] |= 0x00000008u;
}
void TransCDNItem::clear_has_favdatatype() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransCDNItem::clear_favdatatype() {
  favdatatype_ = 0u;
  clear_has_favdatatype();
}
::google::protobuf::uint32 TransCDNItem::favdatatype() const {
  // @@protoc_insertion_point(field_get:micromsg.TransCDNItem.FavDataType)
  return favdatatype_;
}
void TransCDNItem::set_favdatatype(::google::protobuf::uint32 value) {
  set_has_favdatatype();
  favdatatype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TransCDNItem.FavDataType)
}

// required uint64 Size = 5;
bool TransCDNItem::has_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TransCDNItem::set_has_size() {
  _has_bits_[0] |= 0x00000010u;
}
void TransCDNItem::clear_has_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void TransCDNItem::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
::google::protobuf::uint64 TransCDNItem::size() const {
  // @@protoc_insertion_point(field_get:micromsg.TransCDNItem.Size)
  return size_;
}
void TransCDNItem::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TransCDNItem.Size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchTransCDNRequest::kBaseRequestFieldNumber;
const int BatchTransCDNRequest::kCountFieldNumber;
const int BatchTransCDNRequest::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchTransCDNRequest::BatchTransCDNRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchTransCDNRequest)
}
BatchTransCDNRequest::BatchTransCDNRequest(const BatchTransCDNRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchTransCDNRequest)
}

void BatchTransCDNRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(count_));
}

BatchTransCDNRequest::~BatchTransCDNRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BatchTransCDNRequest)
  SharedDtor();
}

void BatchTransCDNRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void BatchTransCDNRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchTransCDNRequest::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchTransCDNRequest& BatchTransCDNRequest::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchTransCDNRequest* BatchTransCDNRequest::New(::google::protobuf::Arena* arena) const {
  BatchTransCDNRequest* n = new BatchTransCDNRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchTransCDNRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchTransCDNRequest)
  list_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchTransCDNRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchTransCDNRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.TransCDNItem List = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchTransCDNRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchTransCDNRequest)
  return false;
#undef DO_
}

void BatchTransCDNRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchTransCDNRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .micromsg.TransCDNItem List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchTransCDNRequest)
}

::google::protobuf::uint8* BatchTransCDNRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchTransCDNRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.TransCDNItem List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchTransCDNRequest)
  return target;
}

size_t BatchTransCDNRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BatchTransCDNRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t BatchTransCDNRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchTransCDNRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.TransCDNItem List = 3;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchTransCDNRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchTransCDNRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchTransCDNRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchTransCDNRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchTransCDNRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchTransCDNRequest)
    MergeFrom(*source);
  }
}

void BatchTransCDNRequest::MergeFrom(const BatchTransCDNRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchTransCDNRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchTransCDNRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchTransCDNRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchTransCDNRequest::CopyFrom(const BatchTransCDNRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchTransCDNRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchTransCDNRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void BatchTransCDNRequest::Swap(BatchTransCDNRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchTransCDNRequest::InternalSwap(BatchTransCDNRequest* other) {
  list_.InternalSwap(&other->list_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchTransCDNRequest::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchTransCDNRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BatchTransCDNRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchTransCDNRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchTransCDNRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchTransCDNRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BatchTransCDNRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchTransCDNRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BatchTransCDNRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchTransCDNRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BatchTransCDNRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BatchTransCDNRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BatchTransCDNRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchTransCDNRequest.BaseRequest)
}

// required uint32 Count = 2;
bool BatchTransCDNRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchTransCDNRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchTransCDNRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchTransCDNRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 BatchTransCDNRequest::count() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchTransCDNRequest.Count)
  return count_;
}
void BatchTransCDNRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchTransCDNRequest.Count)
}

// repeated .micromsg.TransCDNItem List = 3;
int BatchTransCDNRequest::list_size() const {
  return list_.size();
}
void BatchTransCDNRequest::clear_list() {
  list_.Clear();
}
const ::micromsg::TransCDNItem& BatchTransCDNRequest::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchTransCDNRequest.List)
  return list_.Get(index);
}
::micromsg::TransCDNItem* BatchTransCDNRequest::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchTransCDNRequest.List)
  return list_.Mutable(index);
}
::micromsg::TransCDNItem* BatchTransCDNRequest::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.BatchTransCDNRequest.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::TransCDNItem >*
BatchTransCDNRequest::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchTransCDNRequest.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::TransCDNItem >&
BatchTransCDNRequest::list() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchTransCDNRequest.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchTransCDNResponse::kBaseResponseFieldNumber;
const int BatchTransCDNResponse::kCountFieldNumber;
const int BatchTransCDNResponse::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchTransCDNResponse::BatchTransCDNResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmfav_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchTransCDNResponse)
}
BatchTransCDNResponse::BatchTransCDNResponse(const BatchTransCDNResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchTransCDNResponse)
}

void BatchTransCDNResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(count_));
}

BatchTransCDNResponse::~BatchTransCDNResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BatchTransCDNResponse)
  SharedDtor();
}

void BatchTransCDNResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BatchTransCDNResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchTransCDNResponse::descriptor() {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchTransCDNResponse& BatchTransCDNResponse::default_instance() {
  protobuf_mmfav_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchTransCDNResponse* BatchTransCDNResponse::New(::google::protobuf::Arena* arena) const {
  BatchTransCDNResponse* n = new BatchTransCDNResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchTransCDNResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchTransCDNResponse)
  list_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchTransCDNResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchTransCDNResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.TransCDNItem List = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchTransCDNResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchTransCDNResponse)
  return false;
#undef DO_
}

void BatchTransCDNResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchTransCDNResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .micromsg.TransCDNItem List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchTransCDNResponse)
}

::google::protobuf::uint8* BatchTransCDNResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchTransCDNResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.TransCDNItem List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchTransCDNResponse)
  return target;
}

size_t BatchTransCDNResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BatchTransCDNResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t BatchTransCDNResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchTransCDNResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.TransCDNItem List = 3;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchTransCDNResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchTransCDNResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchTransCDNResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchTransCDNResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchTransCDNResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchTransCDNResponse)
    MergeFrom(*source);
  }
}

void BatchTransCDNResponse::MergeFrom(const BatchTransCDNResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchTransCDNResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchTransCDNResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchTransCDNResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchTransCDNResponse::CopyFrom(const BatchTransCDNResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchTransCDNResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchTransCDNResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BatchTransCDNResponse::Swap(BatchTransCDNResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchTransCDNResponse::InternalSwap(BatchTransCDNResponse* other) {
  list_.InternalSwap(&other->list_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchTransCDNResponse::GetMetadata() const {
  protobuf_mmfav_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmfav_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchTransCDNResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BatchTransCDNResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchTransCDNResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchTransCDNResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchTransCDNResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BatchTransCDNResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchTransCDNResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BatchTransCDNResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchTransCDNResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BatchTransCDNResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BatchTransCDNResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BatchTransCDNResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchTransCDNResponse.BaseResponse)
}

// required uint32 Count = 2;
bool BatchTransCDNResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchTransCDNResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchTransCDNResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchTransCDNResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 BatchTransCDNResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchTransCDNResponse.Count)
  return count_;
}
void BatchTransCDNResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchTransCDNResponse.Count)
}

// repeated .micromsg.TransCDNItem List = 3;
int BatchTransCDNResponse::list_size() const {
  return list_.size();
}
void BatchTransCDNResponse::clear_list() {
  list_.Clear();
}
const ::micromsg::TransCDNItem& BatchTransCDNResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchTransCDNResponse.List)
  return list_.Get(index);
}
::micromsg::TransCDNItem* BatchTransCDNResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchTransCDNResponse.List)
  return list_.Mutable(index);
}
::micromsg::TransCDNItem* BatchTransCDNResponse::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.BatchTransCDNResponse.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::TransCDNItem >*
BatchTransCDNResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchTransCDNResponse.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::TransCDNItem >&
BatchTransCDNResponse::list() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchTransCDNResponse.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg

// @@protoc_insertion_point(global_scope)
