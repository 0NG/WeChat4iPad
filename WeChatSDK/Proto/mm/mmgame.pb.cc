// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmgame.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mmgame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micromsg {
class EnemyGameInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EnemyGameInfo> {
} _EnemyGameInfo_default_instance_;
class EnemyGameKilledDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EnemyGameKilled> {
} _EnemyGameKilled_default_instance_;
class UserGameInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserGameInfo> {
} _UserGameInfo_default_instance_;
class UserGameAchieveInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserGameAchieveInfo> {
} _UserGameAchieveInfo_default_instance_;
class UserGameWishInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserGameWishInfo> {
} _UserGameWishInfo_default_instance_;
class GamePropsInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GamePropsInfo> {
} _GamePropsInfo_default_instance_;
class GameUserPropsInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameUserPropsInfo> {
} _GameUserPropsInfo_default_instance_;
class GameAnnouncementInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameAnnouncementInfo> {
} _GameAnnouncementInfo_default_instance_;
class GameConsumePropsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameConsumeProps> {
} _GameConsumeProps_default_instance_;
class GameInitReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameInitReq> {
} _GameInitReq_default_instance_;
class GameInitRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameInitResp> {
} _GameInitResp_default_instance_;
class GameEndReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEndReq> {
} _GameEndReq_default_instance_;
class GameEndRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameEndResp> {
} _GameEndResp_default_instance_;
class GameRankListReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameRankListReq> {
} _GameRankListReq_default_instance_;
class GameRankListRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameRankListResp> {
} _GameRankListResp_default_instance_;
class GameStartReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameStartReq> {
} _GameStartReq_default_instance_;
class GameStartRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameStartResp> {
} _GameStartResp_default_instance_;
class GameCheckReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameCheckReq> {
} _GameCheckReq_default_instance_;
class GameCheckRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameCheckResp> {
} _GameCheckResp_default_instance_;
class GameWishReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameWishReq> {
} _GameWishReq_default_instance_;
class GameWishRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameWishResp> {
} _GameWishResp_default_instance_;
class GameGiftReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameGiftReq> {
} _GameGiftReq_default_instance_;
class GameGiftRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameGiftResp> {
} _GameGiftResp_default_instance_;
class GameFriendListReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameFriendListReq> {
} _GameFriendListReq_default_instance_;
class GameFriendListRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameFriendListResp> {
} _GameFriendListResp_default_instance_;
class GameWishListReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameWishListReq> {
} _GameWishListReq_default_instance_;
class GameWishListRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameWishListResp> {
} _GameWishListResp_default_instance_;
class GameShareReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameShareReq> {
} _GameShareReq_default_instance_;
class GameShareRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameShareResp> {
} _GameShareResp_default_instance_;
class GameResourceReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameResourceReq> {
} _GameResourceReq_default_instance_;
class GameResourceRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameResourceResp> {
} _GameResourceResp_default_instance_;
class GameConsumeReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameConsumeReq> {
} _GameConsumeReq_default_instance_;
class GameConsumeRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameConsumeResp> {
} _GameConsumeResp_default_instance_;
class AddGameMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddGameMsg> {
} _AddGameMsg_default_instance_;
class GameSyncRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameSyncRequest> {
} _GameSyncRequest_default_instance_;
class GameSyncResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameSyncResponse> {
} _GameSyncResponse_default_instance_;
class GameMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameMsg> {
} _GameMsg_default_instance_;
class BatchGetGameMsgRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchGetGameMsgRequest> {
} _BatchGetGameMsgRequest_default_instance_;
class BatchGetGameMsgResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchGetGameMsgResponse> {
} _BatchGetGameMsgResponse_default_instance_;
class BatchDelGameMsgRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchDelGameMsgRequest> {
} _BatchDelGameMsgRequest_default_instance_;
class DelGameMsgRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelGameMsgRsp> {
} _DelGameMsgRsp_default_instance_;
class BatchDelGameMsgResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchDelGameMsgResponse> {
} _BatchDelGameMsgResponse_default_instance_;

namespace protobuf_mmgame_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[42];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyGameInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyGameInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyGameInfo, score_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyGameKilled, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyGameKilled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyGameKilled, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyGameKilled, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyGameKilled, generalcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyGameKilled, usedcount_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, headimageurl_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameAchieveInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameAchieveInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameAchieveInfo, userinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameAchieveInfo, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameAchieveInfo, rank_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameWishInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameWishInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameWishInfo, userinfo_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePropsInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePropsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePropsInfo, propsid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePropsInfo, iconurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePropsInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePropsInfo, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePropsInfo, type_),
  3,
  0,
  1,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserPropsInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserPropsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserPropsInfo, propsid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserPropsInfo, count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAnnouncementInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAnnouncementInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAnnouncementInfo, style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAnnouncementInfo, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAnnouncementInfo, desc_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConsumeProps, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConsumeProps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConsumeProps, propsid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConsumeProps, consumecount_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitReq, appid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, lifenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, gamenumerconfig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, checklefttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, friendcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, friendlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, wishcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, wishlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, gamepropscount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, gamepropslist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, gameannouncementcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, gameannouncementlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, propsviewtip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, rankviewtip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, gamecoincount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, productidcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, productidlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, buyengineoilwording_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, oilprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitResp, oilcurrency_),
  7,
  8,
  0,
  9,
  1,
  10,
  ~0u,
  11,
  ~0u,
  12,
  ~0u,
  13,
  ~0u,
  2,
  3,
  14,
  15,
  ~0u,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndReq, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndReq, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndReq, enemykilled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndReq, localscore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndReq, consumetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndReq, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndReq, deadcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndReq, gameconsumepropscount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndReq, gameconsumepropslist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndReq, gamestarttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndReq, gameendtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndReq, shieldnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndReq, totalshots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndReq, gamecoincount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndReq, clientuserevivenum_),
  2,
  0,
  3,
  ~0u,
  4,
  5,
  1,
  6,
  7,
  ~0u,
  8,
  9,
  10,
  11,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndResp, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndResp, achievement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndResp, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndResp, lifenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndResp, checklefttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndResp, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndResp, ranklist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndResp, propsviewtip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndResp, rankviewtip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndResp, gamecoincount_),
  3,
  4,
  0,
  5,
  6,
  7,
  8,
  ~0u,
  1,
  2,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRankListReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRankListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRankListReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRankListReq, appid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRankListResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRankListResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRankListResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRankListResp, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRankListResp, ranklist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartReq, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartReq, locallifenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartReq, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartReq, needclearwishlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartReq, gameconsumepropscount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartReq, gameconsumepropslist_),
  2,
  0,
  3,
  1,
  4,
  5,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartResp, lifenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartResp, checklefttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartResp, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartResp, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartResp, ranklist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartResp, gamepropscount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartResp, gamepropslist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartResp, gamecoincount_),
  1,
  2,
  3,
  0,
  4,
  ~0u,
  5,
  ~0u,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCheckReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCheckReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCheckReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCheckReq, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCheckReq, locallifenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCheckReq, token_),
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCheckResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCheckResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCheckResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCheckResp, checklefttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCheckResp, lifenum_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWishReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWishReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWishReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWishReq, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWishReq, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWishReq, usernamelist_),
  1,
  0,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWishResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWishResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWishResp, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameGiftReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameGiftReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameGiftReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameGiftReq, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameGiftReq, locallifenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameGiftReq, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameGiftReq, usernamelist_),
  1,
  0,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameGiftResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameGiftResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameGiftResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameGiftResp, lifenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameGiftResp, checklefttime_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFriendListReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFriendListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFriendListReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFriendListReq, appid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFriendListResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFriendListResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFriendListResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFriendListResp, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFriendListResp, friendlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWishListReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWishListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWishListReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWishListReq, appid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWishListResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWishListResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWishListResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWishListResp, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWishListResp, wishlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameShareReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameShareReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameShareReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameShareReq, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameShareReq, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameShareReq, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameShareReq, achieve_),
  2,
  0,
  3,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameShareResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameShareResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameShareResp, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResourceReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResourceReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResourceReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResourceReq, propscount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResourceReq, propsidlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResourceResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResourceResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResourceResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResourceResp, propscount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResourceResp, propslist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConsumeReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConsumeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConsumeReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConsumeReq, appid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConsumeResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConsumeResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConsumeResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConsumeResp, consumeok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConsumeResp, gamecoincount_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGameMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGameMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGameMsg, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGameMsg, fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGameMsg, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGameMsg, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGameMsg, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGameMsg, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGameMsg, updatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGameMsg, updateseq_),
  2,
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSyncRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSyncRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSyncRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSyncRequest, selector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSyncRequest, keybuf_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSyncResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSyncResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSyncResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSyncResponse, cmdlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSyncResponse, keybuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSyncResponse, continueflag_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMsg, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMsg, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMsg, object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMsg, updatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMsg, updateseq_),
  1,
  2,
  0,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetGameMsgRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetGameMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetGameMsgRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetGameMsgRequest, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetGameMsgRequest, msgidlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetGameMsgResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetGameMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetGameMsgResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetGameMsgResponse, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetGameMsgResponse, msglist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelGameMsgRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelGameMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelGameMsgRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelGameMsgRequest, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelGameMsgRequest, msgidlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelGameMsgRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelGameMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelGameMsgRsp, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelGameMsgRsp, msgid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelGameMsgResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelGameMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelGameMsgResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelGameMsgResponse, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelGameMsgResponse, list_),
  0,
  1,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(EnemyGameInfo)},
  { 9, 18, sizeof(EnemyGameKilled)},
  { 22, 30, sizeof(UserGameInfo)},
  { 33, 41, sizeof(UserGameAchieveInfo)},
  { 44, 50, sizeof(UserGameWishInfo)},
  { 51, 61, sizeof(GamePropsInfo)},
  { 66, 73, sizeof(GameUserPropsInfo)},
  { 75, 83, sizeof(GameAnnouncementInfo)},
  { 86, 93, sizeof(GameConsumeProps)},
  { 95, 102, sizeof(GameInitReq)},
  { 104, 130, sizeof(GameInitResp)},
  { 151, 172, sizeof(GameEndReq)},
  { 188, 204, sizeof(GameEndResp)},
  { 215, 222, sizeof(GameRankListReq)},
  { 224, 232, sizeof(GameRankListResp)},
  { 235, 247, sizeof(GameStartReq)},
  { 254, 268, sizeof(GameStartResp)},
  { 277, 286, sizeof(GameCheckReq)},
  { 290, 298, sizeof(GameCheckResp)},
  { 301, 310, sizeof(GameWishReq)},
  { 314, 320, sizeof(GameWishResp)},
  { 321, 331, sizeof(GameGiftReq)},
  { 336, 344, sizeof(GameGiftResp)},
  { 347, 354, sizeof(GameFriendListReq)},
  { 356, 364, sizeof(GameFriendListResp)},
  { 367, 374, sizeof(GameWishListReq)},
  { 376, 384, sizeof(GameWishListResp)},
  { 387, 397, sizeof(GameShareReq)},
  { 402, 408, sizeof(GameShareResp)},
  { 409, 417, sizeof(GameResourceReq)},
  { 420, 428, sizeof(GameResourceResp)},
  { 431, 438, sizeof(GameConsumeReq)},
  { 440, 448, sizeof(GameConsumeResp)},
  { 451, 464, sizeof(AddGameMsg)},
  { 472, 480, sizeof(GameSyncRequest)},
  { 483, 492, sizeof(GameSyncResponse)},
  { 496, 506, sizeof(GameMsg)},
  { 511, 519, sizeof(BatchGetGameMsgRequest)},
  { 522, 530, sizeof(BatchGetGameMsgResponse)},
  { 533, 541, sizeof(BatchDelGameMsgRequest)},
  { 544, 551, sizeof(DelGameMsgRsp)},
  { 553, 561, sizeof(BatchDelGameMsgResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_EnemyGameInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EnemyGameKilled_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserGameInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserGameAchieveInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserGameWishInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GamePropsInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameUserPropsInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameAnnouncementInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameConsumeProps_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameInitReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameInitResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEndReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameEndResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameRankListReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameRankListResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameStartReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameStartResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameCheckReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameCheckResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameWishReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameWishResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameGiftReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameGiftResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameFriendListReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameFriendListResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameWishListReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameWishListResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameShareReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameShareResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameResourceReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameResourceResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameConsumeReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameConsumeResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddGameMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameSyncRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameSyncResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchGetGameMsgRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchGetGameMsgResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchDelGameMsgRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelGameMsgRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchDelGameMsgResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mmgame.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 42);
}

}  // namespace

void TableStruct::Shutdown() {
  _EnemyGameInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _EnemyGameKilled_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _UserGameInfo_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _UserGameAchieveInfo_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _UserGameWishInfo_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _GamePropsInfo_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _GameUserPropsInfo_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _GameAnnouncementInfo_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _GameConsumeProps_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _GameInitReq_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _GameInitResp_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _GameEndReq_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _GameEndResp_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _GameRankListReq_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _GameRankListResp_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _GameStartReq_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _GameStartResp_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _GameCheckReq_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _GameCheckResp_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _GameWishReq_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _GameWishResp_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _GameGiftReq_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _GameGiftResp_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _GameFriendListReq_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _GameFriendListResp_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _GameWishListReq_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _GameWishListResp_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _GameShareReq_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _GameShareResp_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _GameResourceReq_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _GameResourceResp_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _GameConsumeReq_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _GameConsumeResp_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _AddGameMsg_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _GameSyncRequest_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _GameSyncResponse_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _GameMsg_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _BatchGetGameMsgRequest_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _BatchGetGameMsgResponse_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _BatchDelGameMsgRequest_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _DelGameMsgRsp_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _BatchDelGameMsgResponse_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::micromsg::protobuf_mmbuiltintype_2eproto::InitDefaults();
  ::micromsg::protobuf_mmbase_2eproto::InitDefaults();
  _EnemyGameInfo_default_instance_.DefaultConstruct();
  _EnemyGameKilled_default_instance_.DefaultConstruct();
  _UserGameInfo_default_instance_.DefaultConstruct();
  _UserGameAchieveInfo_default_instance_.DefaultConstruct();
  _UserGameWishInfo_default_instance_.DefaultConstruct();
  _GamePropsInfo_default_instance_.DefaultConstruct();
  _GameUserPropsInfo_default_instance_.DefaultConstruct();
  _GameAnnouncementInfo_default_instance_.DefaultConstruct();
  _GameConsumeProps_default_instance_.DefaultConstruct();
  _GameInitReq_default_instance_.DefaultConstruct();
  _GameInitResp_default_instance_.DefaultConstruct();
  _GameEndReq_default_instance_.DefaultConstruct();
  _GameEndResp_default_instance_.DefaultConstruct();
  _GameRankListReq_default_instance_.DefaultConstruct();
  _GameRankListResp_default_instance_.DefaultConstruct();
  _GameStartReq_default_instance_.DefaultConstruct();
  _GameStartResp_default_instance_.DefaultConstruct();
  _GameCheckReq_default_instance_.DefaultConstruct();
  _GameCheckResp_default_instance_.DefaultConstruct();
  _GameWishReq_default_instance_.DefaultConstruct();
  _GameWishResp_default_instance_.DefaultConstruct();
  _GameGiftReq_default_instance_.DefaultConstruct();
  _GameGiftResp_default_instance_.DefaultConstruct();
  _GameFriendListReq_default_instance_.DefaultConstruct();
  _GameFriendListResp_default_instance_.DefaultConstruct();
  _GameWishListReq_default_instance_.DefaultConstruct();
  _GameWishListResp_default_instance_.DefaultConstruct();
  _GameShareReq_default_instance_.DefaultConstruct();
  _GameShareResp_default_instance_.DefaultConstruct();
  _GameResourceReq_default_instance_.DefaultConstruct();
  _GameResourceResp_default_instance_.DefaultConstruct();
  _GameConsumeReq_default_instance_.DefaultConstruct();
  _GameConsumeResp_default_instance_.DefaultConstruct();
  _AddGameMsg_default_instance_.DefaultConstruct();
  _GameSyncRequest_default_instance_.DefaultConstruct();
  _GameSyncResponse_default_instance_.DefaultConstruct();
  _GameMsg_default_instance_.DefaultConstruct();
  _BatchGetGameMsgRequest_default_instance_.DefaultConstruct();
  _BatchGetGameMsgResponse_default_instance_.DefaultConstruct();
  _BatchDelGameMsgRequest_default_instance_.DefaultConstruct();
  _DelGameMsgRsp_default_instance_.DefaultConstruct();
  _BatchDelGameMsgResponse_default_instance_.DefaultConstruct();
  _UserGameAchieveInfo_default_instance_.get_mutable()->userinfo_ = const_cast< ::micromsg::UserGameInfo*>(
      ::micromsg::UserGameInfo::internal_default_instance());
  _UserGameWishInfo_default_instance_.get_mutable()->userinfo_ = const_cast< ::micromsg::UserGameInfo*>(
      ::micromsg::UserGameInfo::internal_default_instance());
  _GameInitReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GameInitResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GameEndReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GameEndResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GameRankListReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GameRankListResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GameStartReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GameStartResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GameCheckReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GameCheckResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GameWishReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GameWishResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GameGiftReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GameGiftResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GameFriendListReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GameFriendListResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GameWishListReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GameWishListResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GameShareReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GameShareResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GameResourceReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GameResourceResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GameConsumeReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GameConsumeResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GameSyncRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GameSyncRequest_default_instance_.get_mutable()->keybuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GameSyncResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GameSyncResponse_default_instance_.get_mutable()->cmdlist_ = const_cast< ::micromsg::CmdList*>(
      ::micromsg::CmdList::internal_default_instance());
  _GameSyncResponse_default_instance_.get_mutable()->keybuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BatchGetGameMsgRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _BatchGetGameMsgResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _BatchDelGameMsgRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _BatchDelGameMsgResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014mmgame.proto\022\010micromsg\032\023mmbuiltintype."
      "proto\032\014mmbase.proto\",\n\rEnemyGameInfo\022\014\n\004"
      "Type\030\001 \002(\r\022\r\n\005Score\030\002 \002(\r\"W\n\017EnemyGameKi"
      "lled\022\014\n\004Type\030\001 \002(\r\022\r\n\005Count\030\002 \002(\r\022\024\n\014Gen"
      "eralCount\030\003 \001(\r\022\021\n\tUsedCount\030\004 \001(\r\"H\n\014Us"
      "erGameInfo\022\020\n\010UserName\030\001 \001(\t\022\020\n\010NickName"
      "\030\002 \001(\t\022\024\n\014HeadImageUrl\030\003 \001(\t\"\\\n\023UserGame"
      "AchieveInfo\022(\n\010UserInfo\030\001 \002(\0132\026.micromsg"
      ".UserGameInfo\022\r\n\005Score\030\002 \002(\r\022\014\n\004Rank\030\003 \002"
      "(\r\"<\n\020UserGameWishInfo\022(\n\010UserInfo\030\001 \002(\013"
      "2\026.micromsg.UserGameInfo\"[\n\rGamePropsInf"
      "o\022\017\n\007PropsId\030\001 \002(\r\022\017\n\007IconUrl\030\002 \001(\t\022\014\n\004N"
      "ame\030\003 \001(\t\022\014\n\004Desc\030\004 \001(\t\022\014\n\004Type\030\005 \002(\r\"3\n"
      "\021GameUserPropsInfo\022\017\n\007PropsId\030\001 \002(\r\022\r\n\005C"
      "ount\030\002 \002(\r\"B\n\024GameAnnouncementInfo\022\r\n\005St"
      "yle\030\001 \002(\r\022\r\n\005Title\030\002 \001(\t\022\014\n\004Desc\030\003 \001(\t\"9"
      "\n\020GameConsumeProps\022\017\n\007PropsId\030\001 \002(\r\022\024\n\014C"
      "onsumeCount\030\002 \002(\005\"H\n\013GameInitReq\022*\n\013Base"
      "Request\030\001 \002(\0132\025.micromsg.BaseRequest\022\r\n\005"
      "AppID\030\002 \001(\t\"\211\005\n\014GameInitResp\022,\n\014BaseResp"
      "onse\030\001 \002(\0132\026.micromsg.BaseResponse\022\017\n\007Li"
      "feNum\030\002 \002(\r\022\027\n\017GameNumerConfig\030\003 \001(\t\022\025\n\r"
      "CheckLeftTime\030\004 \002(\r\022\r\n\005Token\030\005 \001(\t\022\023\n\013Fr"
      "iendCount\030\006 \002(\005\022*\n\nFriendList\030\007 \003(\0132\026.mi"
      "cromsg.UserGameInfo\022\021\n\tWishCount\030\010 \002(\005\022,"
      "\n\010WishList\030\t \003(\0132\032.micromsg.UserGameWish"
      "Info\022\026\n\016GamePropsCount\030\n \001(\005\0222\n\rGameProp"
      "sList\030\013 \003(\0132\033.micromsg.GameUserPropsInfo"
      "\022\035\n\025GameAnnouncementCount\030\014 \001(\005\022<\n\024GameA"
      "nnouncementList\030\r \003(\0132\036.micromsg.GameAnn"
      "ouncementInfo\022\024\n\014PropsViewTip\030\016 \001(\t\022\023\n\013R"
      "ankViewTip\030\017 \001(\t\022\025\n\rGameCoinCount\030\020 \001(\r\022"
      "\026\n\016ProductIdCount\030\021 \001(\r\0222\n\rProductIdList"
      "\030\022 \003(\0132\033.micromsg.SKBuiltinString_t\022\033\n\023B"
      "uyEngineOilWording\030\023 \001(\t\022\020\n\010OilPrice\030\024 \001"
      "(\t\022\023\n\013OilCurrency\030\025 \001(\t\"\260\003\n\nGameEndReq\022*"
      "\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseReque"
      "st\022\r\n\005AppID\030\002 \001(\t\022\r\n\005Count\030\003 \002(\005\022.\n\013Enem"
      "yKilled\030\004 \003(\0132\031.micromsg.EnemyGameKilled"
      "\022\022\n\nLocalScore\030\005 \002(\r\022\023\n\013ConsumeTime\030\006 \002("
      "\r\022\r\n\005Token\030\007 \001(\t\022\021\n\tDeadCount\030\010 \001(\r\022\035\n\025G"
      "ameConsumePropsCount\030\t \001(\005\0228\n\024GameConsum"
      "ePropsList\030\n \003(\0132\032.micromsg.GameConsumeP"
      "rops\022\025\n\rGameStartTime\030\013 \001(\r\022\023\n\013GameEndTi"
      "me\030\014 \001(\r\022\021\n\tShieldNum\030\r \001(\r\022\022\n\nTotalShot"
      "s\030\016 \001(\r\022\025\n\rGameCoinCount\030\017 \001(\r\022\032\n\022Client"
      "UseReviveNum\030\020 \001(\r\"\227\002\n\013GameEndResp\022,\n\014Ba"
      "seResponse\030\001 \002(\0132\026.micromsg.BaseResponse"
      "\022\r\n\005Score\030\002 \002(\r\022\023\n\013Achievement\030\003 \001(\t\022\014\n\004"
      "Rank\030\004 \002(\r\022\017\n\007LifeNum\030\005 \002(\r\022\025\n\rCheckLeft"
      "Time\030\006 \002(\r\022\r\n\005Count\030\007 \002(\005\022/\n\010RankList\030\010 "
      "\003(\0132\035.micromsg.UserGameAchieveInfo\022\024\n\014Pr"
      "opsViewTip\030\013 \001(\t\022\023\n\013RankViewTip\030\014 \001(\t\022\025\n"
      "\rGameCoinCount\030\r \001(\r\"L\n\017GameRankListReq\022"
      "*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseRequ"
      "est\022\r\n\005AppID\030\002 \001(\t\"\200\001\n\020GameRankListResp\022"
      ",\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseRes"
      "ponse\022\r\n\005Count\030\002 \002(\005\022/\n\010RankList\030\003 \003(\0132\035"
      ".micromsg.UserGameAchieveInfo\"\342\001\n\014GameSt"
      "artReq\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.B"
      "aseRequest\022\r\n\005AppID\030\002 \001(\t\022\024\n\014LocalLifeNu"
      "m\030\003 \002(\r\022\r\n\005Token\030\004 \001(\t\022\031\n\021NeedClearWishL"
      "ist\030\005 \002(\r\022\035\n\025GameConsumePropsCount\030\006 \001(\005"
      "\0228\n\024GameConsumePropsList\030\007 \003(\0132\032.microms"
      "g.GameConsumeProps\"\227\002\n\rGameStartResp\022,\n\014"
      "BaseResponse\030\001 \002(\0132\026.micromsg.BaseRespon"
      "se\022\017\n\007LifeNum\030\002 \002(\r\022\025\n\rCheckLeftTime\030\003 \002"
      "(\r\022\r\n\005Token\030\004 \001(\t\022\r\n\005Count\030\005 \002(\005\022/\n\010Rank"
      "List\030\006 \003(\0132\035.micromsg.UserGameAchieveInf"
      "o\022\026\n\016GamePropsCount\030\007 \001(\005\0222\n\rGamePropsLi"
      "st\030\010 \003(\0132\033.micromsg.GameUserPropsInfo\022\025\n"
      "\rGameCoinCount\030\t \001(\r\"n\n\014GameCheckReq\022*\n\013"
      "BaseRequest\030\001 \002(\0132\025.micromsg.BaseRequest"
      "\022\r\n\005AppID\030\002 \001(\t\022\024\n\014LocalLifeNum\030\003 \002(\r\022\r\n"
      "\005Token\030\004 \001(\t\"e\n\rGameCheckResp\022,\n\014BaseRes"
      "ponse\030\001 \002(\0132\026.micromsg.BaseResponse\022\025\n\rC"
      "heckLeftTime\030\002 \002(\r\022\017\n\007LifeNum\030\003 \002(\r\"\212\001\n\013"
      "GameWishReq\022*\n\013BaseRequest\030\001 \002(\0132\025.micro"
      "msg.BaseRequest\022\r\n\005AppID\030\002 \001(\t\022\r\n\005Count\030"
      "\003 \002(\005\0221\n\014UserNameList\030\004 \003(\0132\033.micromsg.S"
      "KBuiltinString_t\"<\n\014GameWishResp\022,\n\014Base"
      "Response\030\001 \002(\0132\026.micromsg.BaseResponse\"\240"
      "\001\n\013GameGiftReq\022*\n\013BaseRequest\030\001 \002(\0132\025.mi"
      "cromsg.BaseRequest\022\r\n\005AppID\030\002 \001(\t\022\024\n\014Loc"
      "alLifeNum\030\003 \002(\r\022\r\n\005Count\030\004 \002(\005\0221\n\014UserNa"
      "meList\030\005 \003(\0132\033.micromsg.SKBuiltinString_"
      "t\"d\n\014GameGiftResp\022,\n\014BaseResponse\030\001 \002(\0132"
      "\026.micromsg.BaseResponse\022\017\n\007LifeNum\030\002 \002(\r"
      "\022\025\n\rCheckLeftTime\030\003 \002(\r\"N\n\021GameFriendLis"
      "tReq\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.Bas"
      "eRequest\022\r\n\005AppID\030\002 \001(\t\"}\n\022GameFriendLis"
      "tResp\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.B"
      "aseResponse\022\r\n\005Count\030\002 \002(\005\022*\n\nFriendList"
      "\030\003 \003(\0132\026.micromsg.UserGameInfo\"L\n\017GameWi"
      "shListReq\022*\n\013BaseRequest\030\001 \002(\0132\025.microms"
      "g.BaseRequest\022\r\n\005AppID\030\002 \001(\t\"}\n\020GameWish"
      "ListResp\022,\n\014BaseResponse\030\001 \002(\0132\026.microms"
      "g.BaseResponse\022\r\n\005Count\030\002 \002(\005\022,\n\010WishLis"
      "t\030\003 \003(\0132\032.micromsg.UserGameWishInfo\"w\n\014G"
      "ameShareReq\022*\n\013BaseRequest\030\001 \002(\0132\025.micro"
      "msg.BaseRequest\022\r\n\005AppID\030\002 \001(\t\022\014\n\004Type\030\003"
      " \002(\r\022\r\n\005Score\030\004 \002(\r\022\017\n\007Achieve\030\005 \001(\t\"=\n\r"
      "GameShareResp\022,\n\014BaseResponse\030\001 \002(\0132\026.mi"
      "cromsg.BaseResponse\"j\n\017GameResourceReq\022*"
      "\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseReque"
      "st\022\022\n\nPropsCount\030\002 \002(\005\022\027\n\013PropsIdList\030\003 "
      "\003(\rB\002\020\001\"\200\001\n\020GameResourceResp\022,\n\014BaseResp"
      "onse\030\001 \002(\0132\026.micromsg.BaseResponse\022\022\n\nPr"
      "opsCount\030\002 \002(\005\022*\n\tPropsList\030\003 \003(\0132\027.micr"
      "omsg.GamePropsInfo\"K\n\016GameConsumeReq\022*\n\013"
      "BaseRequest\030\001 \002(\0132\025.micromsg.BaseRequest"
      "\022\r\n\005AppID\030\002 \001(\t\"i\n\017GameConsumeResp\022,\n\014Ba"
      "seResponse\030\001 \002(\0132\026.micromsg.BaseResponse"
      "\022\021\n\tConsumeOk\030\002 \002(\r\022\025\n\rGameCoinCount\030\003 \002"
      "(\r\"\230\001\n\nAddGameMsg\022\r\n\005MsgId\030\001 \002(\005\022\024\n\014From"
      "UserName\030\002 \001(\t\022\022\n\nToUserName\030\003 \001(\t\022\014\n\004Ty"
      "pe\030\004 \002(\005\022\014\n\004Flag\030\005 \002(\r\022\016\n\006Status\030\006 \002(\r\022\022"
      "\n\nUpdateTime\030\007 \002(\r\022\021\n\tUpdateSeq\030\010 \002(\r\"|\n"
      "\017GameSyncRequest\022*\n\013BaseRequest\030\001 \002(\0132\025."
      "micromsg.BaseRequest\022\020\n\010Selector\030\002 \002(\r\022+"
      "\n\006KeyBuf\030\003 \002(\0132\033.micromsg.SKBuiltinBuffe"
      "r_t\"\247\001\n\020GameSyncResponse\022,\n\014BaseResponse"
      "\030\001 \002(\0132\026.micromsg.BaseResponse\022\"\n\007CmdLis"
      "t\030\002 \002(\0132\021.micromsg.CmdList\022+\n\006KeyBuf\030\003 \002"
      "(\0132\033.micromsg.SKBuiltinBuffer_t\022\024\n\014Conti"
      "nueFlag\030\004 \002(\r\"_\n\007GameMsg\022\r\n\005MsgId\030\001 \002(\r\022"
      "\016\n\006Status\030\002 \002(\r\022\016\n\006Object\030\003 \001(\t\022\022\n\nUpdat"
      "eTime\030\004 \002(\r\022\021\n\tUpdateSeq\030\005 \002(\r\"j\n\026BatchG"
      "etGameMsgRequest\022*\n\013BaseRequest\030\001 \002(\0132\025."
      "micromsg.BaseRequest\022\r\n\005Count\030\002 \002(\r\022\025\n\tM"
      "sgIdList\030\003 \003(\rB\002\020\001\"z\n\027BatchGetGameMsgRes"
      "ponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.B"
      "aseResponse\022\r\n\005Count\030\002 \002(\r\022\"\n\007MsgList\030\003 "
      "\003(\0132\021.micromsg.GameMsg\"j\n\026BatchDelGameMs"
      "gRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg"
      ".BaseRequest\022\r\n\005Count\030\002 \002(\r\022\025\n\tMsgIdList"
      "\030\003 \003(\rB\002\020\001\"+\n\rDelGameMsgRsp\022\013\n\003Ret\030\001 \002(\005"
      "\022\r\n\005MsgId\030\002 \002(\r\"}\n\027BatchDelGameMsgRespon"
      "se\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.Base"
      "Response\022\r\n\005Count\030\002 \002(\r\022%\n\004List\030\003 \003(\0132\027."
      "micromsg.DelGameMsgRsp"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5622);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mmgame.proto", &protobuf_RegisterTypes);
  ::micromsg::protobuf_mmbuiltintype_2eproto::AddDescriptors();
  ::micromsg::protobuf_mmbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mmgame_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnemyGameInfo::kTypeFieldNumber;
const int EnemyGameInfo::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnemyGameInfo::EnemyGameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EnemyGameInfo)
}
EnemyGameInfo::EnemyGameInfo(const EnemyGameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&type_) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:micromsg.EnemyGameInfo)
}

void EnemyGameInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&type_, 0, reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&type_) + sizeof(score_));
}

EnemyGameInfo::~EnemyGameInfo() {
  // @@protoc_insertion_point(destructor:micromsg.EnemyGameInfo)
  SharedDtor();
}

void EnemyGameInfo::SharedDtor() {
}

void EnemyGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnemyGameInfo::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnemyGameInfo& EnemyGameInfo::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

EnemyGameInfo* EnemyGameInfo::New(::google::protobuf::Arena* arena) const {
  EnemyGameInfo* n = new EnemyGameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnemyGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EnemyGameInfo)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&type_) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EnemyGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EnemyGameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EnemyGameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EnemyGameInfo)
  return false;
#undef DO_
}

void EnemyGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EnemyGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 Score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EnemyGameInfo)
}

::google::protobuf::uint8* EnemyGameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EnemyGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 Score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EnemyGameInfo)
  return target;
}

size_t EnemyGameInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.EnemyGameInfo)
  size_t total_size = 0;

  if (has_type()) {
    // required uint32 Type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_score()) {
    // required uint32 Score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  return total_size;
}
size_t EnemyGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EnemyGameInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 Type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 Score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnemyGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EnemyGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EnemyGameInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnemyGameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EnemyGameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EnemyGameInfo)
    MergeFrom(*source);
  }
}

void EnemyGameInfo::MergeFrom(const EnemyGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EnemyGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EnemyGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EnemyGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnemyGameInfo::CopyFrom(const EnemyGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EnemyGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnemyGameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void EnemyGameInfo::Swap(EnemyGameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnemyGameInfo::InternalSwap(EnemyGameInfo* other) {
  std::swap(type_, other->type_);
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnemyGameInfo::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnemyGameInfo

// required uint32 Type = 1;
bool EnemyGameInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnemyGameInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void EnemyGameInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void EnemyGameInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 EnemyGameInfo::type() const {
  // @@protoc_insertion_point(field_get:micromsg.EnemyGameInfo.Type)
  return type_;
}
void EnemyGameInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnemyGameInfo.Type)
}

// required uint32 Score = 2;
bool EnemyGameInfo::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EnemyGameInfo::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
void EnemyGameInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void EnemyGameInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
::google::protobuf::uint32 EnemyGameInfo::score() const {
  // @@protoc_insertion_point(field_get:micromsg.EnemyGameInfo.Score)
  return score_;
}
void EnemyGameInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnemyGameInfo.Score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnemyGameKilled::kTypeFieldNumber;
const int EnemyGameKilled::kCountFieldNumber;
const int EnemyGameKilled::kGeneralCountFieldNumber;
const int EnemyGameKilled::kUsedCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnemyGameKilled::EnemyGameKilled()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EnemyGameKilled)
}
EnemyGameKilled::EnemyGameKilled(const EnemyGameKilled& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&usedcount_) -
    reinterpret_cast<char*>(&type_) + sizeof(usedcount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.EnemyGameKilled)
}

void EnemyGameKilled::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&type_, 0, reinterpret_cast<char*>(&usedcount_) -
    reinterpret_cast<char*>(&type_) + sizeof(usedcount_));
}

EnemyGameKilled::~EnemyGameKilled() {
  // @@protoc_insertion_point(destructor:micromsg.EnemyGameKilled)
  SharedDtor();
}

void EnemyGameKilled::SharedDtor() {
}

void EnemyGameKilled::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnemyGameKilled::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnemyGameKilled& EnemyGameKilled::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

EnemyGameKilled* EnemyGameKilled::New(::google::protobuf::Arena* arena) const {
  EnemyGameKilled* n = new EnemyGameKilled;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnemyGameKilled::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EnemyGameKilled)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&usedcount_) -
      reinterpret_cast<char*>(&type_) + sizeof(usedcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EnemyGameKilled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EnemyGameKilled)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 GeneralCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_generalcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &generalcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 UsedCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_usedcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EnemyGameKilled)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EnemyGameKilled)
  return false;
#undef DO_
}

void EnemyGameKilled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EnemyGameKilled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional uint32 GeneralCount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->generalcount(), output);
  }

  // optional uint32 UsedCount = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->usedcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EnemyGameKilled)
}

::google::protobuf::uint8* EnemyGameKilled::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EnemyGameKilled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional uint32 GeneralCount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->generalcount(), target);
  }

  // optional uint32 UsedCount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->usedcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EnemyGameKilled)
  return target;
}

size_t EnemyGameKilled::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.EnemyGameKilled)
  size_t total_size = 0;

  if (has_type()) {
    // required uint32 Type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t EnemyGameKilled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EnemyGameKilled)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 Type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 GeneralCount = 3;
    if (has_generalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->generalcount());
    }

    // optional uint32 UsedCount = 4;
    if (has_usedcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedcount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnemyGameKilled::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EnemyGameKilled)
  GOOGLE_DCHECK_NE(&from, this);
  const EnemyGameKilled* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnemyGameKilled>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EnemyGameKilled)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EnemyGameKilled)
    MergeFrom(*source);
  }
}

void EnemyGameKilled::MergeFrom(const EnemyGameKilled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EnemyGameKilled)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      generalcount_ = from.generalcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      usedcount_ = from.usedcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EnemyGameKilled::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EnemyGameKilled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnemyGameKilled::CopyFrom(const EnemyGameKilled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EnemyGameKilled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnemyGameKilled::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void EnemyGameKilled::Swap(EnemyGameKilled* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnemyGameKilled::InternalSwap(EnemyGameKilled* other) {
  std::swap(type_, other->type_);
  std::swap(count_, other->count_);
  std::swap(generalcount_, other->generalcount_);
  std::swap(usedcount_, other->usedcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnemyGameKilled::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnemyGameKilled

// required uint32 Type = 1;
bool EnemyGameKilled::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnemyGameKilled::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void EnemyGameKilled::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void EnemyGameKilled::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 EnemyGameKilled::type() const {
  // @@protoc_insertion_point(field_get:micromsg.EnemyGameKilled.Type)
  return type_;
}
void EnemyGameKilled::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnemyGameKilled.Type)
}

// required uint32 Count = 2;
bool EnemyGameKilled::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EnemyGameKilled::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void EnemyGameKilled::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void EnemyGameKilled::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 EnemyGameKilled::count() const {
  // @@protoc_insertion_point(field_get:micromsg.EnemyGameKilled.Count)
  return count_;
}
void EnemyGameKilled::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnemyGameKilled.Count)
}

// optional uint32 GeneralCount = 3;
bool EnemyGameKilled::has_generalcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EnemyGameKilled::set_has_generalcount() {
  _has_bits_[0] |= 0x00000004u;
}
void EnemyGameKilled::clear_has_generalcount() {
  _has_bits_[0] &= ~0x00000004u;
}
void EnemyGameKilled::clear_generalcount() {
  generalcount_ = 0u;
  clear_has_generalcount();
}
::google::protobuf::uint32 EnemyGameKilled::generalcount() const {
  // @@protoc_insertion_point(field_get:micromsg.EnemyGameKilled.GeneralCount)
  return generalcount_;
}
void EnemyGameKilled::set_generalcount(::google::protobuf::uint32 value) {
  set_has_generalcount();
  generalcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnemyGameKilled.GeneralCount)
}

// optional uint32 UsedCount = 4;
bool EnemyGameKilled::has_usedcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EnemyGameKilled::set_has_usedcount() {
  _has_bits_[0] |= 0x00000008u;
}
void EnemyGameKilled::clear_has_usedcount() {
  _has_bits_[0] &= ~0x00000008u;
}
void EnemyGameKilled::clear_usedcount() {
  usedcount_ = 0u;
  clear_has_usedcount();
}
::google::protobuf::uint32 EnemyGameKilled::usedcount() const {
  // @@protoc_insertion_point(field_get:micromsg.EnemyGameKilled.UsedCount)
  return usedcount_;
}
void EnemyGameKilled::set_usedcount(::google::protobuf::uint32 value) {
  set_has_usedcount();
  usedcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnemyGameKilled.UsedCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserGameInfo::kUserNameFieldNumber;
const int UserGameInfo::kNickNameFieldNumber;
const int UserGameInfo::kHeadImageUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserGameInfo::UserGameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UserGameInfo)
}
UserGameInfo::UserGameInfo(const UserGameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  headimageurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_headimageurl()) {
    headimageurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headimageurl_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.UserGameInfo)
}

void UserGameInfo::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headimageurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserGameInfo::~UserGameInfo() {
  // @@protoc_insertion_point(destructor:micromsg.UserGameInfo)
  SharedDtor();
}

void UserGameInfo::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headimageurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserGameInfo::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserGameInfo& UserGameInfo::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserGameInfo* UserGameInfo::New(::google::protobuf::Arena* arena) const {
  UserGameInfo* n = new UserGameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UserGameInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_headimageurl()) {
      GOOGLE_DCHECK(!headimageurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*headimageurl_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UserGameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UserGameInfo.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string NickName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UserGameInfo.NickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string HeadImageUrl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headimageurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headimageurl().data(), this->headimageurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UserGameInfo.HeadImageUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UserGameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UserGameInfo)
  return false;
#undef DO_
}

void UserGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UserGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserGameInfo.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string NickName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserGameInfo.NickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional string HeadImageUrl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headimageurl().data(), this->headimageurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserGameInfo.HeadImageUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->headimageurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UserGameInfo)
}

::google::protobuf::uint8* UserGameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UserGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserGameInfo.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string NickName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserGameInfo.NickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional string HeadImageUrl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headimageurl().data(), this->headimageurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserGameInfo.HeadImageUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->headimageurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UserGameInfo)
  return target;
}

size_t UserGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UserGameInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string UserName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string NickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string HeadImageUrl = 3;
    if (has_headimageurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headimageurl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UserGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserGameInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserGameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UserGameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UserGameInfo)
    MergeFrom(*source);
  }
}

void UserGameInfo::MergeFrom(const UserGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UserGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_headimageurl();
      headimageurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headimageurl_);
    }
  }
}

void UserGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UserGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGameInfo::CopyFrom(const UserGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UserGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGameInfo::IsInitialized() const {
  return true;
}

void UserGameInfo::Swap(UserGameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserGameInfo::InternalSwap(UserGameInfo* other) {
  username_.Swap(&other->username_);
  nickname_.Swap(&other->nickname_);
  headimageurl_.Swap(&other->headimageurl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserGameInfo::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserGameInfo

// optional string UserName = 1;
bool UserGameInfo::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserGameInfo::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void UserGameInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserGameInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& UserGameInfo::username() const {
  // @@protoc_insertion_point(field_get:micromsg.UserGameInfo.UserName)
  return username_.GetNoArena();
}
void UserGameInfo::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserGameInfo.UserName)
}
#if LANG_CXX11
void UserGameInfo::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserGameInfo.UserName)
}
#endif
void UserGameInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserGameInfo.UserName)
}
void UserGameInfo::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserGameInfo.UserName)
}
::std::string* UserGameInfo::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.UserGameInfo.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserGameInfo::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.UserGameInfo.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserGameInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserGameInfo.UserName)
}

// optional string NickName = 2;
bool UserGameInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserGameInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void UserGameInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserGameInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& UserGameInfo::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.UserGameInfo.NickName)
  return nickname_.GetNoArena();
}
void UserGameInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserGameInfo.NickName)
}
#if LANG_CXX11
void UserGameInfo::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserGameInfo.NickName)
}
#endif
void UserGameInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserGameInfo.NickName)
}
void UserGameInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserGameInfo.NickName)
}
::std::string* UserGameInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.UserGameInfo.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserGameInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.UserGameInfo.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserGameInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserGameInfo.NickName)
}

// optional string HeadImageUrl = 3;
bool UserGameInfo::has_headimageurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserGameInfo::set_has_headimageurl() {
  _has_bits_[0] |= 0x00000004u;
}
void UserGameInfo::clear_has_headimageurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserGameInfo::clear_headimageurl() {
  headimageurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headimageurl();
}
const ::std::string& UserGameInfo::headimageurl() const {
  // @@protoc_insertion_point(field_get:micromsg.UserGameInfo.HeadImageUrl)
  return headimageurl_.GetNoArena();
}
void UserGameInfo::set_headimageurl(const ::std::string& value) {
  set_has_headimageurl();
  headimageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserGameInfo.HeadImageUrl)
}
#if LANG_CXX11
void UserGameInfo::set_headimageurl(::std::string&& value) {
  set_has_headimageurl();
  headimageurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserGameInfo.HeadImageUrl)
}
#endif
void UserGameInfo::set_headimageurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_headimageurl();
  headimageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserGameInfo.HeadImageUrl)
}
void UserGameInfo::set_headimageurl(const char* value, size_t size) {
  set_has_headimageurl();
  headimageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserGameInfo.HeadImageUrl)
}
::std::string* UserGameInfo::mutable_headimageurl() {
  set_has_headimageurl();
  // @@protoc_insertion_point(field_mutable:micromsg.UserGameInfo.HeadImageUrl)
  return headimageurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserGameInfo::release_headimageurl() {
  // @@protoc_insertion_point(field_release:micromsg.UserGameInfo.HeadImageUrl)
  clear_has_headimageurl();
  return headimageurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserGameInfo::set_allocated_headimageurl(::std::string* headimageurl) {
  if (headimageurl != NULL) {
    set_has_headimageurl();
  } else {
    clear_has_headimageurl();
  }
  headimageurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headimageurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserGameInfo.HeadImageUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserGameAchieveInfo::kUserInfoFieldNumber;
const int UserGameAchieveInfo::kScoreFieldNumber;
const int UserGameAchieveInfo::kRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserGameAchieveInfo::UserGameAchieveInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UserGameAchieveInfo)
}
UserGameAchieveInfo::UserGameAchieveInfo(const UserGameAchieveInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_userinfo()) {
    userinfo_ = new ::micromsg::UserGameInfo(*from.userinfo_);
  } else {
    userinfo_ = NULL;
  }
  ::memcpy(&score_, &from.score_,
    reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&score_) + sizeof(rank_));
  // @@protoc_insertion_point(copy_constructor:micromsg.UserGameAchieveInfo)
}

void UserGameAchieveInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&userinfo_, 0, reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&userinfo_) + sizeof(rank_));
}

UserGameAchieveInfo::~UserGameAchieveInfo() {
  // @@protoc_insertion_point(destructor:micromsg.UserGameAchieveInfo)
  SharedDtor();
}

void UserGameAchieveInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete userinfo_;
  }
}

void UserGameAchieveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserGameAchieveInfo::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserGameAchieveInfo& UserGameAchieveInfo::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserGameAchieveInfo* UserGameAchieveInfo::New(::google::protobuf::Arena* arena) const {
  UserGameAchieveInfo* n = new UserGameAchieveInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserGameAchieveInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UserGameAchieveInfo)
  if (has_userinfo()) {
    GOOGLE_DCHECK(userinfo_ != NULL);
    userinfo_->::micromsg::UserGameInfo::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&score_, 0, reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&score_) + sizeof(rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserGameAchieveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UserGameAchieveInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.UserGameInfo UserInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Rank = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UserGameAchieveInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UserGameAchieveInfo)
  return false;
#undef DO_
}

void UserGameAchieveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UserGameAchieveInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.UserGameInfo UserInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->userinfo_, output);
  }

  // required uint32 Score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // required uint32 Rank = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UserGameAchieveInfo)
}

::google::protobuf::uint8* UserGameAchieveInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UserGameAchieveInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.UserGameInfo UserInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->userinfo_, deterministic, target);
  }

  // required uint32 Score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // required uint32 Rank = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UserGameAchieveInfo)
  return target;
}

size_t UserGameAchieveInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.UserGameAchieveInfo)
  size_t total_size = 0;

  if (has_userinfo()) {
    // required .micromsg.UserGameInfo UserInfo = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->userinfo_);
  }

  if (has_score()) {
    // required uint32 Score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  if (has_rank()) {
    // required uint32 Rank = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rank());
  }

  return total_size;
}
size_t UserGameAchieveInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UserGameAchieveInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.UserGameInfo UserInfo = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->userinfo_);

    // required uint32 Score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());

    // required uint32 Rank = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rank());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGameAchieveInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UserGameAchieveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserGameAchieveInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserGameAchieveInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UserGameAchieveInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UserGameAchieveInfo)
    MergeFrom(*source);
  }
}

void UserGameAchieveInfo::MergeFrom(const UserGameAchieveInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UserGameAchieveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_userinfo()->::micromsg::UserGameInfo::MergeFrom(from.userinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      rank_ = from.rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserGameAchieveInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UserGameAchieveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGameAchieveInfo::CopyFrom(const UserGameAchieveInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UserGameAchieveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGameAchieveInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void UserGameAchieveInfo::Swap(UserGameAchieveInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserGameAchieveInfo::InternalSwap(UserGameAchieveInfo* other) {
  std::swap(userinfo_, other->userinfo_);
  std::swap(score_, other->score_);
  std::swap(rank_, other->rank_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserGameAchieveInfo::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserGameAchieveInfo

// required .micromsg.UserGameInfo UserInfo = 1;
bool UserGameAchieveInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserGameAchieveInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void UserGameAchieveInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserGameAchieveInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::micromsg::UserGameInfo::Clear();
  clear_has_userinfo();
}
const ::micromsg::UserGameInfo& UserGameAchieveInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.UserGameAchieveInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_
                         : *::micromsg::UserGameInfo::internal_default_instance();
}
::micromsg::UserGameInfo* UserGameAchieveInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) {
    userinfo_ = new ::micromsg::UserGameInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UserGameAchieveInfo.UserInfo)
  return userinfo_;
}
::micromsg::UserGameInfo* UserGameAchieveInfo::release_userinfo() {
  // @@protoc_insertion_point(field_release:micromsg.UserGameAchieveInfo.UserInfo)
  clear_has_userinfo();
  ::micromsg::UserGameInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
void UserGameAchieveInfo::set_allocated_userinfo(::micromsg::UserGameInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserGameAchieveInfo.UserInfo)
}

// required uint32 Score = 2;
bool UserGameAchieveInfo::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserGameAchieveInfo::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
void UserGameAchieveInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserGameAchieveInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
::google::protobuf::uint32 UserGameAchieveInfo::score() const {
  // @@protoc_insertion_point(field_get:micromsg.UserGameAchieveInfo.Score)
  return score_;
}
void UserGameAchieveInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UserGameAchieveInfo.Score)
}

// required uint32 Rank = 3;
bool UserGameAchieveInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserGameAchieveInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
void UserGameAchieveInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserGameAchieveInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
::google::protobuf::uint32 UserGameAchieveInfo::rank() const {
  // @@protoc_insertion_point(field_get:micromsg.UserGameAchieveInfo.Rank)
  return rank_;
}
void UserGameAchieveInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UserGameAchieveInfo.Rank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserGameWishInfo::kUserInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserGameWishInfo::UserGameWishInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UserGameWishInfo)
}
UserGameWishInfo::UserGameWishInfo(const UserGameWishInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_userinfo()) {
    userinfo_ = new ::micromsg::UserGameInfo(*from.userinfo_);
  } else {
    userinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.UserGameWishInfo)
}

void UserGameWishInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
}

UserGameWishInfo::~UserGameWishInfo() {
  // @@protoc_insertion_point(destructor:micromsg.UserGameWishInfo)
  SharedDtor();
}

void UserGameWishInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete userinfo_;
  }
}

void UserGameWishInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserGameWishInfo::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserGameWishInfo& UserGameWishInfo::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserGameWishInfo* UserGameWishInfo::New(::google::protobuf::Arena* arena) const {
  UserGameWishInfo* n = new UserGameWishInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserGameWishInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UserGameWishInfo)
  if (has_userinfo()) {
    GOOGLE_DCHECK(userinfo_ != NULL);
    userinfo_->::micromsg::UserGameInfo::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserGameWishInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UserGameWishInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.UserGameInfo UserInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UserGameWishInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UserGameWishInfo)
  return false;
#undef DO_
}

void UserGameWishInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UserGameWishInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.UserGameInfo UserInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->userinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UserGameWishInfo)
}

::google::protobuf::uint8* UserGameWishInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UserGameWishInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.UserGameInfo UserInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->userinfo_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UserGameWishInfo)
  return target;
}

size_t UserGameWishInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UserGameWishInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.UserGameInfo UserInfo = 1;
  if (has_userinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->userinfo_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGameWishInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UserGameWishInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserGameWishInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserGameWishInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UserGameWishInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UserGameWishInfo)
    MergeFrom(*source);
  }
}

void UserGameWishInfo::MergeFrom(const UserGameWishInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UserGameWishInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_userinfo()) {
    mutable_userinfo()->::micromsg::UserGameInfo::MergeFrom(from.userinfo());
  }
}

void UserGameWishInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UserGameWishInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGameWishInfo::CopyFrom(const UserGameWishInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UserGameWishInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGameWishInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserGameWishInfo::Swap(UserGameWishInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserGameWishInfo::InternalSwap(UserGameWishInfo* other) {
  std::swap(userinfo_, other->userinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserGameWishInfo::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserGameWishInfo

// required .micromsg.UserGameInfo UserInfo = 1;
bool UserGameWishInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserGameWishInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void UserGameWishInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserGameWishInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::micromsg::UserGameInfo::Clear();
  clear_has_userinfo();
}
const ::micromsg::UserGameInfo& UserGameWishInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.UserGameWishInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_
                         : *::micromsg::UserGameInfo::internal_default_instance();
}
::micromsg::UserGameInfo* UserGameWishInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) {
    userinfo_ = new ::micromsg::UserGameInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UserGameWishInfo.UserInfo)
  return userinfo_;
}
::micromsg::UserGameInfo* UserGameWishInfo::release_userinfo() {
  // @@protoc_insertion_point(field_release:micromsg.UserGameWishInfo.UserInfo)
  clear_has_userinfo();
  ::micromsg::UserGameInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
void UserGameWishInfo::set_allocated_userinfo(::micromsg::UserGameInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserGameWishInfo.UserInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GamePropsInfo::kPropsIdFieldNumber;
const int GamePropsInfo::kIconUrlFieldNumber;
const int GamePropsInfo::kNameFieldNumber;
const int GamePropsInfo::kDescFieldNumber;
const int GamePropsInfo::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GamePropsInfo::GamePropsInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GamePropsInfo)
}
GamePropsInfo::GamePropsInfo(const GamePropsInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  iconurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_iconurl()) {
    iconurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iconurl_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  ::memcpy(&propsid_, &from.propsid_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&propsid_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GamePropsInfo)
}

void GamePropsInfo::SharedCtor() {
  _cached_size_ = 0;
  iconurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&propsid_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&propsid_) + sizeof(type_));
}

GamePropsInfo::~GamePropsInfo() {
  // @@protoc_insertion_point(destructor:micromsg.GamePropsInfo)
  SharedDtor();
}

void GamePropsInfo::SharedDtor() {
  iconurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GamePropsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePropsInfo::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GamePropsInfo& GamePropsInfo::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GamePropsInfo* GamePropsInfo::New(::google::protobuf::Arena* arena) const {
  GamePropsInfo* n = new GamePropsInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GamePropsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GamePropsInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_iconurl()) {
      GOOGLE_DCHECK(!iconurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*iconurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_desc()) {
      GOOGLE_DCHECK(!desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*desc_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&propsid_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&propsid_) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GamePropsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GamePropsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 PropsId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_propsid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string IconUrl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iconurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iconurl().data(), this->iconurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GamePropsInfo.IconUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GamePropsInfo.Name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Desc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GamePropsInfo.Desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GamePropsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GamePropsInfo)
  return false;
#undef DO_
}

void GamePropsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GamePropsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 PropsId = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->propsid(), output);
  }

  // optional string IconUrl = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iconurl().data(), this->iconurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GamePropsInfo.IconUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->iconurl(), output);
  }

  // optional string Name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GamePropsInfo.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string Desc = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GamePropsInfo.Desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->desc(), output);
  }

  // required uint32 Type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GamePropsInfo)
}

::google::protobuf::uint8* GamePropsInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GamePropsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 PropsId = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->propsid(), target);
  }

  // optional string IconUrl = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iconurl().data(), this->iconurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GamePropsInfo.IconUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->iconurl(), target);
  }

  // optional string Name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GamePropsInfo.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string Desc = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GamePropsInfo.Desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc(), target);
  }

  // required uint32 Type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GamePropsInfo)
  return target;
}

size_t GamePropsInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GamePropsInfo)
  size_t total_size = 0;

  if (has_propsid()) {
    // required uint32 PropsId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->propsid());
  }

  if (has_type()) {
    // required uint32 Type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  return total_size;
}
size_t GamePropsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GamePropsInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000018) ^ 0x00000018) == 0) {  // All required fields are present.
    // required uint32 PropsId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->propsid());

    // required uint32 Type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string IconUrl = 2;
    if (has_iconurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iconurl());
    }

    // optional string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string Desc = 4;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePropsInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GamePropsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GamePropsInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GamePropsInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GamePropsInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GamePropsInfo)
    MergeFrom(*source);
  }
}

void GamePropsInfo::MergeFrom(const GamePropsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GamePropsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_iconurl();
      iconurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iconurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000008u) {
      propsid_ = from.propsid_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GamePropsInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GamePropsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePropsInfo::CopyFrom(const GamePropsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GamePropsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePropsInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;
  return true;
}

void GamePropsInfo::Swap(GamePropsInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GamePropsInfo::InternalSwap(GamePropsInfo* other) {
  iconurl_.Swap(&other->iconurl_);
  name_.Swap(&other->name_);
  desc_.Swap(&other->desc_);
  std::swap(propsid_, other->propsid_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GamePropsInfo::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GamePropsInfo

// required uint32 PropsId = 1;
bool GamePropsInfo::has_propsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GamePropsInfo::set_has_propsid() {
  _has_bits_[0] |= 0x00000008u;
}
void GamePropsInfo::clear_has_propsid() {
  _has_bits_[0] &= ~0x00000008u;
}
void GamePropsInfo::clear_propsid() {
  propsid_ = 0u;
  clear_has_propsid();
}
::google::protobuf::uint32 GamePropsInfo::propsid() const {
  // @@protoc_insertion_point(field_get:micromsg.GamePropsInfo.PropsId)
  return propsid_;
}
void GamePropsInfo::set_propsid(::google::protobuf::uint32 value) {
  set_has_propsid();
  propsid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GamePropsInfo.PropsId)
}

// optional string IconUrl = 2;
bool GamePropsInfo::has_iconurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GamePropsInfo::set_has_iconurl() {
  _has_bits_[0] |= 0x00000001u;
}
void GamePropsInfo::clear_has_iconurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void GamePropsInfo::clear_iconurl() {
  iconurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iconurl();
}
const ::std::string& GamePropsInfo::iconurl() const {
  // @@protoc_insertion_point(field_get:micromsg.GamePropsInfo.IconUrl)
  return iconurl_.GetNoArena();
}
void GamePropsInfo::set_iconurl(const ::std::string& value) {
  set_has_iconurl();
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GamePropsInfo.IconUrl)
}
#if LANG_CXX11
void GamePropsInfo::set_iconurl(::std::string&& value) {
  set_has_iconurl();
  iconurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GamePropsInfo.IconUrl)
}
#endif
void GamePropsInfo::set_iconurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_iconurl();
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GamePropsInfo.IconUrl)
}
void GamePropsInfo::set_iconurl(const char* value, size_t size) {
  set_has_iconurl();
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GamePropsInfo.IconUrl)
}
::std::string* GamePropsInfo::mutable_iconurl() {
  set_has_iconurl();
  // @@protoc_insertion_point(field_mutable:micromsg.GamePropsInfo.IconUrl)
  return iconurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GamePropsInfo::release_iconurl() {
  // @@protoc_insertion_point(field_release:micromsg.GamePropsInfo.IconUrl)
  clear_has_iconurl();
  return iconurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GamePropsInfo::set_allocated_iconurl(::std::string* iconurl) {
  if (iconurl != NULL) {
    set_has_iconurl();
  } else {
    clear_has_iconurl();
  }
  iconurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iconurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GamePropsInfo.IconUrl)
}

// optional string Name = 3;
bool GamePropsInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GamePropsInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void GamePropsInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void GamePropsInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& GamePropsInfo::name() const {
  // @@protoc_insertion_point(field_get:micromsg.GamePropsInfo.Name)
  return name_.GetNoArena();
}
void GamePropsInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GamePropsInfo.Name)
}
#if LANG_CXX11
void GamePropsInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GamePropsInfo.Name)
}
#endif
void GamePropsInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GamePropsInfo.Name)
}
void GamePropsInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GamePropsInfo.Name)
}
::std::string* GamePropsInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:micromsg.GamePropsInfo.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GamePropsInfo::release_name() {
  // @@protoc_insertion_point(field_release:micromsg.GamePropsInfo.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GamePropsInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GamePropsInfo.Name)
}

// optional string Desc = 4;
bool GamePropsInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GamePropsInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
void GamePropsInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
void GamePropsInfo::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
const ::std::string& GamePropsInfo::desc() const {
  // @@protoc_insertion_point(field_get:micromsg.GamePropsInfo.Desc)
  return desc_.GetNoArena();
}
void GamePropsInfo::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GamePropsInfo.Desc)
}
#if LANG_CXX11
void GamePropsInfo::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GamePropsInfo.Desc)
}
#endif
void GamePropsInfo::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GamePropsInfo.Desc)
}
void GamePropsInfo::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GamePropsInfo.Desc)
}
::std::string* GamePropsInfo::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:micromsg.GamePropsInfo.Desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GamePropsInfo::release_desc() {
  // @@protoc_insertion_point(field_release:micromsg.GamePropsInfo.Desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GamePropsInfo::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GamePropsInfo.Desc)
}

// required uint32 Type = 5;
bool GamePropsInfo::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GamePropsInfo::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void GamePropsInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void GamePropsInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 GamePropsInfo::type() const {
  // @@protoc_insertion_point(field_get:micromsg.GamePropsInfo.Type)
  return type_;
}
void GamePropsInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GamePropsInfo.Type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameUserPropsInfo::kPropsIdFieldNumber;
const int GameUserPropsInfo::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameUserPropsInfo::GameUserPropsInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameUserPropsInfo)
}
GameUserPropsInfo::GameUserPropsInfo(const GameUserPropsInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&propsid_, &from.propsid_,
    reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&propsid_) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GameUserPropsInfo)
}

void GameUserPropsInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&propsid_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&propsid_) + sizeof(count_));
}

GameUserPropsInfo::~GameUserPropsInfo() {
  // @@protoc_insertion_point(destructor:micromsg.GameUserPropsInfo)
  SharedDtor();
}

void GameUserPropsInfo::SharedDtor() {
}

void GameUserPropsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameUserPropsInfo::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameUserPropsInfo& GameUserPropsInfo::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameUserPropsInfo* GameUserPropsInfo::New(::google::protobuf::Arena* arena) const {
  GameUserPropsInfo* n = new GameUserPropsInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameUserPropsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameUserPropsInfo)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&propsid_, 0, reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&propsid_) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameUserPropsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameUserPropsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 PropsId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_propsid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameUserPropsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameUserPropsInfo)
  return false;
#undef DO_
}

void GameUserPropsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameUserPropsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 PropsId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->propsid(), output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameUserPropsInfo)
}

::google::protobuf::uint8* GameUserPropsInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameUserPropsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 PropsId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->propsid(), target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameUserPropsInfo)
  return target;
}

size_t GameUserPropsInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameUserPropsInfo)
  size_t total_size = 0;

  if (has_propsid()) {
    // required uint32 PropsId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->propsid());
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t GameUserPropsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameUserPropsInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 PropsId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->propsid());

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameUserPropsInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameUserPropsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameUserPropsInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameUserPropsInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameUserPropsInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameUserPropsInfo)
    MergeFrom(*source);
  }
}

void GameUserPropsInfo::MergeFrom(const GameUserPropsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameUserPropsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      propsid_ = from.propsid_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameUserPropsInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameUserPropsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameUserPropsInfo::CopyFrom(const GameUserPropsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameUserPropsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameUserPropsInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GameUserPropsInfo::Swap(GameUserPropsInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameUserPropsInfo::InternalSwap(GameUserPropsInfo* other) {
  std::swap(propsid_, other->propsid_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameUserPropsInfo::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameUserPropsInfo

// required uint32 PropsId = 1;
bool GameUserPropsInfo::has_propsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameUserPropsInfo::set_has_propsid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameUserPropsInfo::clear_has_propsid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameUserPropsInfo::clear_propsid() {
  propsid_ = 0u;
  clear_has_propsid();
}
::google::protobuf::uint32 GameUserPropsInfo::propsid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameUserPropsInfo.PropsId)
  return propsid_;
}
void GameUserPropsInfo::set_propsid(::google::protobuf::uint32 value) {
  set_has_propsid();
  propsid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameUserPropsInfo.PropsId)
}

// required uint32 Count = 2;
bool GameUserPropsInfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameUserPropsInfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void GameUserPropsInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameUserPropsInfo::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 GameUserPropsInfo::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GameUserPropsInfo.Count)
  return count_;
}
void GameUserPropsInfo::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameUserPropsInfo.Count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameAnnouncementInfo::kStyleFieldNumber;
const int GameAnnouncementInfo::kTitleFieldNumber;
const int GameAnnouncementInfo::kDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameAnnouncementInfo::GameAnnouncementInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameAnnouncementInfo)
}
GameAnnouncementInfo::GameAnnouncementInfo(const GameAnnouncementInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  style_ = from.style_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GameAnnouncementInfo)
}

void GameAnnouncementInfo::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  style_ = 0u;
}

GameAnnouncementInfo::~GameAnnouncementInfo() {
  // @@protoc_insertion_point(destructor:micromsg.GameAnnouncementInfo)
  SharedDtor();
}

void GameAnnouncementInfo::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameAnnouncementInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameAnnouncementInfo::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameAnnouncementInfo& GameAnnouncementInfo::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameAnnouncementInfo* GameAnnouncementInfo::New(::google::protobuf::Arena* arena) const {
  GameAnnouncementInfo* n = new GameAnnouncementInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameAnnouncementInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameAnnouncementInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_desc()) {
      GOOGLE_DCHECK(!desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*desc_.UnsafeRawStringPointer())->clear();
    }
  }
  style_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameAnnouncementInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameAnnouncementInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Style = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_style();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameAnnouncementInfo.Title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Desc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameAnnouncementInfo.Desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameAnnouncementInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameAnnouncementInfo)
  return false;
#undef DO_
}

void GameAnnouncementInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameAnnouncementInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Style = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->style(), output);
  }

  // optional string Title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameAnnouncementInfo.Title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string Desc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameAnnouncementInfo.Desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->desc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameAnnouncementInfo)
}

::google::protobuf::uint8* GameAnnouncementInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameAnnouncementInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Style = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->style(), target);
  }

  // optional string Title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameAnnouncementInfo.Title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string Desc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameAnnouncementInfo.Desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameAnnouncementInfo)
  return target;
}

size_t GameAnnouncementInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameAnnouncementInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Style = 1;
  if (has_style()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->style());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string Title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string Desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameAnnouncementInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameAnnouncementInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameAnnouncementInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameAnnouncementInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameAnnouncementInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameAnnouncementInfo)
    MergeFrom(*source);
  }
}

void GameAnnouncementInfo::MergeFrom(const GameAnnouncementInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameAnnouncementInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000004u) {
      style_ = from.style_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameAnnouncementInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameAnnouncementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAnnouncementInfo::CopyFrom(const GameAnnouncementInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameAnnouncementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAnnouncementInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void GameAnnouncementInfo::Swap(GameAnnouncementInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameAnnouncementInfo::InternalSwap(GameAnnouncementInfo* other) {
  title_.Swap(&other->title_);
  desc_.Swap(&other->desc_);
  std::swap(style_, other->style_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameAnnouncementInfo::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameAnnouncementInfo

// required uint32 Style = 1;
bool GameAnnouncementInfo::has_style() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameAnnouncementInfo::set_has_style() {
  _has_bits_[0] |= 0x00000004u;
}
void GameAnnouncementInfo::clear_has_style() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameAnnouncementInfo::clear_style() {
  style_ = 0u;
  clear_has_style();
}
::google::protobuf::uint32 GameAnnouncementInfo::style() const {
  // @@protoc_insertion_point(field_get:micromsg.GameAnnouncementInfo.Style)
  return style_;
}
void GameAnnouncementInfo::set_style(::google::protobuf::uint32 value) {
  set_has_style();
  style_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameAnnouncementInfo.Style)
}

// optional string Title = 2;
bool GameAnnouncementInfo::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameAnnouncementInfo::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void GameAnnouncementInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameAnnouncementInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& GameAnnouncementInfo::title() const {
  // @@protoc_insertion_point(field_get:micromsg.GameAnnouncementInfo.Title)
  return title_.GetNoArena();
}
void GameAnnouncementInfo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameAnnouncementInfo.Title)
}
#if LANG_CXX11
void GameAnnouncementInfo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameAnnouncementInfo.Title)
}
#endif
void GameAnnouncementInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameAnnouncementInfo.Title)
}
void GameAnnouncementInfo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameAnnouncementInfo.Title)
}
::std::string* GameAnnouncementInfo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:micromsg.GameAnnouncementInfo.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameAnnouncementInfo::release_title() {
  // @@protoc_insertion_point(field_release:micromsg.GameAnnouncementInfo.Title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameAnnouncementInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameAnnouncementInfo.Title)
}

// optional string Desc = 3;
bool GameAnnouncementInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameAnnouncementInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
void GameAnnouncementInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameAnnouncementInfo::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
const ::std::string& GameAnnouncementInfo::desc() const {
  // @@protoc_insertion_point(field_get:micromsg.GameAnnouncementInfo.Desc)
  return desc_.GetNoArena();
}
void GameAnnouncementInfo::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameAnnouncementInfo.Desc)
}
#if LANG_CXX11
void GameAnnouncementInfo::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameAnnouncementInfo.Desc)
}
#endif
void GameAnnouncementInfo::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameAnnouncementInfo.Desc)
}
void GameAnnouncementInfo::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameAnnouncementInfo.Desc)
}
::std::string* GameAnnouncementInfo::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:micromsg.GameAnnouncementInfo.Desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameAnnouncementInfo::release_desc() {
  // @@protoc_insertion_point(field_release:micromsg.GameAnnouncementInfo.Desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameAnnouncementInfo::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameAnnouncementInfo.Desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameConsumeProps::kPropsIdFieldNumber;
const int GameConsumeProps::kConsumeCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameConsumeProps::GameConsumeProps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameConsumeProps)
}
GameConsumeProps::GameConsumeProps(const GameConsumeProps& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&propsid_, &from.propsid_,
    reinterpret_cast<char*>(&consumecount_) -
    reinterpret_cast<char*>(&propsid_) + sizeof(consumecount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GameConsumeProps)
}

void GameConsumeProps::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&propsid_, 0, reinterpret_cast<char*>(&consumecount_) -
    reinterpret_cast<char*>(&propsid_) + sizeof(consumecount_));
}

GameConsumeProps::~GameConsumeProps() {
  // @@protoc_insertion_point(destructor:micromsg.GameConsumeProps)
  SharedDtor();
}

void GameConsumeProps::SharedDtor() {
}

void GameConsumeProps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameConsumeProps::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameConsumeProps& GameConsumeProps::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameConsumeProps* GameConsumeProps::New(::google::protobuf::Arena* arena) const {
  GameConsumeProps* n = new GameConsumeProps;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameConsumeProps::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameConsumeProps)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&propsid_, 0, reinterpret_cast<char*>(&consumecount_) -
      reinterpret_cast<char*>(&propsid_) + sizeof(consumecount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameConsumeProps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameConsumeProps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 PropsId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_propsid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ConsumeCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_consumecount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consumecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameConsumeProps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameConsumeProps)
  return false;
#undef DO_
}

void GameConsumeProps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameConsumeProps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 PropsId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->propsid(), output);
  }

  // required int32 ConsumeCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->consumecount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameConsumeProps)
}

::google::protobuf::uint8* GameConsumeProps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameConsumeProps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 PropsId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->propsid(), target);
  }

  // required int32 ConsumeCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->consumecount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameConsumeProps)
  return target;
}

size_t GameConsumeProps::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameConsumeProps)
  size_t total_size = 0;

  if (has_propsid()) {
    // required uint32 PropsId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->propsid());
  }

  if (has_consumecount()) {
    // required int32 ConsumeCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->consumecount());
  }

  return total_size;
}
size_t GameConsumeProps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameConsumeProps)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 PropsId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->propsid());

    // required int32 ConsumeCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->consumecount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameConsumeProps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameConsumeProps)
  GOOGLE_DCHECK_NE(&from, this);
  const GameConsumeProps* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameConsumeProps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameConsumeProps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameConsumeProps)
    MergeFrom(*source);
  }
}

void GameConsumeProps::MergeFrom(const GameConsumeProps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameConsumeProps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      propsid_ = from.propsid_;
    }
    if (cached_has_bits & 0x00000002u) {
      consumecount_ = from.consumecount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameConsumeProps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameConsumeProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameConsumeProps::CopyFrom(const GameConsumeProps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameConsumeProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameConsumeProps::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GameConsumeProps::Swap(GameConsumeProps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameConsumeProps::InternalSwap(GameConsumeProps* other) {
  std::swap(propsid_, other->propsid_);
  std::swap(consumecount_, other->consumecount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameConsumeProps::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameConsumeProps

// required uint32 PropsId = 1;
bool GameConsumeProps::has_propsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameConsumeProps::set_has_propsid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameConsumeProps::clear_has_propsid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameConsumeProps::clear_propsid() {
  propsid_ = 0u;
  clear_has_propsid();
}
::google::protobuf::uint32 GameConsumeProps::propsid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameConsumeProps.PropsId)
  return propsid_;
}
void GameConsumeProps::set_propsid(::google::protobuf::uint32 value) {
  set_has_propsid();
  propsid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameConsumeProps.PropsId)
}

// required int32 ConsumeCount = 2;
bool GameConsumeProps::has_consumecount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameConsumeProps::set_has_consumecount() {
  _has_bits_[0] |= 0x00000002u;
}
void GameConsumeProps::clear_has_consumecount() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameConsumeProps::clear_consumecount() {
  consumecount_ = 0;
  clear_has_consumecount();
}
::google::protobuf::int32 GameConsumeProps::consumecount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameConsumeProps.ConsumeCount)
  return consumecount_;
}
void GameConsumeProps::set_consumecount(::google::protobuf::int32 value) {
  set_has_consumecount();
  consumecount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameConsumeProps.ConsumeCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameInitReq::kBaseRequestFieldNumber;
const int GameInitReq::kAppIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameInitReq::GameInitReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameInitReq)
}
GameInitReq::GameInitReq(const GameInitReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_appid()) {
    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GameInitReq)
}

void GameInitReq::SharedCtor() {
  _cached_size_ = 0;
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

GameInitReq::~GameInitReq() {
  // @@protoc_insertion_point(destructor:micromsg.GameInitReq)
  SharedDtor();
}

void GameInitReq::SharedDtor() {
  appid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GameInitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameInitReq::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameInitReq& GameInitReq::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameInitReq* GameInitReq::New(::google::protobuf::Arena* arena) const {
  GameInitReq* n = new GameInitReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameInitReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameInitReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_appid()) {
      GOOGLE_DCHECK(!appid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*appid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameInitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameInitReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AppID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameInitReq.AppID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameInitReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameInitReq)
  return false;
#undef DO_
}

void GameInitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameInitReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameInitReq.AppID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameInitReq)
}

::google::protobuf::uint8* GameInitReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameInitReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameInitReq.AppID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameInitReq)
  return target;
}

size_t GameInitReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameInitReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string AppID = 2;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInitReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameInitReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GameInitReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameInitReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameInitReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameInitReq)
    MergeFrom(*source);
  }
}

void GameInitReq::MergeFrom(const GameInitReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameInitReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_appid();
      appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void GameInitReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameInitReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInitReq::CopyFrom(const GameInitReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameInitReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInitReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GameInitReq::Swap(GameInitReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameInitReq::InternalSwap(GameInitReq* other) {
  appid_.Swap(&other->appid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameInitReq::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameInitReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool GameInitReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameInitReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GameInitReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameInitReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GameInitReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GameInitReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GameInitReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameInitReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GameInitReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameInitReq.BaseRequest)
}

// optional string AppID = 2;
bool GameInitReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameInitReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameInitReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameInitReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
const ::std::string& GameInitReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitReq.AppID)
  return appid_.GetNoArena();
}
void GameInitReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameInitReq.AppID)
}
#if LANG_CXX11
void GameInitReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameInitReq.AppID)
}
#endif
void GameInitReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameInitReq.AppID)
}
void GameInitReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameInitReq.AppID)
}
::std::string* GameInitReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameInitReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameInitReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameInitReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameInitReq.AppID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameInitResp::kBaseResponseFieldNumber;
const int GameInitResp::kLifeNumFieldNumber;
const int GameInitResp::kGameNumerConfigFieldNumber;
const int GameInitResp::kCheckLeftTimeFieldNumber;
const int GameInitResp::kTokenFieldNumber;
const int GameInitResp::kFriendCountFieldNumber;
const int GameInitResp::kFriendListFieldNumber;
const int GameInitResp::kWishCountFieldNumber;
const int GameInitResp::kWishListFieldNumber;
const int GameInitResp::kGamePropsCountFieldNumber;
const int GameInitResp::kGamePropsListFieldNumber;
const int GameInitResp::kGameAnnouncementCountFieldNumber;
const int GameInitResp::kGameAnnouncementListFieldNumber;
const int GameInitResp::kPropsViewTipFieldNumber;
const int GameInitResp::kRankViewTipFieldNumber;
const int GameInitResp::kGameCoinCountFieldNumber;
const int GameInitResp::kProductIdCountFieldNumber;
const int GameInitResp::kProductIdListFieldNumber;
const int GameInitResp::kBuyEngineOilWordingFieldNumber;
const int GameInitResp::kOilPriceFieldNumber;
const int GameInitResp::kOilCurrencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameInitResp::GameInitResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameInitResp)
}
GameInitResp::GameInitResp(const GameInitResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      friendlist_(from.friendlist_),
      wishlist_(from.wishlist_),
      gamepropslist_(from.gamepropslist_),
      gameannouncementlist_(from.gameannouncementlist_),
      productidlist_(from.productidlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamenumerconfig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gamenumerconfig()) {
    gamenumerconfig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamenumerconfig_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  propsviewtip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_propsviewtip()) {
    propsviewtip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.propsviewtip_);
  }
  rankviewtip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rankviewtip()) {
    rankviewtip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rankviewtip_);
  }
  buyengineoilwording_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buyengineoilwording()) {
    buyengineoilwording_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buyengineoilwording_);
  }
  oilprice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_oilprice()) {
    oilprice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oilprice_);
  }
  oilcurrency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_oilcurrency()) {
    oilcurrency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oilcurrency_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&lifenum_, &from.lifenum_,
    reinterpret_cast<char*>(&productidcount_) -
    reinterpret_cast<char*>(&lifenum_) + sizeof(productidcount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GameInitResp)
}

void GameInitResp::SharedCtor() {
  _cached_size_ = 0;
  gamenumerconfig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  propsviewtip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rankviewtip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyengineoilwording_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oilprice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oilcurrency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&productidcount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(productidcount_));
}

GameInitResp::~GameInitResp() {
  // @@protoc_insertion_point(destructor:micromsg.GameInitResp)
  SharedDtor();
}

void GameInitResp::SharedDtor() {
  gamenumerconfig_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  propsviewtip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rankviewtip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyengineoilwording_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oilprice_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oilcurrency_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GameInitResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameInitResp::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameInitResp& GameInitResp::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameInitResp* GameInitResp::New(::google::protobuf::Arena* arena) const {
  GameInitResp* n = new GameInitResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameInitResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameInitResp)
  friendlist_.Clear();
  wishlist_.Clear();
  gamepropslist_.Clear();
  gameannouncementlist_.Clear();
  productidlist_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_gamenumerconfig()) {
      GOOGLE_DCHECK(!gamenumerconfig_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gamenumerconfig_.UnsafeRawStringPointer())->clear();
    }
    if (has_token()) {
      GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_.UnsafeRawStringPointer())->clear();
    }
    if (has_propsviewtip()) {
      GOOGLE_DCHECK(!propsviewtip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*propsviewtip_.UnsafeRawStringPointer())->clear();
    }
    if (has_rankviewtip()) {
      GOOGLE_DCHECK(!rankviewtip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rankviewtip_.UnsafeRawStringPointer())->clear();
    }
    if (has_buyengineoilwording()) {
      GOOGLE_DCHECK(!buyengineoilwording_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*buyengineoilwording_.UnsafeRawStringPointer())->clear();
    }
    if (has_oilprice()) {
      GOOGLE_DCHECK(!oilprice_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*oilprice_.UnsafeRawStringPointer())->clear();
    }
    if (has_oilcurrency()) {
      GOOGLE_DCHECK(!oilcurrency_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*oilcurrency_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&lifenum_, 0, reinterpret_cast<char*>(&productidcount_) -
      reinterpret_cast<char*>(&lifenum_) + sizeof(productidcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameInitResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameInitResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 LifeNum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_lifenum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string GameNumerConfig = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamenumerconfig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamenumerconfig().data(), this->gamenumerconfig().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameInitResp.GameNumerConfig");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CheckLeftTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_checklefttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checklefttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Token = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameInitResp.Token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 FriendCount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_friendcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.UserGameInfo FriendList = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 WishCount = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_wishcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wishcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.UserGameWishInfo WishList = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wishlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 GamePropsCount = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_gamepropscount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamepropscount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.GameUserPropsInfo GamePropsList = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gamepropslist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 GameAnnouncementCount = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_gameannouncementcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameannouncementcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.GameAnnouncementInfo GameAnnouncementList = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gameannouncementlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PropsViewTip = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_propsviewtip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->propsviewtip().data(), this->propsviewtip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameInitResp.PropsViewTip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RankViewTip = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rankviewtip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rankviewtip().data(), this->rankviewtip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameInitResp.RankViewTip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 GameCoinCount = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_gamecoincount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamecoincount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ProductIdCount = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_productidcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &productidcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t ProductIdList = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_productidlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BuyEngineOilWording = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyengineoilwording()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buyengineoilwording().data(), this->buyengineoilwording().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameInitResp.BuyEngineOilWording");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string OilPrice = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oilprice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oilprice().data(), this->oilprice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameInitResp.OilPrice");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string OilCurrency = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oilcurrency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oilcurrency().data(), this->oilcurrency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameInitResp.OilCurrency");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameInitResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameInitResp)
  return false;
#undef DO_
}

void GameInitResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameInitResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 LifeNum = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lifenum(), output);
  }

  // optional string GameNumerConfig = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamenumerconfig().data(), this->gamenumerconfig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameInitResp.GameNumerConfig");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gamenumerconfig(), output);
  }

  // required uint32 CheckLeftTime = 4;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->checklefttime(), output);
  }

  // optional string Token = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameInitResp.Token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->token(), output);
  }

  // required int32 FriendCount = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->friendcount(), output);
  }

  // repeated .micromsg.UserGameInfo FriendList = 7;
  for (unsigned int i = 0, n = this->friendlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->friendlist(i), output);
  }

  // required int32 WishCount = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->wishcount(), output);
  }

  // repeated .micromsg.UserGameWishInfo WishList = 9;
  for (unsigned int i = 0, n = this->wishlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->wishlist(i), output);
  }

  // optional int32 GamePropsCount = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gamepropscount(), output);
  }

  // repeated .micromsg.GameUserPropsInfo GamePropsList = 11;
  for (unsigned int i = 0, n = this->gamepropslist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->gamepropslist(i), output);
  }

  // optional int32 GameAnnouncementCount = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gameannouncementcount(), output);
  }

  // repeated .micromsg.GameAnnouncementInfo GameAnnouncementList = 13;
  for (unsigned int i = 0, n = this->gameannouncementlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->gameannouncementlist(i), output);
  }

  // optional string PropsViewTip = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->propsviewtip().data(), this->propsviewtip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameInitResp.PropsViewTip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->propsviewtip(), output);
  }

  // optional string RankViewTip = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rankviewtip().data(), this->rankviewtip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameInitResp.RankViewTip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->rankviewtip(), output);
  }

  // optional uint32 GameCoinCount = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->gamecoincount(), output);
  }

  // optional uint32 ProductIdCount = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->productidcount(), output);
  }

  // repeated .micromsg.SKBuiltinString_t ProductIdList = 18;
  for (unsigned int i = 0, n = this->productidlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->productidlist(i), output);
  }

  // optional string BuyEngineOilWording = 19;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyengineoilwording().data(), this->buyengineoilwording().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameInitResp.BuyEngineOilWording");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->buyengineoilwording(), output);
  }

  // optional string OilPrice = 20;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oilprice().data(), this->oilprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameInitResp.OilPrice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->oilprice(), output);
  }

  // optional string OilCurrency = 21;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oilcurrency().data(), this->oilcurrency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameInitResp.OilCurrency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->oilcurrency(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameInitResp)
}

::google::protobuf::uint8* GameInitResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameInitResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 LifeNum = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lifenum(), target);
  }

  // optional string GameNumerConfig = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamenumerconfig().data(), this->gamenumerconfig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameInitResp.GameNumerConfig");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gamenumerconfig(), target);
  }

  // required uint32 CheckLeftTime = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->checklefttime(), target);
  }

  // optional string Token = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameInitResp.Token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->token(), target);
  }

  // required int32 FriendCount = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->friendcount(), target);
  }

  // repeated .micromsg.UserGameInfo FriendList = 7;
  for (unsigned int i = 0, n = this->friendlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->friendlist(i), deterministic, target);
  }

  // required int32 WishCount = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->wishcount(), target);
  }

  // repeated .micromsg.UserGameWishInfo WishList = 9;
  for (unsigned int i = 0, n = this->wishlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->wishlist(i), deterministic, target);
  }

  // optional int32 GamePropsCount = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gamepropscount(), target);
  }

  // repeated .micromsg.GameUserPropsInfo GamePropsList = 11;
  for (unsigned int i = 0, n = this->gamepropslist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->gamepropslist(i), deterministic, target);
  }

  // optional int32 GameAnnouncementCount = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gameannouncementcount(), target);
  }

  // repeated .micromsg.GameAnnouncementInfo GameAnnouncementList = 13;
  for (unsigned int i = 0, n = this->gameannouncementlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->gameannouncementlist(i), deterministic, target);
  }

  // optional string PropsViewTip = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->propsviewtip().data(), this->propsviewtip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameInitResp.PropsViewTip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->propsviewtip(), target);
  }

  // optional string RankViewTip = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rankviewtip().data(), this->rankviewtip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameInitResp.RankViewTip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->rankviewtip(), target);
  }

  // optional uint32 GameCoinCount = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->gamecoincount(), target);
  }

  // optional uint32 ProductIdCount = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->productidcount(), target);
  }

  // repeated .micromsg.SKBuiltinString_t ProductIdList = 18;
  for (unsigned int i = 0, n = this->productidlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->productidlist(i), deterministic, target);
  }

  // optional string BuyEngineOilWording = 19;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyengineoilwording().data(), this->buyengineoilwording().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameInitResp.BuyEngineOilWording");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->buyengineoilwording(), target);
  }

  // optional string OilPrice = 20;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oilprice().data(), this->oilprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameInitResp.OilPrice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->oilprice(), target);
  }

  // optional string OilCurrency = 21;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oilcurrency().data(), this->oilcurrency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameInitResp.OilCurrency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->oilcurrency(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameInitResp)
  return target;
}

size_t GameInitResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameInitResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_lifenum()) {
    // required uint32 LifeNum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lifenum());
  }

  if (has_checklefttime()) {
    // required uint32 CheckLeftTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->checklefttime());
  }

  if (has_friendcount()) {
    // required int32 FriendCount = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->friendcount());
  }

  if (has_wishcount()) {
    // required int32 WishCount = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wishcount());
  }

  return total_size;
}
size_t GameInitResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameInitResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000f80) ^ 0x00000f80) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 LifeNum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lifenum());

    // required uint32 CheckLeftTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->checklefttime());

    // required int32 FriendCount = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->friendcount());

    // required int32 WishCount = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wishcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.UserGameInfo FriendList = 7;
  {
    unsigned int count = this->friendlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendlist(i));
    }
  }

  // repeated .micromsg.UserGameWishInfo WishList = 9;
  {
    unsigned int count = this->wishlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wishlist(i));
    }
  }

  // repeated .micromsg.GameUserPropsInfo GamePropsList = 11;
  {
    unsigned int count = this->gamepropslist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamepropslist(i));
    }
  }

  // repeated .micromsg.GameAnnouncementInfo GameAnnouncementList = 13;
  {
    unsigned int count = this->gameannouncementlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameannouncementlist(i));
    }
  }

  // repeated .micromsg.SKBuiltinString_t ProductIdList = 18;
  {
    unsigned int count = this->productidlist_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->productidlist(i));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string GameNumerConfig = 3;
    if (has_gamenumerconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamenumerconfig());
    }

    // optional string Token = 5;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string PropsViewTip = 14;
    if (has_propsviewtip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->propsviewtip());
    }

    // optional string RankViewTip = 15;
    if (has_rankviewtip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rankviewtip());
    }

    // optional string BuyEngineOilWording = 19;
    if (has_buyengineoilwording()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buyengineoilwording());
    }

    // optional string OilPrice = 20;
    if (has_oilprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oilprice());
    }

    // optional string OilCurrency = 21;
    if (has_oilcurrency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oilcurrency());
    }

  }
  if (_has_bits_[8 / 32] & 61440u) {
    // optional int32 GamePropsCount = 10;
    if (has_gamepropscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamepropscount());
    }

    // optional int32 GameAnnouncementCount = 12;
    if (has_gameannouncementcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameannouncementcount());
    }

    // optional uint32 GameCoinCount = 16;
    if (has_gamecoincount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamecoincount());
    }

    // optional uint32 ProductIdCount = 17;
    if (has_productidcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->productidcount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInitResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameInitResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GameInitResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameInitResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameInitResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameInitResp)
    MergeFrom(*source);
  }
}

void GameInitResp::MergeFrom(const GameInitResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameInitResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friendlist_.MergeFrom(from.friendlist_);
  wishlist_.MergeFrom(from.wishlist_);
  gamepropslist_.MergeFrom(from.gamepropslist_);
  gameannouncementlist_.MergeFrom(from.gameannouncementlist_);
  productidlist_.MergeFrom(from.productidlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gamenumerconfig();
      gamenumerconfig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamenumerconfig_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_propsviewtip();
      propsviewtip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.propsviewtip_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_rankviewtip();
      rankviewtip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rankviewtip_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_buyengineoilwording();
      buyengineoilwording_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buyengineoilwording_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_oilprice();
      oilprice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oilprice_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_oilcurrency();
      oilcurrency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oilcurrency_);
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      lifenum_ = from.lifenum_;
    }
    if (cached_has_bits & 0x00000200u) {
      checklefttime_ = from.checklefttime_;
    }
    if (cached_has_bits & 0x00000400u) {
      friendcount_ = from.friendcount_;
    }
    if (cached_has_bits & 0x00000800u) {
      wishcount_ = from.wishcount_;
    }
    if (cached_has_bits & 0x00001000u) {
      gamepropscount_ = from.gamepropscount_;
    }
    if (cached_has_bits & 0x00002000u) {
      gameannouncementcount_ = from.gameannouncementcount_;
    }
    if (cached_has_bits & 0x00004000u) {
      gamecoincount_ = from.gamecoincount_;
    }
    if (cached_has_bits & 0x00008000u) {
      productidcount_ = from.productidcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameInitResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameInitResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInitResp::CopyFrom(const GameInitResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameInitResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInitResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000f80) != 0x00000f80) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->wishlist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->gamepropslist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->gameannouncementlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GameInitResp::Swap(GameInitResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameInitResp::InternalSwap(GameInitResp* other) {
  friendlist_.InternalSwap(&other->friendlist_);
  wishlist_.InternalSwap(&other->wishlist_);
  gamepropslist_.InternalSwap(&other->gamepropslist_);
  gameannouncementlist_.InternalSwap(&other->gameannouncementlist_);
  productidlist_.InternalSwap(&other->productidlist_);
  gamenumerconfig_.Swap(&other->gamenumerconfig_);
  token_.Swap(&other->token_);
  propsviewtip_.Swap(&other->propsviewtip_);
  rankviewtip_.Swap(&other->rankviewtip_);
  buyengineoilwording_.Swap(&other->buyengineoilwording_);
  oilprice_.Swap(&other->oilprice_);
  oilcurrency_.Swap(&other->oilcurrency_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(lifenum_, other->lifenum_);
  std::swap(checklefttime_, other->checklefttime_);
  std::swap(friendcount_, other->friendcount_);
  std::swap(wishcount_, other->wishcount_);
  std::swap(gamepropscount_, other->gamepropscount_);
  std::swap(gameannouncementcount_, other->gameannouncementcount_);
  std::swap(gamecoincount_, other->gamecoincount_);
  std::swap(productidcount_, other->productidcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameInitResp::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameInitResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool GameInitResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GameInitResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000080u;
}
void GameInitResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000080u;
}
void GameInitResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GameInitResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GameInitResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GameInitResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameInitResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GameInitResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameInitResp.BaseResponse)
}

// required uint32 LifeNum = 2;
bool GameInitResp::has_lifenum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GameInitResp::set_has_lifenum() {
  _has_bits_[0] |= 0x00000100u;
}
void GameInitResp::clear_has_lifenum() {
  _has_bits_[0] &= ~0x00000100u;
}
void GameInitResp::clear_lifenum() {
  lifenum_ = 0u;
  clear_has_lifenum();
}
::google::protobuf::uint32 GameInitResp::lifenum() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.LifeNum)
  return lifenum_;
}
void GameInitResp::set_lifenum(::google::protobuf::uint32 value) {
  set_has_lifenum();
  lifenum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.LifeNum)
}

// optional string GameNumerConfig = 3;
bool GameInitResp::has_gamenumerconfig() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameInitResp::set_has_gamenumerconfig() {
  _has_bits_[0] |= 0x00000001u;
}
void GameInitResp::clear_has_gamenumerconfig() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameInitResp::clear_gamenumerconfig() {
  gamenumerconfig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamenumerconfig();
}
const ::std::string& GameInitResp::gamenumerconfig() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.GameNumerConfig)
  return gamenumerconfig_.GetNoArena();
}
void GameInitResp::set_gamenumerconfig(const ::std::string& value) {
  set_has_gamenumerconfig();
  gamenumerconfig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.GameNumerConfig)
}
#if LANG_CXX11
void GameInitResp::set_gamenumerconfig(::std::string&& value) {
  set_has_gamenumerconfig();
  gamenumerconfig_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameInitResp.GameNumerConfig)
}
#endif
void GameInitResp::set_gamenumerconfig(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gamenumerconfig();
  gamenumerconfig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameInitResp.GameNumerConfig)
}
void GameInitResp::set_gamenumerconfig(const char* value, size_t size) {
  set_has_gamenumerconfig();
  gamenumerconfig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameInitResp.GameNumerConfig)
}
::std::string* GameInitResp::mutable_gamenumerconfig() {
  set_has_gamenumerconfig();
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.GameNumerConfig)
  return gamenumerconfig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameInitResp::release_gamenumerconfig() {
  // @@protoc_insertion_point(field_release:micromsg.GameInitResp.GameNumerConfig)
  clear_has_gamenumerconfig();
  return gamenumerconfig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameInitResp::set_allocated_gamenumerconfig(::std::string* gamenumerconfig) {
  if (gamenumerconfig != NULL) {
    set_has_gamenumerconfig();
  } else {
    clear_has_gamenumerconfig();
  }
  gamenumerconfig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamenumerconfig);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameInitResp.GameNumerConfig)
}

// required uint32 CheckLeftTime = 4;
bool GameInitResp::has_checklefttime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void GameInitResp::set_has_checklefttime() {
  _has_bits_[0] |= 0x00000200u;
}
void GameInitResp::clear_has_checklefttime() {
  _has_bits_[0] &= ~0x00000200u;
}
void GameInitResp::clear_checklefttime() {
  checklefttime_ = 0u;
  clear_has_checklefttime();
}
::google::protobuf::uint32 GameInitResp::checklefttime() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.CheckLeftTime)
  return checklefttime_;
}
void GameInitResp::set_checklefttime(::google::protobuf::uint32 value) {
  set_has_checklefttime();
  checklefttime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.CheckLeftTime)
}

// optional string Token = 5;
bool GameInitResp::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameInitResp::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
void GameInitResp::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameInitResp::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& GameInitResp::token() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.Token)
  return token_.GetNoArena();
}
void GameInitResp::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.Token)
}
#if LANG_CXX11
void GameInitResp::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameInitResp.Token)
}
#endif
void GameInitResp::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameInitResp.Token)
}
void GameInitResp::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameInitResp.Token)
}
::std::string* GameInitResp::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameInitResp::release_token() {
  // @@protoc_insertion_point(field_release:micromsg.GameInitResp.Token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameInitResp::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameInitResp.Token)
}

// required int32 FriendCount = 6;
bool GameInitResp::has_friendcount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void GameInitResp::set_has_friendcount() {
  _has_bits_[0] |= 0x00000400u;
}
void GameInitResp::clear_has_friendcount() {
  _has_bits_[0] &= ~0x00000400u;
}
void GameInitResp::clear_friendcount() {
  friendcount_ = 0;
  clear_has_friendcount();
}
::google::protobuf::int32 GameInitResp::friendcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.FriendCount)
  return friendcount_;
}
void GameInitResp::set_friendcount(::google::protobuf::int32 value) {
  set_has_friendcount();
  friendcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.FriendCount)
}

// repeated .micromsg.UserGameInfo FriendList = 7;
int GameInitResp::friendlist_size() const {
  return friendlist_.size();
}
void GameInitResp::clear_friendlist() {
  friendlist_.Clear();
}
const ::micromsg::UserGameInfo& GameInitResp::friendlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.FriendList)
  return friendlist_.Get(index);
}
::micromsg::UserGameInfo* GameInitResp::mutable_friendlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.FriendList)
  return friendlist_.Mutable(index);
}
::micromsg::UserGameInfo* GameInitResp::add_friendlist() {
  // @@protoc_insertion_point(field_add:micromsg.GameInitResp.FriendList)
  return friendlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::UserGameInfo >*
GameInitResp::mutable_friendlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameInitResp.FriendList)
  return &friendlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameInfo >&
GameInitResp::friendlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameInitResp.FriendList)
  return friendlist_;
}

// required int32 WishCount = 8;
bool GameInitResp::has_wishcount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void GameInitResp::set_has_wishcount() {
  _has_bits_[0] |= 0x00000800u;
}
void GameInitResp::clear_has_wishcount() {
  _has_bits_[0] &= ~0x00000800u;
}
void GameInitResp::clear_wishcount() {
  wishcount_ = 0;
  clear_has_wishcount();
}
::google::protobuf::int32 GameInitResp::wishcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.WishCount)
  return wishcount_;
}
void GameInitResp::set_wishcount(::google::protobuf::int32 value) {
  set_has_wishcount();
  wishcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.WishCount)
}

// repeated .micromsg.UserGameWishInfo WishList = 9;
int GameInitResp::wishlist_size() const {
  return wishlist_.size();
}
void GameInitResp::clear_wishlist() {
  wishlist_.Clear();
}
const ::micromsg::UserGameWishInfo& GameInitResp::wishlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.WishList)
  return wishlist_.Get(index);
}
::micromsg::UserGameWishInfo* GameInitResp::mutable_wishlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.WishList)
  return wishlist_.Mutable(index);
}
::micromsg::UserGameWishInfo* GameInitResp::add_wishlist() {
  // @@protoc_insertion_point(field_add:micromsg.GameInitResp.WishList)
  return wishlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::UserGameWishInfo >*
GameInitResp::mutable_wishlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameInitResp.WishList)
  return &wishlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameWishInfo >&
GameInitResp::wishlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameInitResp.WishList)
  return wishlist_;
}

// optional int32 GamePropsCount = 10;
bool GameInitResp::has_gamepropscount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void GameInitResp::set_has_gamepropscount() {
  _has_bits_[0] |= 0x00001000u;
}
void GameInitResp::clear_has_gamepropscount() {
  _has_bits_[0] &= ~0x00001000u;
}
void GameInitResp::clear_gamepropscount() {
  gamepropscount_ = 0;
  clear_has_gamepropscount();
}
::google::protobuf::int32 GameInitResp::gamepropscount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.GamePropsCount)
  return gamepropscount_;
}
void GameInitResp::set_gamepropscount(::google::protobuf::int32 value) {
  set_has_gamepropscount();
  gamepropscount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.GamePropsCount)
}

// repeated .micromsg.GameUserPropsInfo GamePropsList = 11;
int GameInitResp::gamepropslist_size() const {
  return gamepropslist_.size();
}
void GameInitResp::clear_gamepropslist() {
  gamepropslist_.Clear();
}
const ::micromsg::GameUserPropsInfo& GameInitResp::gamepropslist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.GamePropsList)
  return gamepropslist_.Get(index);
}
::micromsg::GameUserPropsInfo* GameInitResp::mutable_gamepropslist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.GamePropsList)
  return gamepropslist_.Mutable(index);
}
::micromsg::GameUserPropsInfo* GameInitResp::add_gamepropslist() {
  // @@protoc_insertion_point(field_add:micromsg.GameInitResp.GamePropsList)
  return gamepropslist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::GameUserPropsInfo >*
GameInitResp::mutable_gamepropslist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameInitResp.GamePropsList)
  return &gamepropslist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::GameUserPropsInfo >&
GameInitResp::gamepropslist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameInitResp.GamePropsList)
  return gamepropslist_;
}

// optional int32 GameAnnouncementCount = 12;
bool GameInitResp::has_gameannouncementcount() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void GameInitResp::set_has_gameannouncementcount() {
  _has_bits_[0] |= 0x00002000u;
}
void GameInitResp::clear_has_gameannouncementcount() {
  _has_bits_[0] &= ~0x00002000u;
}
void GameInitResp::clear_gameannouncementcount() {
  gameannouncementcount_ = 0;
  clear_has_gameannouncementcount();
}
::google::protobuf::int32 GameInitResp::gameannouncementcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.GameAnnouncementCount)
  return gameannouncementcount_;
}
void GameInitResp::set_gameannouncementcount(::google::protobuf::int32 value) {
  set_has_gameannouncementcount();
  gameannouncementcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.GameAnnouncementCount)
}

// repeated .micromsg.GameAnnouncementInfo GameAnnouncementList = 13;
int GameInitResp::gameannouncementlist_size() const {
  return gameannouncementlist_.size();
}
void GameInitResp::clear_gameannouncementlist() {
  gameannouncementlist_.Clear();
}
const ::micromsg::GameAnnouncementInfo& GameInitResp::gameannouncementlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.GameAnnouncementList)
  return gameannouncementlist_.Get(index);
}
::micromsg::GameAnnouncementInfo* GameInitResp::mutable_gameannouncementlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.GameAnnouncementList)
  return gameannouncementlist_.Mutable(index);
}
::micromsg::GameAnnouncementInfo* GameInitResp::add_gameannouncementlist() {
  // @@protoc_insertion_point(field_add:micromsg.GameInitResp.GameAnnouncementList)
  return gameannouncementlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::GameAnnouncementInfo >*
GameInitResp::mutable_gameannouncementlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameInitResp.GameAnnouncementList)
  return &gameannouncementlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::GameAnnouncementInfo >&
GameInitResp::gameannouncementlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameInitResp.GameAnnouncementList)
  return gameannouncementlist_;
}

// optional string PropsViewTip = 14;
bool GameInitResp::has_propsviewtip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameInitResp::set_has_propsviewtip() {
  _has_bits_[0] |= 0x00000004u;
}
void GameInitResp::clear_has_propsviewtip() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameInitResp::clear_propsviewtip() {
  propsviewtip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_propsviewtip();
}
const ::std::string& GameInitResp::propsviewtip() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.PropsViewTip)
  return propsviewtip_.GetNoArena();
}
void GameInitResp::set_propsviewtip(const ::std::string& value) {
  set_has_propsviewtip();
  propsviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.PropsViewTip)
}
#if LANG_CXX11
void GameInitResp::set_propsviewtip(::std::string&& value) {
  set_has_propsviewtip();
  propsviewtip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameInitResp.PropsViewTip)
}
#endif
void GameInitResp::set_propsviewtip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_propsviewtip();
  propsviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameInitResp.PropsViewTip)
}
void GameInitResp::set_propsviewtip(const char* value, size_t size) {
  set_has_propsviewtip();
  propsviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameInitResp.PropsViewTip)
}
::std::string* GameInitResp::mutable_propsviewtip() {
  set_has_propsviewtip();
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.PropsViewTip)
  return propsviewtip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameInitResp::release_propsviewtip() {
  // @@protoc_insertion_point(field_release:micromsg.GameInitResp.PropsViewTip)
  clear_has_propsviewtip();
  return propsviewtip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameInitResp::set_allocated_propsviewtip(::std::string* propsviewtip) {
  if (propsviewtip != NULL) {
    set_has_propsviewtip();
  } else {
    clear_has_propsviewtip();
  }
  propsviewtip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), propsviewtip);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameInitResp.PropsViewTip)
}

// optional string RankViewTip = 15;
bool GameInitResp::has_rankviewtip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameInitResp::set_has_rankviewtip() {
  _has_bits_[0] |= 0x00000008u;
}
void GameInitResp::clear_has_rankviewtip() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameInitResp::clear_rankviewtip() {
  rankviewtip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rankviewtip();
}
const ::std::string& GameInitResp::rankviewtip() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.RankViewTip)
  return rankviewtip_.GetNoArena();
}
void GameInitResp::set_rankviewtip(const ::std::string& value) {
  set_has_rankviewtip();
  rankviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.RankViewTip)
}
#if LANG_CXX11
void GameInitResp::set_rankviewtip(::std::string&& value) {
  set_has_rankviewtip();
  rankviewtip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameInitResp.RankViewTip)
}
#endif
void GameInitResp::set_rankviewtip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rankviewtip();
  rankviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameInitResp.RankViewTip)
}
void GameInitResp::set_rankviewtip(const char* value, size_t size) {
  set_has_rankviewtip();
  rankviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameInitResp.RankViewTip)
}
::std::string* GameInitResp::mutable_rankviewtip() {
  set_has_rankviewtip();
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.RankViewTip)
  return rankviewtip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameInitResp::release_rankviewtip() {
  // @@protoc_insertion_point(field_release:micromsg.GameInitResp.RankViewTip)
  clear_has_rankviewtip();
  return rankviewtip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameInitResp::set_allocated_rankviewtip(::std::string* rankviewtip) {
  if (rankviewtip != NULL) {
    set_has_rankviewtip();
  } else {
    clear_has_rankviewtip();
  }
  rankviewtip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rankviewtip);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameInitResp.RankViewTip)
}

// optional uint32 GameCoinCount = 16;
bool GameInitResp::has_gamecoincount() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void GameInitResp::set_has_gamecoincount() {
  _has_bits_[0] |= 0x00004000u;
}
void GameInitResp::clear_has_gamecoincount() {
  _has_bits_[0] &= ~0x00004000u;
}
void GameInitResp::clear_gamecoincount() {
  gamecoincount_ = 0u;
  clear_has_gamecoincount();
}
::google::protobuf::uint32 GameInitResp::gamecoincount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.GameCoinCount)
  return gamecoincount_;
}
void GameInitResp::set_gamecoincount(::google::protobuf::uint32 value) {
  set_has_gamecoincount();
  gamecoincount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.GameCoinCount)
}

// optional uint32 ProductIdCount = 17;
bool GameInitResp::has_productidcount() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void GameInitResp::set_has_productidcount() {
  _has_bits_[0] |= 0x00008000u;
}
void GameInitResp::clear_has_productidcount() {
  _has_bits_[0] &= ~0x00008000u;
}
void GameInitResp::clear_productidcount() {
  productidcount_ = 0u;
  clear_has_productidcount();
}
::google::protobuf::uint32 GameInitResp::productidcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.ProductIdCount)
  return productidcount_;
}
void GameInitResp::set_productidcount(::google::protobuf::uint32 value) {
  set_has_productidcount();
  productidcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.ProductIdCount)
}

// repeated .micromsg.SKBuiltinString_t ProductIdList = 18;
int GameInitResp::productidlist_size() const {
  return productidlist_.size();
}
void GameInitResp::clear_productidlist() {
  productidlist_.Clear();
}
const ::micromsg::SKBuiltinString_t& GameInitResp::productidlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.ProductIdList)
  return productidlist_.Get(index);
}
::micromsg::SKBuiltinString_t* GameInitResp::mutable_productidlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.ProductIdList)
  return productidlist_.Mutable(index);
}
::micromsg::SKBuiltinString_t* GameInitResp::add_productidlist() {
  // @@protoc_insertion_point(field_add:micromsg.GameInitResp.ProductIdList)
  return productidlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
GameInitResp::mutable_productidlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameInitResp.ProductIdList)
  return &productidlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
GameInitResp::productidlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameInitResp.ProductIdList)
  return productidlist_;
}

// optional string BuyEngineOilWording = 19;
bool GameInitResp::has_buyengineoilwording() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GameInitResp::set_has_buyengineoilwording() {
  _has_bits_[0] |= 0x00000010u;
}
void GameInitResp::clear_has_buyengineoilwording() {
  _has_bits_[0] &= ~0x00000010u;
}
void GameInitResp::clear_buyengineoilwording() {
  buyengineoilwording_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buyengineoilwording();
}
const ::std::string& GameInitResp::buyengineoilwording() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.BuyEngineOilWording)
  return buyengineoilwording_.GetNoArena();
}
void GameInitResp::set_buyengineoilwording(const ::std::string& value) {
  set_has_buyengineoilwording();
  buyengineoilwording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.BuyEngineOilWording)
}
#if LANG_CXX11
void GameInitResp::set_buyengineoilwording(::std::string&& value) {
  set_has_buyengineoilwording();
  buyengineoilwording_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameInitResp.BuyEngineOilWording)
}
#endif
void GameInitResp::set_buyengineoilwording(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_buyengineoilwording();
  buyengineoilwording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameInitResp.BuyEngineOilWording)
}
void GameInitResp::set_buyengineoilwording(const char* value, size_t size) {
  set_has_buyengineoilwording();
  buyengineoilwording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameInitResp.BuyEngineOilWording)
}
::std::string* GameInitResp::mutable_buyengineoilwording() {
  set_has_buyengineoilwording();
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.BuyEngineOilWording)
  return buyengineoilwording_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameInitResp::release_buyengineoilwording() {
  // @@protoc_insertion_point(field_release:micromsg.GameInitResp.BuyEngineOilWording)
  clear_has_buyengineoilwording();
  return buyengineoilwording_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameInitResp::set_allocated_buyengineoilwording(::std::string* buyengineoilwording) {
  if (buyengineoilwording != NULL) {
    set_has_buyengineoilwording();
  } else {
    clear_has_buyengineoilwording();
  }
  buyengineoilwording_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buyengineoilwording);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameInitResp.BuyEngineOilWording)
}

// optional string OilPrice = 20;
bool GameInitResp::has_oilprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GameInitResp::set_has_oilprice() {
  _has_bits_[0] |= 0x00000020u;
}
void GameInitResp::clear_has_oilprice() {
  _has_bits_[0] &= ~0x00000020u;
}
void GameInitResp::clear_oilprice() {
  oilprice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_oilprice();
}
const ::std::string& GameInitResp::oilprice() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.OilPrice)
  return oilprice_.GetNoArena();
}
void GameInitResp::set_oilprice(const ::std::string& value) {
  set_has_oilprice();
  oilprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.OilPrice)
}
#if LANG_CXX11
void GameInitResp::set_oilprice(::std::string&& value) {
  set_has_oilprice();
  oilprice_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameInitResp.OilPrice)
}
#endif
void GameInitResp::set_oilprice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_oilprice();
  oilprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameInitResp.OilPrice)
}
void GameInitResp::set_oilprice(const char* value, size_t size) {
  set_has_oilprice();
  oilprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameInitResp.OilPrice)
}
::std::string* GameInitResp::mutable_oilprice() {
  set_has_oilprice();
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.OilPrice)
  return oilprice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameInitResp::release_oilprice() {
  // @@protoc_insertion_point(field_release:micromsg.GameInitResp.OilPrice)
  clear_has_oilprice();
  return oilprice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameInitResp::set_allocated_oilprice(::std::string* oilprice) {
  if (oilprice != NULL) {
    set_has_oilprice();
  } else {
    clear_has_oilprice();
  }
  oilprice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oilprice);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameInitResp.OilPrice)
}

// optional string OilCurrency = 21;
bool GameInitResp::has_oilcurrency() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GameInitResp::set_has_oilcurrency() {
  _has_bits_[0] |= 0x00000040u;
}
void GameInitResp::clear_has_oilcurrency() {
  _has_bits_[0] &= ~0x00000040u;
}
void GameInitResp::clear_oilcurrency() {
  oilcurrency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_oilcurrency();
}
const ::std::string& GameInitResp::oilcurrency() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.OilCurrency)
  return oilcurrency_.GetNoArena();
}
void GameInitResp::set_oilcurrency(const ::std::string& value) {
  set_has_oilcurrency();
  oilcurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.OilCurrency)
}
#if LANG_CXX11
void GameInitResp::set_oilcurrency(::std::string&& value) {
  set_has_oilcurrency();
  oilcurrency_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameInitResp.OilCurrency)
}
#endif
void GameInitResp::set_oilcurrency(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_oilcurrency();
  oilcurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameInitResp.OilCurrency)
}
void GameInitResp::set_oilcurrency(const char* value, size_t size) {
  set_has_oilcurrency();
  oilcurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameInitResp.OilCurrency)
}
::std::string* GameInitResp::mutable_oilcurrency() {
  set_has_oilcurrency();
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.OilCurrency)
  return oilcurrency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameInitResp::release_oilcurrency() {
  // @@protoc_insertion_point(field_release:micromsg.GameInitResp.OilCurrency)
  clear_has_oilcurrency();
  return oilcurrency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameInitResp::set_allocated_oilcurrency(::std::string* oilcurrency) {
  if (oilcurrency != NULL) {
    set_has_oilcurrency();
  } else {
    clear_has_oilcurrency();
  }
  oilcurrency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oilcurrency);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameInitResp.OilCurrency)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEndReq::kBaseRequestFieldNumber;
const int GameEndReq::kAppIDFieldNumber;
const int GameEndReq::kCountFieldNumber;
const int GameEndReq::kEnemyKilledFieldNumber;
const int GameEndReq::kLocalScoreFieldNumber;
const int GameEndReq::kConsumeTimeFieldNumber;
const int GameEndReq::kTokenFieldNumber;
const int GameEndReq::kDeadCountFieldNumber;
const int GameEndReq::kGameConsumePropsCountFieldNumber;
const int GameEndReq::kGameConsumePropsListFieldNumber;
const int GameEndReq::kGameStartTimeFieldNumber;
const int GameEndReq::kGameEndTimeFieldNumber;
const int GameEndReq::kShieldNumFieldNumber;
const int GameEndReq::kTotalShotsFieldNumber;
const int GameEndReq::kGameCoinCountFieldNumber;
const int GameEndReq::kClientUseReviveNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEndReq::GameEndReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameEndReq)
}
GameEndReq::GameEndReq(const GameEndReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      enemykilled_(from.enemykilled_),
      gameconsumepropslist_(from.gameconsumepropslist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_appid()) {
    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&count_, &from.count_,
    reinterpret_cast<char*>(&clientuserevivenum_) -
    reinterpret_cast<char*>(&count_) + sizeof(clientuserevivenum_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GameEndReq)
}

void GameEndReq::SharedCtor() {
  _cached_size_ = 0;
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&clientuserevivenum_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(clientuserevivenum_));
}

GameEndReq::~GameEndReq() {
  // @@protoc_insertion_point(destructor:micromsg.GameEndReq)
  SharedDtor();
}

void GameEndReq::SharedDtor() {
  appid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GameEndReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEndReq::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEndReq& GameEndReq::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEndReq* GameEndReq::New(::google::protobuf::Arena* arena) const {
  GameEndReq* n = new GameEndReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEndReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameEndReq)
  enemykilled_.Clear();
  gameconsumepropslist_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_appid()) {
      GOOGLE_DCHECK(!appid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*appid_.UnsafeRawStringPointer())->clear();
    }
    if (has_token()) {
      GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&count_, 0, reinterpret_cast<char*>(&gameconsumepropscount_) -
      reinterpret_cast<char*>(&count_) + sizeof(gameconsumepropscount_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&gamestarttime_, 0, reinterpret_cast<char*>(&clientuserevivenum_) -
      reinterpret_cast<char*>(&gamestarttime_) + sizeof(clientuserevivenum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEndReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameEndReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AppID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameEndReq.AppID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.EnemyGameKilled EnemyKilled = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemykilled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 LocalScore = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_localscore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &localscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ConsumeTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_consumetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consumetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Token = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameEndReq.Token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 DeadCount = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_deadcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deadcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 GameConsumePropsCount = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_gameconsumepropscount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameconsumepropscount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.GameConsumeProps GameConsumePropsList = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gameconsumepropslist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 GameStartTime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_gamestarttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamestarttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 GameEndTime = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_gameendtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameendtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ShieldNum = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_shieldnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shieldnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TotalShots = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_totalshots();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalshots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 GameCoinCount = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_gamecoincount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamecoincount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ClientUseReviveNum = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_clientuserevivenum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientuserevivenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameEndReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameEndReq)
  return false;
#undef DO_
}

void GameEndReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameEndReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameEndReq.AppID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appid(), output);
  }

  // required int32 Count = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // repeated .micromsg.EnemyGameKilled EnemyKilled = 4;
  for (unsigned int i = 0, n = this->enemykilled_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->enemykilled(i), output);
  }

  // required uint32 LocalScore = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->localscore(), output);
  }

  // required uint32 ConsumeTime = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->consumetime(), output);
  }

  // optional string Token = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameEndReq.Token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->token(), output);
  }

  // optional uint32 DeadCount = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->deadcount(), output);
  }

  // optional int32 GameConsumePropsCount = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gameconsumepropscount(), output);
  }

  // repeated .micromsg.GameConsumeProps GameConsumePropsList = 10;
  for (unsigned int i = 0, n = this->gameconsumepropslist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->gameconsumepropslist(i), output);
  }

  // optional uint32 GameStartTime = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->gamestarttime(), output);
  }

  // optional uint32 GameEndTime = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gameendtime(), output);
  }

  // optional uint32 ShieldNum = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->shieldnum(), output);
  }

  // optional uint32 TotalShots = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->totalshots(), output);
  }

  // optional uint32 GameCoinCount = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->gamecoincount(), output);
  }

  // optional uint32 ClientUseReviveNum = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->clientuserevivenum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameEndReq)
}

::google::protobuf::uint8* GameEndReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameEndReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameEndReq.AppID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appid(), target);
  }

  // required int32 Count = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // repeated .micromsg.EnemyGameKilled EnemyKilled = 4;
  for (unsigned int i = 0, n = this->enemykilled_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->enemykilled(i), deterministic, target);
  }

  // required uint32 LocalScore = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->localscore(), target);
  }

  // required uint32 ConsumeTime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->consumetime(), target);
  }

  // optional string Token = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameEndReq.Token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->token(), target);
  }

  // optional uint32 DeadCount = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->deadcount(), target);
  }

  // optional int32 GameConsumePropsCount = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gameconsumepropscount(), target);
  }

  // repeated .micromsg.GameConsumeProps GameConsumePropsList = 10;
  for (unsigned int i = 0, n = this->gameconsumepropslist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->gameconsumepropslist(i), deterministic, target);
  }

  // optional uint32 GameStartTime = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->gamestarttime(), target);
  }

  // optional uint32 GameEndTime = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->gameendtime(), target);
  }

  // optional uint32 ShieldNum = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->shieldnum(), target);
  }

  // optional uint32 TotalShots = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->totalshots(), target);
  }

  // optional uint32 GameCoinCount = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->gamecoincount(), target);
  }

  // optional uint32 ClientUseReviveNum = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->clientuserevivenum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameEndReq)
  return target;
}

size_t GameEndReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameEndReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_count()) {
    // required int32 Count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  if (has_localscore()) {
    // required uint32 LocalScore = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->localscore());
  }

  if (has_consumetime()) {
    // required uint32 ConsumeTime = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->consumetime());
  }

  return total_size;
}
size_t GameEndReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameEndReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int32 Count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

    // required uint32 LocalScore = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->localscore());

    // required uint32 ConsumeTime = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->consumetime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.EnemyGameKilled EnemyKilled = 4;
  {
    unsigned int count = this->enemykilled_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enemykilled(i));
    }
  }

  // repeated .micromsg.GameConsumeProps GameConsumePropsList = 10;
  {
    unsigned int count = this->gameconsumepropslist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameconsumepropslist(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string AppID = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

    // optional string Token = 7;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional uint32 DeadCount = 8;
    if (has_deadcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deadcount());
    }

    // optional int32 GameConsumePropsCount = 9;
    if (has_gameconsumepropscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameconsumepropscount());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional uint32 GameStartTime = 11;
    if (has_gamestarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamestarttime());
    }

    // optional uint32 GameEndTime = 12;
    if (has_gameendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameendtime());
    }

    // optional uint32 ShieldNum = 13;
    if (has_shieldnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shieldnum());
    }

    // optional uint32 TotalShots = 14;
    if (has_totalshots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalshots());
    }

    // optional uint32 GameCoinCount = 15;
    if (has_gamecoincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamecoincount());
    }

    // optional uint32 ClientUseReviveNum = 16;
    if (has_clientuserevivenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientuserevivenum());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEndReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameEndReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEndReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEndReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameEndReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameEndReq)
    MergeFrom(*source);
  }
}

void GameEndReq::MergeFrom(const GameEndReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameEndReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enemykilled_.MergeFrom(from.enemykilled_);
  gameconsumepropslist_.MergeFrom(from.gameconsumepropslist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_appid();
      appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000010u) {
      localscore_ = from.localscore_;
    }
    if (cached_has_bits & 0x00000020u) {
      consumetime_ = from.consumetime_;
    }
    if (cached_has_bits & 0x00000040u) {
      deadcount_ = from.deadcount_;
    }
    if (cached_has_bits & 0x00000080u) {
      gameconsumepropscount_ = from.gameconsumepropscount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      gamestarttime_ = from.gamestarttime_;
    }
    if (cached_has_bits & 0x00000200u) {
      gameendtime_ = from.gameendtime_;
    }
    if (cached_has_bits & 0x00000400u) {
      shieldnum_ = from.shieldnum_;
    }
    if (cached_has_bits & 0x00000800u) {
      totalshots_ = from.totalshots_;
    }
    if (cached_has_bits & 0x00001000u) {
      gamecoincount_ = from.gamecoincount_;
    }
    if (cached_has_bits & 0x00002000u) {
      clientuserevivenum_ = from.clientuserevivenum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEndReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameEndReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEndReq::CopyFrom(const GameEndReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameEndReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEndReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003c) != 0x0000003c) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->enemykilled())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->gameconsumepropslist())) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GameEndReq::Swap(GameEndReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEndReq::InternalSwap(GameEndReq* other) {
  enemykilled_.InternalSwap(&other->enemykilled_);
  gameconsumepropslist_.InternalSwap(&other->gameconsumepropslist_);
  appid_.Swap(&other->appid_);
  token_.Swap(&other->token_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(count_, other->count_);
  std::swap(localscore_, other->localscore_);
  std::swap(consumetime_, other->consumetime_);
  std::swap(deadcount_, other->deadcount_);
  std::swap(gameconsumepropscount_, other->gameconsumepropscount_);
  std::swap(gamestarttime_, other->gamestarttime_);
  std::swap(gameendtime_, other->gameendtime_);
  std::swap(shieldnum_, other->shieldnum_);
  std::swap(totalshots_, other->totalshots_);
  std::swap(gamecoincount_, other->gamecoincount_);
  std::swap(clientuserevivenum_, other->clientuserevivenum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEndReq::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEndReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool GameEndReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEndReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEndReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEndReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GameEndReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GameEndReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameEndReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GameEndReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameEndReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GameEndReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameEndReq.BaseRequest)
}

// optional string AppID = 2;
bool GameEndReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEndReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEndReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEndReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
const ::std::string& GameEndReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.AppID)
  return appid_.GetNoArena();
}
void GameEndReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.AppID)
}
#if LANG_CXX11
void GameEndReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameEndReq.AppID)
}
#endif
void GameEndReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameEndReq.AppID)
}
void GameEndReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameEndReq.AppID)
}
::std::string* GameEndReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameEndReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameEndReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameEndReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameEndReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameEndReq.AppID)
}

// required int32 Count = 3;
bool GameEndReq::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameEndReq::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
void GameEndReq::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameEndReq::clear_count() {
  count_ = 0;
  clear_has_count();
}
::google::protobuf::int32 GameEndReq::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.Count)
  return count_;
}
void GameEndReq::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.Count)
}

// repeated .micromsg.EnemyGameKilled EnemyKilled = 4;
int GameEndReq::enemykilled_size() const {
  return enemykilled_.size();
}
void GameEndReq::clear_enemykilled() {
  enemykilled_.Clear();
}
const ::micromsg::EnemyGameKilled& GameEndReq::enemykilled(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.EnemyKilled)
  return enemykilled_.Get(index);
}
::micromsg::EnemyGameKilled* GameEndReq::mutable_enemykilled(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameEndReq.EnemyKilled)
  return enemykilled_.Mutable(index);
}
::micromsg::EnemyGameKilled* GameEndReq::add_enemykilled() {
  // @@protoc_insertion_point(field_add:micromsg.GameEndReq.EnemyKilled)
  return enemykilled_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::EnemyGameKilled >*
GameEndReq::mutable_enemykilled() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameEndReq.EnemyKilled)
  return &enemykilled_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::EnemyGameKilled >&
GameEndReq::enemykilled() const {
  // @@protoc_insertion_point(field_list:micromsg.GameEndReq.EnemyKilled)
  return enemykilled_;
}

// required uint32 LocalScore = 5;
bool GameEndReq::has_localscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GameEndReq::set_has_localscore() {
  _has_bits_[0] |= 0x00000010u;
}
void GameEndReq::clear_has_localscore() {
  _has_bits_[0] &= ~0x00000010u;
}
void GameEndReq::clear_localscore() {
  localscore_ = 0u;
  clear_has_localscore();
}
::google::protobuf::uint32 GameEndReq::localscore() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.LocalScore)
  return localscore_;
}
void GameEndReq::set_localscore(::google::protobuf::uint32 value) {
  set_has_localscore();
  localscore_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.LocalScore)
}

// required uint32 ConsumeTime = 6;
bool GameEndReq::has_consumetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GameEndReq::set_has_consumetime() {
  _has_bits_[0] |= 0x00000020u;
}
void GameEndReq::clear_has_consumetime() {
  _has_bits_[0] &= ~0x00000020u;
}
void GameEndReq::clear_consumetime() {
  consumetime_ = 0u;
  clear_has_consumetime();
}
::google::protobuf::uint32 GameEndReq::consumetime() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.ConsumeTime)
  return consumetime_;
}
void GameEndReq::set_consumetime(::google::protobuf::uint32 value) {
  set_has_consumetime();
  consumetime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.ConsumeTime)
}

// optional string Token = 7;
bool GameEndReq::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEndReq::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEndReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEndReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& GameEndReq::token() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.Token)
  return token_.GetNoArena();
}
void GameEndReq::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.Token)
}
#if LANG_CXX11
void GameEndReq::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameEndReq.Token)
}
#endif
void GameEndReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameEndReq.Token)
}
void GameEndReq::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameEndReq.Token)
}
::std::string* GameEndReq::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:micromsg.GameEndReq.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameEndReq::release_token() {
  // @@protoc_insertion_point(field_release:micromsg.GameEndReq.Token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameEndReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameEndReq.Token)
}

// optional uint32 DeadCount = 8;
bool GameEndReq::has_deadcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GameEndReq::set_has_deadcount() {
  _has_bits_[0] |= 0x00000040u;
}
void GameEndReq::clear_has_deadcount() {
  _has_bits_[0] &= ~0x00000040u;
}
void GameEndReq::clear_deadcount() {
  deadcount_ = 0u;
  clear_has_deadcount();
}
::google::protobuf::uint32 GameEndReq::deadcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.DeadCount)
  return deadcount_;
}
void GameEndReq::set_deadcount(::google::protobuf::uint32 value) {
  set_has_deadcount();
  deadcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.DeadCount)
}

// optional int32 GameConsumePropsCount = 9;
bool GameEndReq::has_gameconsumepropscount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GameEndReq::set_has_gameconsumepropscount() {
  _has_bits_[0] |= 0x00000080u;
}
void GameEndReq::clear_has_gameconsumepropscount() {
  _has_bits_[0] &= ~0x00000080u;
}
void GameEndReq::clear_gameconsumepropscount() {
  gameconsumepropscount_ = 0;
  clear_has_gameconsumepropscount();
}
::google::protobuf::int32 GameEndReq::gameconsumepropscount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.GameConsumePropsCount)
  return gameconsumepropscount_;
}
void GameEndReq::set_gameconsumepropscount(::google::protobuf::int32 value) {
  set_has_gameconsumepropscount();
  gameconsumepropscount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.GameConsumePropsCount)
}

// repeated .micromsg.GameConsumeProps GameConsumePropsList = 10;
int GameEndReq::gameconsumepropslist_size() const {
  return gameconsumepropslist_.size();
}
void GameEndReq::clear_gameconsumepropslist() {
  gameconsumepropslist_.Clear();
}
const ::micromsg::GameConsumeProps& GameEndReq::gameconsumepropslist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.GameConsumePropsList)
  return gameconsumepropslist_.Get(index);
}
::micromsg::GameConsumeProps* GameEndReq::mutable_gameconsumepropslist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameEndReq.GameConsumePropsList)
  return gameconsumepropslist_.Mutable(index);
}
::micromsg::GameConsumeProps* GameEndReq::add_gameconsumepropslist() {
  // @@protoc_insertion_point(field_add:micromsg.GameEndReq.GameConsumePropsList)
  return gameconsumepropslist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::GameConsumeProps >*
GameEndReq::mutable_gameconsumepropslist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameEndReq.GameConsumePropsList)
  return &gameconsumepropslist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::GameConsumeProps >&
GameEndReq::gameconsumepropslist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameEndReq.GameConsumePropsList)
  return gameconsumepropslist_;
}

// optional uint32 GameStartTime = 11;
bool GameEndReq::has_gamestarttime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GameEndReq::set_has_gamestarttime() {
  _has_bits_[0] |= 0x00000100u;
}
void GameEndReq::clear_has_gamestarttime() {
  _has_bits_[0] &= ~0x00000100u;
}
void GameEndReq::clear_gamestarttime() {
  gamestarttime_ = 0u;
  clear_has_gamestarttime();
}
::google::protobuf::uint32 GameEndReq::gamestarttime() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.GameStartTime)
  return gamestarttime_;
}
void GameEndReq::set_gamestarttime(::google::protobuf::uint32 value) {
  set_has_gamestarttime();
  gamestarttime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.GameStartTime)
}

// optional uint32 GameEndTime = 12;
bool GameEndReq::has_gameendtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void GameEndReq::set_has_gameendtime() {
  _has_bits_[0] |= 0x00000200u;
}
void GameEndReq::clear_has_gameendtime() {
  _has_bits_[0] &= ~0x00000200u;
}
void GameEndReq::clear_gameendtime() {
  gameendtime_ = 0u;
  clear_has_gameendtime();
}
::google::protobuf::uint32 GameEndReq::gameendtime() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.GameEndTime)
  return gameendtime_;
}
void GameEndReq::set_gameendtime(::google::protobuf::uint32 value) {
  set_has_gameendtime();
  gameendtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.GameEndTime)
}

// optional uint32 ShieldNum = 13;
bool GameEndReq::has_shieldnum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void GameEndReq::set_has_shieldnum() {
  _has_bits_[0] |= 0x00000400u;
}
void GameEndReq::clear_has_shieldnum() {
  _has_bits_[0] &= ~0x00000400u;
}
void GameEndReq::clear_shieldnum() {
  shieldnum_ = 0u;
  clear_has_shieldnum();
}
::google::protobuf::uint32 GameEndReq::shieldnum() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.ShieldNum)
  return shieldnum_;
}
void GameEndReq::set_shieldnum(::google::protobuf::uint32 value) {
  set_has_shieldnum();
  shieldnum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.ShieldNum)
}

// optional uint32 TotalShots = 14;
bool GameEndReq::has_totalshots() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void GameEndReq::set_has_totalshots() {
  _has_bits_[0] |= 0x00000800u;
}
void GameEndReq::clear_has_totalshots() {
  _has_bits_[0] &= ~0x00000800u;
}
void GameEndReq::clear_totalshots() {
  totalshots_ = 0u;
  clear_has_totalshots();
}
::google::protobuf::uint32 GameEndReq::totalshots() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.TotalShots)
  return totalshots_;
}
void GameEndReq::set_totalshots(::google::protobuf::uint32 value) {
  set_has_totalshots();
  totalshots_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.TotalShots)
}

// optional uint32 GameCoinCount = 15;
bool GameEndReq::has_gamecoincount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void GameEndReq::set_has_gamecoincount() {
  _has_bits_[0] |= 0x00001000u;
}
void GameEndReq::clear_has_gamecoincount() {
  _has_bits_[0] &= ~0x00001000u;
}
void GameEndReq::clear_gamecoincount() {
  gamecoincount_ = 0u;
  clear_has_gamecoincount();
}
::google::protobuf::uint32 GameEndReq::gamecoincount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.GameCoinCount)
  return gamecoincount_;
}
void GameEndReq::set_gamecoincount(::google::protobuf::uint32 value) {
  set_has_gamecoincount();
  gamecoincount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.GameCoinCount)
}

// optional uint32 ClientUseReviveNum = 16;
bool GameEndReq::has_clientuserevivenum() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void GameEndReq::set_has_clientuserevivenum() {
  _has_bits_[0] |= 0x00002000u;
}
void GameEndReq::clear_has_clientuserevivenum() {
  _has_bits_[0] &= ~0x00002000u;
}
void GameEndReq::clear_clientuserevivenum() {
  clientuserevivenum_ = 0u;
  clear_has_clientuserevivenum();
}
::google::protobuf::uint32 GameEndReq::clientuserevivenum() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.ClientUseReviveNum)
  return clientuserevivenum_;
}
void GameEndReq::set_clientuserevivenum(::google::protobuf::uint32 value) {
  set_has_clientuserevivenum();
  clientuserevivenum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.ClientUseReviveNum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEndResp::kBaseResponseFieldNumber;
const int GameEndResp::kScoreFieldNumber;
const int GameEndResp::kAchievementFieldNumber;
const int GameEndResp::kRankFieldNumber;
const int GameEndResp::kLifeNumFieldNumber;
const int GameEndResp::kCheckLeftTimeFieldNumber;
const int GameEndResp::kCountFieldNumber;
const int GameEndResp::kRankListFieldNumber;
const int GameEndResp::kPropsViewTipFieldNumber;
const int GameEndResp::kRankViewTipFieldNumber;
const int GameEndResp::kGameCoinCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEndResp::GameEndResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameEndResp)
}
GameEndResp::GameEndResp(const GameEndResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ranklist_(from.ranklist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  achievement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_achievement()) {
    achievement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.achievement_);
  }
  propsviewtip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_propsviewtip()) {
    propsviewtip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.propsviewtip_);
  }
  rankviewtip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rankviewtip()) {
    rankviewtip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rankviewtip_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&score_, &from.score_,
    reinterpret_cast<char*>(&gamecoincount_) -
    reinterpret_cast<char*>(&score_) + sizeof(gamecoincount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GameEndResp)
}

void GameEndResp::SharedCtor() {
  _cached_size_ = 0;
  achievement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  propsviewtip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rankviewtip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&gamecoincount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(gamecoincount_));
}

GameEndResp::~GameEndResp() {
  // @@protoc_insertion_point(destructor:micromsg.GameEndResp)
  SharedDtor();
}

void GameEndResp::SharedDtor() {
  achievement_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  propsviewtip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rankviewtip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GameEndResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEndResp::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEndResp& GameEndResp::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameEndResp* GameEndResp::New(::google::protobuf::Arena* arena) const {
  GameEndResp* n = new GameEndResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameEndResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameEndResp)
  ranklist_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_achievement()) {
      GOOGLE_DCHECK(!achievement_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*achievement_.UnsafeRawStringPointer())->clear();
    }
    if (has_propsviewtip()) {
      GOOGLE_DCHECK(!propsviewtip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*propsviewtip_.UnsafeRawStringPointer())->clear();
    }
    if (has_rankviewtip()) {
      GOOGLE_DCHECK(!rankviewtip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rankviewtip_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&score_, 0, reinterpret_cast<char*>(&checklefttime_) -
      reinterpret_cast<char*>(&score_) + sizeof(checklefttime_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&count_, 0, reinterpret_cast<char*>(&gamecoincount_) -
      reinterpret_cast<char*>(&count_) + sizeof(gamecoincount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEndResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameEndResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Achievement = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_achievement()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->achievement().data(), this->achievement().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameEndResp.Achievement");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Rank = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 LifeNum = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_lifenum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CheckLeftTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_checklefttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checklefttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.UserGameAchieveInfo RankList = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PropsViewTip = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_propsviewtip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->propsviewtip().data(), this->propsviewtip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameEndResp.PropsViewTip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RankViewTip = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rankviewtip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rankviewtip().data(), this->rankviewtip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameEndResp.RankViewTip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 GameCoinCount = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_gamecoincount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamecoincount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameEndResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameEndResp)
  return false;
#undef DO_
}

void GameEndResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameEndResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Score = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // optional string Achievement = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->achievement().data(), this->achievement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameEndResp.Achievement");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->achievement(), output);
  }

  // required uint32 Rank = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rank(), output);
  }

  // required uint32 LifeNum = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lifenum(), output);
  }

  // required uint32 CheckLeftTime = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->checklefttime(), output);
  }

  // required int32 Count = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->count(), output);
  }

  // repeated .micromsg.UserGameAchieveInfo RankList = 8;
  for (unsigned int i = 0, n = this->ranklist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ranklist(i), output);
  }

  // optional string PropsViewTip = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->propsviewtip().data(), this->propsviewtip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameEndResp.PropsViewTip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->propsviewtip(), output);
  }

  // optional string RankViewTip = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rankviewtip().data(), this->rankviewtip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameEndResp.RankViewTip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->rankviewtip(), output);
  }

  // optional uint32 GameCoinCount = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->gamecoincount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameEndResp)
}

::google::protobuf::uint8* GameEndResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameEndResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Score = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // optional string Achievement = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->achievement().data(), this->achievement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameEndResp.Achievement");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->achievement(), target);
  }

  // required uint32 Rank = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rank(), target);
  }

  // required uint32 LifeNum = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lifenum(), target);
  }

  // required uint32 CheckLeftTime = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->checklefttime(), target);
  }

  // required int32 Count = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->count(), target);
  }

  // repeated .micromsg.UserGameAchieveInfo RankList = 8;
  for (unsigned int i = 0, n = this->ranklist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->ranklist(i), deterministic, target);
  }

  // optional string PropsViewTip = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->propsviewtip().data(), this->propsviewtip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameEndResp.PropsViewTip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->propsviewtip(), target);
  }

  // optional string RankViewTip = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rankviewtip().data(), this->rankviewtip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameEndResp.RankViewTip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->rankviewtip(), target);
  }

  // optional uint32 GameCoinCount = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->gamecoincount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameEndResp)
  return target;
}

size_t GameEndResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameEndResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_score()) {
    // required uint32 Score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  if (has_rank()) {
    // required uint32 Rank = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rank());
  }

  if (has_lifenum()) {
    // required uint32 LifeNum = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lifenum());
  }

  if (has_checklefttime()) {
    // required uint32 CheckLeftTime = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->checklefttime());
  }

  if (has_count()) {
    // required int32 Count = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  return total_size;
}
size_t GameEndResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameEndResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001f8) ^ 0x000001f8) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());

    // required uint32 Rank = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rank());

    // required uint32 LifeNum = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lifenum());

    // required uint32 CheckLeftTime = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->checklefttime());

    // required int32 Count = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.UserGameAchieveInfo RankList = 8;
  {
    unsigned int count = this->ranklist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ranklist(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string Achievement = 3;
    if (has_achievement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->achievement());
    }

    // optional string PropsViewTip = 11;
    if (has_propsviewtip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->propsviewtip());
    }

    // optional string RankViewTip = 12;
    if (has_rankviewtip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rankviewtip());
    }

  }
  // optional uint32 GameCoinCount = 13;
  if (has_gamecoincount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gamecoincount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEndResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameEndResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEndResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEndResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameEndResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameEndResp)
    MergeFrom(*source);
  }
}

void GameEndResp::MergeFrom(const GameEndResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameEndResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranklist_.MergeFrom(from.ranklist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_achievement();
      achievement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.achievement_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_propsviewtip();
      propsviewtip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.propsviewtip_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_rankviewtip();
      rankviewtip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rankviewtip_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000010u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000020u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000040u) {
      lifenum_ = from.lifenum_;
    }
    if (cached_has_bits & 0x00000080u) {
      checklefttime_ = from.checklefttime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000200u) {
      gamecoincount_ = from.gamecoincount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEndResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameEndResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEndResp::CopyFrom(const GameEndResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameEndResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEndResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001f8) != 0x000001f8) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ranklist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GameEndResp::Swap(GameEndResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEndResp::InternalSwap(GameEndResp* other) {
  ranklist_.InternalSwap(&other->ranklist_);
  achievement_.Swap(&other->achievement_);
  propsviewtip_.Swap(&other->propsviewtip_);
  rankviewtip_.Swap(&other->rankviewtip_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(score_, other->score_);
  std::swap(rank_, other->rank_);
  std::swap(lifenum_, other->lifenum_);
  std::swap(checklefttime_, other->checklefttime_);
  std::swap(count_, other->count_);
  std::swap(gamecoincount_, other->gamecoincount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameEndResp::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameEndResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool GameEndResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameEndResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000008u;
}
void GameEndResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameEndResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GameEndResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GameEndResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameEndResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GameEndResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameEndResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GameEndResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameEndResp.BaseResponse)
}

// required uint32 Score = 2;
bool GameEndResp::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GameEndResp::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
void GameEndResp::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
void GameEndResp::clear_score() {
  score_ = 0u;
  clear_has_score();
}
::google::protobuf::uint32 GameEndResp::score() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.Score)
  return score_;
}
void GameEndResp::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndResp.Score)
}

// optional string Achievement = 3;
bool GameEndResp::has_achievement() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameEndResp::set_has_achievement() {
  _has_bits_[0] |= 0x00000001u;
}
void GameEndResp::clear_has_achievement() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameEndResp::clear_achievement() {
  achievement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_achievement();
}
const ::std::string& GameEndResp::achievement() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.Achievement)
  return achievement_.GetNoArena();
}
void GameEndResp::set_achievement(const ::std::string& value) {
  set_has_achievement();
  achievement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameEndResp.Achievement)
}
#if LANG_CXX11
void GameEndResp::set_achievement(::std::string&& value) {
  set_has_achievement();
  achievement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameEndResp.Achievement)
}
#endif
void GameEndResp::set_achievement(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_achievement();
  achievement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameEndResp.Achievement)
}
void GameEndResp::set_achievement(const char* value, size_t size) {
  set_has_achievement();
  achievement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameEndResp.Achievement)
}
::std::string* GameEndResp::mutable_achievement() {
  set_has_achievement();
  // @@protoc_insertion_point(field_mutable:micromsg.GameEndResp.Achievement)
  return achievement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameEndResp::release_achievement() {
  // @@protoc_insertion_point(field_release:micromsg.GameEndResp.Achievement)
  clear_has_achievement();
  return achievement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameEndResp::set_allocated_achievement(::std::string* achievement) {
  if (achievement != NULL) {
    set_has_achievement();
  } else {
    clear_has_achievement();
  }
  achievement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), achievement);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameEndResp.Achievement)
}

// required uint32 Rank = 4;
bool GameEndResp::has_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GameEndResp::set_has_rank() {
  _has_bits_[0] |= 0x00000020u;
}
void GameEndResp::clear_has_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
void GameEndResp::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
::google::protobuf::uint32 GameEndResp::rank() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.Rank)
  return rank_;
}
void GameEndResp::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndResp.Rank)
}

// required uint32 LifeNum = 5;
bool GameEndResp::has_lifenum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GameEndResp::set_has_lifenum() {
  _has_bits_[0] |= 0x00000040u;
}
void GameEndResp::clear_has_lifenum() {
  _has_bits_[0] &= ~0x00000040u;
}
void GameEndResp::clear_lifenum() {
  lifenum_ = 0u;
  clear_has_lifenum();
}
::google::protobuf::uint32 GameEndResp::lifenum() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.LifeNum)
  return lifenum_;
}
void GameEndResp::set_lifenum(::google::protobuf::uint32 value) {
  set_has_lifenum();
  lifenum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndResp.LifeNum)
}

// required uint32 CheckLeftTime = 6;
bool GameEndResp::has_checklefttime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GameEndResp::set_has_checklefttime() {
  _has_bits_[0] |= 0x00000080u;
}
void GameEndResp::clear_has_checklefttime() {
  _has_bits_[0] &= ~0x00000080u;
}
void GameEndResp::clear_checklefttime() {
  checklefttime_ = 0u;
  clear_has_checklefttime();
}
::google::protobuf::uint32 GameEndResp::checklefttime() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.CheckLeftTime)
  return checklefttime_;
}
void GameEndResp::set_checklefttime(::google::protobuf::uint32 value) {
  set_has_checklefttime();
  checklefttime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndResp.CheckLeftTime)
}

// required int32 Count = 7;
bool GameEndResp::has_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GameEndResp::set_has_count() {
  _has_bits_[0] |= 0x00000100u;
}
void GameEndResp::clear_has_count() {
  _has_bits_[0] &= ~0x00000100u;
}
void GameEndResp::clear_count() {
  count_ = 0;
  clear_has_count();
}
::google::protobuf::int32 GameEndResp::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.Count)
  return count_;
}
void GameEndResp::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndResp.Count)
}

// repeated .micromsg.UserGameAchieveInfo RankList = 8;
int GameEndResp::ranklist_size() const {
  return ranklist_.size();
}
void GameEndResp::clear_ranklist() {
  ranklist_.Clear();
}
const ::micromsg::UserGameAchieveInfo& GameEndResp::ranklist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.RankList)
  return ranklist_.Get(index);
}
::micromsg::UserGameAchieveInfo* GameEndResp::mutable_ranklist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameEndResp.RankList)
  return ranklist_.Mutable(index);
}
::micromsg::UserGameAchieveInfo* GameEndResp::add_ranklist() {
  // @@protoc_insertion_point(field_add:micromsg.GameEndResp.RankList)
  return ranklist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::UserGameAchieveInfo >*
GameEndResp::mutable_ranklist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameEndResp.RankList)
  return &ranklist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameAchieveInfo >&
GameEndResp::ranklist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameEndResp.RankList)
  return ranklist_;
}

// optional string PropsViewTip = 11;
bool GameEndResp::has_propsviewtip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameEndResp::set_has_propsviewtip() {
  _has_bits_[0] |= 0x00000002u;
}
void GameEndResp::clear_has_propsviewtip() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameEndResp::clear_propsviewtip() {
  propsviewtip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_propsviewtip();
}
const ::std::string& GameEndResp::propsviewtip() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.PropsViewTip)
  return propsviewtip_.GetNoArena();
}
void GameEndResp::set_propsviewtip(const ::std::string& value) {
  set_has_propsviewtip();
  propsviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameEndResp.PropsViewTip)
}
#if LANG_CXX11
void GameEndResp::set_propsviewtip(::std::string&& value) {
  set_has_propsviewtip();
  propsviewtip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameEndResp.PropsViewTip)
}
#endif
void GameEndResp::set_propsviewtip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_propsviewtip();
  propsviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameEndResp.PropsViewTip)
}
void GameEndResp::set_propsviewtip(const char* value, size_t size) {
  set_has_propsviewtip();
  propsviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameEndResp.PropsViewTip)
}
::std::string* GameEndResp::mutable_propsviewtip() {
  set_has_propsviewtip();
  // @@protoc_insertion_point(field_mutable:micromsg.GameEndResp.PropsViewTip)
  return propsviewtip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameEndResp::release_propsviewtip() {
  // @@protoc_insertion_point(field_release:micromsg.GameEndResp.PropsViewTip)
  clear_has_propsviewtip();
  return propsviewtip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameEndResp::set_allocated_propsviewtip(::std::string* propsviewtip) {
  if (propsviewtip != NULL) {
    set_has_propsviewtip();
  } else {
    clear_has_propsviewtip();
  }
  propsviewtip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), propsviewtip);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameEndResp.PropsViewTip)
}

// optional string RankViewTip = 12;
bool GameEndResp::has_rankviewtip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameEndResp::set_has_rankviewtip() {
  _has_bits_[0] |= 0x00000004u;
}
void GameEndResp::clear_has_rankviewtip() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameEndResp::clear_rankviewtip() {
  rankviewtip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rankviewtip();
}
const ::std::string& GameEndResp::rankviewtip() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.RankViewTip)
  return rankviewtip_.GetNoArena();
}
void GameEndResp::set_rankviewtip(const ::std::string& value) {
  set_has_rankviewtip();
  rankviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameEndResp.RankViewTip)
}
#if LANG_CXX11
void GameEndResp::set_rankviewtip(::std::string&& value) {
  set_has_rankviewtip();
  rankviewtip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameEndResp.RankViewTip)
}
#endif
void GameEndResp::set_rankviewtip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rankviewtip();
  rankviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameEndResp.RankViewTip)
}
void GameEndResp::set_rankviewtip(const char* value, size_t size) {
  set_has_rankviewtip();
  rankviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameEndResp.RankViewTip)
}
::std::string* GameEndResp::mutable_rankviewtip() {
  set_has_rankviewtip();
  // @@protoc_insertion_point(field_mutable:micromsg.GameEndResp.RankViewTip)
  return rankviewtip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameEndResp::release_rankviewtip() {
  // @@protoc_insertion_point(field_release:micromsg.GameEndResp.RankViewTip)
  clear_has_rankviewtip();
  return rankviewtip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameEndResp::set_allocated_rankviewtip(::std::string* rankviewtip) {
  if (rankviewtip != NULL) {
    set_has_rankviewtip();
  } else {
    clear_has_rankviewtip();
  }
  rankviewtip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rankviewtip);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameEndResp.RankViewTip)
}

// optional uint32 GameCoinCount = 13;
bool GameEndResp::has_gamecoincount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void GameEndResp::set_has_gamecoincount() {
  _has_bits_[0] |= 0x00000200u;
}
void GameEndResp::clear_has_gamecoincount() {
  _has_bits_[0] &= ~0x00000200u;
}
void GameEndResp::clear_gamecoincount() {
  gamecoincount_ = 0u;
  clear_has_gamecoincount();
}
::google::protobuf::uint32 GameEndResp::gamecoincount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.GameCoinCount)
  return gamecoincount_;
}
void GameEndResp::set_gamecoincount(::google::protobuf::uint32 value) {
  set_has_gamecoincount();
  gamecoincount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndResp.GameCoinCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameRankListReq::kBaseRequestFieldNumber;
const int GameRankListReq::kAppIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameRankListReq::GameRankListReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameRankListReq)
}
GameRankListReq::GameRankListReq(const GameRankListReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_appid()) {
    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GameRankListReq)
}

void GameRankListReq::SharedCtor() {
  _cached_size_ = 0;
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

GameRankListReq::~GameRankListReq() {
  // @@protoc_insertion_point(destructor:micromsg.GameRankListReq)
  SharedDtor();
}

void GameRankListReq::SharedDtor() {
  appid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GameRankListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameRankListReq::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameRankListReq& GameRankListReq::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameRankListReq* GameRankListReq::New(::google::protobuf::Arena* arena) const {
  GameRankListReq* n = new GameRankListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameRankListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameRankListReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_appid()) {
      GOOGLE_DCHECK(!appid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*appid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameRankListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameRankListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AppID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameRankListReq.AppID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameRankListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameRankListReq)
  return false;
#undef DO_
}

void GameRankListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameRankListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameRankListReq.AppID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameRankListReq)
}

::google::protobuf::uint8* GameRankListReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameRankListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameRankListReq.AppID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameRankListReq)
  return target;
}

size_t GameRankListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameRankListReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string AppID = 2;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRankListReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameRankListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GameRankListReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameRankListReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameRankListReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameRankListReq)
    MergeFrom(*source);
  }
}

void GameRankListReq::MergeFrom(const GameRankListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameRankListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_appid();
      appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void GameRankListReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameRankListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRankListReq::CopyFrom(const GameRankListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameRankListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRankListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GameRankListReq::Swap(GameRankListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameRankListReq::InternalSwap(GameRankListReq* other) {
  appid_.Swap(&other->appid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameRankListReq::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameRankListReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool GameRankListReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameRankListReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GameRankListReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameRankListReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GameRankListReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameRankListReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GameRankListReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameRankListReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GameRankListReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameRankListReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GameRankListReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameRankListReq.BaseRequest)
}

// optional string AppID = 2;
bool GameRankListReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameRankListReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameRankListReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameRankListReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
const ::std::string& GameRankListReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameRankListReq.AppID)
  return appid_.GetNoArena();
}
void GameRankListReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameRankListReq.AppID)
}
#if LANG_CXX11
void GameRankListReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameRankListReq.AppID)
}
#endif
void GameRankListReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameRankListReq.AppID)
}
void GameRankListReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameRankListReq.AppID)
}
::std::string* GameRankListReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameRankListReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameRankListReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameRankListReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameRankListReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameRankListReq.AppID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameRankListResp::kBaseResponseFieldNumber;
const int GameRankListResp::kCountFieldNumber;
const int GameRankListResp::kRankListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameRankListResp::GameRankListResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameRankListResp)
}
GameRankListResp::GameRankListResp(const GameRankListResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ranklist_(from.ranklist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GameRankListResp)
}

void GameRankListResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(count_));
}

GameRankListResp::~GameRankListResp() {
  // @@protoc_insertion_point(destructor:micromsg.GameRankListResp)
  SharedDtor();
}

void GameRankListResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GameRankListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameRankListResp::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameRankListResp& GameRankListResp::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameRankListResp* GameRankListResp::New(::google::protobuf::Arena* arena) const {
  GameRankListResp* n = new GameRankListResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameRankListResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameRankListResp)
  ranklist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameRankListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameRankListResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.UserGameAchieveInfo RankList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameRankListResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameRankListResp)
  return false;
#undef DO_
}

void GameRankListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameRankListResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // repeated .micromsg.UserGameAchieveInfo RankList = 3;
  for (unsigned int i = 0, n = this->ranklist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ranklist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameRankListResp)
}

::google::protobuf::uint8* GameRankListResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameRankListResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.UserGameAchieveInfo RankList = 3;
  for (unsigned int i = 0, n = this->ranklist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->ranklist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameRankListResp)
  return target;
}

size_t GameRankListResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameRankListResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_count()) {
    // required int32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  return total_size;
}
size_t GameRankListResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameRankListResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required int32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.UserGameAchieveInfo RankList = 3;
  {
    unsigned int count = this->ranklist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ranklist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRankListResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameRankListResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GameRankListResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameRankListResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameRankListResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameRankListResp)
    MergeFrom(*source);
  }
}

void GameRankListResp::MergeFrom(const GameRankListResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameRankListResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranklist_.MergeFrom(from.ranklist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameRankListResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameRankListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRankListResp::CopyFrom(const GameRankListResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameRankListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRankListResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ranklist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GameRankListResp::Swap(GameRankListResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameRankListResp::InternalSwap(GameRankListResp* other) {
  ranklist_.InternalSwap(&other->ranklist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameRankListResp::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameRankListResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool GameRankListResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameRankListResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GameRankListResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameRankListResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GameRankListResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameRankListResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GameRankListResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameRankListResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GameRankListResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameRankListResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GameRankListResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameRankListResp.BaseResponse)
}

// required int32 Count = 2;
bool GameRankListResp::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameRankListResp::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void GameRankListResp::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameRankListResp::clear_count() {
  count_ = 0;
  clear_has_count();
}
::google::protobuf::int32 GameRankListResp::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GameRankListResp.Count)
  return count_;
}
void GameRankListResp::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameRankListResp.Count)
}

// repeated .micromsg.UserGameAchieveInfo RankList = 3;
int GameRankListResp::ranklist_size() const {
  return ranklist_.size();
}
void GameRankListResp::clear_ranklist() {
  ranklist_.Clear();
}
const ::micromsg::UserGameAchieveInfo& GameRankListResp::ranklist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameRankListResp.RankList)
  return ranklist_.Get(index);
}
::micromsg::UserGameAchieveInfo* GameRankListResp::mutable_ranklist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameRankListResp.RankList)
  return ranklist_.Mutable(index);
}
::micromsg::UserGameAchieveInfo* GameRankListResp::add_ranklist() {
  // @@protoc_insertion_point(field_add:micromsg.GameRankListResp.RankList)
  return ranklist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::UserGameAchieveInfo >*
GameRankListResp::mutable_ranklist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameRankListResp.RankList)
  return &ranklist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameAchieveInfo >&
GameRankListResp::ranklist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameRankListResp.RankList)
  return ranklist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameStartReq::kBaseRequestFieldNumber;
const int GameStartReq::kAppIDFieldNumber;
const int GameStartReq::kLocalLifeNumFieldNumber;
const int GameStartReq::kTokenFieldNumber;
const int GameStartReq::kNeedClearWishListFieldNumber;
const int GameStartReq::kGameConsumePropsCountFieldNumber;
const int GameStartReq::kGameConsumePropsListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameStartReq::GameStartReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameStartReq)
}
GameStartReq::GameStartReq(const GameStartReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      gameconsumepropslist_(from.gameconsumepropslist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_appid()) {
    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&locallifenum_, &from.locallifenum_,
    reinterpret_cast<char*>(&gameconsumepropscount_) -
    reinterpret_cast<char*>(&locallifenum_) + sizeof(gameconsumepropscount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GameStartReq)
}

void GameStartReq::SharedCtor() {
  _cached_size_ = 0;
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&gameconsumepropscount_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(gameconsumepropscount_));
}

GameStartReq::~GameStartReq() {
  // @@protoc_insertion_point(destructor:micromsg.GameStartReq)
  SharedDtor();
}

void GameStartReq::SharedDtor() {
  appid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GameStartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStartReq::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameStartReq& GameStartReq::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameStartReq* GameStartReq::New(::google::protobuf::Arena* arena) const {
  GameStartReq* n = new GameStartReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameStartReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameStartReq)
  gameconsumepropslist_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_appid()) {
      GOOGLE_DCHECK(!appid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*appid_.UnsafeRawStringPointer())->clear();
    }
    if (has_token()) {
      GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&locallifenum_, 0, reinterpret_cast<char*>(&gameconsumepropscount_) -
      reinterpret_cast<char*>(&locallifenum_) + sizeof(gameconsumepropscount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameStartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameStartReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AppID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameStartReq.AppID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 LocalLifeNum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_locallifenum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &locallifenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameStartReq.Token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 NeedClearWishList = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_needclearwishlist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needclearwishlist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 GameConsumePropsCount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_gameconsumepropscount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameconsumepropscount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.GameConsumeProps GameConsumePropsList = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gameconsumepropslist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameStartReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameStartReq)
  return false;
#undef DO_
}

void GameStartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameStartReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameStartReq.AppID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appid(), output);
  }

  // required uint32 LocalLifeNum = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->locallifenum(), output);
  }

  // optional string Token = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameStartReq.Token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->token(), output);
  }

  // required uint32 NeedClearWishList = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->needclearwishlist(), output);
  }

  // optional int32 GameConsumePropsCount = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gameconsumepropscount(), output);
  }

  // repeated .micromsg.GameConsumeProps GameConsumePropsList = 7;
  for (unsigned int i = 0, n = this->gameconsumepropslist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->gameconsumepropslist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameStartReq)
}

::google::protobuf::uint8* GameStartReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameStartReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameStartReq.AppID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appid(), target);
  }

  // required uint32 LocalLifeNum = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->locallifenum(), target);
  }

  // optional string Token = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameStartReq.Token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  // required uint32 NeedClearWishList = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->needclearwishlist(), target);
  }

  // optional int32 GameConsumePropsCount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gameconsumepropscount(), target);
  }

  // repeated .micromsg.GameConsumeProps GameConsumePropsList = 7;
  for (unsigned int i = 0, n = this->gameconsumepropslist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->gameconsumepropslist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameStartReq)
  return target;
}

size_t GameStartReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameStartReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_locallifenum()) {
    // required uint32 LocalLifeNum = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->locallifenum());
  }

  if (has_needclearwishlist()) {
    // required uint32 NeedClearWishList = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->needclearwishlist());
  }

  return total_size;
}
size_t GameStartReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameStartReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 LocalLifeNum = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->locallifenum());

    // required uint32 NeedClearWishList = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->needclearwishlist());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.GameConsumeProps GameConsumePropsList = 7;
  {
    unsigned int count = this->gameconsumepropslist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameconsumepropslist(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string AppID = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

    // optional string Token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  // optional int32 GameConsumePropsCount = 6;
  if (has_gameconsumepropscount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gameconsumepropscount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStartReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameStartReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GameStartReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameStartReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameStartReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameStartReq)
    MergeFrom(*source);
  }
}

void GameStartReq::MergeFrom(const GameStartReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameStartReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gameconsumepropslist_.MergeFrom(from.gameconsumepropslist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_appid();
      appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      locallifenum_ = from.locallifenum_;
    }
    if (cached_has_bits & 0x00000010u) {
      needclearwishlist_ = from.needclearwishlist_;
    }
    if (cached_has_bits & 0x00000020u) {
      gameconsumepropscount_ = from.gameconsumepropscount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameStartReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameStartReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStartReq::CopyFrom(const GameStartReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameStartReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->gameconsumepropslist())) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GameStartReq::Swap(GameStartReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameStartReq::InternalSwap(GameStartReq* other) {
  gameconsumepropslist_.InternalSwap(&other->gameconsumepropslist_);
  appid_.Swap(&other->appid_);
  token_.Swap(&other->token_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(locallifenum_, other->locallifenum_);
  std::swap(needclearwishlist_, other->needclearwishlist_);
  std::swap(gameconsumepropscount_, other->gameconsumepropscount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameStartReq::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameStartReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool GameStartReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameStartReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void GameStartReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameStartReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GameStartReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GameStartReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameStartReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GameStartReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameStartReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GameStartReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameStartReq.BaseRequest)
}

// optional string AppID = 2;
bool GameStartReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameStartReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameStartReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameStartReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
const ::std::string& GameStartReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartReq.AppID)
  return appid_.GetNoArena();
}
void GameStartReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameStartReq.AppID)
}
#if LANG_CXX11
void GameStartReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameStartReq.AppID)
}
#endif
void GameStartReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameStartReq.AppID)
}
void GameStartReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameStartReq.AppID)
}
::std::string* GameStartReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameStartReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameStartReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameStartReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameStartReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameStartReq.AppID)
}

// required uint32 LocalLifeNum = 3;
bool GameStartReq::has_locallifenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameStartReq::set_has_locallifenum() {
  _has_bits_[0] |= 0x00000008u;
}
void GameStartReq::clear_has_locallifenum() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameStartReq::clear_locallifenum() {
  locallifenum_ = 0u;
  clear_has_locallifenum();
}
::google::protobuf::uint32 GameStartReq::locallifenum() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartReq.LocalLifeNum)
  return locallifenum_;
}
void GameStartReq::set_locallifenum(::google::protobuf::uint32 value) {
  set_has_locallifenum();
  locallifenum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameStartReq.LocalLifeNum)
}

// optional string Token = 4;
bool GameStartReq::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameStartReq::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
void GameStartReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameStartReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& GameStartReq::token() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartReq.Token)
  return token_.GetNoArena();
}
void GameStartReq::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameStartReq.Token)
}
#if LANG_CXX11
void GameStartReq::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameStartReq.Token)
}
#endif
void GameStartReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameStartReq.Token)
}
void GameStartReq::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameStartReq.Token)
}
::std::string* GameStartReq::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:micromsg.GameStartReq.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameStartReq::release_token() {
  // @@protoc_insertion_point(field_release:micromsg.GameStartReq.Token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameStartReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameStartReq.Token)
}

// required uint32 NeedClearWishList = 5;
bool GameStartReq::has_needclearwishlist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GameStartReq::set_has_needclearwishlist() {
  _has_bits_[0] |= 0x00000010u;
}
void GameStartReq::clear_has_needclearwishlist() {
  _has_bits_[0] &= ~0x00000010u;
}
void GameStartReq::clear_needclearwishlist() {
  needclearwishlist_ = 0u;
  clear_has_needclearwishlist();
}
::google::protobuf::uint32 GameStartReq::needclearwishlist() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartReq.NeedClearWishList)
  return needclearwishlist_;
}
void GameStartReq::set_needclearwishlist(::google::protobuf::uint32 value) {
  set_has_needclearwishlist();
  needclearwishlist_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameStartReq.NeedClearWishList)
}

// optional int32 GameConsumePropsCount = 6;
bool GameStartReq::has_gameconsumepropscount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GameStartReq::set_has_gameconsumepropscount() {
  _has_bits_[0] |= 0x00000020u;
}
void GameStartReq::clear_has_gameconsumepropscount() {
  _has_bits_[0] &= ~0x00000020u;
}
void GameStartReq::clear_gameconsumepropscount() {
  gameconsumepropscount_ = 0;
  clear_has_gameconsumepropscount();
}
::google::protobuf::int32 GameStartReq::gameconsumepropscount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartReq.GameConsumePropsCount)
  return gameconsumepropscount_;
}
void GameStartReq::set_gameconsumepropscount(::google::protobuf::int32 value) {
  set_has_gameconsumepropscount();
  gameconsumepropscount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameStartReq.GameConsumePropsCount)
}

// repeated .micromsg.GameConsumeProps GameConsumePropsList = 7;
int GameStartReq::gameconsumepropslist_size() const {
  return gameconsumepropslist_.size();
}
void GameStartReq::clear_gameconsumepropslist() {
  gameconsumepropslist_.Clear();
}
const ::micromsg::GameConsumeProps& GameStartReq::gameconsumepropslist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartReq.GameConsumePropsList)
  return gameconsumepropslist_.Get(index);
}
::micromsg::GameConsumeProps* GameStartReq::mutable_gameconsumepropslist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameStartReq.GameConsumePropsList)
  return gameconsumepropslist_.Mutable(index);
}
::micromsg::GameConsumeProps* GameStartReq::add_gameconsumepropslist() {
  // @@protoc_insertion_point(field_add:micromsg.GameStartReq.GameConsumePropsList)
  return gameconsumepropslist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::GameConsumeProps >*
GameStartReq::mutable_gameconsumepropslist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameStartReq.GameConsumePropsList)
  return &gameconsumepropslist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::GameConsumeProps >&
GameStartReq::gameconsumepropslist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameStartReq.GameConsumePropsList)
  return gameconsumepropslist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameStartResp::kBaseResponseFieldNumber;
const int GameStartResp::kLifeNumFieldNumber;
const int GameStartResp::kCheckLeftTimeFieldNumber;
const int GameStartResp::kTokenFieldNumber;
const int GameStartResp::kCountFieldNumber;
const int GameStartResp::kRankListFieldNumber;
const int GameStartResp::kGamePropsCountFieldNumber;
const int GameStartResp::kGamePropsListFieldNumber;
const int GameStartResp::kGameCoinCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameStartResp::GameStartResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameStartResp)
}
GameStartResp::GameStartResp(const GameStartResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ranklist_(from.ranklist_),
      gamepropslist_(from.gamepropslist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&lifenum_, &from.lifenum_,
    reinterpret_cast<char*>(&gamecoincount_) -
    reinterpret_cast<char*>(&lifenum_) + sizeof(gamecoincount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GameStartResp)
}

void GameStartResp::SharedCtor() {
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&gamecoincount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(gamecoincount_));
}

GameStartResp::~GameStartResp() {
  // @@protoc_insertion_point(destructor:micromsg.GameStartResp)
  SharedDtor();
}

void GameStartResp::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GameStartResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStartResp::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameStartResp& GameStartResp::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameStartResp* GameStartResp::New(::google::protobuf::Arena* arena) const {
  GameStartResp* n = new GameStartResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameStartResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameStartResp)
  ranklist_.Clear();
  gamepropslist_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_token()) {
      GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&lifenum_, 0, reinterpret_cast<char*>(&gamecoincount_) -
      reinterpret_cast<char*>(&lifenum_) + sizeof(gamecoincount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameStartResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameStartResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 LifeNum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_lifenum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CheckLeftTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_checklefttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checklefttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameStartResp.Token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.UserGameAchieveInfo RankList = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 GamePropsCount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_gamepropscount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamepropscount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.GameUserPropsInfo GamePropsList = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gamepropslist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 GameCoinCount = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_gamecoincount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamecoincount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameStartResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameStartResp)
  return false;
#undef DO_
}

void GameStartResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameStartResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 LifeNum = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lifenum(), output);
  }

  // required uint32 CheckLeftTime = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->checklefttime(), output);
  }

  // optional string Token = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameStartResp.Token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->token(), output);
  }

  // required int32 Count = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }

  // repeated .micromsg.UserGameAchieveInfo RankList = 6;
  for (unsigned int i = 0, n = this->ranklist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ranklist(i), output);
  }

  // optional int32 GamePropsCount = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gamepropscount(), output);
  }

  // repeated .micromsg.GameUserPropsInfo GamePropsList = 8;
  for (unsigned int i = 0, n = this->gamepropslist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->gamepropslist(i), output);
  }

  // optional uint32 GameCoinCount = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gamecoincount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameStartResp)
}

::google::protobuf::uint8* GameStartResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameStartResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 LifeNum = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lifenum(), target);
  }

  // required uint32 CheckLeftTime = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->checklefttime(), target);
  }

  // optional string Token = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameStartResp.Token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  // required int32 Count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }

  // repeated .micromsg.UserGameAchieveInfo RankList = 6;
  for (unsigned int i = 0, n = this->ranklist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->ranklist(i), deterministic, target);
  }

  // optional int32 GamePropsCount = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gamepropscount(), target);
  }

  // repeated .micromsg.GameUserPropsInfo GamePropsList = 8;
  for (unsigned int i = 0, n = this->gamepropslist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->gamepropslist(i), deterministic, target);
  }

  // optional uint32 GameCoinCount = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->gamecoincount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameStartResp)
  return target;
}

size_t GameStartResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameStartResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_lifenum()) {
    // required uint32 LifeNum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lifenum());
  }

  if (has_checklefttime()) {
    // required uint32 CheckLeftTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->checklefttime());
  }

  if (has_count()) {
    // required int32 Count = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  return total_size;
}
size_t GameStartResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameStartResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 LifeNum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lifenum());

    // required uint32 CheckLeftTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->checklefttime());

    // required int32 Count = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.UserGameAchieveInfo RankList = 6;
  {
    unsigned int count = this->ranklist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ranklist(i));
    }
  }

  // repeated .micromsg.GameUserPropsInfo GamePropsList = 8;
  {
    unsigned int count = this->gamepropslist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamepropslist(i));
    }
  }

  // optional string Token = 4;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  if (_has_bits_[0 / 32] & 96u) {
    // optional int32 GamePropsCount = 7;
    if (has_gamepropscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamepropscount());
    }

    // optional uint32 GameCoinCount = 9;
    if (has_gamecoincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamecoincount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStartResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameStartResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GameStartResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameStartResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameStartResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameStartResp)
    MergeFrom(*source);
  }
}

void GameStartResp::MergeFrom(const GameStartResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameStartResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranklist_.MergeFrom(from.ranklist_);
  gamepropslist_.MergeFrom(from.gamepropslist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      lifenum_ = from.lifenum_;
    }
    if (cached_has_bits & 0x00000008u) {
      checklefttime_ = from.checklefttime_;
    }
    if (cached_has_bits & 0x00000010u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000020u) {
      gamepropscount_ = from.gamepropscount_;
    }
    if (cached_has_bits & 0x00000040u) {
      gamecoincount_ = from.gamecoincount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameStartResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameStartResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStartResp::CopyFrom(const GameStartResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameStartResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ranklist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->gamepropslist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GameStartResp::Swap(GameStartResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameStartResp::InternalSwap(GameStartResp* other) {
  ranklist_.InternalSwap(&other->ranklist_);
  gamepropslist_.InternalSwap(&other->gamepropslist_);
  token_.Swap(&other->token_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(lifenum_, other->lifenum_);
  std::swap(checklefttime_, other->checklefttime_);
  std::swap(count_, other->count_);
  std::swap(gamepropscount_, other->gamepropscount_);
  std::swap(gamecoincount_, other->gamecoincount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameStartResp::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameStartResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool GameStartResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameStartResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void GameStartResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameStartResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GameStartResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GameStartResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameStartResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GameStartResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameStartResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GameStartResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameStartResp.BaseResponse)
}

// required uint32 LifeNum = 2;
bool GameStartResp::has_lifenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameStartResp::set_has_lifenum() {
  _has_bits_[0] |= 0x00000004u;
}
void GameStartResp::clear_has_lifenum() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameStartResp::clear_lifenum() {
  lifenum_ = 0u;
  clear_has_lifenum();
}
::google::protobuf::uint32 GameStartResp::lifenum() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartResp.LifeNum)
  return lifenum_;
}
void GameStartResp::set_lifenum(::google::protobuf::uint32 value) {
  set_has_lifenum();
  lifenum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameStartResp.LifeNum)
}

// required uint32 CheckLeftTime = 3;
bool GameStartResp::has_checklefttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameStartResp::set_has_checklefttime() {
  _has_bits_[0] |= 0x00000008u;
}
void GameStartResp::clear_has_checklefttime() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameStartResp::clear_checklefttime() {
  checklefttime_ = 0u;
  clear_has_checklefttime();
}
::google::protobuf::uint32 GameStartResp::checklefttime() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartResp.CheckLeftTime)
  return checklefttime_;
}
void GameStartResp::set_checklefttime(::google::protobuf::uint32 value) {
  set_has_checklefttime();
  checklefttime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameStartResp.CheckLeftTime)
}

// optional string Token = 4;
bool GameStartResp::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameStartResp::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void GameStartResp::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameStartResp::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& GameStartResp::token() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartResp.Token)
  return token_.GetNoArena();
}
void GameStartResp::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameStartResp.Token)
}
#if LANG_CXX11
void GameStartResp::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameStartResp.Token)
}
#endif
void GameStartResp::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameStartResp.Token)
}
void GameStartResp::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameStartResp.Token)
}
::std::string* GameStartResp::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:micromsg.GameStartResp.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameStartResp::release_token() {
  // @@protoc_insertion_point(field_release:micromsg.GameStartResp.Token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameStartResp::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameStartResp.Token)
}

// required int32 Count = 5;
bool GameStartResp::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GameStartResp::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
void GameStartResp::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
void GameStartResp::clear_count() {
  count_ = 0;
  clear_has_count();
}
::google::protobuf::int32 GameStartResp::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartResp.Count)
  return count_;
}
void GameStartResp::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameStartResp.Count)
}

// repeated .micromsg.UserGameAchieveInfo RankList = 6;
int GameStartResp::ranklist_size() const {
  return ranklist_.size();
}
void GameStartResp::clear_ranklist() {
  ranklist_.Clear();
}
const ::micromsg::UserGameAchieveInfo& GameStartResp::ranklist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartResp.RankList)
  return ranklist_.Get(index);
}
::micromsg::UserGameAchieveInfo* GameStartResp::mutable_ranklist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameStartResp.RankList)
  return ranklist_.Mutable(index);
}
::micromsg::UserGameAchieveInfo* GameStartResp::add_ranklist() {
  // @@protoc_insertion_point(field_add:micromsg.GameStartResp.RankList)
  return ranklist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::UserGameAchieveInfo >*
GameStartResp::mutable_ranklist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameStartResp.RankList)
  return &ranklist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameAchieveInfo >&
GameStartResp::ranklist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameStartResp.RankList)
  return ranklist_;
}

// optional int32 GamePropsCount = 7;
bool GameStartResp::has_gamepropscount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GameStartResp::set_has_gamepropscount() {
  _has_bits_[0] |= 0x00000020u;
}
void GameStartResp::clear_has_gamepropscount() {
  _has_bits_[0] &= ~0x00000020u;
}
void GameStartResp::clear_gamepropscount() {
  gamepropscount_ = 0;
  clear_has_gamepropscount();
}
::google::protobuf::int32 GameStartResp::gamepropscount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartResp.GamePropsCount)
  return gamepropscount_;
}
void GameStartResp::set_gamepropscount(::google::protobuf::int32 value) {
  set_has_gamepropscount();
  gamepropscount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameStartResp.GamePropsCount)
}

// repeated .micromsg.GameUserPropsInfo GamePropsList = 8;
int GameStartResp::gamepropslist_size() const {
  return gamepropslist_.size();
}
void GameStartResp::clear_gamepropslist() {
  gamepropslist_.Clear();
}
const ::micromsg::GameUserPropsInfo& GameStartResp::gamepropslist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartResp.GamePropsList)
  return gamepropslist_.Get(index);
}
::micromsg::GameUserPropsInfo* GameStartResp::mutable_gamepropslist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameStartResp.GamePropsList)
  return gamepropslist_.Mutable(index);
}
::micromsg::GameUserPropsInfo* GameStartResp::add_gamepropslist() {
  // @@protoc_insertion_point(field_add:micromsg.GameStartResp.GamePropsList)
  return gamepropslist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::GameUserPropsInfo >*
GameStartResp::mutable_gamepropslist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameStartResp.GamePropsList)
  return &gamepropslist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::GameUserPropsInfo >&
GameStartResp::gamepropslist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameStartResp.GamePropsList)
  return gamepropslist_;
}

// optional uint32 GameCoinCount = 9;
bool GameStartResp::has_gamecoincount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GameStartResp::set_has_gamecoincount() {
  _has_bits_[0] |= 0x00000040u;
}
void GameStartResp::clear_has_gamecoincount() {
  _has_bits_[0] &= ~0x00000040u;
}
void GameStartResp::clear_gamecoincount() {
  gamecoincount_ = 0u;
  clear_has_gamecoincount();
}
::google::protobuf::uint32 GameStartResp::gamecoincount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartResp.GameCoinCount)
  return gamecoincount_;
}
void GameStartResp::set_gamecoincount(::google::protobuf::uint32 value) {
  set_has_gamecoincount();
  gamecoincount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameStartResp.GameCoinCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCheckReq::kBaseRequestFieldNumber;
const int GameCheckReq::kAppIDFieldNumber;
const int GameCheckReq::kLocalLifeNumFieldNumber;
const int GameCheckReq::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCheckReq::GameCheckReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameCheckReq)
}
GameCheckReq::GameCheckReq(const GameCheckReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_appid()) {
    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  locallifenum_ = from.locallifenum_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GameCheckReq)
}

void GameCheckReq::SharedCtor() {
  _cached_size_ = 0;
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&locallifenum_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(locallifenum_));
}

GameCheckReq::~GameCheckReq() {
  // @@protoc_insertion_point(destructor:micromsg.GameCheckReq)
  SharedDtor();
}

void GameCheckReq::SharedDtor() {
  appid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GameCheckReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameCheckReq::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameCheckReq& GameCheckReq::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameCheckReq* GameCheckReq::New(::google::protobuf::Arena* arena) const {
  GameCheckReq* n = new GameCheckReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameCheckReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameCheckReq)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_appid()) {
      GOOGLE_DCHECK(!appid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*appid_.UnsafeRawStringPointer())->clear();
    }
    if (has_token()) {
      GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  locallifenum_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameCheckReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameCheckReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AppID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameCheckReq.AppID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 LocalLifeNum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_locallifenum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &locallifenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameCheckReq.Token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameCheckReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameCheckReq)
  return false;
#undef DO_
}

void GameCheckReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameCheckReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameCheckReq.AppID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appid(), output);
  }

  // required uint32 LocalLifeNum = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->locallifenum(), output);
  }

  // optional string Token = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameCheckReq.Token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameCheckReq)
}

::google::protobuf::uint8* GameCheckReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameCheckReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameCheckReq.AppID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appid(), target);
  }

  // required uint32 LocalLifeNum = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->locallifenum(), target);
  }

  // optional string Token = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameCheckReq.Token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameCheckReq)
  return target;
}

size_t GameCheckReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameCheckReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_locallifenum()) {
    // required uint32 LocalLifeNum = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->locallifenum());
  }

  return total_size;
}
size_t GameCheckReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameCheckReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 LocalLifeNum = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->locallifenum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string AppID = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

    // optional string Token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCheckReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameCheckReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCheckReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameCheckReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameCheckReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameCheckReq)
    MergeFrom(*source);
  }
}

void GameCheckReq::MergeFrom(const GameCheckReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameCheckReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_appid();
      appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      locallifenum_ = from.locallifenum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameCheckReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameCheckReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCheckReq::CopyFrom(const GameCheckReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameCheckReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCheckReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GameCheckReq::Swap(GameCheckReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCheckReq::InternalSwap(GameCheckReq* other) {
  appid_.Swap(&other->appid_);
  token_.Swap(&other->token_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(locallifenum_, other->locallifenum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameCheckReq::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameCheckReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool GameCheckReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameCheckReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void GameCheckReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameCheckReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GameCheckReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameCheckReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GameCheckReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameCheckReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GameCheckReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameCheckReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GameCheckReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameCheckReq.BaseRequest)
}

// optional string AppID = 2;
bool GameCheckReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameCheckReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameCheckReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameCheckReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
const ::std::string& GameCheckReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameCheckReq.AppID)
  return appid_.GetNoArena();
}
void GameCheckReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameCheckReq.AppID)
}
#if LANG_CXX11
void GameCheckReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameCheckReq.AppID)
}
#endif
void GameCheckReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameCheckReq.AppID)
}
void GameCheckReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameCheckReq.AppID)
}
::std::string* GameCheckReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameCheckReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameCheckReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameCheckReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameCheckReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameCheckReq.AppID)
}

// required uint32 LocalLifeNum = 3;
bool GameCheckReq::has_locallifenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameCheckReq::set_has_locallifenum() {
  _has_bits_[0] |= 0x00000008u;
}
void GameCheckReq::clear_has_locallifenum() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameCheckReq::clear_locallifenum() {
  locallifenum_ = 0u;
  clear_has_locallifenum();
}
::google::protobuf::uint32 GameCheckReq::locallifenum() const {
  // @@protoc_insertion_point(field_get:micromsg.GameCheckReq.LocalLifeNum)
  return locallifenum_;
}
void GameCheckReq::set_locallifenum(::google::protobuf::uint32 value) {
  set_has_locallifenum();
  locallifenum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameCheckReq.LocalLifeNum)
}

// optional string Token = 4;
bool GameCheckReq::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameCheckReq::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
void GameCheckReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameCheckReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& GameCheckReq::token() const {
  // @@protoc_insertion_point(field_get:micromsg.GameCheckReq.Token)
  return token_.GetNoArena();
}
void GameCheckReq::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameCheckReq.Token)
}
#if LANG_CXX11
void GameCheckReq::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameCheckReq.Token)
}
#endif
void GameCheckReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameCheckReq.Token)
}
void GameCheckReq::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameCheckReq.Token)
}
::std::string* GameCheckReq::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:micromsg.GameCheckReq.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameCheckReq::release_token() {
  // @@protoc_insertion_point(field_release:micromsg.GameCheckReq.Token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameCheckReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameCheckReq.Token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCheckResp::kBaseResponseFieldNumber;
const int GameCheckResp::kCheckLeftTimeFieldNumber;
const int GameCheckResp::kLifeNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCheckResp::GameCheckResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameCheckResp)
}
GameCheckResp::GameCheckResp(const GameCheckResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&checklefttime_, &from.checklefttime_,
    reinterpret_cast<char*>(&lifenum_) -
    reinterpret_cast<char*>(&checklefttime_) + sizeof(lifenum_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GameCheckResp)
}

void GameCheckResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&lifenum_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(lifenum_));
}

GameCheckResp::~GameCheckResp() {
  // @@protoc_insertion_point(destructor:micromsg.GameCheckResp)
  SharedDtor();
}

void GameCheckResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GameCheckResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameCheckResp::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameCheckResp& GameCheckResp::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameCheckResp* GameCheckResp::New(::google::protobuf::Arena* arena) const {
  GameCheckResp* n = new GameCheckResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameCheckResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameCheckResp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&checklefttime_, 0, reinterpret_cast<char*>(&lifenum_) -
      reinterpret_cast<char*>(&checklefttime_) + sizeof(lifenum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameCheckResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameCheckResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CheckLeftTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_checklefttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checklefttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 LifeNum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_lifenum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameCheckResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameCheckResp)
  return false;
#undef DO_
}

void GameCheckResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameCheckResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 CheckLeftTime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->checklefttime(), output);
  }

  // required uint32 LifeNum = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lifenum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameCheckResp)
}

::google::protobuf::uint8* GameCheckResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameCheckResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 CheckLeftTime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->checklefttime(), target);
  }

  // required uint32 LifeNum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lifenum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameCheckResp)
  return target;
}

size_t GameCheckResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameCheckResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_checklefttime()) {
    // required uint32 CheckLeftTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->checklefttime());
  }

  if (has_lifenum()) {
    // required uint32 LifeNum = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lifenum());
  }

  return total_size;
}
size_t GameCheckResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameCheckResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 CheckLeftTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->checklefttime());

    // required uint32 LifeNum = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lifenum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCheckResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameCheckResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCheckResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameCheckResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameCheckResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameCheckResp)
    MergeFrom(*source);
  }
}

void GameCheckResp::MergeFrom(const GameCheckResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameCheckResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      checklefttime_ = from.checklefttime_;
    }
    if (cached_has_bits & 0x00000004u) {
      lifenum_ = from.lifenum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameCheckResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameCheckResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCheckResp::CopyFrom(const GameCheckResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameCheckResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCheckResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GameCheckResp::Swap(GameCheckResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCheckResp::InternalSwap(GameCheckResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(checklefttime_, other->checklefttime_);
  std::swap(lifenum_, other->lifenum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameCheckResp::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameCheckResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool GameCheckResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameCheckResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GameCheckResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameCheckResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GameCheckResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameCheckResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GameCheckResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameCheckResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GameCheckResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameCheckResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GameCheckResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameCheckResp.BaseResponse)
}

// required uint32 CheckLeftTime = 2;
bool GameCheckResp::has_checklefttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameCheckResp::set_has_checklefttime() {
  _has_bits_[0] |= 0x00000002u;
}
void GameCheckResp::clear_has_checklefttime() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameCheckResp::clear_checklefttime() {
  checklefttime_ = 0u;
  clear_has_checklefttime();
}
::google::protobuf::uint32 GameCheckResp::checklefttime() const {
  // @@protoc_insertion_point(field_get:micromsg.GameCheckResp.CheckLeftTime)
  return checklefttime_;
}
void GameCheckResp::set_checklefttime(::google::protobuf::uint32 value) {
  set_has_checklefttime();
  checklefttime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameCheckResp.CheckLeftTime)
}

// required uint32 LifeNum = 3;
bool GameCheckResp::has_lifenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameCheckResp::set_has_lifenum() {
  _has_bits_[0] |= 0x00000004u;
}
void GameCheckResp::clear_has_lifenum() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameCheckResp::clear_lifenum() {
  lifenum_ = 0u;
  clear_has_lifenum();
}
::google::protobuf::uint32 GameCheckResp::lifenum() const {
  // @@protoc_insertion_point(field_get:micromsg.GameCheckResp.LifeNum)
  return lifenum_;
}
void GameCheckResp::set_lifenum(::google::protobuf::uint32 value) {
  set_has_lifenum();
  lifenum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameCheckResp.LifeNum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameWishReq::kBaseRequestFieldNumber;
const int GameWishReq::kAppIDFieldNumber;
const int GameWishReq::kCountFieldNumber;
const int GameWishReq::kUserNameListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameWishReq::GameWishReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameWishReq)
}
GameWishReq::GameWishReq(const GameWishReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      usernamelist_(from.usernamelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_appid()) {
    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GameWishReq)
}

void GameWishReq::SharedCtor() {
  _cached_size_ = 0;
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(count_));
}

GameWishReq::~GameWishReq() {
  // @@protoc_insertion_point(destructor:micromsg.GameWishReq)
  SharedDtor();
}

void GameWishReq::SharedDtor() {
  appid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GameWishReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameWishReq::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameWishReq& GameWishReq::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameWishReq* GameWishReq::New(::google::protobuf::Arena* arena) const {
  GameWishReq* n = new GameWishReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameWishReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameWishReq)
  usernamelist_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_appid()) {
      GOOGLE_DCHECK(!appid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*appid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameWishReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameWishReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AppID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameWishReq.AppID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t UserNameList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usernamelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameWishReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameWishReq)
  return false;
#undef DO_
}

void GameWishReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameWishReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameWishReq.AppID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appid(), output);
  }

  // required int32 Count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // repeated .micromsg.SKBuiltinString_t UserNameList = 4;
  for (unsigned int i = 0, n = this->usernamelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->usernamelist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameWishReq)
}

::google::protobuf::uint8* GameWishReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameWishReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameWishReq.AppID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appid(), target);
  }

  // required int32 Count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // repeated .micromsg.SKBuiltinString_t UserNameList = 4;
  for (unsigned int i = 0, n = this->usernamelist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->usernamelist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameWishReq)
  return target;
}

size_t GameWishReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameWishReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_count()) {
    // required int32 Count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  return total_size;
}
size_t GameWishReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameWishReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int32 Count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SKBuiltinString_t UserNameList = 4;
  {
    unsigned int count = this->usernamelist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usernamelist(i));
    }
  }

  // optional string AppID = 2;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameWishReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameWishReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GameWishReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameWishReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameWishReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameWishReq)
    MergeFrom(*source);
  }
}

void GameWishReq::MergeFrom(const GameWishReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameWishReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  usernamelist_.MergeFrom(from.usernamelist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_appid();
      appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameWishReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameWishReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameWishReq::CopyFrom(const GameWishReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameWishReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameWishReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GameWishReq::Swap(GameWishReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameWishReq::InternalSwap(GameWishReq* other) {
  usernamelist_.InternalSwap(&other->usernamelist_);
  appid_.Swap(&other->appid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameWishReq::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameWishReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool GameWishReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameWishReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GameWishReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameWishReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GameWishReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameWishReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GameWishReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameWishReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GameWishReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameWishReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GameWishReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameWishReq.BaseRequest)
}

// optional string AppID = 2;
bool GameWishReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameWishReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameWishReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameWishReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
const ::std::string& GameWishReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameWishReq.AppID)
  return appid_.GetNoArena();
}
void GameWishReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameWishReq.AppID)
}
#if LANG_CXX11
void GameWishReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameWishReq.AppID)
}
#endif
void GameWishReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameWishReq.AppID)
}
void GameWishReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameWishReq.AppID)
}
::std::string* GameWishReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameWishReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameWishReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameWishReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameWishReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameWishReq.AppID)
}

// required int32 Count = 3;
bool GameWishReq::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameWishReq::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
void GameWishReq::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameWishReq::clear_count() {
  count_ = 0;
  clear_has_count();
}
::google::protobuf::int32 GameWishReq::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GameWishReq.Count)
  return count_;
}
void GameWishReq::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameWishReq.Count)
}

// repeated .micromsg.SKBuiltinString_t UserNameList = 4;
int GameWishReq::usernamelist_size() const {
  return usernamelist_.size();
}
void GameWishReq::clear_usernamelist() {
  usernamelist_.Clear();
}
const ::micromsg::SKBuiltinString_t& GameWishReq::usernamelist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameWishReq.UserNameList)
  return usernamelist_.Get(index);
}
::micromsg::SKBuiltinString_t* GameWishReq::mutable_usernamelist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameWishReq.UserNameList)
  return usernamelist_.Mutable(index);
}
::micromsg::SKBuiltinString_t* GameWishReq::add_usernamelist() {
  // @@protoc_insertion_point(field_add:micromsg.GameWishReq.UserNameList)
  return usernamelist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
GameWishReq::mutable_usernamelist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameWishReq.UserNameList)
  return &usernamelist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
GameWishReq::usernamelist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameWishReq.UserNameList)
  return usernamelist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameWishResp::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameWishResp::GameWishResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameWishResp)
}
GameWishResp::GameWishResp(const GameWishResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GameWishResp)
}

void GameWishResp::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

GameWishResp::~GameWishResp() {
  // @@protoc_insertion_point(destructor:micromsg.GameWishResp)
  SharedDtor();
}

void GameWishResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GameWishResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameWishResp::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameWishResp& GameWishResp::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameWishResp* GameWishResp::New(::google::protobuf::Arena* arena) const {
  GameWishResp* n = new GameWishResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameWishResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameWishResp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameWishResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameWishResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameWishResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameWishResp)
  return false;
#undef DO_
}

void GameWishResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameWishResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameWishResp)
}

::google::protobuf::uint8* GameWishResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameWishResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameWishResp)
  return target;
}

size_t GameWishResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameWishResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameWishResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameWishResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GameWishResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameWishResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameWishResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameWishResp)
    MergeFrom(*source);
  }
}

void GameWishResp::MergeFrom(const GameWishResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameWishResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void GameWishResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameWishResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameWishResp::CopyFrom(const GameWishResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameWishResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameWishResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GameWishResp::Swap(GameWishResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameWishResp::InternalSwap(GameWishResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameWishResp::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameWishResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool GameWishResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameWishResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GameWishResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameWishResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GameWishResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameWishResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GameWishResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameWishResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GameWishResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameWishResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GameWishResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameWishResp.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameGiftReq::kBaseRequestFieldNumber;
const int GameGiftReq::kAppIDFieldNumber;
const int GameGiftReq::kLocalLifeNumFieldNumber;
const int GameGiftReq::kCountFieldNumber;
const int GameGiftReq::kUserNameListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameGiftReq::GameGiftReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameGiftReq)
}
GameGiftReq::GameGiftReq(const GameGiftReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      usernamelist_(from.usernamelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_appid()) {
    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&locallifenum_, &from.locallifenum_,
    reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&locallifenum_) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GameGiftReq)
}

void GameGiftReq::SharedCtor() {
  _cached_size_ = 0;
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(count_));
}

GameGiftReq::~GameGiftReq() {
  // @@protoc_insertion_point(destructor:micromsg.GameGiftReq)
  SharedDtor();
}

void GameGiftReq::SharedDtor() {
  appid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GameGiftReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameGiftReq::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameGiftReq& GameGiftReq::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameGiftReq* GameGiftReq::New(::google::protobuf::Arena* arena) const {
  GameGiftReq* n = new GameGiftReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameGiftReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameGiftReq)
  usernamelist_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_appid()) {
      GOOGLE_DCHECK(!appid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*appid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&locallifenum_, 0, reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&locallifenum_) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameGiftReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameGiftReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AppID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameGiftReq.AppID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 LocalLifeNum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_locallifenum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &locallifenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t UserNameList = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usernamelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameGiftReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameGiftReq)
  return false;
#undef DO_
}

void GameGiftReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameGiftReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameGiftReq.AppID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appid(), output);
  }

  // required uint32 LocalLifeNum = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->locallifenum(), output);
  }

  // required int32 Count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // repeated .micromsg.SKBuiltinString_t UserNameList = 5;
  for (unsigned int i = 0, n = this->usernamelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->usernamelist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameGiftReq)
}

::google::protobuf::uint8* GameGiftReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameGiftReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameGiftReq.AppID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appid(), target);
  }

  // required uint32 LocalLifeNum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->locallifenum(), target);
  }

  // required int32 Count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  // repeated .micromsg.SKBuiltinString_t UserNameList = 5;
  for (unsigned int i = 0, n = this->usernamelist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->usernamelist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameGiftReq)
  return target;
}

size_t GameGiftReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameGiftReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_locallifenum()) {
    // required uint32 LocalLifeNum = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->locallifenum());
  }

  if (has_count()) {
    // required int32 Count = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  return total_size;
}
size_t GameGiftReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameGiftReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 LocalLifeNum = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->locallifenum());

    // required int32 Count = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SKBuiltinString_t UserNameList = 5;
  {
    unsigned int count = this->usernamelist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usernamelist(i));
    }
  }

  // optional string AppID = 2;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameGiftReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameGiftReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GameGiftReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameGiftReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameGiftReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameGiftReq)
    MergeFrom(*source);
  }
}

void GameGiftReq::MergeFrom(const GameGiftReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameGiftReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  usernamelist_.MergeFrom(from.usernamelist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_appid();
      appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      locallifenum_ = from.locallifenum_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameGiftReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameGiftReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameGiftReq::CopyFrom(const GameGiftReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameGiftReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameGiftReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GameGiftReq::Swap(GameGiftReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameGiftReq::InternalSwap(GameGiftReq* other) {
  usernamelist_.InternalSwap(&other->usernamelist_);
  appid_.Swap(&other->appid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(locallifenum_, other->locallifenum_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameGiftReq::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameGiftReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool GameGiftReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameGiftReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GameGiftReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameGiftReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GameGiftReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameGiftReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GameGiftReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameGiftReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GameGiftReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameGiftReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GameGiftReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameGiftReq.BaseRequest)
}

// optional string AppID = 2;
bool GameGiftReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameGiftReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameGiftReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameGiftReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
const ::std::string& GameGiftReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameGiftReq.AppID)
  return appid_.GetNoArena();
}
void GameGiftReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameGiftReq.AppID)
}
#if LANG_CXX11
void GameGiftReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameGiftReq.AppID)
}
#endif
void GameGiftReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameGiftReq.AppID)
}
void GameGiftReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameGiftReq.AppID)
}
::std::string* GameGiftReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameGiftReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameGiftReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameGiftReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameGiftReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameGiftReq.AppID)
}

// required uint32 LocalLifeNum = 3;
bool GameGiftReq::has_locallifenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameGiftReq::set_has_locallifenum() {
  _has_bits_[0] |= 0x00000004u;
}
void GameGiftReq::clear_has_locallifenum() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameGiftReq::clear_locallifenum() {
  locallifenum_ = 0u;
  clear_has_locallifenum();
}
::google::protobuf::uint32 GameGiftReq::locallifenum() const {
  // @@protoc_insertion_point(field_get:micromsg.GameGiftReq.LocalLifeNum)
  return locallifenum_;
}
void GameGiftReq::set_locallifenum(::google::protobuf::uint32 value) {
  set_has_locallifenum();
  locallifenum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameGiftReq.LocalLifeNum)
}

// required int32 Count = 4;
bool GameGiftReq::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameGiftReq::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
void GameGiftReq::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameGiftReq::clear_count() {
  count_ = 0;
  clear_has_count();
}
::google::protobuf::int32 GameGiftReq::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GameGiftReq.Count)
  return count_;
}
void GameGiftReq::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameGiftReq.Count)
}

// repeated .micromsg.SKBuiltinString_t UserNameList = 5;
int GameGiftReq::usernamelist_size() const {
  return usernamelist_.size();
}
void GameGiftReq::clear_usernamelist() {
  usernamelist_.Clear();
}
const ::micromsg::SKBuiltinString_t& GameGiftReq::usernamelist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameGiftReq.UserNameList)
  return usernamelist_.Get(index);
}
::micromsg::SKBuiltinString_t* GameGiftReq::mutable_usernamelist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameGiftReq.UserNameList)
  return usernamelist_.Mutable(index);
}
::micromsg::SKBuiltinString_t* GameGiftReq::add_usernamelist() {
  // @@protoc_insertion_point(field_add:micromsg.GameGiftReq.UserNameList)
  return usernamelist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
GameGiftReq::mutable_usernamelist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameGiftReq.UserNameList)
  return &usernamelist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
GameGiftReq::usernamelist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameGiftReq.UserNameList)
  return usernamelist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameGiftResp::kBaseResponseFieldNumber;
const int GameGiftResp::kLifeNumFieldNumber;
const int GameGiftResp::kCheckLeftTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameGiftResp::GameGiftResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameGiftResp)
}
GameGiftResp::GameGiftResp(const GameGiftResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&lifenum_, &from.lifenum_,
    reinterpret_cast<char*>(&checklefttime_) -
    reinterpret_cast<char*>(&lifenum_) + sizeof(checklefttime_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GameGiftResp)
}

void GameGiftResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&checklefttime_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(checklefttime_));
}

GameGiftResp::~GameGiftResp() {
  // @@protoc_insertion_point(destructor:micromsg.GameGiftResp)
  SharedDtor();
}

void GameGiftResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GameGiftResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameGiftResp::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameGiftResp& GameGiftResp::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameGiftResp* GameGiftResp::New(::google::protobuf::Arena* arena) const {
  GameGiftResp* n = new GameGiftResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameGiftResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameGiftResp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&lifenum_, 0, reinterpret_cast<char*>(&checklefttime_) -
      reinterpret_cast<char*>(&lifenum_) + sizeof(checklefttime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameGiftResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameGiftResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 LifeNum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_lifenum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CheckLeftTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_checklefttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checklefttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameGiftResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameGiftResp)
  return false;
#undef DO_
}

void GameGiftResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameGiftResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 LifeNum = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lifenum(), output);
  }

  // required uint32 CheckLeftTime = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->checklefttime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameGiftResp)
}

::google::protobuf::uint8* GameGiftResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameGiftResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 LifeNum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lifenum(), target);
  }

  // required uint32 CheckLeftTime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->checklefttime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameGiftResp)
  return target;
}

size_t GameGiftResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameGiftResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_lifenum()) {
    // required uint32 LifeNum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lifenum());
  }

  if (has_checklefttime()) {
    // required uint32 CheckLeftTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->checklefttime());
  }

  return total_size;
}
size_t GameGiftResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameGiftResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 LifeNum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lifenum());

    // required uint32 CheckLeftTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->checklefttime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameGiftResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameGiftResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GameGiftResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameGiftResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameGiftResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameGiftResp)
    MergeFrom(*source);
  }
}

void GameGiftResp::MergeFrom(const GameGiftResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameGiftResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      lifenum_ = from.lifenum_;
    }
    if (cached_has_bits & 0x00000004u) {
      checklefttime_ = from.checklefttime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameGiftResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameGiftResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameGiftResp::CopyFrom(const GameGiftResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameGiftResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameGiftResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GameGiftResp::Swap(GameGiftResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameGiftResp::InternalSwap(GameGiftResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(lifenum_, other->lifenum_);
  std::swap(checklefttime_, other->checklefttime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameGiftResp::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameGiftResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool GameGiftResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameGiftResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GameGiftResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameGiftResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GameGiftResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameGiftResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GameGiftResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameGiftResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GameGiftResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameGiftResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GameGiftResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameGiftResp.BaseResponse)
}

// required uint32 LifeNum = 2;
bool GameGiftResp::has_lifenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameGiftResp::set_has_lifenum() {
  _has_bits_[0] |= 0x00000002u;
}
void GameGiftResp::clear_has_lifenum() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameGiftResp::clear_lifenum() {
  lifenum_ = 0u;
  clear_has_lifenum();
}
::google::protobuf::uint32 GameGiftResp::lifenum() const {
  // @@protoc_insertion_point(field_get:micromsg.GameGiftResp.LifeNum)
  return lifenum_;
}
void GameGiftResp::set_lifenum(::google::protobuf::uint32 value) {
  set_has_lifenum();
  lifenum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameGiftResp.LifeNum)
}

// required uint32 CheckLeftTime = 3;
bool GameGiftResp::has_checklefttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameGiftResp::set_has_checklefttime() {
  _has_bits_[0] |= 0x00000004u;
}
void GameGiftResp::clear_has_checklefttime() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameGiftResp::clear_checklefttime() {
  checklefttime_ = 0u;
  clear_has_checklefttime();
}
::google::protobuf::uint32 GameGiftResp::checklefttime() const {
  // @@protoc_insertion_point(field_get:micromsg.GameGiftResp.CheckLeftTime)
  return checklefttime_;
}
void GameGiftResp::set_checklefttime(::google::protobuf::uint32 value) {
  set_has_checklefttime();
  checklefttime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameGiftResp.CheckLeftTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameFriendListReq::kBaseRequestFieldNumber;
const int GameFriendListReq::kAppIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameFriendListReq::GameFriendListReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameFriendListReq)
}
GameFriendListReq::GameFriendListReq(const GameFriendListReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_appid()) {
    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GameFriendListReq)
}

void GameFriendListReq::SharedCtor() {
  _cached_size_ = 0;
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

GameFriendListReq::~GameFriendListReq() {
  // @@protoc_insertion_point(destructor:micromsg.GameFriendListReq)
  SharedDtor();
}

void GameFriendListReq::SharedDtor() {
  appid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GameFriendListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameFriendListReq::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameFriendListReq& GameFriendListReq::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameFriendListReq* GameFriendListReq::New(::google::protobuf::Arena* arena) const {
  GameFriendListReq* n = new GameFriendListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameFriendListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameFriendListReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_appid()) {
      GOOGLE_DCHECK(!appid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*appid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameFriendListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameFriendListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AppID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameFriendListReq.AppID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameFriendListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameFriendListReq)
  return false;
#undef DO_
}

void GameFriendListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameFriendListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameFriendListReq.AppID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameFriendListReq)
}

::google::protobuf::uint8* GameFriendListReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameFriendListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameFriendListReq.AppID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameFriendListReq)
  return target;
}

size_t GameFriendListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameFriendListReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string AppID = 2;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameFriendListReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameFriendListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GameFriendListReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameFriendListReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameFriendListReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameFriendListReq)
    MergeFrom(*source);
  }
}

void GameFriendListReq::MergeFrom(const GameFriendListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameFriendListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_appid();
      appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void GameFriendListReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameFriendListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameFriendListReq::CopyFrom(const GameFriendListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameFriendListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameFriendListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GameFriendListReq::Swap(GameFriendListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameFriendListReq::InternalSwap(GameFriendListReq* other) {
  appid_.Swap(&other->appid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameFriendListReq::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameFriendListReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool GameFriendListReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameFriendListReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GameFriendListReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameFriendListReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GameFriendListReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameFriendListReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GameFriendListReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameFriendListReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GameFriendListReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameFriendListReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GameFriendListReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameFriendListReq.BaseRequest)
}

// optional string AppID = 2;
bool GameFriendListReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameFriendListReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameFriendListReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameFriendListReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
const ::std::string& GameFriendListReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameFriendListReq.AppID)
  return appid_.GetNoArena();
}
void GameFriendListReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameFriendListReq.AppID)
}
#if LANG_CXX11
void GameFriendListReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameFriendListReq.AppID)
}
#endif
void GameFriendListReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameFriendListReq.AppID)
}
void GameFriendListReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameFriendListReq.AppID)
}
::std::string* GameFriendListReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameFriendListReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameFriendListReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameFriendListReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameFriendListReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameFriendListReq.AppID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameFriendListResp::kBaseResponseFieldNumber;
const int GameFriendListResp::kCountFieldNumber;
const int GameFriendListResp::kFriendListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameFriendListResp::GameFriendListResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameFriendListResp)
}
GameFriendListResp::GameFriendListResp(const GameFriendListResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      friendlist_(from.friendlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GameFriendListResp)
}

void GameFriendListResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(count_));
}

GameFriendListResp::~GameFriendListResp() {
  // @@protoc_insertion_point(destructor:micromsg.GameFriendListResp)
  SharedDtor();
}

void GameFriendListResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GameFriendListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameFriendListResp::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameFriendListResp& GameFriendListResp::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameFriendListResp* GameFriendListResp::New(::google::protobuf::Arena* arena) const {
  GameFriendListResp* n = new GameFriendListResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameFriendListResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameFriendListResp)
  friendlist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameFriendListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameFriendListResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.UserGameInfo FriendList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameFriendListResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameFriendListResp)
  return false;
#undef DO_
}

void GameFriendListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameFriendListResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // repeated .micromsg.UserGameInfo FriendList = 3;
  for (unsigned int i = 0, n = this->friendlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->friendlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameFriendListResp)
}

::google::protobuf::uint8* GameFriendListResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameFriendListResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.UserGameInfo FriendList = 3;
  for (unsigned int i = 0, n = this->friendlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->friendlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameFriendListResp)
  return target;
}

size_t GameFriendListResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameFriendListResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_count()) {
    // required int32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  return total_size;
}
size_t GameFriendListResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameFriendListResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required int32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.UserGameInfo FriendList = 3;
  {
    unsigned int count = this->friendlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameFriendListResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameFriendListResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GameFriendListResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameFriendListResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameFriendListResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameFriendListResp)
    MergeFrom(*source);
  }
}

void GameFriendListResp::MergeFrom(const GameFriendListResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameFriendListResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friendlist_.MergeFrom(from.friendlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameFriendListResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameFriendListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameFriendListResp::CopyFrom(const GameFriendListResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameFriendListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameFriendListResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GameFriendListResp::Swap(GameFriendListResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameFriendListResp::InternalSwap(GameFriendListResp* other) {
  friendlist_.InternalSwap(&other->friendlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameFriendListResp::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameFriendListResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool GameFriendListResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameFriendListResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GameFriendListResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameFriendListResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GameFriendListResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameFriendListResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GameFriendListResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameFriendListResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GameFriendListResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameFriendListResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GameFriendListResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameFriendListResp.BaseResponse)
}

// required int32 Count = 2;
bool GameFriendListResp::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameFriendListResp::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void GameFriendListResp::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameFriendListResp::clear_count() {
  count_ = 0;
  clear_has_count();
}
::google::protobuf::int32 GameFriendListResp::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GameFriendListResp.Count)
  return count_;
}
void GameFriendListResp::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameFriendListResp.Count)
}

// repeated .micromsg.UserGameInfo FriendList = 3;
int GameFriendListResp::friendlist_size() const {
  return friendlist_.size();
}
void GameFriendListResp::clear_friendlist() {
  friendlist_.Clear();
}
const ::micromsg::UserGameInfo& GameFriendListResp::friendlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameFriendListResp.FriendList)
  return friendlist_.Get(index);
}
::micromsg::UserGameInfo* GameFriendListResp::mutable_friendlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameFriendListResp.FriendList)
  return friendlist_.Mutable(index);
}
::micromsg::UserGameInfo* GameFriendListResp::add_friendlist() {
  // @@protoc_insertion_point(field_add:micromsg.GameFriendListResp.FriendList)
  return friendlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::UserGameInfo >*
GameFriendListResp::mutable_friendlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameFriendListResp.FriendList)
  return &friendlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameInfo >&
GameFriendListResp::friendlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameFriendListResp.FriendList)
  return friendlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameWishListReq::kBaseRequestFieldNumber;
const int GameWishListReq::kAppIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameWishListReq::GameWishListReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameWishListReq)
}
GameWishListReq::GameWishListReq(const GameWishListReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_appid()) {
    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GameWishListReq)
}

void GameWishListReq::SharedCtor() {
  _cached_size_ = 0;
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

GameWishListReq::~GameWishListReq() {
  // @@protoc_insertion_point(destructor:micromsg.GameWishListReq)
  SharedDtor();
}

void GameWishListReq::SharedDtor() {
  appid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GameWishListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameWishListReq::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameWishListReq& GameWishListReq::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameWishListReq* GameWishListReq::New(::google::protobuf::Arena* arena) const {
  GameWishListReq* n = new GameWishListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameWishListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameWishListReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_appid()) {
      GOOGLE_DCHECK(!appid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*appid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameWishListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameWishListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AppID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameWishListReq.AppID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameWishListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameWishListReq)
  return false;
#undef DO_
}

void GameWishListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameWishListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameWishListReq.AppID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameWishListReq)
}

::google::protobuf::uint8* GameWishListReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameWishListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameWishListReq.AppID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameWishListReq)
  return target;
}

size_t GameWishListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameWishListReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string AppID = 2;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameWishListReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameWishListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GameWishListReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameWishListReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameWishListReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameWishListReq)
    MergeFrom(*source);
  }
}

void GameWishListReq::MergeFrom(const GameWishListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameWishListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_appid();
      appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void GameWishListReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameWishListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameWishListReq::CopyFrom(const GameWishListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameWishListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameWishListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GameWishListReq::Swap(GameWishListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameWishListReq::InternalSwap(GameWishListReq* other) {
  appid_.Swap(&other->appid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameWishListReq::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameWishListReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool GameWishListReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameWishListReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GameWishListReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameWishListReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GameWishListReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameWishListReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GameWishListReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameWishListReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GameWishListReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameWishListReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GameWishListReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameWishListReq.BaseRequest)
}

// optional string AppID = 2;
bool GameWishListReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameWishListReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameWishListReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameWishListReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
const ::std::string& GameWishListReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameWishListReq.AppID)
  return appid_.GetNoArena();
}
void GameWishListReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameWishListReq.AppID)
}
#if LANG_CXX11
void GameWishListReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameWishListReq.AppID)
}
#endif
void GameWishListReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameWishListReq.AppID)
}
void GameWishListReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameWishListReq.AppID)
}
::std::string* GameWishListReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameWishListReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameWishListReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameWishListReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameWishListReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameWishListReq.AppID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameWishListResp::kBaseResponseFieldNumber;
const int GameWishListResp::kCountFieldNumber;
const int GameWishListResp::kWishListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameWishListResp::GameWishListResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameWishListResp)
}
GameWishListResp::GameWishListResp(const GameWishListResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      wishlist_(from.wishlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GameWishListResp)
}

void GameWishListResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(count_));
}

GameWishListResp::~GameWishListResp() {
  // @@protoc_insertion_point(destructor:micromsg.GameWishListResp)
  SharedDtor();
}

void GameWishListResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GameWishListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameWishListResp::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameWishListResp& GameWishListResp::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameWishListResp* GameWishListResp::New(::google::protobuf::Arena* arena) const {
  GameWishListResp* n = new GameWishListResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameWishListResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameWishListResp)
  wishlist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameWishListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameWishListResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.UserGameWishInfo WishList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wishlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameWishListResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameWishListResp)
  return false;
#undef DO_
}

void GameWishListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameWishListResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // repeated .micromsg.UserGameWishInfo WishList = 3;
  for (unsigned int i = 0, n = this->wishlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->wishlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameWishListResp)
}

::google::protobuf::uint8* GameWishListResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameWishListResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.UserGameWishInfo WishList = 3;
  for (unsigned int i = 0, n = this->wishlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->wishlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameWishListResp)
  return target;
}

size_t GameWishListResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameWishListResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_count()) {
    // required int32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  return total_size;
}
size_t GameWishListResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameWishListResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required int32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.UserGameWishInfo WishList = 3;
  {
    unsigned int count = this->wishlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wishlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameWishListResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameWishListResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GameWishListResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameWishListResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameWishListResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameWishListResp)
    MergeFrom(*source);
  }
}

void GameWishListResp::MergeFrom(const GameWishListResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameWishListResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wishlist_.MergeFrom(from.wishlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameWishListResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameWishListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameWishListResp::CopyFrom(const GameWishListResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameWishListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameWishListResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->wishlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GameWishListResp::Swap(GameWishListResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameWishListResp::InternalSwap(GameWishListResp* other) {
  wishlist_.InternalSwap(&other->wishlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameWishListResp::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameWishListResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool GameWishListResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameWishListResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GameWishListResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameWishListResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GameWishListResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameWishListResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GameWishListResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameWishListResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GameWishListResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameWishListResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GameWishListResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameWishListResp.BaseResponse)
}

// required int32 Count = 2;
bool GameWishListResp::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameWishListResp::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void GameWishListResp::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameWishListResp::clear_count() {
  count_ = 0;
  clear_has_count();
}
::google::protobuf::int32 GameWishListResp::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GameWishListResp.Count)
  return count_;
}
void GameWishListResp::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameWishListResp.Count)
}

// repeated .micromsg.UserGameWishInfo WishList = 3;
int GameWishListResp::wishlist_size() const {
  return wishlist_.size();
}
void GameWishListResp::clear_wishlist() {
  wishlist_.Clear();
}
const ::micromsg::UserGameWishInfo& GameWishListResp::wishlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameWishListResp.WishList)
  return wishlist_.Get(index);
}
::micromsg::UserGameWishInfo* GameWishListResp::mutable_wishlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameWishListResp.WishList)
  return wishlist_.Mutable(index);
}
::micromsg::UserGameWishInfo* GameWishListResp::add_wishlist() {
  // @@protoc_insertion_point(field_add:micromsg.GameWishListResp.WishList)
  return wishlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::UserGameWishInfo >*
GameWishListResp::mutable_wishlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameWishListResp.WishList)
  return &wishlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameWishInfo >&
GameWishListResp::wishlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameWishListResp.WishList)
  return wishlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameShareReq::kBaseRequestFieldNumber;
const int GameShareReq::kAppIDFieldNumber;
const int GameShareReq::kTypeFieldNumber;
const int GameShareReq::kScoreFieldNumber;
const int GameShareReq::kAchieveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameShareReq::GameShareReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameShareReq)
}
GameShareReq::GameShareReq(const GameShareReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_appid()) {
    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  achieve_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_achieve()) {
    achieve_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.achieve_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&type_) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GameShareReq)
}

void GameShareReq::SharedCtor() {
  _cached_size_ = 0;
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  achieve_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(score_));
}

GameShareReq::~GameShareReq() {
  // @@protoc_insertion_point(destructor:micromsg.GameShareReq)
  SharedDtor();
}

void GameShareReq::SharedDtor() {
  appid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  achieve_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GameShareReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameShareReq::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameShareReq& GameShareReq::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameShareReq* GameShareReq::New(::google::protobuf::Arena* arena) const {
  GameShareReq* n = new GameShareReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameShareReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameShareReq)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_appid()) {
      GOOGLE_DCHECK(!appid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*appid_.UnsafeRawStringPointer())->clear();
    }
    if (has_achieve()) {
      GOOGLE_DCHECK(!achieve_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*achieve_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&type_) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameShareReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameShareReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AppID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameShareReq.AppID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Achieve = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_achieve()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->achieve().data(), this->achieve().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameShareReq.Achieve");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameShareReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameShareReq)
  return false;
#undef DO_
}

void GameShareReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameShareReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameShareReq.AppID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appid(), output);
  }

  // required uint32 Type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required uint32 Score = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->score(), output);
  }

  // optional string Achieve = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->achieve().data(), this->achieve().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameShareReq.Achieve");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->achieve(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameShareReq)
}

::google::protobuf::uint8* GameShareReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameShareReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameShareReq.AppID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appid(), target);
  }

  // required uint32 Type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required uint32 Score = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->score(), target);
  }

  // optional string Achieve = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->achieve().data(), this->achieve().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameShareReq.Achieve");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->achieve(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameShareReq)
  return target;
}

size_t GameShareReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameShareReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_type()) {
    // required uint32 Type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_score()) {
    // required uint32 Score = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  return total_size;
}
size_t GameShareReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameShareReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 Score = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string AppID = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

    // optional string Achieve = 5;
    if (has_achieve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->achieve());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameShareReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameShareReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GameShareReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameShareReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameShareReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameShareReq)
    MergeFrom(*source);
  }
}

void GameShareReq::MergeFrom(const GameShareReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameShareReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_appid();
      appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_achieve();
      achieve_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.achieve_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameShareReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameShareReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameShareReq::CopyFrom(const GameShareReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameShareReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameShareReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GameShareReq::Swap(GameShareReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameShareReq::InternalSwap(GameShareReq* other) {
  appid_.Swap(&other->appid_);
  achieve_.Swap(&other->achieve_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(type_, other->type_);
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameShareReq::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameShareReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool GameShareReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameShareReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void GameShareReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameShareReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GameShareReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameShareReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GameShareReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameShareReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GameShareReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameShareReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GameShareReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameShareReq.BaseRequest)
}

// optional string AppID = 2;
bool GameShareReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameShareReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameShareReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameShareReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
const ::std::string& GameShareReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameShareReq.AppID)
  return appid_.GetNoArena();
}
void GameShareReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameShareReq.AppID)
}
#if LANG_CXX11
void GameShareReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameShareReq.AppID)
}
#endif
void GameShareReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameShareReq.AppID)
}
void GameShareReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameShareReq.AppID)
}
::std::string* GameShareReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameShareReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameShareReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameShareReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameShareReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameShareReq.AppID)
}

// required uint32 Type = 3;
bool GameShareReq::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameShareReq::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void GameShareReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameShareReq::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 GameShareReq::type() const {
  // @@protoc_insertion_point(field_get:micromsg.GameShareReq.Type)
  return type_;
}
void GameShareReq::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameShareReq.Type)
}

// required uint32 Score = 4;
bool GameShareReq::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GameShareReq::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
void GameShareReq::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
void GameShareReq::clear_score() {
  score_ = 0u;
  clear_has_score();
}
::google::protobuf::uint32 GameShareReq::score() const {
  // @@protoc_insertion_point(field_get:micromsg.GameShareReq.Score)
  return score_;
}
void GameShareReq::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameShareReq.Score)
}

// optional string Achieve = 5;
bool GameShareReq::has_achieve() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameShareReq::set_has_achieve() {
  _has_bits_[0] |= 0x00000002u;
}
void GameShareReq::clear_has_achieve() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameShareReq::clear_achieve() {
  achieve_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_achieve();
}
const ::std::string& GameShareReq::achieve() const {
  // @@protoc_insertion_point(field_get:micromsg.GameShareReq.Achieve)
  return achieve_.GetNoArena();
}
void GameShareReq::set_achieve(const ::std::string& value) {
  set_has_achieve();
  achieve_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameShareReq.Achieve)
}
#if LANG_CXX11
void GameShareReq::set_achieve(::std::string&& value) {
  set_has_achieve();
  achieve_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameShareReq.Achieve)
}
#endif
void GameShareReq::set_achieve(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_achieve();
  achieve_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameShareReq.Achieve)
}
void GameShareReq::set_achieve(const char* value, size_t size) {
  set_has_achieve();
  achieve_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameShareReq.Achieve)
}
::std::string* GameShareReq::mutable_achieve() {
  set_has_achieve();
  // @@protoc_insertion_point(field_mutable:micromsg.GameShareReq.Achieve)
  return achieve_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameShareReq::release_achieve() {
  // @@protoc_insertion_point(field_release:micromsg.GameShareReq.Achieve)
  clear_has_achieve();
  return achieve_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameShareReq::set_allocated_achieve(::std::string* achieve) {
  if (achieve != NULL) {
    set_has_achieve();
  } else {
    clear_has_achieve();
  }
  achieve_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), achieve);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameShareReq.Achieve)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameShareResp::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameShareResp::GameShareResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameShareResp)
}
GameShareResp::GameShareResp(const GameShareResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GameShareResp)
}

void GameShareResp::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

GameShareResp::~GameShareResp() {
  // @@protoc_insertion_point(destructor:micromsg.GameShareResp)
  SharedDtor();
}

void GameShareResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GameShareResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameShareResp::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameShareResp& GameShareResp::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameShareResp* GameShareResp::New(::google::protobuf::Arena* arena) const {
  GameShareResp* n = new GameShareResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameShareResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameShareResp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameShareResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameShareResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameShareResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameShareResp)
  return false;
#undef DO_
}

void GameShareResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameShareResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameShareResp)
}

::google::protobuf::uint8* GameShareResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameShareResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameShareResp)
  return target;
}

size_t GameShareResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameShareResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameShareResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameShareResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GameShareResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameShareResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameShareResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameShareResp)
    MergeFrom(*source);
  }
}

void GameShareResp::MergeFrom(const GameShareResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameShareResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void GameShareResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameShareResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameShareResp::CopyFrom(const GameShareResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameShareResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameShareResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GameShareResp::Swap(GameShareResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameShareResp::InternalSwap(GameShareResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameShareResp::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameShareResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool GameShareResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameShareResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GameShareResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameShareResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GameShareResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameShareResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GameShareResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameShareResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GameShareResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameShareResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GameShareResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameShareResp.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameResourceReq::kBaseRequestFieldNumber;
const int GameResourceReq::kPropsCountFieldNumber;
const int GameResourceReq::kPropsIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameResourceReq::GameResourceReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameResourceReq)
}
GameResourceReq::GameResourceReq(const GameResourceReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      propsidlist_(from.propsidlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  propscount_ = from.propscount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GameResourceReq)
}

void GameResourceReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&propscount_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(propscount_));
}

GameResourceReq::~GameResourceReq() {
  // @@protoc_insertion_point(destructor:micromsg.GameResourceReq)
  SharedDtor();
}

void GameResourceReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GameResourceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameResourceReq::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameResourceReq& GameResourceReq::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameResourceReq* GameResourceReq::New(::google::protobuf::Arena* arena) const {
  GameResourceReq* n = new GameResourceReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameResourceReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameResourceReq)
  propsidlist_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  propscount_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameResourceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameResourceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 PropsCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_propscount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propscount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 PropsIdList = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_propsidlist())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_propsidlist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameResourceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameResourceReq)
  return false;
#undef DO_
}

void GameResourceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameResourceReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required int32 PropsCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->propscount(), output);
  }

  // repeated uint32 PropsIdList = 3 [packed = true];
  if (this->propsidlist_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_propsidlist_cached_byte_size_);
  }
  for (int i = 0, n = this->propsidlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->propsidlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameResourceReq)
}

::google::protobuf::uint8* GameResourceReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameResourceReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required int32 PropsCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->propscount(), target);
  }

  // repeated uint32 PropsIdList = 3 [packed = true];
  if (this->propsidlist_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _propsidlist_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->propsidlist_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameResourceReq)
  return target;
}

size_t GameResourceReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameResourceReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_propscount()) {
    // required int32 PropsCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->propscount());
  }

  return total_size;
}
size_t GameResourceReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameResourceReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int32 PropsCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->propscount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 PropsIdList = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->propsidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _propsidlist_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameResourceReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameResourceReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GameResourceReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameResourceReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameResourceReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameResourceReq)
    MergeFrom(*source);
  }
}

void GameResourceReq::MergeFrom(const GameResourceReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameResourceReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  propsidlist_.MergeFrom(from.propsidlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      propscount_ = from.propscount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameResourceReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameResourceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameResourceReq::CopyFrom(const GameResourceReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameResourceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameResourceReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GameResourceReq::Swap(GameResourceReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameResourceReq::InternalSwap(GameResourceReq* other) {
  propsidlist_.InternalSwap(&other->propsidlist_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(propscount_, other->propscount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameResourceReq::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameResourceReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool GameResourceReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameResourceReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void GameResourceReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameResourceReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GameResourceReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameResourceReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GameResourceReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameResourceReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GameResourceReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameResourceReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GameResourceReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameResourceReq.BaseRequest)
}

// required int32 PropsCount = 2;
bool GameResourceReq::has_propscount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameResourceReq::set_has_propscount() {
  _has_bits_[0] |= 0x00000002u;
}
void GameResourceReq::clear_has_propscount() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameResourceReq::clear_propscount() {
  propscount_ = 0;
  clear_has_propscount();
}
::google::protobuf::int32 GameResourceReq::propscount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameResourceReq.PropsCount)
  return propscount_;
}
void GameResourceReq::set_propscount(::google::protobuf::int32 value) {
  set_has_propscount();
  propscount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameResourceReq.PropsCount)
}

// repeated uint32 PropsIdList = 3 [packed = true];
int GameResourceReq::propsidlist_size() const {
  return propsidlist_.size();
}
void GameResourceReq::clear_propsidlist() {
  propsidlist_.Clear();
}
::google::protobuf::uint32 GameResourceReq::propsidlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameResourceReq.PropsIdList)
  return propsidlist_.Get(index);
}
void GameResourceReq::set_propsidlist(int index, ::google::protobuf::uint32 value) {
  propsidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.GameResourceReq.PropsIdList)
}
void GameResourceReq::add_propsidlist(::google::protobuf::uint32 value) {
  propsidlist_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.GameResourceReq.PropsIdList)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GameResourceReq::propsidlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameResourceReq.PropsIdList)
  return propsidlist_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GameResourceReq::mutable_propsidlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameResourceReq.PropsIdList)
  return &propsidlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameResourceResp::kBaseResponseFieldNumber;
const int GameResourceResp::kPropsCountFieldNumber;
const int GameResourceResp::kPropsListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameResourceResp::GameResourceResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameResourceResp)
}
GameResourceResp::GameResourceResp(const GameResourceResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      propslist_(from.propslist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  propscount_ = from.propscount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GameResourceResp)
}

void GameResourceResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&propscount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(propscount_));
}

GameResourceResp::~GameResourceResp() {
  // @@protoc_insertion_point(destructor:micromsg.GameResourceResp)
  SharedDtor();
}

void GameResourceResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GameResourceResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameResourceResp::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameResourceResp& GameResourceResp::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameResourceResp* GameResourceResp::New(::google::protobuf::Arena* arena) const {
  GameResourceResp* n = new GameResourceResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameResourceResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameResourceResp)
  propslist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  propscount_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameResourceResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameResourceResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 PropsCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_propscount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propscount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.GamePropsInfo PropsList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_propslist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameResourceResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameResourceResp)
  return false;
#undef DO_
}

void GameResourceResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameResourceResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 PropsCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->propscount(), output);
  }

  // repeated .micromsg.GamePropsInfo PropsList = 3;
  for (unsigned int i = 0, n = this->propslist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->propslist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameResourceResp)
}

::google::protobuf::uint8* GameResourceResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameResourceResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 PropsCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->propscount(), target);
  }

  // repeated .micromsg.GamePropsInfo PropsList = 3;
  for (unsigned int i = 0, n = this->propslist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->propslist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameResourceResp)
  return target;
}

size_t GameResourceResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameResourceResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_propscount()) {
    // required int32 PropsCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->propscount());
  }

  return total_size;
}
size_t GameResourceResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameResourceResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required int32 PropsCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->propscount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.GamePropsInfo PropsList = 3;
  {
    unsigned int count = this->propslist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->propslist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameResourceResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameResourceResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GameResourceResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameResourceResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameResourceResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameResourceResp)
    MergeFrom(*source);
  }
}

void GameResourceResp::MergeFrom(const GameResourceResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameResourceResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  propslist_.MergeFrom(from.propslist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      propscount_ = from.propscount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameResourceResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameResourceResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameResourceResp::CopyFrom(const GameResourceResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameResourceResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameResourceResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->propslist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GameResourceResp::Swap(GameResourceResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameResourceResp::InternalSwap(GameResourceResp* other) {
  propslist_.InternalSwap(&other->propslist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(propscount_, other->propscount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameResourceResp::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameResourceResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool GameResourceResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameResourceResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GameResourceResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameResourceResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GameResourceResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameResourceResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GameResourceResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameResourceResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GameResourceResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameResourceResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GameResourceResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameResourceResp.BaseResponse)
}

// required int32 PropsCount = 2;
bool GameResourceResp::has_propscount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameResourceResp::set_has_propscount() {
  _has_bits_[0] |= 0x00000002u;
}
void GameResourceResp::clear_has_propscount() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameResourceResp::clear_propscount() {
  propscount_ = 0;
  clear_has_propscount();
}
::google::protobuf::int32 GameResourceResp::propscount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameResourceResp.PropsCount)
  return propscount_;
}
void GameResourceResp::set_propscount(::google::protobuf::int32 value) {
  set_has_propscount();
  propscount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameResourceResp.PropsCount)
}

// repeated .micromsg.GamePropsInfo PropsList = 3;
int GameResourceResp::propslist_size() const {
  return propslist_.size();
}
void GameResourceResp::clear_propslist() {
  propslist_.Clear();
}
const ::micromsg::GamePropsInfo& GameResourceResp::propslist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameResourceResp.PropsList)
  return propslist_.Get(index);
}
::micromsg::GamePropsInfo* GameResourceResp::mutable_propslist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameResourceResp.PropsList)
  return propslist_.Mutable(index);
}
::micromsg::GamePropsInfo* GameResourceResp::add_propslist() {
  // @@protoc_insertion_point(field_add:micromsg.GameResourceResp.PropsList)
  return propslist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::GamePropsInfo >*
GameResourceResp::mutable_propslist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameResourceResp.PropsList)
  return &propslist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::GamePropsInfo >&
GameResourceResp::propslist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameResourceResp.PropsList)
  return propslist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameConsumeReq::kBaseRequestFieldNumber;
const int GameConsumeReq::kAppIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameConsumeReq::GameConsumeReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameConsumeReq)
}
GameConsumeReq::GameConsumeReq(const GameConsumeReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_appid()) {
    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GameConsumeReq)
}

void GameConsumeReq::SharedCtor() {
  _cached_size_ = 0;
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

GameConsumeReq::~GameConsumeReq() {
  // @@protoc_insertion_point(destructor:micromsg.GameConsumeReq)
  SharedDtor();
}

void GameConsumeReq::SharedDtor() {
  appid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GameConsumeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameConsumeReq::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameConsumeReq& GameConsumeReq::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameConsumeReq* GameConsumeReq::New(::google::protobuf::Arena* arena) const {
  GameConsumeReq* n = new GameConsumeReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameConsumeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameConsumeReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_appid()) {
      GOOGLE_DCHECK(!appid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*appid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameConsumeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameConsumeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AppID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameConsumeReq.AppID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameConsumeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameConsumeReq)
  return false;
#undef DO_
}

void GameConsumeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameConsumeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameConsumeReq.AppID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameConsumeReq)
}

::google::protobuf::uint8* GameConsumeReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameConsumeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string AppID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameConsumeReq.AppID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameConsumeReq)
  return target;
}

size_t GameConsumeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameConsumeReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string AppID = 2;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameConsumeReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameConsumeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GameConsumeReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameConsumeReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameConsumeReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameConsumeReq)
    MergeFrom(*source);
  }
}

void GameConsumeReq::MergeFrom(const GameConsumeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameConsumeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_appid();
      appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void GameConsumeReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameConsumeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameConsumeReq::CopyFrom(const GameConsumeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameConsumeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameConsumeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GameConsumeReq::Swap(GameConsumeReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameConsumeReq::InternalSwap(GameConsumeReq* other) {
  appid_.Swap(&other->appid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameConsumeReq::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameConsumeReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool GameConsumeReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameConsumeReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GameConsumeReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameConsumeReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GameConsumeReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameConsumeReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GameConsumeReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameConsumeReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GameConsumeReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameConsumeReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GameConsumeReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameConsumeReq.BaseRequest)
}

// optional string AppID = 2;
bool GameConsumeReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameConsumeReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameConsumeReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameConsumeReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
const ::std::string& GameConsumeReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameConsumeReq.AppID)
  return appid_.GetNoArena();
}
void GameConsumeReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameConsumeReq.AppID)
}
#if LANG_CXX11
void GameConsumeReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameConsumeReq.AppID)
}
#endif
void GameConsumeReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameConsumeReq.AppID)
}
void GameConsumeReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameConsumeReq.AppID)
}
::std::string* GameConsumeReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameConsumeReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameConsumeReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameConsumeReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameConsumeReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameConsumeReq.AppID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameConsumeResp::kBaseResponseFieldNumber;
const int GameConsumeResp::kConsumeOkFieldNumber;
const int GameConsumeResp::kGameCoinCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameConsumeResp::GameConsumeResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameConsumeResp)
}
GameConsumeResp::GameConsumeResp(const GameConsumeResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&consumeok_, &from.consumeok_,
    reinterpret_cast<char*>(&gamecoincount_) -
    reinterpret_cast<char*>(&consumeok_) + sizeof(gamecoincount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GameConsumeResp)
}

void GameConsumeResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&gamecoincount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(gamecoincount_));
}

GameConsumeResp::~GameConsumeResp() {
  // @@protoc_insertion_point(destructor:micromsg.GameConsumeResp)
  SharedDtor();
}

void GameConsumeResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GameConsumeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameConsumeResp::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameConsumeResp& GameConsumeResp::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameConsumeResp* GameConsumeResp::New(::google::protobuf::Arena* arena) const {
  GameConsumeResp* n = new GameConsumeResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameConsumeResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameConsumeResp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&consumeok_, 0, reinterpret_cast<char*>(&gamecoincount_) -
      reinterpret_cast<char*>(&consumeok_) + sizeof(gamecoincount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameConsumeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameConsumeResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ConsumeOk = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_consumeok();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consumeok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 GameCoinCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_gamecoincount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamecoincount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameConsumeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameConsumeResp)
  return false;
#undef DO_
}

void GameConsumeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameConsumeResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 ConsumeOk = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->consumeok(), output);
  }

  // required uint32 GameCoinCount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gamecoincount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameConsumeResp)
}

::google::protobuf::uint8* GameConsumeResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameConsumeResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 ConsumeOk = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->consumeok(), target);
  }

  // required uint32 GameCoinCount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gamecoincount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameConsumeResp)
  return target;
}

size_t GameConsumeResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameConsumeResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_consumeok()) {
    // required uint32 ConsumeOk = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->consumeok());
  }

  if (has_gamecoincount()) {
    // required uint32 GameCoinCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gamecoincount());
  }

  return total_size;
}
size_t GameConsumeResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameConsumeResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 ConsumeOk = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->consumeok());

    // required uint32 GameCoinCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gamecoincount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameConsumeResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameConsumeResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GameConsumeResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameConsumeResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameConsumeResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameConsumeResp)
    MergeFrom(*source);
  }
}

void GameConsumeResp::MergeFrom(const GameConsumeResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameConsumeResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      consumeok_ = from.consumeok_;
    }
    if (cached_has_bits & 0x00000004u) {
      gamecoincount_ = from.gamecoincount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameConsumeResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameConsumeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameConsumeResp::CopyFrom(const GameConsumeResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameConsumeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameConsumeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GameConsumeResp::Swap(GameConsumeResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameConsumeResp::InternalSwap(GameConsumeResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(consumeok_, other->consumeok_);
  std::swap(gamecoincount_, other->gamecoincount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameConsumeResp::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameConsumeResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool GameConsumeResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameConsumeResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GameConsumeResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameConsumeResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GameConsumeResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameConsumeResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GameConsumeResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameConsumeResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GameConsumeResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameConsumeResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GameConsumeResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameConsumeResp.BaseResponse)
}

// required uint32 ConsumeOk = 2;
bool GameConsumeResp::has_consumeok() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameConsumeResp::set_has_consumeok() {
  _has_bits_[0] |= 0x00000002u;
}
void GameConsumeResp::clear_has_consumeok() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameConsumeResp::clear_consumeok() {
  consumeok_ = 0u;
  clear_has_consumeok();
}
::google::protobuf::uint32 GameConsumeResp::consumeok() const {
  // @@protoc_insertion_point(field_get:micromsg.GameConsumeResp.ConsumeOk)
  return consumeok_;
}
void GameConsumeResp::set_consumeok(::google::protobuf::uint32 value) {
  set_has_consumeok();
  consumeok_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameConsumeResp.ConsumeOk)
}

// required uint32 GameCoinCount = 3;
bool GameConsumeResp::has_gamecoincount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameConsumeResp::set_has_gamecoincount() {
  _has_bits_[0] |= 0x00000004u;
}
void GameConsumeResp::clear_has_gamecoincount() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameConsumeResp::clear_gamecoincount() {
  gamecoincount_ = 0u;
  clear_has_gamecoincount();
}
::google::protobuf::uint32 GameConsumeResp::gamecoincount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameConsumeResp.GameCoinCount)
  return gamecoincount_;
}
void GameConsumeResp::set_gamecoincount(::google::protobuf::uint32 value) {
  set_has_gamecoincount();
  gamecoincount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameConsumeResp.GameCoinCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddGameMsg::kMsgIdFieldNumber;
const int AddGameMsg::kFromUserNameFieldNumber;
const int AddGameMsg::kToUserNameFieldNumber;
const int AddGameMsg::kTypeFieldNumber;
const int AddGameMsg::kFlagFieldNumber;
const int AddGameMsg::kStatusFieldNumber;
const int AddGameMsg::kUpdateTimeFieldNumber;
const int AddGameMsg::kUpdateSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddGameMsg::AddGameMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AddGameMsg)
}
AddGameMsg::AddGameMsg(const AddGameMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromusername()) {
    fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
  }
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tousername()) {
    tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
  }
  ::memcpy(&msgid_, &from.msgid_,
    reinterpret_cast<char*>(&updateseq_) -
    reinterpret_cast<char*>(&msgid_) + sizeof(updateseq_));
  // @@protoc_insertion_point(copy_constructor:micromsg.AddGameMsg)
}

void AddGameMsg::SharedCtor() {
  _cached_size_ = 0;
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msgid_, 0, reinterpret_cast<char*>(&updateseq_) -
    reinterpret_cast<char*>(&msgid_) + sizeof(updateseq_));
}

AddGameMsg::~AddGameMsg() {
  // @@protoc_insertion_point(destructor:micromsg.AddGameMsg)
  SharedDtor();
}

void AddGameMsg::SharedDtor() {
  fromusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddGameMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddGameMsg::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddGameMsg& AddGameMsg::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddGameMsg* AddGameMsg::New(::google::protobuf::Arena* arena) const {
  AddGameMsg* n = new AddGameMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddGameMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AddGameMsg)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_fromusername()) {
      GOOGLE_DCHECK(!fromusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_tousername()) {
      GOOGLE_DCHECK(!tousername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tousername_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&msgid_, 0, reinterpret_cast<char*>(&updateseq_) -
      reinterpret_cast<char*>(&msgid_) + sizeof(updateseq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddGameMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AddGameMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MsgId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FromUserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromusername().data(), this->fromusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AddGameMsg.FromUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ToUserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tousername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tousername().data(), this->tousername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AddGameMsg.ToUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Flag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 UpdateTime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_updatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 UpdateSeq = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_updateseq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updateseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AddGameMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AddGameMsg)
  return false;
#undef DO_
}

void AddGameMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AddGameMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 MsgId = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }

  // optional string FromUserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddGameMsg.FromUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fromusername(), output);
  }

  // optional string ToUserName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddGameMsg.ToUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tousername(), output);
  }

  // required int32 Type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // required uint32 Flag = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flag(), output);
  }

  // required uint32 Status = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }

  // required uint32 UpdateTime = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->updatetime(), output);
  }

  // required uint32 UpdateSeq = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->updateseq(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AddGameMsg)
}

::google::protobuf::uint8* AddGameMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AddGameMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 MsgId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }

  // optional string FromUserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddGameMsg.FromUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fromusername(), target);
  }

  // optional string ToUserName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddGameMsg.ToUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tousername(), target);
  }

  // required int32 Type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // required uint32 Flag = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->flag(), target);
  }

  // required uint32 Status = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }

  // required uint32 UpdateTime = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->updatetime(), target);
  }

  // required uint32 UpdateSeq = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->updateseq(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AddGameMsg)
  return target;
}

size_t AddGameMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.AddGameMsg)
  size_t total_size = 0;

  if (has_msgid()) {
    // required int32 MsgId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgid());
  }

  if (has_type()) {
    // required int32 Type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_flag()) {
    // required uint32 Flag = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag());
  }

  if (has_status()) {
    // required uint32 Status = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  if (has_updatetime()) {
    // required uint32 UpdateTime = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updatetime());
  }

  if (has_updateseq()) {
    // required uint32 UpdateSeq = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updateseq());
  }

  return total_size;
}
size_t AddGameMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AddGameMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000fc) ^ 0x000000fc) == 0) {  // All required fields are present.
    // required int32 MsgId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgid());

    // required int32 Type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required uint32 Flag = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag());

    // required uint32 Status = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());

    // required uint32 UpdateTime = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updatetime());

    // required uint32 UpdateSeq = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updateseq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string FromUserName = 2;
    if (has_fromusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromusername());
    }

    // optional string ToUserName = 3;
    if (has_tousername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tousername());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddGameMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AddGameMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const AddGameMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddGameMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AddGameMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AddGameMsg)
    MergeFrom(*source);
  }
}

void AddGameMsg::MergeFrom(const AddGameMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AddGameMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fromusername();
      fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tousername();
      tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
    }
    if (cached_has_bits & 0x00000004u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000020u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000040u) {
      updatetime_ = from.updatetime_;
    }
    if (cached_has_bits & 0x00000080u) {
      updateseq_ = from.updateseq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddGameMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AddGameMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGameMsg::CopyFrom(const AddGameMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AddGameMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGameMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fc) != 0x000000fc) return false;
  return true;
}

void AddGameMsg::Swap(AddGameMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddGameMsg::InternalSwap(AddGameMsg* other) {
  fromusername_.Swap(&other->fromusername_);
  tousername_.Swap(&other->tousername_);
  std::swap(msgid_, other->msgid_);
  std::swap(type_, other->type_);
  std::swap(flag_, other->flag_);
  std::swap(status_, other->status_);
  std::swap(updatetime_, other->updatetime_);
  std::swap(updateseq_, other->updateseq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddGameMsg::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddGameMsg

// required int32 MsgId = 1;
bool AddGameMsg::has_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AddGameMsg::set_has_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
void AddGameMsg::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
void AddGameMsg::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
::google::protobuf::int32 AddGameMsg::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.AddGameMsg.MsgId)
  return msgid_;
}
void AddGameMsg::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddGameMsg.MsgId)
}

// optional string FromUserName = 2;
bool AddGameMsg::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddGameMsg::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
void AddGameMsg::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddGameMsg::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
const ::std::string& AddGameMsg::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.AddGameMsg.FromUserName)
  return fromusername_.GetNoArena();
}
void AddGameMsg::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AddGameMsg.FromUserName)
}
#if LANG_CXX11
void AddGameMsg::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AddGameMsg.FromUserName)
}
#endif
void AddGameMsg::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AddGameMsg.FromUserName)
}
void AddGameMsg::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AddGameMsg.FromUserName)
}
::std::string* AddGameMsg::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.AddGameMsg.FromUserName)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddGameMsg::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.AddGameMsg.FromUserName)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddGameMsg::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddGameMsg.FromUserName)
}

// optional string ToUserName = 3;
bool AddGameMsg::has_tousername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddGameMsg::set_has_tousername() {
  _has_bits_[0] |= 0x00000002u;
}
void AddGameMsg::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddGameMsg::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
const ::std::string& AddGameMsg::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.AddGameMsg.ToUserName)
  return tousername_.GetNoArena();
}
void AddGameMsg::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AddGameMsg.ToUserName)
}
#if LANG_CXX11
void AddGameMsg::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AddGameMsg.ToUserName)
}
#endif
void AddGameMsg::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AddGameMsg.ToUserName)
}
void AddGameMsg::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AddGameMsg.ToUserName)
}
::std::string* AddGameMsg::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.AddGameMsg.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddGameMsg::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.AddGameMsg.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddGameMsg::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddGameMsg.ToUserName)
}

// required int32 Type = 4;
bool AddGameMsg::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AddGameMsg::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void AddGameMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void AddGameMsg::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 AddGameMsg::type() const {
  // @@protoc_insertion_point(field_get:micromsg.AddGameMsg.Type)
  return type_;
}
void AddGameMsg::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddGameMsg.Type)
}

// required uint32 Flag = 5;
bool AddGameMsg::has_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AddGameMsg::set_has_flag() {
  _has_bits_[0] |= 0x00000010u;
}
void AddGameMsg::clear_has_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
void AddGameMsg::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
::google::protobuf::uint32 AddGameMsg::flag() const {
  // @@protoc_insertion_point(field_get:micromsg.AddGameMsg.Flag)
  return flag_;
}
void AddGameMsg::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddGameMsg.Flag)
}

// required uint32 Status = 6;
bool AddGameMsg::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AddGameMsg::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
void AddGameMsg::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void AddGameMsg::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 AddGameMsg::status() const {
  // @@protoc_insertion_point(field_get:micromsg.AddGameMsg.Status)
  return status_;
}
void AddGameMsg::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddGameMsg.Status)
}

// required uint32 UpdateTime = 7;
bool AddGameMsg::has_updatetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AddGameMsg::set_has_updatetime() {
  _has_bits_[0] |= 0x00000040u;
}
void AddGameMsg::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000040u;
}
void AddGameMsg::clear_updatetime() {
  updatetime_ = 0u;
  clear_has_updatetime();
}
::google::protobuf::uint32 AddGameMsg::updatetime() const {
  // @@protoc_insertion_point(field_get:micromsg.AddGameMsg.UpdateTime)
  return updatetime_;
}
void AddGameMsg::set_updatetime(::google::protobuf::uint32 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddGameMsg.UpdateTime)
}

// required uint32 UpdateSeq = 8;
bool AddGameMsg::has_updateseq() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void AddGameMsg::set_has_updateseq() {
  _has_bits_[0] |= 0x00000080u;
}
void AddGameMsg::clear_has_updateseq() {
  _has_bits_[0] &= ~0x00000080u;
}
void AddGameMsg::clear_updateseq() {
  updateseq_ = 0u;
  clear_has_updateseq();
}
::google::protobuf::uint32 AddGameMsg::updateseq() const {
  // @@protoc_insertion_point(field_get:micromsg.AddGameMsg.UpdateSeq)
  return updateseq_;
}
void AddGameMsg::set_updateseq(::google::protobuf::uint32 value) {
  set_has_updateseq();
  updateseq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddGameMsg.UpdateSeq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSyncRequest::kBaseRequestFieldNumber;
const int GameSyncRequest::kSelectorFieldNumber;
const int GameSyncRequest::kKeyBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSyncRequest::GameSyncRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameSyncRequest)
}
GameSyncRequest::GameSyncRequest(const GameSyncRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_keybuf()) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.keybuf_);
  } else {
    keybuf_ = NULL;
  }
  selector_ = from.selector_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GameSyncRequest)
}

void GameSyncRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&selector_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(selector_));
}

GameSyncRequest::~GameSyncRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GameSyncRequest)
  SharedDtor();
}

void GameSyncRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete keybuf_;
  }
}

void GameSyncRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSyncRequest::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameSyncRequest& GameSyncRequest::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameSyncRequest* GameSyncRequest::New(::google::protobuf::Arena* arena) const {
  GameSyncRequest* n = new GameSyncRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameSyncRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameSyncRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_keybuf()) {
      GOOGLE_DCHECK(keybuf_ != NULL);
      keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  selector_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameSyncRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameSyncRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Selector = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_selector();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selector_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keybuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameSyncRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameSyncRequest)
  return false;
#undef DO_
}

void GameSyncRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameSyncRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Selector = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->selector(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->keybuf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameSyncRequest)
}

::google::protobuf::uint8* GameSyncRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameSyncRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Selector = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->selector(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->keybuf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameSyncRequest)
  return target;
}

size_t GameSyncRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameSyncRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_keybuf()) {
    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);
  }

  if (has_selector()) {
    // required uint32 Selector = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selector());
  }

  return total_size;
}
size_t GameSyncRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameSyncRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);

    // required uint32 Selector = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selector());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSyncRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSyncRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameSyncRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameSyncRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameSyncRequest)
    MergeFrom(*source);
  }
}

void GameSyncRequest::MergeFrom(const GameSyncRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_keybuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.keybuf());
    }
    if (cached_has_bits & 0x00000004u) {
      selector_ = from.selector_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameSyncRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSyncRequest::CopyFrom(const GameSyncRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSyncRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_keybuf()) {
    if (!this->keybuf_->IsInitialized()) return false;
  }
  return true;
}

void GameSyncRequest::Swap(GameSyncRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSyncRequest::InternalSwap(GameSyncRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(keybuf_, other->keybuf_);
  std::swap(selector_, other->selector_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameSyncRequest::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameSyncRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GameSyncRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameSyncRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void GameSyncRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameSyncRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GameSyncRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameSyncRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GameSyncRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameSyncRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GameSyncRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameSyncRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GameSyncRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameSyncRequest.BaseRequest)
}

// required uint32 Selector = 2;
bool GameSyncRequest::has_selector() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameSyncRequest::set_has_selector() {
  _has_bits_[0] |= 0x00000004u;
}
void GameSyncRequest::clear_has_selector() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameSyncRequest::clear_selector() {
  selector_ = 0u;
  clear_has_selector();
}
::google::protobuf::uint32 GameSyncRequest::selector() const {
  // @@protoc_insertion_point(field_get:micromsg.GameSyncRequest.Selector)
  return selector_;
}
void GameSyncRequest::set_selector(::google::protobuf::uint32 value) {
  set_has_selector();
  selector_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameSyncRequest.Selector)
}

// required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
bool GameSyncRequest::has_keybuf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameSyncRequest::set_has_keybuf() {
  _has_bits_[0] |= 0x00000002u;
}
void GameSyncRequest::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameSyncRequest::clear_keybuf() {
  if (keybuf_ != NULL) keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_keybuf();
}
const ::micromsg::SKBuiltinBuffer_t& GameSyncRequest::keybuf() const {
  // @@protoc_insertion_point(field_get:micromsg.GameSyncRequest.KeyBuf)
  return keybuf_ != NULL ? *keybuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GameSyncRequest::mutable_keybuf() {
  set_has_keybuf();
  if (keybuf_ == NULL) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameSyncRequest.KeyBuf)
  return keybuf_;
}
::micromsg::SKBuiltinBuffer_t* GameSyncRequest::release_keybuf() {
  // @@protoc_insertion_point(field_release:micromsg.GameSyncRequest.KeyBuf)
  clear_has_keybuf();
  ::micromsg::SKBuiltinBuffer_t* temp = keybuf_;
  keybuf_ = NULL;
  return temp;
}
void GameSyncRequest::set_allocated_keybuf(::micromsg::SKBuiltinBuffer_t* keybuf) {
  delete keybuf_;
  keybuf_ = keybuf;
  if (keybuf) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameSyncRequest.KeyBuf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSyncResponse::kBaseResponseFieldNumber;
const int GameSyncResponse::kCmdListFieldNumber;
const int GameSyncResponse::kKeyBufFieldNumber;
const int GameSyncResponse::kContinueFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSyncResponse::GameSyncResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameSyncResponse)
}
GameSyncResponse::GameSyncResponse(const GameSyncResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_cmdlist()) {
    cmdlist_ = new ::micromsg::CmdList(*from.cmdlist_);
  } else {
    cmdlist_ = NULL;
  }
  if (from.has_keybuf()) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.keybuf_);
  } else {
    keybuf_ = NULL;
  }
  continueflag_ = from.continueflag_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GameSyncResponse)
}

void GameSyncResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&continueflag_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(continueflag_));
}

GameSyncResponse::~GameSyncResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GameSyncResponse)
  SharedDtor();
}

void GameSyncResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete cmdlist_;
  }
  if (this != internal_default_instance()) {
    delete keybuf_;
  }
}

void GameSyncResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSyncResponse::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameSyncResponse& GameSyncResponse::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameSyncResponse* GameSyncResponse::New(::google::protobuf::Arena* arena) const {
  GameSyncResponse* n = new GameSyncResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameSyncResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameSyncResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_cmdlist()) {
      GOOGLE_DCHECK(cmdlist_ != NULL);
      cmdlist_->::micromsg::CmdList::Clear();
    }
    if (has_keybuf()) {
      GOOGLE_DCHECK(keybuf_ != NULL);
      keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  continueflag_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameSyncResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameSyncResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.CmdList CmdList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmdlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keybuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ContinueFlag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_continueflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &continueflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameSyncResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameSyncResponse)
  return false;
#undef DO_
}

void GameSyncResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameSyncResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.CmdList CmdList = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cmdlist_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->keybuf_, output);
  }

  // required uint32 ContinueFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->continueflag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameSyncResponse)
}

::google::protobuf::uint8* GameSyncResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameSyncResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.CmdList CmdList = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cmdlist_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->keybuf_, deterministic, target);
  }

  // required uint32 ContinueFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->continueflag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameSyncResponse)
  return target;
}

size_t GameSyncResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameSyncResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_cmdlist()) {
    // required .micromsg.CmdList CmdList = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmdlist_);
  }

  if (has_keybuf()) {
    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);
  }

  if (has_continueflag()) {
    // required uint32 ContinueFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->continueflag());
  }

  return total_size;
}
size_t GameSyncResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameSyncResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.CmdList CmdList = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmdlist_);

    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);

    // required uint32 ContinueFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->continueflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSyncResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSyncResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameSyncResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameSyncResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameSyncResponse)
    MergeFrom(*source);
  }
}

void GameSyncResponse::MergeFrom(const GameSyncResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cmdlist()->::micromsg::CmdList::MergeFrom(from.cmdlist());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_keybuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.keybuf());
    }
    if (cached_has_bits & 0x00000008u) {
      continueflag_ = from.continueflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameSyncResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSyncResponse::CopyFrom(const GameSyncResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSyncResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_cmdlist()) {
    if (!this->cmdlist_->IsInitialized()) return false;
  }
  if (has_keybuf()) {
    if (!this->keybuf_->IsInitialized()) return false;
  }
  return true;
}

void GameSyncResponse::Swap(GameSyncResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSyncResponse::InternalSwap(GameSyncResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(cmdlist_, other->cmdlist_);
  std::swap(keybuf_, other->keybuf_);
  std::swap(continueflag_, other->continueflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameSyncResponse::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameSyncResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GameSyncResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameSyncResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GameSyncResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameSyncResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GameSyncResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameSyncResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GameSyncResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameSyncResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GameSyncResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameSyncResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GameSyncResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameSyncResponse.BaseResponse)
}

// required .micromsg.CmdList CmdList = 2;
bool GameSyncResponse::has_cmdlist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameSyncResponse::set_has_cmdlist() {
  _has_bits_[0] |= 0x00000002u;
}
void GameSyncResponse::clear_has_cmdlist() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameSyncResponse::clear_cmdlist() {
  if (cmdlist_ != NULL) cmdlist_->::micromsg::CmdList::Clear();
  clear_has_cmdlist();
}
const ::micromsg::CmdList& GameSyncResponse::cmdlist() const {
  // @@protoc_insertion_point(field_get:micromsg.GameSyncResponse.CmdList)
  return cmdlist_ != NULL ? *cmdlist_
                         : *::micromsg::CmdList::internal_default_instance();
}
::micromsg::CmdList* GameSyncResponse::mutable_cmdlist() {
  set_has_cmdlist();
  if (cmdlist_ == NULL) {
    cmdlist_ = new ::micromsg::CmdList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameSyncResponse.CmdList)
  return cmdlist_;
}
::micromsg::CmdList* GameSyncResponse::release_cmdlist() {
  // @@protoc_insertion_point(field_release:micromsg.GameSyncResponse.CmdList)
  clear_has_cmdlist();
  ::micromsg::CmdList* temp = cmdlist_;
  cmdlist_ = NULL;
  return temp;
}
void GameSyncResponse::set_allocated_cmdlist(::micromsg::CmdList* cmdlist) {
  delete cmdlist_;
  cmdlist_ = cmdlist;
  if (cmdlist) {
    set_has_cmdlist();
  } else {
    clear_has_cmdlist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameSyncResponse.CmdList)
}

// required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
bool GameSyncResponse::has_keybuf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameSyncResponse::set_has_keybuf() {
  _has_bits_[0] |= 0x00000004u;
}
void GameSyncResponse::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameSyncResponse::clear_keybuf() {
  if (keybuf_ != NULL) keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_keybuf();
}
const ::micromsg::SKBuiltinBuffer_t& GameSyncResponse::keybuf() const {
  // @@protoc_insertion_point(field_get:micromsg.GameSyncResponse.KeyBuf)
  return keybuf_ != NULL ? *keybuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GameSyncResponse::mutable_keybuf() {
  set_has_keybuf();
  if (keybuf_ == NULL) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameSyncResponse.KeyBuf)
  return keybuf_;
}
::micromsg::SKBuiltinBuffer_t* GameSyncResponse::release_keybuf() {
  // @@protoc_insertion_point(field_release:micromsg.GameSyncResponse.KeyBuf)
  clear_has_keybuf();
  ::micromsg::SKBuiltinBuffer_t* temp = keybuf_;
  keybuf_ = NULL;
  return temp;
}
void GameSyncResponse::set_allocated_keybuf(::micromsg::SKBuiltinBuffer_t* keybuf) {
  delete keybuf_;
  keybuf_ = keybuf;
  if (keybuf) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameSyncResponse.KeyBuf)
}

// required uint32 ContinueFlag = 4;
bool GameSyncResponse::has_continueflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameSyncResponse::set_has_continueflag() {
  _has_bits_[0] |= 0x00000008u;
}
void GameSyncResponse::clear_has_continueflag() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameSyncResponse::clear_continueflag() {
  continueflag_ = 0u;
  clear_has_continueflag();
}
::google::protobuf::uint32 GameSyncResponse::continueflag() const {
  // @@protoc_insertion_point(field_get:micromsg.GameSyncResponse.ContinueFlag)
  return continueflag_;
}
void GameSyncResponse::set_continueflag(::google::protobuf::uint32 value) {
  set_has_continueflag();
  continueflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameSyncResponse.ContinueFlag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameMsg::kMsgIdFieldNumber;
const int GameMsg::kStatusFieldNumber;
const int GameMsg::kObjectFieldNumber;
const int GameMsg::kUpdateTimeFieldNumber;
const int GameMsg::kUpdateSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameMsg::GameMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GameMsg)
}
GameMsg::GameMsg(const GameMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_object()) {
    object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_);
  }
  ::memcpy(&msgid_, &from.msgid_,
    reinterpret_cast<char*>(&updateseq_) -
    reinterpret_cast<char*>(&msgid_) + sizeof(updateseq_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GameMsg)
}

void GameMsg::SharedCtor() {
  _cached_size_ = 0;
  object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msgid_, 0, reinterpret_cast<char*>(&updateseq_) -
    reinterpret_cast<char*>(&msgid_) + sizeof(updateseq_));
}

GameMsg::~GameMsg() {
  // @@protoc_insertion_point(destructor:micromsg.GameMsg)
  SharedDtor();
}

void GameMsg::SharedDtor() {
  object_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMsg::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameMsg& GameMsg::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameMsg* GameMsg::New(::google::protobuf::Arena* arena) const {
  GameMsg* n = new GameMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GameMsg)
  if (has_object()) {
    GOOGLE_DCHECK(!object_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*object_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&msgid_, 0, reinterpret_cast<char*>(&updateseq_) -
      reinterpret_cast<char*>(&msgid_) + sizeof(updateseq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GameMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MsgId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Object = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->object().data(), this->object().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GameMsg.Object");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 UpdateTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_updatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 UpdateSeq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_updateseq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updateseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GameMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GameMsg)
  return false;
#undef DO_
}

void GameMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GameMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 MsgId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // required uint32 Status = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // optional string Object = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->object().data(), this->object().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameMsg.Object");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->object(), output);
  }

  // required uint32 UpdateTime = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->updatetime(), output);
  }

  // required uint32 UpdateSeq = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->updateseq(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GameMsg)
}

::google::protobuf::uint8* GameMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GameMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 MsgId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }

  // required uint32 Status = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // optional string Object = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->object().data(), this->object().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GameMsg.Object");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->object(), target);
  }

  // required uint32 UpdateTime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->updatetime(), target);
  }

  // required uint32 UpdateSeq = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->updateseq(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GameMsg)
  return target;
}

size_t GameMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GameMsg)
  size_t total_size = 0;

  if (has_msgid()) {
    // required uint32 MsgId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  if (has_status()) {
    // required uint32 Status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  if (has_updatetime()) {
    // required uint32 UpdateTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updatetime());
  }

  if (has_updateseq()) {
    // required uint32 UpdateSeq = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updateseq());
  }

  return total_size;
}
size_t GameMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GameMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required uint32 MsgId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());

    // required uint32 Status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());

    // required uint32 UpdateTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updatetime());

    // required uint32 UpdateSeq = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updateseq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string Object = 3;
  if (has_object()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GameMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GameMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GameMsg)
    MergeFrom(*source);
  }
}

void GameMsg::MergeFrom(const GameMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GameMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_object();
      object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_);
    }
    if (cached_has_bits & 0x00000002u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      updatetime_ = from.updatetime_;
    }
    if (cached_has_bits & 0x00000010u) {
      updateseq_ = from.updateseq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GameMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMsg::CopyFrom(const GameMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GameMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  return true;
}

void GameMsg::Swap(GameMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameMsg::InternalSwap(GameMsg* other) {
  object_.Swap(&other->object_);
  std::swap(msgid_, other->msgid_);
  std::swap(status_, other->status_);
  std::swap(updatetime_, other->updatetime_);
  std::swap(updateseq_, other->updateseq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameMsg::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameMsg

// required uint32 MsgId = 1;
bool GameMsg::has_msgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameMsg::set_has_msgid() {
  _has_bits_[0] |= 0x00000002u;
}
void GameMsg::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameMsg::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
::google::protobuf::uint32 GameMsg::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameMsg.MsgId)
  return msgid_;
}
void GameMsg::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameMsg.MsgId)
}

// required uint32 Status = 2;
bool GameMsg::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameMsg::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void GameMsg::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameMsg::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 GameMsg::status() const {
  // @@protoc_insertion_point(field_get:micromsg.GameMsg.Status)
  return status_;
}
void GameMsg::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameMsg.Status)
}

// optional string Object = 3;
bool GameMsg::has_object() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameMsg::set_has_object() {
  _has_bits_[0] |= 0x00000001u;
}
void GameMsg::clear_has_object() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameMsg::clear_object() {
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object();
}
const ::std::string& GameMsg::object() const {
  // @@protoc_insertion_point(field_get:micromsg.GameMsg.Object)
  return object_.GetNoArena();
}
void GameMsg::set_object(const ::std::string& value) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameMsg.Object)
}
#if LANG_CXX11
void GameMsg::set_object(::std::string&& value) {
  set_has_object();
  object_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameMsg.Object)
}
#endif
void GameMsg::set_object(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameMsg.Object)
}
void GameMsg::set_object(const char* value, size_t size) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameMsg.Object)
}
::std::string* GameMsg::mutable_object() {
  set_has_object();
  // @@protoc_insertion_point(field_mutable:micromsg.GameMsg.Object)
  return object_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameMsg::release_object() {
  // @@protoc_insertion_point(field_release:micromsg.GameMsg.Object)
  clear_has_object();
  return object_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameMsg::set_allocated_object(::std::string* object) {
  if (object != NULL) {
    set_has_object();
  } else {
    clear_has_object();
  }
  object_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameMsg.Object)
}

// required uint32 UpdateTime = 4;
bool GameMsg::has_updatetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameMsg::set_has_updatetime() {
  _has_bits_[0] |= 0x00000008u;
}
void GameMsg::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameMsg::clear_updatetime() {
  updatetime_ = 0u;
  clear_has_updatetime();
}
::google::protobuf::uint32 GameMsg::updatetime() const {
  // @@protoc_insertion_point(field_get:micromsg.GameMsg.UpdateTime)
  return updatetime_;
}
void GameMsg::set_updatetime(::google::protobuf::uint32 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameMsg.UpdateTime)
}

// required uint32 UpdateSeq = 5;
bool GameMsg::has_updateseq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GameMsg::set_has_updateseq() {
  _has_bits_[0] |= 0x00000010u;
}
void GameMsg::clear_has_updateseq() {
  _has_bits_[0] &= ~0x00000010u;
}
void GameMsg::clear_updateseq() {
  updateseq_ = 0u;
  clear_has_updateseq();
}
::google::protobuf::uint32 GameMsg::updateseq() const {
  // @@protoc_insertion_point(field_get:micromsg.GameMsg.UpdateSeq)
  return updateseq_;
}
void GameMsg::set_updateseq(::google::protobuf::uint32 value) {
  set_has_updateseq();
  updateseq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameMsg.UpdateSeq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetGameMsgRequest::kBaseRequestFieldNumber;
const int BatchGetGameMsgRequest::kCountFieldNumber;
const int BatchGetGameMsgRequest::kMsgIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetGameMsgRequest::BatchGetGameMsgRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchGetGameMsgRequest)
}
BatchGetGameMsgRequest::BatchGetGameMsgRequest(const BatchGetGameMsgRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      msgidlist_(from.msgidlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchGetGameMsgRequest)
}

void BatchGetGameMsgRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(count_));
}

BatchGetGameMsgRequest::~BatchGetGameMsgRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BatchGetGameMsgRequest)
  SharedDtor();
}

void BatchGetGameMsgRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void BatchGetGameMsgRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetGameMsgRequest::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchGetGameMsgRequest& BatchGetGameMsgRequest::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchGetGameMsgRequest* BatchGetGameMsgRequest::New(::google::protobuf::Arena* arena) const {
  BatchGetGameMsgRequest* n = new BatchGetGameMsgRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchGetGameMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchGetGameMsgRequest)
  msgidlist_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchGetGameMsgRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchGetGameMsgRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 MsgIdList = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_msgidlist())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_msgidlist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchGetGameMsgRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchGetGameMsgRequest)
  return false;
#undef DO_
}

void BatchGetGameMsgRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchGetGameMsgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated uint32 MsgIdList = 3 [packed = true];
  if (this->msgidlist_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_msgidlist_cached_byte_size_);
  }
  for (int i = 0, n = this->msgidlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->msgidlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchGetGameMsgRequest)
}

::google::protobuf::uint8* BatchGetGameMsgRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchGetGameMsgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated uint32 MsgIdList = 3 [packed = true];
  if (this->msgidlist_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _msgidlist_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->msgidlist_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchGetGameMsgRequest)
  return target;
}

size_t BatchGetGameMsgRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BatchGetGameMsgRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t BatchGetGameMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchGetGameMsgRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 MsgIdList = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->msgidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _msgidlist_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetGameMsgRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchGetGameMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchGetGameMsgRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchGetGameMsgRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchGetGameMsgRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchGetGameMsgRequest)
    MergeFrom(*source);
  }
}

void BatchGetGameMsgRequest::MergeFrom(const BatchGetGameMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchGetGameMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgidlist_.MergeFrom(from.msgidlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchGetGameMsgRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchGetGameMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetGameMsgRequest::CopyFrom(const BatchGetGameMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchGetGameMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetGameMsgRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void BatchGetGameMsgRequest::Swap(BatchGetGameMsgRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetGameMsgRequest::InternalSwap(BatchGetGameMsgRequest* other) {
  msgidlist_.InternalSwap(&other->msgidlist_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchGetGameMsgRequest::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchGetGameMsgRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BatchGetGameMsgRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchGetGameMsgRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchGetGameMsgRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchGetGameMsgRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BatchGetGameMsgRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetGameMsgRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BatchGetGameMsgRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetGameMsgRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BatchGetGameMsgRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BatchGetGameMsgRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BatchGetGameMsgRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchGetGameMsgRequest.BaseRequest)
}

// required uint32 Count = 2;
bool BatchGetGameMsgRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchGetGameMsgRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchGetGameMsgRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchGetGameMsgRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 BatchGetGameMsgRequest::count() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetGameMsgRequest.Count)
  return count_;
}
void BatchGetGameMsgRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchGetGameMsgRequest.Count)
}

// repeated uint32 MsgIdList = 3 [packed = true];
int BatchGetGameMsgRequest::msgidlist_size() const {
  return msgidlist_.size();
}
void BatchGetGameMsgRequest::clear_msgidlist() {
  msgidlist_.Clear();
}
::google::protobuf::uint32 BatchGetGameMsgRequest::msgidlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetGameMsgRequest.MsgIdList)
  return msgidlist_.Get(index);
}
void BatchGetGameMsgRequest::set_msgidlist(int index, ::google::protobuf::uint32 value) {
  msgidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.BatchGetGameMsgRequest.MsgIdList)
}
void BatchGetGameMsgRequest::add_msgidlist(::google::protobuf::uint32 value) {
  msgidlist_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.BatchGetGameMsgRequest.MsgIdList)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BatchGetGameMsgRequest::msgidlist() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchGetGameMsgRequest.MsgIdList)
  return msgidlist_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BatchGetGameMsgRequest::mutable_msgidlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchGetGameMsgRequest.MsgIdList)
  return &msgidlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetGameMsgResponse::kBaseResponseFieldNumber;
const int BatchGetGameMsgResponse::kCountFieldNumber;
const int BatchGetGameMsgResponse::kMsgListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetGameMsgResponse::BatchGetGameMsgResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchGetGameMsgResponse)
}
BatchGetGameMsgResponse::BatchGetGameMsgResponse(const BatchGetGameMsgResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      msglist_(from.msglist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchGetGameMsgResponse)
}

void BatchGetGameMsgResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(count_));
}

BatchGetGameMsgResponse::~BatchGetGameMsgResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BatchGetGameMsgResponse)
  SharedDtor();
}

void BatchGetGameMsgResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BatchGetGameMsgResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetGameMsgResponse::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchGetGameMsgResponse& BatchGetGameMsgResponse::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchGetGameMsgResponse* BatchGetGameMsgResponse::New(::google::protobuf::Arena* arena) const {
  BatchGetGameMsgResponse* n = new BatchGetGameMsgResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchGetGameMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchGetGameMsgResponse)
  msglist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchGetGameMsgResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchGetGameMsgResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.GameMsg MsgList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msglist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchGetGameMsgResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchGetGameMsgResponse)
  return false;
#undef DO_
}

void BatchGetGameMsgResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchGetGameMsgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .micromsg.GameMsg MsgList = 3;
  for (unsigned int i = 0, n = this->msglist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msglist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchGetGameMsgResponse)
}

::google::protobuf::uint8* BatchGetGameMsgResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchGetGameMsgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.GameMsg MsgList = 3;
  for (unsigned int i = 0, n = this->msglist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->msglist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchGetGameMsgResponse)
  return target;
}

size_t BatchGetGameMsgResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BatchGetGameMsgResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t BatchGetGameMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchGetGameMsgResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.GameMsg MsgList = 3;
  {
    unsigned int count = this->msglist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msglist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetGameMsgResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchGetGameMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchGetGameMsgResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchGetGameMsgResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchGetGameMsgResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchGetGameMsgResponse)
    MergeFrom(*source);
  }
}

void BatchGetGameMsgResponse::MergeFrom(const BatchGetGameMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchGetGameMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msglist_.MergeFrom(from.msglist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchGetGameMsgResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchGetGameMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetGameMsgResponse::CopyFrom(const BatchGetGameMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchGetGameMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetGameMsgResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->msglist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BatchGetGameMsgResponse::Swap(BatchGetGameMsgResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetGameMsgResponse::InternalSwap(BatchGetGameMsgResponse* other) {
  msglist_.InternalSwap(&other->msglist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchGetGameMsgResponse::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchGetGameMsgResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BatchGetGameMsgResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchGetGameMsgResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchGetGameMsgResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchGetGameMsgResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BatchGetGameMsgResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetGameMsgResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BatchGetGameMsgResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetGameMsgResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BatchGetGameMsgResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BatchGetGameMsgResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BatchGetGameMsgResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchGetGameMsgResponse.BaseResponse)
}

// required uint32 Count = 2;
bool BatchGetGameMsgResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchGetGameMsgResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchGetGameMsgResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchGetGameMsgResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 BatchGetGameMsgResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetGameMsgResponse.Count)
  return count_;
}
void BatchGetGameMsgResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchGetGameMsgResponse.Count)
}

// repeated .micromsg.GameMsg MsgList = 3;
int BatchGetGameMsgResponse::msglist_size() const {
  return msglist_.size();
}
void BatchGetGameMsgResponse::clear_msglist() {
  msglist_.Clear();
}
const ::micromsg::GameMsg& BatchGetGameMsgResponse::msglist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetGameMsgResponse.MsgList)
  return msglist_.Get(index);
}
::micromsg::GameMsg* BatchGetGameMsgResponse::mutable_msglist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetGameMsgResponse.MsgList)
  return msglist_.Mutable(index);
}
::micromsg::GameMsg* BatchGetGameMsgResponse::add_msglist() {
  // @@protoc_insertion_point(field_add:micromsg.BatchGetGameMsgResponse.MsgList)
  return msglist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::GameMsg >*
BatchGetGameMsgResponse::mutable_msglist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchGetGameMsgResponse.MsgList)
  return &msglist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::GameMsg >&
BatchGetGameMsgResponse::msglist() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchGetGameMsgResponse.MsgList)
  return msglist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchDelGameMsgRequest::kBaseRequestFieldNumber;
const int BatchDelGameMsgRequest::kCountFieldNumber;
const int BatchDelGameMsgRequest::kMsgIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchDelGameMsgRequest::BatchDelGameMsgRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchDelGameMsgRequest)
}
BatchDelGameMsgRequest::BatchDelGameMsgRequest(const BatchDelGameMsgRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      msgidlist_(from.msgidlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchDelGameMsgRequest)
}

void BatchDelGameMsgRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(count_));
}

BatchDelGameMsgRequest::~BatchDelGameMsgRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BatchDelGameMsgRequest)
  SharedDtor();
}

void BatchDelGameMsgRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void BatchDelGameMsgRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchDelGameMsgRequest::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchDelGameMsgRequest& BatchDelGameMsgRequest::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchDelGameMsgRequest* BatchDelGameMsgRequest::New(::google::protobuf::Arena* arena) const {
  BatchDelGameMsgRequest* n = new BatchDelGameMsgRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchDelGameMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchDelGameMsgRequest)
  msgidlist_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchDelGameMsgRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchDelGameMsgRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 MsgIdList = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_msgidlist())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_msgidlist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchDelGameMsgRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchDelGameMsgRequest)
  return false;
#undef DO_
}

void BatchDelGameMsgRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchDelGameMsgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated uint32 MsgIdList = 3 [packed = true];
  if (this->msgidlist_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_msgidlist_cached_byte_size_);
  }
  for (int i = 0, n = this->msgidlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->msgidlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchDelGameMsgRequest)
}

::google::protobuf::uint8* BatchDelGameMsgRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchDelGameMsgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated uint32 MsgIdList = 3 [packed = true];
  if (this->msgidlist_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _msgidlist_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->msgidlist_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchDelGameMsgRequest)
  return target;
}

size_t BatchDelGameMsgRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BatchDelGameMsgRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t BatchDelGameMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchDelGameMsgRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 MsgIdList = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->msgidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _msgidlist_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchDelGameMsgRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchDelGameMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchDelGameMsgRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchDelGameMsgRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchDelGameMsgRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchDelGameMsgRequest)
    MergeFrom(*source);
  }
}

void BatchDelGameMsgRequest::MergeFrom(const BatchDelGameMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchDelGameMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgidlist_.MergeFrom(from.msgidlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchDelGameMsgRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchDelGameMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchDelGameMsgRequest::CopyFrom(const BatchDelGameMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchDelGameMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchDelGameMsgRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void BatchDelGameMsgRequest::Swap(BatchDelGameMsgRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchDelGameMsgRequest::InternalSwap(BatchDelGameMsgRequest* other) {
  msgidlist_.InternalSwap(&other->msgidlist_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchDelGameMsgRequest::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchDelGameMsgRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BatchDelGameMsgRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchDelGameMsgRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchDelGameMsgRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchDelGameMsgRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BatchDelGameMsgRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelGameMsgRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BatchDelGameMsgRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchDelGameMsgRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BatchDelGameMsgRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BatchDelGameMsgRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BatchDelGameMsgRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchDelGameMsgRequest.BaseRequest)
}

// required uint32 Count = 2;
bool BatchDelGameMsgRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchDelGameMsgRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchDelGameMsgRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchDelGameMsgRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 BatchDelGameMsgRequest::count() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelGameMsgRequest.Count)
  return count_;
}
void BatchDelGameMsgRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchDelGameMsgRequest.Count)
}

// repeated uint32 MsgIdList = 3 [packed = true];
int BatchDelGameMsgRequest::msgidlist_size() const {
  return msgidlist_.size();
}
void BatchDelGameMsgRequest::clear_msgidlist() {
  msgidlist_.Clear();
}
::google::protobuf::uint32 BatchDelGameMsgRequest::msgidlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelGameMsgRequest.MsgIdList)
  return msgidlist_.Get(index);
}
void BatchDelGameMsgRequest::set_msgidlist(int index, ::google::protobuf::uint32 value) {
  msgidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.BatchDelGameMsgRequest.MsgIdList)
}
void BatchDelGameMsgRequest::add_msgidlist(::google::protobuf::uint32 value) {
  msgidlist_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.BatchDelGameMsgRequest.MsgIdList)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BatchDelGameMsgRequest::msgidlist() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchDelGameMsgRequest.MsgIdList)
  return msgidlist_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BatchDelGameMsgRequest::mutable_msgidlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchDelGameMsgRequest.MsgIdList)
  return &msgidlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelGameMsgRsp::kRetFieldNumber;
const int DelGameMsgRsp::kMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelGameMsgRsp::DelGameMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DelGameMsgRsp)
}
DelGameMsgRsp::DelGameMsgRsp(const DelGameMsgRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ret_, &from.ret_,
    reinterpret_cast<char*>(&msgid_) -
    reinterpret_cast<char*>(&ret_) + sizeof(msgid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.DelGameMsgRsp)
}

void DelGameMsgRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ret_, 0, reinterpret_cast<char*>(&msgid_) -
    reinterpret_cast<char*>(&ret_) + sizeof(msgid_));
}

DelGameMsgRsp::~DelGameMsgRsp() {
  // @@protoc_insertion_point(destructor:micromsg.DelGameMsgRsp)
  SharedDtor();
}

void DelGameMsgRsp::SharedDtor() {
}

void DelGameMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelGameMsgRsp::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelGameMsgRsp& DelGameMsgRsp::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelGameMsgRsp* DelGameMsgRsp::New(::google::protobuf::Arena* arena) const {
  DelGameMsgRsp* n = new DelGameMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelGameMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DelGameMsgRsp)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&ret_, 0, reinterpret_cast<char*>(&msgid_) -
      reinterpret_cast<char*>(&ret_) + sizeof(msgid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelGameMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DelGameMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MsgId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DelGameMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DelGameMsgRsp)
  return false;
#undef DO_
}

void DelGameMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DelGameMsgRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required uint32 MsgId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DelGameMsgRsp)
}

::google::protobuf::uint8* DelGameMsgRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DelGameMsgRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required uint32 MsgId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DelGameMsgRsp)
  return target;
}

size_t DelGameMsgRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.DelGameMsgRsp)
  size_t total_size = 0;

  if (has_ret()) {
    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_msgid()) {
    // required uint32 MsgId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  return total_size;
}
size_t DelGameMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DelGameMsgRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required uint32 MsgId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelGameMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DelGameMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DelGameMsgRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelGameMsgRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DelGameMsgRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DelGameMsgRsp)
    MergeFrom(*source);
  }
}

void DelGameMsgRsp::MergeFrom(const DelGameMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DelGameMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000002u) {
      msgid_ = from.msgid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelGameMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DelGameMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelGameMsgRsp::CopyFrom(const DelGameMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DelGameMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelGameMsgRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DelGameMsgRsp::Swap(DelGameMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelGameMsgRsp::InternalSwap(DelGameMsgRsp* other) {
  std::swap(ret_, other->ret_);
  std::swap(msgid_, other->msgid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelGameMsgRsp::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelGameMsgRsp

// required int32 Ret = 1;
bool DelGameMsgRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelGameMsgRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void DelGameMsgRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelGameMsgRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::google::protobuf::int32 DelGameMsgRsp::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.DelGameMsgRsp.Ret)
  return ret_;
}
void DelGameMsgRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelGameMsgRsp.Ret)
}

// required uint32 MsgId = 2;
bool DelGameMsgRsp::has_msgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DelGameMsgRsp::set_has_msgid() {
  _has_bits_[0] |= 0x00000002u;
}
void DelGameMsgRsp::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000002u;
}
void DelGameMsgRsp::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
::google::protobuf::uint32 DelGameMsgRsp::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DelGameMsgRsp.MsgId)
  return msgid_;
}
void DelGameMsgRsp::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelGameMsgRsp.MsgId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchDelGameMsgResponse::kBaseResponseFieldNumber;
const int BatchDelGameMsgResponse::kCountFieldNumber;
const int BatchDelGameMsgResponse::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchDelGameMsgResponse::BatchDelGameMsgResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchDelGameMsgResponse)
}
BatchDelGameMsgResponse::BatchDelGameMsgResponse(const BatchDelGameMsgResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchDelGameMsgResponse)
}

void BatchDelGameMsgResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(count_));
}

BatchDelGameMsgResponse::~BatchDelGameMsgResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BatchDelGameMsgResponse)
  SharedDtor();
}

void BatchDelGameMsgResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BatchDelGameMsgResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchDelGameMsgResponse::descriptor() {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchDelGameMsgResponse& BatchDelGameMsgResponse::default_instance() {
  protobuf_mmgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchDelGameMsgResponse* BatchDelGameMsgResponse::New(::google::protobuf::Arena* arena) const {
  BatchDelGameMsgResponse* n = new BatchDelGameMsgResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchDelGameMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchDelGameMsgResponse)
  list_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchDelGameMsgResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchDelGameMsgResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.DelGameMsgRsp List = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchDelGameMsgResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchDelGameMsgResponse)
  return false;
#undef DO_
}

void BatchDelGameMsgResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchDelGameMsgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .micromsg.DelGameMsgRsp List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchDelGameMsgResponse)
}

::google::protobuf::uint8* BatchDelGameMsgResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchDelGameMsgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.DelGameMsgRsp List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchDelGameMsgResponse)
  return target;
}

size_t BatchDelGameMsgResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BatchDelGameMsgResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t BatchDelGameMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchDelGameMsgResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.DelGameMsgRsp List = 3;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchDelGameMsgResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchDelGameMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchDelGameMsgResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchDelGameMsgResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchDelGameMsgResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchDelGameMsgResponse)
    MergeFrom(*source);
  }
}

void BatchDelGameMsgResponse::MergeFrom(const BatchDelGameMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchDelGameMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchDelGameMsgResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchDelGameMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchDelGameMsgResponse::CopyFrom(const BatchDelGameMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchDelGameMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchDelGameMsgResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BatchDelGameMsgResponse::Swap(BatchDelGameMsgResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchDelGameMsgResponse::InternalSwap(BatchDelGameMsgResponse* other) {
  list_.InternalSwap(&other->list_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchDelGameMsgResponse::GetMetadata() const {
  protobuf_mmgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmgame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchDelGameMsgResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BatchDelGameMsgResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchDelGameMsgResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchDelGameMsgResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchDelGameMsgResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BatchDelGameMsgResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelGameMsgResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BatchDelGameMsgResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchDelGameMsgResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BatchDelGameMsgResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BatchDelGameMsgResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BatchDelGameMsgResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchDelGameMsgResponse.BaseResponse)
}

// required uint32 Count = 2;
bool BatchDelGameMsgResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchDelGameMsgResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchDelGameMsgResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchDelGameMsgResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 BatchDelGameMsgResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelGameMsgResponse.Count)
  return count_;
}
void BatchDelGameMsgResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchDelGameMsgResponse.Count)
}

// repeated .micromsg.DelGameMsgRsp List = 3;
int BatchDelGameMsgResponse::list_size() const {
  return list_.size();
}
void BatchDelGameMsgResponse::clear_list() {
  list_.Clear();
}
const ::micromsg::DelGameMsgRsp& BatchDelGameMsgResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelGameMsgResponse.List)
  return list_.Get(index);
}
::micromsg::DelGameMsgRsp* BatchDelGameMsgResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchDelGameMsgResponse.List)
  return list_.Mutable(index);
}
::micromsg::DelGameMsgRsp* BatchDelGameMsgResponse::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.BatchDelGameMsgResponse.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::DelGameMsgRsp >*
BatchDelGameMsgResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchDelGameMsgResponse.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::DelGameMsgRsp >&
BatchDelGameMsgResponse::list() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchDelGameMsgResponse.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg

// @@protoc_insertion_point(global_scope)
