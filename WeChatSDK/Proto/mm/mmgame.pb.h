// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmgame.proto

#ifndef PROTOBUF_mmgame_2eproto__INCLUDED
#define PROTOBUF_mmgame_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mmbuiltintype.pb.h"
#include "mmbase.pb.h"
// @@protoc_insertion_point(includes)
namespace micromsg {
class AddGameMsg;
class AddGameMsgDefaultTypeInternal;
extern AddGameMsgDefaultTypeInternal _AddGameMsg_default_instance_;
class AdditionalContactList;
class AdditionalContactListDefaultTypeInternal;
extern AdditionalContactListDefaultTypeInternal _AdditionalContactList_default_instance_;
class BaseRequest;
class BaseRequestDefaultTypeInternal;
extern BaseRequestDefaultTypeInternal _BaseRequest_default_instance_;
class BaseResponse;
class BaseResponseDefaultTypeInternal;
extern BaseResponseDefaultTypeInternal _BaseResponse_default_instance_;
class BatchDelGameMsgRequest;
class BatchDelGameMsgRequestDefaultTypeInternal;
extern BatchDelGameMsgRequestDefaultTypeInternal _BatchDelGameMsgRequest_default_instance_;
class BatchDelGameMsgResponse;
class BatchDelGameMsgResponseDefaultTypeInternal;
extern BatchDelGameMsgResponseDefaultTypeInternal _BatchDelGameMsgResponse_default_instance_;
class BatchGetGameMsgRequest;
class BatchGetGameMsgRequestDefaultTypeInternal;
extern BatchGetGameMsgRequestDefaultTypeInternal _BatchGetGameMsgRequest_default_instance_;
class BatchGetGameMsgResponse;
class BatchGetGameMsgResponseDefaultTypeInternal;
extern BatchGetGameMsgResponseDefaultTypeInternal _BatchGetGameMsgResponse_default_instance_;
class BindEmailRequest;
class BindEmailRequestDefaultTypeInternal;
extern BindEmailRequestDefaultTypeInternal _BindEmailRequest_default_instance_;
class BindEmailResponse;
class BindEmailResponseDefaultTypeInternal;
extern BindEmailResponseDefaultTypeInternal _BindEmailResponse_default_instance_;
class BuiltinIP;
class BuiltinIPDefaultTypeInternal;
extern BuiltinIPDefaultTypeInternal _BuiltinIP_default_instance_;
class BuiltinIPList;
class BuiltinIPListDefaultTypeInternal;
extern BuiltinIPListDefaultTypeInternal _BuiltinIPList_default_instance_;
class CDNDnsInfo;
class CDNDnsInfoDefaultTypeInternal;
extern CDNDnsInfoDefaultTypeInternal _CDNDnsInfo_default_instance_;
class ChatRoomMemberData;
class ChatRoomMemberDataDefaultTypeInternal;
extern ChatRoomMemberDataDefaultTypeInternal _ChatRoomMemberData_default_instance_;
class ChatRoomMemberInfo;
class ChatRoomMemberInfoDefaultTypeInternal;
extern ChatRoomMemberInfoDefaultTypeInternal _ChatRoomMemberInfo_default_instance_;
class CmdItem;
class CmdItemDefaultTypeInternal;
extern CmdItemDefaultTypeInternal _CmdItem_default_instance_;
class CmdList;
class CmdListDefaultTypeInternal;
extern CmdListDefaultTypeInternal _CmdList_default_instance_;
class CustomizedInfo;
class CustomizedInfoDefaultTypeInternal;
extern CustomizedInfoDefaultTypeInternal _CustomizedInfo_default_instance_;
class DelGameMsgRsp;
class DelGameMsgRspDefaultTypeInternal;
extern DelGameMsgRspDefaultTypeInternal _DelGameMsgRsp_default_instance_;
class DelMemberReq;
class DelMemberReqDefaultTypeInternal;
extern DelMemberReqDefaultTypeInternal _DelMemberReq_default_instance_;
class DelMemberResp;
class DelMemberRespDefaultTypeInternal;
extern DelMemberRespDefaultTypeInternal _DelMemberResp_default_instance_;
class DisturbSetting;
class DisturbSettingDefaultTypeInternal;
extern DisturbSettingDefaultTypeInternal _DisturbSetting_default_instance_;
class DisturbTimeSpan;
class DisturbTimeSpanDefaultTypeInternal;
extern DisturbTimeSpanDefaultTypeInternal _DisturbTimeSpan_default_instance_;
class EnemyGameInfo;
class EnemyGameInfoDefaultTypeInternal;
extern EnemyGameInfoDefaultTypeInternal _EnemyGameInfo_default_instance_;
class EnemyGameKilled;
class EnemyGameKilledDefaultTypeInternal;
extern EnemyGameKilledDefaultTypeInternal _EnemyGameKilled_default_instance_;
class GameAnnouncementInfo;
class GameAnnouncementInfoDefaultTypeInternal;
extern GameAnnouncementInfoDefaultTypeInternal _GameAnnouncementInfo_default_instance_;
class GameCheckReq;
class GameCheckReqDefaultTypeInternal;
extern GameCheckReqDefaultTypeInternal _GameCheckReq_default_instance_;
class GameCheckResp;
class GameCheckRespDefaultTypeInternal;
extern GameCheckRespDefaultTypeInternal _GameCheckResp_default_instance_;
class GameConsumeProps;
class GameConsumePropsDefaultTypeInternal;
extern GameConsumePropsDefaultTypeInternal _GameConsumeProps_default_instance_;
class GameConsumeReq;
class GameConsumeReqDefaultTypeInternal;
extern GameConsumeReqDefaultTypeInternal _GameConsumeReq_default_instance_;
class GameConsumeResp;
class GameConsumeRespDefaultTypeInternal;
extern GameConsumeRespDefaultTypeInternal _GameConsumeResp_default_instance_;
class GameEndReq;
class GameEndReqDefaultTypeInternal;
extern GameEndReqDefaultTypeInternal _GameEndReq_default_instance_;
class GameEndResp;
class GameEndRespDefaultTypeInternal;
extern GameEndRespDefaultTypeInternal _GameEndResp_default_instance_;
class GameFriendListReq;
class GameFriendListReqDefaultTypeInternal;
extern GameFriendListReqDefaultTypeInternal _GameFriendListReq_default_instance_;
class GameFriendListResp;
class GameFriendListRespDefaultTypeInternal;
extern GameFriendListRespDefaultTypeInternal _GameFriendListResp_default_instance_;
class GameGiftReq;
class GameGiftReqDefaultTypeInternal;
extern GameGiftReqDefaultTypeInternal _GameGiftReq_default_instance_;
class GameGiftResp;
class GameGiftRespDefaultTypeInternal;
extern GameGiftRespDefaultTypeInternal _GameGiftResp_default_instance_;
class GameInitReq;
class GameInitReqDefaultTypeInternal;
extern GameInitReqDefaultTypeInternal _GameInitReq_default_instance_;
class GameInitResp;
class GameInitRespDefaultTypeInternal;
extern GameInitRespDefaultTypeInternal _GameInitResp_default_instance_;
class GameMsg;
class GameMsgDefaultTypeInternal;
extern GameMsgDefaultTypeInternal _GameMsg_default_instance_;
class GamePropsInfo;
class GamePropsInfoDefaultTypeInternal;
extern GamePropsInfoDefaultTypeInternal _GamePropsInfo_default_instance_;
class GameRankListReq;
class GameRankListReqDefaultTypeInternal;
extern GameRankListReqDefaultTypeInternal _GameRankListReq_default_instance_;
class GameRankListResp;
class GameRankListRespDefaultTypeInternal;
extern GameRankListRespDefaultTypeInternal _GameRankListResp_default_instance_;
class GameResourceReq;
class GameResourceReqDefaultTypeInternal;
extern GameResourceReqDefaultTypeInternal _GameResourceReq_default_instance_;
class GameResourceResp;
class GameResourceRespDefaultTypeInternal;
extern GameResourceRespDefaultTypeInternal _GameResourceResp_default_instance_;
class GameShareReq;
class GameShareReqDefaultTypeInternal;
extern GameShareReqDefaultTypeInternal _GameShareReq_default_instance_;
class GameShareResp;
class GameShareRespDefaultTypeInternal;
extern GameShareRespDefaultTypeInternal _GameShareResp_default_instance_;
class GameStartReq;
class GameStartReqDefaultTypeInternal;
extern GameStartReqDefaultTypeInternal _GameStartReq_default_instance_;
class GameStartResp;
class GameStartRespDefaultTypeInternal;
extern GameStartRespDefaultTypeInternal _GameStartResp_default_instance_;
class GameSyncRequest;
class GameSyncRequestDefaultTypeInternal;
extern GameSyncRequestDefaultTypeInternal _GameSyncRequest_default_instance_;
class GameSyncResponse;
class GameSyncResponseDefaultTypeInternal;
extern GameSyncResponseDefaultTypeInternal _GameSyncResponse_default_instance_;
class GameUserPropsInfo;
class GameUserPropsInfoDefaultTypeInternal;
extern GameUserPropsInfoDefaultTypeInternal _GameUserPropsInfo_default_instance_;
class GameWishListReq;
class GameWishListReqDefaultTypeInternal;
extern GameWishListReqDefaultTypeInternal _GameWishListReq_default_instance_;
class GameWishListResp;
class GameWishListRespDefaultTypeInternal;
extern GameWishListRespDefaultTypeInternal _GameWishListResp_default_instance_;
class GameWishReq;
class GameWishReqDefaultTypeInternal;
extern GameWishReqDefaultTypeInternal _GameWishReq_default_instance_;
class GameWishResp;
class GameWishRespDefaultTypeInternal;
extern GameWishRespDefaultTypeInternal _GameWishResp_default_instance_;
class GetLocationRequest;
class GetLocationRequestDefaultTypeInternal;
extern GetLocationRequestDefaultTypeInternal _GetLocationRequest_default_instance_;
class GetLocationResponse;
class GetLocationResponseDefaultTypeInternal;
extern GetLocationResponseDefaultTypeInternal _GetLocationResponse_default_instance_;
class GmailInfo;
class GmailInfoDefaultTypeInternal;
extern GmailInfoDefaultTypeInternal _GmailInfo_default_instance_;
class GmailList;
class GmailListDefaultTypeInternal;
extern GmailListDefaultTypeInternal _GmailList_default_instance_;
class HardDevice;
class HardDeviceDefaultTypeInternal;
extern HardDeviceDefaultTypeInternal _HardDevice_default_instance_;
class Host;
class HostDefaultTypeInternal;
extern HostDefaultTypeInternal _Host_default_instance_;
class HostList;
class HostListDefaultTypeInternal;
extern HostListDefaultTypeInternal _HostList_default_instance_;
class LinkedinContactItem;
class LinkedinContactItemDefaultTypeInternal;
extern LinkedinContactItemDefaultTypeInternal _LinkedinContactItem_default_instance_;
class MemberReq;
class MemberReqDefaultTypeInternal;
extern MemberReqDefaultTypeInternal _MemberReq_default_instance_;
class MemberResp;
class MemberRespDefaultTypeInternal;
extern MemberRespDefaultTypeInternal _MemberResp_default_instance_;
class ModContact;
class ModContactDefaultTypeInternal;
extern ModContactDefaultTypeInternal _ModContact_default_instance_;
class ModUserInfo;
class ModUserInfoDefaultTypeInternal;
extern ModUserInfoDefaultTypeInternal _ModUserInfo_default_instance_;
class NetworkControl;
class NetworkControlDefaultTypeInternal;
extern NetworkControlDefaultTypeInternal _NetworkControl_default_instance_;
class PatternLockInfo;
class PatternLockInfoDefaultTypeInternal;
extern PatternLockInfoDefaultTypeInternal _PatternLockInfo_default_instance_;
class PluginKey;
class PluginKeyDefaultTypeInternal;
extern PluginKeyDefaultTypeInternal _PluginKey_default_instance_;
class PluginKeyList;
class PluginKeyListDefaultTypeInternal;
extern PluginKeyListDefaultTypeInternal _PluginKeyList_default_instance_;
class PositionInfo;
class PositionInfoDefaultTypeInternal;
extern PositionInfoDefaultTypeInternal _PositionInfo_default_instance_;
class RoomInfo;
class RoomInfoDefaultTypeInternal;
extern RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
class SKBuiltinBuffer_t;
class SKBuiltinBuffer_tDefaultTypeInternal;
extern SKBuiltinBuffer_tDefaultTypeInternal _SKBuiltinBuffer_t_default_instance_;
class SKBuiltinChar_t;
class SKBuiltinChar_tDefaultTypeInternal;
extern SKBuiltinChar_tDefaultTypeInternal _SKBuiltinChar_t_default_instance_;
class SKBuiltinDouble64_t;
class SKBuiltinDouble64_tDefaultTypeInternal;
extern SKBuiltinDouble64_tDefaultTypeInternal _SKBuiltinDouble64_t_default_instance_;
class SKBuiltinFloat32_t;
class SKBuiltinFloat32_tDefaultTypeInternal;
extern SKBuiltinFloat32_tDefaultTypeInternal _SKBuiltinFloat32_t_default_instance_;
class SKBuiltinInt16_t;
class SKBuiltinInt16_tDefaultTypeInternal;
extern SKBuiltinInt16_tDefaultTypeInternal _SKBuiltinInt16_t_default_instance_;
class SKBuiltinInt32_t;
class SKBuiltinInt32_tDefaultTypeInternal;
extern SKBuiltinInt32_tDefaultTypeInternal _SKBuiltinInt32_t_default_instance_;
class SKBuiltinInt64_t;
class SKBuiltinInt64_tDefaultTypeInternal;
extern SKBuiltinInt64_tDefaultTypeInternal _SKBuiltinInt64_t_default_instance_;
class SKBuiltinInt8_t;
class SKBuiltinInt8_tDefaultTypeInternal;
extern SKBuiltinInt8_tDefaultTypeInternal _SKBuiltinInt8_t_default_instance_;
class SKBuiltinString_t;
class SKBuiltinString_tDefaultTypeInternal;
extern SKBuiltinString_tDefaultTypeInternal _SKBuiltinString_t_default_instance_;
class SKBuiltinUchar_t;
class SKBuiltinUchar_tDefaultTypeInternal;
extern SKBuiltinUchar_tDefaultTypeInternal _SKBuiltinUchar_t_default_instance_;
class SKBuiltinUint16_t;
class SKBuiltinUint16_tDefaultTypeInternal;
extern SKBuiltinUint16_tDefaultTypeInternal _SKBuiltinUint16_t_default_instance_;
class SKBuiltinUint32_t;
class SKBuiltinUint32_tDefaultTypeInternal;
extern SKBuiltinUint32_tDefaultTypeInternal _SKBuiltinUint32_t_default_instance_;
class SKBuiltinUint64_t;
class SKBuiltinUint64_tDefaultTypeInternal;
extern SKBuiltinUint64_tDefaultTypeInternal _SKBuiltinUint64_t_default_instance_;
class SKBuiltinUint8_t;
class SKBuiltinUint8_tDefaultTypeInternal;
extern SKBuiltinUint8_tDefaultTypeInternal _SKBuiltinUint8_t_default_instance_;
class SafeDevice;
class SafeDeviceDefaultTypeInternal;
extern SafeDeviceDefaultTypeInternal _SafeDevice_default_instance_;
class SafeDeviceList;
class SafeDeviceListDefaultTypeInternal;
extern SafeDeviceListDefaultTypeInternal _SafeDeviceList_default_instance_;
class ShakeSyncRequest;
class ShakeSyncRequestDefaultTypeInternal;
extern ShakeSyncRequestDefaultTypeInternal _ShakeSyncRequest_default_instance_;
class ShakeSyncResponse;
class ShakeSyncResponseDefaultTypeInternal;
extern ShakeSyncResponseDefaultTypeInternal _ShakeSyncResponse_default_instance_;
class ShowStyleKey;
class ShowStyleKeyDefaultTypeInternal;
extern ShowStyleKeyDefaultTypeInternal _ShowStyleKey_default_instance_;
class SnsUserInfo;
class SnsUserInfoDefaultTypeInternal;
extern SnsUserInfoDefaultTypeInternal _SnsUserInfo_default_instance_;
class StyleKeyVal;
class StyleKeyValDefaultTypeInternal;
extern StyleKeyValDefaultTypeInternal _StyleKeyVal_default_instance_;
class UserGameAchieveInfo;
class UserGameAchieveInfoDefaultTypeInternal;
extern UserGameAchieveInfoDefaultTypeInternal _UserGameAchieveInfo_default_instance_;
class UserGameInfo;
class UserGameInfoDefaultTypeInternal;
extern UserGameInfoDefaultTypeInternal _UserGameInfo_default_instance_;
class UserGameWishInfo;
class UserGameWishInfoDefaultTypeInternal;
extern UserGameWishInfoDefaultTypeInternal _UserGameWishInfo_default_instance_;
class UserInfoExt;
class UserInfoExtDefaultTypeInternal;
extern UserInfoExtDefaultTypeInternal _UserInfoExt_default_instance_;
}  // namespace micromsg

namespace micromsg {

namespace protobuf_mmgame_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_mmgame_2eproto

// ===================================================================

class EnemyGameInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.EnemyGameInfo) */ {
 public:
  EnemyGameInfo();
  virtual ~EnemyGameInfo();

  EnemyGameInfo(const EnemyGameInfo& from);

  inline EnemyGameInfo& operator=(const EnemyGameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnemyGameInfo& default_instance();

  static inline const EnemyGameInfo* internal_default_instance() {
    return reinterpret_cast<const EnemyGameInfo*>(
               &_EnemyGameInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(EnemyGameInfo* other);

  // implements Message ----------------------------------------------

  inline EnemyGameInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  EnemyGameInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnemyGameInfo& from);
  void MergeFrom(const EnemyGameInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnemyGameInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // required uint32 Score = 2;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  ::google::protobuf::uint32 score() const;
  void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.EnemyGameInfo)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_score();
  void clear_has_score();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 score_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EnemyGameKilled : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.EnemyGameKilled) */ {
 public:
  EnemyGameKilled();
  virtual ~EnemyGameKilled();

  EnemyGameKilled(const EnemyGameKilled& from);

  inline EnemyGameKilled& operator=(const EnemyGameKilled& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnemyGameKilled& default_instance();

  static inline const EnemyGameKilled* internal_default_instance() {
    return reinterpret_cast<const EnemyGameKilled*>(
               &_EnemyGameKilled_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(EnemyGameKilled* other);

  // implements Message ----------------------------------------------

  inline EnemyGameKilled* New() const PROTOBUF_FINAL { return New(NULL); }

  EnemyGameKilled* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnemyGameKilled& from);
  void MergeFrom(const EnemyGameKilled& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnemyGameKilled* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // required uint32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // optional uint32 GeneralCount = 3;
  bool has_generalcount() const;
  void clear_generalcount();
  static const int kGeneralCountFieldNumber = 3;
  ::google::protobuf::uint32 generalcount() const;
  void set_generalcount(::google::protobuf::uint32 value);

  // optional uint32 UsedCount = 4;
  bool has_usedcount() const;
  void clear_usedcount();
  static const int kUsedCountFieldNumber = 4;
  ::google::protobuf::uint32 usedcount() const;
  void set_usedcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.EnemyGameKilled)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_count();
  void clear_has_count();
  void set_has_generalcount();
  void clear_has_generalcount();
  void set_has_usedcount();
  void clear_has_usedcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 generalcount_;
  ::google::protobuf::uint32 usedcount_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserGameInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UserGameInfo) */ {
 public:
  UserGameInfo();
  virtual ~UserGameInfo();

  UserGameInfo(const UserGameInfo& from);

  inline UserGameInfo& operator=(const UserGameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserGameInfo& default_instance();

  static inline const UserGameInfo* internal_default_instance() {
    return reinterpret_cast<const UserGameInfo*>(
               &_UserGameInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(UserGameInfo* other);

  // implements Message ----------------------------------------------

  inline UserGameInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserGameInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserGameInfo& from);
  void MergeFrom(const UserGameInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserGameInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string NickName = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string HeadImageUrl = 3;
  bool has_headimageurl() const;
  void clear_headimageurl();
  static const int kHeadImageUrlFieldNumber = 3;
  const ::std::string& headimageurl() const;
  void set_headimageurl(const ::std::string& value);
  #if LANG_CXX11
  void set_headimageurl(::std::string&& value);
  #endif
  void set_headimageurl(const char* value);
  void set_headimageurl(const char* value, size_t size);
  ::std::string* mutable_headimageurl();
  ::std::string* release_headimageurl();
  void set_allocated_headimageurl(::std::string* headimageurl);

  // @@protoc_insertion_point(class_scope:micromsg.UserGameInfo)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_headimageurl();
  void clear_has_headimageurl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr headimageurl_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserGameAchieveInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UserGameAchieveInfo) */ {
 public:
  UserGameAchieveInfo();
  virtual ~UserGameAchieveInfo();

  UserGameAchieveInfo(const UserGameAchieveInfo& from);

  inline UserGameAchieveInfo& operator=(const UserGameAchieveInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserGameAchieveInfo& default_instance();

  static inline const UserGameAchieveInfo* internal_default_instance() {
    return reinterpret_cast<const UserGameAchieveInfo*>(
               &_UserGameAchieveInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(UserGameAchieveInfo* other);

  // implements Message ----------------------------------------------

  inline UserGameAchieveInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserGameAchieveInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserGameAchieveInfo& from);
  void MergeFrom(const UserGameAchieveInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserGameAchieveInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.UserGameInfo UserInfo = 1;
  bool has_userinfo() const;
  void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  const ::micromsg::UserGameInfo& userinfo() const;
  ::micromsg::UserGameInfo* mutable_userinfo();
  ::micromsg::UserGameInfo* release_userinfo();
  void set_allocated_userinfo(::micromsg::UserGameInfo* userinfo);

  // required uint32 Score = 2;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  ::google::protobuf::uint32 score() const;
  void set_score(::google::protobuf::uint32 value);

  // required uint32 Rank = 3;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 3;
  ::google::protobuf::uint32 rank() const;
  void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.UserGameAchieveInfo)
 private:
  void set_has_userinfo();
  void clear_has_userinfo();
  void set_has_score();
  void clear_has_score();
  void set_has_rank();
  void clear_has_rank();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::UserGameInfo* userinfo_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 rank_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserGameWishInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UserGameWishInfo) */ {
 public:
  UserGameWishInfo();
  virtual ~UserGameWishInfo();

  UserGameWishInfo(const UserGameWishInfo& from);

  inline UserGameWishInfo& operator=(const UserGameWishInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserGameWishInfo& default_instance();

  static inline const UserGameWishInfo* internal_default_instance() {
    return reinterpret_cast<const UserGameWishInfo*>(
               &_UserGameWishInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(UserGameWishInfo* other);

  // implements Message ----------------------------------------------

  inline UserGameWishInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserGameWishInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserGameWishInfo& from);
  void MergeFrom(const UserGameWishInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserGameWishInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.UserGameInfo UserInfo = 1;
  bool has_userinfo() const;
  void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  const ::micromsg::UserGameInfo& userinfo() const;
  ::micromsg::UserGameInfo* mutable_userinfo();
  ::micromsg::UserGameInfo* release_userinfo();
  void set_allocated_userinfo(::micromsg::UserGameInfo* userinfo);

  // @@protoc_insertion_point(class_scope:micromsg.UserGameWishInfo)
 private:
  void set_has_userinfo();
  void clear_has_userinfo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::UserGameInfo* userinfo_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GamePropsInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GamePropsInfo) */ {
 public:
  GamePropsInfo();
  virtual ~GamePropsInfo();

  GamePropsInfo(const GamePropsInfo& from);

  inline GamePropsInfo& operator=(const GamePropsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GamePropsInfo& default_instance();

  static inline const GamePropsInfo* internal_default_instance() {
    return reinterpret_cast<const GamePropsInfo*>(
               &_GamePropsInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(GamePropsInfo* other);

  // implements Message ----------------------------------------------

  inline GamePropsInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GamePropsInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GamePropsInfo& from);
  void MergeFrom(const GamePropsInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GamePropsInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string IconUrl = 2;
  bool has_iconurl() const;
  void clear_iconurl();
  static const int kIconUrlFieldNumber = 2;
  const ::std::string& iconurl() const;
  void set_iconurl(const ::std::string& value);
  #if LANG_CXX11
  void set_iconurl(::std::string&& value);
  #endif
  void set_iconurl(const char* value);
  void set_iconurl(const char* value, size_t size);
  ::std::string* mutable_iconurl();
  ::std::string* release_iconurl();
  void set_allocated_iconurl(::std::string* iconurl);

  // optional string Name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string Desc = 4;
  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 4;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // required uint32 PropsId = 1;
  bool has_propsid() const;
  void clear_propsid();
  static const int kPropsIdFieldNumber = 1;
  ::google::protobuf::uint32 propsid() const;
  void set_propsid(::google::protobuf::uint32 value);

  // required uint32 Type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GamePropsInfo)
 private:
  void set_has_propsid();
  void clear_has_propsid();
  void set_has_iconurl();
  void clear_has_iconurl();
  void set_has_name();
  void clear_has_name();
  void set_has_desc();
  void clear_has_desc();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr iconurl_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::uint32 propsid_;
  ::google::protobuf::uint32 type_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameUserPropsInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameUserPropsInfo) */ {
 public:
  GameUserPropsInfo();
  virtual ~GameUserPropsInfo();

  GameUserPropsInfo(const GameUserPropsInfo& from);

  inline GameUserPropsInfo& operator=(const GameUserPropsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameUserPropsInfo& default_instance();

  static inline const GameUserPropsInfo* internal_default_instance() {
    return reinterpret_cast<const GameUserPropsInfo*>(
               &_GameUserPropsInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(GameUserPropsInfo* other);

  // implements Message ----------------------------------------------

  inline GameUserPropsInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GameUserPropsInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameUserPropsInfo& from);
  void MergeFrom(const GameUserPropsInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameUserPropsInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 PropsId = 1;
  bool has_propsid() const;
  void clear_propsid();
  static const int kPropsIdFieldNumber = 1;
  ::google::protobuf::uint32 propsid() const;
  void set_propsid(::google::protobuf::uint32 value);

  // required uint32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameUserPropsInfo)
 private:
  void set_has_propsid();
  void clear_has_propsid();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 propsid_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameAnnouncementInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameAnnouncementInfo) */ {
 public:
  GameAnnouncementInfo();
  virtual ~GameAnnouncementInfo();

  GameAnnouncementInfo(const GameAnnouncementInfo& from);

  inline GameAnnouncementInfo& operator=(const GameAnnouncementInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameAnnouncementInfo& default_instance();

  static inline const GameAnnouncementInfo* internal_default_instance() {
    return reinterpret_cast<const GameAnnouncementInfo*>(
               &_GameAnnouncementInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(GameAnnouncementInfo* other);

  // implements Message ----------------------------------------------

  inline GameAnnouncementInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GameAnnouncementInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameAnnouncementInfo& from);
  void MergeFrom(const GameAnnouncementInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameAnnouncementInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string Desc = 3;
  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 3;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // required uint32 Style = 1;
  bool has_style() const;
  void clear_style();
  static const int kStyleFieldNumber = 1;
  ::google::protobuf::uint32 style() const;
  void set_style(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameAnnouncementInfo)
 private:
  void set_has_style();
  void clear_has_style();
  void set_has_title();
  void clear_has_title();
  void set_has_desc();
  void clear_has_desc();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::uint32 style_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameConsumeProps : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameConsumeProps) */ {
 public:
  GameConsumeProps();
  virtual ~GameConsumeProps();

  GameConsumeProps(const GameConsumeProps& from);

  inline GameConsumeProps& operator=(const GameConsumeProps& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameConsumeProps& default_instance();

  static inline const GameConsumeProps* internal_default_instance() {
    return reinterpret_cast<const GameConsumeProps*>(
               &_GameConsumeProps_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(GameConsumeProps* other);

  // implements Message ----------------------------------------------

  inline GameConsumeProps* New() const PROTOBUF_FINAL { return New(NULL); }

  GameConsumeProps* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameConsumeProps& from);
  void MergeFrom(const GameConsumeProps& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameConsumeProps* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 PropsId = 1;
  bool has_propsid() const;
  void clear_propsid();
  static const int kPropsIdFieldNumber = 1;
  ::google::protobuf::uint32 propsid() const;
  void set_propsid(::google::protobuf::uint32 value);

  // required int32 ConsumeCount = 2;
  bool has_consumecount() const;
  void clear_consumecount();
  static const int kConsumeCountFieldNumber = 2;
  ::google::protobuf::int32 consumecount() const;
  void set_consumecount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameConsumeProps)
 private:
  void set_has_propsid();
  void clear_has_propsid();
  void set_has_consumecount();
  void clear_has_consumecount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 propsid_;
  ::google::protobuf::int32 consumecount_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameInitReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameInitReq) */ {
 public:
  GameInitReq();
  virtual ~GameInitReq();

  GameInitReq(const GameInitReq& from);

  inline GameInitReq& operator=(const GameInitReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameInitReq& default_instance();

  static inline const GameInitReq* internal_default_instance() {
    return reinterpret_cast<const GameInitReq*>(
               &_GameInitReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(GameInitReq* other);

  // implements Message ----------------------------------------------

  inline GameInitReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GameInitReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameInitReq& from);
  void MergeFrom(const GameInitReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameInitReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AppID = 2;
  bool has_appid() const;
  void clear_appid();
  static const int kAppIDFieldNumber = 2;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.GameInitReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_appid();
  void clear_has_appid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameInitResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameInitResp) */ {
 public:
  GameInitResp();
  virtual ~GameInitResp();

  GameInitResp(const GameInitResp& from);

  inline GameInitResp& operator=(const GameInitResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameInitResp& default_instance();

  static inline const GameInitResp* internal_default_instance() {
    return reinterpret_cast<const GameInitResp*>(
               &_GameInitResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(GameInitResp* other);

  // implements Message ----------------------------------------------

  inline GameInitResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GameInitResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameInitResp& from);
  void MergeFrom(const GameInitResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameInitResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.UserGameInfo FriendList = 7;
  int friendlist_size() const;
  void clear_friendlist();
  static const int kFriendListFieldNumber = 7;
  const ::micromsg::UserGameInfo& friendlist(int index) const;
  ::micromsg::UserGameInfo* mutable_friendlist(int index);
  ::micromsg::UserGameInfo* add_friendlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameInfo >*
      mutable_friendlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameInfo >&
      friendlist() const;

  // repeated .micromsg.UserGameWishInfo WishList = 9;
  int wishlist_size() const;
  void clear_wishlist();
  static const int kWishListFieldNumber = 9;
  const ::micromsg::UserGameWishInfo& wishlist(int index) const;
  ::micromsg::UserGameWishInfo* mutable_wishlist(int index);
  ::micromsg::UserGameWishInfo* add_wishlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameWishInfo >*
      mutable_wishlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameWishInfo >&
      wishlist() const;

  // repeated .micromsg.GameUserPropsInfo GamePropsList = 11;
  int gamepropslist_size() const;
  void clear_gamepropslist();
  static const int kGamePropsListFieldNumber = 11;
  const ::micromsg::GameUserPropsInfo& gamepropslist(int index) const;
  ::micromsg::GameUserPropsInfo* mutable_gamepropslist(int index);
  ::micromsg::GameUserPropsInfo* add_gamepropslist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::GameUserPropsInfo >*
      mutable_gamepropslist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::GameUserPropsInfo >&
      gamepropslist() const;

  // repeated .micromsg.GameAnnouncementInfo GameAnnouncementList = 13;
  int gameannouncementlist_size() const;
  void clear_gameannouncementlist();
  static const int kGameAnnouncementListFieldNumber = 13;
  const ::micromsg::GameAnnouncementInfo& gameannouncementlist(int index) const;
  ::micromsg::GameAnnouncementInfo* mutable_gameannouncementlist(int index);
  ::micromsg::GameAnnouncementInfo* add_gameannouncementlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::GameAnnouncementInfo >*
      mutable_gameannouncementlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::GameAnnouncementInfo >&
      gameannouncementlist() const;

  // repeated .micromsg.SKBuiltinString_t ProductIdList = 18;
  int productidlist_size() const;
  void clear_productidlist();
  static const int kProductIdListFieldNumber = 18;
  const ::micromsg::SKBuiltinString_t& productidlist(int index) const;
  ::micromsg::SKBuiltinString_t* mutable_productidlist(int index);
  ::micromsg::SKBuiltinString_t* add_productidlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
      mutable_productidlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
      productidlist() const;

  // optional string GameNumerConfig = 3;
  bool has_gamenumerconfig() const;
  void clear_gamenumerconfig();
  static const int kGameNumerConfigFieldNumber = 3;
  const ::std::string& gamenumerconfig() const;
  void set_gamenumerconfig(const ::std::string& value);
  #if LANG_CXX11
  void set_gamenumerconfig(::std::string&& value);
  #endif
  void set_gamenumerconfig(const char* value);
  void set_gamenumerconfig(const char* value, size_t size);
  ::std::string* mutable_gamenumerconfig();
  ::std::string* release_gamenumerconfig();
  void set_allocated_gamenumerconfig(::std::string* gamenumerconfig);

  // optional string Token = 5;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 5;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // optional string PropsViewTip = 14;
  bool has_propsviewtip() const;
  void clear_propsviewtip();
  static const int kPropsViewTipFieldNumber = 14;
  const ::std::string& propsviewtip() const;
  void set_propsviewtip(const ::std::string& value);
  #if LANG_CXX11
  void set_propsviewtip(::std::string&& value);
  #endif
  void set_propsviewtip(const char* value);
  void set_propsviewtip(const char* value, size_t size);
  ::std::string* mutable_propsviewtip();
  ::std::string* release_propsviewtip();
  void set_allocated_propsviewtip(::std::string* propsviewtip);

  // optional string RankViewTip = 15;
  bool has_rankviewtip() const;
  void clear_rankviewtip();
  static const int kRankViewTipFieldNumber = 15;
  const ::std::string& rankviewtip() const;
  void set_rankviewtip(const ::std::string& value);
  #if LANG_CXX11
  void set_rankviewtip(::std::string&& value);
  #endif
  void set_rankviewtip(const char* value);
  void set_rankviewtip(const char* value, size_t size);
  ::std::string* mutable_rankviewtip();
  ::std::string* release_rankviewtip();
  void set_allocated_rankviewtip(::std::string* rankviewtip);

  // optional string BuyEngineOilWording = 19;
  bool has_buyengineoilwording() const;
  void clear_buyengineoilwording();
  static const int kBuyEngineOilWordingFieldNumber = 19;
  const ::std::string& buyengineoilwording() const;
  void set_buyengineoilwording(const ::std::string& value);
  #if LANG_CXX11
  void set_buyengineoilwording(::std::string&& value);
  #endif
  void set_buyengineoilwording(const char* value);
  void set_buyengineoilwording(const char* value, size_t size);
  ::std::string* mutable_buyengineoilwording();
  ::std::string* release_buyengineoilwording();
  void set_allocated_buyengineoilwording(::std::string* buyengineoilwording);

  // optional string OilPrice = 20;
  bool has_oilprice() const;
  void clear_oilprice();
  static const int kOilPriceFieldNumber = 20;
  const ::std::string& oilprice() const;
  void set_oilprice(const ::std::string& value);
  #if LANG_CXX11
  void set_oilprice(::std::string&& value);
  #endif
  void set_oilprice(const char* value);
  void set_oilprice(const char* value, size_t size);
  ::std::string* mutable_oilprice();
  ::std::string* release_oilprice();
  void set_allocated_oilprice(::std::string* oilprice);

  // optional string OilCurrency = 21;
  bool has_oilcurrency() const;
  void clear_oilcurrency();
  static const int kOilCurrencyFieldNumber = 21;
  const ::std::string& oilcurrency() const;
  void set_oilcurrency(const ::std::string& value);
  #if LANG_CXX11
  void set_oilcurrency(::std::string&& value);
  #endif
  void set_oilcurrency(const char* value);
  void set_oilcurrency(const char* value, size_t size);
  ::std::string* mutable_oilcurrency();
  ::std::string* release_oilcurrency();
  void set_allocated_oilcurrency(::std::string* oilcurrency);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 LifeNum = 2;
  bool has_lifenum() const;
  void clear_lifenum();
  static const int kLifeNumFieldNumber = 2;
  ::google::protobuf::uint32 lifenum() const;
  void set_lifenum(::google::protobuf::uint32 value);

  // required uint32 CheckLeftTime = 4;
  bool has_checklefttime() const;
  void clear_checklefttime();
  static const int kCheckLeftTimeFieldNumber = 4;
  ::google::protobuf::uint32 checklefttime() const;
  void set_checklefttime(::google::protobuf::uint32 value);

  // required int32 FriendCount = 6;
  bool has_friendcount() const;
  void clear_friendcount();
  static const int kFriendCountFieldNumber = 6;
  ::google::protobuf::int32 friendcount() const;
  void set_friendcount(::google::protobuf::int32 value);

  // required int32 WishCount = 8;
  bool has_wishcount() const;
  void clear_wishcount();
  static const int kWishCountFieldNumber = 8;
  ::google::protobuf::int32 wishcount() const;
  void set_wishcount(::google::protobuf::int32 value);

  // optional int32 GamePropsCount = 10;
  bool has_gamepropscount() const;
  void clear_gamepropscount();
  static const int kGamePropsCountFieldNumber = 10;
  ::google::protobuf::int32 gamepropscount() const;
  void set_gamepropscount(::google::protobuf::int32 value);

  // optional int32 GameAnnouncementCount = 12;
  bool has_gameannouncementcount() const;
  void clear_gameannouncementcount();
  static const int kGameAnnouncementCountFieldNumber = 12;
  ::google::protobuf::int32 gameannouncementcount() const;
  void set_gameannouncementcount(::google::protobuf::int32 value);

  // optional uint32 GameCoinCount = 16;
  bool has_gamecoincount() const;
  void clear_gamecoincount();
  static const int kGameCoinCountFieldNumber = 16;
  ::google::protobuf::uint32 gamecoincount() const;
  void set_gamecoincount(::google::protobuf::uint32 value);

  // optional uint32 ProductIdCount = 17;
  bool has_productidcount() const;
  void clear_productidcount();
  static const int kProductIdCountFieldNumber = 17;
  ::google::protobuf::uint32 productidcount() const;
  void set_productidcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameInitResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_lifenum();
  void clear_has_lifenum();
  void set_has_gamenumerconfig();
  void clear_has_gamenumerconfig();
  void set_has_checklefttime();
  void clear_has_checklefttime();
  void set_has_token();
  void clear_has_token();
  void set_has_friendcount();
  void clear_has_friendcount();
  void set_has_wishcount();
  void clear_has_wishcount();
  void set_has_gamepropscount();
  void clear_has_gamepropscount();
  void set_has_gameannouncementcount();
  void clear_has_gameannouncementcount();
  void set_has_propsviewtip();
  void clear_has_propsviewtip();
  void set_has_rankviewtip();
  void clear_has_rankviewtip();
  void set_has_gamecoincount();
  void clear_has_gamecoincount();
  void set_has_productidcount();
  void clear_has_productidcount();
  void set_has_buyengineoilwording();
  void clear_has_buyengineoilwording();
  void set_has_oilprice();
  void clear_has_oilprice();
  void set_has_oilcurrency();
  void clear_has_oilcurrency();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameInfo > friendlist_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameWishInfo > wishlist_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::GameUserPropsInfo > gamepropslist_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::GameAnnouncementInfo > gameannouncementlist_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t > productidlist_;
  ::google::protobuf::internal::ArenaStringPtr gamenumerconfig_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr propsviewtip_;
  ::google::protobuf::internal::ArenaStringPtr rankviewtip_;
  ::google::protobuf::internal::ArenaStringPtr buyengineoilwording_;
  ::google::protobuf::internal::ArenaStringPtr oilprice_;
  ::google::protobuf::internal::ArenaStringPtr oilcurrency_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 lifenum_;
  ::google::protobuf::uint32 checklefttime_;
  ::google::protobuf::int32 friendcount_;
  ::google::protobuf::int32 wishcount_;
  ::google::protobuf::int32 gamepropscount_;
  ::google::protobuf::int32 gameannouncementcount_;
  ::google::protobuf::uint32 gamecoincount_;
  ::google::protobuf::uint32 productidcount_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEndReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameEndReq) */ {
 public:
  GameEndReq();
  virtual ~GameEndReq();

  GameEndReq(const GameEndReq& from);

  inline GameEndReq& operator=(const GameEndReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEndReq& default_instance();

  static inline const GameEndReq* internal_default_instance() {
    return reinterpret_cast<const GameEndReq*>(
               &_GameEndReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(GameEndReq* other);

  // implements Message ----------------------------------------------

  inline GameEndReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GameEndReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameEndReq& from);
  void MergeFrom(const GameEndReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameEndReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.EnemyGameKilled EnemyKilled = 4;
  int enemykilled_size() const;
  void clear_enemykilled();
  static const int kEnemyKilledFieldNumber = 4;
  const ::micromsg::EnemyGameKilled& enemykilled(int index) const;
  ::micromsg::EnemyGameKilled* mutable_enemykilled(int index);
  ::micromsg::EnemyGameKilled* add_enemykilled();
  ::google::protobuf::RepeatedPtrField< ::micromsg::EnemyGameKilled >*
      mutable_enemykilled();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::EnemyGameKilled >&
      enemykilled() const;

  // repeated .micromsg.GameConsumeProps GameConsumePropsList = 10;
  int gameconsumepropslist_size() const;
  void clear_gameconsumepropslist();
  static const int kGameConsumePropsListFieldNumber = 10;
  const ::micromsg::GameConsumeProps& gameconsumepropslist(int index) const;
  ::micromsg::GameConsumeProps* mutable_gameconsumepropslist(int index);
  ::micromsg::GameConsumeProps* add_gameconsumepropslist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::GameConsumeProps >*
      mutable_gameconsumepropslist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::GameConsumeProps >&
      gameconsumepropslist() const;

  // optional string AppID = 2;
  bool has_appid() const;
  void clear_appid();
  static const int kAppIDFieldNumber = 2;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // optional string Token = 7;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 7;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required int32 Count = 3;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // required uint32 LocalScore = 5;
  bool has_localscore() const;
  void clear_localscore();
  static const int kLocalScoreFieldNumber = 5;
  ::google::protobuf::uint32 localscore() const;
  void set_localscore(::google::protobuf::uint32 value);

  // required uint32 ConsumeTime = 6;
  bool has_consumetime() const;
  void clear_consumetime();
  static const int kConsumeTimeFieldNumber = 6;
  ::google::protobuf::uint32 consumetime() const;
  void set_consumetime(::google::protobuf::uint32 value);

  // optional uint32 DeadCount = 8;
  bool has_deadcount() const;
  void clear_deadcount();
  static const int kDeadCountFieldNumber = 8;
  ::google::protobuf::uint32 deadcount() const;
  void set_deadcount(::google::protobuf::uint32 value);

  // optional int32 GameConsumePropsCount = 9;
  bool has_gameconsumepropscount() const;
  void clear_gameconsumepropscount();
  static const int kGameConsumePropsCountFieldNumber = 9;
  ::google::protobuf::int32 gameconsumepropscount() const;
  void set_gameconsumepropscount(::google::protobuf::int32 value);

  // optional uint32 GameStartTime = 11;
  bool has_gamestarttime() const;
  void clear_gamestarttime();
  static const int kGameStartTimeFieldNumber = 11;
  ::google::protobuf::uint32 gamestarttime() const;
  void set_gamestarttime(::google::protobuf::uint32 value);

  // optional uint32 GameEndTime = 12;
  bool has_gameendtime() const;
  void clear_gameendtime();
  static const int kGameEndTimeFieldNumber = 12;
  ::google::protobuf::uint32 gameendtime() const;
  void set_gameendtime(::google::protobuf::uint32 value);

  // optional uint32 ShieldNum = 13;
  bool has_shieldnum() const;
  void clear_shieldnum();
  static const int kShieldNumFieldNumber = 13;
  ::google::protobuf::uint32 shieldnum() const;
  void set_shieldnum(::google::protobuf::uint32 value);

  // optional uint32 TotalShots = 14;
  bool has_totalshots() const;
  void clear_totalshots();
  static const int kTotalShotsFieldNumber = 14;
  ::google::protobuf::uint32 totalshots() const;
  void set_totalshots(::google::protobuf::uint32 value);

  // optional uint32 GameCoinCount = 15;
  bool has_gamecoincount() const;
  void clear_gamecoincount();
  static const int kGameCoinCountFieldNumber = 15;
  ::google::protobuf::uint32 gamecoincount() const;
  void set_gamecoincount(::google::protobuf::uint32 value);

  // optional uint32 ClientUseReviveNum = 16;
  bool has_clientuserevivenum() const;
  void clear_clientuserevivenum();
  static const int kClientUseReviveNumFieldNumber = 16;
  ::google::protobuf::uint32 clientuserevivenum() const;
  void set_clientuserevivenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameEndReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_appid();
  void clear_has_appid();
  void set_has_count();
  void clear_has_count();
  void set_has_localscore();
  void clear_has_localscore();
  void set_has_consumetime();
  void clear_has_consumetime();
  void set_has_token();
  void clear_has_token();
  void set_has_deadcount();
  void clear_has_deadcount();
  void set_has_gameconsumepropscount();
  void clear_has_gameconsumepropscount();
  void set_has_gamestarttime();
  void clear_has_gamestarttime();
  void set_has_gameendtime();
  void clear_has_gameendtime();
  void set_has_shieldnum();
  void clear_has_shieldnum();
  void set_has_totalshots();
  void clear_has_totalshots();
  void set_has_gamecoincount();
  void clear_has_gamecoincount();
  void set_has_clientuserevivenum();
  void clear_has_clientuserevivenum();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::EnemyGameKilled > enemykilled_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::GameConsumeProps > gameconsumepropslist_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::uint32 localscore_;
  ::google::protobuf::uint32 consumetime_;
  ::google::protobuf::uint32 deadcount_;
  ::google::protobuf::int32 gameconsumepropscount_;
  ::google::protobuf::uint32 gamestarttime_;
  ::google::protobuf::uint32 gameendtime_;
  ::google::protobuf::uint32 shieldnum_;
  ::google::protobuf::uint32 totalshots_;
  ::google::protobuf::uint32 gamecoincount_;
  ::google::protobuf::uint32 clientuserevivenum_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEndResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameEndResp) */ {
 public:
  GameEndResp();
  virtual ~GameEndResp();

  GameEndResp(const GameEndResp& from);

  inline GameEndResp& operator=(const GameEndResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEndResp& default_instance();

  static inline const GameEndResp* internal_default_instance() {
    return reinterpret_cast<const GameEndResp*>(
               &_GameEndResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(GameEndResp* other);

  // implements Message ----------------------------------------------

  inline GameEndResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GameEndResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameEndResp& from);
  void MergeFrom(const GameEndResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameEndResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.UserGameAchieveInfo RankList = 8;
  int ranklist_size() const;
  void clear_ranklist();
  static const int kRankListFieldNumber = 8;
  const ::micromsg::UserGameAchieveInfo& ranklist(int index) const;
  ::micromsg::UserGameAchieveInfo* mutable_ranklist(int index);
  ::micromsg::UserGameAchieveInfo* add_ranklist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameAchieveInfo >*
      mutable_ranklist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameAchieveInfo >&
      ranklist() const;

  // optional string Achievement = 3;
  bool has_achievement() const;
  void clear_achievement();
  static const int kAchievementFieldNumber = 3;
  const ::std::string& achievement() const;
  void set_achievement(const ::std::string& value);
  #if LANG_CXX11
  void set_achievement(::std::string&& value);
  #endif
  void set_achievement(const char* value);
  void set_achievement(const char* value, size_t size);
  ::std::string* mutable_achievement();
  ::std::string* release_achievement();
  void set_allocated_achievement(::std::string* achievement);

  // optional string PropsViewTip = 11;
  bool has_propsviewtip() const;
  void clear_propsviewtip();
  static const int kPropsViewTipFieldNumber = 11;
  const ::std::string& propsviewtip() const;
  void set_propsviewtip(const ::std::string& value);
  #if LANG_CXX11
  void set_propsviewtip(::std::string&& value);
  #endif
  void set_propsviewtip(const char* value);
  void set_propsviewtip(const char* value, size_t size);
  ::std::string* mutable_propsviewtip();
  ::std::string* release_propsviewtip();
  void set_allocated_propsviewtip(::std::string* propsviewtip);

  // optional string RankViewTip = 12;
  bool has_rankviewtip() const;
  void clear_rankviewtip();
  static const int kRankViewTipFieldNumber = 12;
  const ::std::string& rankviewtip() const;
  void set_rankviewtip(const ::std::string& value);
  #if LANG_CXX11
  void set_rankviewtip(::std::string&& value);
  #endif
  void set_rankviewtip(const char* value);
  void set_rankviewtip(const char* value, size_t size);
  ::std::string* mutable_rankviewtip();
  ::std::string* release_rankviewtip();
  void set_allocated_rankviewtip(::std::string* rankviewtip);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 Score = 2;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  ::google::protobuf::uint32 score() const;
  void set_score(::google::protobuf::uint32 value);

  // required uint32 Rank = 4;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 4;
  ::google::protobuf::uint32 rank() const;
  void set_rank(::google::protobuf::uint32 value);

  // required uint32 LifeNum = 5;
  bool has_lifenum() const;
  void clear_lifenum();
  static const int kLifeNumFieldNumber = 5;
  ::google::protobuf::uint32 lifenum() const;
  void set_lifenum(::google::protobuf::uint32 value);

  // required uint32 CheckLeftTime = 6;
  bool has_checklefttime() const;
  void clear_checklefttime();
  static const int kCheckLeftTimeFieldNumber = 6;
  ::google::protobuf::uint32 checklefttime() const;
  void set_checklefttime(::google::protobuf::uint32 value);

  // required int32 Count = 7;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 7;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // optional uint32 GameCoinCount = 13;
  bool has_gamecoincount() const;
  void clear_gamecoincount();
  static const int kGameCoinCountFieldNumber = 13;
  ::google::protobuf::uint32 gamecoincount() const;
  void set_gamecoincount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameEndResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_score();
  void clear_has_score();
  void set_has_achievement();
  void clear_has_achievement();
  void set_has_rank();
  void clear_has_rank();
  void set_has_lifenum();
  void clear_has_lifenum();
  void set_has_checklefttime();
  void clear_has_checklefttime();
  void set_has_count();
  void clear_has_count();
  void set_has_propsviewtip();
  void clear_has_propsviewtip();
  void set_has_rankviewtip();
  void clear_has_rankviewtip();
  void set_has_gamecoincount();
  void clear_has_gamecoincount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameAchieveInfo > ranklist_;
  ::google::protobuf::internal::ArenaStringPtr achievement_;
  ::google::protobuf::internal::ArenaStringPtr propsviewtip_;
  ::google::protobuf::internal::ArenaStringPtr rankviewtip_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 lifenum_;
  ::google::protobuf::uint32 checklefttime_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::uint32 gamecoincount_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameRankListReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameRankListReq) */ {
 public:
  GameRankListReq();
  virtual ~GameRankListReq();

  GameRankListReq(const GameRankListReq& from);

  inline GameRankListReq& operator=(const GameRankListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameRankListReq& default_instance();

  static inline const GameRankListReq* internal_default_instance() {
    return reinterpret_cast<const GameRankListReq*>(
               &_GameRankListReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(GameRankListReq* other);

  // implements Message ----------------------------------------------

  inline GameRankListReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GameRankListReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameRankListReq& from);
  void MergeFrom(const GameRankListReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameRankListReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AppID = 2;
  bool has_appid() const;
  void clear_appid();
  static const int kAppIDFieldNumber = 2;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.GameRankListReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_appid();
  void clear_has_appid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameRankListResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameRankListResp) */ {
 public:
  GameRankListResp();
  virtual ~GameRankListResp();

  GameRankListResp(const GameRankListResp& from);

  inline GameRankListResp& operator=(const GameRankListResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameRankListResp& default_instance();

  static inline const GameRankListResp* internal_default_instance() {
    return reinterpret_cast<const GameRankListResp*>(
               &_GameRankListResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(GameRankListResp* other);

  // implements Message ----------------------------------------------

  inline GameRankListResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GameRankListResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameRankListResp& from);
  void MergeFrom(const GameRankListResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameRankListResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.UserGameAchieveInfo RankList = 3;
  int ranklist_size() const;
  void clear_ranklist();
  static const int kRankListFieldNumber = 3;
  const ::micromsg::UserGameAchieveInfo& ranklist(int index) const;
  ::micromsg::UserGameAchieveInfo* mutable_ranklist(int index);
  ::micromsg::UserGameAchieveInfo* add_ranklist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameAchieveInfo >*
      mutable_ranklist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameAchieveInfo >&
      ranklist() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required int32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameRankListResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameAchieveInfo > ranklist_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::int32 count_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameStartReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameStartReq) */ {
 public:
  GameStartReq();
  virtual ~GameStartReq();

  GameStartReq(const GameStartReq& from);

  inline GameStartReq& operator=(const GameStartReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameStartReq& default_instance();

  static inline const GameStartReq* internal_default_instance() {
    return reinterpret_cast<const GameStartReq*>(
               &_GameStartReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(GameStartReq* other);

  // implements Message ----------------------------------------------

  inline GameStartReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GameStartReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameStartReq& from);
  void MergeFrom(const GameStartReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameStartReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.GameConsumeProps GameConsumePropsList = 7;
  int gameconsumepropslist_size() const;
  void clear_gameconsumepropslist();
  static const int kGameConsumePropsListFieldNumber = 7;
  const ::micromsg::GameConsumeProps& gameconsumepropslist(int index) const;
  ::micromsg::GameConsumeProps* mutable_gameconsumepropslist(int index);
  ::micromsg::GameConsumeProps* add_gameconsumepropslist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::GameConsumeProps >*
      mutable_gameconsumepropslist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::GameConsumeProps >&
      gameconsumepropslist() const;

  // optional string AppID = 2;
  bool has_appid() const;
  void clear_appid();
  static const int kAppIDFieldNumber = 2;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // optional string Token = 4;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 4;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 LocalLifeNum = 3;
  bool has_locallifenum() const;
  void clear_locallifenum();
  static const int kLocalLifeNumFieldNumber = 3;
  ::google::protobuf::uint32 locallifenum() const;
  void set_locallifenum(::google::protobuf::uint32 value);

  // required uint32 NeedClearWishList = 5;
  bool has_needclearwishlist() const;
  void clear_needclearwishlist();
  static const int kNeedClearWishListFieldNumber = 5;
  ::google::protobuf::uint32 needclearwishlist() const;
  void set_needclearwishlist(::google::protobuf::uint32 value);

  // optional int32 GameConsumePropsCount = 6;
  bool has_gameconsumepropscount() const;
  void clear_gameconsumepropscount();
  static const int kGameConsumePropsCountFieldNumber = 6;
  ::google::protobuf::int32 gameconsumepropscount() const;
  void set_gameconsumepropscount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameStartReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_appid();
  void clear_has_appid();
  void set_has_locallifenum();
  void clear_has_locallifenum();
  void set_has_token();
  void clear_has_token();
  void set_has_needclearwishlist();
  void clear_has_needclearwishlist();
  void set_has_gameconsumepropscount();
  void clear_has_gameconsumepropscount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::GameConsumeProps > gameconsumepropslist_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 locallifenum_;
  ::google::protobuf::uint32 needclearwishlist_;
  ::google::protobuf::int32 gameconsumepropscount_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameStartResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameStartResp) */ {
 public:
  GameStartResp();
  virtual ~GameStartResp();

  GameStartResp(const GameStartResp& from);

  inline GameStartResp& operator=(const GameStartResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameStartResp& default_instance();

  static inline const GameStartResp* internal_default_instance() {
    return reinterpret_cast<const GameStartResp*>(
               &_GameStartResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(GameStartResp* other);

  // implements Message ----------------------------------------------

  inline GameStartResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GameStartResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameStartResp& from);
  void MergeFrom(const GameStartResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameStartResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.UserGameAchieveInfo RankList = 6;
  int ranklist_size() const;
  void clear_ranklist();
  static const int kRankListFieldNumber = 6;
  const ::micromsg::UserGameAchieveInfo& ranklist(int index) const;
  ::micromsg::UserGameAchieveInfo* mutable_ranklist(int index);
  ::micromsg::UserGameAchieveInfo* add_ranklist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameAchieveInfo >*
      mutable_ranklist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameAchieveInfo >&
      ranklist() const;

  // repeated .micromsg.GameUserPropsInfo GamePropsList = 8;
  int gamepropslist_size() const;
  void clear_gamepropslist();
  static const int kGamePropsListFieldNumber = 8;
  const ::micromsg::GameUserPropsInfo& gamepropslist(int index) const;
  ::micromsg::GameUserPropsInfo* mutable_gamepropslist(int index);
  ::micromsg::GameUserPropsInfo* add_gamepropslist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::GameUserPropsInfo >*
      mutable_gamepropslist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::GameUserPropsInfo >&
      gamepropslist() const;

  // optional string Token = 4;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 4;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 LifeNum = 2;
  bool has_lifenum() const;
  void clear_lifenum();
  static const int kLifeNumFieldNumber = 2;
  ::google::protobuf::uint32 lifenum() const;
  void set_lifenum(::google::protobuf::uint32 value);

  // required uint32 CheckLeftTime = 3;
  bool has_checklefttime() const;
  void clear_checklefttime();
  static const int kCheckLeftTimeFieldNumber = 3;
  ::google::protobuf::uint32 checklefttime() const;
  void set_checklefttime(::google::protobuf::uint32 value);

  // required int32 Count = 5;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 5;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // optional int32 GamePropsCount = 7;
  bool has_gamepropscount() const;
  void clear_gamepropscount();
  static const int kGamePropsCountFieldNumber = 7;
  ::google::protobuf::int32 gamepropscount() const;
  void set_gamepropscount(::google::protobuf::int32 value);

  // optional uint32 GameCoinCount = 9;
  bool has_gamecoincount() const;
  void clear_gamecoincount();
  static const int kGameCoinCountFieldNumber = 9;
  ::google::protobuf::uint32 gamecoincount() const;
  void set_gamecoincount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameStartResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_lifenum();
  void clear_has_lifenum();
  void set_has_checklefttime();
  void clear_has_checklefttime();
  void set_has_token();
  void clear_has_token();
  void set_has_count();
  void clear_has_count();
  void set_has_gamepropscount();
  void clear_has_gamepropscount();
  void set_has_gamecoincount();
  void clear_has_gamecoincount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameAchieveInfo > ranklist_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::GameUserPropsInfo > gamepropslist_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 lifenum_;
  ::google::protobuf::uint32 checklefttime_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 gamepropscount_;
  ::google::protobuf::uint32 gamecoincount_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameCheckReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameCheckReq) */ {
 public:
  GameCheckReq();
  virtual ~GameCheckReq();

  GameCheckReq(const GameCheckReq& from);

  inline GameCheckReq& operator=(const GameCheckReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameCheckReq& default_instance();

  static inline const GameCheckReq* internal_default_instance() {
    return reinterpret_cast<const GameCheckReq*>(
               &_GameCheckReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(GameCheckReq* other);

  // implements Message ----------------------------------------------

  inline GameCheckReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GameCheckReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameCheckReq& from);
  void MergeFrom(const GameCheckReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameCheckReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AppID = 2;
  bool has_appid() const;
  void clear_appid();
  static const int kAppIDFieldNumber = 2;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // optional string Token = 4;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 4;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 LocalLifeNum = 3;
  bool has_locallifenum() const;
  void clear_locallifenum();
  static const int kLocalLifeNumFieldNumber = 3;
  ::google::protobuf::uint32 locallifenum() const;
  void set_locallifenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameCheckReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_appid();
  void clear_has_appid();
  void set_has_locallifenum();
  void clear_has_locallifenum();
  void set_has_token();
  void clear_has_token();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 locallifenum_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameCheckResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameCheckResp) */ {
 public:
  GameCheckResp();
  virtual ~GameCheckResp();

  GameCheckResp(const GameCheckResp& from);

  inline GameCheckResp& operator=(const GameCheckResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameCheckResp& default_instance();

  static inline const GameCheckResp* internal_default_instance() {
    return reinterpret_cast<const GameCheckResp*>(
               &_GameCheckResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(GameCheckResp* other);

  // implements Message ----------------------------------------------

  inline GameCheckResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GameCheckResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameCheckResp& from);
  void MergeFrom(const GameCheckResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameCheckResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 CheckLeftTime = 2;
  bool has_checklefttime() const;
  void clear_checklefttime();
  static const int kCheckLeftTimeFieldNumber = 2;
  ::google::protobuf::uint32 checklefttime() const;
  void set_checklefttime(::google::protobuf::uint32 value);

  // required uint32 LifeNum = 3;
  bool has_lifenum() const;
  void clear_lifenum();
  static const int kLifeNumFieldNumber = 3;
  ::google::protobuf::uint32 lifenum() const;
  void set_lifenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameCheckResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_checklefttime();
  void clear_has_checklefttime();
  void set_has_lifenum();
  void clear_has_lifenum();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 checklefttime_;
  ::google::protobuf::uint32 lifenum_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameWishReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameWishReq) */ {
 public:
  GameWishReq();
  virtual ~GameWishReq();

  GameWishReq(const GameWishReq& from);

  inline GameWishReq& operator=(const GameWishReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameWishReq& default_instance();

  static inline const GameWishReq* internal_default_instance() {
    return reinterpret_cast<const GameWishReq*>(
               &_GameWishReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(GameWishReq* other);

  // implements Message ----------------------------------------------

  inline GameWishReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GameWishReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameWishReq& from);
  void MergeFrom(const GameWishReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameWishReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.SKBuiltinString_t UserNameList = 4;
  int usernamelist_size() const;
  void clear_usernamelist();
  static const int kUserNameListFieldNumber = 4;
  const ::micromsg::SKBuiltinString_t& usernamelist(int index) const;
  ::micromsg::SKBuiltinString_t* mutable_usernamelist(int index);
  ::micromsg::SKBuiltinString_t* add_usernamelist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
      mutable_usernamelist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
      usernamelist() const;

  // optional string AppID = 2;
  bool has_appid() const;
  void clear_appid();
  static const int kAppIDFieldNumber = 2;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required int32 Count = 3;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameWishReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_appid();
  void clear_has_appid();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t > usernamelist_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::int32 count_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameWishResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameWishResp) */ {
 public:
  GameWishResp();
  virtual ~GameWishResp();

  GameWishResp(const GameWishResp& from);

  inline GameWishResp& operator=(const GameWishResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameWishResp& default_instance();

  static inline const GameWishResp* internal_default_instance() {
    return reinterpret_cast<const GameWishResp*>(
               &_GameWishResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(GameWishResp* other);

  // implements Message ----------------------------------------------

  inline GameWishResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GameWishResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameWishResp& from);
  void MergeFrom(const GameWishResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameWishResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.GameWishResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameGiftReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameGiftReq) */ {
 public:
  GameGiftReq();
  virtual ~GameGiftReq();

  GameGiftReq(const GameGiftReq& from);

  inline GameGiftReq& operator=(const GameGiftReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameGiftReq& default_instance();

  static inline const GameGiftReq* internal_default_instance() {
    return reinterpret_cast<const GameGiftReq*>(
               &_GameGiftReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(GameGiftReq* other);

  // implements Message ----------------------------------------------

  inline GameGiftReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GameGiftReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameGiftReq& from);
  void MergeFrom(const GameGiftReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameGiftReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.SKBuiltinString_t UserNameList = 5;
  int usernamelist_size() const;
  void clear_usernamelist();
  static const int kUserNameListFieldNumber = 5;
  const ::micromsg::SKBuiltinString_t& usernamelist(int index) const;
  ::micromsg::SKBuiltinString_t* mutable_usernamelist(int index);
  ::micromsg::SKBuiltinString_t* add_usernamelist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
      mutable_usernamelist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
      usernamelist() const;

  // optional string AppID = 2;
  bool has_appid() const;
  void clear_appid();
  static const int kAppIDFieldNumber = 2;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 LocalLifeNum = 3;
  bool has_locallifenum() const;
  void clear_locallifenum();
  static const int kLocalLifeNumFieldNumber = 3;
  ::google::protobuf::uint32 locallifenum() const;
  void set_locallifenum(::google::protobuf::uint32 value);

  // required int32 Count = 4;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 4;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameGiftReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_appid();
  void clear_has_appid();
  void set_has_locallifenum();
  void clear_has_locallifenum();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t > usernamelist_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 locallifenum_;
  ::google::protobuf::int32 count_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameGiftResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameGiftResp) */ {
 public:
  GameGiftResp();
  virtual ~GameGiftResp();

  GameGiftResp(const GameGiftResp& from);

  inline GameGiftResp& operator=(const GameGiftResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameGiftResp& default_instance();

  static inline const GameGiftResp* internal_default_instance() {
    return reinterpret_cast<const GameGiftResp*>(
               &_GameGiftResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(GameGiftResp* other);

  // implements Message ----------------------------------------------

  inline GameGiftResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GameGiftResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameGiftResp& from);
  void MergeFrom(const GameGiftResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameGiftResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 LifeNum = 2;
  bool has_lifenum() const;
  void clear_lifenum();
  static const int kLifeNumFieldNumber = 2;
  ::google::protobuf::uint32 lifenum() const;
  void set_lifenum(::google::protobuf::uint32 value);

  // required uint32 CheckLeftTime = 3;
  bool has_checklefttime() const;
  void clear_checklefttime();
  static const int kCheckLeftTimeFieldNumber = 3;
  ::google::protobuf::uint32 checklefttime() const;
  void set_checklefttime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameGiftResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_lifenum();
  void clear_has_lifenum();
  void set_has_checklefttime();
  void clear_has_checklefttime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 lifenum_;
  ::google::protobuf::uint32 checklefttime_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameFriendListReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameFriendListReq) */ {
 public:
  GameFriendListReq();
  virtual ~GameFriendListReq();

  GameFriendListReq(const GameFriendListReq& from);

  inline GameFriendListReq& operator=(const GameFriendListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameFriendListReq& default_instance();

  static inline const GameFriendListReq* internal_default_instance() {
    return reinterpret_cast<const GameFriendListReq*>(
               &_GameFriendListReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(GameFriendListReq* other);

  // implements Message ----------------------------------------------

  inline GameFriendListReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GameFriendListReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameFriendListReq& from);
  void MergeFrom(const GameFriendListReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameFriendListReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AppID = 2;
  bool has_appid() const;
  void clear_appid();
  static const int kAppIDFieldNumber = 2;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.GameFriendListReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_appid();
  void clear_has_appid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameFriendListResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameFriendListResp) */ {
 public:
  GameFriendListResp();
  virtual ~GameFriendListResp();

  GameFriendListResp(const GameFriendListResp& from);

  inline GameFriendListResp& operator=(const GameFriendListResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameFriendListResp& default_instance();

  static inline const GameFriendListResp* internal_default_instance() {
    return reinterpret_cast<const GameFriendListResp*>(
               &_GameFriendListResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(GameFriendListResp* other);

  // implements Message ----------------------------------------------

  inline GameFriendListResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GameFriendListResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameFriendListResp& from);
  void MergeFrom(const GameFriendListResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameFriendListResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.UserGameInfo FriendList = 3;
  int friendlist_size() const;
  void clear_friendlist();
  static const int kFriendListFieldNumber = 3;
  const ::micromsg::UserGameInfo& friendlist(int index) const;
  ::micromsg::UserGameInfo* mutable_friendlist(int index);
  ::micromsg::UserGameInfo* add_friendlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameInfo >*
      mutable_friendlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameInfo >&
      friendlist() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required int32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameFriendListResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameInfo > friendlist_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::int32 count_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameWishListReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameWishListReq) */ {
 public:
  GameWishListReq();
  virtual ~GameWishListReq();

  GameWishListReq(const GameWishListReq& from);

  inline GameWishListReq& operator=(const GameWishListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameWishListReq& default_instance();

  static inline const GameWishListReq* internal_default_instance() {
    return reinterpret_cast<const GameWishListReq*>(
               &_GameWishListReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(GameWishListReq* other);

  // implements Message ----------------------------------------------

  inline GameWishListReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GameWishListReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameWishListReq& from);
  void MergeFrom(const GameWishListReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameWishListReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AppID = 2;
  bool has_appid() const;
  void clear_appid();
  static const int kAppIDFieldNumber = 2;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.GameWishListReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_appid();
  void clear_has_appid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameWishListResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameWishListResp) */ {
 public:
  GameWishListResp();
  virtual ~GameWishListResp();

  GameWishListResp(const GameWishListResp& from);

  inline GameWishListResp& operator=(const GameWishListResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameWishListResp& default_instance();

  static inline const GameWishListResp* internal_default_instance() {
    return reinterpret_cast<const GameWishListResp*>(
               &_GameWishListResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(GameWishListResp* other);

  // implements Message ----------------------------------------------

  inline GameWishListResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GameWishListResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameWishListResp& from);
  void MergeFrom(const GameWishListResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameWishListResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.UserGameWishInfo WishList = 3;
  int wishlist_size() const;
  void clear_wishlist();
  static const int kWishListFieldNumber = 3;
  const ::micromsg::UserGameWishInfo& wishlist(int index) const;
  ::micromsg::UserGameWishInfo* mutable_wishlist(int index);
  ::micromsg::UserGameWishInfo* add_wishlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameWishInfo >*
      mutable_wishlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameWishInfo >&
      wishlist() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required int32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameWishListResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameWishInfo > wishlist_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::int32 count_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameShareReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameShareReq) */ {
 public:
  GameShareReq();
  virtual ~GameShareReq();

  GameShareReq(const GameShareReq& from);

  inline GameShareReq& operator=(const GameShareReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameShareReq& default_instance();

  static inline const GameShareReq* internal_default_instance() {
    return reinterpret_cast<const GameShareReq*>(
               &_GameShareReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(GameShareReq* other);

  // implements Message ----------------------------------------------

  inline GameShareReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GameShareReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameShareReq& from);
  void MergeFrom(const GameShareReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameShareReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AppID = 2;
  bool has_appid() const;
  void clear_appid();
  static const int kAppIDFieldNumber = 2;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // optional string Achieve = 5;
  bool has_achieve() const;
  void clear_achieve();
  static const int kAchieveFieldNumber = 5;
  const ::std::string& achieve() const;
  void set_achieve(const ::std::string& value);
  #if LANG_CXX11
  void set_achieve(::std::string&& value);
  #endif
  void set_achieve(const char* value);
  void set_achieve(const char* value, size_t size);
  ::std::string* mutable_achieve();
  ::std::string* release_achieve();
  void set_allocated_achieve(::std::string* achieve);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 Type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // required uint32 Score = 4;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 4;
  ::google::protobuf::uint32 score() const;
  void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameShareReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_appid();
  void clear_has_appid();
  void set_has_type();
  void clear_has_type();
  void set_has_score();
  void clear_has_score();
  void set_has_achieve();
  void clear_has_achieve();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::google::protobuf::internal::ArenaStringPtr achieve_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 score_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameShareResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameShareResp) */ {
 public:
  GameShareResp();
  virtual ~GameShareResp();

  GameShareResp(const GameShareResp& from);

  inline GameShareResp& operator=(const GameShareResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameShareResp& default_instance();

  static inline const GameShareResp* internal_default_instance() {
    return reinterpret_cast<const GameShareResp*>(
               &_GameShareResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(GameShareResp* other);

  // implements Message ----------------------------------------------

  inline GameShareResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GameShareResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameShareResp& from);
  void MergeFrom(const GameShareResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameShareResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.GameShareResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameResourceReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameResourceReq) */ {
 public:
  GameResourceReq();
  virtual ~GameResourceReq();

  GameResourceReq(const GameResourceReq& from);

  inline GameResourceReq& operator=(const GameResourceReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameResourceReq& default_instance();

  static inline const GameResourceReq* internal_default_instance() {
    return reinterpret_cast<const GameResourceReq*>(
               &_GameResourceReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(GameResourceReq* other);

  // implements Message ----------------------------------------------

  inline GameResourceReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GameResourceReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameResourceReq& from);
  void MergeFrom(const GameResourceReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameResourceReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 PropsIdList = 3 [packed = true];
  int propsidlist_size() const;
  void clear_propsidlist();
  static const int kPropsIdListFieldNumber = 3;
  ::google::protobuf::uint32 propsidlist(int index) const;
  void set_propsidlist(int index, ::google::protobuf::uint32 value);
  void add_propsidlist(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      propsidlist() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_propsidlist();

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required int32 PropsCount = 2;
  bool has_propscount() const;
  void clear_propscount();
  static const int kPropsCountFieldNumber = 2;
  ::google::protobuf::int32 propscount() const;
  void set_propscount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameResourceReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_propscount();
  void clear_has_propscount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > propsidlist_;
  mutable int _propsidlist_cached_byte_size_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::int32 propscount_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameResourceResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameResourceResp) */ {
 public:
  GameResourceResp();
  virtual ~GameResourceResp();

  GameResourceResp(const GameResourceResp& from);

  inline GameResourceResp& operator=(const GameResourceResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameResourceResp& default_instance();

  static inline const GameResourceResp* internal_default_instance() {
    return reinterpret_cast<const GameResourceResp*>(
               &_GameResourceResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(GameResourceResp* other);

  // implements Message ----------------------------------------------

  inline GameResourceResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GameResourceResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameResourceResp& from);
  void MergeFrom(const GameResourceResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameResourceResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.GamePropsInfo PropsList = 3;
  int propslist_size() const;
  void clear_propslist();
  static const int kPropsListFieldNumber = 3;
  const ::micromsg::GamePropsInfo& propslist(int index) const;
  ::micromsg::GamePropsInfo* mutable_propslist(int index);
  ::micromsg::GamePropsInfo* add_propslist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::GamePropsInfo >*
      mutable_propslist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::GamePropsInfo >&
      propslist() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required int32 PropsCount = 2;
  bool has_propscount() const;
  void clear_propscount();
  static const int kPropsCountFieldNumber = 2;
  ::google::protobuf::int32 propscount() const;
  void set_propscount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameResourceResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_propscount();
  void clear_has_propscount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::GamePropsInfo > propslist_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::int32 propscount_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameConsumeReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameConsumeReq) */ {
 public:
  GameConsumeReq();
  virtual ~GameConsumeReq();

  GameConsumeReq(const GameConsumeReq& from);

  inline GameConsumeReq& operator=(const GameConsumeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameConsumeReq& default_instance();

  static inline const GameConsumeReq* internal_default_instance() {
    return reinterpret_cast<const GameConsumeReq*>(
               &_GameConsumeReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(GameConsumeReq* other);

  // implements Message ----------------------------------------------

  inline GameConsumeReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GameConsumeReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameConsumeReq& from);
  void MergeFrom(const GameConsumeReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameConsumeReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AppID = 2;
  bool has_appid() const;
  void clear_appid();
  static const int kAppIDFieldNumber = 2;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.GameConsumeReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_appid();
  void clear_has_appid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameConsumeResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameConsumeResp) */ {
 public:
  GameConsumeResp();
  virtual ~GameConsumeResp();

  GameConsumeResp(const GameConsumeResp& from);

  inline GameConsumeResp& operator=(const GameConsumeResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameConsumeResp& default_instance();

  static inline const GameConsumeResp* internal_default_instance() {
    return reinterpret_cast<const GameConsumeResp*>(
               &_GameConsumeResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(GameConsumeResp* other);

  // implements Message ----------------------------------------------

  inline GameConsumeResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GameConsumeResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameConsumeResp& from);
  void MergeFrom(const GameConsumeResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameConsumeResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 ConsumeOk = 2;
  bool has_consumeok() const;
  void clear_consumeok();
  static const int kConsumeOkFieldNumber = 2;
  ::google::protobuf::uint32 consumeok() const;
  void set_consumeok(::google::protobuf::uint32 value);

  // required uint32 GameCoinCount = 3;
  bool has_gamecoincount() const;
  void clear_gamecoincount();
  static const int kGameCoinCountFieldNumber = 3;
  ::google::protobuf::uint32 gamecoincount() const;
  void set_gamecoincount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameConsumeResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_consumeok();
  void clear_has_consumeok();
  void set_has_gamecoincount();
  void clear_has_gamecoincount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 consumeok_;
  ::google::protobuf::uint32 gamecoincount_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddGameMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.AddGameMsg) */ {
 public:
  AddGameMsg();
  virtual ~AddGameMsg();

  AddGameMsg(const AddGameMsg& from);

  inline AddGameMsg& operator=(const AddGameMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddGameMsg& default_instance();

  static inline const AddGameMsg* internal_default_instance() {
    return reinterpret_cast<const AddGameMsg*>(
               &_AddGameMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(AddGameMsg* other);

  // implements Message ----------------------------------------------

  inline AddGameMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  AddGameMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddGameMsg& from);
  void MergeFrom(const AddGameMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddGameMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string FromUserName = 2;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUserNameFieldNumber = 2;
  const ::std::string& fromusername() const;
  void set_fromusername(const ::std::string& value);
  #if LANG_CXX11
  void set_fromusername(::std::string&& value);
  #endif
  void set_fromusername(const char* value);
  void set_fromusername(const char* value, size_t size);
  ::std::string* mutable_fromusername();
  ::std::string* release_fromusername();
  void set_allocated_fromusername(::std::string* fromusername);

  // optional string ToUserName = 3;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 3;
  const ::std::string& tousername() const;
  void set_tousername(const ::std::string& value);
  #if LANG_CXX11
  void set_tousername(::std::string&& value);
  #endif
  void set_tousername(const char* value);
  void set_tousername(const char* value, size_t size);
  ::std::string* mutable_tousername();
  ::std::string* release_tousername();
  void set_allocated_tousername(::std::string* tousername);

  // required int32 MsgId = 1;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 1;
  ::google::protobuf::int32 msgid() const;
  void set_msgid(::google::protobuf::int32 value);

  // required int32 Type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required uint32 Flag = 5;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 5;
  ::google::protobuf::uint32 flag() const;
  void set_flag(::google::protobuf::uint32 value);

  // required uint32 Status = 6;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // required uint32 UpdateTime = 7;
  bool has_updatetime() const;
  void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 7;
  ::google::protobuf::uint32 updatetime() const;
  void set_updatetime(::google::protobuf::uint32 value);

  // required uint32 UpdateSeq = 8;
  bool has_updateseq() const;
  void clear_updateseq();
  static const int kUpdateSeqFieldNumber = 8;
  ::google::protobuf::uint32 updateseq() const;
  void set_updateseq(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.AddGameMsg)
 private:
  void set_has_msgid();
  void clear_has_msgid();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_type();
  void clear_has_type();
  void set_has_flag();
  void clear_has_flag();
  void set_has_status();
  void clear_has_status();
  void set_has_updatetime();
  void clear_has_updatetime();
  void set_has_updateseq();
  void clear_has_updateseq();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fromusername_;
  ::google::protobuf::internal::ArenaStringPtr tousername_;
  ::google::protobuf::int32 msgid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::uint32 flag_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 updatetime_;
  ::google::protobuf::uint32 updateseq_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameSyncRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameSyncRequest) */ {
 public:
  GameSyncRequest();
  virtual ~GameSyncRequest();

  GameSyncRequest(const GameSyncRequest& from);

  inline GameSyncRequest& operator=(const GameSyncRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameSyncRequest& default_instance();

  static inline const GameSyncRequest* internal_default_instance() {
    return reinterpret_cast<const GameSyncRequest*>(
               &_GameSyncRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(GameSyncRequest* other);

  // implements Message ----------------------------------------------

  inline GameSyncRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GameSyncRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameSyncRequest& from);
  void MergeFrom(const GameSyncRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameSyncRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
  bool has_keybuf() const;
  void clear_keybuf();
  static const int kKeyBufFieldNumber = 3;
  const ::micromsg::SKBuiltinBuffer_t& keybuf() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_keybuf();
  ::micromsg::SKBuiltinBuffer_t* release_keybuf();
  void set_allocated_keybuf(::micromsg::SKBuiltinBuffer_t* keybuf);

  // required uint32 Selector = 2;
  bool has_selector() const;
  void clear_selector();
  static const int kSelectorFieldNumber = 2;
  ::google::protobuf::uint32 selector() const;
  void set_selector(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameSyncRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_selector();
  void clear_has_selector();
  void set_has_keybuf();
  void clear_has_keybuf();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::SKBuiltinBuffer_t* keybuf_;
  ::google::protobuf::uint32 selector_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameSyncResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameSyncResponse) */ {
 public:
  GameSyncResponse();
  virtual ~GameSyncResponse();

  GameSyncResponse(const GameSyncResponse& from);

  inline GameSyncResponse& operator=(const GameSyncResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameSyncResponse& default_instance();

  static inline const GameSyncResponse* internal_default_instance() {
    return reinterpret_cast<const GameSyncResponse*>(
               &_GameSyncResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(GameSyncResponse* other);

  // implements Message ----------------------------------------------

  inline GameSyncResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GameSyncResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameSyncResponse& from);
  void MergeFrom(const GameSyncResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameSyncResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required .micromsg.CmdList CmdList = 2;
  bool has_cmdlist() const;
  void clear_cmdlist();
  static const int kCmdListFieldNumber = 2;
  const ::micromsg::CmdList& cmdlist() const;
  ::micromsg::CmdList* mutable_cmdlist();
  ::micromsg::CmdList* release_cmdlist();
  void set_allocated_cmdlist(::micromsg::CmdList* cmdlist);

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
  bool has_keybuf() const;
  void clear_keybuf();
  static const int kKeyBufFieldNumber = 3;
  const ::micromsg::SKBuiltinBuffer_t& keybuf() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_keybuf();
  ::micromsg::SKBuiltinBuffer_t* release_keybuf();
  void set_allocated_keybuf(::micromsg::SKBuiltinBuffer_t* keybuf);

  // required uint32 ContinueFlag = 4;
  bool has_continueflag() const;
  void clear_continueflag();
  static const int kContinueFlagFieldNumber = 4;
  ::google::protobuf::uint32 continueflag() const;
  void set_continueflag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameSyncResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_cmdlist();
  void clear_has_cmdlist();
  void set_has_keybuf();
  void clear_has_keybuf();
  void set_has_continueflag();
  void clear_has_continueflag();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  ::micromsg::CmdList* cmdlist_;
  ::micromsg::SKBuiltinBuffer_t* keybuf_;
  ::google::protobuf::uint32 continueflag_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GameMsg) */ {
 public:
  GameMsg();
  virtual ~GameMsg();

  GameMsg(const GameMsg& from);

  inline GameMsg& operator=(const GameMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameMsg& default_instance();

  static inline const GameMsg* internal_default_instance() {
    return reinterpret_cast<const GameMsg*>(
               &_GameMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(GameMsg* other);

  // implements Message ----------------------------------------------

  inline GameMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  GameMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameMsg& from);
  void MergeFrom(const GameMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Object = 3;
  bool has_object() const;
  void clear_object();
  static const int kObjectFieldNumber = 3;
  const ::std::string& object() const;
  void set_object(const ::std::string& value);
  #if LANG_CXX11
  void set_object(::std::string&& value);
  #endif
  void set_object(const char* value);
  void set_object(const char* value, size_t size);
  ::std::string* mutable_object();
  ::std::string* release_object();
  void set_allocated_object(::std::string* object);

  // required uint32 MsgId = 1;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 1;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // required uint32 Status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // required uint32 UpdateTime = 4;
  bool has_updatetime() const;
  void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 4;
  ::google::protobuf::uint32 updatetime() const;
  void set_updatetime(::google::protobuf::uint32 value);

  // required uint32 UpdateSeq = 5;
  bool has_updateseq() const;
  void clear_updateseq();
  static const int kUpdateSeqFieldNumber = 5;
  ::google::protobuf::uint32 updateseq() const;
  void set_updateseq(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GameMsg)
 private:
  void set_has_msgid();
  void clear_has_msgid();
  void set_has_status();
  void clear_has_status();
  void set_has_object();
  void clear_has_object();
  void set_has_updatetime();
  void clear_has_updatetime();
  void set_has_updateseq();
  void clear_has_updateseq();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr object_;
  ::google::protobuf::uint32 msgid_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 updatetime_;
  ::google::protobuf::uint32 updateseq_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatchGetGameMsgRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BatchGetGameMsgRequest) */ {
 public:
  BatchGetGameMsgRequest();
  virtual ~BatchGetGameMsgRequest();

  BatchGetGameMsgRequest(const BatchGetGameMsgRequest& from);

  inline BatchGetGameMsgRequest& operator=(const BatchGetGameMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchGetGameMsgRequest& default_instance();

  static inline const BatchGetGameMsgRequest* internal_default_instance() {
    return reinterpret_cast<const BatchGetGameMsgRequest*>(
               &_BatchGetGameMsgRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(BatchGetGameMsgRequest* other);

  // implements Message ----------------------------------------------

  inline BatchGetGameMsgRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchGetGameMsgRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchGetGameMsgRequest& from);
  void MergeFrom(const BatchGetGameMsgRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchGetGameMsgRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 MsgIdList = 3 [packed = true];
  int msgidlist_size() const;
  void clear_msgidlist();
  static const int kMsgIdListFieldNumber = 3;
  ::google::protobuf::uint32 msgidlist(int index) const;
  void set_msgidlist(int index, ::google::protobuf::uint32 value);
  void add_msgidlist(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      msgidlist() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_msgidlist();

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.BatchGetGameMsgRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > msgidlist_;
  mutable int _msgidlist_cached_byte_size_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatchGetGameMsgResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BatchGetGameMsgResponse) */ {
 public:
  BatchGetGameMsgResponse();
  virtual ~BatchGetGameMsgResponse();

  BatchGetGameMsgResponse(const BatchGetGameMsgResponse& from);

  inline BatchGetGameMsgResponse& operator=(const BatchGetGameMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchGetGameMsgResponse& default_instance();

  static inline const BatchGetGameMsgResponse* internal_default_instance() {
    return reinterpret_cast<const BatchGetGameMsgResponse*>(
               &_BatchGetGameMsgResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(BatchGetGameMsgResponse* other);

  // implements Message ----------------------------------------------

  inline BatchGetGameMsgResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchGetGameMsgResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchGetGameMsgResponse& from);
  void MergeFrom(const BatchGetGameMsgResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchGetGameMsgResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.GameMsg MsgList = 3;
  int msglist_size() const;
  void clear_msglist();
  static const int kMsgListFieldNumber = 3;
  const ::micromsg::GameMsg& msglist(int index) const;
  ::micromsg::GameMsg* mutable_msglist(int index);
  ::micromsg::GameMsg* add_msglist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::GameMsg >*
      mutable_msglist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::GameMsg >&
      msglist() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.BatchGetGameMsgResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::GameMsg > msglist_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatchDelGameMsgRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BatchDelGameMsgRequest) */ {
 public:
  BatchDelGameMsgRequest();
  virtual ~BatchDelGameMsgRequest();

  BatchDelGameMsgRequest(const BatchDelGameMsgRequest& from);

  inline BatchDelGameMsgRequest& operator=(const BatchDelGameMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchDelGameMsgRequest& default_instance();

  static inline const BatchDelGameMsgRequest* internal_default_instance() {
    return reinterpret_cast<const BatchDelGameMsgRequest*>(
               &_BatchDelGameMsgRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(BatchDelGameMsgRequest* other);

  // implements Message ----------------------------------------------

  inline BatchDelGameMsgRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchDelGameMsgRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchDelGameMsgRequest& from);
  void MergeFrom(const BatchDelGameMsgRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchDelGameMsgRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 MsgIdList = 3 [packed = true];
  int msgidlist_size() const;
  void clear_msgidlist();
  static const int kMsgIdListFieldNumber = 3;
  ::google::protobuf::uint32 msgidlist(int index) const;
  void set_msgidlist(int index, ::google::protobuf::uint32 value);
  void add_msgidlist(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      msgidlist() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_msgidlist();

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.BatchDelGameMsgRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > msgidlist_;
  mutable int _msgidlist_cached_byte_size_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DelGameMsgRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.DelGameMsgRsp) */ {
 public:
  DelGameMsgRsp();
  virtual ~DelGameMsgRsp();

  DelGameMsgRsp(const DelGameMsgRsp& from);

  inline DelGameMsgRsp& operator=(const DelGameMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelGameMsgRsp& default_instance();

  static inline const DelGameMsgRsp* internal_default_instance() {
    return reinterpret_cast<const DelGameMsgRsp*>(
               &_DelGameMsgRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(DelGameMsgRsp* other);

  // implements Message ----------------------------------------------

  inline DelGameMsgRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DelGameMsgRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DelGameMsgRsp& from);
  void MergeFrom(const DelGameMsgRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DelGameMsgRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Ret = 1;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // required uint32 MsgId = 2;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 2;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.DelGameMsgRsp)
 private:
  void set_has_ret();
  void clear_has_ret();
  void set_has_msgid();
  void clear_has_msgid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint32 msgid_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatchDelGameMsgResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BatchDelGameMsgResponse) */ {
 public:
  BatchDelGameMsgResponse();
  virtual ~BatchDelGameMsgResponse();

  BatchDelGameMsgResponse(const BatchDelGameMsgResponse& from);

  inline BatchDelGameMsgResponse& operator=(const BatchDelGameMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchDelGameMsgResponse& default_instance();

  static inline const BatchDelGameMsgResponse* internal_default_instance() {
    return reinterpret_cast<const BatchDelGameMsgResponse*>(
               &_BatchDelGameMsgResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(BatchDelGameMsgResponse* other);

  // implements Message ----------------------------------------------

  inline BatchDelGameMsgResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchDelGameMsgResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchDelGameMsgResponse& from);
  void MergeFrom(const BatchDelGameMsgResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchDelGameMsgResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.DelGameMsgRsp List = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  const ::micromsg::DelGameMsgRsp& list(int index) const;
  ::micromsg::DelGameMsgRsp* mutable_list(int index);
  ::micromsg::DelGameMsgRsp* add_list();
  ::google::protobuf::RepeatedPtrField< ::micromsg::DelGameMsgRsp >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::DelGameMsgRsp >&
      list() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.BatchDelGameMsgResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::DelGameMsgRsp > list_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_mmgame_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// EnemyGameInfo

// required uint32 Type = 1;
inline bool EnemyGameInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnemyGameInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnemyGameInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnemyGameInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 EnemyGameInfo::type() const {
  // @@protoc_insertion_point(field_get:micromsg.EnemyGameInfo.Type)
  return type_;
}
inline void EnemyGameInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnemyGameInfo.Type)
}

// required uint32 Score = 2;
inline bool EnemyGameInfo::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnemyGameInfo::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnemyGameInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnemyGameInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 EnemyGameInfo::score() const {
  // @@protoc_insertion_point(field_get:micromsg.EnemyGameInfo.Score)
  return score_;
}
inline void EnemyGameInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnemyGameInfo.Score)
}

// -------------------------------------------------------------------

// EnemyGameKilled

// required uint32 Type = 1;
inline bool EnemyGameKilled::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnemyGameKilled::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnemyGameKilled::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnemyGameKilled::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 EnemyGameKilled::type() const {
  // @@protoc_insertion_point(field_get:micromsg.EnemyGameKilled.Type)
  return type_;
}
inline void EnemyGameKilled::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnemyGameKilled.Type)
}

// required uint32 Count = 2;
inline bool EnemyGameKilled::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnemyGameKilled::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnemyGameKilled::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnemyGameKilled::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 EnemyGameKilled::count() const {
  // @@protoc_insertion_point(field_get:micromsg.EnemyGameKilled.Count)
  return count_;
}
inline void EnemyGameKilled::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnemyGameKilled.Count)
}

// optional uint32 GeneralCount = 3;
inline bool EnemyGameKilled::has_generalcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnemyGameKilled::set_has_generalcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnemyGameKilled::clear_has_generalcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnemyGameKilled::clear_generalcount() {
  generalcount_ = 0u;
  clear_has_generalcount();
}
inline ::google::protobuf::uint32 EnemyGameKilled::generalcount() const {
  // @@protoc_insertion_point(field_get:micromsg.EnemyGameKilled.GeneralCount)
  return generalcount_;
}
inline void EnemyGameKilled::set_generalcount(::google::protobuf::uint32 value) {
  set_has_generalcount();
  generalcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnemyGameKilled.GeneralCount)
}

// optional uint32 UsedCount = 4;
inline bool EnemyGameKilled::has_usedcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnemyGameKilled::set_has_usedcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnemyGameKilled::clear_has_usedcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnemyGameKilled::clear_usedcount() {
  usedcount_ = 0u;
  clear_has_usedcount();
}
inline ::google::protobuf::uint32 EnemyGameKilled::usedcount() const {
  // @@protoc_insertion_point(field_get:micromsg.EnemyGameKilled.UsedCount)
  return usedcount_;
}
inline void EnemyGameKilled::set_usedcount(::google::protobuf::uint32 value) {
  set_has_usedcount();
  usedcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnemyGameKilled.UsedCount)
}

// -------------------------------------------------------------------

// UserGameInfo

// optional string UserName = 1;
inline bool UserGameInfo::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserGameInfo::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserGameInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserGameInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& UserGameInfo::username() const {
  // @@protoc_insertion_point(field_get:micromsg.UserGameInfo.UserName)
  return username_.GetNoArena();
}
inline void UserGameInfo::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserGameInfo.UserName)
}
#if LANG_CXX11
inline void UserGameInfo::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserGameInfo.UserName)
}
#endif
inline void UserGameInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserGameInfo.UserName)
}
inline void UserGameInfo::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserGameInfo.UserName)
}
inline ::std::string* UserGameInfo::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.UserGameInfo.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserGameInfo::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.UserGameInfo.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserGameInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserGameInfo.UserName)
}

// optional string NickName = 2;
inline bool UserGameInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserGameInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserGameInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserGameInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& UserGameInfo::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.UserGameInfo.NickName)
  return nickname_.GetNoArena();
}
inline void UserGameInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserGameInfo.NickName)
}
#if LANG_CXX11
inline void UserGameInfo::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserGameInfo.NickName)
}
#endif
inline void UserGameInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserGameInfo.NickName)
}
inline void UserGameInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserGameInfo.NickName)
}
inline ::std::string* UserGameInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.UserGameInfo.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserGameInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.UserGameInfo.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserGameInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserGameInfo.NickName)
}

// optional string HeadImageUrl = 3;
inline bool UserGameInfo::has_headimageurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserGameInfo::set_has_headimageurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserGameInfo::clear_has_headimageurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserGameInfo::clear_headimageurl() {
  headimageurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headimageurl();
}
inline const ::std::string& UserGameInfo::headimageurl() const {
  // @@protoc_insertion_point(field_get:micromsg.UserGameInfo.HeadImageUrl)
  return headimageurl_.GetNoArena();
}
inline void UserGameInfo::set_headimageurl(const ::std::string& value) {
  set_has_headimageurl();
  headimageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserGameInfo.HeadImageUrl)
}
#if LANG_CXX11
inline void UserGameInfo::set_headimageurl(::std::string&& value) {
  set_has_headimageurl();
  headimageurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserGameInfo.HeadImageUrl)
}
#endif
inline void UserGameInfo::set_headimageurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_headimageurl();
  headimageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserGameInfo.HeadImageUrl)
}
inline void UserGameInfo::set_headimageurl(const char* value, size_t size) {
  set_has_headimageurl();
  headimageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserGameInfo.HeadImageUrl)
}
inline ::std::string* UserGameInfo::mutable_headimageurl() {
  set_has_headimageurl();
  // @@protoc_insertion_point(field_mutable:micromsg.UserGameInfo.HeadImageUrl)
  return headimageurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserGameInfo::release_headimageurl() {
  // @@protoc_insertion_point(field_release:micromsg.UserGameInfo.HeadImageUrl)
  clear_has_headimageurl();
  return headimageurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserGameInfo::set_allocated_headimageurl(::std::string* headimageurl) {
  if (headimageurl != NULL) {
    set_has_headimageurl();
  } else {
    clear_has_headimageurl();
  }
  headimageurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headimageurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserGameInfo.HeadImageUrl)
}

// -------------------------------------------------------------------

// UserGameAchieveInfo

// required .micromsg.UserGameInfo UserInfo = 1;
inline bool UserGameAchieveInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserGameAchieveInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserGameAchieveInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserGameAchieveInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::micromsg::UserGameInfo::Clear();
  clear_has_userinfo();
}
inline const ::micromsg::UserGameInfo& UserGameAchieveInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.UserGameAchieveInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_
                         : *::micromsg::UserGameInfo::internal_default_instance();
}
inline ::micromsg::UserGameInfo* UserGameAchieveInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) {
    userinfo_ = new ::micromsg::UserGameInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UserGameAchieveInfo.UserInfo)
  return userinfo_;
}
inline ::micromsg::UserGameInfo* UserGameAchieveInfo::release_userinfo() {
  // @@protoc_insertion_point(field_release:micromsg.UserGameAchieveInfo.UserInfo)
  clear_has_userinfo();
  ::micromsg::UserGameInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void UserGameAchieveInfo::set_allocated_userinfo(::micromsg::UserGameInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserGameAchieveInfo.UserInfo)
}

// required uint32 Score = 2;
inline bool UserGameAchieveInfo::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserGameAchieveInfo::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserGameAchieveInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserGameAchieveInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 UserGameAchieveInfo::score() const {
  // @@protoc_insertion_point(field_get:micromsg.UserGameAchieveInfo.Score)
  return score_;
}
inline void UserGameAchieveInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UserGameAchieveInfo.Score)
}

// required uint32 Rank = 3;
inline bool UserGameAchieveInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserGameAchieveInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserGameAchieveInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserGameAchieveInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 UserGameAchieveInfo::rank() const {
  // @@protoc_insertion_point(field_get:micromsg.UserGameAchieveInfo.Rank)
  return rank_;
}
inline void UserGameAchieveInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UserGameAchieveInfo.Rank)
}

// -------------------------------------------------------------------

// UserGameWishInfo

// required .micromsg.UserGameInfo UserInfo = 1;
inline bool UserGameWishInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserGameWishInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserGameWishInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserGameWishInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::micromsg::UserGameInfo::Clear();
  clear_has_userinfo();
}
inline const ::micromsg::UserGameInfo& UserGameWishInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.UserGameWishInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_
                         : *::micromsg::UserGameInfo::internal_default_instance();
}
inline ::micromsg::UserGameInfo* UserGameWishInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) {
    userinfo_ = new ::micromsg::UserGameInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UserGameWishInfo.UserInfo)
  return userinfo_;
}
inline ::micromsg::UserGameInfo* UserGameWishInfo::release_userinfo() {
  // @@protoc_insertion_point(field_release:micromsg.UserGameWishInfo.UserInfo)
  clear_has_userinfo();
  ::micromsg::UserGameInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void UserGameWishInfo::set_allocated_userinfo(::micromsg::UserGameInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserGameWishInfo.UserInfo)
}

// -------------------------------------------------------------------

// GamePropsInfo

// required uint32 PropsId = 1;
inline bool GamePropsInfo::has_propsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GamePropsInfo::set_has_propsid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GamePropsInfo::clear_has_propsid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GamePropsInfo::clear_propsid() {
  propsid_ = 0u;
  clear_has_propsid();
}
inline ::google::protobuf::uint32 GamePropsInfo::propsid() const {
  // @@protoc_insertion_point(field_get:micromsg.GamePropsInfo.PropsId)
  return propsid_;
}
inline void GamePropsInfo::set_propsid(::google::protobuf::uint32 value) {
  set_has_propsid();
  propsid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GamePropsInfo.PropsId)
}

// optional string IconUrl = 2;
inline bool GamePropsInfo::has_iconurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GamePropsInfo::set_has_iconurl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GamePropsInfo::clear_has_iconurl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GamePropsInfo::clear_iconurl() {
  iconurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iconurl();
}
inline const ::std::string& GamePropsInfo::iconurl() const {
  // @@protoc_insertion_point(field_get:micromsg.GamePropsInfo.IconUrl)
  return iconurl_.GetNoArena();
}
inline void GamePropsInfo::set_iconurl(const ::std::string& value) {
  set_has_iconurl();
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GamePropsInfo.IconUrl)
}
#if LANG_CXX11
inline void GamePropsInfo::set_iconurl(::std::string&& value) {
  set_has_iconurl();
  iconurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GamePropsInfo.IconUrl)
}
#endif
inline void GamePropsInfo::set_iconurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_iconurl();
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GamePropsInfo.IconUrl)
}
inline void GamePropsInfo::set_iconurl(const char* value, size_t size) {
  set_has_iconurl();
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GamePropsInfo.IconUrl)
}
inline ::std::string* GamePropsInfo::mutable_iconurl() {
  set_has_iconurl();
  // @@protoc_insertion_point(field_mutable:micromsg.GamePropsInfo.IconUrl)
  return iconurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GamePropsInfo::release_iconurl() {
  // @@protoc_insertion_point(field_release:micromsg.GamePropsInfo.IconUrl)
  clear_has_iconurl();
  return iconurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GamePropsInfo::set_allocated_iconurl(::std::string* iconurl) {
  if (iconurl != NULL) {
    set_has_iconurl();
  } else {
    clear_has_iconurl();
  }
  iconurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iconurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GamePropsInfo.IconUrl)
}

// optional string Name = 3;
inline bool GamePropsInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GamePropsInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GamePropsInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GamePropsInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& GamePropsInfo::name() const {
  // @@protoc_insertion_point(field_get:micromsg.GamePropsInfo.Name)
  return name_.GetNoArena();
}
inline void GamePropsInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GamePropsInfo.Name)
}
#if LANG_CXX11
inline void GamePropsInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GamePropsInfo.Name)
}
#endif
inline void GamePropsInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GamePropsInfo.Name)
}
inline void GamePropsInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GamePropsInfo.Name)
}
inline ::std::string* GamePropsInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:micromsg.GamePropsInfo.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GamePropsInfo::release_name() {
  // @@protoc_insertion_point(field_release:micromsg.GamePropsInfo.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GamePropsInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GamePropsInfo.Name)
}

// optional string Desc = 4;
inline bool GamePropsInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GamePropsInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GamePropsInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GamePropsInfo::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
inline const ::std::string& GamePropsInfo::desc() const {
  // @@protoc_insertion_point(field_get:micromsg.GamePropsInfo.Desc)
  return desc_.GetNoArena();
}
inline void GamePropsInfo::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GamePropsInfo.Desc)
}
#if LANG_CXX11
inline void GamePropsInfo::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GamePropsInfo.Desc)
}
#endif
inline void GamePropsInfo::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GamePropsInfo.Desc)
}
inline void GamePropsInfo::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GamePropsInfo.Desc)
}
inline ::std::string* GamePropsInfo::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:micromsg.GamePropsInfo.Desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GamePropsInfo::release_desc() {
  // @@protoc_insertion_point(field_release:micromsg.GamePropsInfo.Desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GamePropsInfo::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GamePropsInfo.Desc)
}

// required uint32 Type = 5;
inline bool GamePropsInfo::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GamePropsInfo::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GamePropsInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GamePropsInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 GamePropsInfo::type() const {
  // @@protoc_insertion_point(field_get:micromsg.GamePropsInfo.Type)
  return type_;
}
inline void GamePropsInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GamePropsInfo.Type)
}

// -------------------------------------------------------------------

// GameUserPropsInfo

// required uint32 PropsId = 1;
inline bool GameUserPropsInfo::has_propsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameUserPropsInfo::set_has_propsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameUserPropsInfo::clear_has_propsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameUserPropsInfo::clear_propsid() {
  propsid_ = 0u;
  clear_has_propsid();
}
inline ::google::protobuf::uint32 GameUserPropsInfo::propsid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameUserPropsInfo.PropsId)
  return propsid_;
}
inline void GameUserPropsInfo::set_propsid(::google::protobuf::uint32 value) {
  set_has_propsid();
  propsid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameUserPropsInfo.PropsId)
}

// required uint32 Count = 2;
inline bool GameUserPropsInfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameUserPropsInfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameUserPropsInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameUserPropsInfo::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 GameUserPropsInfo::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GameUserPropsInfo.Count)
  return count_;
}
inline void GameUserPropsInfo::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameUserPropsInfo.Count)
}

// -------------------------------------------------------------------

// GameAnnouncementInfo

// required uint32 Style = 1;
inline bool GameAnnouncementInfo::has_style() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameAnnouncementInfo::set_has_style() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameAnnouncementInfo::clear_has_style() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameAnnouncementInfo::clear_style() {
  style_ = 0u;
  clear_has_style();
}
inline ::google::protobuf::uint32 GameAnnouncementInfo::style() const {
  // @@protoc_insertion_point(field_get:micromsg.GameAnnouncementInfo.Style)
  return style_;
}
inline void GameAnnouncementInfo::set_style(::google::protobuf::uint32 value) {
  set_has_style();
  style_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameAnnouncementInfo.Style)
}

// optional string Title = 2;
inline bool GameAnnouncementInfo::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameAnnouncementInfo::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameAnnouncementInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameAnnouncementInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& GameAnnouncementInfo::title() const {
  // @@protoc_insertion_point(field_get:micromsg.GameAnnouncementInfo.Title)
  return title_.GetNoArena();
}
inline void GameAnnouncementInfo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameAnnouncementInfo.Title)
}
#if LANG_CXX11
inline void GameAnnouncementInfo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameAnnouncementInfo.Title)
}
#endif
inline void GameAnnouncementInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameAnnouncementInfo.Title)
}
inline void GameAnnouncementInfo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameAnnouncementInfo.Title)
}
inline ::std::string* GameAnnouncementInfo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:micromsg.GameAnnouncementInfo.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameAnnouncementInfo::release_title() {
  // @@protoc_insertion_point(field_release:micromsg.GameAnnouncementInfo.Title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameAnnouncementInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameAnnouncementInfo.Title)
}

// optional string Desc = 3;
inline bool GameAnnouncementInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameAnnouncementInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameAnnouncementInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameAnnouncementInfo::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
inline const ::std::string& GameAnnouncementInfo::desc() const {
  // @@protoc_insertion_point(field_get:micromsg.GameAnnouncementInfo.Desc)
  return desc_.GetNoArena();
}
inline void GameAnnouncementInfo::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameAnnouncementInfo.Desc)
}
#if LANG_CXX11
inline void GameAnnouncementInfo::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameAnnouncementInfo.Desc)
}
#endif
inline void GameAnnouncementInfo::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameAnnouncementInfo.Desc)
}
inline void GameAnnouncementInfo::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameAnnouncementInfo.Desc)
}
inline ::std::string* GameAnnouncementInfo::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:micromsg.GameAnnouncementInfo.Desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameAnnouncementInfo::release_desc() {
  // @@protoc_insertion_point(field_release:micromsg.GameAnnouncementInfo.Desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameAnnouncementInfo::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameAnnouncementInfo.Desc)
}

// -------------------------------------------------------------------

// GameConsumeProps

// required uint32 PropsId = 1;
inline bool GameConsumeProps::has_propsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameConsumeProps::set_has_propsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameConsumeProps::clear_has_propsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameConsumeProps::clear_propsid() {
  propsid_ = 0u;
  clear_has_propsid();
}
inline ::google::protobuf::uint32 GameConsumeProps::propsid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameConsumeProps.PropsId)
  return propsid_;
}
inline void GameConsumeProps::set_propsid(::google::protobuf::uint32 value) {
  set_has_propsid();
  propsid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameConsumeProps.PropsId)
}

// required int32 ConsumeCount = 2;
inline bool GameConsumeProps::has_consumecount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameConsumeProps::set_has_consumecount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameConsumeProps::clear_has_consumecount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameConsumeProps::clear_consumecount() {
  consumecount_ = 0;
  clear_has_consumecount();
}
inline ::google::protobuf::int32 GameConsumeProps::consumecount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameConsumeProps.ConsumeCount)
  return consumecount_;
}
inline void GameConsumeProps::set_consumecount(::google::protobuf::int32 value) {
  set_has_consumecount();
  consumecount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameConsumeProps.ConsumeCount)
}

// -------------------------------------------------------------------

// GameInitReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GameInitReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameInitReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameInitReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameInitReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GameInitReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GameInitReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GameInitReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameInitReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GameInitReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameInitReq.BaseRequest)
}

// optional string AppID = 2;
inline bool GameInitReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameInitReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameInitReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameInitReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
inline const ::std::string& GameInitReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitReq.AppID)
  return appid_.GetNoArena();
}
inline void GameInitReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameInitReq.AppID)
}
#if LANG_CXX11
inline void GameInitReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameInitReq.AppID)
}
#endif
inline void GameInitReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameInitReq.AppID)
}
inline void GameInitReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameInitReq.AppID)
}
inline ::std::string* GameInitReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameInitReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameInitReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameInitReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameInitReq.AppID)
}

// -------------------------------------------------------------------

// GameInitResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GameInitResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameInitResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameInitResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameInitResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GameInitResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GameInitResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GameInitResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameInitResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GameInitResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameInitResp.BaseResponse)
}

// required uint32 LifeNum = 2;
inline bool GameInitResp::has_lifenum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GameInitResp::set_has_lifenum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GameInitResp::clear_has_lifenum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GameInitResp::clear_lifenum() {
  lifenum_ = 0u;
  clear_has_lifenum();
}
inline ::google::protobuf::uint32 GameInitResp::lifenum() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.LifeNum)
  return lifenum_;
}
inline void GameInitResp::set_lifenum(::google::protobuf::uint32 value) {
  set_has_lifenum();
  lifenum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.LifeNum)
}

// optional string GameNumerConfig = 3;
inline bool GameInitResp::has_gamenumerconfig() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameInitResp::set_has_gamenumerconfig() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameInitResp::clear_has_gamenumerconfig() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameInitResp::clear_gamenumerconfig() {
  gamenumerconfig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamenumerconfig();
}
inline const ::std::string& GameInitResp::gamenumerconfig() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.GameNumerConfig)
  return gamenumerconfig_.GetNoArena();
}
inline void GameInitResp::set_gamenumerconfig(const ::std::string& value) {
  set_has_gamenumerconfig();
  gamenumerconfig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.GameNumerConfig)
}
#if LANG_CXX11
inline void GameInitResp::set_gamenumerconfig(::std::string&& value) {
  set_has_gamenumerconfig();
  gamenumerconfig_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameInitResp.GameNumerConfig)
}
#endif
inline void GameInitResp::set_gamenumerconfig(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gamenumerconfig();
  gamenumerconfig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameInitResp.GameNumerConfig)
}
inline void GameInitResp::set_gamenumerconfig(const char* value, size_t size) {
  set_has_gamenumerconfig();
  gamenumerconfig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameInitResp.GameNumerConfig)
}
inline ::std::string* GameInitResp::mutable_gamenumerconfig() {
  set_has_gamenumerconfig();
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.GameNumerConfig)
  return gamenumerconfig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameInitResp::release_gamenumerconfig() {
  // @@protoc_insertion_point(field_release:micromsg.GameInitResp.GameNumerConfig)
  clear_has_gamenumerconfig();
  return gamenumerconfig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameInitResp::set_allocated_gamenumerconfig(::std::string* gamenumerconfig) {
  if (gamenumerconfig != NULL) {
    set_has_gamenumerconfig();
  } else {
    clear_has_gamenumerconfig();
  }
  gamenumerconfig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamenumerconfig);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameInitResp.GameNumerConfig)
}

// required uint32 CheckLeftTime = 4;
inline bool GameInitResp::has_checklefttime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GameInitResp::set_has_checklefttime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GameInitResp::clear_has_checklefttime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GameInitResp::clear_checklefttime() {
  checklefttime_ = 0u;
  clear_has_checklefttime();
}
inline ::google::protobuf::uint32 GameInitResp::checklefttime() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.CheckLeftTime)
  return checklefttime_;
}
inline void GameInitResp::set_checklefttime(::google::protobuf::uint32 value) {
  set_has_checklefttime();
  checklefttime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.CheckLeftTime)
}

// optional string Token = 5;
inline bool GameInitResp::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameInitResp::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameInitResp::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameInitResp::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& GameInitResp::token() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.Token)
  return token_.GetNoArena();
}
inline void GameInitResp::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.Token)
}
#if LANG_CXX11
inline void GameInitResp::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameInitResp.Token)
}
#endif
inline void GameInitResp::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameInitResp.Token)
}
inline void GameInitResp::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameInitResp.Token)
}
inline ::std::string* GameInitResp::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameInitResp::release_token() {
  // @@protoc_insertion_point(field_release:micromsg.GameInitResp.Token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameInitResp::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameInitResp.Token)
}

// required int32 FriendCount = 6;
inline bool GameInitResp::has_friendcount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GameInitResp::set_has_friendcount() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GameInitResp::clear_has_friendcount() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GameInitResp::clear_friendcount() {
  friendcount_ = 0;
  clear_has_friendcount();
}
inline ::google::protobuf::int32 GameInitResp::friendcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.FriendCount)
  return friendcount_;
}
inline void GameInitResp::set_friendcount(::google::protobuf::int32 value) {
  set_has_friendcount();
  friendcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.FriendCount)
}

// repeated .micromsg.UserGameInfo FriendList = 7;
inline int GameInitResp::friendlist_size() const {
  return friendlist_.size();
}
inline void GameInitResp::clear_friendlist() {
  friendlist_.Clear();
}
inline const ::micromsg::UserGameInfo& GameInitResp::friendlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.FriendList)
  return friendlist_.Get(index);
}
inline ::micromsg::UserGameInfo* GameInitResp::mutable_friendlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.FriendList)
  return friendlist_.Mutable(index);
}
inline ::micromsg::UserGameInfo* GameInitResp::add_friendlist() {
  // @@protoc_insertion_point(field_add:micromsg.GameInitResp.FriendList)
  return friendlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameInfo >*
GameInitResp::mutable_friendlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameInitResp.FriendList)
  return &friendlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameInfo >&
GameInitResp::friendlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameInitResp.FriendList)
  return friendlist_;
}

// required int32 WishCount = 8;
inline bool GameInitResp::has_wishcount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GameInitResp::set_has_wishcount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GameInitResp::clear_has_wishcount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GameInitResp::clear_wishcount() {
  wishcount_ = 0;
  clear_has_wishcount();
}
inline ::google::protobuf::int32 GameInitResp::wishcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.WishCount)
  return wishcount_;
}
inline void GameInitResp::set_wishcount(::google::protobuf::int32 value) {
  set_has_wishcount();
  wishcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.WishCount)
}

// repeated .micromsg.UserGameWishInfo WishList = 9;
inline int GameInitResp::wishlist_size() const {
  return wishlist_.size();
}
inline void GameInitResp::clear_wishlist() {
  wishlist_.Clear();
}
inline const ::micromsg::UserGameWishInfo& GameInitResp::wishlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.WishList)
  return wishlist_.Get(index);
}
inline ::micromsg::UserGameWishInfo* GameInitResp::mutable_wishlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.WishList)
  return wishlist_.Mutable(index);
}
inline ::micromsg::UserGameWishInfo* GameInitResp::add_wishlist() {
  // @@protoc_insertion_point(field_add:micromsg.GameInitResp.WishList)
  return wishlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameWishInfo >*
GameInitResp::mutable_wishlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameInitResp.WishList)
  return &wishlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameWishInfo >&
GameInitResp::wishlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameInitResp.WishList)
  return wishlist_;
}

// optional int32 GamePropsCount = 10;
inline bool GameInitResp::has_gamepropscount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GameInitResp::set_has_gamepropscount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GameInitResp::clear_has_gamepropscount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GameInitResp::clear_gamepropscount() {
  gamepropscount_ = 0;
  clear_has_gamepropscount();
}
inline ::google::protobuf::int32 GameInitResp::gamepropscount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.GamePropsCount)
  return gamepropscount_;
}
inline void GameInitResp::set_gamepropscount(::google::protobuf::int32 value) {
  set_has_gamepropscount();
  gamepropscount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.GamePropsCount)
}

// repeated .micromsg.GameUserPropsInfo GamePropsList = 11;
inline int GameInitResp::gamepropslist_size() const {
  return gamepropslist_.size();
}
inline void GameInitResp::clear_gamepropslist() {
  gamepropslist_.Clear();
}
inline const ::micromsg::GameUserPropsInfo& GameInitResp::gamepropslist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.GamePropsList)
  return gamepropslist_.Get(index);
}
inline ::micromsg::GameUserPropsInfo* GameInitResp::mutable_gamepropslist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.GamePropsList)
  return gamepropslist_.Mutable(index);
}
inline ::micromsg::GameUserPropsInfo* GameInitResp::add_gamepropslist() {
  // @@protoc_insertion_point(field_add:micromsg.GameInitResp.GamePropsList)
  return gamepropslist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::GameUserPropsInfo >*
GameInitResp::mutable_gamepropslist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameInitResp.GamePropsList)
  return &gamepropslist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::GameUserPropsInfo >&
GameInitResp::gamepropslist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameInitResp.GamePropsList)
  return gamepropslist_;
}

// optional int32 GameAnnouncementCount = 12;
inline bool GameInitResp::has_gameannouncementcount() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GameInitResp::set_has_gameannouncementcount() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GameInitResp::clear_has_gameannouncementcount() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GameInitResp::clear_gameannouncementcount() {
  gameannouncementcount_ = 0;
  clear_has_gameannouncementcount();
}
inline ::google::protobuf::int32 GameInitResp::gameannouncementcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.GameAnnouncementCount)
  return gameannouncementcount_;
}
inline void GameInitResp::set_gameannouncementcount(::google::protobuf::int32 value) {
  set_has_gameannouncementcount();
  gameannouncementcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.GameAnnouncementCount)
}

// repeated .micromsg.GameAnnouncementInfo GameAnnouncementList = 13;
inline int GameInitResp::gameannouncementlist_size() const {
  return gameannouncementlist_.size();
}
inline void GameInitResp::clear_gameannouncementlist() {
  gameannouncementlist_.Clear();
}
inline const ::micromsg::GameAnnouncementInfo& GameInitResp::gameannouncementlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.GameAnnouncementList)
  return gameannouncementlist_.Get(index);
}
inline ::micromsg::GameAnnouncementInfo* GameInitResp::mutable_gameannouncementlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.GameAnnouncementList)
  return gameannouncementlist_.Mutable(index);
}
inline ::micromsg::GameAnnouncementInfo* GameInitResp::add_gameannouncementlist() {
  // @@protoc_insertion_point(field_add:micromsg.GameInitResp.GameAnnouncementList)
  return gameannouncementlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::GameAnnouncementInfo >*
GameInitResp::mutable_gameannouncementlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameInitResp.GameAnnouncementList)
  return &gameannouncementlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::GameAnnouncementInfo >&
GameInitResp::gameannouncementlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameInitResp.GameAnnouncementList)
  return gameannouncementlist_;
}

// optional string PropsViewTip = 14;
inline bool GameInitResp::has_propsviewtip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameInitResp::set_has_propsviewtip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameInitResp::clear_has_propsviewtip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameInitResp::clear_propsviewtip() {
  propsviewtip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_propsviewtip();
}
inline const ::std::string& GameInitResp::propsviewtip() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.PropsViewTip)
  return propsviewtip_.GetNoArena();
}
inline void GameInitResp::set_propsviewtip(const ::std::string& value) {
  set_has_propsviewtip();
  propsviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.PropsViewTip)
}
#if LANG_CXX11
inline void GameInitResp::set_propsviewtip(::std::string&& value) {
  set_has_propsviewtip();
  propsviewtip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameInitResp.PropsViewTip)
}
#endif
inline void GameInitResp::set_propsviewtip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_propsviewtip();
  propsviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameInitResp.PropsViewTip)
}
inline void GameInitResp::set_propsviewtip(const char* value, size_t size) {
  set_has_propsviewtip();
  propsviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameInitResp.PropsViewTip)
}
inline ::std::string* GameInitResp::mutable_propsviewtip() {
  set_has_propsviewtip();
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.PropsViewTip)
  return propsviewtip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameInitResp::release_propsviewtip() {
  // @@protoc_insertion_point(field_release:micromsg.GameInitResp.PropsViewTip)
  clear_has_propsviewtip();
  return propsviewtip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameInitResp::set_allocated_propsviewtip(::std::string* propsviewtip) {
  if (propsviewtip != NULL) {
    set_has_propsviewtip();
  } else {
    clear_has_propsviewtip();
  }
  propsviewtip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), propsviewtip);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameInitResp.PropsViewTip)
}

// optional string RankViewTip = 15;
inline bool GameInitResp::has_rankviewtip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameInitResp::set_has_rankviewtip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameInitResp::clear_has_rankviewtip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameInitResp::clear_rankviewtip() {
  rankviewtip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rankviewtip();
}
inline const ::std::string& GameInitResp::rankviewtip() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.RankViewTip)
  return rankviewtip_.GetNoArena();
}
inline void GameInitResp::set_rankviewtip(const ::std::string& value) {
  set_has_rankviewtip();
  rankviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.RankViewTip)
}
#if LANG_CXX11
inline void GameInitResp::set_rankviewtip(::std::string&& value) {
  set_has_rankviewtip();
  rankviewtip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameInitResp.RankViewTip)
}
#endif
inline void GameInitResp::set_rankviewtip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rankviewtip();
  rankviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameInitResp.RankViewTip)
}
inline void GameInitResp::set_rankviewtip(const char* value, size_t size) {
  set_has_rankviewtip();
  rankviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameInitResp.RankViewTip)
}
inline ::std::string* GameInitResp::mutable_rankviewtip() {
  set_has_rankviewtip();
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.RankViewTip)
  return rankviewtip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameInitResp::release_rankviewtip() {
  // @@protoc_insertion_point(field_release:micromsg.GameInitResp.RankViewTip)
  clear_has_rankviewtip();
  return rankviewtip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameInitResp::set_allocated_rankviewtip(::std::string* rankviewtip) {
  if (rankviewtip != NULL) {
    set_has_rankviewtip();
  } else {
    clear_has_rankviewtip();
  }
  rankviewtip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rankviewtip);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameInitResp.RankViewTip)
}

// optional uint32 GameCoinCount = 16;
inline bool GameInitResp::has_gamecoincount() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GameInitResp::set_has_gamecoincount() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GameInitResp::clear_has_gamecoincount() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GameInitResp::clear_gamecoincount() {
  gamecoincount_ = 0u;
  clear_has_gamecoincount();
}
inline ::google::protobuf::uint32 GameInitResp::gamecoincount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.GameCoinCount)
  return gamecoincount_;
}
inline void GameInitResp::set_gamecoincount(::google::protobuf::uint32 value) {
  set_has_gamecoincount();
  gamecoincount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.GameCoinCount)
}

// optional uint32 ProductIdCount = 17;
inline bool GameInitResp::has_productidcount() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GameInitResp::set_has_productidcount() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GameInitResp::clear_has_productidcount() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GameInitResp::clear_productidcount() {
  productidcount_ = 0u;
  clear_has_productidcount();
}
inline ::google::protobuf::uint32 GameInitResp::productidcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.ProductIdCount)
  return productidcount_;
}
inline void GameInitResp::set_productidcount(::google::protobuf::uint32 value) {
  set_has_productidcount();
  productidcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.ProductIdCount)
}

// repeated .micromsg.SKBuiltinString_t ProductIdList = 18;
inline int GameInitResp::productidlist_size() const {
  return productidlist_.size();
}
inline void GameInitResp::clear_productidlist() {
  productidlist_.Clear();
}
inline const ::micromsg::SKBuiltinString_t& GameInitResp::productidlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.ProductIdList)
  return productidlist_.Get(index);
}
inline ::micromsg::SKBuiltinString_t* GameInitResp::mutable_productidlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.ProductIdList)
  return productidlist_.Mutable(index);
}
inline ::micromsg::SKBuiltinString_t* GameInitResp::add_productidlist() {
  // @@protoc_insertion_point(field_add:micromsg.GameInitResp.ProductIdList)
  return productidlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
GameInitResp::mutable_productidlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameInitResp.ProductIdList)
  return &productidlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
GameInitResp::productidlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameInitResp.ProductIdList)
  return productidlist_;
}

// optional string BuyEngineOilWording = 19;
inline bool GameInitResp::has_buyengineoilwording() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameInitResp::set_has_buyengineoilwording() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameInitResp::clear_has_buyengineoilwording() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameInitResp::clear_buyengineoilwording() {
  buyengineoilwording_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buyengineoilwording();
}
inline const ::std::string& GameInitResp::buyengineoilwording() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.BuyEngineOilWording)
  return buyengineoilwording_.GetNoArena();
}
inline void GameInitResp::set_buyengineoilwording(const ::std::string& value) {
  set_has_buyengineoilwording();
  buyengineoilwording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.BuyEngineOilWording)
}
#if LANG_CXX11
inline void GameInitResp::set_buyengineoilwording(::std::string&& value) {
  set_has_buyengineoilwording();
  buyengineoilwording_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameInitResp.BuyEngineOilWording)
}
#endif
inline void GameInitResp::set_buyengineoilwording(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_buyengineoilwording();
  buyengineoilwording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameInitResp.BuyEngineOilWording)
}
inline void GameInitResp::set_buyengineoilwording(const char* value, size_t size) {
  set_has_buyengineoilwording();
  buyengineoilwording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameInitResp.BuyEngineOilWording)
}
inline ::std::string* GameInitResp::mutable_buyengineoilwording() {
  set_has_buyengineoilwording();
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.BuyEngineOilWording)
  return buyengineoilwording_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameInitResp::release_buyengineoilwording() {
  // @@protoc_insertion_point(field_release:micromsg.GameInitResp.BuyEngineOilWording)
  clear_has_buyengineoilwording();
  return buyengineoilwording_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameInitResp::set_allocated_buyengineoilwording(::std::string* buyengineoilwording) {
  if (buyengineoilwording != NULL) {
    set_has_buyengineoilwording();
  } else {
    clear_has_buyengineoilwording();
  }
  buyengineoilwording_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buyengineoilwording);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameInitResp.BuyEngineOilWording)
}

// optional string OilPrice = 20;
inline bool GameInitResp::has_oilprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameInitResp::set_has_oilprice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameInitResp::clear_has_oilprice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameInitResp::clear_oilprice() {
  oilprice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_oilprice();
}
inline const ::std::string& GameInitResp::oilprice() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.OilPrice)
  return oilprice_.GetNoArena();
}
inline void GameInitResp::set_oilprice(const ::std::string& value) {
  set_has_oilprice();
  oilprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.OilPrice)
}
#if LANG_CXX11
inline void GameInitResp::set_oilprice(::std::string&& value) {
  set_has_oilprice();
  oilprice_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameInitResp.OilPrice)
}
#endif
inline void GameInitResp::set_oilprice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_oilprice();
  oilprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameInitResp.OilPrice)
}
inline void GameInitResp::set_oilprice(const char* value, size_t size) {
  set_has_oilprice();
  oilprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameInitResp.OilPrice)
}
inline ::std::string* GameInitResp::mutable_oilprice() {
  set_has_oilprice();
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.OilPrice)
  return oilprice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameInitResp::release_oilprice() {
  // @@protoc_insertion_point(field_release:micromsg.GameInitResp.OilPrice)
  clear_has_oilprice();
  return oilprice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameInitResp::set_allocated_oilprice(::std::string* oilprice) {
  if (oilprice != NULL) {
    set_has_oilprice();
  } else {
    clear_has_oilprice();
  }
  oilprice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oilprice);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameInitResp.OilPrice)
}

// optional string OilCurrency = 21;
inline bool GameInitResp::has_oilcurrency() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameInitResp::set_has_oilcurrency() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameInitResp::clear_has_oilcurrency() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameInitResp::clear_oilcurrency() {
  oilcurrency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_oilcurrency();
}
inline const ::std::string& GameInitResp::oilcurrency() const {
  // @@protoc_insertion_point(field_get:micromsg.GameInitResp.OilCurrency)
  return oilcurrency_.GetNoArena();
}
inline void GameInitResp::set_oilcurrency(const ::std::string& value) {
  set_has_oilcurrency();
  oilcurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameInitResp.OilCurrency)
}
#if LANG_CXX11
inline void GameInitResp::set_oilcurrency(::std::string&& value) {
  set_has_oilcurrency();
  oilcurrency_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameInitResp.OilCurrency)
}
#endif
inline void GameInitResp::set_oilcurrency(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_oilcurrency();
  oilcurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameInitResp.OilCurrency)
}
inline void GameInitResp::set_oilcurrency(const char* value, size_t size) {
  set_has_oilcurrency();
  oilcurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameInitResp.OilCurrency)
}
inline ::std::string* GameInitResp::mutable_oilcurrency() {
  set_has_oilcurrency();
  // @@protoc_insertion_point(field_mutable:micromsg.GameInitResp.OilCurrency)
  return oilcurrency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameInitResp::release_oilcurrency() {
  // @@protoc_insertion_point(field_release:micromsg.GameInitResp.OilCurrency)
  clear_has_oilcurrency();
  return oilcurrency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameInitResp::set_allocated_oilcurrency(::std::string* oilcurrency) {
  if (oilcurrency != NULL) {
    set_has_oilcurrency();
  } else {
    clear_has_oilcurrency();
  }
  oilcurrency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oilcurrency);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameInitResp.OilCurrency)
}

// -------------------------------------------------------------------

// GameEndReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GameEndReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEndReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEndReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEndReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GameEndReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GameEndReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameEndReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GameEndReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameEndReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GameEndReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameEndReq.BaseRequest)
}

// optional string AppID = 2;
inline bool GameEndReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEndReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEndReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameEndReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
inline const ::std::string& GameEndReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.AppID)
  return appid_.GetNoArena();
}
inline void GameEndReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.AppID)
}
#if LANG_CXX11
inline void GameEndReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameEndReq.AppID)
}
#endif
inline void GameEndReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameEndReq.AppID)
}
inline void GameEndReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameEndReq.AppID)
}
inline ::std::string* GameEndReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameEndReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameEndReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameEndReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameEndReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameEndReq.AppID)
}

// required int32 Count = 3;
inline bool GameEndReq::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEndReq::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEndReq::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEndReq::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GameEndReq::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.Count)
  return count_;
}
inline void GameEndReq::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.Count)
}

// repeated .micromsg.EnemyGameKilled EnemyKilled = 4;
inline int GameEndReq::enemykilled_size() const {
  return enemykilled_.size();
}
inline void GameEndReq::clear_enemykilled() {
  enemykilled_.Clear();
}
inline const ::micromsg::EnemyGameKilled& GameEndReq::enemykilled(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.EnemyKilled)
  return enemykilled_.Get(index);
}
inline ::micromsg::EnemyGameKilled* GameEndReq::mutable_enemykilled(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameEndReq.EnemyKilled)
  return enemykilled_.Mutable(index);
}
inline ::micromsg::EnemyGameKilled* GameEndReq::add_enemykilled() {
  // @@protoc_insertion_point(field_add:micromsg.GameEndReq.EnemyKilled)
  return enemykilled_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::EnemyGameKilled >*
GameEndReq::mutable_enemykilled() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameEndReq.EnemyKilled)
  return &enemykilled_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::EnemyGameKilled >&
GameEndReq::enemykilled() const {
  // @@protoc_insertion_point(field_list:micromsg.GameEndReq.EnemyKilled)
  return enemykilled_;
}

// required uint32 LocalScore = 5;
inline bool GameEndReq::has_localscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameEndReq::set_has_localscore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameEndReq::clear_has_localscore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameEndReq::clear_localscore() {
  localscore_ = 0u;
  clear_has_localscore();
}
inline ::google::protobuf::uint32 GameEndReq::localscore() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.LocalScore)
  return localscore_;
}
inline void GameEndReq::set_localscore(::google::protobuf::uint32 value) {
  set_has_localscore();
  localscore_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.LocalScore)
}

// required uint32 ConsumeTime = 6;
inline bool GameEndReq::has_consumetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameEndReq::set_has_consumetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameEndReq::clear_has_consumetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameEndReq::clear_consumetime() {
  consumetime_ = 0u;
  clear_has_consumetime();
}
inline ::google::protobuf::uint32 GameEndReq::consumetime() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.ConsumeTime)
  return consumetime_;
}
inline void GameEndReq::set_consumetime(::google::protobuf::uint32 value) {
  set_has_consumetime();
  consumetime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.ConsumeTime)
}

// optional string Token = 7;
inline bool GameEndReq::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEndReq::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEndReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEndReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& GameEndReq::token() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.Token)
  return token_.GetNoArena();
}
inline void GameEndReq::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.Token)
}
#if LANG_CXX11
inline void GameEndReq::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameEndReq.Token)
}
#endif
inline void GameEndReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameEndReq.Token)
}
inline void GameEndReq::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameEndReq.Token)
}
inline ::std::string* GameEndReq::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:micromsg.GameEndReq.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameEndReq::release_token() {
  // @@protoc_insertion_point(field_release:micromsg.GameEndReq.Token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameEndReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameEndReq.Token)
}

// optional uint32 DeadCount = 8;
inline bool GameEndReq::has_deadcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameEndReq::set_has_deadcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameEndReq::clear_has_deadcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameEndReq::clear_deadcount() {
  deadcount_ = 0u;
  clear_has_deadcount();
}
inline ::google::protobuf::uint32 GameEndReq::deadcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.DeadCount)
  return deadcount_;
}
inline void GameEndReq::set_deadcount(::google::protobuf::uint32 value) {
  set_has_deadcount();
  deadcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.DeadCount)
}

// optional int32 GameConsumePropsCount = 9;
inline bool GameEndReq::has_gameconsumepropscount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameEndReq::set_has_gameconsumepropscount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameEndReq::clear_has_gameconsumepropscount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameEndReq::clear_gameconsumepropscount() {
  gameconsumepropscount_ = 0;
  clear_has_gameconsumepropscount();
}
inline ::google::protobuf::int32 GameEndReq::gameconsumepropscount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.GameConsumePropsCount)
  return gameconsumepropscount_;
}
inline void GameEndReq::set_gameconsumepropscount(::google::protobuf::int32 value) {
  set_has_gameconsumepropscount();
  gameconsumepropscount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.GameConsumePropsCount)
}

// repeated .micromsg.GameConsumeProps GameConsumePropsList = 10;
inline int GameEndReq::gameconsumepropslist_size() const {
  return gameconsumepropslist_.size();
}
inline void GameEndReq::clear_gameconsumepropslist() {
  gameconsumepropslist_.Clear();
}
inline const ::micromsg::GameConsumeProps& GameEndReq::gameconsumepropslist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.GameConsumePropsList)
  return gameconsumepropslist_.Get(index);
}
inline ::micromsg::GameConsumeProps* GameEndReq::mutable_gameconsumepropslist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameEndReq.GameConsumePropsList)
  return gameconsumepropslist_.Mutable(index);
}
inline ::micromsg::GameConsumeProps* GameEndReq::add_gameconsumepropslist() {
  // @@protoc_insertion_point(field_add:micromsg.GameEndReq.GameConsumePropsList)
  return gameconsumepropslist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::GameConsumeProps >*
GameEndReq::mutable_gameconsumepropslist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameEndReq.GameConsumePropsList)
  return &gameconsumepropslist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::GameConsumeProps >&
GameEndReq::gameconsumepropslist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameEndReq.GameConsumePropsList)
  return gameconsumepropslist_;
}

// optional uint32 GameStartTime = 11;
inline bool GameEndReq::has_gamestarttime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GameEndReq::set_has_gamestarttime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GameEndReq::clear_has_gamestarttime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GameEndReq::clear_gamestarttime() {
  gamestarttime_ = 0u;
  clear_has_gamestarttime();
}
inline ::google::protobuf::uint32 GameEndReq::gamestarttime() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.GameStartTime)
  return gamestarttime_;
}
inline void GameEndReq::set_gamestarttime(::google::protobuf::uint32 value) {
  set_has_gamestarttime();
  gamestarttime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.GameStartTime)
}

// optional uint32 GameEndTime = 12;
inline bool GameEndReq::has_gameendtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GameEndReq::set_has_gameendtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GameEndReq::clear_has_gameendtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GameEndReq::clear_gameendtime() {
  gameendtime_ = 0u;
  clear_has_gameendtime();
}
inline ::google::protobuf::uint32 GameEndReq::gameendtime() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.GameEndTime)
  return gameendtime_;
}
inline void GameEndReq::set_gameendtime(::google::protobuf::uint32 value) {
  set_has_gameendtime();
  gameendtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.GameEndTime)
}

// optional uint32 ShieldNum = 13;
inline bool GameEndReq::has_shieldnum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GameEndReq::set_has_shieldnum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GameEndReq::clear_has_shieldnum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GameEndReq::clear_shieldnum() {
  shieldnum_ = 0u;
  clear_has_shieldnum();
}
inline ::google::protobuf::uint32 GameEndReq::shieldnum() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.ShieldNum)
  return shieldnum_;
}
inline void GameEndReq::set_shieldnum(::google::protobuf::uint32 value) {
  set_has_shieldnum();
  shieldnum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.ShieldNum)
}

// optional uint32 TotalShots = 14;
inline bool GameEndReq::has_totalshots() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GameEndReq::set_has_totalshots() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GameEndReq::clear_has_totalshots() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GameEndReq::clear_totalshots() {
  totalshots_ = 0u;
  clear_has_totalshots();
}
inline ::google::protobuf::uint32 GameEndReq::totalshots() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.TotalShots)
  return totalshots_;
}
inline void GameEndReq::set_totalshots(::google::protobuf::uint32 value) {
  set_has_totalshots();
  totalshots_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.TotalShots)
}

// optional uint32 GameCoinCount = 15;
inline bool GameEndReq::has_gamecoincount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GameEndReq::set_has_gamecoincount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GameEndReq::clear_has_gamecoincount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GameEndReq::clear_gamecoincount() {
  gamecoincount_ = 0u;
  clear_has_gamecoincount();
}
inline ::google::protobuf::uint32 GameEndReq::gamecoincount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.GameCoinCount)
  return gamecoincount_;
}
inline void GameEndReq::set_gamecoincount(::google::protobuf::uint32 value) {
  set_has_gamecoincount();
  gamecoincount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.GameCoinCount)
}

// optional uint32 ClientUseReviveNum = 16;
inline bool GameEndReq::has_clientuserevivenum() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GameEndReq::set_has_clientuserevivenum() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GameEndReq::clear_has_clientuserevivenum() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GameEndReq::clear_clientuserevivenum() {
  clientuserevivenum_ = 0u;
  clear_has_clientuserevivenum();
}
inline ::google::protobuf::uint32 GameEndReq::clientuserevivenum() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndReq.ClientUseReviveNum)
  return clientuserevivenum_;
}
inline void GameEndReq::set_clientuserevivenum(::google::protobuf::uint32 value) {
  set_has_clientuserevivenum();
  clientuserevivenum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndReq.ClientUseReviveNum)
}

// -------------------------------------------------------------------

// GameEndResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GameEndResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEndResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEndResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEndResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GameEndResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GameEndResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameEndResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GameEndResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameEndResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GameEndResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameEndResp.BaseResponse)
}

// required uint32 Score = 2;
inline bool GameEndResp::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameEndResp::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameEndResp::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameEndResp::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 GameEndResp::score() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.Score)
  return score_;
}
inline void GameEndResp::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndResp.Score)
}

// optional string Achievement = 3;
inline bool GameEndResp::has_achievement() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEndResp::set_has_achievement() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEndResp::clear_has_achievement() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameEndResp::clear_achievement() {
  achievement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_achievement();
}
inline const ::std::string& GameEndResp::achievement() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.Achievement)
  return achievement_.GetNoArena();
}
inline void GameEndResp::set_achievement(const ::std::string& value) {
  set_has_achievement();
  achievement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameEndResp.Achievement)
}
#if LANG_CXX11
inline void GameEndResp::set_achievement(::std::string&& value) {
  set_has_achievement();
  achievement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameEndResp.Achievement)
}
#endif
inline void GameEndResp::set_achievement(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_achievement();
  achievement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameEndResp.Achievement)
}
inline void GameEndResp::set_achievement(const char* value, size_t size) {
  set_has_achievement();
  achievement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameEndResp.Achievement)
}
inline ::std::string* GameEndResp::mutable_achievement() {
  set_has_achievement();
  // @@protoc_insertion_point(field_mutable:micromsg.GameEndResp.Achievement)
  return achievement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameEndResp::release_achievement() {
  // @@protoc_insertion_point(field_release:micromsg.GameEndResp.Achievement)
  clear_has_achievement();
  return achievement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameEndResp::set_allocated_achievement(::std::string* achievement) {
  if (achievement != NULL) {
    set_has_achievement();
  } else {
    clear_has_achievement();
  }
  achievement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), achievement);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameEndResp.Achievement)
}

// required uint32 Rank = 4;
inline bool GameEndResp::has_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameEndResp::set_has_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameEndResp::clear_has_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameEndResp::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 GameEndResp::rank() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.Rank)
  return rank_;
}
inline void GameEndResp::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndResp.Rank)
}

// required uint32 LifeNum = 5;
inline bool GameEndResp::has_lifenum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameEndResp::set_has_lifenum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameEndResp::clear_has_lifenum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameEndResp::clear_lifenum() {
  lifenum_ = 0u;
  clear_has_lifenum();
}
inline ::google::protobuf::uint32 GameEndResp::lifenum() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.LifeNum)
  return lifenum_;
}
inline void GameEndResp::set_lifenum(::google::protobuf::uint32 value) {
  set_has_lifenum();
  lifenum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndResp.LifeNum)
}

// required uint32 CheckLeftTime = 6;
inline bool GameEndResp::has_checklefttime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameEndResp::set_has_checklefttime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameEndResp::clear_has_checklefttime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameEndResp::clear_checklefttime() {
  checklefttime_ = 0u;
  clear_has_checklefttime();
}
inline ::google::protobuf::uint32 GameEndResp::checklefttime() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.CheckLeftTime)
  return checklefttime_;
}
inline void GameEndResp::set_checklefttime(::google::protobuf::uint32 value) {
  set_has_checklefttime();
  checklefttime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndResp.CheckLeftTime)
}

// required int32 Count = 7;
inline bool GameEndResp::has_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GameEndResp::set_has_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GameEndResp::clear_has_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GameEndResp::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GameEndResp::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.Count)
  return count_;
}
inline void GameEndResp::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndResp.Count)
}

// repeated .micromsg.UserGameAchieveInfo RankList = 8;
inline int GameEndResp::ranklist_size() const {
  return ranklist_.size();
}
inline void GameEndResp::clear_ranklist() {
  ranklist_.Clear();
}
inline const ::micromsg::UserGameAchieveInfo& GameEndResp::ranklist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.RankList)
  return ranklist_.Get(index);
}
inline ::micromsg::UserGameAchieveInfo* GameEndResp::mutable_ranklist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameEndResp.RankList)
  return ranklist_.Mutable(index);
}
inline ::micromsg::UserGameAchieveInfo* GameEndResp::add_ranklist() {
  // @@protoc_insertion_point(field_add:micromsg.GameEndResp.RankList)
  return ranklist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameAchieveInfo >*
GameEndResp::mutable_ranklist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameEndResp.RankList)
  return &ranklist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameAchieveInfo >&
GameEndResp::ranklist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameEndResp.RankList)
  return ranklist_;
}

// optional string PropsViewTip = 11;
inline bool GameEndResp::has_propsviewtip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEndResp::set_has_propsviewtip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEndResp::clear_has_propsviewtip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEndResp::clear_propsviewtip() {
  propsviewtip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_propsviewtip();
}
inline const ::std::string& GameEndResp::propsviewtip() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.PropsViewTip)
  return propsviewtip_.GetNoArena();
}
inline void GameEndResp::set_propsviewtip(const ::std::string& value) {
  set_has_propsviewtip();
  propsviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameEndResp.PropsViewTip)
}
#if LANG_CXX11
inline void GameEndResp::set_propsviewtip(::std::string&& value) {
  set_has_propsviewtip();
  propsviewtip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameEndResp.PropsViewTip)
}
#endif
inline void GameEndResp::set_propsviewtip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_propsviewtip();
  propsviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameEndResp.PropsViewTip)
}
inline void GameEndResp::set_propsviewtip(const char* value, size_t size) {
  set_has_propsviewtip();
  propsviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameEndResp.PropsViewTip)
}
inline ::std::string* GameEndResp::mutable_propsviewtip() {
  set_has_propsviewtip();
  // @@protoc_insertion_point(field_mutable:micromsg.GameEndResp.PropsViewTip)
  return propsviewtip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameEndResp::release_propsviewtip() {
  // @@protoc_insertion_point(field_release:micromsg.GameEndResp.PropsViewTip)
  clear_has_propsviewtip();
  return propsviewtip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameEndResp::set_allocated_propsviewtip(::std::string* propsviewtip) {
  if (propsviewtip != NULL) {
    set_has_propsviewtip();
  } else {
    clear_has_propsviewtip();
  }
  propsviewtip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), propsviewtip);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameEndResp.PropsViewTip)
}

// optional string RankViewTip = 12;
inline bool GameEndResp::has_rankviewtip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEndResp::set_has_rankviewtip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEndResp::clear_has_rankviewtip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEndResp::clear_rankviewtip() {
  rankviewtip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rankviewtip();
}
inline const ::std::string& GameEndResp::rankviewtip() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.RankViewTip)
  return rankviewtip_.GetNoArena();
}
inline void GameEndResp::set_rankviewtip(const ::std::string& value) {
  set_has_rankviewtip();
  rankviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameEndResp.RankViewTip)
}
#if LANG_CXX11
inline void GameEndResp::set_rankviewtip(::std::string&& value) {
  set_has_rankviewtip();
  rankviewtip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameEndResp.RankViewTip)
}
#endif
inline void GameEndResp::set_rankviewtip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rankviewtip();
  rankviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameEndResp.RankViewTip)
}
inline void GameEndResp::set_rankviewtip(const char* value, size_t size) {
  set_has_rankviewtip();
  rankviewtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameEndResp.RankViewTip)
}
inline ::std::string* GameEndResp::mutable_rankviewtip() {
  set_has_rankviewtip();
  // @@protoc_insertion_point(field_mutable:micromsg.GameEndResp.RankViewTip)
  return rankviewtip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameEndResp::release_rankviewtip() {
  // @@protoc_insertion_point(field_release:micromsg.GameEndResp.RankViewTip)
  clear_has_rankviewtip();
  return rankviewtip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameEndResp::set_allocated_rankviewtip(::std::string* rankviewtip) {
  if (rankviewtip != NULL) {
    set_has_rankviewtip();
  } else {
    clear_has_rankviewtip();
  }
  rankviewtip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rankviewtip);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameEndResp.RankViewTip)
}

// optional uint32 GameCoinCount = 13;
inline bool GameEndResp::has_gamecoincount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GameEndResp::set_has_gamecoincount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GameEndResp::clear_has_gamecoincount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GameEndResp::clear_gamecoincount() {
  gamecoincount_ = 0u;
  clear_has_gamecoincount();
}
inline ::google::protobuf::uint32 GameEndResp::gamecoincount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameEndResp.GameCoinCount)
  return gamecoincount_;
}
inline void GameEndResp::set_gamecoincount(::google::protobuf::uint32 value) {
  set_has_gamecoincount();
  gamecoincount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameEndResp.GameCoinCount)
}

// -------------------------------------------------------------------

// GameRankListReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GameRankListReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameRankListReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameRankListReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameRankListReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GameRankListReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameRankListReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GameRankListReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameRankListReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GameRankListReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameRankListReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GameRankListReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameRankListReq.BaseRequest)
}

// optional string AppID = 2;
inline bool GameRankListReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameRankListReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameRankListReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameRankListReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
inline const ::std::string& GameRankListReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameRankListReq.AppID)
  return appid_.GetNoArena();
}
inline void GameRankListReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameRankListReq.AppID)
}
#if LANG_CXX11
inline void GameRankListReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameRankListReq.AppID)
}
#endif
inline void GameRankListReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameRankListReq.AppID)
}
inline void GameRankListReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameRankListReq.AppID)
}
inline ::std::string* GameRankListReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameRankListReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameRankListReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameRankListReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameRankListReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameRankListReq.AppID)
}

// -------------------------------------------------------------------

// GameRankListResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GameRankListResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameRankListResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameRankListResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameRankListResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GameRankListResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameRankListResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GameRankListResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameRankListResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GameRankListResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameRankListResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GameRankListResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameRankListResp.BaseResponse)
}

// required int32 Count = 2;
inline bool GameRankListResp::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameRankListResp::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameRankListResp::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameRankListResp::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GameRankListResp::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GameRankListResp.Count)
  return count_;
}
inline void GameRankListResp::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameRankListResp.Count)
}

// repeated .micromsg.UserGameAchieveInfo RankList = 3;
inline int GameRankListResp::ranklist_size() const {
  return ranklist_.size();
}
inline void GameRankListResp::clear_ranklist() {
  ranklist_.Clear();
}
inline const ::micromsg::UserGameAchieveInfo& GameRankListResp::ranklist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameRankListResp.RankList)
  return ranklist_.Get(index);
}
inline ::micromsg::UserGameAchieveInfo* GameRankListResp::mutable_ranklist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameRankListResp.RankList)
  return ranklist_.Mutable(index);
}
inline ::micromsg::UserGameAchieveInfo* GameRankListResp::add_ranklist() {
  // @@protoc_insertion_point(field_add:micromsg.GameRankListResp.RankList)
  return ranklist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameAchieveInfo >*
GameRankListResp::mutable_ranklist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameRankListResp.RankList)
  return &ranklist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameAchieveInfo >&
GameRankListResp::ranklist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameRankListResp.RankList)
  return ranklist_;
}

// -------------------------------------------------------------------

// GameStartReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GameStartReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameStartReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameStartReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameStartReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GameStartReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GameStartReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameStartReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GameStartReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameStartReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GameStartReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameStartReq.BaseRequest)
}

// optional string AppID = 2;
inline bool GameStartReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameStartReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameStartReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameStartReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
inline const ::std::string& GameStartReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartReq.AppID)
  return appid_.GetNoArena();
}
inline void GameStartReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameStartReq.AppID)
}
#if LANG_CXX11
inline void GameStartReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameStartReq.AppID)
}
#endif
inline void GameStartReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameStartReq.AppID)
}
inline void GameStartReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameStartReq.AppID)
}
inline ::std::string* GameStartReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameStartReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameStartReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameStartReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameStartReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameStartReq.AppID)
}

// required uint32 LocalLifeNum = 3;
inline bool GameStartReq::has_locallifenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameStartReq::set_has_locallifenum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameStartReq::clear_has_locallifenum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameStartReq::clear_locallifenum() {
  locallifenum_ = 0u;
  clear_has_locallifenum();
}
inline ::google::protobuf::uint32 GameStartReq::locallifenum() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartReq.LocalLifeNum)
  return locallifenum_;
}
inline void GameStartReq::set_locallifenum(::google::protobuf::uint32 value) {
  set_has_locallifenum();
  locallifenum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameStartReq.LocalLifeNum)
}

// optional string Token = 4;
inline bool GameStartReq::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameStartReq::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameStartReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameStartReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& GameStartReq::token() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartReq.Token)
  return token_.GetNoArena();
}
inline void GameStartReq::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameStartReq.Token)
}
#if LANG_CXX11
inline void GameStartReq::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameStartReq.Token)
}
#endif
inline void GameStartReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameStartReq.Token)
}
inline void GameStartReq::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameStartReq.Token)
}
inline ::std::string* GameStartReq::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:micromsg.GameStartReq.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameStartReq::release_token() {
  // @@protoc_insertion_point(field_release:micromsg.GameStartReq.Token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameStartReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameStartReq.Token)
}

// required uint32 NeedClearWishList = 5;
inline bool GameStartReq::has_needclearwishlist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameStartReq::set_has_needclearwishlist() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameStartReq::clear_has_needclearwishlist() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameStartReq::clear_needclearwishlist() {
  needclearwishlist_ = 0u;
  clear_has_needclearwishlist();
}
inline ::google::protobuf::uint32 GameStartReq::needclearwishlist() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartReq.NeedClearWishList)
  return needclearwishlist_;
}
inline void GameStartReq::set_needclearwishlist(::google::protobuf::uint32 value) {
  set_has_needclearwishlist();
  needclearwishlist_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameStartReq.NeedClearWishList)
}

// optional int32 GameConsumePropsCount = 6;
inline bool GameStartReq::has_gameconsumepropscount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameStartReq::set_has_gameconsumepropscount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameStartReq::clear_has_gameconsumepropscount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameStartReq::clear_gameconsumepropscount() {
  gameconsumepropscount_ = 0;
  clear_has_gameconsumepropscount();
}
inline ::google::protobuf::int32 GameStartReq::gameconsumepropscount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartReq.GameConsumePropsCount)
  return gameconsumepropscount_;
}
inline void GameStartReq::set_gameconsumepropscount(::google::protobuf::int32 value) {
  set_has_gameconsumepropscount();
  gameconsumepropscount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameStartReq.GameConsumePropsCount)
}

// repeated .micromsg.GameConsumeProps GameConsumePropsList = 7;
inline int GameStartReq::gameconsumepropslist_size() const {
  return gameconsumepropslist_.size();
}
inline void GameStartReq::clear_gameconsumepropslist() {
  gameconsumepropslist_.Clear();
}
inline const ::micromsg::GameConsumeProps& GameStartReq::gameconsumepropslist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartReq.GameConsumePropsList)
  return gameconsumepropslist_.Get(index);
}
inline ::micromsg::GameConsumeProps* GameStartReq::mutable_gameconsumepropslist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameStartReq.GameConsumePropsList)
  return gameconsumepropslist_.Mutable(index);
}
inline ::micromsg::GameConsumeProps* GameStartReq::add_gameconsumepropslist() {
  // @@protoc_insertion_point(field_add:micromsg.GameStartReq.GameConsumePropsList)
  return gameconsumepropslist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::GameConsumeProps >*
GameStartReq::mutable_gameconsumepropslist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameStartReq.GameConsumePropsList)
  return &gameconsumepropslist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::GameConsumeProps >&
GameStartReq::gameconsumepropslist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameStartReq.GameConsumePropsList)
  return gameconsumepropslist_;
}

// -------------------------------------------------------------------

// GameStartResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GameStartResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameStartResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameStartResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameStartResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GameStartResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GameStartResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameStartResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GameStartResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameStartResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GameStartResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameStartResp.BaseResponse)
}

// required uint32 LifeNum = 2;
inline bool GameStartResp::has_lifenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameStartResp::set_has_lifenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameStartResp::clear_has_lifenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameStartResp::clear_lifenum() {
  lifenum_ = 0u;
  clear_has_lifenum();
}
inline ::google::protobuf::uint32 GameStartResp::lifenum() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartResp.LifeNum)
  return lifenum_;
}
inline void GameStartResp::set_lifenum(::google::protobuf::uint32 value) {
  set_has_lifenum();
  lifenum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameStartResp.LifeNum)
}

// required uint32 CheckLeftTime = 3;
inline bool GameStartResp::has_checklefttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameStartResp::set_has_checklefttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameStartResp::clear_has_checklefttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameStartResp::clear_checklefttime() {
  checklefttime_ = 0u;
  clear_has_checklefttime();
}
inline ::google::protobuf::uint32 GameStartResp::checklefttime() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartResp.CheckLeftTime)
  return checklefttime_;
}
inline void GameStartResp::set_checklefttime(::google::protobuf::uint32 value) {
  set_has_checklefttime();
  checklefttime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameStartResp.CheckLeftTime)
}

// optional string Token = 4;
inline bool GameStartResp::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameStartResp::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameStartResp::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameStartResp::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& GameStartResp::token() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartResp.Token)
  return token_.GetNoArena();
}
inline void GameStartResp::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameStartResp.Token)
}
#if LANG_CXX11
inline void GameStartResp::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameStartResp.Token)
}
#endif
inline void GameStartResp::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameStartResp.Token)
}
inline void GameStartResp::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameStartResp.Token)
}
inline ::std::string* GameStartResp::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:micromsg.GameStartResp.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameStartResp::release_token() {
  // @@protoc_insertion_point(field_release:micromsg.GameStartResp.Token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameStartResp::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameStartResp.Token)
}

// required int32 Count = 5;
inline bool GameStartResp::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameStartResp::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameStartResp::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameStartResp::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GameStartResp::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartResp.Count)
  return count_;
}
inline void GameStartResp::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameStartResp.Count)
}

// repeated .micromsg.UserGameAchieveInfo RankList = 6;
inline int GameStartResp::ranklist_size() const {
  return ranklist_.size();
}
inline void GameStartResp::clear_ranklist() {
  ranklist_.Clear();
}
inline const ::micromsg::UserGameAchieveInfo& GameStartResp::ranklist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartResp.RankList)
  return ranklist_.Get(index);
}
inline ::micromsg::UserGameAchieveInfo* GameStartResp::mutable_ranklist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameStartResp.RankList)
  return ranklist_.Mutable(index);
}
inline ::micromsg::UserGameAchieveInfo* GameStartResp::add_ranklist() {
  // @@protoc_insertion_point(field_add:micromsg.GameStartResp.RankList)
  return ranklist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameAchieveInfo >*
GameStartResp::mutable_ranklist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameStartResp.RankList)
  return &ranklist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameAchieveInfo >&
GameStartResp::ranklist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameStartResp.RankList)
  return ranklist_;
}

// optional int32 GamePropsCount = 7;
inline bool GameStartResp::has_gamepropscount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameStartResp::set_has_gamepropscount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameStartResp::clear_has_gamepropscount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameStartResp::clear_gamepropscount() {
  gamepropscount_ = 0;
  clear_has_gamepropscount();
}
inline ::google::protobuf::int32 GameStartResp::gamepropscount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartResp.GamePropsCount)
  return gamepropscount_;
}
inline void GameStartResp::set_gamepropscount(::google::protobuf::int32 value) {
  set_has_gamepropscount();
  gamepropscount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameStartResp.GamePropsCount)
}

// repeated .micromsg.GameUserPropsInfo GamePropsList = 8;
inline int GameStartResp::gamepropslist_size() const {
  return gamepropslist_.size();
}
inline void GameStartResp::clear_gamepropslist() {
  gamepropslist_.Clear();
}
inline const ::micromsg::GameUserPropsInfo& GameStartResp::gamepropslist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartResp.GamePropsList)
  return gamepropslist_.Get(index);
}
inline ::micromsg::GameUserPropsInfo* GameStartResp::mutable_gamepropslist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameStartResp.GamePropsList)
  return gamepropslist_.Mutable(index);
}
inline ::micromsg::GameUserPropsInfo* GameStartResp::add_gamepropslist() {
  // @@protoc_insertion_point(field_add:micromsg.GameStartResp.GamePropsList)
  return gamepropslist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::GameUserPropsInfo >*
GameStartResp::mutable_gamepropslist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameStartResp.GamePropsList)
  return &gamepropslist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::GameUserPropsInfo >&
GameStartResp::gamepropslist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameStartResp.GamePropsList)
  return gamepropslist_;
}

// optional uint32 GameCoinCount = 9;
inline bool GameStartResp::has_gamecoincount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameStartResp::set_has_gamecoincount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameStartResp::clear_has_gamecoincount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameStartResp::clear_gamecoincount() {
  gamecoincount_ = 0u;
  clear_has_gamecoincount();
}
inline ::google::protobuf::uint32 GameStartResp::gamecoincount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameStartResp.GameCoinCount)
  return gamecoincount_;
}
inline void GameStartResp::set_gamecoincount(::google::protobuf::uint32 value) {
  set_has_gamecoincount();
  gamecoincount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameStartResp.GameCoinCount)
}

// -------------------------------------------------------------------

// GameCheckReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GameCheckReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameCheckReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameCheckReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameCheckReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GameCheckReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameCheckReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GameCheckReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameCheckReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GameCheckReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameCheckReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GameCheckReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameCheckReq.BaseRequest)
}

// optional string AppID = 2;
inline bool GameCheckReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameCheckReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameCheckReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameCheckReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
inline const ::std::string& GameCheckReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameCheckReq.AppID)
  return appid_.GetNoArena();
}
inline void GameCheckReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameCheckReq.AppID)
}
#if LANG_CXX11
inline void GameCheckReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameCheckReq.AppID)
}
#endif
inline void GameCheckReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameCheckReq.AppID)
}
inline void GameCheckReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameCheckReq.AppID)
}
inline ::std::string* GameCheckReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameCheckReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameCheckReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameCheckReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameCheckReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameCheckReq.AppID)
}

// required uint32 LocalLifeNum = 3;
inline bool GameCheckReq::has_locallifenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameCheckReq::set_has_locallifenum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameCheckReq::clear_has_locallifenum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameCheckReq::clear_locallifenum() {
  locallifenum_ = 0u;
  clear_has_locallifenum();
}
inline ::google::protobuf::uint32 GameCheckReq::locallifenum() const {
  // @@protoc_insertion_point(field_get:micromsg.GameCheckReq.LocalLifeNum)
  return locallifenum_;
}
inline void GameCheckReq::set_locallifenum(::google::protobuf::uint32 value) {
  set_has_locallifenum();
  locallifenum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameCheckReq.LocalLifeNum)
}

// optional string Token = 4;
inline bool GameCheckReq::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameCheckReq::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameCheckReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameCheckReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& GameCheckReq::token() const {
  // @@protoc_insertion_point(field_get:micromsg.GameCheckReq.Token)
  return token_.GetNoArena();
}
inline void GameCheckReq::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameCheckReq.Token)
}
#if LANG_CXX11
inline void GameCheckReq::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameCheckReq.Token)
}
#endif
inline void GameCheckReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameCheckReq.Token)
}
inline void GameCheckReq::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameCheckReq.Token)
}
inline ::std::string* GameCheckReq::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:micromsg.GameCheckReq.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameCheckReq::release_token() {
  // @@protoc_insertion_point(field_release:micromsg.GameCheckReq.Token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameCheckReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameCheckReq.Token)
}

// -------------------------------------------------------------------

// GameCheckResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GameCheckResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameCheckResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameCheckResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameCheckResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GameCheckResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameCheckResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GameCheckResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameCheckResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GameCheckResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameCheckResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GameCheckResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameCheckResp.BaseResponse)
}

// required uint32 CheckLeftTime = 2;
inline bool GameCheckResp::has_checklefttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameCheckResp::set_has_checklefttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameCheckResp::clear_has_checklefttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameCheckResp::clear_checklefttime() {
  checklefttime_ = 0u;
  clear_has_checklefttime();
}
inline ::google::protobuf::uint32 GameCheckResp::checklefttime() const {
  // @@protoc_insertion_point(field_get:micromsg.GameCheckResp.CheckLeftTime)
  return checklefttime_;
}
inline void GameCheckResp::set_checklefttime(::google::protobuf::uint32 value) {
  set_has_checklefttime();
  checklefttime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameCheckResp.CheckLeftTime)
}

// required uint32 LifeNum = 3;
inline bool GameCheckResp::has_lifenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameCheckResp::set_has_lifenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameCheckResp::clear_has_lifenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameCheckResp::clear_lifenum() {
  lifenum_ = 0u;
  clear_has_lifenum();
}
inline ::google::protobuf::uint32 GameCheckResp::lifenum() const {
  // @@protoc_insertion_point(field_get:micromsg.GameCheckResp.LifeNum)
  return lifenum_;
}
inline void GameCheckResp::set_lifenum(::google::protobuf::uint32 value) {
  set_has_lifenum();
  lifenum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameCheckResp.LifeNum)
}

// -------------------------------------------------------------------

// GameWishReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GameWishReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameWishReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameWishReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameWishReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GameWishReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameWishReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GameWishReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameWishReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GameWishReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameWishReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GameWishReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameWishReq.BaseRequest)
}

// optional string AppID = 2;
inline bool GameWishReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameWishReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameWishReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameWishReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
inline const ::std::string& GameWishReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameWishReq.AppID)
  return appid_.GetNoArena();
}
inline void GameWishReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameWishReq.AppID)
}
#if LANG_CXX11
inline void GameWishReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameWishReq.AppID)
}
#endif
inline void GameWishReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameWishReq.AppID)
}
inline void GameWishReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameWishReq.AppID)
}
inline ::std::string* GameWishReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameWishReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameWishReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameWishReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameWishReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameWishReq.AppID)
}

// required int32 Count = 3;
inline bool GameWishReq::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameWishReq::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameWishReq::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameWishReq::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GameWishReq::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GameWishReq.Count)
  return count_;
}
inline void GameWishReq::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameWishReq.Count)
}

// repeated .micromsg.SKBuiltinString_t UserNameList = 4;
inline int GameWishReq::usernamelist_size() const {
  return usernamelist_.size();
}
inline void GameWishReq::clear_usernamelist() {
  usernamelist_.Clear();
}
inline const ::micromsg::SKBuiltinString_t& GameWishReq::usernamelist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameWishReq.UserNameList)
  return usernamelist_.Get(index);
}
inline ::micromsg::SKBuiltinString_t* GameWishReq::mutable_usernamelist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameWishReq.UserNameList)
  return usernamelist_.Mutable(index);
}
inline ::micromsg::SKBuiltinString_t* GameWishReq::add_usernamelist() {
  // @@protoc_insertion_point(field_add:micromsg.GameWishReq.UserNameList)
  return usernamelist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
GameWishReq::mutable_usernamelist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameWishReq.UserNameList)
  return &usernamelist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
GameWishReq::usernamelist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameWishReq.UserNameList)
  return usernamelist_;
}

// -------------------------------------------------------------------

// GameWishResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GameWishResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameWishResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameWishResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameWishResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GameWishResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameWishResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GameWishResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameWishResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GameWishResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameWishResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GameWishResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameWishResp.BaseResponse)
}

// -------------------------------------------------------------------

// GameGiftReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GameGiftReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameGiftReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameGiftReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameGiftReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GameGiftReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameGiftReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GameGiftReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameGiftReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GameGiftReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameGiftReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GameGiftReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameGiftReq.BaseRequest)
}

// optional string AppID = 2;
inline bool GameGiftReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameGiftReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameGiftReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameGiftReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
inline const ::std::string& GameGiftReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameGiftReq.AppID)
  return appid_.GetNoArena();
}
inline void GameGiftReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameGiftReq.AppID)
}
#if LANG_CXX11
inline void GameGiftReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameGiftReq.AppID)
}
#endif
inline void GameGiftReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameGiftReq.AppID)
}
inline void GameGiftReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameGiftReq.AppID)
}
inline ::std::string* GameGiftReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameGiftReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameGiftReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameGiftReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameGiftReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameGiftReq.AppID)
}

// required uint32 LocalLifeNum = 3;
inline bool GameGiftReq::has_locallifenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameGiftReq::set_has_locallifenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameGiftReq::clear_has_locallifenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameGiftReq::clear_locallifenum() {
  locallifenum_ = 0u;
  clear_has_locallifenum();
}
inline ::google::protobuf::uint32 GameGiftReq::locallifenum() const {
  // @@protoc_insertion_point(field_get:micromsg.GameGiftReq.LocalLifeNum)
  return locallifenum_;
}
inline void GameGiftReq::set_locallifenum(::google::protobuf::uint32 value) {
  set_has_locallifenum();
  locallifenum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameGiftReq.LocalLifeNum)
}

// required int32 Count = 4;
inline bool GameGiftReq::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameGiftReq::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameGiftReq::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameGiftReq::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GameGiftReq::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GameGiftReq.Count)
  return count_;
}
inline void GameGiftReq::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameGiftReq.Count)
}

// repeated .micromsg.SKBuiltinString_t UserNameList = 5;
inline int GameGiftReq::usernamelist_size() const {
  return usernamelist_.size();
}
inline void GameGiftReq::clear_usernamelist() {
  usernamelist_.Clear();
}
inline const ::micromsg::SKBuiltinString_t& GameGiftReq::usernamelist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameGiftReq.UserNameList)
  return usernamelist_.Get(index);
}
inline ::micromsg::SKBuiltinString_t* GameGiftReq::mutable_usernamelist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameGiftReq.UserNameList)
  return usernamelist_.Mutable(index);
}
inline ::micromsg::SKBuiltinString_t* GameGiftReq::add_usernamelist() {
  // @@protoc_insertion_point(field_add:micromsg.GameGiftReq.UserNameList)
  return usernamelist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
GameGiftReq::mutable_usernamelist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameGiftReq.UserNameList)
  return &usernamelist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
GameGiftReq::usernamelist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameGiftReq.UserNameList)
  return usernamelist_;
}

// -------------------------------------------------------------------

// GameGiftResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GameGiftResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameGiftResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameGiftResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameGiftResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GameGiftResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameGiftResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GameGiftResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameGiftResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GameGiftResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameGiftResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GameGiftResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameGiftResp.BaseResponse)
}

// required uint32 LifeNum = 2;
inline bool GameGiftResp::has_lifenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameGiftResp::set_has_lifenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameGiftResp::clear_has_lifenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameGiftResp::clear_lifenum() {
  lifenum_ = 0u;
  clear_has_lifenum();
}
inline ::google::protobuf::uint32 GameGiftResp::lifenum() const {
  // @@protoc_insertion_point(field_get:micromsg.GameGiftResp.LifeNum)
  return lifenum_;
}
inline void GameGiftResp::set_lifenum(::google::protobuf::uint32 value) {
  set_has_lifenum();
  lifenum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameGiftResp.LifeNum)
}

// required uint32 CheckLeftTime = 3;
inline bool GameGiftResp::has_checklefttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameGiftResp::set_has_checklefttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameGiftResp::clear_has_checklefttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameGiftResp::clear_checklefttime() {
  checklefttime_ = 0u;
  clear_has_checklefttime();
}
inline ::google::protobuf::uint32 GameGiftResp::checklefttime() const {
  // @@protoc_insertion_point(field_get:micromsg.GameGiftResp.CheckLeftTime)
  return checklefttime_;
}
inline void GameGiftResp::set_checklefttime(::google::protobuf::uint32 value) {
  set_has_checklefttime();
  checklefttime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameGiftResp.CheckLeftTime)
}

// -------------------------------------------------------------------

// GameFriendListReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GameFriendListReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameFriendListReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameFriendListReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameFriendListReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GameFriendListReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameFriendListReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GameFriendListReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameFriendListReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GameFriendListReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameFriendListReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GameFriendListReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameFriendListReq.BaseRequest)
}

// optional string AppID = 2;
inline bool GameFriendListReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameFriendListReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameFriendListReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameFriendListReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
inline const ::std::string& GameFriendListReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameFriendListReq.AppID)
  return appid_.GetNoArena();
}
inline void GameFriendListReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameFriendListReq.AppID)
}
#if LANG_CXX11
inline void GameFriendListReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameFriendListReq.AppID)
}
#endif
inline void GameFriendListReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameFriendListReq.AppID)
}
inline void GameFriendListReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameFriendListReq.AppID)
}
inline ::std::string* GameFriendListReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameFriendListReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameFriendListReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameFriendListReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameFriendListReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameFriendListReq.AppID)
}

// -------------------------------------------------------------------

// GameFriendListResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GameFriendListResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameFriendListResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameFriendListResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameFriendListResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GameFriendListResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameFriendListResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GameFriendListResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameFriendListResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GameFriendListResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameFriendListResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GameFriendListResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameFriendListResp.BaseResponse)
}

// required int32 Count = 2;
inline bool GameFriendListResp::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameFriendListResp::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameFriendListResp::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameFriendListResp::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GameFriendListResp::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GameFriendListResp.Count)
  return count_;
}
inline void GameFriendListResp::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameFriendListResp.Count)
}

// repeated .micromsg.UserGameInfo FriendList = 3;
inline int GameFriendListResp::friendlist_size() const {
  return friendlist_.size();
}
inline void GameFriendListResp::clear_friendlist() {
  friendlist_.Clear();
}
inline const ::micromsg::UserGameInfo& GameFriendListResp::friendlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameFriendListResp.FriendList)
  return friendlist_.Get(index);
}
inline ::micromsg::UserGameInfo* GameFriendListResp::mutable_friendlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameFriendListResp.FriendList)
  return friendlist_.Mutable(index);
}
inline ::micromsg::UserGameInfo* GameFriendListResp::add_friendlist() {
  // @@protoc_insertion_point(field_add:micromsg.GameFriendListResp.FriendList)
  return friendlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameInfo >*
GameFriendListResp::mutable_friendlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameFriendListResp.FriendList)
  return &friendlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameInfo >&
GameFriendListResp::friendlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameFriendListResp.FriendList)
  return friendlist_;
}

// -------------------------------------------------------------------

// GameWishListReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GameWishListReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameWishListReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameWishListReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameWishListReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GameWishListReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameWishListReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GameWishListReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameWishListReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GameWishListReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameWishListReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GameWishListReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameWishListReq.BaseRequest)
}

// optional string AppID = 2;
inline bool GameWishListReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameWishListReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameWishListReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameWishListReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
inline const ::std::string& GameWishListReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameWishListReq.AppID)
  return appid_.GetNoArena();
}
inline void GameWishListReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameWishListReq.AppID)
}
#if LANG_CXX11
inline void GameWishListReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameWishListReq.AppID)
}
#endif
inline void GameWishListReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameWishListReq.AppID)
}
inline void GameWishListReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameWishListReq.AppID)
}
inline ::std::string* GameWishListReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameWishListReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameWishListReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameWishListReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameWishListReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameWishListReq.AppID)
}

// -------------------------------------------------------------------

// GameWishListResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GameWishListResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameWishListResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameWishListResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameWishListResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GameWishListResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameWishListResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GameWishListResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameWishListResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GameWishListResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameWishListResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GameWishListResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameWishListResp.BaseResponse)
}

// required int32 Count = 2;
inline bool GameWishListResp::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameWishListResp::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameWishListResp::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameWishListResp::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GameWishListResp::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GameWishListResp.Count)
  return count_;
}
inline void GameWishListResp::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameWishListResp.Count)
}

// repeated .micromsg.UserGameWishInfo WishList = 3;
inline int GameWishListResp::wishlist_size() const {
  return wishlist_.size();
}
inline void GameWishListResp::clear_wishlist() {
  wishlist_.Clear();
}
inline const ::micromsg::UserGameWishInfo& GameWishListResp::wishlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameWishListResp.WishList)
  return wishlist_.Get(index);
}
inline ::micromsg::UserGameWishInfo* GameWishListResp::mutable_wishlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameWishListResp.WishList)
  return wishlist_.Mutable(index);
}
inline ::micromsg::UserGameWishInfo* GameWishListResp::add_wishlist() {
  // @@protoc_insertion_point(field_add:micromsg.GameWishListResp.WishList)
  return wishlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameWishInfo >*
GameWishListResp::mutable_wishlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameWishListResp.WishList)
  return &wishlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::UserGameWishInfo >&
GameWishListResp::wishlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameWishListResp.WishList)
  return wishlist_;
}

// -------------------------------------------------------------------

// GameShareReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GameShareReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameShareReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameShareReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameShareReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GameShareReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameShareReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GameShareReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameShareReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GameShareReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameShareReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GameShareReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameShareReq.BaseRequest)
}

// optional string AppID = 2;
inline bool GameShareReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameShareReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameShareReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameShareReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
inline const ::std::string& GameShareReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameShareReq.AppID)
  return appid_.GetNoArena();
}
inline void GameShareReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameShareReq.AppID)
}
#if LANG_CXX11
inline void GameShareReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameShareReq.AppID)
}
#endif
inline void GameShareReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameShareReq.AppID)
}
inline void GameShareReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameShareReq.AppID)
}
inline ::std::string* GameShareReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameShareReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameShareReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameShareReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameShareReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameShareReq.AppID)
}

// required uint32 Type = 3;
inline bool GameShareReq::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameShareReq::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameShareReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameShareReq::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 GameShareReq::type() const {
  // @@protoc_insertion_point(field_get:micromsg.GameShareReq.Type)
  return type_;
}
inline void GameShareReq::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameShareReq.Type)
}

// required uint32 Score = 4;
inline bool GameShareReq::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameShareReq::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameShareReq::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameShareReq::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 GameShareReq::score() const {
  // @@protoc_insertion_point(field_get:micromsg.GameShareReq.Score)
  return score_;
}
inline void GameShareReq::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameShareReq.Score)
}

// optional string Achieve = 5;
inline bool GameShareReq::has_achieve() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameShareReq::set_has_achieve() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameShareReq::clear_has_achieve() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameShareReq::clear_achieve() {
  achieve_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_achieve();
}
inline const ::std::string& GameShareReq::achieve() const {
  // @@protoc_insertion_point(field_get:micromsg.GameShareReq.Achieve)
  return achieve_.GetNoArena();
}
inline void GameShareReq::set_achieve(const ::std::string& value) {
  set_has_achieve();
  achieve_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameShareReq.Achieve)
}
#if LANG_CXX11
inline void GameShareReq::set_achieve(::std::string&& value) {
  set_has_achieve();
  achieve_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameShareReq.Achieve)
}
#endif
inline void GameShareReq::set_achieve(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_achieve();
  achieve_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameShareReq.Achieve)
}
inline void GameShareReq::set_achieve(const char* value, size_t size) {
  set_has_achieve();
  achieve_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameShareReq.Achieve)
}
inline ::std::string* GameShareReq::mutable_achieve() {
  set_has_achieve();
  // @@protoc_insertion_point(field_mutable:micromsg.GameShareReq.Achieve)
  return achieve_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameShareReq::release_achieve() {
  // @@protoc_insertion_point(field_release:micromsg.GameShareReq.Achieve)
  clear_has_achieve();
  return achieve_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameShareReq::set_allocated_achieve(::std::string* achieve) {
  if (achieve != NULL) {
    set_has_achieve();
  } else {
    clear_has_achieve();
  }
  achieve_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), achieve);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameShareReq.Achieve)
}

// -------------------------------------------------------------------

// GameShareResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GameShareResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameShareResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameShareResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameShareResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GameShareResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameShareResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GameShareResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameShareResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GameShareResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameShareResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GameShareResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameShareResp.BaseResponse)
}

// -------------------------------------------------------------------

// GameResourceReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GameResourceReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameResourceReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameResourceReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameResourceReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GameResourceReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameResourceReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GameResourceReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameResourceReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GameResourceReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameResourceReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GameResourceReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameResourceReq.BaseRequest)
}

// required int32 PropsCount = 2;
inline bool GameResourceReq::has_propscount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameResourceReq::set_has_propscount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameResourceReq::clear_has_propscount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameResourceReq::clear_propscount() {
  propscount_ = 0;
  clear_has_propscount();
}
inline ::google::protobuf::int32 GameResourceReq::propscount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameResourceReq.PropsCount)
  return propscount_;
}
inline void GameResourceReq::set_propscount(::google::protobuf::int32 value) {
  set_has_propscount();
  propscount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameResourceReq.PropsCount)
}

// repeated uint32 PropsIdList = 3 [packed = true];
inline int GameResourceReq::propsidlist_size() const {
  return propsidlist_.size();
}
inline void GameResourceReq::clear_propsidlist() {
  propsidlist_.Clear();
}
inline ::google::protobuf::uint32 GameResourceReq::propsidlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameResourceReq.PropsIdList)
  return propsidlist_.Get(index);
}
inline void GameResourceReq::set_propsidlist(int index, ::google::protobuf::uint32 value) {
  propsidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.GameResourceReq.PropsIdList)
}
inline void GameResourceReq::add_propsidlist(::google::protobuf::uint32 value) {
  propsidlist_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.GameResourceReq.PropsIdList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GameResourceReq::propsidlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameResourceReq.PropsIdList)
  return propsidlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GameResourceReq::mutable_propsidlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameResourceReq.PropsIdList)
  return &propsidlist_;
}

// -------------------------------------------------------------------

// GameResourceResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GameResourceResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameResourceResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameResourceResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameResourceResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GameResourceResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameResourceResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GameResourceResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameResourceResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GameResourceResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameResourceResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GameResourceResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameResourceResp.BaseResponse)
}

// required int32 PropsCount = 2;
inline bool GameResourceResp::has_propscount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameResourceResp::set_has_propscount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameResourceResp::clear_has_propscount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameResourceResp::clear_propscount() {
  propscount_ = 0;
  clear_has_propscount();
}
inline ::google::protobuf::int32 GameResourceResp::propscount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameResourceResp.PropsCount)
  return propscount_;
}
inline void GameResourceResp::set_propscount(::google::protobuf::int32 value) {
  set_has_propscount();
  propscount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameResourceResp.PropsCount)
}

// repeated .micromsg.GamePropsInfo PropsList = 3;
inline int GameResourceResp::propslist_size() const {
  return propslist_.size();
}
inline void GameResourceResp::clear_propslist() {
  propslist_.Clear();
}
inline const ::micromsg::GamePropsInfo& GameResourceResp::propslist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GameResourceResp.PropsList)
  return propslist_.Get(index);
}
inline ::micromsg::GamePropsInfo* GameResourceResp::mutable_propslist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GameResourceResp.PropsList)
  return propslist_.Mutable(index);
}
inline ::micromsg::GamePropsInfo* GameResourceResp::add_propslist() {
  // @@protoc_insertion_point(field_add:micromsg.GameResourceResp.PropsList)
  return propslist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::GamePropsInfo >*
GameResourceResp::mutable_propslist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GameResourceResp.PropsList)
  return &propslist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::GamePropsInfo >&
GameResourceResp::propslist() const {
  // @@protoc_insertion_point(field_list:micromsg.GameResourceResp.PropsList)
  return propslist_;
}

// -------------------------------------------------------------------

// GameConsumeReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GameConsumeReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameConsumeReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameConsumeReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameConsumeReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GameConsumeReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameConsumeReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GameConsumeReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameConsumeReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GameConsumeReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameConsumeReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GameConsumeReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameConsumeReq.BaseRequest)
}

// optional string AppID = 2;
inline bool GameConsumeReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameConsumeReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameConsumeReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameConsumeReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
inline const ::std::string& GameConsumeReq::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameConsumeReq.AppID)
  return appid_.GetNoArena();
}
inline void GameConsumeReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameConsumeReq.AppID)
}
#if LANG_CXX11
inline void GameConsumeReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameConsumeReq.AppID)
}
#endif
inline void GameConsumeReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameConsumeReq.AppID)
}
inline void GameConsumeReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameConsumeReq.AppID)
}
inline ::std::string* GameConsumeReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.GameConsumeReq.AppID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameConsumeReq::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.GameConsumeReq.AppID)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameConsumeReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameConsumeReq.AppID)
}

// -------------------------------------------------------------------

// GameConsumeResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GameConsumeResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameConsumeResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameConsumeResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameConsumeResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GameConsumeResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameConsumeResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GameConsumeResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameConsumeResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GameConsumeResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameConsumeResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GameConsumeResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameConsumeResp.BaseResponse)
}

// required uint32 ConsumeOk = 2;
inline bool GameConsumeResp::has_consumeok() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameConsumeResp::set_has_consumeok() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameConsumeResp::clear_has_consumeok() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameConsumeResp::clear_consumeok() {
  consumeok_ = 0u;
  clear_has_consumeok();
}
inline ::google::protobuf::uint32 GameConsumeResp::consumeok() const {
  // @@protoc_insertion_point(field_get:micromsg.GameConsumeResp.ConsumeOk)
  return consumeok_;
}
inline void GameConsumeResp::set_consumeok(::google::protobuf::uint32 value) {
  set_has_consumeok();
  consumeok_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameConsumeResp.ConsumeOk)
}

// required uint32 GameCoinCount = 3;
inline bool GameConsumeResp::has_gamecoincount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameConsumeResp::set_has_gamecoincount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameConsumeResp::clear_has_gamecoincount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameConsumeResp::clear_gamecoincount() {
  gamecoincount_ = 0u;
  clear_has_gamecoincount();
}
inline ::google::protobuf::uint32 GameConsumeResp::gamecoincount() const {
  // @@protoc_insertion_point(field_get:micromsg.GameConsumeResp.GameCoinCount)
  return gamecoincount_;
}
inline void GameConsumeResp::set_gamecoincount(::google::protobuf::uint32 value) {
  set_has_gamecoincount();
  gamecoincount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameConsumeResp.GameCoinCount)
}

// -------------------------------------------------------------------

// AddGameMsg

// required int32 MsgId = 1;
inline bool AddGameMsg::has_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddGameMsg::set_has_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddGameMsg::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddGameMsg::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::google::protobuf::int32 AddGameMsg::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.AddGameMsg.MsgId)
  return msgid_;
}
inline void AddGameMsg::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddGameMsg.MsgId)
}

// optional string FromUserName = 2;
inline bool AddGameMsg::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddGameMsg::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddGameMsg::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddGameMsg::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
inline const ::std::string& AddGameMsg::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.AddGameMsg.FromUserName)
  return fromusername_.GetNoArena();
}
inline void AddGameMsg::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AddGameMsg.FromUserName)
}
#if LANG_CXX11
inline void AddGameMsg::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AddGameMsg.FromUserName)
}
#endif
inline void AddGameMsg::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AddGameMsg.FromUserName)
}
inline void AddGameMsg::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AddGameMsg.FromUserName)
}
inline ::std::string* AddGameMsg::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.AddGameMsg.FromUserName)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddGameMsg::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.AddGameMsg.FromUserName)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddGameMsg::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddGameMsg.FromUserName)
}

// optional string ToUserName = 3;
inline bool AddGameMsg::has_tousername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddGameMsg::set_has_tousername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddGameMsg::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddGameMsg::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
inline const ::std::string& AddGameMsg::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.AddGameMsg.ToUserName)
  return tousername_.GetNoArena();
}
inline void AddGameMsg::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AddGameMsg.ToUserName)
}
#if LANG_CXX11
inline void AddGameMsg::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AddGameMsg.ToUserName)
}
#endif
inline void AddGameMsg::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AddGameMsg.ToUserName)
}
inline void AddGameMsg::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AddGameMsg.ToUserName)
}
inline ::std::string* AddGameMsg::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.AddGameMsg.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddGameMsg::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.AddGameMsg.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddGameMsg::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddGameMsg.ToUserName)
}

// required int32 Type = 4;
inline bool AddGameMsg::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddGameMsg::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddGameMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddGameMsg::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 AddGameMsg::type() const {
  // @@protoc_insertion_point(field_get:micromsg.AddGameMsg.Type)
  return type_;
}
inline void AddGameMsg::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddGameMsg.Type)
}

// required uint32 Flag = 5;
inline bool AddGameMsg::has_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AddGameMsg::set_has_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AddGameMsg::clear_has_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AddGameMsg::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 AddGameMsg::flag() const {
  // @@protoc_insertion_point(field_get:micromsg.AddGameMsg.Flag)
  return flag_;
}
inline void AddGameMsg::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddGameMsg.Flag)
}

// required uint32 Status = 6;
inline bool AddGameMsg::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AddGameMsg::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AddGameMsg::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AddGameMsg::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 AddGameMsg::status() const {
  // @@protoc_insertion_point(field_get:micromsg.AddGameMsg.Status)
  return status_;
}
inline void AddGameMsg::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddGameMsg.Status)
}

// required uint32 UpdateTime = 7;
inline bool AddGameMsg::has_updatetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AddGameMsg::set_has_updatetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AddGameMsg::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AddGameMsg::clear_updatetime() {
  updatetime_ = 0u;
  clear_has_updatetime();
}
inline ::google::protobuf::uint32 AddGameMsg::updatetime() const {
  // @@protoc_insertion_point(field_get:micromsg.AddGameMsg.UpdateTime)
  return updatetime_;
}
inline void AddGameMsg::set_updatetime(::google::protobuf::uint32 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddGameMsg.UpdateTime)
}

// required uint32 UpdateSeq = 8;
inline bool AddGameMsg::has_updateseq() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AddGameMsg::set_has_updateseq() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AddGameMsg::clear_has_updateseq() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AddGameMsg::clear_updateseq() {
  updateseq_ = 0u;
  clear_has_updateseq();
}
inline ::google::protobuf::uint32 AddGameMsg::updateseq() const {
  // @@protoc_insertion_point(field_get:micromsg.AddGameMsg.UpdateSeq)
  return updateseq_;
}
inline void AddGameMsg::set_updateseq(::google::protobuf::uint32 value) {
  set_has_updateseq();
  updateseq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddGameMsg.UpdateSeq)
}

// -------------------------------------------------------------------

// GameSyncRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GameSyncRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameSyncRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameSyncRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameSyncRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GameSyncRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GameSyncRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GameSyncRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameSyncRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GameSyncRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GameSyncRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GameSyncRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameSyncRequest.BaseRequest)
}

// required uint32 Selector = 2;
inline bool GameSyncRequest::has_selector() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameSyncRequest::set_has_selector() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameSyncRequest::clear_has_selector() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameSyncRequest::clear_selector() {
  selector_ = 0u;
  clear_has_selector();
}
inline ::google::protobuf::uint32 GameSyncRequest::selector() const {
  // @@protoc_insertion_point(field_get:micromsg.GameSyncRequest.Selector)
  return selector_;
}
inline void GameSyncRequest::set_selector(::google::protobuf::uint32 value) {
  set_has_selector();
  selector_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameSyncRequest.Selector)
}

// required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
inline bool GameSyncRequest::has_keybuf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameSyncRequest::set_has_keybuf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameSyncRequest::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameSyncRequest::clear_keybuf() {
  if (keybuf_ != NULL) keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_keybuf();
}
inline const ::micromsg::SKBuiltinBuffer_t& GameSyncRequest::keybuf() const {
  // @@protoc_insertion_point(field_get:micromsg.GameSyncRequest.KeyBuf)
  return keybuf_ != NULL ? *keybuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* GameSyncRequest::mutable_keybuf() {
  set_has_keybuf();
  if (keybuf_ == NULL) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameSyncRequest.KeyBuf)
  return keybuf_;
}
inline ::micromsg::SKBuiltinBuffer_t* GameSyncRequest::release_keybuf() {
  // @@protoc_insertion_point(field_release:micromsg.GameSyncRequest.KeyBuf)
  clear_has_keybuf();
  ::micromsg::SKBuiltinBuffer_t* temp = keybuf_;
  keybuf_ = NULL;
  return temp;
}
inline void GameSyncRequest::set_allocated_keybuf(::micromsg::SKBuiltinBuffer_t* keybuf) {
  delete keybuf_;
  keybuf_ = keybuf;
  if (keybuf) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameSyncRequest.KeyBuf)
}

// -------------------------------------------------------------------

// GameSyncResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GameSyncResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameSyncResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameSyncResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameSyncResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GameSyncResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GameSyncResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GameSyncResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameSyncResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GameSyncResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GameSyncResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GameSyncResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameSyncResponse.BaseResponse)
}

// required .micromsg.CmdList CmdList = 2;
inline bool GameSyncResponse::has_cmdlist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameSyncResponse::set_has_cmdlist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameSyncResponse::clear_has_cmdlist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameSyncResponse::clear_cmdlist() {
  if (cmdlist_ != NULL) cmdlist_->::micromsg::CmdList::Clear();
  clear_has_cmdlist();
}
inline const ::micromsg::CmdList& GameSyncResponse::cmdlist() const {
  // @@protoc_insertion_point(field_get:micromsg.GameSyncResponse.CmdList)
  return cmdlist_ != NULL ? *cmdlist_
                         : *::micromsg::CmdList::internal_default_instance();
}
inline ::micromsg::CmdList* GameSyncResponse::mutable_cmdlist() {
  set_has_cmdlist();
  if (cmdlist_ == NULL) {
    cmdlist_ = new ::micromsg::CmdList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameSyncResponse.CmdList)
  return cmdlist_;
}
inline ::micromsg::CmdList* GameSyncResponse::release_cmdlist() {
  // @@protoc_insertion_point(field_release:micromsg.GameSyncResponse.CmdList)
  clear_has_cmdlist();
  ::micromsg::CmdList* temp = cmdlist_;
  cmdlist_ = NULL;
  return temp;
}
inline void GameSyncResponse::set_allocated_cmdlist(::micromsg::CmdList* cmdlist) {
  delete cmdlist_;
  cmdlist_ = cmdlist;
  if (cmdlist) {
    set_has_cmdlist();
  } else {
    clear_has_cmdlist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameSyncResponse.CmdList)
}

// required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
inline bool GameSyncResponse::has_keybuf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameSyncResponse::set_has_keybuf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameSyncResponse::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameSyncResponse::clear_keybuf() {
  if (keybuf_ != NULL) keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_keybuf();
}
inline const ::micromsg::SKBuiltinBuffer_t& GameSyncResponse::keybuf() const {
  // @@protoc_insertion_point(field_get:micromsg.GameSyncResponse.KeyBuf)
  return keybuf_ != NULL ? *keybuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* GameSyncResponse::mutable_keybuf() {
  set_has_keybuf();
  if (keybuf_ == NULL) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GameSyncResponse.KeyBuf)
  return keybuf_;
}
inline ::micromsg::SKBuiltinBuffer_t* GameSyncResponse::release_keybuf() {
  // @@protoc_insertion_point(field_release:micromsg.GameSyncResponse.KeyBuf)
  clear_has_keybuf();
  ::micromsg::SKBuiltinBuffer_t* temp = keybuf_;
  keybuf_ = NULL;
  return temp;
}
inline void GameSyncResponse::set_allocated_keybuf(::micromsg::SKBuiltinBuffer_t* keybuf) {
  delete keybuf_;
  keybuf_ = keybuf;
  if (keybuf) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameSyncResponse.KeyBuf)
}

// required uint32 ContinueFlag = 4;
inline bool GameSyncResponse::has_continueflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameSyncResponse::set_has_continueflag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameSyncResponse::clear_has_continueflag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameSyncResponse::clear_continueflag() {
  continueflag_ = 0u;
  clear_has_continueflag();
}
inline ::google::protobuf::uint32 GameSyncResponse::continueflag() const {
  // @@protoc_insertion_point(field_get:micromsg.GameSyncResponse.ContinueFlag)
  return continueflag_;
}
inline void GameSyncResponse::set_continueflag(::google::protobuf::uint32 value) {
  set_has_continueflag();
  continueflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameSyncResponse.ContinueFlag)
}

// -------------------------------------------------------------------

// GameMsg

// required uint32 MsgId = 1;
inline bool GameMsg::has_msgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameMsg::set_has_msgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameMsg::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameMsg::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 GameMsg::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.GameMsg.MsgId)
  return msgid_;
}
inline void GameMsg::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameMsg.MsgId)
}

// required uint32 Status = 2;
inline bool GameMsg::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameMsg::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameMsg::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameMsg::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 GameMsg::status() const {
  // @@protoc_insertion_point(field_get:micromsg.GameMsg.Status)
  return status_;
}
inline void GameMsg::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameMsg.Status)
}

// optional string Object = 3;
inline bool GameMsg::has_object() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameMsg::set_has_object() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameMsg::clear_has_object() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameMsg::clear_object() {
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object();
}
inline const ::std::string& GameMsg::object() const {
  // @@protoc_insertion_point(field_get:micromsg.GameMsg.Object)
  return object_.GetNoArena();
}
inline void GameMsg::set_object(const ::std::string& value) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GameMsg.Object)
}
#if LANG_CXX11
inline void GameMsg::set_object(::std::string&& value) {
  set_has_object();
  object_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GameMsg.Object)
}
#endif
inline void GameMsg::set_object(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GameMsg.Object)
}
inline void GameMsg::set_object(const char* value, size_t size) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GameMsg.Object)
}
inline ::std::string* GameMsg::mutable_object() {
  set_has_object();
  // @@protoc_insertion_point(field_mutable:micromsg.GameMsg.Object)
  return object_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameMsg::release_object() {
  // @@protoc_insertion_point(field_release:micromsg.GameMsg.Object)
  clear_has_object();
  return object_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameMsg::set_allocated_object(::std::string* object) {
  if (object != NULL) {
    set_has_object();
  } else {
    clear_has_object();
  }
  object_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GameMsg.Object)
}

// required uint32 UpdateTime = 4;
inline bool GameMsg::has_updatetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameMsg::set_has_updatetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameMsg::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameMsg::clear_updatetime() {
  updatetime_ = 0u;
  clear_has_updatetime();
}
inline ::google::protobuf::uint32 GameMsg::updatetime() const {
  // @@protoc_insertion_point(field_get:micromsg.GameMsg.UpdateTime)
  return updatetime_;
}
inline void GameMsg::set_updatetime(::google::protobuf::uint32 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameMsg.UpdateTime)
}

// required uint32 UpdateSeq = 5;
inline bool GameMsg::has_updateseq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameMsg::set_has_updateseq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameMsg::clear_has_updateseq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameMsg::clear_updateseq() {
  updateseq_ = 0u;
  clear_has_updateseq();
}
inline ::google::protobuf::uint32 GameMsg::updateseq() const {
  // @@protoc_insertion_point(field_get:micromsg.GameMsg.UpdateSeq)
  return updateseq_;
}
inline void GameMsg::set_updateseq(::google::protobuf::uint32 value) {
  set_has_updateseq();
  updateseq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GameMsg.UpdateSeq)
}

// -------------------------------------------------------------------

// BatchGetGameMsgRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool BatchGetGameMsgRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchGetGameMsgRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchGetGameMsgRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchGetGameMsgRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& BatchGetGameMsgRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetGameMsgRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* BatchGetGameMsgRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetGameMsgRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* BatchGetGameMsgRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BatchGetGameMsgRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void BatchGetGameMsgRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchGetGameMsgRequest.BaseRequest)
}

// required uint32 Count = 2;
inline bool BatchGetGameMsgRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchGetGameMsgRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchGetGameMsgRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchGetGameMsgRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 BatchGetGameMsgRequest::count() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetGameMsgRequest.Count)
  return count_;
}
inline void BatchGetGameMsgRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchGetGameMsgRequest.Count)
}

// repeated uint32 MsgIdList = 3 [packed = true];
inline int BatchGetGameMsgRequest::msgidlist_size() const {
  return msgidlist_.size();
}
inline void BatchGetGameMsgRequest::clear_msgidlist() {
  msgidlist_.Clear();
}
inline ::google::protobuf::uint32 BatchGetGameMsgRequest::msgidlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetGameMsgRequest.MsgIdList)
  return msgidlist_.Get(index);
}
inline void BatchGetGameMsgRequest::set_msgidlist(int index, ::google::protobuf::uint32 value) {
  msgidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.BatchGetGameMsgRequest.MsgIdList)
}
inline void BatchGetGameMsgRequest::add_msgidlist(::google::protobuf::uint32 value) {
  msgidlist_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.BatchGetGameMsgRequest.MsgIdList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BatchGetGameMsgRequest::msgidlist() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchGetGameMsgRequest.MsgIdList)
  return msgidlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BatchGetGameMsgRequest::mutable_msgidlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchGetGameMsgRequest.MsgIdList)
  return &msgidlist_;
}

// -------------------------------------------------------------------

// BatchGetGameMsgResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool BatchGetGameMsgResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchGetGameMsgResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchGetGameMsgResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchGetGameMsgResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& BatchGetGameMsgResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetGameMsgResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* BatchGetGameMsgResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetGameMsgResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* BatchGetGameMsgResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BatchGetGameMsgResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void BatchGetGameMsgResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchGetGameMsgResponse.BaseResponse)
}

// required uint32 Count = 2;
inline bool BatchGetGameMsgResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchGetGameMsgResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchGetGameMsgResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchGetGameMsgResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 BatchGetGameMsgResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetGameMsgResponse.Count)
  return count_;
}
inline void BatchGetGameMsgResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchGetGameMsgResponse.Count)
}

// repeated .micromsg.GameMsg MsgList = 3;
inline int BatchGetGameMsgResponse::msglist_size() const {
  return msglist_.size();
}
inline void BatchGetGameMsgResponse::clear_msglist() {
  msglist_.Clear();
}
inline const ::micromsg::GameMsg& BatchGetGameMsgResponse::msglist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetGameMsgResponse.MsgList)
  return msglist_.Get(index);
}
inline ::micromsg::GameMsg* BatchGetGameMsgResponse::mutable_msglist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetGameMsgResponse.MsgList)
  return msglist_.Mutable(index);
}
inline ::micromsg::GameMsg* BatchGetGameMsgResponse::add_msglist() {
  // @@protoc_insertion_point(field_add:micromsg.BatchGetGameMsgResponse.MsgList)
  return msglist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::GameMsg >*
BatchGetGameMsgResponse::mutable_msglist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchGetGameMsgResponse.MsgList)
  return &msglist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::GameMsg >&
BatchGetGameMsgResponse::msglist() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchGetGameMsgResponse.MsgList)
  return msglist_;
}

// -------------------------------------------------------------------

// BatchDelGameMsgRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool BatchDelGameMsgRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchDelGameMsgRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchDelGameMsgRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchDelGameMsgRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& BatchDelGameMsgRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelGameMsgRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* BatchDelGameMsgRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchDelGameMsgRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* BatchDelGameMsgRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BatchDelGameMsgRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void BatchDelGameMsgRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchDelGameMsgRequest.BaseRequest)
}

// required uint32 Count = 2;
inline bool BatchDelGameMsgRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchDelGameMsgRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchDelGameMsgRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchDelGameMsgRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 BatchDelGameMsgRequest::count() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelGameMsgRequest.Count)
  return count_;
}
inline void BatchDelGameMsgRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchDelGameMsgRequest.Count)
}

// repeated uint32 MsgIdList = 3 [packed = true];
inline int BatchDelGameMsgRequest::msgidlist_size() const {
  return msgidlist_.size();
}
inline void BatchDelGameMsgRequest::clear_msgidlist() {
  msgidlist_.Clear();
}
inline ::google::protobuf::uint32 BatchDelGameMsgRequest::msgidlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelGameMsgRequest.MsgIdList)
  return msgidlist_.Get(index);
}
inline void BatchDelGameMsgRequest::set_msgidlist(int index, ::google::protobuf::uint32 value) {
  msgidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.BatchDelGameMsgRequest.MsgIdList)
}
inline void BatchDelGameMsgRequest::add_msgidlist(::google::protobuf::uint32 value) {
  msgidlist_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.BatchDelGameMsgRequest.MsgIdList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BatchDelGameMsgRequest::msgidlist() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchDelGameMsgRequest.MsgIdList)
  return msgidlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BatchDelGameMsgRequest::mutable_msgidlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchDelGameMsgRequest.MsgIdList)
  return &msgidlist_;
}

// -------------------------------------------------------------------

// DelGameMsgRsp

// required int32 Ret = 1;
inline bool DelGameMsgRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelGameMsgRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelGameMsgRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelGameMsgRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 DelGameMsgRsp::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.DelGameMsgRsp.Ret)
  return ret_;
}
inline void DelGameMsgRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelGameMsgRsp.Ret)
}

// required uint32 MsgId = 2;
inline bool DelGameMsgRsp::has_msgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelGameMsgRsp::set_has_msgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelGameMsgRsp::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelGameMsgRsp::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 DelGameMsgRsp::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DelGameMsgRsp.MsgId)
  return msgid_;
}
inline void DelGameMsgRsp::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelGameMsgRsp.MsgId)
}

// -------------------------------------------------------------------

// BatchDelGameMsgResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool BatchDelGameMsgResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchDelGameMsgResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchDelGameMsgResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchDelGameMsgResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& BatchDelGameMsgResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelGameMsgResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* BatchDelGameMsgResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchDelGameMsgResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* BatchDelGameMsgResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BatchDelGameMsgResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void BatchDelGameMsgResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchDelGameMsgResponse.BaseResponse)
}

// required uint32 Count = 2;
inline bool BatchDelGameMsgResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchDelGameMsgResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchDelGameMsgResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchDelGameMsgResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 BatchDelGameMsgResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelGameMsgResponse.Count)
  return count_;
}
inline void BatchDelGameMsgResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchDelGameMsgResponse.Count)
}

// repeated .micromsg.DelGameMsgRsp List = 3;
inline int BatchDelGameMsgResponse::list_size() const {
  return list_.size();
}
inline void BatchDelGameMsgResponse::clear_list() {
  list_.Clear();
}
inline const ::micromsg::DelGameMsgRsp& BatchDelGameMsgResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelGameMsgResponse.List)
  return list_.Get(index);
}
inline ::micromsg::DelGameMsgRsp* BatchDelGameMsgResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchDelGameMsgResponse.List)
  return list_.Mutable(index);
}
inline ::micromsg::DelGameMsgRsp* BatchDelGameMsgResponse::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.BatchDelGameMsgResponse.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::DelGameMsgRsp >*
BatchDelGameMsgResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchDelGameMsgResponse.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::DelGameMsgRsp >&
BatchDelGameMsgResponse::list() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchDelGameMsgResponse.List)
  return list_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace micromsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mmgame_2eproto__INCLUDED
