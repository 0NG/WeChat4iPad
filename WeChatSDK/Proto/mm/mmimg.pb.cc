// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmimg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mmimg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micromsg {
class GetUpdateInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetUpdateInfoRequest> {
} _GetUpdateInfoRequest_default_instance_;
class GetUpdateInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetUpdateInfoResponse> {
} _GetUpdateInfoResponse_default_instance_;
class GetUpdatePackRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetUpdatePackRequest> {
} _GetUpdatePackRequest_default_instance_;
class GetUpdatePackResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetUpdatePackResponse> {
} _GetUpdatePackResponse_default_instance_;

namespace protobuf_mmimg_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdateInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdateInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdateInfoRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdateInfoRequest, updatetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdateInfoRequest, channel_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdateInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdateInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdateInfoResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdateInfoResponse, packversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdateInfoResponse, packmd5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdateInfoResponse, packsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdateInfoResponse, packdescription_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdateInfoResponse, urlcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdateInfoResponse, downloadurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdateInfoResponse, patchinfo_),
  3,
  4,
  0,
  5,
  1,
  6,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatePackRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatePackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatePackRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatePackRequest, updatetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatePackRequest, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatePackRequest, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatePackRequest, channel_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatePackResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatePackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatePackResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatePackResponse, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatePackResponse, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatePackResponse, datalen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatePackResponse, data_),
  0,
  2,
  3,
  4,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(GetUpdateInfoRequest)},
  { 11, 24, sizeof(GetUpdateInfoResponse)},
  { 32, 42, sizeof(GetUpdatePackRequest)},
  { 47, 57, sizeof(GetUpdatePackResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetUpdateInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetUpdateInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetUpdatePackRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetUpdatePackResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mmimg.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _GetUpdateInfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _GetUpdateInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _GetUpdatePackRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _GetUpdatePackResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::micromsg::protobuf_mmbuiltintype_2eproto::InitDefaults();
  ::micromsg::protobuf_mmbase_2eproto::InitDefaults();
  _GetUpdateInfoRequest_default_instance_.DefaultConstruct();
  _GetUpdateInfoResponse_default_instance_.DefaultConstruct();
  _GetUpdatePackRequest_default_instance_.DefaultConstruct();
  _GetUpdatePackResponse_default_instance_.DefaultConstruct();
  _GetUpdateInfoRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetUpdateInfoResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetUpdatePackRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetUpdatePackResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetUpdatePackResponse_default_instance_.get_mutable()->data_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013mmimg.proto\022\010micromsg\032\023mmbuiltintype.p"
      "roto\032\014mmbase.proto\"g\n\024GetUpdateInfoReque"
      "st\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseR"
      "equest\022\022\n\nUpdateType\030\002 \002(\r\022\017\n\007Channel\030\003 "
      "\001(\r\"\355\001\n\025GetUpdateInfoResponse\022,\n\014BaseRes"
      "ponse\030\001 \002(\0132\026.micromsg.BaseResponse\022\023\n\013P"
      "ackVersion\030\002 \002(\r\022\017\n\007PackMd5\030\003 \001(\t\022\020\n\010Pac"
      "kSize\030\004 \002(\r\022\027\n\017PackDescription\030\005 \001(\t\022\020\n\010"
      "UrlCount\030\006 \001(\r\0220\n\013DownLoadUrl\030\007 \003(\0132\033.mi"
      "cromsg.SKBuiltinString_t\022\021\n\tPatchInfo\030\010 "
      "\001(\t\"\213\001\n\024GetUpdatePackRequest\022*\n\013BaseRequ"
      "est\030\001 \002(\0132\025.micromsg.BaseRequest\022\022\n\nUpda"
      "teType\030\002 \002(\r\022\020\n\010TotalLen\030\003 \002(\r\022\020\n\010StartP"
      "os\030\004 \002(\r\022\017\n\007Channel\030\005 \001(\r\"\245\001\n\025GetUpdateP"
      "ackResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micr"
      "omsg.BaseResponse\022\020\n\010TotalLen\030\002 \002(\r\022\020\n\010S"
      "tartPos\030\003 \002(\r\022\017\n\007DataLen\030\004 \002(\r\022)\n\004Data\030\005"
      " \002(\0132\033.micromsg.SKBuiltinBuffer_t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 713);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mmimg.proto", &protobuf_RegisterTypes);
  ::micromsg::protobuf_mmbuiltintype_2eproto::AddDescriptors();
  ::micromsg::protobuf_mmbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mmimg_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUpdateInfoRequest::kBaseRequestFieldNumber;
const int GetUpdateInfoRequest::kUpdateTypeFieldNumber;
const int GetUpdateInfoRequest::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUpdateInfoRequest::GetUpdateInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmimg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetUpdateInfoRequest)
}
GetUpdateInfoRequest::GetUpdateInfoRequest(const GetUpdateInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&updatetype_, &from.updatetype_,
    reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&updatetype_) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetUpdateInfoRequest)
}

void GetUpdateInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(channel_));
}

GetUpdateInfoRequest::~GetUpdateInfoRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetUpdateInfoRequest)
  SharedDtor();
}

void GetUpdateInfoRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetUpdateInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUpdateInfoRequest::descriptor() {
  protobuf_mmimg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmimg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetUpdateInfoRequest& GetUpdateInfoRequest::default_instance() {
  protobuf_mmimg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetUpdateInfoRequest* GetUpdateInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetUpdateInfoRequest* n = new GetUpdateInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetUpdateInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetUpdateInfoRequest)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&updatetype_, 0, reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&updatetype_) + sizeof(channel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetUpdateInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetUpdateInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 UpdateType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_updatetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Channel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetUpdateInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetUpdateInfoRequest)
  return false;
#undef DO_
}

void GetUpdateInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetUpdateInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 UpdateType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->updatetype(), output);
  }

  // optional uint32 Channel = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetUpdateInfoRequest)
}

::google::protobuf::uint8* GetUpdateInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetUpdateInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 UpdateType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->updatetype(), target);
  }

  // optional uint32 Channel = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetUpdateInfoRequest)
  return target;
}

size_t GetUpdateInfoRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetUpdateInfoRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_updatetype()) {
    // required uint32 UpdateType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updatetype());
  }

  return total_size;
}
size_t GetUpdateInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetUpdateInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 UpdateType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updatetype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 Channel = 3;
  if (has_channel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUpdateInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetUpdateInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUpdateInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetUpdateInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetUpdateInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetUpdateInfoRequest)
    MergeFrom(*source);
  }
}

void GetUpdateInfoRequest::MergeFrom(const GetUpdateInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetUpdateInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      updatetype_ = from.updatetype_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_ = from.channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetUpdateInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetUpdateInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUpdateInfoRequest::CopyFrom(const GetUpdateInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetUpdateInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdateInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetUpdateInfoRequest::Swap(GetUpdateInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUpdateInfoRequest::InternalSwap(GetUpdateInfoRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(updatetype_, other->updatetype_);
  std::swap(channel_, other->channel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetUpdateInfoRequest::GetMetadata() const {
  protobuf_mmimg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmimg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetUpdateInfoRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetUpdateInfoRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetUpdateInfoRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void GetUpdateInfoRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetUpdateInfoRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetUpdateInfoRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUpdateInfoRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetUpdateInfoRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetUpdateInfoRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetUpdateInfoRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetUpdateInfoRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetUpdateInfoRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetUpdateInfoRequest.BaseRequest)
}

// required uint32 UpdateType = 2;
bool GetUpdateInfoRequest::has_updatetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetUpdateInfoRequest::set_has_updatetype() {
  _has_bits_[0] |= 0x00000002u;
}
void GetUpdateInfoRequest::clear_has_updatetype() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetUpdateInfoRequest::clear_updatetype() {
  updatetype_ = 0u;
  clear_has_updatetype();
}
::google::protobuf::uint32 GetUpdateInfoRequest::updatetype() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUpdateInfoRequest.UpdateType)
  return updatetype_;
}
void GetUpdateInfoRequest::set_updatetype(::google::protobuf::uint32 value) {
  set_has_updatetype();
  updatetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetUpdateInfoRequest.UpdateType)
}

// optional uint32 Channel = 3;
bool GetUpdateInfoRequest::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetUpdateInfoRequest::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
void GetUpdateInfoRequest::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetUpdateInfoRequest::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
::google::protobuf::uint32 GetUpdateInfoRequest::channel() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUpdateInfoRequest.Channel)
  return channel_;
}
void GetUpdateInfoRequest::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetUpdateInfoRequest.Channel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUpdateInfoResponse::kBaseResponseFieldNumber;
const int GetUpdateInfoResponse::kPackVersionFieldNumber;
const int GetUpdateInfoResponse::kPackMd5FieldNumber;
const int GetUpdateInfoResponse::kPackSizeFieldNumber;
const int GetUpdateInfoResponse::kPackDescriptionFieldNumber;
const int GetUpdateInfoResponse::kUrlCountFieldNumber;
const int GetUpdateInfoResponse::kDownLoadUrlFieldNumber;
const int GetUpdateInfoResponse::kPatchInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUpdateInfoResponse::GetUpdateInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmimg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetUpdateInfoResponse)
}
GetUpdateInfoResponse::GetUpdateInfoResponse(const GetUpdateInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      downloadurl_(from.downloadurl_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  packmd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packmd5()) {
    packmd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packmd5_);
  }
  packdescription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packdescription()) {
    packdescription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packdescription_);
  }
  patchinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_patchinfo()) {
    patchinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.patchinfo_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&packversion_, &from.packversion_,
    reinterpret_cast<char*>(&urlcount_) -
    reinterpret_cast<char*>(&packversion_) + sizeof(urlcount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetUpdateInfoResponse)
}

void GetUpdateInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  packmd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packdescription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  patchinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&urlcount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(urlcount_));
}

GetUpdateInfoResponse::~GetUpdateInfoResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetUpdateInfoResponse)
  SharedDtor();
}

void GetUpdateInfoResponse::SharedDtor() {
  packmd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packdescription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  patchinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetUpdateInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUpdateInfoResponse::descriptor() {
  protobuf_mmimg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmimg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetUpdateInfoResponse& GetUpdateInfoResponse::default_instance() {
  protobuf_mmimg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetUpdateInfoResponse* GetUpdateInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetUpdateInfoResponse* n = new GetUpdateInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetUpdateInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetUpdateInfoResponse)
  downloadurl_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_packmd5()) {
      GOOGLE_DCHECK(!packmd5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*packmd5_.UnsafeRawStringPointer())->clear();
    }
    if (has_packdescription()) {
      GOOGLE_DCHECK(!packdescription_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*packdescription_.UnsafeRawStringPointer())->clear();
    }
    if (has_patchinfo()) {
      GOOGLE_DCHECK(!patchinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*patchinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 112u) {
    ::memset(&packversion_, 0, reinterpret_cast<char*>(&urlcount_) -
      reinterpret_cast<char*>(&packversion_) + sizeof(urlcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetUpdateInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetUpdateInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 PackVersion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_packversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PackMd5 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->packmd5().data(), this->packmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetUpdateInfoResponse.PackMd5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 PackSize = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_packsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PackDescription = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packdescription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->packdescription().data(), this->packdescription().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetUpdateInfoResponse.PackDescription");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 UrlCount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_urlcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &urlcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t DownLoadUrl = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_downloadurl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PatchInfo = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patchinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->patchinfo().data(), this->patchinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetUpdateInfoResponse.PatchInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetUpdateInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetUpdateInfoResponse)
  return false;
#undef DO_
}

void GetUpdateInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetUpdateInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 PackVersion = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->packversion(), output);
  }

  // optional string PackMd5 = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packmd5().data(), this->packmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetUpdateInfoResponse.PackMd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->packmd5(), output);
  }

  // required uint32 PackSize = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->packsize(), output);
  }

  // optional string PackDescription = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packdescription().data(), this->packdescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetUpdateInfoResponse.PackDescription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->packdescription(), output);
  }

  // optional uint32 UrlCount = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->urlcount(), output);
  }

  // repeated .micromsg.SKBuiltinString_t DownLoadUrl = 7;
  for (unsigned int i = 0, n = this->downloadurl_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->downloadurl(i), output);
  }

  // optional string PatchInfo = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patchinfo().data(), this->patchinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetUpdateInfoResponse.PatchInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->patchinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetUpdateInfoResponse)
}

::google::protobuf::uint8* GetUpdateInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetUpdateInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 PackVersion = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->packversion(), target);
  }

  // optional string PackMd5 = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packmd5().data(), this->packmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetUpdateInfoResponse.PackMd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->packmd5(), target);
  }

  // required uint32 PackSize = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->packsize(), target);
  }

  // optional string PackDescription = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packdescription().data(), this->packdescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetUpdateInfoResponse.PackDescription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->packdescription(), target);
  }

  // optional uint32 UrlCount = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->urlcount(), target);
  }

  // repeated .micromsg.SKBuiltinString_t DownLoadUrl = 7;
  for (unsigned int i = 0, n = this->downloadurl_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->downloadurl(i), deterministic, target);
  }

  // optional string PatchInfo = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patchinfo().data(), this->patchinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetUpdateInfoResponse.PatchInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->patchinfo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetUpdateInfoResponse)
  return target;
}

size_t GetUpdateInfoResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetUpdateInfoResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_packversion()) {
    // required uint32 PackVersion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packversion());
  }

  if (has_packsize()) {
    // required uint32 PackSize = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packsize());
  }

  return total_size;
}
size_t GetUpdateInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetUpdateInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000038) ^ 0x00000038) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 PackVersion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packversion());

    // required uint32 PackSize = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packsize());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SKBuiltinString_t DownLoadUrl = 7;
  {
    unsigned int count = this->downloadurl_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->downloadurl(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string PackMd5 = 3;
    if (has_packmd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packmd5());
    }

    // optional string PackDescription = 5;
    if (has_packdescription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packdescription());
    }

    // optional string PatchInfo = 8;
    if (has_patchinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patchinfo());
    }

  }
  // optional uint32 UrlCount = 6;
  if (has_urlcount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->urlcount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUpdateInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetUpdateInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUpdateInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetUpdateInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetUpdateInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetUpdateInfoResponse)
    MergeFrom(*source);
  }
}

void GetUpdateInfoResponse::MergeFrom(const GetUpdateInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetUpdateInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  downloadurl_.MergeFrom(from.downloadurl_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_packmd5();
      packmd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packmd5_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_packdescription();
      packdescription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packdescription_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_patchinfo();
      patchinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.patchinfo_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000010u) {
      packversion_ = from.packversion_;
    }
    if (cached_has_bits & 0x00000020u) {
      packsize_ = from.packsize_;
    }
    if (cached_has_bits & 0x00000040u) {
      urlcount_ = from.urlcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetUpdateInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetUpdateInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUpdateInfoResponse::CopyFrom(const GetUpdateInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetUpdateInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdateInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000038) != 0x00000038) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetUpdateInfoResponse::Swap(GetUpdateInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUpdateInfoResponse::InternalSwap(GetUpdateInfoResponse* other) {
  downloadurl_.InternalSwap(&other->downloadurl_);
  packmd5_.Swap(&other->packmd5_);
  packdescription_.Swap(&other->packdescription_);
  patchinfo_.Swap(&other->patchinfo_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(packversion_, other->packversion_);
  std::swap(packsize_, other->packsize_);
  std::swap(urlcount_, other->urlcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetUpdateInfoResponse::GetMetadata() const {
  protobuf_mmimg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmimg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetUpdateInfoResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetUpdateInfoResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetUpdateInfoResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000008u;
}
void GetUpdateInfoResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetUpdateInfoResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetUpdateInfoResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUpdateInfoResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetUpdateInfoResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetUpdateInfoResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetUpdateInfoResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetUpdateInfoResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetUpdateInfoResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetUpdateInfoResponse.BaseResponse)
}

// required uint32 PackVersion = 2;
bool GetUpdateInfoResponse::has_packversion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetUpdateInfoResponse::set_has_packversion() {
  _has_bits_[0] |= 0x00000010u;
}
void GetUpdateInfoResponse::clear_has_packversion() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetUpdateInfoResponse::clear_packversion() {
  packversion_ = 0u;
  clear_has_packversion();
}
::google::protobuf::uint32 GetUpdateInfoResponse::packversion() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUpdateInfoResponse.PackVersion)
  return packversion_;
}
void GetUpdateInfoResponse::set_packversion(::google::protobuf::uint32 value) {
  set_has_packversion();
  packversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetUpdateInfoResponse.PackVersion)
}

// optional string PackMd5 = 3;
bool GetUpdateInfoResponse::has_packmd5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetUpdateInfoResponse::set_has_packmd5() {
  _has_bits_[0] |= 0x00000001u;
}
void GetUpdateInfoResponse::clear_has_packmd5() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetUpdateInfoResponse::clear_packmd5() {
  packmd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packmd5();
}
const ::std::string& GetUpdateInfoResponse::packmd5() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUpdateInfoResponse.PackMd5)
  return packmd5_.GetNoArena();
}
void GetUpdateInfoResponse::set_packmd5(const ::std::string& value) {
  set_has_packmd5();
  packmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetUpdateInfoResponse.PackMd5)
}
#if LANG_CXX11
void GetUpdateInfoResponse::set_packmd5(::std::string&& value) {
  set_has_packmd5();
  packmd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetUpdateInfoResponse.PackMd5)
}
#endif
void GetUpdateInfoResponse::set_packmd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_packmd5();
  packmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetUpdateInfoResponse.PackMd5)
}
void GetUpdateInfoResponse::set_packmd5(const char* value, size_t size) {
  set_has_packmd5();
  packmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetUpdateInfoResponse.PackMd5)
}
::std::string* GetUpdateInfoResponse::mutable_packmd5() {
  set_has_packmd5();
  // @@protoc_insertion_point(field_mutable:micromsg.GetUpdateInfoResponse.PackMd5)
  return packmd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetUpdateInfoResponse::release_packmd5() {
  // @@protoc_insertion_point(field_release:micromsg.GetUpdateInfoResponse.PackMd5)
  clear_has_packmd5();
  return packmd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetUpdateInfoResponse::set_allocated_packmd5(::std::string* packmd5) {
  if (packmd5 != NULL) {
    set_has_packmd5();
  } else {
    clear_has_packmd5();
  }
  packmd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packmd5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetUpdateInfoResponse.PackMd5)
}

// required uint32 PackSize = 4;
bool GetUpdateInfoResponse::has_packsize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetUpdateInfoResponse::set_has_packsize() {
  _has_bits_[0] |= 0x00000020u;
}
void GetUpdateInfoResponse::clear_has_packsize() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetUpdateInfoResponse::clear_packsize() {
  packsize_ = 0u;
  clear_has_packsize();
}
::google::protobuf::uint32 GetUpdateInfoResponse::packsize() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUpdateInfoResponse.PackSize)
  return packsize_;
}
void GetUpdateInfoResponse::set_packsize(::google::protobuf::uint32 value) {
  set_has_packsize();
  packsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetUpdateInfoResponse.PackSize)
}

// optional string PackDescription = 5;
bool GetUpdateInfoResponse::has_packdescription() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetUpdateInfoResponse::set_has_packdescription() {
  _has_bits_[0] |= 0x00000002u;
}
void GetUpdateInfoResponse::clear_has_packdescription() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetUpdateInfoResponse::clear_packdescription() {
  packdescription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packdescription();
}
const ::std::string& GetUpdateInfoResponse::packdescription() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUpdateInfoResponse.PackDescription)
  return packdescription_.GetNoArena();
}
void GetUpdateInfoResponse::set_packdescription(const ::std::string& value) {
  set_has_packdescription();
  packdescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetUpdateInfoResponse.PackDescription)
}
#if LANG_CXX11
void GetUpdateInfoResponse::set_packdescription(::std::string&& value) {
  set_has_packdescription();
  packdescription_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetUpdateInfoResponse.PackDescription)
}
#endif
void GetUpdateInfoResponse::set_packdescription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_packdescription();
  packdescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetUpdateInfoResponse.PackDescription)
}
void GetUpdateInfoResponse::set_packdescription(const char* value, size_t size) {
  set_has_packdescription();
  packdescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetUpdateInfoResponse.PackDescription)
}
::std::string* GetUpdateInfoResponse::mutable_packdescription() {
  set_has_packdescription();
  // @@protoc_insertion_point(field_mutable:micromsg.GetUpdateInfoResponse.PackDescription)
  return packdescription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetUpdateInfoResponse::release_packdescription() {
  // @@protoc_insertion_point(field_release:micromsg.GetUpdateInfoResponse.PackDescription)
  clear_has_packdescription();
  return packdescription_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetUpdateInfoResponse::set_allocated_packdescription(::std::string* packdescription) {
  if (packdescription != NULL) {
    set_has_packdescription();
  } else {
    clear_has_packdescription();
  }
  packdescription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packdescription);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetUpdateInfoResponse.PackDescription)
}

// optional uint32 UrlCount = 6;
bool GetUpdateInfoResponse::has_urlcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GetUpdateInfoResponse::set_has_urlcount() {
  _has_bits_[0] |= 0x00000040u;
}
void GetUpdateInfoResponse::clear_has_urlcount() {
  _has_bits_[0] &= ~0x00000040u;
}
void GetUpdateInfoResponse::clear_urlcount() {
  urlcount_ = 0u;
  clear_has_urlcount();
}
::google::protobuf::uint32 GetUpdateInfoResponse::urlcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUpdateInfoResponse.UrlCount)
  return urlcount_;
}
void GetUpdateInfoResponse::set_urlcount(::google::protobuf::uint32 value) {
  set_has_urlcount();
  urlcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetUpdateInfoResponse.UrlCount)
}

// repeated .micromsg.SKBuiltinString_t DownLoadUrl = 7;
int GetUpdateInfoResponse::downloadurl_size() const {
  return downloadurl_.size();
}
void GetUpdateInfoResponse::clear_downloadurl() {
  downloadurl_.Clear();
}
const ::micromsg::SKBuiltinString_t& GetUpdateInfoResponse::downloadurl(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetUpdateInfoResponse.DownLoadUrl)
  return downloadurl_.Get(index);
}
::micromsg::SKBuiltinString_t* GetUpdateInfoResponse::mutable_downloadurl(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetUpdateInfoResponse.DownLoadUrl)
  return downloadurl_.Mutable(index);
}
::micromsg::SKBuiltinString_t* GetUpdateInfoResponse::add_downloadurl() {
  // @@protoc_insertion_point(field_add:micromsg.GetUpdateInfoResponse.DownLoadUrl)
  return downloadurl_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
GetUpdateInfoResponse::mutable_downloadurl() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetUpdateInfoResponse.DownLoadUrl)
  return &downloadurl_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
GetUpdateInfoResponse::downloadurl() const {
  // @@protoc_insertion_point(field_list:micromsg.GetUpdateInfoResponse.DownLoadUrl)
  return downloadurl_;
}

// optional string PatchInfo = 8;
bool GetUpdateInfoResponse::has_patchinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetUpdateInfoResponse::set_has_patchinfo() {
  _has_bits_[0] |= 0x00000004u;
}
void GetUpdateInfoResponse::clear_has_patchinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetUpdateInfoResponse::clear_patchinfo() {
  patchinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_patchinfo();
}
const ::std::string& GetUpdateInfoResponse::patchinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUpdateInfoResponse.PatchInfo)
  return patchinfo_.GetNoArena();
}
void GetUpdateInfoResponse::set_patchinfo(const ::std::string& value) {
  set_has_patchinfo();
  patchinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetUpdateInfoResponse.PatchInfo)
}
#if LANG_CXX11
void GetUpdateInfoResponse::set_patchinfo(::std::string&& value) {
  set_has_patchinfo();
  patchinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetUpdateInfoResponse.PatchInfo)
}
#endif
void GetUpdateInfoResponse::set_patchinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_patchinfo();
  patchinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetUpdateInfoResponse.PatchInfo)
}
void GetUpdateInfoResponse::set_patchinfo(const char* value, size_t size) {
  set_has_patchinfo();
  patchinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetUpdateInfoResponse.PatchInfo)
}
::std::string* GetUpdateInfoResponse::mutable_patchinfo() {
  set_has_patchinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.GetUpdateInfoResponse.PatchInfo)
  return patchinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetUpdateInfoResponse::release_patchinfo() {
  // @@protoc_insertion_point(field_release:micromsg.GetUpdateInfoResponse.PatchInfo)
  clear_has_patchinfo();
  return patchinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetUpdateInfoResponse::set_allocated_patchinfo(::std::string* patchinfo) {
  if (patchinfo != NULL) {
    set_has_patchinfo();
  } else {
    clear_has_patchinfo();
  }
  patchinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), patchinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetUpdateInfoResponse.PatchInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUpdatePackRequest::kBaseRequestFieldNumber;
const int GetUpdatePackRequest::kUpdateTypeFieldNumber;
const int GetUpdatePackRequest::kTotalLenFieldNumber;
const int GetUpdatePackRequest::kStartPosFieldNumber;
const int GetUpdatePackRequest::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUpdatePackRequest::GetUpdatePackRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmimg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetUpdatePackRequest)
}
GetUpdatePackRequest::GetUpdatePackRequest(const GetUpdatePackRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&updatetype_, &from.updatetype_,
    reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&updatetype_) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetUpdatePackRequest)
}

void GetUpdatePackRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(channel_));
}

GetUpdatePackRequest::~GetUpdatePackRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetUpdatePackRequest)
  SharedDtor();
}

void GetUpdatePackRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetUpdatePackRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUpdatePackRequest::descriptor() {
  protobuf_mmimg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmimg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetUpdatePackRequest& GetUpdatePackRequest::default_instance() {
  protobuf_mmimg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetUpdatePackRequest* GetUpdatePackRequest::New(::google::protobuf::Arena* arena) const {
  GetUpdatePackRequest* n = new GetUpdatePackRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetUpdatePackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetUpdatePackRequest)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&updatetype_, 0, reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&updatetype_) + sizeof(channel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetUpdatePackRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetUpdatePackRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 UpdateType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_updatetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TotalLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 StartPos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Channel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetUpdatePackRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetUpdatePackRequest)
  return false;
#undef DO_
}

void GetUpdatePackRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetUpdatePackRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 UpdateType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->updatetype(), output);
  }

  // required uint32 TotalLen = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totallen(), output);
  }

  // required uint32 StartPos = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->startpos(), output);
  }

  // optional uint32 Channel = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetUpdatePackRequest)
}

::google::protobuf::uint8* GetUpdatePackRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetUpdatePackRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 UpdateType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->updatetype(), target);
  }

  // required uint32 TotalLen = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->totallen(), target);
  }

  // required uint32 StartPos = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->startpos(), target);
  }

  // optional uint32 Channel = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetUpdatePackRequest)
  return target;
}

size_t GetUpdatePackRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetUpdatePackRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_updatetype()) {
    // required uint32 UpdateType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updatetype());
  }

  if (has_totallen()) {
    // required uint32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());
  }

  if (has_startpos()) {
    // required uint32 StartPos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());
  }

  return total_size;
}
size_t GetUpdatePackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetUpdatePackRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 UpdateType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updatetype());

    // required uint32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());

    // required uint32 StartPos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 Channel = 5;
  if (has_channel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUpdatePackRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetUpdatePackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUpdatePackRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetUpdatePackRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetUpdatePackRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetUpdatePackRequest)
    MergeFrom(*source);
  }
}

void GetUpdatePackRequest::MergeFrom(const GetUpdatePackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetUpdatePackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      updatetype_ = from.updatetype_;
    }
    if (cached_has_bits & 0x00000004u) {
      totallen_ = from.totallen_;
    }
    if (cached_has_bits & 0x00000008u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00000010u) {
      channel_ = from.channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetUpdatePackRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetUpdatePackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUpdatePackRequest::CopyFrom(const GetUpdatePackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetUpdatePackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdatePackRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetUpdatePackRequest::Swap(GetUpdatePackRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUpdatePackRequest::InternalSwap(GetUpdatePackRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(updatetype_, other->updatetype_);
  std::swap(totallen_, other->totallen_);
  std::swap(startpos_, other->startpos_);
  std::swap(channel_, other->channel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetUpdatePackRequest::GetMetadata() const {
  protobuf_mmimg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmimg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetUpdatePackRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetUpdatePackRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetUpdatePackRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void GetUpdatePackRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetUpdatePackRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetUpdatePackRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUpdatePackRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetUpdatePackRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetUpdatePackRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetUpdatePackRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetUpdatePackRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetUpdatePackRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetUpdatePackRequest.BaseRequest)
}

// required uint32 UpdateType = 2;
bool GetUpdatePackRequest::has_updatetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetUpdatePackRequest::set_has_updatetype() {
  _has_bits_[0] |= 0x00000002u;
}
void GetUpdatePackRequest::clear_has_updatetype() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetUpdatePackRequest::clear_updatetype() {
  updatetype_ = 0u;
  clear_has_updatetype();
}
::google::protobuf::uint32 GetUpdatePackRequest::updatetype() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUpdatePackRequest.UpdateType)
  return updatetype_;
}
void GetUpdatePackRequest::set_updatetype(::google::protobuf::uint32 value) {
  set_has_updatetype();
  updatetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetUpdatePackRequest.UpdateType)
}

// required uint32 TotalLen = 3;
bool GetUpdatePackRequest::has_totallen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetUpdatePackRequest::set_has_totallen() {
  _has_bits_[0] |= 0x00000004u;
}
void GetUpdatePackRequest::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetUpdatePackRequest::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
::google::protobuf::uint32 GetUpdatePackRequest::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUpdatePackRequest.TotalLen)
  return totallen_;
}
void GetUpdatePackRequest::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetUpdatePackRequest.TotalLen)
}

// required uint32 StartPos = 4;
bool GetUpdatePackRequest::has_startpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetUpdatePackRequest::set_has_startpos() {
  _has_bits_[0] |= 0x00000008u;
}
void GetUpdatePackRequest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetUpdatePackRequest::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
::google::protobuf::uint32 GetUpdatePackRequest::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUpdatePackRequest.StartPos)
  return startpos_;
}
void GetUpdatePackRequest::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetUpdatePackRequest.StartPos)
}

// optional uint32 Channel = 5;
bool GetUpdatePackRequest::has_channel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetUpdatePackRequest::set_has_channel() {
  _has_bits_[0] |= 0x00000010u;
}
void GetUpdatePackRequest::clear_has_channel() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetUpdatePackRequest::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
::google::protobuf::uint32 GetUpdatePackRequest::channel() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUpdatePackRequest.Channel)
  return channel_;
}
void GetUpdatePackRequest::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetUpdatePackRequest.Channel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUpdatePackResponse::kBaseResponseFieldNumber;
const int GetUpdatePackResponse::kTotalLenFieldNumber;
const int GetUpdatePackResponse::kStartPosFieldNumber;
const int GetUpdatePackResponse::kDataLenFieldNumber;
const int GetUpdatePackResponse::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUpdatePackResponse::GetUpdatePackResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmimg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetUpdatePackResponse)
}
GetUpdatePackResponse::GetUpdatePackResponse(const GetUpdatePackResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::micromsg::SKBuiltinBuffer_t(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&totallen_, &from.totallen_,
    reinterpret_cast<char*>(&datalen_) -
    reinterpret_cast<char*>(&totallen_) + sizeof(datalen_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetUpdatePackResponse)
}

void GetUpdatePackResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&datalen_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(datalen_));
}

GetUpdatePackResponse::~GetUpdatePackResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetUpdatePackResponse)
  SharedDtor();
}

void GetUpdatePackResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void GetUpdatePackResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUpdatePackResponse::descriptor() {
  protobuf_mmimg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmimg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetUpdatePackResponse& GetUpdatePackResponse::default_instance() {
  protobuf_mmimg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetUpdatePackResponse* GetUpdatePackResponse::New(::google::protobuf::Arena* arena) const {
  GetUpdatePackResponse* n = new GetUpdatePackResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetUpdatePackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetUpdatePackResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&totallen_, 0, reinterpret_cast<char*>(&datalen_) -
      reinterpret_cast<char*>(&totallen_) + sizeof(datalen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetUpdatePackResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetUpdatePackResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TotalLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 StartPos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DataLen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_datalen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datalen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetUpdatePackResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetUpdatePackResponse)
  return false;
#undef DO_
}

void GetUpdatePackResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetUpdatePackResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 TotalLen = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totallen(), output);
  }

  // required uint32 StartPos = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->startpos(), output);
  }

  // required uint32 DataLen = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->datalen(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetUpdatePackResponse)
}

::google::protobuf::uint8* GetUpdatePackResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetUpdatePackResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 TotalLen = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->totallen(), target);
  }

  // required uint32 StartPos = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->startpos(), target);
  }

  // required uint32 DataLen = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->datalen(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetUpdatePackResponse)
  return target;
}

size_t GetUpdatePackResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetUpdatePackResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_data()) {
    // required .micromsg.SKBuiltinBuffer_t Data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  if (has_totallen()) {
    // required uint32 TotalLen = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());
  }

  if (has_startpos()) {
    // required uint32 StartPos = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());
  }

  if (has_datalen()) {
    // required uint32 DataLen = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalen());
  }

  return total_size;
}
size_t GetUpdatePackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetUpdatePackResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinBuffer_t Data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);

    // required uint32 TotalLen = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());

    // required uint32 StartPos = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());

    // required uint32 DataLen = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUpdatePackResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetUpdatePackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUpdatePackResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetUpdatePackResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetUpdatePackResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetUpdatePackResponse)
    MergeFrom(*source);
  }
}

void GetUpdatePackResponse::MergeFrom(const GetUpdatePackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetUpdatePackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_data()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000004u) {
      totallen_ = from.totallen_;
    }
    if (cached_has_bits & 0x00000008u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00000010u) {
      datalen_ = from.datalen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetUpdatePackResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetUpdatePackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUpdatePackResponse::CopyFrom(const GetUpdatePackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetUpdatePackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdatePackResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void GetUpdatePackResponse::Swap(GetUpdatePackResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUpdatePackResponse::InternalSwap(GetUpdatePackResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(data_, other->data_);
  std::swap(totallen_, other->totallen_);
  std::swap(startpos_, other->startpos_);
  std::swap(datalen_, other->datalen_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetUpdatePackResponse::GetMetadata() const {
  protobuf_mmimg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmimg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetUpdatePackResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetUpdatePackResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetUpdatePackResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetUpdatePackResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetUpdatePackResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetUpdatePackResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUpdatePackResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetUpdatePackResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetUpdatePackResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetUpdatePackResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetUpdatePackResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetUpdatePackResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetUpdatePackResponse.BaseResponse)
}

// required uint32 TotalLen = 2;
bool GetUpdatePackResponse::has_totallen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetUpdatePackResponse::set_has_totallen() {
  _has_bits_[0] |= 0x00000004u;
}
void GetUpdatePackResponse::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetUpdatePackResponse::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
::google::protobuf::uint32 GetUpdatePackResponse::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUpdatePackResponse.TotalLen)
  return totallen_;
}
void GetUpdatePackResponse::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetUpdatePackResponse.TotalLen)
}

// required uint32 StartPos = 3;
bool GetUpdatePackResponse::has_startpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetUpdatePackResponse::set_has_startpos() {
  _has_bits_[0] |= 0x00000008u;
}
void GetUpdatePackResponse::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetUpdatePackResponse::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
::google::protobuf::uint32 GetUpdatePackResponse::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUpdatePackResponse.StartPos)
  return startpos_;
}
void GetUpdatePackResponse::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetUpdatePackResponse.StartPos)
}

// required uint32 DataLen = 4;
bool GetUpdatePackResponse::has_datalen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetUpdatePackResponse::set_has_datalen() {
  _has_bits_[0] |= 0x00000010u;
}
void GetUpdatePackResponse::clear_has_datalen() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetUpdatePackResponse::clear_datalen() {
  datalen_ = 0u;
  clear_has_datalen();
}
::google::protobuf::uint32 GetUpdatePackResponse::datalen() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUpdatePackResponse.DataLen)
  return datalen_;
}
void GetUpdatePackResponse::set_datalen(::google::protobuf::uint32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetUpdatePackResponse.DataLen)
}

// required .micromsg.SKBuiltinBuffer_t Data = 5;
bool GetUpdatePackResponse::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetUpdatePackResponse::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void GetUpdatePackResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetUpdatePackResponse::clear_data() {
  if (data_ != NULL) data_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_data();
}
const ::micromsg::SKBuiltinBuffer_t& GetUpdatePackResponse::data() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUpdatePackResponse.Data)
  return data_ != NULL ? *data_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetUpdatePackResponse::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetUpdatePackResponse.Data)
  return data_;
}
::micromsg::SKBuiltinBuffer_t* GetUpdatePackResponse::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.GetUpdatePackResponse.Data)
  clear_has_data();
  ::micromsg::SKBuiltinBuffer_t* temp = data_;
  data_ = NULL;
  return temp;
}
void GetUpdatePackResponse::set_allocated_data(::micromsg::SKBuiltinBuffer_t* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetUpdatePackResponse.Data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg

// @@protoc_insertion_point(global_scope)
